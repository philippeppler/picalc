
picalc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ef2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00802000  00004ef2  00004f86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c95  00802068  00802068  00004fee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004fee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000504c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000770  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dd0b  00000000  00000000  000057fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004cce  00000000  00000000  00013507  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004df9  00000000  00000000  000181d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001944  00000000  00000000  0001cfd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005601  00000000  00000000  0001e914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007ee8  00000000  00000000  00023f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a8  00000000  00000000  0002bdfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      10:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      14:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      18:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      1c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      20:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      24:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      28:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      2c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      30:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      34:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      38:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__vector_14>
      3c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      40:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      44:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      48:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      4c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      50:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      54:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      58:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      5c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      60:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      64:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      68:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      6c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      70:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      74:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      78:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      7c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      80:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      84:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      88:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      8c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      90:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      94:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      98:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      9c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ac:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      bc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      dc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ec:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      fc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     100:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     104:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     108:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     10c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     110:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     114:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     118:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     11c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     120:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     124:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     128:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     12c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     130:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     134:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__vector_77>
     138:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     13c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     140:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     144:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     148:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     14c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     150:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     154:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     158:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     15c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     160:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     164:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     168:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     16c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     170:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     174:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     178:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     17c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     180:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     184:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     188:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     18c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     190:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     194:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     198:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     19c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1ac:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1b0:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__vector_108>
     1b4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1b8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1bc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1dc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1ec:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1fc:	50 12       	cpse	r5, r16
     1fe:	50 12       	cpse	r5, r16
     200:	50 12       	cpse	r5, r16
     202:	9d 12       	cpse	r9, r29
     204:	85 12       	cpse	r8, r21
     206:	9a 12       	cpse	r9, r26
     208:	50 12       	cpse	r5, r16
     20a:	50 12       	cpse	r5, r16
     20c:	9d 12       	cpse	r9, r29
     20e:	85 12       	cpse	r8, r21

00000210 <__trampolines_start>:
     210:	0c 94 9d 12 	jmp	0x253a	; 0x253a <prvTimerTask+0x212>
     214:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <vEventGroupSetBitsCallback>
     218:	0c 94 cf 18 	jmp	0x319e	; 0x319e <vDisplayUpdateTask>
     21c:	0c 94 94 11 	jmp	0x2328	; 0x2328 <prvTimerTask>
     220:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <vGUI>
     224:	0c 94 85 12 	jmp	0x250a	; 0x250a <prvTimerTask+0x1e2>
     228:	0c 94 9e 14 	jmp	0x293c	; 0x293c <vButton>
     22c:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <prvTimerTask+0x20c>
     230:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <vCalc>
     234:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <prvTimerTask+0x178>
     238:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <prvIdleTask>

0000023c <__trampolines_end>:
     23c:	6e 61       	ori	r22, 0x1E	; 30
     23e:	6e 00       	.word	0x006e	; ????

00000240 <__c.2332>:
     240:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     250:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     260:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     270:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     280:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     290:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     300:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     310:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     320:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     330:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	cf ef       	ldi	r28, 0xFF	; 255
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df e3       	ldi	r29, 0x3F	; 63
     348:	de bf       	out	0x3e, r29	; 62
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	0c bf       	out	0x3c, r16	; 60

0000034e <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     34e:	ed ef       	ldi	r30, 0xFD	; 253
     350:	fc e2       	ldi	r31, 0x2C	; 44
     352:	8a ea       	ldi	r24, 0xAA	; 170
     354:	90 e4       	ldi	r25, 0x40	; 64
     356:	81 93       	st	Z+, r24
     358:	e0 30       	cpi	r30, 0x00	; 0
     35a:	f9 07       	cpc	r31, r25
     35c:	e0 f3       	brcs	.-8      	; 0x356 <init_mem+0x8>

0000035e <__do_copy_data>:
     35e:	10 e2       	ldi	r17, 0x20	; 32
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	b0 e2       	ldi	r27, 0x20	; 32
     364:	e2 ef       	ldi	r30, 0xF2	; 242
     366:	fe e4       	ldi	r31, 0x4E	; 78
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	0b bf       	out	0x3b, r16	; 59
     36c:	02 c0       	rjmp	.+4      	; 0x372 <__do_copy_data+0x14>
     36e:	07 90       	elpm	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	a8 36       	cpi	r26, 0x68	; 104
     374:	b1 07       	cpc	r27, r17
     376:	d9 f7       	brne	.-10     	; 0x36e <__do_copy_data+0x10>

00000378 <__do_clear_bss>:
     378:	2c e2       	ldi	r18, 0x2C	; 44
     37a:	a8 e6       	ldi	r26, 0x68	; 104
     37c:	b0 e2       	ldi	r27, 0x20	; 32
     37e:	01 c0       	rjmp	.+2      	; 0x382 <.do_clear_bss_start>

00000380 <.do_clear_bss_loop>:
     380:	1d 92       	st	X+, r1

00000382 <.do_clear_bss_start>:
     382:	ad 3f       	cpi	r26, 0xFD	; 253
     384:	b2 07       	cpc	r27, r18
     386:	e1 f7       	brne	.-8      	; 0x380 <.do_clear_bss_loop>
     388:	0e 94 29 13 	call	0x2652	; 0x2652 <main>
     38c:	0c 94 77 27 	jmp	0x4eee	; 0x4eee <_exit>

00000390 <__bad_interrupt>:
     390:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000394 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     39c:	80 ea       	ldi	r24, 0xA0	; 160
     39e:	96 e0       	ldi	r25, 0x06	; 6
     3a0:	20 e1       	ldi	r18, 0x10	; 16
     3a2:	fc 01       	movw	r30, r24
     3a4:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     3a6:	80 ea       	ldi	r24, 0xA0	; 160
     3a8:	96 e0       	ldi	r25, 0x06	; 6
     3aa:	20 e2       	ldi	r18, 0x20	; 32
     3ac:	fc 01       	movw	r30, r24
     3ae:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     3b0:	80 ea       	ldi	r24, 0xA0	; 160
     3b2:	96 e0       	ldi	r25, 0x06	; 6
     3b4:	20 e4       	ldi	r18, 0x40	; 64
     3b6:	fc 01       	movw	r30, r24
     3b8:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3ba:	80 ea       	ldi	r24, 0xA0	; 160
     3bc:	96 e0       	ldi	r25, 0x06	; 6
     3be:	20 e8       	ldi	r18, 0x80	; 128
     3c0:	fc 01       	movw	r30, r24
     3c2:	22 83       	std	Z+2, r18	; 0x02
 }
     3c4:	00 00       	nop
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3d4:	80 ea       	ldi	r24, 0xA0	; 160
     3d6:	96 e0       	ldi	r25, 0x06	; 6
     3d8:	fc 01       	movw	r30, r24
     3da:	80 85       	ldd	r24, Z+8	; 0x08
     3dc:	88 2f       	mov	r24, r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	80 71       	andi	r24, 0x10	; 16
     3e2:	99 27       	eor	r25, r25
     3e4:	95 95       	asr	r25
     3e6:	87 95       	ror	r24
     3e8:	95 95       	asr	r25
     3ea:	87 95       	ror	r24
     3ec:	95 95       	asr	r25
     3ee:	87 95       	ror	r24
     3f0:	95 95       	asr	r25
     3f2:	87 95       	ror	r24
     3f4:	89 2b       	or	r24, r25
     3f6:	89 f4       	brne	.+34     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		if(b1Count < 60000) {
     3f8:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <__data_end>
     3fc:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <__data_end+0x1>
     400:	80 36       	cpi	r24, 0x60	; 96
     402:	9a 4e       	sbci	r25, 0xEA	; 234
     404:	20 f5       	brcc	.+72     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			b1Count++;
     406:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <__data_end>
     40a:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <__data_end+0x1>
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	80 93 68 20 	sts	0x2068, r24	; 0x802068 <__data_end>
     414:	90 93 69 20 	sts	0x2069, r25	; 0x802069 <__data_end+0x1>
     418:	1a c0       	rjmp	.+52     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     41a:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <__data_end>
     41e:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <__data_end+0x1>
     422:	0b 97       	sbiw	r24, 0x0b	; 11
     424:	68 f0       	brcs	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     426:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <__data_end>
     42a:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <__data_end+0x1>
     42e:	c3 97       	sbiw	r24, 0x33	; 51
     430:	18 f0       	brcs	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     432:	10 92 e4 2c 	sts	0x2CE4, r1	; 0x802ce4 <b1Status>
     436:	07 c0       	rjmp	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	80 93 e4 2c 	sts	0x2CE4, r24	; 0x802ce4 <b1Status>
     43e:	03 c0       	rjmp	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			}
		} else {
			b1Status = NOT_PRESSED;
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	80 93 e4 2c 	sts	0x2CE4, r24	; 0x802ce4 <b1Status>
		}
		b1Count = 0;
     446:	10 92 68 20 	sts	0x2068, r1	; 0x802068 <__data_end>
     44a:	10 92 69 20 	sts	0x2069, r1	; 0x802069 <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     44e:	80 ea       	ldi	r24, 0xA0	; 160
     450:	96 e0       	ldi	r25, 0x06	; 6
     452:	fc 01       	movw	r30, r24
     454:	80 85       	ldd	r24, Z+8	; 0x08
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	80 72       	andi	r24, 0x20	; 32
     45c:	99 27       	eor	r25, r25
     45e:	95 95       	asr	r25
     460:	87 95       	ror	r24
     462:	95 95       	asr	r25
     464:	87 95       	ror	r24
     466:	95 95       	asr	r25
     468:	87 95       	ror	r24
     46a:	95 95       	asr	r25
     46c:	87 95       	ror	r24
     46e:	95 95       	asr	r25
     470:	87 95       	ror	r24
     472:	89 2b       	or	r24, r25
     474:	89 f4       	brne	.+34     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		if(b2Count < 60000) {
     476:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <b2Count.3830>
     47a:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <b2Count.3830+0x1>
     47e:	80 36       	cpi	r24, 0x60	; 96
     480:	9a 4e       	sbci	r25, 0xEA	; 234
     482:	20 f5       	brcc	.+72     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
			b2Count++;
     484:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <b2Count.3830>
     488:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <b2Count.3830+0x1>
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	80 93 6a 20 	sts	0x206A, r24	; 0x80206a <b2Count.3830>
     492:	90 93 6b 20 	sts	0x206B, r25	; 0x80206b <b2Count.3830+0x1>
     496:	1a c0       	rjmp	.+52     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     498:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <b2Count.3830>
     49c:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <b2Count.3830+0x1>
     4a0:	0b 97       	sbiw	r24, 0x0b	; 11
     4a2:	68 f0       	brcs	.+26     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4a4:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <b2Count.3830>
     4a8:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <b2Count.3830+0x1>
     4ac:	c3 97       	sbiw	r24, 0x33	; 51
     4ae:	18 f0       	brcs	.+6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     4b0:	10 92 e5 2c 	sts	0x2CE5, r1	; 0x802ce5 <b2Status>
     4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 e5 2c 	sts	0x2CE5, r24	; 0x802ce5 <b2Status>
     4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
			}
		} else {
			b2Status = NOT_PRESSED;			
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	80 93 e5 2c 	sts	0x2CE5, r24	; 0x802ce5 <b2Status>
		}
		b2Count = 0;
     4c4:	10 92 6a 20 	sts	0x206A, r1	; 0x80206a <b2Count.3830>
     4c8:	10 92 6b 20 	sts	0x206B, r1	; 0x80206b <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     4cc:	80 ea       	ldi	r24, 0xA0	; 160
     4ce:	96 e0       	ldi	r25, 0x06	; 6
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 85       	ldd	r24, Z+8	; 0x08
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	80 74       	andi	r24, 0x40	; 64
     4da:	99 27       	eor	r25, r25
     4dc:	08 2e       	mov	r0, r24
     4de:	89 2f       	mov	r24, r25
     4e0:	00 0c       	add	r0, r0
     4e2:	88 1f       	adc	r24, r24
     4e4:	99 0b       	sbc	r25, r25
     4e6:	00 0c       	add	r0, r0
     4e8:	88 1f       	adc	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	89 2b       	or	r24, r25
     4ee:	89 f4       	brne	.+34     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
		if(b3Count < 60000) {
     4f0:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <b3Count.3831>
     4f4:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <b3Count.3831+0x1>
     4f8:	80 36       	cpi	r24, 0x60	; 96
     4fa:	9a 4e       	sbci	r25, 0xEA	; 234
     4fc:	20 f5       	brcc	.+72     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
			b3Count++;
     4fe:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <b3Count.3831>
     502:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <b3Count.3831+0x1>
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	80 93 6c 20 	sts	0x206C, r24	; 0x80206c <b3Count.3831>
     50c:	90 93 6d 20 	sts	0x206D, r25	; 0x80206d <b3Count.3831+0x1>
     510:	1a c0       	rjmp	.+52     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     512:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <b3Count.3831>
     516:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <b3Count.3831+0x1>
     51a:	0b 97       	sbiw	r24, 0x0b	; 11
     51c:	68 f0       	brcs	.+26     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     51e:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <b3Count.3831>
     522:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <b3Count.3831+0x1>
     526:	c3 97       	sbiw	r24, 0x33	; 51
     528:	18 f0       	brcs	.+6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     52a:	10 92 e6 2c 	sts	0x2CE6, r1	; 0x802ce6 <b3Status>
     52e:	07 c0       	rjmp	.+14     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 e6 2c 	sts	0x2CE6, r24	; 0x802ce6 <b3Status>
     536:	03 c0       	rjmp	.+6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
			}
		} else {
			b3Status = NOT_PRESSED;
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	80 93 e6 2c 	sts	0x2CE6, r24	; 0x802ce6 <b3Status>
		}
		b3Count = 0;
     53e:	10 92 6c 20 	sts	0x206C, r1	; 0x80206c <b3Count.3831>
     542:	10 92 6d 20 	sts	0x206D, r1	; 0x80206d <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     546:	80 ea       	ldi	r24, 0xA0	; 160
     548:	96 e0       	ldi	r25, 0x06	; 6
     54a:	fc 01       	movw	r30, r24
     54c:	80 85       	ldd	r24, Z+8	; 0x08
     54e:	88 23       	and	r24, r24
     550:	8c f0       	brlt	.+34     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
		if(b4Count < 60000) {
     552:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <b4Count.3832>
     556:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <b4Count.3832+0x1>
     55a:	80 36       	cpi	r24, 0x60	; 96
     55c:	9a 4e       	sbci	r25, 0xEA	; 234
     55e:	20 f5       	brcc	.+72     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			b4Count++;
     560:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <b4Count.3832>
     564:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <b4Count.3832+0x1>
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <b4Count.3832>
     56e:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     574:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <b4Count.3832>
     578:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <b4Count.3832+0x1>
     57c:	0b 97       	sbiw	r24, 0x0b	; 11
     57e:	68 f0       	brcs	.+26     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     580:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <b4Count.3832>
     584:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <b4Count.3832+0x1>
     588:	c3 97       	sbiw	r24, 0x33	; 51
     58a:	18 f0       	brcs	.+6      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     58c:	10 92 e7 2c 	sts	0x2CE7, r1	; 0x802ce7 <b4Status>
     590:	07 c0       	rjmp	.+14     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	80 93 e7 2c 	sts	0x2CE7, r24	; 0x802ce7 <b4Status>
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			}
		} else {
			b4Status = NOT_PRESSED;
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	80 93 e7 2c 	sts	0x2CE7, r24	; 0x802ce7 <b4Status>
		}
		b4Count = 0;
     5a0:	10 92 6e 20 	sts	0x206E, r1	; 0x80206e <b4Count.3832>
     5a4:	10 92 6f 20 	sts	0x206F, r1	; 0x80206f <b4Count.3832+0x1>
	}
 }
     5a8:	00 00       	nop
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	88 2f       	mov	r24, r24
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	81 30       	cpi	r24, 0x01	; 1
     5c4:	91 05       	cpc	r25, r1
     5c6:	79 f0       	breq	.+30     	; 0x5e6 <getButtonPress+0x36>
     5c8:	82 30       	cpi	r24, 0x02	; 2
     5ca:	91 05       	cpc	r25, r1
     5cc:	1c f4       	brge	.+6      	; 0x5d4 <getButtonPress+0x24>
     5ce:	89 2b       	or	r24, r25
     5d0:	39 f0       	breq	.+14     	; 0x5e0 <getButtonPress+0x30>
     5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <getButtonPress+0x48>
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	91 05       	cpc	r25, r1
     5d8:	49 f0       	breq	.+18     	; 0x5ec <getButtonPress+0x3c>
     5da:	03 97       	sbiw	r24, 0x03	; 3
     5dc:	51 f0       	breq	.+20     	; 0x5f2 <getButtonPress+0x42>
     5de:	0c c0       	rjmp	.+24     	; 0x5f8 <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     5e0:	80 91 e4 2c 	lds	r24, 0x2CE4	; 0x802ce4 <b1Status>
     5e4:	0a c0       	rjmp	.+20     	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     5e6:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <b2Status>
     5ea:	07 c0       	rjmp	.+14     	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     5ec:	80 91 e6 2c 	lds	r24, 0x2CE6	; 0x802ce6 <b3Status>
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     5f2:	80 91 e7 2c 	lds	r24, 0x2CE7	; 0x802ce7 <b4Status>
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	0f 90       	pop	r0
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     602:	0f 93       	push	r16
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	1f 92       	push	r1
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     60e:	2f b7       	in	r18, 0x3f	; 63
     610:	29 83       	std	Y+1, r18	; 0x01
     612:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     614:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     616:	fc 01       	movw	r30, r24
     618:	08 ed       	ldi	r16, 0xD8	; 216
     61a:	04 bf       	out	0x34, r16	; 52
     61c:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	8f bf       	out	0x3f, r24	; 63
#endif
}
     622:	0f 90       	pop	r0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	0f 91       	pop	r16
     62a:	08 95       	ret

0000062c <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     62c:	61 11       	cpse	r22, r1
     62e:	02 c0       	rjmp	.+4      	; 0x634 <CLKSYS_XOSC_Config+0x8>
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	01 c0       	rjmp	.+2      	; 0x636 <CLKSYS_XOSC_Config+0xa>
     634:	90 e2       	ldi	r25, 0x20	; 32
     636:	84 2b       	or	r24, r20
     638:	89 2b       	or	r24, r25
     63a:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     63e:	08 95       	ret

00000640 <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     640:	6f 71       	andi	r22, 0x1F	; 31
     642:	86 2b       	or	r24, r22
     644:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     648:	08 95       	ret

0000064a <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     64a:	e0 e5       	ldi	r30, 0x50	; 80
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	90 81       	ld	r25, Z
     650:	28 2f       	mov	r18, r24
     652:	20 95       	com	r18
     654:	92 23       	and	r25, r18
     656:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     658:	90 81       	ld	r25, Z
	return clkEnabled;
}
     65a:	89 23       	and	r24, r25
     65c:	08 95       	ret

0000065e <CLKSYS_Prescalers_Config>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     65e:	68 2b       	or	r22, r24
     660:	81 e4       	ldi	r24, 0x41	; 65
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 01 03 	call	0x602	; 0x602 <CCPWrite>
     668:	08 95       	ret

0000066a <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     672:	00 e4       	ldi	r16, 0x40	; 64
     674:	10 e0       	ldi	r17, 0x00	; 0
     676:	f8 01       	movw	r30, r16
     678:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
     67a:	68 7f       	andi	r22, 0xF8	; 248
     67c:	68 2b       	or	r22, r24
     67e:	80 e4       	ldi	r24, 0x40	; 64
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 01 03 	call	0x602	; 0x602 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     686:	f8 01       	movw	r30, r16
     688:	80 81       	ld	r24, Z
	return clkCtrl;
}
     68a:	8c 23       	and	r24, r28
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     694:	fc 01       	movw	r30, r24
     696:	90 81       	ld	r25, Z
     698:	90 7f       	andi	r25, 0xF0	; 240
     69a:	69 2b       	or	r22, r25
     69c:	60 83       	st	Z, r22
     69e:	08 95       	ret

000006a0 <TC0_ConfigWGM>:
     6a0:	fc 01       	movw	r30, r24
     6a2:	91 81       	ldd	r25, Z+1	; 0x01
     6a4:	98 7f       	andi	r25, 0xF8	; 248
     6a6:	69 2b       	or	r22, r25
     6a8:	61 83       	std	Z+1, r22	; 0x01
     6aa:	08 95       	ret

000006ac <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     6ac:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     6ae:	96 81       	ldd	r25, Z+6	; 0x06
     6b0:	9c 7f       	andi	r25, 0xFC	; 252
     6b2:	69 2b       	or	r22, r25
     6b4:	66 83       	std	Z+6, r22	; 0x06
     6b6:	08 95       	ret

000006b8 <software_reset>:
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     6b8:	00 00       	nop
     6ba:	88 ed       	ldi	r24, 0xD8	; 216
     6bc:	84 bf       	out	0x34, r24	; 52
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     6c4:	08 95       	ret

000006c6 <vApplicationStackOverflowHook>:
     6c6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <software_reset>
     6ca:	08 95       	ret

000006cc <xEventGroupCreate>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	80 e1       	ldi	r24, 0x10	; 16
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
     6d8:	ec 01       	movw	r28, r24
     6da:	00 97       	sbiw	r24, 0x00	; 0
     6dc:	41 f0       	breq	.+16     	; 0x6ee <xEventGroupCreate+0x22>
     6de:	fc 01       	movw	r30, r24
     6e0:	11 92       	st	Z+, r1
     6e2:	11 92       	st	Z+, r1
     6e4:	11 92       	st	Z+, r1
     6e6:	11 92       	st	Z+, r1
     6e8:	cf 01       	movw	r24, r30
     6ea:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
     6ee:	ce 01       	movw	r24, r28
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <xEventGroupWaitBits>:
     6f6:	2f 92       	push	r2
     6f8:	3f 92       	push	r3
     6fa:	4f 92       	push	r4
     6fc:	5f 92       	push	r5
     6fe:	6f 92       	push	r6
     700:	7f 92       	push	r7
     702:	8f 92       	push	r8
     704:	9f 92       	push	r9
     706:	af 92       	push	r10
     708:	bf 92       	push	r11
     70a:	cf 92       	push	r12
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
     71c:	4a 01       	movw	r8, r20
     71e:	5b 01       	movw	r10, r22
     720:	62 2e       	mov	r6, r18
     722:	70 2e       	mov	r7, r16
     724:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
     728:	28 80       	ld	r2, Y
     72a:	39 80       	ldd	r3, Y+1	; 0x01
     72c:	4a 80       	ldd	r4, Y+2	; 0x02
     72e:	5b 80       	ldd	r5, Y+3	; 0x03
     730:	01 11       	cpse	r16, r1
     732:	0d c0       	rjmp	.+26     	; 0x74e <xEventGroupWaitBits+0x58>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	b2 01       	movw	r22, r4
     738:	a1 01       	movw	r20, r2
     73a:	48 21       	and	r20, r8
     73c:	59 21       	and	r21, r9
     73e:	6a 21       	and	r22, r10
     740:	7b 21       	and	r23, r11
     742:	45 2b       	or	r20, r21
     744:	46 2b       	or	r20, r22
     746:	47 2b       	or	r20, r23
     748:	79 f4       	brne	.+30     	; 0x768 <xEventGroupWaitBits+0x72>
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	0d c0       	rjmp	.+26     	; 0x768 <xEventGroupWaitBits+0x72>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	b2 01       	movw	r22, r4
     752:	a1 01       	movw	r20, r2
     754:	48 21       	and	r20, r8
     756:	59 21       	and	r21, r9
     758:	6a 21       	and	r22, r10
     75a:	7b 21       	and	r23, r11
     75c:	48 15       	cp	r20, r8
     75e:	59 05       	cpc	r21, r9
     760:	6a 05       	cpc	r22, r10
     762:	7b 05       	cpc	r23, r11
     764:	09 f0       	breq	.+2      	; 0x768 <xEventGroupWaitBits+0x72>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	88 23       	and	r24, r24
     76a:	81 f0       	breq	.+32     	; 0x78c <xEventGroupWaitBits+0x96>
     76c:	66 20       	and	r6, r6
     76e:	09 f4       	brne	.+2      	; 0x772 <xEventGroupWaitBits+0x7c>
     770:	70 c0       	rjmp	.+224    	; 0x852 <xEventGroupWaitBits+0x15c>
     772:	80 94       	com	r8
     774:	90 94       	com	r9
     776:	a0 94       	com	r10
     778:	b0 94       	com	r11
     77a:	82 20       	and	r8, r2
     77c:	93 20       	and	r9, r3
     77e:	a4 20       	and	r10, r4
     780:	b5 20       	and	r11, r5
     782:	88 82       	st	Y, r8
     784:	99 82       	std	Y+1, r9	; 0x01
     786:	aa 82       	std	Y+2, r10	; 0x02
     788:	bb 82       	std	Y+3, r11	; 0x03
     78a:	63 c0       	rjmp	.+198    	; 0x852 <xEventGroupWaitBits+0x15c>
     78c:	c1 14       	cp	r12, r1
     78e:	d1 04       	cpc	r13, r1
     790:	e1 04       	cpc	r14, r1
     792:	f1 04       	cpc	r15, r1
     794:	09 f4       	brne	.+2      	; 0x798 <xEventGroupWaitBits+0xa2>
     796:	5d c0       	rjmp	.+186    	; 0x852 <xEventGroupWaitBits+0x15c>
     798:	66 20       	and	r6, r6
     79a:	29 f0       	breq	.+10     	; 0x7a6 <xEventGroupWaitBits+0xb0>
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <xEventGroupWaitBits+0xb6>
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	ba 01       	movw	r22, r20
     7ac:	71 10       	cpse	r7, r1
     7ae:	74 60       	ori	r23, 0x04	; 4
     7b0:	48 29       	or	r20, r8
     7b2:	59 29       	or	r21, r9
     7b4:	6a 29       	or	r22, r10
     7b6:	7b 29       	or	r23, r11
     7b8:	97 01       	movw	r18, r14
     7ba:	86 01       	movw	r16, r12
     7bc:	ce 01       	movw	r24, r28
     7be:	04 96       	adiw	r24, 0x04	; 4
     7c0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <vTaskPlaceOnUnorderedEventList>
     7c4:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     7c8:	81 11       	cpse	r24, r1
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <xEventGroupWaitBits+0xda>
     7cc:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
     7d0:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <uxTaskResetEventItemValue>
     7d4:	91 fd       	sbrc	r25, 1
     7d6:	39 c0       	rjmp	.+114    	; 0x84a <xEventGroupWaitBits+0x154>
     7d8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7dc:	ff 93       	push	r31
     7de:	f8 7f       	andi	r31, 0xF8	; 248
     7e0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7e4:	68 81       	ld	r22, Y
     7e6:	79 81       	ldd	r23, Y+1	; 0x01
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	9b 81       	ldd	r25, Y+3	; 0x03
     7ec:	71 10       	cpse	r7, r1
     7ee:	0d c0       	rjmp	.+26     	; 0x80a <xEventGroupWaitBits+0x114>
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	75 01       	movw	r14, r10
     7f4:	64 01       	movw	r12, r8
     7f6:	c6 22       	and	r12, r22
     7f8:	d7 22       	and	r13, r23
     7fa:	e8 22       	and	r14, r24
     7fc:	f9 22       	and	r15, r25
     7fe:	cd 28       	or	r12, r13
     800:	ce 28       	or	r12, r14
     802:	cf 28       	or	r12, r15
     804:	79 f4       	brne	.+30     	; 0x824 <xEventGroupWaitBits+0x12e>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	0d c0       	rjmp	.+26     	; 0x824 <xEventGroupWaitBits+0x12e>
     80a:	21 e0       	ldi	r18, 0x01	; 1
     80c:	75 01       	movw	r14, r10
     80e:	64 01       	movw	r12, r8
     810:	c6 22       	and	r12, r22
     812:	d7 22       	and	r13, r23
     814:	e8 22       	and	r14, r24
     816:	f9 22       	and	r15, r25
     818:	c8 14       	cp	r12, r8
     81a:	d9 04       	cpc	r13, r9
     81c:	ea 04       	cpc	r14, r10
     81e:	fb 04       	cpc	r15, r11
     820:	09 f0       	breq	.+2      	; 0x824 <xEventGroupWaitBits+0x12e>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	22 23       	and	r18, r18
     826:	71 f0       	breq	.+28     	; 0x844 <xEventGroupWaitBits+0x14e>
     828:	66 20       	and	r6, r6
     82a:	61 f0       	breq	.+24     	; 0x844 <xEventGroupWaitBits+0x14e>
     82c:	80 94       	com	r8
     82e:	90 94       	com	r9
     830:	a0 94       	com	r10
     832:	b0 94       	com	r11
     834:	86 22       	and	r8, r22
     836:	97 22       	and	r9, r23
     838:	a8 22       	and	r10, r24
     83a:	b9 22       	and	r11, r25
     83c:	88 82       	st	Y, r8
     83e:	99 82       	std	Y+1, r9	; 0x01
     840:	aa 82       	std	Y+2, r10	; 0x02
     842:	bb 82       	std	Y+3, r11	; 0x03
     844:	ff 91       	pop	r31
     846:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     84a:	1b 01       	movw	r2, r22
     84c:	2c 01       	movw	r4, r24
     84e:	55 24       	eor	r5, r5
     850:	02 c0       	rjmp	.+4      	; 0x856 <xEventGroupWaitBits+0x160>
     852:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     856:	c2 01       	movw	r24, r4
     858:	b1 01       	movw	r22, r2
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	af 90       	pop	r10
     86e:	9f 90       	pop	r9
     870:	8f 90       	pop	r8
     872:	7f 90       	pop	r7
     874:	6f 90       	pop	r6
     876:	5f 90       	pop	r5
     878:	4f 90       	pop	r4
     87a:	3f 90       	pop	r3
     87c:	2f 90       	pop	r2
     87e:	08 95       	ret

00000880 <xEventGroupClearBits>:
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     888:	ff 93       	push	r31
     88a:	f8 7f       	andi	r31, 0xF8	; 248
     88c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     890:	fc 01       	movw	r30, r24
     892:	00 81       	ld	r16, Z
     894:	11 81       	ldd	r17, Z+1	; 0x01
     896:	22 81       	ldd	r18, Z+2	; 0x02
     898:	33 81       	ldd	r19, Z+3	; 0x03
     89a:	40 95       	com	r20
     89c:	50 95       	com	r21
     89e:	60 95       	com	r22
     8a0:	70 95       	com	r23
     8a2:	40 23       	and	r20, r16
     8a4:	51 23       	and	r21, r17
     8a6:	62 23       	and	r22, r18
     8a8:	73 23       	and	r23, r19
     8aa:	40 83       	st	Z, r20
     8ac:	51 83       	std	Z+1, r21	; 0x01
     8ae:	62 83       	std	Z+2, r22	; 0x02
     8b0:	73 83       	std	Z+3, r23	; 0x03
     8b2:	ff 91       	pop	r31
     8b4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     8b8:	c9 01       	movw	r24, r18
     8ba:	b8 01       	movw	r22, r16
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <xEventGroupSetBits>:
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
     8e0:	6a 01       	movw	r12, r20
     8e2:	7b 01       	movw	r14, r22
     8e4:	8c 01       	movw	r16, r24
     8e6:	09 5f       	subi	r16, 0xF9	; 249
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
     8ee:	eb 85       	ldd	r30, Y+11	; 0x0b
     8f0:	fc 85       	ldd	r31, Y+12	; 0x0c
     8f2:	88 81       	ld	r24, Y
     8f4:	99 81       	ldd	r25, Y+1	; 0x01
     8f6:	aa 81       	ldd	r26, Y+2	; 0x02
     8f8:	bb 81       	ldd	r27, Y+3	; 0x03
     8fa:	c8 2a       	or	r12, r24
     8fc:	d9 2a       	or	r13, r25
     8fe:	ea 2a       	or	r14, r26
     900:	fb 2a       	or	r15, r27
     902:	c8 82       	st	Y, r12
     904:	d9 82       	std	Y+1, r13	; 0x01
     906:	ea 82       	std	Y+2, r14	; 0x02
     908:	fb 82       	std	Y+3, r15	; 0x03
     90a:	0e 17       	cp	r16, r30
     90c:	1f 07       	cpc	r17, r31
     90e:	09 f4       	brne	.+2      	; 0x912 <xEventGroupSetBits+0x50>
     910:	42 c0       	rjmp	.+132    	; 0x996 <xEventGroupSetBits+0xd4>
     912:	c1 2c       	mov	r12, r1
     914:	d1 2c       	mov	r13, r1
     916:	76 01       	movw	r14, r12
     918:	a4 80       	ldd	r10, Z+4	; 0x04
     91a:	b5 80       	ldd	r11, Z+5	; 0x05
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	a2 81       	ldd	r26, Z+2	; 0x02
     922:	b3 81       	ldd	r27, Z+3	; 0x03
     924:	ac 01       	movw	r20, r24
     926:	bd 01       	movw	r22, r26
     928:	77 27       	eor	r23, r23
     92a:	b2 fd       	sbrc	r27, 2
     92c:	0f c0       	rjmp	.+30     	; 0x94c <xEventGroupSetBits+0x8a>
     92e:	48 80       	ld	r4, Y
     930:	59 80       	ldd	r5, Y+1	; 0x01
     932:	6a 80       	ldd	r6, Y+2	; 0x02
     934:	7b 80       	ldd	r7, Y+3	; 0x03
     936:	44 22       	and	r4, r20
     938:	55 22       	and	r5, r21
     93a:	66 22       	and	r6, r22
     93c:	77 22       	and	r7, r23
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	45 28       	or	r4, r5
     942:	46 28       	or	r4, r6
     944:	47 28       	or	r4, r7
     946:	89 f4       	brne	.+34     	; 0x96a <xEventGroupSetBits+0xa8>
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	0f c0       	rjmp	.+30     	; 0x96a <xEventGroupSetBits+0xa8>
     94c:	48 80       	ld	r4, Y
     94e:	59 80       	ldd	r5, Y+1	; 0x01
     950:	6a 80       	ldd	r6, Y+2	; 0x02
     952:	7b 80       	ldd	r7, Y+3	; 0x03
     954:	44 22       	and	r4, r20
     956:	55 22       	and	r5, r21
     958:	66 22       	and	r6, r22
     95a:	77 22       	and	r7, r23
     95c:	21 e0       	ldi	r18, 0x01	; 1
     95e:	44 16       	cp	r4, r20
     960:	55 06       	cpc	r5, r21
     962:	66 06       	cpc	r6, r22
     964:	77 06       	cpc	r7, r23
     966:	09 f0       	breq	.+2      	; 0x96a <xEventGroupSetBits+0xa8>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	22 23       	and	r18, r18
     96c:	71 f0       	breq	.+28     	; 0x98a <xEventGroupSetBits+0xc8>
     96e:	b0 ff       	sbrs	r27, 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <xEventGroupSetBits+0xb8>
     972:	c4 2a       	or	r12, r20
     974:	d5 2a       	or	r13, r21
     976:	e6 2a       	or	r14, r22
     978:	f7 2a       	or	r15, r23
     97a:	48 81       	ld	r20, Y
     97c:	59 81       	ldd	r21, Y+1	; 0x01
     97e:	6a 81       	ldd	r22, Y+2	; 0x02
     980:	7b 81       	ldd	r23, Y+3	; 0x03
     982:	72 60       	ori	r23, 0x02	; 2
     984:	cf 01       	movw	r24, r30
     986:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <vTaskRemoveFromUnorderedEventList>
     98a:	ea 2d       	mov	r30, r10
     98c:	fb 2d       	mov	r31, r11
     98e:	0e 17       	cp	r16, r30
     990:	1f 07       	cpc	r17, r31
     992:	11 f6       	brne	.-124    	; 0x918 <xEventGroupSetBits+0x56>
     994:	03 c0       	rjmp	.+6      	; 0x99c <xEventGroupSetBits+0xda>
     996:	c1 2c       	mov	r12, r1
     998:	d1 2c       	mov	r13, r1
     99a:	76 01       	movw	r14, r12
     99c:	c0 94       	com	r12
     99e:	d0 94       	com	r13
     9a0:	e0 94       	com	r14
     9a2:	f0 94       	com	r15
     9a4:	88 81       	ld	r24, Y
     9a6:	99 81       	ldd	r25, Y+1	; 0x01
     9a8:	aa 81       	ldd	r26, Y+2	; 0x02
     9aa:	bb 81       	ldd	r27, Y+3	; 0x03
     9ac:	c8 22       	and	r12, r24
     9ae:	d9 22       	and	r13, r25
     9b0:	ea 22       	and	r14, r26
     9b2:	fb 22       	and	r15, r27
     9b4:	c8 82       	st	Y, r12
     9b6:	d9 82       	std	Y+1, r13	; 0x01
     9b8:	ea 82       	std	Y+2, r14	; 0x02
     9ba:	fb 82       	std	Y+3, r15	; 0x03
     9bc:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     9c0:	68 81       	ld	r22, Y
     9c2:	79 81       	ldd	r23, Y+1	; 0x01
     9c4:	8a 81       	ldd	r24, Y+2	; 0x02
     9c6:	9b 81       	ldd	r25, Y+3	; 0x03
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	cf 90       	pop	r12
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	7f 90       	pop	r7
     9de:	6f 90       	pop	r6
     9e0:	5f 90       	pop	r5
     9e2:	4f 90       	pop	r4
     9e4:	08 95       	ret

000009e6 <vEventGroupSetBitsCallback>:
     9e6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
     9ea:	08 95       	ret

000009ec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     9f0:	89 01       	movw	r16, r18
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	bc 01       	movw	r22, r24
     9f8:	83 ef       	ldi	r24, 0xF3	; 243
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	0e 94 c3 12 	call	0x2586	; 0x2586 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	08 95       	ret

00000a06 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     a0c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     a10:	20 91 70 20 	lds	r18, 0x2070	; 0x802070 <xNextFreeByte>
     a14:	30 91 71 20 	lds	r19, 0x2071	; 0x802071 <xNextFreeByte+0x1>
     a18:	c9 01       	movw	r24, r18
     a1a:	8c 0f       	add	r24, r28
     a1c:	9d 1f       	adc	r25, r29
     a1e:	88 3b       	cpi	r24, 0xB8	; 184
     a20:	4b e0       	ldi	r20, 0x0B	; 11
     a22:	94 07       	cpc	r25, r20
     a24:	58 f4       	brcc	.+22     	; 0xa3c <pvPortMalloc+0x36>
     a26:	28 17       	cp	r18, r24
     a28:	39 07       	cpc	r19, r25
     a2a:	58 f4       	brcc	.+22     	; 0xa42 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     a2c:	e9 01       	movw	r28, r18
     a2e:	ce 58       	subi	r28, 0x8E	; 142
     a30:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     a32:	80 93 70 20 	sts	0x2070, r24	; 0x802070 <xNextFreeByte>
     a36:	90 93 71 20 	sts	0x2071, r25	; 0x802071 <xNextFreeByte+0x1>
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     a3c:	c0 e0       	ldi	r28, 0x00	; 0
     a3e:	d0 e0       	ldi	r29, 0x00	; 0
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <pvPortMalloc+0x40>
     a42:	c0 e0       	ldi	r28, 0x00	; 0
     a44:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     a46:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     a4a:	ce 01       	movw	r24, r28
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a52:	08 95       	ret

00000a54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a54:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a56:	03 96       	adiw	r24, 0x03	; 3
     a58:	81 83       	std	Z+1, r24	; 0x01
     a5a:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     a5c:	4f ef       	ldi	r20, 0xFF	; 255
     a5e:	5f ef       	ldi	r21, 0xFF	; 255
     a60:	ba 01       	movw	r22, r20
     a62:	43 83       	std	Z+3, r20	; 0x03
     a64:	54 83       	std	Z+4, r21	; 0x04
     a66:	65 83       	std	Z+5, r22	; 0x05
     a68:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a6a:	87 83       	std	Z+7, r24	; 0x07
     a6c:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a6e:	81 87       	std	Z+9, r24	; 0x09
     a70:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a72:	10 82       	st	Z, r1
     a74:	08 95       	ret

00000a76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     a76:	fc 01       	movw	r30, r24
     a78:	12 86       	std	Z+10, r1	; 0x0a
     a7a:	13 86       	std	Z+11, r1	; 0x0b
     a7c:	08 95       	ret

00000a7e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	9c 01       	movw	r18, r24
     a84:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     a86:	dc 01       	movw	r26, r24
     a88:	11 96       	adiw	r26, 0x01	; 1
     a8a:	cd 91       	ld	r28, X+
     a8c:	dc 91       	ld	r29, X
     a8e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     a90:	c4 83       	std	Z+4, r28	; 0x04
     a92:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a94:	8e 81       	ldd	r24, Y+6	; 0x06
     a96:	9f 81       	ldd	r25, Y+7	; 0x07
     a98:	86 83       	std	Z+6, r24	; 0x06
     a9a:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     a9c:	8e 81       	ldd	r24, Y+6	; 0x06
     a9e:	9f 81       	ldd	r25, Y+7	; 0x07
     aa0:	dc 01       	movw	r26, r24
     aa2:	14 96       	adiw	r26, 0x04	; 4
     aa4:	6d 93       	st	X+, r22
     aa6:	7c 93       	st	X, r23
     aa8:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     aaa:	6e 83       	std	Y+6, r22	; 0x06
     aac:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     aae:	22 87       	std	Z+10, r18	; 0x0a
     ab0:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     ab2:	f9 01       	movw	r30, r18
     ab4:	80 81       	ld	r24, Z
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	80 83       	st	Z, r24
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     aca:	08 81       	ld	r16, Y
     acc:	19 81       	ldd	r17, Y+1	; 0x01
     ace:	2a 81       	ldd	r18, Y+2	; 0x02
     ad0:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     ad2:	0f 3f       	cpi	r16, 0xFF	; 255
     ad4:	4f ef       	ldi	r20, 0xFF	; 255
     ad6:	14 07       	cpc	r17, r20
     ad8:	24 07       	cpc	r18, r20
     ada:	34 07       	cpc	r19, r20
     adc:	21 f4       	brne	.+8      	; 0xae6 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     ade:	fc 01       	movw	r30, r24
     ae0:	a1 85       	ldd	r26, Z+9	; 0x09
     ae2:	b2 85       	ldd	r27, Z+10	; 0x0a
     ae4:	11 c0       	rjmp	.+34     	; 0xb08 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ae6:	dc 01       	movw	r26, r24
     ae8:	13 96       	adiw	r26, 0x03	; 3
     aea:	01 c0       	rjmp	.+2      	; 0xaee <vListInsert+0x2e>
     aec:	df 01       	movw	r26, r30
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	ed 91       	ld	r30, X+
     af2:	fc 91       	ld	r31, X
     af4:	15 97       	sbiw	r26, 0x05	; 5
     af6:	40 81       	ld	r20, Z
     af8:	51 81       	ldd	r21, Z+1	; 0x01
     afa:	62 81       	ldd	r22, Z+2	; 0x02
     afc:	73 81       	ldd	r23, Z+3	; 0x03
     afe:	04 17       	cp	r16, r20
     b00:	15 07       	cpc	r17, r21
     b02:	26 07       	cpc	r18, r22
     b04:	37 07       	cpc	r19, r23
     b06:	90 f7       	brcc	.-28     	; 0xaec <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     b08:	14 96       	adiw	r26, 0x04	; 4
     b0a:	ed 91       	ld	r30, X+
     b0c:	fc 91       	ld	r31, X
     b0e:	15 97       	sbiw	r26, 0x05	; 5
     b10:	ec 83       	std	Y+4, r30	; 0x04
     b12:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b14:	c6 83       	std	Z+6, r28	; 0x06
     b16:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     b18:	ae 83       	std	Y+6, r26	; 0x06
     b1a:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     b1c:	14 96       	adiw	r26, 0x04	; 4
     b1e:	cd 93       	st	X+, r28
     b20:	dc 93       	st	X, r29
     b22:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     b24:	8a 87       	std	Y+10, r24	; 0x0a
     b26:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     b28:	fc 01       	movw	r30, r24
     b2a:	20 81       	ld	r18, Z
     b2c:	2f 5f       	subi	r18, 0xFF	; 255
     b2e:	20 83       	st	Z, r18
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	08 95       	ret

00000b3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     b40:	a2 85       	ldd	r26, Z+10	; 0x0a
     b42:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b44:	c4 81       	ldd	r28, Z+4	; 0x04
     b46:	d5 81       	ldd	r29, Z+5	; 0x05
     b48:	86 81       	ldd	r24, Z+6	; 0x06
     b4a:	97 81       	ldd	r25, Z+7	; 0x07
     b4c:	8e 83       	std	Y+6, r24	; 0x06
     b4e:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b50:	c6 81       	ldd	r28, Z+6	; 0x06
     b52:	d7 81       	ldd	r29, Z+7	; 0x07
     b54:	84 81       	ldd	r24, Z+4	; 0x04
     b56:	95 81       	ldd	r25, Z+5	; 0x05
     b58:	8c 83       	std	Y+4, r24	; 0x04
     b5a:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	12 97       	sbiw	r26, 0x02	; 2
     b64:	e8 17       	cp	r30, r24
     b66:	f9 07       	cpc	r31, r25
     b68:	31 f4       	brne	.+12     	; 0xb76 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     b6a:	86 81       	ldd	r24, Z+6	; 0x06
     b6c:	97 81       	ldd	r25, Z+7	; 0x07
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	8d 93       	st	X+, r24
     b72:	9c 93       	st	X, r25
     b74:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     b76:	12 86       	std	Z+10, r1	; 0x0a
     b78:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     b7a:	8c 91       	ld	r24, X
     b7c:	81 50       	subi	r24, 0x01	; 1
     b7e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     b80:	8c 91       	ld	r24, X
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <_portSetInterruptMaskFromIsr>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     b88:	e0 ea       	ldi	r30, 0xA0	; 160
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	92 81       	ldd	r25, Z+2	; 0x02
     b90:	98 7f       	andi	r25, 0xF8	; 248
     b92:	92 83       	std	Z+2, r25	; 0x02
     b94:	08 95       	ret

00000b96 <pxPortInitialiseStack>:
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	31 e1       	ldi	r19, 0x11	; 17
     ba0:	fc 01       	movw	r30, r24
     ba2:	30 83       	st	Z, r19
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	22 e2       	ldi	r18, 0x22	; 34
     ba8:	20 83       	st	Z, r18
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	a3 e3       	ldi	r26, 0x33	; 51
     bae:	a0 83       	st	Z, r26
     bb0:	6b 01       	movw	r12, r22
     bb2:	e1 2c       	mov	r14, r1
     bb4:	f1 2c       	mov	r15, r1
     bb6:	31 97       	sbiw	r30, 0x01	; 1
     bb8:	60 83       	st	Z, r22
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	d0 82       	st	Z, r13
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	e0 82       	st	Z, r14
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	61 e3       	ldi	r22, 0x31	; 49
     bc6:	60 83       	st	Z, r22
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	60 e8       	ldi	r22, 0x80	; 128
     bcc:	60 83       	st	Z, r22
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	67 e8       	ldi	r22, 0x87	; 135
     bd2:	60 83       	st	Z, r22
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	10 82       	st	Z, r1
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	10 82       	st	Z, r1
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	62 e0       	ldi	r22, 0x02	; 2
     be0:	60 83       	st	Z, r22
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	60 83       	st	Z, r22
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	64 e0       	ldi	r22, 0x04	; 4
     bec:	60 83       	st	Z, r22
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	65 e0       	ldi	r22, 0x05	; 5
     bf2:	60 83       	st	Z, r22
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	66 e0       	ldi	r22, 0x06	; 6
     bf8:	60 83       	st	Z, r22
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	67 e0       	ldi	r22, 0x07	; 7
     bfe:	60 83       	st	Z, r22
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	68 e0       	ldi	r22, 0x08	; 8
     c04:	60 83       	st	Z, r22
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	69 e0       	ldi	r22, 0x09	; 9
     c0a:	60 83       	st	Z, r22
     c0c:	31 97       	sbiw	r30, 0x01	; 1
     c0e:	60 e1       	ldi	r22, 0x10	; 16
     c10:	60 83       	st	Z, r22
     c12:	31 97       	sbiw	r30, 0x01	; 1
     c14:	30 83       	st	Z, r19
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	32 e1       	ldi	r19, 0x12	; 18
     c1a:	30 83       	st	Z, r19
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	33 e1       	ldi	r19, 0x13	; 19
     c20:	30 83       	st	Z, r19
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	34 e1       	ldi	r19, 0x14	; 20
     c26:	30 83       	st	Z, r19
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	35 e1       	ldi	r19, 0x15	; 21
     c2c:	30 83       	st	Z, r19
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	36 e1       	ldi	r19, 0x16	; 22
     c32:	30 83       	st	Z, r19
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	37 e1       	ldi	r19, 0x17	; 23
     c38:	30 83       	st	Z, r19
     c3a:	31 97       	sbiw	r30, 0x01	; 1
     c3c:	38 e1       	ldi	r19, 0x18	; 24
     c3e:	30 83       	st	Z, r19
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	39 e1       	ldi	r19, 0x19	; 25
     c44:	30 83       	st	Z, r19
     c46:	31 97       	sbiw	r30, 0x01	; 1
     c48:	30 e2       	ldi	r19, 0x20	; 32
     c4a:	30 83       	st	Z, r19
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	31 e2       	ldi	r19, 0x21	; 33
     c50:	30 83       	st	Z, r19
     c52:	31 97       	sbiw	r30, 0x01	; 1
     c54:	20 83       	st	Z, r18
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	23 e2       	ldi	r18, 0x23	; 35
     c5a:	20 83       	st	Z, r18
     c5c:	6a 01       	movw	r12, r20
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	40 83       	st	Z, r20
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	d0 82       	st	Z, r13
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	26 e2       	ldi	r18, 0x26	; 38
     c6a:	20 83       	st	Z, r18
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	27 e2       	ldi	r18, 0x27	; 39
     c70:	20 83       	st	Z, r18
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	28 e2       	ldi	r18, 0x28	; 40
     c76:	20 83       	st	Z, r18
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	29 e2       	ldi	r18, 0x29	; 41
     c7c:	20 83       	st	Z, r18
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	20 e3       	ldi	r18, 0x30	; 48
     c82:	20 83       	st	Z, r18
     c84:	88 97       	sbiw	r24, 0x28	; 40
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
     c8e:	08 95       	ret

00000c90 <xPortStartScheduler>:
     c90:	83 ef       	ldi	r24, 0xF3	; 243
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     c98:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     c9c:	65 e0       	ldi	r22, 0x05	; 5
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	98 e0       	ldi	r25, 0x08	; 8
     ca2:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	98 e0       	ldi	r25, 0x08	; 8
     cac:	0e 94 56 03 	call	0x6ac	; 0x6ac <TC0_SetOverflowIntLevel>
     cb0:	a0 91 98 2c 	lds	r26, 0x2C98	; 0x802c98 <pxCurrentTCB>
     cb4:	b0 91 99 2c 	lds	r27, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
     cb8:	0d 90       	ld	r0, X+
     cba:	0d be       	out	0x3d, r0	; 61
     cbc:	0d 90       	ld	r0, X+
     cbe:	0e be       	out	0x3e, r0	; 62
     cc0:	ef 91       	pop	r30
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	7f 90       	pop	r7
     cf0:	6f 90       	pop	r6
     cf2:	5f 90       	pop	r5
     cf4:	4f 90       	pop	r4
     cf6:	3f 90       	pop	r3
     cf8:	2f 90       	pop	r2
     cfa:	1f 90       	pop	r1
     cfc:	0f 90       	pop	r0
     cfe:	ff 91       	pop	r31
     d00:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d04:	ff 91       	pop	r31
     d06:	ff bf       	out	0x3f, r31	; 63
     d08:	ff 91       	pop	r31
     d0a:	08 95       	ret
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	08 95       	ret

00000d10 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d10:	ff 93       	push	r31
     d12:	ff b7       	in	r31, 0x3f	; 63
     d14:	ff 93       	push	r31
     d16:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d1a:	ff 93       	push	r31
     d1c:	f8 7f       	andi	r31, 0xF8	; 248
     d1e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d22:	0f 92       	push	r0
     d24:	1f 92       	push	r1
     d26:	11 24       	eor	r1, r1
     d28:	2f 92       	push	r2
     d2a:	3f 92       	push	r3
     d2c:	4f 92       	push	r4
     d2e:	5f 92       	push	r5
     d30:	6f 92       	push	r6
     d32:	7f 92       	push	r7
     d34:	8f 92       	push	r8
     d36:	9f 92       	push	r9
     d38:	af 92       	push	r10
     d3a:	bf 92       	push	r11
     d3c:	cf 92       	push	r12
     d3e:	df 92       	push	r13
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ef 93       	push	r30
     d62:	a0 91 98 2c 	lds	r26, 0x2C98	; 0x802c98 <pxCurrentTCB>
     d66:	b0 91 99 2c 	lds	r27, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
     d6a:	0d b6       	in	r0, 0x3d	; 61
     d6c:	0d 92       	st	X+, r0
     d6e:	0e b6       	in	r0, 0x3e	; 62
     d70:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d72:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d76:	a0 91 98 2c 	lds	r26, 0x2C98	; 0x802c98 <pxCurrentTCB>
     d7a:	b0 91 99 2c 	lds	r27, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
     d7e:	0d 90       	ld	r0, X+
     d80:	0d be       	out	0x3d, r0	; 61
     d82:	0d 90       	ld	r0, X+
     d84:	0e be       	out	0x3e, r0	; 62
     d86:	ef 91       	pop	r30
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	9f 90       	pop	r9
     db2:	8f 90       	pop	r8
     db4:	7f 90       	pop	r7
     db6:	6f 90       	pop	r6
     db8:	5f 90       	pop	r5
     dba:	4f 90       	pop	r4
     dbc:	3f 90       	pop	r3
     dbe:	2f 90       	pop	r2
     dc0:	1f 90       	pop	r1
     dc2:	0f 90       	pop	r0
     dc4:	ff 91       	pop	r31
     dc6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     dca:	ff 91       	pop	r31
     dcc:	ff bf       	out	0x3f, r31	; 63
     dce:	ff 91       	pop	r31
	asm volatile ( "ret" );
     dd0:	08 95       	ret

00000dd2 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     dd2:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     dd4:	90 91 e8 2c 	lds	r25, 0x2CE8	; 0x802ce8 <intTaskSwitchPending>
     dd8:	89 2b       	or	r24, r25
     dda:	80 93 e8 2c 	sts	0x2CE8, r24	; 0x802ce8 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     dde:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     de2:	91 30       	cpi	r25, 0x01	; 1
     de4:	41 f0       	breq	.+16     	; 0xdf6 <portTaskSwitchContext+0x24>
     de6:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     dea:	92 30       	cpi	r25, 0x02	; 2
     dec:	21 f0       	breq	.+8      	; 0xdf6 <portTaskSwitchContext+0x24>
     dee:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	59 f4       	brne	.+22     	; 0xe0c <portTaskSwitchContext+0x3a>
     df6:	88 23       	and	r24, r24
     df8:	49 f0       	breq	.+18     	; 0xe0c <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     dfa:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
     dfe:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     e00:	10 92 e8 2c 	sts	0x2CE8, r1	; 0x802ce8 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     e04:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     e08:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		}                                          					
	}
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     e10:	ff 93       	push	r31
     e12:	ff b7       	in	r31, 0x3f	; 63
     e14:	ff 93       	push	r31
     e16:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e1a:	ff 93       	push	r31
     e1c:	f8 7f       	andi	r31, 0xF8	; 248
     e1e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e22:	0f 92       	push	r0
     e24:	1f 92       	push	r1
     e26:	11 24       	eor	r1, r1
     e28:	2f 92       	push	r2
     e2a:	3f 92       	push	r3
     e2c:	4f 92       	push	r4
     e2e:	5f 92       	push	r5
     e30:	6f 92       	push	r6
     e32:	7f 92       	push	r7
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	ef 93       	push	r30
     e62:	a0 91 98 2c 	lds	r26, 0x2C98	; 0x802c98 <pxCurrentTCB>
     e66:	b0 91 99 2c 	lds	r27, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0
	//
	static void portTaskIncrementTick( void )
	{
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
     e72:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
     e76:	c8 2f       	mov	r28, r24
		xTaskIncrementTick();
     e78:	0e 94 8f 0c 	call	0x191e	; 0x191e <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
     e7c:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
		portTaskIncrementTick();
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <portTaskSwitchContext>
     e86:	a0 91 98 2c 	lds	r26, 0x2C98	; 0x802c98 <pxCurrentTCB>
     e8a:	b0 91 99 2c 	lds	r27, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
     e8e:	0d 90       	ld	r0, X+
     e90:	0d be       	out	0x3d, r0	; 61
     e92:	0d 90       	ld	r0, X+
     e94:	0e be       	out	0x3e, r0	; 62
     e96:	ef 91       	pop	r30
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	8f 90       	pop	r8
     ec4:	7f 90       	pop	r7
     ec6:	6f 90       	pop	r6
     ec8:	5f 90       	pop	r5
     eca:	4f 90       	pop	r4
     ecc:	3f 90       	pop	r3
     ece:	2f 90       	pop	r2
     ed0:	1f 90       	pop	r1
     ed2:	0f 90       	pop	r0
     ed4:	ff 91       	pop	r31
     ed6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eda:	ff 91       	pop	r31
     edc:	ff bf       	out	0x3f, r31	; 63
     ede:	ff 91       	pop	r31
     ee0:	18 95       	reti

00000ee2 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     ee2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ee6:	ff 93       	push	r31
     ee8:	f8 7f       	andi	r31, 0xF8	; 248
     eea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eee:	fc 01       	movw	r30, r24
     ef0:	96 8d       	ldd	r25, Z+30	; 0x1e
     ef2:	ff 91       	pop	r31
     ef4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	91 11       	cpse	r25, r1
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 95       	ret

00000f00 <prvIsQueueFull>:
     f00:	dc 01       	movw	r26, r24
     f02:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f06:	ff 93       	push	r31
     f08:	f8 7f       	andi	r31, 0xF8	; 248
     f0a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f0e:	5e 96       	adiw	r26, 0x1e	; 30
     f10:	9c 91       	ld	r25, X
     f12:	5e 97       	sbiw	r26, 0x1e	; 30
     f14:	ff 91       	pop	r31
     f16:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	5f 96       	adiw	r26, 0x1f	; 31
     f1e:	2c 91       	ld	r18, X
     f20:	29 13       	cpse	r18, r25
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret

00000f26 <prvCopyDataToQueue>:
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	ec 01       	movw	r28, r24
     f30:	04 2f       	mov	r16, r20
     f32:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f34:	48 a1       	ldd	r20, Y+32	; 0x20
     f36:	44 23       	and	r20, r20
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <prvCopyDataToQueue+0x82>
     f3a:	01 11       	cpse	r16, r1
     f3c:	16 c0       	rjmp	.+44     	; 0xf6a <prvCopyDataToQueue+0x44>
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <memcpy>
     f48:	28 a1       	ldd	r18, Y+32	; 0x20
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	82 0f       	add	r24, r18
     f50:	91 1d       	adc	r25, r1
     f52:	8c 83       	std	Y+4, r24	; 0x04
     f54:	9d 83       	std	Y+5, r25	; 0x05
     f56:	2a 81       	ldd	r18, Y+2	; 0x02
     f58:	3b 81       	ldd	r19, Y+3	; 0x03
     f5a:	82 17       	cp	r24, r18
     f5c:	93 07       	cpc	r25, r19
     f5e:	20 f1       	brcs	.+72     	; 0xfa8 <prvCopyDataToQueue+0x82>
     f60:	88 81       	ld	r24, Y
     f62:	99 81       	ldd	r25, Y+1	; 0x01
     f64:	8c 83       	std	Y+4, r24	; 0x04
     f66:	9d 83       	std	Y+5, r25	; 0x05
     f68:	1f c0       	rjmp	.+62     	; 0xfa8 <prvCopyDataToQueue+0x82>
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	8e 81       	ldd	r24, Y+6	; 0x06
     f6e:	9f 81       	ldd	r25, Y+7	; 0x07
     f70:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <memcpy>
     f74:	88 a1       	ldd	r24, Y+32	; 0x20
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	91 95       	neg	r25
     f7a:	81 95       	neg	r24
     f7c:	91 09       	sbc	r25, r1
     f7e:	2e 81       	ldd	r18, Y+6	; 0x06
     f80:	3f 81       	ldd	r19, Y+7	; 0x07
     f82:	28 0f       	add	r18, r24
     f84:	39 1f       	adc	r19, r25
     f86:	2e 83       	std	Y+6, r18	; 0x06
     f88:	3f 83       	std	Y+7, r19	; 0x07
     f8a:	48 81       	ld	r20, Y
     f8c:	59 81       	ldd	r21, Y+1	; 0x01
     f8e:	24 17       	cp	r18, r20
     f90:	35 07       	cpc	r19, r21
     f92:	30 f4       	brcc	.+12     	; 0xfa0 <prvCopyDataToQueue+0x7a>
     f94:	2a 81       	ldd	r18, Y+2	; 0x02
     f96:	3b 81       	ldd	r19, Y+3	; 0x03
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	8e 83       	std	Y+6, r24	; 0x06
     f9e:	9f 83       	std	Y+7, r25	; 0x07
     fa0:	02 30       	cpi	r16, 0x02	; 2
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <prvCopyDataToQueue+0x82>
     fa4:	11 11       	cpse	r17, r1
     fa6:	11 50       	subi	r17, 0x01	; 1
     fa8:	1f 5f       	subi	r17, 0xFF	; 255
     faa:	1e 8f       	std	Y+30, r17	; 0x1e
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	08 95       	ret

00000fb8 <prvCopyDataFromQueue>:
     fb8:	fc 01       	movw	r30, r24
     fba:	40 a1       	ldd	r20, Z+32	; 0x20
     fbc:	44 23       	and	r20, r20
     fbe:	a9 f0       	breq	.+42     	; 0xfea <prvCopyDataFromQueue+0x32>
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	26 81       	ldd	r18, Z+6	; 0x06
     fc4:	37 81       	ldd	r19, Z+7	; 0x07
     fc6:	24 0f       	add	r18, r20
     fc8:	35 1f       	adc	r19, r21
     fca:	26 83       	std	Z+6, r18	; 0x06
     fcc:	37 83       	std	Z+7, r19	; 0x07
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	28 17       	cp	r18, r24
     fd4:	39 07       	cpc	r19, r25
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <prvCopyDataFromQueue+0x28>
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	86 83       	std	Z+6, r24	; 0x06
     fde:	97 83       	std	Z+7, r25	; 0x07
     fe0:	cb 01       	movw	r24, r22
     fe2:	66 81       	ldd	r22, Z+6	; 0x06
     fe4:	77 81       	ldd	r23, Z+7	; 0x07
     fe6:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <memcpy>
     fea:	08 95       	ret

00000fec <prvUnlockQueue>:
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	8c 01       	movw	r16, r24
     ff8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ffc:	ff 93       	push	r31
     ffe:	f8 7f       	andi	r31, 0xF8	; 248
    1000:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1004:	fc 01       	movw	r30, r24
    1006:	c2 a1       	ldd	r28, Z+34	; 0x22
    1008:	1c 16       	cp	r1, r28
    100a:	ac f4       	brge	.+42     	; 0x1036 <prvUnlockQueue+0x4a>
    100c:	83 89       	ldd	r24, Z+19	; 0x13
    100e:	81 11       	cpse	r24, r1
    1010:	06 c0       	rjmp	.+12     	; 0x101e <prvUnlockQueue+0x32>
    1012:	11 c0       	rjmp	.+34     	; 0x1036 <prvUnlockQueue+0x4a>
    1014:	f8 01       	movw	r30, r16
    1016:	83 89       	ldd	r24, Z+19	; 0x13
    1018:	81 11       	cpse	r24, r1
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <prvUnlockQueue+0x3a>
    101c:	0c c0       	rjmp	.+24     	; 0x1036 <prvUnlockQueue+0x4a>
    101e:	78 01       	movw	r14, r16
    1020:	f3 e1       	ldi	r31, 0x13	; 19
    1022:	ef 0e       	add	r14, r31
    1024:	f1 1c       	adc	r15, r1
    1026:	c7 01       	movw	r24, r14
    1028:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    102c:	81 11       	cpse	r24, r1
    102e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskMissedYield>
    1032:	c1 50       	subi	r28, 0x01	; 1
    1034:	79 f7       	brne	.-34     	; 0x1014 <prvUnlockQueue+0x28>
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	f8 01       	movw	r30, r16
    103a:	82 a3       	std	Z+34, r24	; 0x22
    103c:	ff 91       	pop	r31
    103e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1042:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1046:	ff 93       	push	r31
    1048:	f8 7f       	andi	r31, 0xF8	; 248
    104a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    104e:	f8 01       	movw	r30, r16
    1050:	c1 a1       	ldd	r28, Z+33	; 0x21
    1052:	1c 16       	cp	r1, r28
    1054:	ac f4       	brge	.+42     	; 0x1080 <prvUnlockQueue+0x94>
    1056:	80 85       	ldd	r24, Z+8	; 0x08
    1058:	81 11       	cpse	r24, r1
    105a:	06 c0       	rjmp	.+12     	; 0x1068 <prvUnlockQueue+0x7c>
    105c:	11 c0       	rjmp	.+34     	; 0x1080 <prvUnlockQueue+0x94>
    105e:	f8 01       	movw	r30, r16
    1060:	80 85       	ldd	r24, Z+8	; 0x08
    1062:	81 11       	cpse	r24, r1
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <prvUnlockQueue+0x84>
    1066:	0c c0       	rjmp	.+24     	; 0x1080 <prvUnlockQueue+0x94>
    1068:	78 01       	movw	r14, r16
    106a:	f8 e0       	ldi	r31, 0x08	; 8
    106c:	ef 0e       	add	r14, r31
    106e:	f1 1c       	adc	r15, r1
    1070:	c7 01       	movw	r24, r14
    1072:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    1076:	81 11       	cpse	r24, r1
    1078:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskMissedYield>
    107c:	c1 50       	subi	r28, 0x01	; 1
    107e:	79 f7       	brne	.-34     	; 0x105e <prvUnlockQueue+0x72>
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	f8 01       	movw	r30, r16
    1084:	81 a3       	std	Z+33, r24	; 0x21
    1086:	ff 91       	pop	r31
    1088:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	08 95       	ret

00001098 <xQueueGenericReset>:
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10a2:	ff 93       	push	r31
    10a4:	f8 7f       	andi	r31, 0xF8	; 248
    10a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10aa:	48 81       	ld	r20, Y
    10ac:	59 81       	ldd	r21, Y+1	; 0x01
    10ae:	28 a1       	ldd	r18, Y+32	; 0x20
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    10b4:	72 9f       	mul	r23, r18
    10b6:	c0 01       	movw	r24, r0
    10b8:	73 9f       	mul	r23, r19
    10ba:	90 0d       	add	r25, r0
    10bc:	11 24       	eor	r1, r1
    10be:	fa 01       	movw	r30, r20
    10c0:	e8 0f       	add	r30, r24
    10c2:	f9 1f       	adc	r31, r25
    10c4:	ea 83       	std	Y+2, r30	; 0x02
    10c6:	fb 83       	std	Y+3, r31	; 0x03
    10c8:	1e 8e       	std	Y+30, r1	; 0x1e
    10ca:	4c 83       	std	Y+4, r20	; 0x04
    10cc:	5d 83       	std	Y+5, r21	; 0x05
    10ce:	82 1b       	sub	r24, r18
    10d0:	93 0b       	sbc	r25, r19
    10d2:	84 0f       	add	r24, r20
    10d4:	95 1f       	adc	r25, r21
    10d6:	8e 83       	std	Y+6, r24	; 0x06
    10d8:	9f 83       	std	Y+7, r25	; 0x07
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	89 a3       	std	Y+33, r24	; 0x21
    10de:	8a a3       	std	Y+34, r24	; 0x22
    10e0:	61 11       	cpse	r22, r1
    10e2:	0c c0       	rjmp	.+24     	; 0x10fc <xQueueGenericReset+0x64>
    10e4:	88 85       	ldd	r24, Y+8	; 0x08
    10e6:	88 23       	and	r24, r24
    10e8:	89 f0       	breq	.+34     	; 0x110c <xQueueGenericReset+0x74>
    10ea:	ce 01       	movw	r24, r28
    10ec:	08 96       	adiw	r24, 0x08	; 8
    10ee:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    10f2:	88 23       	and	r24, r24
    10f4:	59 f0       	breq	.+22     	; 0x110c <xQueueGenericReset+0x74>
    10f6:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <xQueueGenericReset+0x74>
    10fc:	ce 01       	movw	r24, r28
    10fe:	08 96       	adiw	r24, 0x08	; 8
    1100:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    1104:	ce 01       	movw	r24, r28
    1106:	43 96       	adiw	r24, 0x13	; 19
    1108:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    110c:	ff 91       	pop	r31
    110e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <xQueueGenericCreate>:
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	08 2f       	mov	r16, r24
    1126:	16 2f       	mov	r17, r22
    1128:	f4 2e       	mov	r15, r20
    112a:	66 23       	and	r22, r22
    112c:	c9 f0       	breq	.+50     	; 0x1160 <xQueueGenericCreate+0x46>
    112e:	86 9f       	mul	r24, r22
    1130:	c0 01       	movw	r24, r0
    1132:	11 24       	eor	r1, r1
    1134:	85 96       	adiw	r24, 0x25	; 37
    1136:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    113a:	ec 01       	movw	r28, r24
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	49 f4       	brne	.+18     	; 0x1152 <xQueueGenericCreate+0x38>
    1140:	16 c0       	rjmp	.+44     	; 0x116e <xQueueGenericCreate+0x54>
    1142:	0f 8f       	std	Y+31, r16	; 0x1f
    1144:	18 a3       	std	Y+32, r17	; 0x20
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	ce 01       	movw	r24, r28
    114a:	0e 94 4c 08 	call	0x1098	; 0x1098 <xQueueGenericReset>
    114e:	fc a2       	std	Y+36, r15	; 0x24
    1150:	0e c0       	rjmp	.+28     	; 0x116e <xQueueGenericCreate+0x54>
    1152:	85 96       	adiw	r24, 0x25	; 37
    1154:	88 83       	st	Y, r24
    1156:	99 83       	std	Y+1, r25	; 0x01
    1158:	f4 cf       	rjmp	.-24     	; 0x1142 <xQueueGenericCreate+0x28>
    115a:	c8 83       	st	Y, r28
    115c:	d9 83       	std	Y+1, r29	; 0x01
    115e:	f1 cf       	rjmp	.-30     	; 0x1142 <xQueueGenericCreate+0x28>
    1160:	85 e2       	ldi	r24, 0x25	; 37
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    1168:	ec 01       	movw	r28, r24
    116a:	89 2b       	or	r24, r25
    116c:	b1 f7       	brne	.-20     	; 0x115a <xQueueGenericCreate+0x40>
    116e:	ce 01       	movw	r24, r28
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	08 95       	ret

0000117c <xQueueGenericSend>:
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	29 97       	sbiw	r28, 0x09	; 9
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	7c 01       	movw	r14, r24
    119c:	5b 01       	movw	r10, r22
    119e:	2e 83       	std	Y+6, r18	; 0x06
    11a0:	3f 83       	std	Y+7, r19	; 0x07
    11a2:	48 87       	std	Y+8, r20	; 0x08
    11a4:	59 87       	std	Y+9, r21	; 0x09
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	6c 01       	movw	r12, r24
    11aa:	88 e0       	ldi	r24, 0x08	; 8
    11ac:	c8 0e       	add	r12, r24
    11ae:	d1 1c       	adc	r13, r1
    11b0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11b4:	ff 93       	push	r31
    11b6:	f8 7f       	andi	r31, 0xF8	; 248
    11b8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11bc:	f7 01       	movw	r30, r14
    11be:	96 8d       	ldd	r25, Z+30	; 0x1e
    11c0:	87 8d       	ldd	r24, Z+31	; 0x1f
    11c2:	98 17       	cp	r25, r24
    11c4:	10 f0       	brcs	.+4      	; 0x11ca <xQueueGenericSend+0x4e>
    11c6:	02 30       	cpi	r16, 0x02	; 2
    11c8:	d1 f4       	brne	.+52     	; 0x11fe <xQueueGenericSend+0x82>
    11ca:	40 2f       	mov	r20, r16
    11cc:	b5 01       	movw	r22, r10
    11ce:	c7 01       	movw	r24, r14
    11d0:	0e 94 93 07 	call	0xf26	; 0xf26 <prvCopyDataToQueue>
    11d4:	f7 01       	movw	r30, r14
    11d6:	93 89       	ldd	r25, Z+19	; 0x13
    11d8:	99 23       	and	r25, r25
    11da:	49 f0       	breq	.+18     	; 0x11ee <xQueueGenericSend+0x72>
    11dc:	c7 01       	movw	r24, r14
    11de:	43 96       	adiw	r24, 0x13	; 19
    11e0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    11e4:	88 23       	and	r24, r24
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <xQueueGenericSend+0x78>
    11e8:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <xQueueGenericSend+0x78>
    11ee:	81 11       	cpse	r24, r1
    11f0:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    11f4:	ff 91       	pop	r31
    11f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	57 c0       	rjmp	.+174    	; 0x12ac <xQueueGenericSend+0x130>
    11fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1200:	9f 81       	ldd	r25, Y+7	; 0x07
    1202:	a8 85       	ldd	r26, Y+8	; 0x08
    1204:	b9 85       	ldd	r27, Y+9	; 0x09
    1206:	89 2b       	or	r24, r25
    1208:	8a 2b       	or	r24, r26
    120a:	8b 2b       	or	r24, r27
    120c:	29 f4       	brne	.+10     	; 0x1218 <xQueueGenericSend+0x9c>
    120e:	ff 91       	pop	r31
    1210:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	4a c0       	rjmp	.+148    	; 0x12ac <xQueueGenericSend+0x130>
    1218:	11 11       	cpse	r17, r1
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <xQueueGenericSend+0xaa>
    121c:	ce 01       	movw	r24, r28
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    1224:	11 e0       	ldi	r17, 0x01	; 1
    1226:	ff 91       	pop	r31
    1228:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    122c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    1230:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1234:	ff 93       	push	r31
    1236:	f8 7f       	andi	r31, 0xF8	; 248
    1238:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    123c:	f7 01       	movw	r30, r14
    123e:	81 a1       	ldd	r24, Z+33	; 0x21
    1240:	8f 3f       	cpi	r24, 0xFF	; 255
    1242:	09 f4       	brne	.+2      	; 0x1246 <xQueueGenericSend+0xca>
    1244:	11 a2       	std	Z+33, r1	; 0x21
    1246:	f7 01       	movw	r30, r14
    1248:	82 a1       	ldd	r24, Z+34	; 0x22
    124a:	8f 3f       	cpi	r24, 0xFF	; 255
    124c:	09 f4       	brne	.+2      	; 0x1250 <xQueueGenericSend+0xd4>
    124e:	12 a2       	std	Z+34, r1	; 0x22
    1250:	ff 91       	pop	r31
    1252:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1256:	be 01       	movw	r22, r28
    1258:	6a 5f       	subi	r22, 0xFA	; 250
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <xTaskCheckForTimeOut>
    1264:	81 11       	cpse	r24, r1
    1266:	1c c0       	rjmp	.+56     	; 0x12a0 <xQueueGenericSend+0x124>
    1268:	c7 01       	movw	r24, r14
    126a:	0e 94 80 07 	call	0xf00	; 0xf00 <prvIsQueueFull>
    126e:	88 23       	and	r24, r24
    1270:	89 f0       	breq	.+34     	; 0x1294 <xQueueGenericSend+0x118>
    1272:	4e 81       	ldd	r20, Y+6	; 0x06
    1274:	5f 81       	ldd	r21, Y+7	; 0x07
    1276:	68 85       	ldd	r22, Y+8	; 0x08
    1278:	79 85       	ldd	r23, Y+9	; 0x09
    127a:	c6 01       	movw	r24, r12
    127c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <vTaskPlaceOnEventList>
    1280:	c7 01       	movw	r24, r14
    1282:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1286:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    128a:	81 11       	cpse	r24, r1
    128c:	91 cf       	rjmp	.-222    	; 0x11b0 <xQueueGenericSend+0x34>
    128e:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1292:	8e cf       	rjmp	.-228    	; 0x11b0 <xQueueGenericSend+0x34>
    1294:	c7 01       	movw	r24, r14
    1296:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    129a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    129e:	88 cf       	rjmp	.-240    	; 0x11b0 <xQueueGenericSend+0x34>
    12a0:	c7 01       	movw	r24, r14
    12a2:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    12a6:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	29 96       	adiw	r28, 0x09	; 9
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	bf 90       	pop	r11
    12c4:	af 90       	pop	r10
    12c6:	08 95       	ret

000012c8 <xQueueGenericSendFromISR>:
    12c8:	af 92       	push	r10
    12ca:	bf 92       	push	r11
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ec 01       	movw	r28, r24
    12dc:	6b 01       	movw	r12, r22
    12de:	5a 01       	movw	r10, r20
    12e0:	02 2f       	mov	r16, r18
    12e2:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
    12e6:	f8 2e       	mov	r15, r24
    12e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ec:	98 17       	cp	r25, r24
    12ee:	10 f0       	brcs	.+4      	; 0x12f4 <xQueueGenericSendFromISR+0x2c>
    12f0:	02 30       	cpi	r16, 0x02	; 2
    12f2:	e1 f4       	brne	.+56     	; 0x132c <xQueueGenericSendFromISR+0x64>
    12f4:	1a a1       	ldd	r17, Y+34	; 0x22
    12f6:	40 2f       	mov	r20, r16
    12f8:	b6 01       	movw	r22, r12
    12fa:	ce 01       	movw	r24, r28
    12fc:	0e 94 93 07 	call	0xf26	; 0xf26 <prvCopyDataToQueue>
    1300:	1f 3f       	cpi	r17, 0xFF	; 255
    1302:	81 f4       	brne	.+32     	; 0x1324 <xQueueGenericSendFromISR+0x5c>
    1304:	8b 89       	ldd	r24, Y+19	; 0x13
    1306:	88 23       	and	r24, r24
    1308:	99 f0       	breq	.+38     	; 0x1330 <xQueueGenericSendFromISR+0x68>
    130a:	ce 01       	movw	r24, r28
    130c:	43 96       	adiw	r24, 0x13	; 19
    130e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    1312:	88 23       	and	r24, r24
    1314:	79 f0       	breq	.+30     	; 0x1334 <xQueueGenericSendFromISR+0x6c>
    1316:	a1 14       	cp	r10, r1
    1318:	b1 04       	cpc	r11, r1
    131a:	71 f0       	breq	.+28     	; 0x1338 <xQueueGenericSendFromISR+0x70>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	f5 01       	movw	r30, r10
    1320:	80 83       	st	Z, r24
    1322:	0b c0       	rjmp	.+22     	; 0x133a <xQueueGenericSendFromISR+0x72>
    1324:	1f 5f       	subi	r17, 0xFF	; 255
    1326:	1a a3       	std	Y+34, r17	; 0x22
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	07 c0       	rjmp	.+14     	; 0x133a <xQueueGenericSendFromISR+0x72>
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	05 c0       	rjmp	.+10     	; 0x133a <xQueueGenericSendFromISR+0x72>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	03 c0       	rjmp	.+6      	; 0x133a <xQueueGenericSendFromISR+0x72>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	01 c0       	rjmp	.+2      	; 0x133a <xQueueGenericSendFromISR+0x72>
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	08 95       	ret

00001352 <xQueueReceive>:
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	29 97       	sbiw	r28, 0x09	; 9
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	8c 01       	movw	r16, r24
    1372:	5b 01       	movw	r10, r22
    1374:	2e 83       	std	Y+6, r18	; 0x06
    1376:	3f 83       	std	Y+7, r19	; 0x07
    1378:	48 87       	std	Y+8, r20	; 0x08
    137a:	59 87       	std	Y+9, r21	; 0x09
    137c:	e1 2c       	mov	r14, r1
    137e:	6c 01       	movw	r12, r24
    1380:	83 e1       	ldi	r24, 0x13	; 19
    1382:	c8 0e       	add	r12, r24
    1384:	d1 1c       	adc	r13, r1
    1386:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    138a:	ff 93       	push	r31
    138c:	f8 7f       	andi	r31, 0xF8	; 248
    138e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1392:	f8 01       	movw	r30, r16
    1394:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1396:	ff 20       	and	r15, r15
    1398:	b1 f0       	breq	.+44     	; 0x13c6 <xQueueReceive+0x74>
    139a:	b5 01       	movw	r22, r10
    139c:	c8 01       	movw	r24, r16
    139e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <prvCopyDataFromQueue>
    13a2:	fa 94       	dec	r15
    13a4:	f8 01       	movw	r30, r16
    13a6:	f6 8e       	std	Z+30, r15	; 0x1e
    13a8:	80 85       	ldd	r24, Z+8	; 0x08
    13aa:	88 23       	and	r24, r24
    13ac:	39 f0       	breq	.+14     	; 0x13bc <xQueueReceive+0x6a>
    13ae:	c8 01       	movw	r24, r16
    13b0:	08 96       	adiw	r24, 0x08	; 8
    13b2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    13b6:	81 11       	cpse	r24, r1
    13b8:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    13bc:	ff 91       	pop	r31
    13be:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	5e c0       	rjmp	.+188    	; 0x1482 <xQueueReceive+0x130>
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	a8 85       	ldd	r26, Y+8	; 0x08
    13cc:	b9 85       	ldd	r27, Y+9	; 0x09
    13ce:	89 2b       	or	r24, r25
    13d0:	8a 2b       	or	r24, r26
    13d2:	8b 2b       	or	r24, r27
    13d4:	29 f4       	brne	.+10     	; 0x13e0 <xQueueReceive+0x8e>
    13d6:	ff 91       	pop	r31
    13d8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	51 c0       	rjmp	.+162    	; 0x1482 <xQueueReceive+0x130>
    13e0:	e1 10       	cpse	r14, r1
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <xQueueReceive+0x9e>
    13e4:	ce 01       	movw	r24, r28
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    13ec:	ee 24       	eor	r14, r14
    13ee:	e3 94       	inc	r14
    13f0:	ff 91       	pop	r31
    13f2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13f6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    13fa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13fe:	ff 93       	push	r31
    1400:	f8 7f       	andi	r31, 0xF8	; 248
    1402:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1406:	f8 01       	movw	r30, r16
    1408:	81 a1       	ldd	r24, Z+33	; 0x21
    140a:	8f 3f       	cpi	r24, 0xFF	; 255
    140c:	09 f4       	brne	.+2      	; 0x1410 <xQueueReceive+0xbe>
    140e:	11 a2       	std	Z+33, r1	; 0x21
    1410:	f8 01       	movw	r30, r16
    1412:	82 a1       	ldd	r24, Z+34	; 0x22
    1414:	8f 3f       	cpi	r24, 0xFF	; 255
    1416:	09 f4       	brne	.+2      	; 0x141a <xQueueReceive+0xc8>
    1418:	12 a2       	std	Z+34, r1	; 0x22
    141a:	ff 91       	pop	r31
    141c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1420:	be 01       	movw	r22, r28
    1422:	6a 5f       	subi	r22, 0xFA	; 250
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	ce 01       	movw	r24, r28
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <xTaskCheckForTimeOut>
    142e:	81 11       	cpse	r24, r1
    1430:	1c c0       	rjmp	.+56     	; 0x146a <xQueueReceive+0x118>
    1432:	c8 01       	movw	r24, r16
    1434:	0e 94 71 07 	call	0xee2	; 0xee2 <prvIsQueueEmpty>
    1438:	88 23       	and	r24, r24
    143a:	89 f0       	breq	.+34     	; 0x145e <xQueueReceive+0x10c>
    143c:	4e 81       	ldd	r20, Y+6	; 0x06
    143e:	5f 81       	ldd	r21, Y+7	; 0x07
    1440:	68 85       	ldd	r22, Y+8	; 0x08
    1442:	79 85       	ldd	r23, Y+9	; 0x09
    1444:	c6 01       	movw	r24, r12
    1446:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <vTaskPlaceOnEventList>
    144a:	c8 01       	movw	r24, r16
    144c:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1450:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1454:	81 11       	cpse	r24, r1
    1456:	97 cf       	rjmp	.-210    	; 0x1386 <xQueueReceive+0x34>
    1458:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    145c:	94 cf       	rjmp	.-216    	; 0x1386 <xQueueReceive+0x34>
    145e:	c8 01       	movw	r24, r16
    1460:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1464:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1468:	8e cf       	rjmp	.-228    	; 0x1386 <xQueueReceive+0x34>
    146a:	c8 01       	movw	r24, r16
    146c:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1470:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1474:	c8 01       	movw	r24, r16
    1476:	0e 94 71 07 	call	0xee2	; 0xee2 <prvIsQueueEmpty>
    147a:	88 23       	and	r24, r24
    147c:	09 f4       	brne	.+2      	; 0x1480 <xQueueReceive+0x12e>
    147e:	83 cf       	rjmp	.-250    	; 0x1386 <xQueueReceive+0x34>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	29 96       	adiw	r28, 0x09	; 9
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	08 95       	ret

0000149e <uxQueueMessagesWaiting>:
    149e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14a2:	ff 93       	push	r31
    14a4:	f8 7f       	andi	r31, 0xF8	; 248
    14a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14aa:	fc 01       	movw	r30, r24
    14ac:	86 8d       	ldd	r24, Z+30	; 0x1e
    14ae:	ff 91       	pop	r31
    14b0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14b4:	08 95       	ret

000014b6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    14bc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14c0:	ff 93       	push	r31
    14c2:	f8 7f       	andi	r31, 0xF8	; 248
    14c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14c8:	89 a1       	ldd	r24, Y+33	; 0x21
    14ca:	8f 3f       	cpi	r24, 0xFF	; 255
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <vQueueWaitForMessageRestricted+0x1a>
    14ce:	19 a2       	std	Y+33, r1	; 0x21
    14d0:	8a a1       	ldd	r24, Y+34	; 0x22
    14d2:	8f 3f       	cpi	r24, 0xFF	; 255
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <vQueueWaitForMessageRestricted+0x22>
    14d6:	1a a2       	std	Y+34, r1	; 0x22
    14d8:	ff 91       	pop	r31
    14da:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    14de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14e0:	81 11       	cpse	r24, r1
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    14e4:	ce 01       	movw	r24, r28
    14e6:	43 96       	adiw	r24, 0x13	; 19
    14e8:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    14ec:	ce 01       	movw	r24, r28
    14ee:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
	}
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    14f8:	e0 91 54 2c 	lds	r30, 0x2C54	; 0x802c54 <pxDelayedTaskList>
    14fc:	f0 91 55 2c 	lds	r31, 0x2C55	; 0x802c55 <pxDelayedTaskList+0x1>
    1500:	80 81       	ld	r24, Z
    1502:	81 11       	cpse	r24, r1
    1504:	0c c0       	rjmp	.+24     	; 0x151e <prvResetNextTaskUnblockTime+0x26>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	dc 01       	movw	r26, r24
    150c:	80 93 2d 2c 	sts	0x2C2D, r24	; 0x802c2d <xNextTaskUnblockTime>
    1510:	90 93 2e 2c 	sts	0x2C2E, r25	; 0x802c2e <xNextTaskUnblockTime+0x1>
    1514:	a0 93 2f 2c 	sts	0x2C2F, r26	; 0x802c2f <xNextTaskUnblockTime+0x2>
    1518:	b0 93 30 2c 	sts	0x2C30, r27	; 0x802c30 <xNextTaskUnblockTime+0x3>
    151c:	08 95       	ret
    151e:	e0 91 54 2c 	lds	r30, 0x2C54	; 0x802c54 <pxDelayedTaskList>
    1522:	f0 91 55 2c 	lds	r31, 0x2C55	; 0x802c55 <pxDelayedTaskList+0x1>
    1526:	07 80       	ldd	r0, Z+7	; 0x07
    1528:	f0 85       	ldd	r31, Z+8	; 0x08
    152a:	e0 2d       	mov	r30, r0
    152c:	00 84       	ldd	r0, Z+8	; 0x08
    152e:	f1 85       	ldd	r31, Z+9	; 0x09
    1530:	e0 2d       	mov	r30, r0
    1532:	82 81       	ldd	r24, Z+2	; 0x02
    1534:	93 81       	ldd	r25, Z+3	; 0x03
    1536:	a4 81       	ldd	r26, Z+4	; 0x04
    1538:	b5 81       	ldd	r27, Z+5	; 0x05
    153a:	80 93 2d 2c 	sts	0x2C2D, r24	; 0x802c2d <xNextTaskUnblockTime>
    153e:	90 93 2e 2c 	sts	0x2C2E, r25	; 0x802c2e <xNextTaskUnblockTime+0x1>
    1542:	a0 93 2f 2c 	sts	0x2C2F, r26	; 0x802c2f <xNextTaskUnblockTime+0x2>
    1546:	b0 93 30 2c 	sts	0x2C30, r27	; 0x802c30 <xNextTaskUnblockTime+0x3>
    154a:	08 95       	ret

0000154c <prvAddCurrentTaskToDelayedList>:
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	cf 93       	push	r28
    155e:	6b 01       	movw	r12, r22
    1560:	7c 01       	movw	r14, r24
    1562:	c4 2f       	mov	r28, r20
    1564:	80 90 37 2c 	lds	r8, 0x2C37	; 0x802c37 <xTickCount>
    1568:	90 90 38 2c 	lds	r9, 0x2C38	; 0x802c38 <xTickCount+0x1>
    156c:	a0 90 39 2c 	lds	r10, 0x2C39	; 0x802c39 <xTickCount+0x2>
    1570:	b0 90 3a 2c 	lds	r11, 0x2C3A	; 0x802c3a <xTickCount+0x3>
    1574:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1578:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    157c:	02 96       	adiw	r24, 0x02	; 2
    157e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	c8 16       	cp	r12, r24
    1586:	d8 06       	cpc	r13, r24
    1588:	e8 06       	cpc	r14, r24
    158a:	f8 06       	cpc	r15, r24
    158c:	69 f4       	brne	.+26     	; 0x15a8 <prvAddCurrentTaskToDelayedList+0x5c>
    158e:	cc 23       	and	r28, r28
    1590:	59 f0       	breq	.+22     	; 0x15a8 <prvAddCurrentTaskToDelayedList+0x5c>
    1592:	60 91 98 2c 	lds	r22, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1596:	70 91 99 2c 	lds	r23, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    159a:	6e 5f       	subi	r22, 0xFE	; 254
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	8c e3       	ldi	r24, 0x3C	; 60
    15a0:	9c e2       	ldi	r25, 0x2C	; 44
    15a2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    15a6:	3f c0       	rjmp	.+126    	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    15a8:	c8 0c       	add	r12, r8
    15aa:	d9 1c       	adc	r13, r9
    15ac:	ea 1c       	adc	r14, r10
    15ae:	fb 1c       	adc	r15, r11
    15b0:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    15b4:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    15b8:	c2 82       	std	Z+2, r12	; 0x02
    15ba:	d3 82       	std	Z+3, r13	; 0x03
    15bc:	e4 82       	std	Z+4, r14	; 0x04
    15be:	f5 82       	std	Z+5, r15	; 0x05
    15c0:	c8 14       	cp	r12, r8
    15c2:	d9 04       	cpc	r13, r9
    15c4:	ea 04       	cpc	r14, r10
    15c6:	fb 04       	cpc	r15, r11
    15c8:	68 f4       	brcc	.+26     	; 0x15e4 <prvAddCurrentTaskToDelayedList+0x98>
    15ca:	60 91 98 2c 	lds	r22, 0x2C98	; 0x802c98 <pxCurrentTCB>
    15ce:	70 91 99 2c 	lds	r23, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    15d2:	80 91 52 2c 	lds	r24, 0x2C52	; 0x802c52 <pxOverflowDelayedTaskList>
    15d6:	90 91 53 2c 	lds	r25, 0x2C53	; 0x802c53 <pxOverflowDelayedTaskList+0x1>
    15da:	6e 5f       	subi	r22, 0xFE	; 254
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    15e2:	21 c0       	rjmp	.+66     	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    15e4:	60 91 98 2c 	lds	r22, 0x2C98	; 0x802c98 <pxCurrentTCB>
    15e8:	70 91 99 2c 	lds	r23, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    15ec:	80 91 54 2c 	lds	r24, 0x2C54	; 0x802c54 <pxDelayedTaskList>
    15f0:	90 91 55 2c 	lds	r25, 0x2C55	; 0x802c55 <pxDelayedTaskList+0x1>
    15f4:	6e 5f       	subi	r22, 0xFE	; 254
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    15fc:	80 91 2d 2c 	lds	r24, 0x2C2D	; 0x802c2d <xNextTaskUnblockTime>
    1600:	90 91 2e 2c 	lds	r25, 0x2C2E	; 0x802c2e <xNextTaskUnblockTime+0x1>
    1604:	a0 91 2f 2c 	lds	r26, 0x2C2F	; 0x802c2f <xNextTaskUnblockTime+0x2>
    1608:	b0 91 30 2c 	lds	r27, 0x2C30	; 0x802c30 <xNextTaskUnblockTime+0x3>
    160c:	c8 16       	cp	r12, r24
    160e:	d9 06       	cpc	r13, r25
    1610:	ea 06       	cpc	r14, r26
    1612:	fb 06       	cpc	r15, r27
    1614:	40 f4       	brcc	.+16     	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    1616:	c0 92 2d 2c 	sts	0x2C2D, r12	; 0x802c2d <xNextTaskUnblockTime>
    161a:	d0 92 2e 2c 	sts	0x2C2E, r13	; 0x802c2e <xNextTaskUnblockTime+0x1>
    161e:	e0 92 2f 2c 	sts	0x2C2F, r14	; 0x802c2f <xNextTaskUnblockTime+0x2>
    1622:	f0 92 30 2c 	sts	0x2C30, r15	; 0x802c30 <xNextTaskUnblockTime+0x3>
    1626:	cf 91       	pop	r28
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	9f 90       	pop	r9
    1636:	8f 90       	pop	r8
    1638:	08 95       	ret

0000163a <prvIdleTask>:
    163a:	cc e6       	ldi	r28, 0x6C	; 108
    163c:	dc e2       	ldi	r29, 0x2C	; 44
    163e:	88 81       	ld	r24, Y
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	10 f0       	brcs	.+4      	; 0x1648 <prvIdleTask+0xe>
    1644:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1648:	0e 94 21 13 	call	0x2642	; 0x2642 <vApplicationIdleHook>
    164c:	f8 cf       	rjmp	.-16     	; 0x163e <prvIdleTask+0x4>

0000164e <xTaskCreate>:
    164e:	4f 92       	push	r4
    1650:	5f 92       	push	r5
    1652:	6f 92       	push	r6
    1654:	7f 92       	push	r7
    1656:	8f 92       	push	r8
    1658:	9f 92       	push	r9
    165a:	af 92       	push	r10
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	4c 01       	movw	r8, r24
    166e:	6b 01       	movw	r12, r22
    1670:	5a 01       	movw	r10, r20
    1672:	29 01       	movw	r4, r18
    1674:	ca 01       	movw	r24, r20
    1676:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    167a:	3c 01       	movw	r6, r24
    167c:	89 2b       	or	r24, r25
    167e:	09 f4       	brne	.+2      	; 0x1682 <xTaskCreate+0x34>
    1680:	ea c0       	rjmp	.+468    	; 0x1856 <xTaskCreate+0x208>
    1682:	8c e2       	ldi	r24, 0x2C	; 44
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    168a:	ec 01       	movw	r28, r24
    168c:	89 2b       	or	r24, r25
    168e:	b1 f0       	breq	.+44     	; 0x16bc <xTaskCreate+0x6e>
    1690:	6b 8e       	std	Y+27, r6	; 0x1b
    1692:	7c 8e       	std	Y+28, r7	; 0x1c
    1694:	a5 01       	movw	r20, r10
    1696:	65 ea       	ldi	r22, 0xA5	; 165
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	c3 01       	movw	r24, r6
    169c:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <memset>
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	a2 1a       	sub	r10, r18
    16a4:	b1 08       	sbc	r11, r1
    16a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16aa:	a8 0e       	add	r10, r24
    16ac:	b9 1e       	adc	r11, r25
    16ae:	d6 01       	movw	r26, r12
    16b0:	8c 91       	ld	r24, X
    16b2:	8d 8f       	std	Y+29, r24	; 0x1d
    16b4:	8c 91       	ld	r24, X
    16b6:	81 11       	cpse	r24, r1
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <xTaskCreate+0x76>
    16ba:	18 c0       	rjmp	.+48     	; 0x16ec <xTaskCreate+0x9e>
    16bc:	c3 01       	movw	r24, r6
    16be:	0e 94 29 05 	call	0xa52	; 0xa52 <vPortFree>
    16c2:	c9 c0       	rjmp	.+402    	; 0x1856 <xTaskCreate+0x208>
    16c4:	ae 01       	movw	r20, r28
    16c6:	42 5e       	subi	r20, 0xE2	; 226
    16c8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ca:	f6 01       	movw	r30, r12
    16cc:	31 96       	adiw	r30, 0x01	; 1
    16ce:	b8 e0       	ldi	r27, 0x08	; 8
    16d0:	cb 0e       	add	r12, r27
    16d2:	d1 1c       	adc	r13, r1
    16d4:	cf 01       	movw	r24, r30
    16d6:	21 91       	ld	r18, Z+
    16d8:	da 01       	movw	r26, r20
    16da:	2d 93       	st	X+, r18
    16dc:	ad 01       	movw	r20, r26
    16de:	dc 01       	movw	r26, r24
    16e0:	8c 91       	ld	r24, X
    16e2:	88 23       	and	r24, r24
    16e4:	19 f0       	breq	.+6      	; 0x16ec <xTaskCreate+0x9e>
    16e6:	ec 15       	cp	r30, r12
    16e8:	fd 05       	cpc	r31, r13
    16ea:	a1 f7       	brne	.-24     	; 0x16d4 <xTaskCreate+0x86>
    16ec:	1c a2       	std	Y+36, r1	; 0x24
    16ee:	04 30       	cpi	r16, 0x04	; 4
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <xTaskCreate+0xa6>
    16f2:	03 e0       	ldi	r16, 0x03	; 3
    16f4:	0a 8f       	std	Y+26, r16	; 0x1a
    16f6:	6e 01       	movw	r12, r28
    16f8:	b2 e0       	ldi	r27, 0x02	; 2
    16fa:	cb 0e       	add	r12, r27
    16fc:	d1 1c       	adc	r13, r1
    16fe:	c6 01       	movw	r24, r12
    1700:	0e 94 3b 05 	call	0xa76	; 0xa76 <vListInitialiseItem>
    1704:	ce 01       	movw	r24, r28
    1706:	0e 96       	adiw	r24, 0x0e	; 14
    1708:	0e 94 3b 05 	call	0xa76	; 0xa76 <vListInitialiseItem>
    170c:	ca 87       	std	Y+10, r28	; 0x0a
    170e:	db 87       	std	Y+11, r29	; 0x0b
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a0 e0       	ldi	r26, 0x00	; 0
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	80 1b       	sub	r24, r16
    171a:	91 09       	sbc	r25, r1
    171c:	a1 09       	sbc	r26, r1
    171e:	b1 09       	sbc	r27, r1
    1720:	8e 87       	std	Y+14, r24	; 0x0e
    1722:	9f 87       	std	Y+15, r25	; 0x0f
    1724:	a8 8b       	std	Y+16, r26	; 0x10
    1726:	b9 8b       	std	Y+17, r27	; 0x11
    1728:	ce 8b       	std	Y+22, r28	; 0x16
    172a:	df 8b       	std	Y+23, r29	; 0x17
    172c:	1f a2       	std	Y+39, r1	; 0x27
    172e:	18 a6       	std	Y+40, r1	; 0x28
    1730:	19 a6       	std	Y+41, r1	; 0x29
    1732:	1a a6       	std	Y+42, r1	; 0x2a
    1734:	1b a6       	std	Y+43, r1	; 0x2b
    1736:	a2 01       	movw	r20, r4
    1738:	b4 01       	movw	r22, r8
    173a:	c5 01       	movw	r24, r10
    173c:	0e 94 cb 05 	call	0xb96	; 0xb96 <pxPortInitialiseStack>
    1740:	88 83       	st	Y, r24
    1742:	99 83       	std	Y+1, r25	; 0x01
    1744:	e1 14       	cp	r14, r1
    1746:	f1 04       	cpc	r15, r1
    1748:	19 f0       	breq	.+6      	; 0x1750 <xTaskCreate+0x102>
    174a:	f7 01       	movw	r30, r14
    174c:	c0 83       	st	Z, r28
    174e:	d1 83       	std	Z+1, r29	; 0x01
    1750:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1754:	ff 93       	push	r31
    1756:	f8 7f       	andi	r31, 0xF8	; 248
    1758:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    175c:	80 91 3b 2c 	lds	r24, 0x2C3B	; 0x802c3b <uxCurrentNumberOfTasks>
    1760:	8f 5f       	subi	r24, 0xFF	; 255
    1762:	80 93 3b 2c 	sts	0x2C3B, r24	; 0x802c3b <uxCurrentNumberOfTasks>
    1766:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <pxCurrentTCB>
    176a:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    176e:	89 2b       	or	r24, r25
    1770:	a9 f5       	brne	.+106    	; 0x17dc <xTaskCreate+0x18e>
    1772:	c0 93 98 2c 	sts	0x2C98, r28	; 0x802c98 <pxCurrentTCB>
    1776:	d0 93 99 2c 	sts	0x2C99, r29	; 0x802c99 <pxCurrentTCB+0x1>
    177a:	80 91 3b 2c 	lds	r24, 0x2C3B	; 0x802c3b <uxCurrentNumberOfTasks>
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	e9 f5       	brne	.+122    	; 0x17fc <xTaskCreate+0x1ae>
    1782:	8c e6       	ldi	r24, 0x6C	; 108
    1784:	9c e2       	ldi	r25, 0x2C	; 44
    1786:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    178a:	87 e7       	ldi	r24, 0x77	; 119
    178c:	9c e2       	ldi	r25, 0x2C	; 44
    178e:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    1792:	82 e8       	ldi	r24, 0x82	; 130
    1794:	9c e2       	ldi	r25, 0x2C	; 44
    1796:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    179a:	8d e8       	ldi	r24, 0x8D	; 141
    179c:	9c e2       	ldi	r25, 0x2C	; 44
    179e:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17a2:	81 e6       	ldi	r24, 0x61	; 97
    17a4:	9c e2       	ldi	r25, 0x2C	; 44
    17a6:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17aa:	86 e5       	ldi	r24, 0x56	; 86
    17ac:	9c e2       	ldi	r25, 0x2C	; 44
    17ae:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17b2:	87 e4       	ldi	r24, 0x47	; 71
    17b4:	9c e2       	ldi	r25, 0x2C	; 44
    17b6:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17ba:	8c e3       	ldi	r24, 0x3C	; 60
    17bc:	9c e2       	ldi	r25, 0x2C	; 44
    17be:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17c2:	81 e6       	ldi	r24, 0x61	; 97
    17c4:	9c e2       	ldi	r25, 0x2C	; 44
    17c6:	80 93 54 2c 	sts	0x2C54, r24	; 0x802c54 <pxDelayedTaskList>
    17ca:	90 93 55 2c 	sts	0x2C55, r25	; 0x802c55 <pxDelayedTaskList+0x1>
    17ce:	86 e5       	ldi	r24, 0x56	; 86
    17d0:	9c e2       	ldi	r25, 0x2C	; 44
    17d2:	80 93 52 2c 	sts	0x2C52, r24	; 0x802c52 <pxOverflowDelayedTaskList>
    17d6:	90 93 53 2c 	sts	0x2C53, r25	; 0x802c53 <pxOverflowDelayedTaskList+0x1>
    17da:	10 c0       	rjmp	.+32     	; 0x17fc <xTaskCreate+0x1ae>
    17dc:	80 91 35 2c 	lds	r24, 0x2C35	; 0x802c35 <xSchedulerRunning>
    17e0:	81 11       	cpse	r24, r1
    17e2:	0c c0       	rjmp	.+24     	; 0x17fc <xTaskCreate+0x1ae>
    17e4:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    17e8:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    17ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    17ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17f0:	89 17       	cp	r24, r25
    17f2:	20 f0       	brcs	.+8      	; 0x17fc <xTaskCreate+0x1ae>
    17f4:	c0 93 98 2c 	sts	0x2C98, r28	; 0x802c98 <pxCurrentTCB>
    17f8:	d0 93 99 2c 	sts	0x2C99, r29	; 0x802c99 <pxCurrentTCB+0x1>
    17fc:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <uxTaskNumber>
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	80 93 31 2c 	sts	0x2C31, r24	; 0x802c31 <uxTaskNumber>
    1806:	8d a3       	std	Y+37, r24	; 0x25
    1808:	8a 8d       	ldd	r24, Y+26	; 0x1a
    180a:	90 91 36 2c 	lds	r25, 0x2C36	; 0x802c36 <uxTopReadyPriority>
    180e:	98 17       	cp	r25, r24
    1810:	10 f4       	brcc	.+4      	; 0x1816 <xTaskCreate+0x1c8>
    1812:	80 93 36 2c 	sts	0x2C36, r24	; 0x802c36 <uxTopReadyPriority>
    1816:	fb e0       	ldi	r31, 0x0B	; 11
    1818:	8f 9f       	mul	r24, r31
    181a:	c0 01       	movw	r24, r0
    181c:	11 24       	eor	r1, r1
    181e:	b6 01       	movw	r22, r12
    1820:	84 59       	subi	r24, 0x94	; 148
    1822:	93 4d       	sbci	r25, 0xD3	; 211
    1824:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1828:	ff 91       	pop	r31
    182a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    182e:	80 91 35 2c 	lds	r24, 0x2C35	; 0x802c35 <xSchedulerRunning>
    1832:	88 23       	and	r24, r24
    1834:	61 f0       	breq	.+24     	; 0x184e <xTaskCreate+0x200>
    1836:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    183a:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    183e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1840:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1842:	98 17       	cp	r25, r24
    1844:	30 f4       	brcc	.+12     	; 0x1852 <xTaskCreate+0x204>
    1846:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <xTaskCreate+0x20a>
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <xTaskCreate+0x20a>
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <xTaskCreate+0x20a>
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	df 90       	pop	r13
    1864:	cf 90       	pop	r12
    1866:	bf 90       	pop	r11
    1868:	af 90       	pop	r10
    186a:	9f 90       	pop	r9
    186c:	8f 90       	pop	r8
    186e:	7f 90       	pop	r7
    1870:	6f 90       	pop	r6
    1872:	5f 90       	pop	r5
    1874:	4f 90       	pop	r4
    1876:	08 95       	ret

00001878 <vTaskStartScheduler>:
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	0f 2e       	mov	r0, r31
    1880:	fb e2       	ldi	r31, 0x2B	; 43
    1882:	ef 2e       	mov	r14, r31
    1884:	fc e2       	ldi	r31, 0x2C	; 44
    1886:	ff 2e       	mov	r15, r31
    1888:	f0 2d       	mov	r31, r0
    188a:	00 e0       	ldi	r16, 0x00	; 0
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	48 ec       	ldi	r20, 0xC8	; 200
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	66 e5       	ldi	r22, 0x56	; 86
    1896:	70 e2       	ldi	r23, 0x20	; 32
    1898:	8d e1       	ldi	r24, 0x1D	; 29
    189a:	9b e0       	ldi	r25, 0x0B	; 11
    189c:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	09 f5       	brne	.+66     	; 0x18e6 <vTaskStartScheduler+0x6e>
    18a4:	0e 94 81 10 	call	0x2102	; 0x2102 <xTimerCreateTimerTask>
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	e9 f4       	brne	.+58     	; 0x18e6 <vTaskStartScheduler+0x6e>
    18ac:	e0 ea       	ldi	r30, 0xA0	; 160
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	88 7f       	andi	r24, 0xF8	; 248
    18b4:	82 83       	std	Z+2, r24	; 0x02
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	9f ef       	ldi	r25, 0xFF	; 255
    18ba:	dc 01       	movw	r26, r24
    18bc:	80 93 2d 2c 	sts	0x2C2D, r24	; 0x802c2d <xNextTaskUnblockTime>
    18c0:	90 93 2e 2c 	sts	0x2C2E, r25	; 0x802c2e <xNextTaskUnblockTime+0x1>
    18c4:	a0 93 2f 2c 	sts	0x2C2F, r26	; 0x802c2f <xNextTaskUnblockTime+0x2>
    18c8:	b0 93 30 2c 	sts	0x2C30, r27	; 0x802c30 <xNextTaskUnblockTime+0x3>
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 93 35 2c 	sts	0x2C35, r24	; 0x802c35 <xSchedulerRunning>
    18d2:	10 92 37 2c 	sts	0x2C37, r1	; 0x802c37 <xTickCount>
    18d6:	10 92 38 2c 	sts	0x2C38, r1	; 0x802c38 <xTickCount+0x1>
    18da:	10 92 39 2c 	sts	0x2C39, r1	; 0x802c39 <xTickCount+0x2>
    18de:	10 92 3a 2c 	sts	0x2C3A, r1	; 0x802c3a <xTickCount+0x3>
    18e2:	0e 94 48 06 	call	0xc90	; 0xc90 <xPortStartScheduler>
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	08 95       	ret

000018ee <vTaskSuspendAll>:
    18ee:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <uxSchedulerSuspended>
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	80 93 2a 2c 	sts	0x2C2A, r24	; 0x802c2a <uxSchedulerSuspended>
    18f8:	08 95       	ret

000018fa <xTaskGetTickCount>:
    18fa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18fe:	ff 93       	push	r31
    1900:	f8 7f       	andi	r31, 0xF8	; 248
    1902:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1906:	60 91 37 2c 	lds	r22, 0x2C37	; 0x802c37 <xTickCount>
    190a:	70 91 38 2c 	lds	r23, 0x2C38	; 0x802c38 <xTickCount+0x1>
    190e:	80 91 39 2c 	lds	r24, 0x2C39	; 0x802c39 <xTickCount+0x2>
    1912:	90 91 3a 2c 	lds	r25, 0x2C3A	; 0x802c3a <xTickCount+0x3>
    1916:	ff 91       	pop	r31
    1918:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    191c:	08 95       	ret

0000191e <xTaskIncrementTick>:
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <uxSchedulerSuspended>
    1936:	81 11       	cpse	r24, r1
    1938:	ad c0       	rjmp	.+346    	; 0x1a94 <xTaskIncrementTick+0x176>
    193a:	c0 90 37 2c 	lds	r12, 0x2C37	; 0x802c37 <xTickCount>
    193e:	d0 90 38 2c 	lds	r13, 0x2C38	; 0x802c38 <xTickCount+0x1>
    1942:	e0 90 39 2c 	lds	r14, 0x2C39	; 0x802c39 <xTickCount+0x2>
    1946:	f0 90 3a 2c 	lds	r15, 0x2C3A	; 0x802c3a <xTickCount+0x3>
    194a:	8f ef       	ldi	r24, 0xFF	; 255
    194c:	c8 1a       	sub	r12, r24
    194e:	d8 0a       	sbc	r13, r24
    1950:	e8 0a       	sbc	r14, r24
    1952:	f8 0a       	sbc	r15, r24
    1954:	c0 92 37 2c 	sts	0x2C37, r12	; 0x802c37 <xTickCount>
    1958:	d0 92 38 2c 	sts	0x2C38, r13	; 0x802c38 <xTickCount+0x1>
    195c:	e0 92 39 2c 	sts	0x2C39, r14	; 0x802c39 <xTickCount+0x2>
    1960:	f0 92 3a 2c 	sts	0x2C3A, r15	; 0x802c3a <xTickCount+0x3>
    1964:	c1 14       	cp	r12, r1
    1966:	d1 04       	cpc	r13, r1
    1968:	e1 04       	cpc	r14, r1
    196a:	f1 04       	cpc	r15, r1
    196c:	b9 f4       	brne	.+46     	; 0x199c <xTaskIncrementTick+0x7e>
    196e:	80 91 54 2c 	lds	r24, 0x2C54	; 0x802c54 <pxDelayedTaskList>
    1972:	90 91 55 2c 	lds	r25, 0x2C55	; 0x802c55 <pxDelayedTaskList+0x1>
    1976:	20 91 52 2c 	lds	r18, 0x2C52	; 0x802c52 <pxOverflowDelayedTaskList>
    197a:	30 91 53 2c 	lds	r19, 0x2C53	; 0x802c53 <pxOverflowDelayedTaskList+0x1>
    197e:	20 93 54 2c 	sts	0x2C54, r18	; 0x802c54 <pxDelayedTaskList>
    1982:	30 93 55 2c 	sts	0x2C55, r19	; 0x802c55 <pxDelayedTaskList+0x1>
    1986:	80 93 52 2c 	sts	0x2C52, r24	; 0x802c52 <pxOverflowDelayedTaskList>
    198a:	90 93 53 2c 	sts	0x2C53, r25	; 0x802c53 <pxOverflowDelayedTaskList+0x1>
    198e:	80 91 32 2c 	lds	r24, 0x2C32	; 0x802c32 <xNumOfOverflows>
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	80 93 32 2c 	sts	0x2C32, r24	; 0x802c32 <xNumOfOverflows>
    1998:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <prvResetNextTaskUnblockTime>
    199c:	80 91 2d 2c 	lds	r24, 0x2C2D	; 0x802c2d <xNextTaskUnblockTime>
    19a0:	90 91 2e 2c 	lds	r25, 0x2C2E	; 0x802c2e <xNextTaskUnblockTime+0x1>
    19a4:	a0 91 2f 2c 	lds	r26, 0x2C2F	; 0x802c2f <xNextTaskUnblockTime+0x2>
    19a8:	b0 91 30 2c 	lds	r27, 0x2C30	; 0x802c30 <xNextTaskUnblockTime+0x3>
    19ac:	c8 16       	cp	r12, r24
    19ae:	d9 06       	cpc	r13, r25
    19b0:	ea 06       	cpc	r14, r26
    19b2:	fb 06       	cpc	r15, r27
    19b4:	10 f4       	brcc	.+4      	; 0x19ba <xTaskIncrementTick+0x9c>
    19b6:	b1 2c       	mov	r11, r1
    19b8:	5c c0       	rjmp	.+184    	; 0x1a72 <xTaskIncrementTick+0x154>
    19ba:	b1 2c       	mov	r11, r1
    19bc:	0f 2e       	mov	r0, r31
    19be:	fb e0       	ldi	r31, 0x0B	; 11
    19c0:	af 2e       	mov	r10, r31
    19c2:	f0 2d       	mov	r31, r0
    19c4:	e0 91 54 2c 	lds	r30, 0x2C54	; 0x802c54 <pxDelayedTaskList>
    19c8:	f0 91 55 2c 	lds	r31, 0x2C55	; 0x802c55 <pxDelayedTaskList+0x1>
    19cc:	80 81       	ld	r24, Z
    19ce:	81 11       	cpse	r24, r1
    19d0:	0c c0       	rjmp	.+24     	; 0x19ea <xTaskIncrementTick+0xcc>
    19d2:	8f ef       	ldi	r24, 0xFF	; 255
    19d4:	9f ef       	ldi	r25, 0xFF	; 255
    19d6:	dc 01       	movw	r26, r24
    19d8:	80 93 2d 2c 	sts	0x2C2D, r24	; 0x802c2d <xNextTaskUnblockTime>
    19dc:	90 93 2e 2c 	sts	0x2C2E, r25	; 0x802c2e <xNextTaskUnblockTime+0x1>
    19e0:	a0 93 2f 2c 	sts	0x2C2F, r26	; 0x802c2f <xNextTaskUnblockTime+0x2>
    19e4:	b0 93 30 2c 	sts	0x2C30, r27	; 0x802c30 <xNextTaskUnblockTime+0x3>
    19e8:	44 c0       	rjmp	.+136    	; 0x1a72 <xTaskIncrementTick+0x154>
    19ea:	e0 91 54 2c 	lds	r30, 0x2C54	; 0x802c54 <pxDelayedTaskList>
    19ee:	f0 91 55 2c 	lds	r31, 0x2C55	; 0x802c55 <pxDelayedTaskList+0x1>
    19f2:	07 80       	ldd	r0, Z+7	; 0x07
    19f4:	f0 85       	ldd	r31, Z+8	; 0x08
    19f6:	e0 2d       	mov	r30, r0
    19f8:	c0 85       	ldd	r28, Z+8	; 0x08
    19fa:	d1 85       	ldd	r29, Z+9	; 0x09
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	ac 81       	ldd	r26, Y+4	; 0x04
    1a02:	bd 81       	ldd	r27, Y+5	; 0x05
    1a04:	c8 16       	cp	r12, r24
    1a06:	d9 06       	cpc	r13, r25
    1a08:	ea 06       	cpc	r14, r26
    1a0a:	fb 06       	cpc	r15, r27
    1a0c:	48 f4       	brcc	.+18     	; 0x1a20 <xTaskIncrementTick+0x102>
    1a0e:	80 93 2d 2c 	sts	0x2C2D, r24	; 0x802c2d <xNextTaskUnblockTime>
    1a12:	90 93 2e 2c 	sts	0x2C2E, r25	; 0x802c2e <xNextTaskUnblockTime+0x1>
    1a16:	a0 93 2f 2c 	sts	0x2C2F, r26	; 0x802c2f <xNextTaskUnblockTime+0x2>
    1a1a:	b0 93 30 2c 	sts	0x2C30, r27	; 0x802c30 <xNextTaskUnblockTime+0x3>
    1a1e:	29 c0       	rjmp	.+82     	; 0x1a72 <xTaskIncrementTick+0x154>
    1a20:	8e 01       	movw	r16, r28
    1a22:	0e 5f       	subi	r16, 0xFE	; 254
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	c8 01       	movw	r24, r16
    1a28:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1a2c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a2e:	99 8d       	ldd	r25, Y+25	; 0x19
    1a30:	89 2b       	or	r24, r25
    1a32:	21 f0       	breq	.+8      	; 0x1a3c <xTaskIncrementTick+0x11e>
    1a34:	ce 01       	movw	r24, r28
    1a36:	0e 96       	adiw	r24, 0x0e	; 14
    1a38:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1a3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a3e:	90 91 36 2c 	lds	r25, 0x2C36	; 0x802c36 <uxTopReadyPriority>
    1a42:	98 17       	cp	r25, r24
    1a44:	10 f4       	brcc	.+4      	; 0x1a4a <xTaskIncrementTick+0x12c>
    1a46:	80 93 36 2c 	sts	0x2C36, r24	; 0x802c36 <uxTopReadyPriority>
    1a4a:	a8 9e       	mul	r10, r24
    1a4c:	c0 01       	movw	r24, r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	b8 01       	movw	r22, r16
    1a52:	84 59       	subi	r24, 0x94	; 148
    1a54:	93 4d       	sbci	r25, 0xD3	; 211
    1a56:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1a5a:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1a5e:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1a62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a64:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a66:	98 17       	cp	r25, r24
    1a68:	08 f4       	brcc	.+2      	; 0x1a6c <xTaskIncrementTick+0x14e>
    1a6a:	ac cf       	rjmp	.-168    	; 0x19c4 <xTaskIncrementTick+0xa6>
    1a6c:	bb 24       	eor	r11, r11
    1a6e:	b3 94       	inc	r11
    1a70:	a9 cf       	rjmp	.-174    	; 0x19c4 <xTaskIncrementTick+0xa6>
    1a72:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1a76:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1a7a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1a7c:	8b e0       	ldi	r24, 0x0B	; 11
    1a7e:	e8 9f       	mul	r30, r24
    1a80:	f0 01       	movw	r30, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	e4 59       	subi	r30, 0x94	; 148
    1a86:	f3 4d       	sbci	r31, 0xD3	; 211
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	48 f0       	brcs	.+18     	; 0x1aa0 <xTaskIncrementTick+0x182>
    1a8e:	bb 24       	eor	r11, r11
    1a90:	b3 94       	inc	r11
    1a92:	06 c0       	rjmp	.+12     	; 0x1aa0 <xTaskIncrementTick+0x182>
    1a94:	80 91 34 2c 	lds	r24, 0x2C34	; 0x802c34 <uxPendedTicks>
    1a98:	8f 5f       	subi	r24, 0xFF	; 255
    1a9a:	80 93 34 2c 	sts	0x2C34, r24	; 0x802c34 <uxPendedTicks>
    1a9e:	b1 2c       	mov	r11, r1
    1aa0:	80 91 33 2c 	lds	r24, 0x2C33	; 0x802c33 <xYieldPending>
    1aa4:	88 23       	and	r24, r24
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <xTaskIncrementTick+0x18e>
    1aa8:	bb 24       	eor	r11, r11
    1aaa:	b3 94       	inc	r11
    1aac:	8b 2d       	mov	r24, r11
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	af 90       	pop	r10
    1ac2:	08 95       	ret

00001ac4 <xTaskResumeAll>:
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ad8:	ff 93       	push	r31
    1ada:	f8 7f       	andi	r31, 0xF8	; 248
    1adc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ae0:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <uxSchedulerSuspended>
    1ae4:	81 50       	subi	r24, 0x01	; 1
    1ae6:	80 93 2a 2c 	sts	0x2C2A, r24	; 0x802c2a <uxSchedulerSuspended>
    1aea:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <uxSchedulerSuspended>
    1aee:	81 11       	cpse	r24, r1
    1af0:	5c c0       	rjmp	.+184    	; 0x1baa <xTaskResumeAll+0xe6>
    1af2:	80 91 3b 2c 	lds	r24, 0x2C3B	; 0x802c3b <uxCurrentNumberOfTasks>
    1af6:	81 11       	cpse	r24, r1
    1af8:	2c c0       	rjmp	.+88     	; 0x1b52 <xTaskResumeAll+0x8e>
    1afa:	5a c0       	rjmp	.+180    	; 0x1bb0 <xTaskResumeAll+0xec>
    1afc:	d7 01       	movw	r26, r14
    1afe:	17 96       	adiw	r26, 0x07	; 7
    1b00:	ed 91       	ld	r30, X+
    1b02:	fc 91       	ld	r31, X
    1b04:	18 97       	sbiw	r26, 0x08	; 8
    1b06:	c0 85       	ldd	r28, Z+8	; 0x08
    1b08:	d1 85       	ldd	r29, Z+9	; 0x09
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	0e 96       	adiw	r24, 0x0e	; 14
    1b0e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1b12:	8e 01       	movw	r16, r28
    1b14:	0e 5f       	subi	r16, 0xFE	; 254
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	c8 01       	movw	r24, r16
    1b1a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1b1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b20:	90 91 36 2c 	lds	r25, 0x2C36	; 0x802c36 <uxTopReadyPriority>
    1b24:	98 17       	cp	r25, r24
    1b26:	10 f4       	brcc	.+4      	; 0x1b2c <xTaskResumeAll+0x68>
    1b28:	80 93 36 2c 	sts	0x2C36, r24	; 0x802c36 <uxTopReadyPriority>
    1b2c:	d8 9e       	mul	r13, r24
    1b2e:	c0 01       	movw	r24, r0
    1b30:	11 24       	eor	r1, r1
    1b32:	b8 01       	movw	r22, r16
    1b34:	84 59       	subi	r24, 0x94	; 148
    1b36:	93 4d       	sbci	r25, 0xD3	; 211
    1b38:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1b3c:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1b40:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1b44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b46:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b48:	98 17       	cp	r25, r24
    1b4a:	88 f0       	brcs	.+34     	; 0x1b6e <xTaskResumeAll+0xaa>
    1b4c:	c0 92 33 2c 	sts	0x2C33, r12	; 0x802c33 <xYieldPending>
    1b50:	0e c0       	rjmp	.+28     	; 0x1b6e <xTaskResumeAll+0xaa>
    1b52:	c0 e0       	ldi	r28, 0x00	; 0
    1b54:	d0 e0       	ldi	r29, 0x00	; 0
    1b56:	0f 2e       	mov	r0, r31
    1b58:	f7 e4       	ldi	r31, 0x47	; 71
    1b5a:	ef 2e       	mov	r14, r31
    1b5c:	fc e2       	ldi	r31, 0x2C	; 44
    1b5e:	ff 2e       	mov	r15, r31
    1b60:	f0 2d       	mov	r31, r0
    1b62:	0f 2e       	mov	r0, r31
    1b64:	fb e0       	ldi	r31, 0x0B	; 11
    1b66:	df 2e       	mov	r13, r31
    1b68:	f0 2d       	mov	r31, r0
    1b6a:	cc 24       	eor	r12, r12
    1b6c:	c3 94       	inc	r12
    1b6e:	f7 01       	movw	r30, r14
    1b70:	80 81       	ld	r24, Z
    1b72:	81 11       	cpse	r24, r1
    1b74:	c3 cf       	rjmp	.-122    	; 0x1afc <xTaskResumeAll+0x38>
    1b76:	cd 2b       	or	r28, r29
    1b78:	11 f0       	breq	.+4      	; 0x1b7e <xTaskResumeAll+0xba>
    1b7a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <prvResetNextTaskUnblockTime>
    1b7e:	c0 91 34 2c 	lds	r28, 0x2C34	; 0x802c34 <uxPendedTicks>
    1b82:	cc 23       	and	r28, r28
    1b84:	51 f0       	breq	.+20     	; 0x1b9a <xTaskResumeAll+0xd6>
    1b86:	d1 e0       	ldi	r29, 0x01	; 1
    1b88:	0e 94 8f 0c 	call	0x191e	; 0x191e <xTaskIncrementTick>
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	d0 93 33 2c 	sts	0x2C33, r29	; 0x802c33 <xYieldPending>
    1b92:	c1 50       	subi	r28, 0x01	; 1
    1b94:	c9 f7       	brne	.-14     	; 0x1b88 <xTaskResumeAll+0xc4>
    1b96:	10 92 34 2c 	sts	0x2C34, r1	; 0x802c34 <uxPendedTicks>
    1b9a:	80 91 33 2c 	lds	r24, 0x2C33	; 0x802c33 <xYieldPending>
    1b9e:	88 23       	and	r24, r24
    1ba0:	31 f0       	breq	.+12     	; 0x1bae <xTaskResumeAll+0xea>
    1ba2:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <xTaskResumeAll+0xec>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <xTaskResumeAll+0xec>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	ff 91       	pop	r31
    1bb2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	08 95       	ret

00001bc8 <vTaskDelay>:
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	6b 01       	movw	r12, r22
    1bd2:	7c 01       	movw	r14, r24
    1bd4:	67 2b       	or	r22, r23
    1bd6:	68 2b       	or	r22, r24
    1bd8:	69 2b       	or	r22, r25
    1bda:	59 f0       	breq	.+22     	; 0x1bf2 <vTaskDelay+0x2a>
    1bdc:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	c7 01       	movw	r24, r14
    1be4:	b6 01       	movw	r22, r12
    1be6:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1bea:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1bee:	81 11       	cpse	r24, r1
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <vTaskDelay+0x2e>
    1bf2:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	08 95       	ret

00001c00 <vTaskSwitchContext>:
    1c00:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <uxSchedulerSuspended>
    1c04:	88 23       	and	r24, r24
    1c06:	21 f0       	breq	.+8      	; 0x1c10 <vTaskSwitchContext+0x10>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	80 93 33 2c 	sts	0x2C33, r24	; 0x802c33 <xYieldPending>
    1c0e:	08 95       	ret
    1c10:	10 92 33 2c 	sts	0x2C33, r1	; 0x802c33 <xYieldPending>
    1c14:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1c18:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1c1c:	03 8c       	ldd	r0, Z+27	; 0x1b
    1c1e:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1c20:	e0 2d       	mov	r30, r0
    1c22:	80 81       	ld	r24, Z
    1c24:	91 81       	ldd	r25, Z+1	; 0x01
    1c26:	a2 81       	ldd	r26, Z+2	; 0x02
    1c28:	b3 81       	ldd	r27, Z+3	; 0x03
    1c2a:	85 3a       	cpi	r24, 0xA5	; 165
    1c2c:	95 4a       	sbci	r25, 0xA5	; 165
    1c2e:	a5 4a       	sbci	r26, 0xA5	; 165
    1c30:	b5 4a       	sbci	r27, 0xA5	; 165
    1c32:	d9 f4       	brne	.+54     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c34:	84 81       	ldd	r24, Z+4	; 0x04
    1c36:	95 81       	ldd	r25, Z+5	; 0x05
    1c38:	a6 81       	ldd	r26, Z+6	; 0x06
    1c3a:	b7 81       	ldd	r27, Z+7	; 0x07
    1c3c:	85 3a       	cpi	r24, 0xA5	; 165
    1c3e:	95 4a       	sbci	r25, 0xA5	; 165
    1c40:	a5 4a       	sbci	r26, 0xA5	; 165
    1c42:	b5 4a       	sbci	r27, 0xA5	; 165
    1c44:	91 f4       	brne	.+36     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c46:	80 85       	ldd	r24, Z+8	; 0x08
    1c48:	91 85       	ldd	r25, Z+9	; 0x09
    1c4a:	a2 85       	ldd	r26, Z+10	; 0x0a
    1c4c:	b3 85       	ldd	r27, Z+11	; 0x0b
    1c4e:	85 3a       	cpi	r24, 0xA5	; 165
    1c50:	95 4a       	sbci	r25, 0xA5	; 165
    1c52:	a5 4a       	sbci	r26, 0xA5	; 165
    1c54:	b5 4a       	sbci	r27, 0xA5	; 165
    1c56:	49 f4       	brne	.+18     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c58:	84 85       	ldd	r24, Z+12	; 0x0c
    1c5a:	95 85       	ldd	r25, Z+13	; 0x0d
    1c5c:	a6 85       	ldd	r26, Z+14	; 0x0e
    1c5e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1c60:	85 3a       	cpi	r24, 0xA5	; 165
    1c62:	95 4a       	sbci	r25, 0xA5	; 165
    1c64:	a5 4a       	sbci	r26, 0xA5	; 165
    1c66:	b5 4a       	sbci	r27, 0xA5	; 165
    1c68:	61 f0       	breq	.+24     	; 0x1c82 <vTaskSwitchContext+0x82>
    1c6a:	60 91 98 2c 	lds	r22, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1c6e:	70 91 99 2c 	lds	r23, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1c72:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1c76:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1c7a:	63 5e       	subi	r22, 0xE3	; 227
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <vApplicationStackOverflowHook>
    1c82:	80 91 36 2c 	lds	r24, 0x2C36	; 0x802c36 <uxTopReadyPriority>
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	9b e0       	ldi	r25, 0x0B	; 11
    1c8c:	89 9f       	mul	r24, r25
    1c8e:	f0 01       	movw	r30, r0
    1c90:	11 24       	eor	r1, r1
    1c92:	e4 59       	subi	r30, 0x94	; 148
    1c94:	f3 4d       	sbci	r31, 0xD3	; 211
    1c96:	90 81       	ld	r25, Z
    1c98:	91 11       	cpse	r25, r1
    1c9a:	0e c0       	rjmp	.+28     	; 0x1cb8 <vTaskSwitchContext+0xb8>
    1c9c:	4b e0       	ldi	r20, 0x0B	; 11
    1c9e:	81 50       	subi	r24, 0x01	; 1
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	42 9f       	mul	r20, r18
    1ca6:	f0 01       	movw	r30, r0
    1ca8:	43 9f       	mul	r20, r19
    1caa:	f0 0d       	add	r31, r0
    1cac:	11 24       	eor	r1, r1
    1cae:	e4 59       	subi	r30, 0x94	; 148
    1cb0:	f3 4d       	sbci	r31, 0xD3	; 211
    1cb2:	90 81       	ld	r25, Z
    1cb4:	99 23       	and	r25, r25
    1cb6:	99 f3       	breq	.-26     	; 0x1c9e <vTaskSwitchContext+0x9e>
    1cb8:	9b e0       	ldi	r25, 0x0B	; 11
    1cba:	92 9f       	mul	r25, r18
    1cbc:	a0 01       	movw	r20, r0
    1cbe:	93 9f       	mul	r25, r19
    1cc0:	50 0d       	add	r21, r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	da 01       	movw	r26, r20
    1cc6:	a4 59       	subi	r26, 0x94	; 148
    1cc8:	b3 4d       	sbci	r27, 0xD3	; 211
    1cca:	11 96       	adiw	r26, 0x01	; 1
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	12 97       	sbiw	r26, 0x02	; 2
    1cd2:	04 80       	ldd	r0, Z+4	; 0x04
    1cd4:	f5 81       	ldd	r31, Z+5	; 0x05
    1cd6:	e0 2d       	mov	r30, r0
    1cd8:	11 96       	adiw	r26, 0x01	; 1
    1cda:	ed 93       	st	X+, r30
    1cdc:	fc 93       	st	X, r31
    1cde:	12 97       	sbiw	r26, 0x02	; 2
    1ce0:	41 59       	subi	r20, 0x91	; 145
    1ce2:	53 4d       	sbci	r21, 0xD3	; 211
    1ce4:	e4 17       	cp	r30, r20
    1ce6:	f5 07       	cpc	r31, r21
    1ce8:	29 f4       	brne	.+10     	; 0x1cf4 <vTaskSwitchContext+0xf4>
    1cea:	44 81       	ldd	r20, Z+4	; 0x04
    1cec:	55 81       	ldd	r21, Z+5	; 0x05
    1cee:	fd 01       	movw	r30, r26
    1cf0:	41 83       	std	Z+1, r20	; 0x01
    1cf2:	52 83       	std	Z+2, r21	; 0x02
    1cf4:	9b e0       	ldi	r25, 0x0B	; 11
    1cf6:	92 9f       	mul	r25, r18
    1cf8:	f0 01       	movw	r30, r0
    1cfa:	93 9f       	mul	r25, r19
    1cfc:	f0 0d       	add	r31, r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	e4 59       	subi	r30, 0x94	; 148
    1d02:	f3 4d       	sbci	r31, 0xD3	; 211
    1d04:	01 80       	ldd	r0, Z+1	; 0x01
    1d06:	f2 81       	ldd	r31, Z+2	; 0x02
    1d08:	e0 2d       	mov	r30, r0
    1d0a:	20 85       	ldd	r18, Z+8	; 0x08
    1d0c:	31 85       	ldd	r19, Z+9	; 0x09
    1d0e:	20 93 98 2c 	sts	0x2C98, r18	; 0x802c98 <pxCurrentTCB>
    1d12:	30 93 99 2c 	sts	0x2C99, r19	; 0x802c99 <pxCurrentTCB+0x1>
    1d16:	80 93 36 2c 	sts	0x2C36, r24	; 0x802c36 <uxTopReadyPriority>
    1d1a:	08 95       	ret

00001d1c <vTaskPlaceOnEventList>:
    1d1c:	cf 92       	push	r12
    1d1e:	df 92       	push	r13
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	6a 01       	movw	r12, r20
    1d26:	7b 01       	movw	r14, r22
    1d28:	60 91 98 2c 	lds	r22, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1d2c:	70 91 99 2c 	lds	r23, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1d30:	62 5f       	subi	r22, 0xF2	; 242
    1d32:	7f 4f       	sbci	r23, 0xFF	; 255
    1d34:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	08 95       	ret

00001d4c <vTaskPlaceOnUnorderedEventList>:
    1d4c:	cf 92       	push	r12
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	68 01       	movw	r12, r16
    1d5a:	79 01       	movw	r14, r18
    1d5c:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1d60:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1d64:	70 68       	ori	r23, 0x80	; 128
    1d66:	46 87       	std	Z+14, r20	; 0x0e
    1d68:	57 87       	std	Z+15, r21	; 0x0f
    1d6a:	60 8b       	std	Z+16, r22	; 0x10
    1d6c:	71 8b       	std	Z+17, r23	; 0x11
    1d6e:	60 91 98 2c 	lds	r22, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1d72:	70 91 99 2c 	lds	r23, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1d76:	62 5f       	subi	r22, 0xF2	; 242
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	c7 01       	movw	r24, r14
    1d82:	b6 01       	movw	r22, r12
    1d84:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	08 95       	ret

00001d96 <vTaskPlaceOnEventListRestricted>:
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	cf 93       	push	r28
    1da0:	6a 01       	movw	r12, r20
    1da2:	7b 01       	movw	r14, r22
    1da4:	c2 2f       	mov	r28, r18
    1da6:	60 91 98 2c 	lds	r22, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1daa:	70 91 99 2c 	lds	r23, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1dae:	62 5f       	subi	r22, 0xF2	; 242
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1db6:	cc 23       	and	r28, r28
    1db8:	21 f0       	breq	.+8      	; 0x1dc2 <vTaskPlaceOnEventListRestricted+0x2c>
    1dba:	cc 24       	eor	r12, r12
    1dbc:	ca 94       	dec	r12
    1dbe:	dc 2c       	mov	r13, r12
    1dc0:	76 01       	movw	r14, r12
    1dc2:	4c 2f       	mov	r20, r28
    1dc4:	c7 01       	movw	r24, r14
    1dc6:	b6 01       	movw	r22, r12
    1dc8:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1dcc:	cf 91       	pop	r28
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	08 95       	ret

00001dd8 <xTaskRemoveFromEventList>:
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	dc 01       	movw	r26, r24
    1de2:	17 96       	adiw	r26, 0x07	; 7
    1de4:	ed 91       	ld	r30, X+
    1de6:	fc 91       	ld	r31, X
    1de8:	18 97       	sbiw	r26, 0x08	; 8
    1dea:	c0 85       	ldd	r28, Z+8	; 0x08
    1dec:	d1 85       	ldd	r29, Z+9	; 0x09
    1dee:	8e 01       	movw	r16, r28
    1df0:	02 5f       	subi	r16, 0xF2	; 242
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	c8 01       	movw	r24, r16
    1df6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1dfa:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <uxSchedulerSuspended>
    1dfe:	81 11       	cpse	r24, r1
    1e00:	16 c0       	rjmp	.+44     	; 0x1e2e <xTaskRemoveFromEventList+0x56>
    1e02:	0c 50       	subi	r16, 0x0C	; 12
    1e04:	11 09       	sbc	r17, r1
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e0e:	90 91 36 2c 	lds	r25, 0x2C36	; 0x802c36 <uxTopReadyPriority>
    1e12:	98 17       	cp	r25, r24
    1e14:	10 f4       	brcc	.+4      	; 0x1e1a <xTaskRemoveFromEventList+0x42>
    1e16:	80 93 36 2c 	sts	0x2C36, r24	; 0x802c36 <uxTopReadyPriority>
    1e1a:	bb e0       	ldi	r27, 0x0B	; 11
    1e1c:	8b 9f       	mul	r24, r27
    1e1e:	c0 01       	movw	r24, r0
    1e20:	11 24       	eor	r1, r1
    1e22:	b8 01       	movw	r22, r16
    1e24:	84 59       	subi	r24, 0x94	; 148
    1e26:	93 4d       	sbci	r25, 0xD3	; 211
    1e28:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1e2c:	05 c0       	rjmp	.+10     	; 0x1e38 <xTaskRemoveFromEventList+0x60>
    1e2e:	b8 01       	movw	r22, r16
    1e30:	87 e4       	ldi	r24, 0x47	; 71
    1e32:	9c e2       	ldi	r25, 0x2C	; 44
    1e34:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1e38:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1e3c:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1e40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e42:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e44:	89 17       	cp	r24, r25
    1e46:	20 f4       	brcc	.+8      	; 0x1e50 <xTaskRemoveFromEventList+0x78>
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	80 93 33 2c 	sts	0x2C33, r24	; 0x802c33 <xYieldPending>
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <xTaskRemoveFromEventList+0x7a>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	08 95       	ret

00001e5c <vTaskRemoveFromUnorderedEventList>:
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	70 68       	ori	r23, 0x80	; 128
    1e66:	fc 01       	movw	r30, r24
    1e68:	40 83       	st	Z, r20
    1e6a:	51 83       	std	Z+1, r21	; 0x01
    1e6c:	62 83       	std	Z+2, r22	; 0x02
    1e6e:	73 83       	std	Z+3, r23	; 0x03
    1e70:	c0 85       	ldd	r28, Z+8	; 0x08
    1e72:	d1 85       	ldd	r29, Z+9	; 0x09
    1e74:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e78:	8e 01       	movw	r16, r28
    1e7a:	0e 5f       	subi	r16, 0xFE	; 254
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7e:	c8 01       	movw	r24, r16
    1e80:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e86:	90 91 36 2c 	lds	r25, 0x2C36	; 0x802c36 <uxTopReadyPriority>
    1e8a:	98 17       	cp	r25, r24
    1e8c:	10 f4       	brcc	.+4      	; 0x1e92 <vTaskRemoveFromUnorderedEventList+0x36>
    1e8e:	80 93 36 2c 	sts	0x2C36, r24	; 0x802c36 <uxTopReadyPriority>
    1e92:	fb e0       	ldi	r31, 0x0B	; 11
    1e94:	8f 9f       	mul	r24, r31
    1e96:	c0 01       	movw	r24, r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	b8 01       	movw	r22, r16
    1e9c:	84 59       	subi	r24, 0x94	; 148
    1e9e:	93 4d       	sbci	r25, 0xD3	; 211
    1ea0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1ea4:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1ea8:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1eac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1eae:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eb0:	89 17       	cp	r24, r25
    1eb2:	18 f4       	brcc	.+6      	; 0x1eba <vTaskRemoveFromUnorderedEventList+0x5e>
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	80 93 33 2c 	sts	0x2C33, r24	; 0x802c33 <xYieldPending>
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <vTaskInternalSetTimeOutState>:
    1ec4:	20 91 32 2c 	lds	r18, 0x2C32	; 0x802c32 <xNumOfOverflows>
    1ec8:	fc 01       	movw	r30, r24
    1eca:	20 83       	st	Z, r18
    1ecc:	40 91 37 2c 	lds	r20, 0x2C37	; 0x802c37 <xTickCount>
    1ed0:	50 91 38 2c 	lds	r21, 0x2C38	; 0x802c38 <xTickCount+0x1>
    1ed4:	60 91 39 2c 	lds	r22, 0x2C39	; 0x802c39 <xTickCount+0x2>
    1ed8:	70 91 3a 2c 	lds	r23, 0x2C3A	; 0x802c3a <xTickCount+0x3>
    1edc:	41 83       	std	Z+1, r20	; 0x01
    1ede:	52 83       	std	Z+2, r21	; 0x02
    1ee0:	63 83       	std	Z+3, r22	; 0x03
    1ee2:	74 83       	std	Z+4, r23	; 0x04
    1ee4:	08 95       	ret

00001ee6 <xTaskCheckForTimeOut>:
    1ee6:	cf 92       	push	r12
    1ee8:	df 92       	push	r13
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	db 01       	movw	r26, r22
    1ef8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1efc:	ff 93       	push	r31
    1efe:	f8 7f       	andi	r31, 0xF8	; 248
    1f00:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f04:	40 91 37 2c 	lds	r20, 0x2C37	; 0x802c37 <xTickCount>
    1f08:	50 91 38 2c 	lds	r21, 0x2C38	; 0x802c38 <xTickCount+0x1>
    1f0c:	60 91 39 2c 	lds	r22, 0x2C39	; 0x802c39 <xTickCount+0x2>
    1f10:	70 91 3a 2c 	lds	r23, 0x2C3A	; 0x802c3a <xTickCount+0x3>
    1f14:	0d 91       	ld	r16, X+
    1f16:	1d 91       	ld	r17, X+
    1f18:	2d 91       	ld	r18, X+
    1f1a:	3c 91       	ld	r19, X
    1f1c:	13 97       	sbiw	r26, 0x03	; 3
    1f1e:	0f 3f       	cpi	r16, 0xFF	; 255
    1f20:	cf ef       	ldi	r28, 0xFF	; 255
    1f22:	1c 07       	cpc	r17, r28
    1f24:	2c 07       	cpc	r18, r28
    1f26:	3c 07       	cpc	r19, r28
    1f28:	69 f1       	breq	.+90     	; 0x1f84 <xTaskCheckForTimeOut+0x9e>
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	c1 80       	ldd	r12, Z+1	; 0x01
    1f2e:	d2 80       	ldd	r13, Z+2	; 0x02
    1f30:	e3 80       	ldd	r14, Z+3	; 0x03
    1f32:	f4 80       	ldd	r15, Z+4	; 0x04
    1f34:	e0 91 32 2c 	lds	r30, 0x2C32	; 0x802c32 <xNumOfOverflows>
    1f38:	ec 01       	movw	r28, r24
    1f3a:	f8 81       	ld	r31, Y
    1f3c:	fe 17       	cp	r31, r30
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <xTaskCheckForTimeOut+0x64>
    1f40:	4c 15       	cp	r20, r12
    1f42:	5d 05       	cpc	r21, r13
    1f44:	6e 05       	cpc	r22, r14
    1f46:	7f 05       	cpc	r23, r15
    1f48:	f8 f4       	brcc	.+62     	; 0x1f88 <xTaskCheckForTimeOut+0xa2>
    1f4a:	4c 19       	sub	r20, r12
    1f4c:	5d 09       	sbc	r21, r13
    1f4e:	6e 09       	sbc	r22, r14
    1f50:	7f 09       	sbc	r23, r15
    1f52:	40 17       	cp	r20, r16
    1f54:	51 07       	cpc	r21, r17
    1f56:	62 07       	cpc	r22, r18
    1f58:	73 07       	cpc	r23, r19
    1f5a:	68 f4       	brcc	.+26     	; 0x1f76 <xTaskCheckForTimeOut+0x90>
    1f5c:	fd 01       	movw	r30, r26
    1f5e:	04 1b       	sub	r16, r20
    1f60:	15 0b       	sbc	r17, r21
    1f62:	26 0b       	sbc	r18, r22
    1f64:	37 0b       	sbc	r19, r23
    1f66:	00 83       	st	Z, r16
    1f68:	11 83       	std	Z+1, r17	; 0x01
    1f6a:	22 83       	std	Z+2, r18	; 0x02
    1f6c:	33 83       	std	Z+3, r19	; 0x03
    1f6e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	0a c0       	rjmp	.+20     	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f76:	1d 92       	st	X+, r1
    1f78:	1d 92       	st	X+, r1
    1f7a:	1d 92       	st	X+, r1
    1f7c:	1c 92       	st	X, r1
    1f7e:	13 97       	sbiw	r26, 0x03	; 3
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	ff 91       	pop	r31
    1f8c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	ff 90       	pop	r15
    1f9a:	ef 90       	pop	r14
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	08 95       	ret

00001fa2 <vTaskMissedYield>:
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	80 93 33 2c 	sts	0x2C33, r24	; 0x802c33 <xYieldPending>
    1fa8:	08 95       	ret

00001faa <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1faa:	80 91 35 2c 	lds	r24, 0x2C35	; 0x802c35 <xSchedulerRunning>
    1fae:	88 23       	and	r24, r24
    1fb0:	31 f0       	breq	.+12     	; 0x1fbe <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1fb2:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <uxSchedulerSuspended>
    1fb6:	88 23       	and	r24, r24
    1fb8:	21 f0       	breq	.+8      	; 0x1fc2 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    1fc4:	08 95       	ret

00001fc6 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1fc6:	cf 92       	push	r12
    1fc8:	df 92       	push	r13
    1fca:	ef 92       	push	r14
    1fcc:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1fce:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1fd2:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1fd6:	66 85       	ldd	r22, Z+14	; 0x0e
    1fd8:	77 85       	ldd	r23, Z+15	; 0x0f
    1fda:	80 89       	ldd	r24, Z+16	; 0x10
    1fdc:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1fde:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1fe2:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1fe6:	a0 91 98 2c 	lds	r26, 0x2C98	; 0x802c98 <pxCurrentTCB>
    1fea:	b0 91 99 2c 	lds	r27, 0x2C99	; 0x802c99 <pxCurrentTCB+0x1>
    1fee:	5a 96       	adiw	r26, 0x1a	; 26
    1ff0:	2c 91       	ld	r18, X
    1ff2:	c1 2c       	mov	r12, r1
    1ff4:	d1 2c       	mov	r13, r1
    1ff6:	76 01       	movw	r14, r12
    1ff8:	68 94       	set
    1ffa:	c2 f8       	bld	r12, 2
    1ffc:	c2 1a       	sub	r12, r18
    1ffe:	d1 08       	sbc	r13, r1
    2000:	e1 08       	sbc	r14, r1
    2002:	f1 08       	sbc	r15, r1
    2004:	c6 86       	std	Z+14, r12	; 0x0e
    2006:	d7 86       	std	Z+15, r13	; 0x0f
    2008:	e0 8a       	std	Z+16, r14	; 0x10
    200a:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    200c:	ff 90       	pop	r15
    200e:	ef 90       	pop	r14
    2010:	df 90       	pop	r13
    2012:	cf 90       	pop	r12
    2014:	08 95       	ret

00002016 <prvInsertTimerInActiveList>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	fc 01       	movw	r30, r24
    2024:	42 83       	std	Z+2, r20	; 0x02
    2026:	53 83       	std	Z+3, r21	; 0x03
    2028:	64 83       	std	Z+4, r22	; 0x04
    202a:	75 83       	std	Z+5, r23	; 0x05
    202c:	82 87       	std	Z+10, r24	; 0x0a
    202e:	93 87       	std	Z+11, r25	; 0x0b
    2030:	04 17       	cp	r16, r20
    2032:	15 07       	cpc	r17, r21
    2034:	26 07       	cpc	r18, r22
    2036:	37 07       	cpc	r19, r23
    2038:	c0 f0       	brcs	.+48     	; 0x206a <prvInsertTimerInActiveList+0x54>
    203a:	0c 19       	sub	r16, r12
    203c:	1d 09       	sbc	r17, r13
    203e:	2e 09       	sbc	r18, r14
    2040:	3f 09       	sbc	r19, r15
    2042:	86 85       	ldd	r24, Z+14	; 0x0e
    2044:	97 85       	ldd	r25, Z+15	; 0x0f
    2046:	a0 89       	ldd	r26, Z+16	; 0x10
    2048:	b1 89       	ldd	r27, Z+17	; 0x11
    204a:	08 17       	cp	r16, r24
    204c:	19 07       	cpc	r17, r25
    204e:	2a 07       	cpc	r18, r26
    2050:	3b 07       	cpc	r19, r27
    2052:	00 f5       	brcc	.+64     	; 0x2094 <prvInsertTimerInActiveList+0x7e>
    2054:	bf 01       	movw	r22, r30
    2056:	6e 5f       	subi	r22, 0xFE	; 254
    2058:	7f 4f       	sbci	r23, 0xFF	; 255
    205a:	80 91 a2 2c 	lds	r24, 0x2CA2	; 0x802ca2 <pxOverflowTimerList>
    205e:	90 91 a3 2c 	lds	r25, 0x2CA3	; 0x802ca3 <pxOverflowTimerList+0x1>
    2062:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	18 c0       	rjmp	.+48     	; 0x209a <prvInsertTimerInActiveList+0x84>
    206a:	0c 15       	cp	r16, r12
    206c:	1d 05       	cpc	r17, r13
    206e:	2e 05       	cpc	r18, r14
    2070:	3f 05       	cpc	r19, r15
    2072:	28 f4       	brcc	.+10     	; 0x207e <prvInsertTimerInActiveList+0x68>
    2074:	4c 15       	cp	r20, r12
    2076:	5d 05       	cpc	r21, r13
    2078:	6e 05       	cpc	r22, r14
    207a:	7f 05       	cpc	r23, r15
    207c:	68 f4       	brcc	.+26     	; 0x2098 <prvInsertTimerInActiveList+0x82>
    207e:	bf 01       	movw	r22, r30
    2080:	6e 5f       	subi	r22, 0xFE	; 254
    2082:	7f 4f       	sbci	r23, 0xFF	; 255
    2084:	80 91 a4 2c 	lds	r24, 0x2CA4	; 0x802ca4 <pxCurrentTimerList>
    2088:	90 91 a5 2c 	lds	r25, 0x2CA5	; 0x802ca5 <pxCurrentTimerList+0x1>
    208c:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	03 c0       	rjmp	.+6      	; 0x209a <prvInsertTimerInActiveList+0x84>
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	01 c0       	rjmp	.+2      	; 0x209a <prvInsertTimerInActiveList+0x84>
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	08 95       	ret

000020a8 <prvCheckForValidListAndQueue>:
    20a8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    20ac:	ff 93       	push	r31
    20ae:	f8 7f       	andi	r31, 0xF8	; 248
    20b0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    20b4:	80 91 a0 2c 	lds	r24, 0x2CA0	; 0x802ca0 <xTimerQueue>
    20b8:	90 91 a1 2c 	lds	r25, 0x2CA1	; 0x802ca1 <xTimerQueue+0x1>
    20bc:	89 2b       	or	r24, r25
    20be:	e9 f4       	brne	.+58     	; 0x20fa <prvCheckForValidListAndQueue+0x52>
    20c0:	81 eb       	ldi	r24, 0xB1	; 177
    20c2:	9c e2       	ldi	r25, 0x2C	; 44
    20c4:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    20c8:	86 ea       	ldi	r24, 0xA6	; 166
    20ca:	9c e2       	ldi	r25, 0x2C	; 44
    20cc:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    20d0:	81 eb       	ldi	r24, 0xB1	; 177
    20d2:	9c e2       	ldi	r25, 0x2C	; 44
    20d4:	80 93 a4 2c 	sts	0x2CA4, r24	; 0x802ca4 <pxCurrentTimerList>
    20d8:	90 93 a5 2c 	sts	0x2CA5, r25	; 0x802ca5 <pxCurrentTimerList+0x1>
    20dc:	86 ea       	ldi	r24, 0xA6	; 166
    20de:	9c e2       	ldi	r25, 0x2C	; 44
    20e0:	80 93 a2 2c 	sts	0x2CA2, r24	; 0x802ca2 <pxOverflowTimerList>
    20e4:	90 93 a3 2c 	sts	0x2CA3, r25	; 0x802ca3 <pxOverflowTimerList+0x1>
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	69 e0       	ldi	r22, 0x09	; 9
    20ec:	85 e0       	ldi	r24, 0x05	; 5
    20ee:	0e 94 8d 08 	call	0x111a	; 0x111a <xQueueGenericCreate>
    20f2:	80 93 a0 2c 	sts	0x2CA0, r24	; 0x802ca0 <xTimerQueue>
    20f6:	90 93 a1 2c 	sts	0x2CA1, r25	; 0x802ca1 <xTimerQueue+0x1>
    20fa:	ff 91       	pop	r31
    20fc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2100:	08 95       	ret

00002102 <xTimerCreateTimerTask>:
    2102:	ef 92       	push	r14
    2104:	ff 92       	push	r15
    2106:	0f 93       	push	r16
    2108:	0e 94 54 10 	call	0x20a8	; 0x20a8 <prvCheckForValidListAndQueue>
    210c:	80 91 a0 2c 	lds	r24, 0x2CA0	; 0x802ca0 <xTimerQueue>
    2110:	90 91 a1 2c 	lds	r25, 0x2CA1	; 0x802ca1 <xTimerQueue+0x1>
    2114:	89 2b       	or	r24, r25
    2116:	91 f0       	breq	.+36     	; 0x213c <xTimerCreateTimerTask+0x3a>
    2118:	0f 2e       	mov	r0, r31
    211a:	fe e9       	ldi	r31, 0x9E	; 158
    211c:	ef 2e       	mov	r14, r31
    211e:	fc e2       	ldi	r31, 0x2C	; 44
    2120:	ff 2e       	mov	r15, r31
    2122:	f0 2d       	mov	r31, r0
    2124:	03 e0       	ldi	r16, 0x03	; 3
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	48 ec       	ldi	r20, 0xC8	; 200
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	6b e5       	ldi	r22, 0x5B	; 91
    2130:	70 e2       	ldi	r23, 0x20	; 32
    2132:	84 e9       	ldi	r24, 0x94	; 148
    2134:	91 e1       	ldi	r25, 0x11	; 17
    2136:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
    213a:	01 c0       	rjmp	.+2      	; 0x213e <xTimerCreateTimerTask+0x3c>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	08 95       	ret

00002146 <xTimerGenericCommand>:
    2146:	8f 92       	push	r8
    2148:	9f 92       	push	r9
    214a:	af 92       	push	r10
    214c:	bf 92       	push	r11
    214e:	cf 92       	push	r12
    2150:	df 92       	push	r13
    2152:	ef 92       	push	r14
    2154:	ff 92       	push	r15
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	29 97       	sbiw	r28, 0x09	; 9
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	e0 91 a0 2c 	lds	r30, 0x2CA0	; 0x802ca0 <xTimerQueue>
    216c:	f0 91 a1 2c 	lds	r31, 0x2CA1	; 0x802ca1 <xTimerQueue+0x1>
    2170:	30 97       	sbiw	r30, 0x00	; 0
    2172:	89 f1       	breq	.+98     	; 0x21d6 <xTimerGenericCommand+0x90>
    2174:	69 83       	std	Y+1, r22	; 0x01
    2176:	2a 83       	std	Y+2, r18	; 0x02
    2178:	3b 83       	std	Y+3, r19	; 0x03
    217a:	4c 83       	std	Y+4, r20	; 0x04
    217c:	5d 83       	std	Y+5, r21	; 0x05
    217e:	8e 83       	std	Y+6, r24	; 0x06
    2180:	9f 83       	std	Y+7, r25	; 0x07
    2182:	66 30       	cpi	r22, 0x06	; 6
    2184:	fc f4       	brge	.+62     	; 0x21c4 <xTimerGenericCommand+0x7e>
    2186:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xTaskGetSchedulerState>
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	69 f4       	brne	.+26     	; 0x21a8 <xTimerGenericCommand+0x62>
    218e:	00 e0       	ldi	r16, 0x00	; 0
    2190:	a7 01       	movw	r20, r14
    2192:	96 01       	movw	r18, r12
    2194:	be 01       	movw	r22, r28
    2196:	6f 5f       	subi	r22, 0xFF	; 255
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	80 91 a0 2c 	lds	r24, 0x2CA0	; 0x802ca0 <xTimerQueue>
    219e:	90 91 a1 2c 	lds	r25, 0x2CA1	; 0x802ca1 <xTimerQueue+0x1>
    21a2:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
    21a6:	18 c0       	rjmp	.+48     	; 0x21d8 <xTimerGenericCommand+0x92>
    21a8:	00 e0       	ldi	r16, 0x00	; 0
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	a9 01       	movw	r20, r18
    21b0:	be 01       	movw	r22, r28
    21b2:	6f 5f       	subi	r22, 0xFF	; 255
    21b4:	7f 4f       	sbci	r23, 0xFF	; 255
    21b6:	80 91 a0 2c 	lds	r24, 0x2CA0	; 0x802ca0 <xTimerQueue>
    21ba:	90 91 a1 2c 	lds	r25, 0x2CA1	; 0x802ca1 <xTimerQueue+0x1>
    21be:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
    21c2:	0a c0       	rjmp	.+20     	; 0x21d8 <xTimerGenericCommand+0x92>
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	a8 01       	movw	r20, r16
    21c8:	be 01       	movw	r22, r28
    21ca:	6f 5f       	subi	r22, 0xFF	; 255
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	cf 01       	movw	r24, r30
    21d0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xQueueGenericSendFromISR>
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <xTimerGenericCommand+0x92>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	29 96       	adiw	r28, 0x09	; 9
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	ff 90       	pop	r15
    21e8:	ef 90       	pop	r14
    21ea:	df 90       	pop	r13
    21ec:	cf 90       	pop	r12
    21ee:	bf 90       	pop	r11
    21f0:	af 90       	pop	r10
    21f2:	9f 90       	pop	r9
    21f4:	8f 90       	pop	r8
    21f6:	08 95       	ret

000021f8 <prvSampleTimeNow>:
    21f8:	2f 92       	push	r2
    21fa:	3f 92       	push	r3
    21fc:	4f 92       	push	r4
    21fe:	5f 92       	push	r5
    2200:	6f 92       	push	r6
    2202:	7f 92       	push	r7
    2204:	8f 92       	push	r8
    2206:	9f 92       	push	r9
    2208:	af 92       	push	r10
    220a:	bf 92       	push	r11
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	1c 01       	movw	r2, r24
    221e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <xTaskGetTickCount>
    2222:	2b 01       	movw	r4, r22
    2224:	3c 01       	movw	r6, r24
    2226:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <xLastTime.4745>
    222a:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <xLastTime.4745+0x1>
    222e:	a0 91 9c 2c 	lds	r26, 0x2C9C	; 0x802c9c <xLastTime.4745+0x2>
    2232:	b0 91 9d 2c 	lds	r27, 0x2C9D	; 0x802c9d <xLastTime.4745+0x3>
    2236:	48 16       	cp	r4, r24
    2238:	59 06       	cpc	r5, r25
    223a:	6a 06       	cpc	r6, r26
    223c:	7b 06       	cpc	r7, r27
    223e:	08 f0       	brcs	.+2      	; 0x2242 <prvSampleTimeNow+0x4a>
    2240:	54 c0       	rjmp	.+168    	; 0x22ea <prvSampleTimeNow+0xf2>
    2242:	3c c0       	rjmp	.+120    	; 0x22bc <prvSampleTimeNow+0xc4>
    2244:	07 80       	ldd	r0, Z+7	; 0x07
    2246:	f0 85       	ldd	r31, Z+8	; 0x08
    2248:	e0 2d       	mov	r30, r0
    224a:	80 80       	ld	r8, Z
    224c:	91 80       	ldd	r9, Z+1	; 0x01
    224e:	a2 80       	ldd	r10, Z+2	; 0x02
    2250:	b3 80       	ldd	r11, Z+3	; 0x03
    2252:	c0 85       	ldd	r28, Z+8	; 0x08
    2254:	d1 85       	ldd	r29, Z+9	; 0x09
    2256:	8e 01       	movw	r16, r28
    2258:	0e 5f       	subi	r16, 0xFE	; 254
    225a:	1f 4f       	sbci	r17, 0xFF	; 255
    225c:	c8 01       	movw	r24, r16
    225e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    2262:	ed 89       	ldd	r30, Y+21	; 0x15
    2264:	fe 89       	ldd	r31, Y+22	; 0x16
    2266:	ce 01       	movw	r24, r28
    2268:	19 95       	eicall
    226a:	8a 89       	ldd	r24, Y+18	; 0x12
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	31 f5       	brne	.+76     	; 0x22bc <prvSampleTimeNow+0xc4>
    2270:	8e 85       	ldd	r24, Y+14	; 0x0e
    2272:	9f 85       	ldd	r25, Y+15	; 0x0f
    2274:	a8 89       	ldd	r26, Y+16	; 0x10
    2276:	b9 89       	ldd	r27, Y+17	; 0x11
    2278:	88 0d       	add	r24, r8
    227a:	99 1d       	adc	r25, r9
    227c:	aa 1d       	adc	r26, r10
    227e:	bb 1d       	adc	r27, r11
    2280:	88 16       	cp	r8, r24
    2282:	99 06       	cpc	r9, r25
    2284:	aa 06       	cpc	r10, r26
    2286:	bb 06       	cpc	r11, r27
    2288:	70 f4       	brcc	.+28     	; 0x22a6 <prvSampleTimeNow+0xae>
    228a:	8a 83       	std	Y+2, r24	; 0x02
    228c:	9b 83       	std	Y+3, r25	; 0x03
    228e:	ac 83       	std	Y+4, r26	; 0x04
    2290:	bd 83       	std	Y+5, r27	; 0x05
    2292:	ca 87       	std	Y+10, r28	; 0x0a
    2294:	db 87       	std	Y+11, r29	; 0x0b
    2296:	b8 01       	movw	r22, r16
    2298:	80 91 a4 2c 	lds	r24, 0x2CA4	; 0x802ca4 <pxCurrentTimerList>
    229c:	90 91 a5 2c 	lds	r25, 0x2CA5	; 0x802ca5 <pxCurrentTimerList+0x1>
    22a0:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    22a4:	0b c0       	rjmp	.+22     	; 0x22bc <prvSampleTimeNow+0xc4>
    22a6:	c1 2c       	mov	r12, r1
    22a8:	d1 2c       	mov	r13, r1
    22aa:	76 01       	movw	r14, r12
    22ac:	00 e0       	ldi	r16, 0x00	; 0
    22ae:	10 e0       	ldi	r17, 0x00	; 0
    22b0:	a5 01       	movw	r20, r10
    22b2:	94 01       	movw	r18, r8
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	ce 01       	movw	r24, r28
    22b8:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    22bc:	e0 91 a4 2c 	lds	r30, 0x2CA4	; 0x802ca4 <pxCurrentTimerList>
    22c0:	f0 91 a5 2c 	lds	r31, 0x2CA5	; 0x802ca5 <pxCurrentTimerList+0x1>
    22c4:	80 81       	ld	r24, Z
    22c6:	81 11       	cpse	r24, r1
    22c8:	bd cf       	rjmp	.-134    	; 0x2244 <prvSampleTimeNow+0x4c>
    22ca:	80 91 a2 2c 	lds	r24, 0x2CA2	; 0x802ca2 <pxOverflowTimerList>
    22ce:	90 91 a3 2c 	lds	r25, 0x2CA3	; 0x802ca3 <pxOverflowTimerList+0x1>
    22d2:	80 93 a4 2c 	sts	0x2CA4, r24	; 0x802ca4 <pxCurrentTimerList>
    22d6:	90 93 a5 2c 	sts	0x2CA5, r25	; 0x802ca5 <pxCurrentTimerList+0x1>
    22da:	e0 93 a2 2c 	sts	0x2CA2, r30	; 0x802ca2 <pxOverflowTimerList>
    22de:	f0 93 a3 2c 	sts	0x2CA3, r31	; 0x802ca3 <pxOverflowTimerList+0x1>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	f1 01       	movw	r30, r2
    22e6:	80 83       	st	Z, r24
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <prvSampleTimeNow+0xf6>
    22ea:	f1 01       	movw	r30, r2
    22ec:	10 82       	st	Z, r1
    22ee:	40 92 9a 2c 	sts	0x2C9A, r4	; 0x802c9a <xLastTime.4745>
    22f2:	50 92 9b 2c 	sts	0x2C9B, r5	; 0x802c9b <xLastTime.4745+0x1>
    22f6:	60 92 9c 2c 	sts	0x2C9C, r6	; 0x802c9c <xLastTime.4745+0x2>
    22fa:	70 92 9d 2c 	sts	0x2C9D, r7	; 0x802c9d <xLastTime.4745+0x3>
    22fe:	c3 01       	movw	r24, r6
    2300:	b2 01       	movw	r22, r4
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	df 90       	pop	r13
    2310:	cf 90       	pop	r12
    2312:	bf 90       	pop	r11
    2314:	af 90       	pop	r10
    2316:	9f 90       	pop	r9
    2318:	8f 90       	pop	r8
    231a:	7f 90       	pop	r7
    231c:	6f 90       	pop	r6
    231e:	5f 90       	pop	r5
    2320:	4f 90       	pop	r4
    2322:	3f 90       	pop	r3
    2324:	2f 90       	pop	r2
    2326:	08 95       	ret

00002328 <prvTimerTask>:
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	2e 97       	sbiw	r28, 0x0e	; 14
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	ce 01       	movw	r24, r28
    2338:	01 96       	adiw	r24, 0x01	; 1
    233a:	1c 01       	movw	r2, r24
    233c:	a8 2e       	mov	r10, r24
    233e:	b3 2c       	mov	r11, r3
    2340:	e0 91 a4 2c 	lds	r30, 0x2CA4	; 0x802ca4 <pxCurrentTimerList>
    2344:	f0 91 a5 2c 	lds	r31, 0x2CA5	; 0x802ca5 <pxCurrentTimerList+0x1>
    2348:	80 81       	ld	r24, Z
    234a:	88 23       	and	r24, r24
    234c:	09 f4       	brne	.+2      	; 0x2350 <prvTimerTask+0x28>
    234e:	03 c1       	rjmp	.+518    	; 0x2556 <prvTimerTask+0x22e>
    2350:	07 80       	ldd	r0, Z+7	; 0x07
    2352:	f0 85       	ldd	r31, Z+8	; 0x08
    2354:	e0 2d       	mov	r30, r0
    2356:	40 80       	ld	r4, Z
    2358:	51 80       	ldd	r5, Z+1	; 0x01
    235a:	62 80       	ldd	r6, Z+2	; 0x02
    235c:	73 80       	ldd	r7, Z+3	; 0x03
    235e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    2362:	c1 01       	movw	r24, r2
    2364:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    2368:	6b 87       	std	Y+11, r22	; 0x0b
    236a:	7c 87       	std	Y+12, r23	; 0x0c
    236c:	8d 87       	std	Y+13, r24	; 0x0d
    236e:	9e 87       	std	Y+14, r25	; 0x0e
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	81 11       	cpse	r24, r1
    2374:	5e c0       	rjmp	.+188    	; 0x2432 <prvTimerTask+0x10a>
    2376:	8b 85       	ldd	r24, Y+11	; 0x0b
    2378:	9c 85       	ldd	r25, Y+12	; 0x0c
    237a:	ad 85       	ldd	r26, Y+13	; 0x0d
    237c:	be 85       	ldd	r27, Y+14	; 0x0e
    237e:	84 15       	cp	r24, r4
    2380:	95 05       	cpc	r25, r5
    2382:	a6 05       	cpc	r26, r6
    2384:	b7 05       	cpc	r27, r7
    2386:	e8 f1       	brcs	.+122    	; 0x2402 <prvTimerTask+0xda>
    2388:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    238c:	e0 91 a4 2c 	lds	r30, 0x2CA4	; 0x802ca4 <pxCurrentTimerList>
    2390:	f0 91 a5 2c 	lds	r31, 0x2CA5	; 0x802ca5 <pxCurrentTimerList+0x1>
    2394:	07 80       	ldd	r0, Z+7	; 0x07
    2396:	f0 85       	ldd	r31, Z+8	; 0x08
    2398:	e0 2d       	mov	r30, r0
    239a:	80 84       	ldd	r8, Z+8	; 0x08
    239c:	91 84       	ldd	r9, Z+9	; 0x09
    239e:	c4 01       	movw	r24, r8
    23a0:	02 96       	adiw	r24, 0x02	; 2
    23a2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    23a6:	d4 01       	movw	r26, r8
    23a8:	52 96       	adiw	r26, 0x12	; 18
    23aa:	8c 91       	ld	r24, X
    23ac:	52 97       	sbiw	r26, 0x12	; 18
    23ae:	81 30       	cpi	r24, 0x01	; 1
    23b0:	01 f5       	brne	.+64     	; 0x23f2 <prvTimerTask+0xca>
    23b2:	1e 96       	adiw	r26, 0x0e	; 14
    23b4:	4d 91       	ld	r20, X+
    23b6:	5d 91       	ld	r21, X+
    23b8:	6d 91       	ld	r22, X+
    23ba:	7c 91       	ld	r23, X
    23bc:	51 97       	sbiw	r26, 0x11	; 17
    23be:	44 0d       	add	r20, r4
    23c0:	55 1d       	adc	r21, r5
    23c2:	66 1d       	adc	r22, r6
    23c4:	77 1d       	adc	r23, r7
    23c6:	73 01       	movw	r14, r6
    23c8:	62 01       	movw	r12, r4
    23ca:	0b 85       	ldd	r16, Y+11	; 0x0b
    23cc:	1c 85       	ldd	r17, Y+12	; 0x0c
    23ce:	2d 85       	ldd	r18, Y+13	; 0x0d
    23d0:	3e 85       	ldd	r19, Y+14	; 0x0e
    23d2:	c4 01       	movw	r24, r8
    23d4:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    23d8:	88 23       	and	r24, r24
    23da:	59 f0       	breq	.+22     	; 0x23f2 <prvTimerTask+0xca>
    23dc:	c1 2c       	mov	r12, r1
    23de:	d1 2c       	mov	r13, r1
    23e0:	76 01       	movw	r14, r12
    23e2:	00 e0       	ldi	r16, 0x00	; 0
    23e4:	10 e0       	ldi	r17, 0x00	; 0
    23e6:	a3 01       	movw	r20, r6
    23e8:	92 01       	movw	r18, r4
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	c4 01       	movw	r24, r8
    23ee:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    23f2:	d4 01       	movw	r26, r8
    23f4:	55 96       	adiw	r26, 0x15	; 21
    23f6:	ed 91       	ld	r30, X+
    23f8:	fc 91       	ld	r31, X
    23fa:	56 97       	sbiw	r26, 0x16	; 22
    23fc:	c4 01       	movw	r24, r8
    23fe:	19 95       	eicall
    2400:	9c c0       	rjmp	.+312    	; 0x253a <prvTimerTask+0x212>
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	b3 01       	movw	r22, r6
    2406:	a2 01       	movw	r20, r4
    2408:	8b 85       	ldd	r24, Y+11	; 0x0b
    240a:	9c 85       	ldd	r25, Y+12	; 0x0c
    240c:	ad 85       	ldd	r26, Y+13	; 0x0d
    240e:	be 85       	ldd	r27, Y+14	; 0x0e
    2410:	48 1b       	sub	r20, r24
    2412:	59 0b       	sbc	r21, r25
    2414:	6a 0b       	sbc	r22, r26
    2416:	7b 0b       	sbc	r23, r27
    2418:	80 91 a0 2c 	lds	r24, 0x2CA0	; 0x802ca0 <xTimerQueue>
    241c:	90 91 a1 2c 	lds	r25, 0x2CA1	; 0x802ca1 <xTimerQueue+0x1>
    2420:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <vQueueWaitForMessageRestricted>
    2424:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    2428:	81 11       	cpse	r24, r1
    242a:	87 c0       	rjmp	.+270    	; 0x253a <prvTimerTask+0x212>
    242c:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    2430:	84 c0       	rjmp	.+264    	; 0x253a <prvTimerTask+0x212>
    2432:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    2436:	81 c0       	rjmp	.+258    	; 0x253a <prvTimerTask+0x212>
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	88 23       	and	r24, r24
    243c:	6c f4       	brge	.+26     	; 0x2458 <prvTimerTask+0x130>
    243e:	4e 81       	ldd	r20, Y+6	; 0x06
    2440:	5f 81       	ldd	r21, Y+7	; 0x07
    2442:	68 85       	ldd	r22, Y+8	; 0x08
    2444:	79 85       	ldd	r23, Y+9	; 0x09
    2446:	ea 81       	ldd	r30, Y+2	; 0x02
    2448:	fb 81       	ldd	r31, Y+3	; 0x03
    244a:	8c 81       	ldd	r24, Y+4	; 0x04
    244c:	9d 81       	ldd	r25, Y+5	; 0x05
    244e:	19 95       	eicall
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	88 23       	and	r24, r24
    2454:	0c f4       	brge	.+2      	; 0x2458 <prvTimerTask+0x130>
    2456:	71 c0       	rjmp	.+226    	; 0x253a <prvTimerTask+0x212>
    2458:	8e 80       	ldd	r8, Y+6	; 0x06
    245a:	9f 80       	ldd	r9, Y+7	; 0x07
    245c:	d4 01       	movw	r26, r8
    245e:	1c 96       	adiw	r26, 0x0c	; 12
    2460:	8d 91       	ld	r24, X+
    2462:	9c 91       	ld	r25, X
    2464:	1d 97       	sbiw	r26, 0x0d	; 13
    2466:	89 2b       	or	r24, r25
    2468:	21 f0       	breq	.+8      	; 0x2472 <prvTimerTask+0x14a>
    246a:	c4 01       	movw	r24, r8
    246c:	02 96       	adiw	r24, 0x02	; 2
    246e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    2472:	ce 01       	movw	r24, r28
    2474:	0a 96       	adiw	r24, 0x0a	; 10
    2476:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    247a:	8b 01       	movw	r16, r22
    247c:	9c 01       	movw	r18, r24
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	08 2e       	mov	r0, r24
    2482:	00 0c       	add	r0, r0
    2484:	99 0b       	sbc	r25, r25
    2486:	aa 0b       	sbc	r26, r26
    2488:	bb 0b       	sbc	r27, r27
    248a:	8a 30       	cpi	r24, 0x0A	; 10
    248c:	91 05       	cpc	r25, r1
    248e:	08 f0       	brcs	.+2      	; 0x2492 <prvTimerTask+0x16a>
    2490:	54 c0       	rjmp	.+168    	; 0x253a <prvTimerTask+0x212>
    2492:	fc 01       	movw	r30, r24
    2494:	88 27       	eor	r24, r24
    2496:	e2 50       	subi	r30, 0x02	; 2
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	8f 4f       	sbci	r24, 0xFF	; 255
    249c:	0c 94 65 25 	jmp	0x4aca	; 0x4aca <__tablejump2__>
    24a0:	ca 80       	ldd	r12, Y+2	; 0x02
    24a2:	db 80       	ldd	r13, Y+3	; 0x03
    24a4:	ec 80       	ldd	r14, Y+4	; 0x04
    24a6:	fd 80       	ldd	r15, Y+5	; 0x05
    24a8:	f4 01       	movw	r30, r8
    24aa:	46 85       	ldd	r20, Z+14	; 0x0e
    24ac:	57 85       	ldd	r21, Z+15	; 0x0f
    24ae:	60 89       	ldd	r22, Z+16	; 0x10
    24b0:	71 89       	ldd	r23, Z+17	; 0x11
    24b2:	4c 0d       	add	r20, r12
    24b4:	5d 1d       	adc	r21, r13
    24b6:	6e 1d       	adc	r22, r14
    24b8:	7f 1d       	adc	r23, r15
    24ba:	c4 01       	movw	r24, r8
    24bc:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    24c0:	88 23       	and	r24, r24
    24c2:	d9 f1       	breq	.+118    	; 0x253a <prvTimerTask+0x212>
    24c4:	d4 01       	movw	r26, r8
    24c6:	55 96       	adiw	r26, 0x15	; 21
    24c8:	ed 91       	ld	r30, X+
    24ca:	fc 91       	ld	r31, X
    24cc:	56 97       	sbiw	r26, 0x16	; 22
    24ce:	c4 01       	movw	r24, r8
    24d0:	19 95       	eicall
    24d2:	f4 01       	movw	r30, r8
    24d4:	82 89       	ldd	r24, Z+18	; 0x12
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	81 f5       	brne	.+96     	; 0x253a <prvTimerTask+0x212>
    24da:	4a 81       	ldd	r20, Y+2	; 0x02
    24dc:	5b 81       	ldd	r21, Y+3	; 0x03
    24de:	6c 81       	ldd	r22, Y+4	; 0x04
    24e0:	7d 81       	ldd	r23, Y+5	; 0x05
    24e2:	86 85       	ldd	r24, Z+14	; 0x0e
    24e4:	97 85       	ldd	r25, Z+15	; 0x0f
    24e6:	a0 89       	ldd	r26, Z+16	; 0x10
    24e8:	b1 89       	ldd	r27, Z+17	; 0x11
    24ea:	9a 01       	movw	r18, r20
    24ec:	ab 01       	movw	r20, r22
    24ee:	28 0f       	add	r18, r24
    24f0:	39 1f       	adc	r19, r25
    24f2:	4a 1f       	adc	r20, r26
    24f4:	5b 1f       	adc	r21, r27
    24f6:	c1 2c       	mov	r12, r1
    24f8:	d1 2c       	mov	r13, r1
    24fa:	76 01       	movw	r14, r12
    24fc:	00 e0       	ldi	r16, 0x00	; 0
    24fe:	10 e0       	ldi	r17, 0x00	; 0
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	c4 01       	movw	r24, r8
    2504:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    2508:	18 c0       	rjmp	.+48     	; 0x253a <prvTimerTask+0x212>
    250a:	4a 81       	ldd	r20, Y+2	; 0x02
    250c:	5b 81       	ldd	r21, Y+3	; 0x03
    250e:	6c 81       	ldd	r22, Y+4	; 0x04
    2510:	7d 81       	ldd	r23, Y+5	; 0x05
    2512:	d4 01       	movw	r26, r8
    2514:	1e 96       	adiw	r26, 0x0e	; 14
    2516:	4d 93       	st	X+, r20
    2518:	5d 93       	st	X+, r21
    251a:	6d 93       	st	X+, r22
    251c:	7c 93       	st	X, r23
    251e:	51 97       	sbiw	r26, 0x11	; 17
    2520:	40 0f       	add	r20, r16
    2522:	51 1f       	adc	r21, r17
    2524:	62 1f       	adc	r22, r18
    2526:	73 1f       	adc	r23, r19
    2528:	68 01       	movw	r12, r16
    252a:	79 01       	movw	r14, r18
    252c:	c4 01       	movw	r24, r8
    252e:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    2532:	03 c0       	rjmp	.+6      	; 0x253a <prvTimerTask+0x212>
    2534:	c4 01       	movw	r24, r8
    2536:	0e 94 29 05 	call	0xa52	; 0xa52 <vPortFree>
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	a9 01       	movw	r20, r18
    2540:	6a 2d       	mov	r22, r10
    2542:	7b 2d       	mov	r23, r11
    2544:	80 91 a0 2c 	lds	r24, 0x2CA0	; 0x802ca0 <xTimerQueue>
    2548:	90 91 a1 2c 	lds	r25, 0x2CA1	; 0x802ca1 <xTimerQueue+0x1>
    254c:	0e 94 a9 09 	call	0x1352	; 0x1352 <xQueueReceive>
    2550:	81 11       	cpse	r24, r1
    2552:	72 cf       	rjmp	.-284    	; 0x2438 <prvTimerTask+0x110>
    2554:	f5 ce       	rjmp	.-534    	; 0x2340 <prvTimerTask+0x18>
    2556:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    255a:	c1 01       	movw	r24, r2
    255c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    2560:	6b 87       	std	Y+11, r22	; 0x0b
    2562:	7c 87       	std	Y+12, r23	; 0x0c
    2564:	8d 87       	std	Y+13, r24	; 0x0d
    2566:	9e 87       	std	Y+14, r25	; 0x0e
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	81 11       	cpse	r24, r1
    256c:	62 cf       	rjmp	.-316    	; 0x2432 <prvTimerTask+0x10a>
    256e:	e0 91 a2 2c 	lds	r30, 0x2CA2	; 0x802ca2 <pxOverflowTimerList>
    2572:	f0 91 a3 2c 	lds	r31, 0x2CA3	; 0x802ca3 <pxOverflowTimerList+0x1>
    2576:	80 81       	ld	r24, Z
    2578:	21 e0       	ldi	r18, 0x01	; 1
    257a:	81 11       	cpse	r24, r1
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	41 2c       	mov	r4, r1
    2580:	51 2c       	mov	r5, r1
    2582:	32 01       	movw	r6, r4
    2584:	3f cf       	rjmp	.-386    	; 0x2404 <prvTimerTask+0xdc>

00002586 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2586:	0f 93       	push	r16
    2588:	1f 93       	push	r17
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	29 97       	sbiw	r28, 0x09	; 9
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    2598:	ee ef       	ldi	r30, 0xFE	; 254
    259a:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    259c:	8a 83       	std	Y+2, r24	; 0x02
    259e:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    25a0:	6c 83       	std	Y+4, r22	; 0x04
    25a2:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    25a4:	2e 83       	std	Y+6, r18	; 0x06
    25a6:	3f 83       	std	Y+7, r19	; 0x07
    25a8:	48 87       	std	Y+8, r20	; 0x08
    25aa:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	a8 01       	movw	r20, r16
    25b0:	be 01       	movw	r22, r28
    25b2:	6f 5f       	subi	r22, 0xFF	; 255
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	80 91 a0 2c 	lds	r24, 0x2CA0	; 0x802ca0 <xTimerQueue>
    25ba:	90 91 a1 2c 	lds	r25, 0x2CA1	; 0x802ca1 <xTimerQueue+0x1>
    25be:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    25c2:	29 96       	adiw	r28, 0x09	; 9
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	08 95       	ret

000025d2 <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    25d2:	e0 e5       	ldi	r30, 0x50	; 80
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	81 60       	ori	r24, 0x01	; 1
    25da:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    25dc:	81 81       	ldd	r24, Z+1	; 0x01
    25de:	80 ff       	sbrs	r24, 0
    25e0:	fd cf       	rjmp	.-6      	; 0x25dc <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	0e 94 35 03 	call	0x66a	; 0x66a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    25e8:	8e e1       	ldi	r24, 0x1E	; 30
    25ea:	0e 94 25 03 	call	0x64a	; 0x64a <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	0e 94 2f 03 	call	0x65e	; 0x65e <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    25f6:	43 e0       	ldi	r20, 0x03	; 3
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	80 e4       	ldi	r24, 0x40	; 64
    25fc:	0e 94 16 03 	call	0x62c	; 0x62c <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    2600:	e0 e5       	ldi	r30, 0x50	; 80
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	88 60       	ori	r24, 0x08	; 8
    2608:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    260a:	81 81       	ldd	r24, Z+1	; 0x01
    260c:	83 ff       	sbrs	r24, 3
    260e:	fd cf       	rjmp	.-6      	; 0x260a <vInitClock+0x38>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    2610:	64 e0       	ldi	r22, 0x04	; 4
    2612:	80 ec       	ldi	r24, 0xC0	; 192
    2614:	0e 94 20 03 	call	0x640	; 0x640 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    2618:	e0 e5       	ldi	r30, 0x50	; 80
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	80 61       	ori	r24, 0x10	; 16
    2620:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	0e 94 2f 03 	call	0x65e	; 0x65e <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    262a:	e0 e5       	ldi	r30, 0x50	; 80
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	81 81       	ldd	r24, Z+1	; 0x01
    2630:	84 ff       	sbrs	r24, 4
    2632:	fd cf       	rjmp	.-6      	; 0x262e <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    2634:	84 e0       	ldi	r24, 0x04	; 4
    2636:	0e 94 35 03 	call	0x66a	; 0x66a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    263a:	87 e0       	ldi	r24, 0x07	; 7
    263c:	0e 94 25 03 	call	0x64a	; 0x64a <CLKSYS_Disable>
    2640:	08 95       	ret

00002642 <vApplicationIdleHook>:
long i;
long Timems;


void vApplicationIdleHook( void )
{	
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
	
}
    264a:	00 00       	nop
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	08 95       	ret

00002652 <main>:

int main(void)
{
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
	vInitClock();
    2660:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <vInitClock>
	vInitDisplay();
    2664:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <vInitDisplay>
	egPiStates = xEventGroupCreate();
    2668:	0e 94 66 03 	call	0x6cc	; 0x6cc <xEventGroupCreate>
    266c:	80 93 ed 2c 	sts	0x2CED, r24	; 0x802ced <egPiStates>
    2670:	90 93 ee 2c 	sts	0x2CEE, r25	; 0x802cee <egPiStates+0x1>
	
	xTaskCreate( vButton, (const char *) "Button", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    2674:	e1 2c       	mov	r14, r1
    2676:	f1 2c       	mov	r15, r1
    2678:	03 e0       	ldi	r16, 0x03	; 3
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	48 ec       	ldi	r20, 0xC8	; 200
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	70 e2       	ldi	r23, 0x20	; 32
    2686:	8e e9       	ldi	r24, 0x9E	; 158
    2688:	94 e1       	ldi	r25, 0x14	; 20
    268a:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
	xTaskCreate( vGUI, (const char *) "GUITask", configMINIMAL_STACK_SIZE, NULL, 2, &GUITask);
    268e:	0f 2e       	mov	r0, r31
    2690:	f7 ef       	ldi	r31, 0xF7	; 247
    2692:	ef 2e       	mov	r14, r31
    2694:	fc e2       	ldi	r31, 0x2C	; 44
    2696:	ff 2e       	mov	r15, r31
    2698:	f0 2d       	mov	r31, r0
    269a:	02 e0       	ldi	r16, 0x02	; 2
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	48 ec       	ldi	r20, 0xC8	; 200
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	67 e0       	ldi	r22, 0x07	; 7
    26a6:	70 e2       	ldi	r23, 0x20	; 32
    26a8:	84 e7       	ldi	r24, 0x74	; 116
    26aa:	93 e1       	ldi	r25, 0x13	; 19
    26ac:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
	xTaskCreate( vCalc, (const char *) "Calc", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    26b0:	e1 2c       	mov	r14, r1
    26b2:	f1 2c       	mov	r15, r1
    26b4:	01 e0       	ldi	r16, 0x01	; 1
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	48 ec       	ldi	r20, 0xC8	; 200
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	6f e0       	ldi	r22, 0x0F	; 15
    26c0:	70 e2       	ldi	r23, 0x20	; 32
    26c2:	8a ee       	ldi	r24, 0xEA	; 234
    26c4:	94 e1       	ldi	r25, 0x14	; 20
    26c6:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>

	PORTF.DIRSET = PIN0_bm;						//LED1
    26ca:	80 ea       	ldi	r24, 0xA0	; 160
    26cc:	96 e0       	ldi	r25, 0x06	; 6
    26ce:	21 e0       	ldi	r18, 0x01	; 1
    26d0:	fc 01       	movw	r30, r24
    26d2:	21 83       	std	Z+1, r18	; 0x01
	
	vTaskStartScheduler();
    26d4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <vTaskStartScheduler>
	return 0;
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
}
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	0f 91       	pop	r16
    26e2:	ff 90       	pop	r15
    26e4:	ef 90       	pop	r14
    26e6:	08 95       	ret

000026e8 <vGUI>:

void vGUI(void *pvParameters) {
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	a5 97       	sbiw	r28, 0x25	; 37
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	8c a3       	std	Y+36, r24	; 0x24
    26f8:	9d a3       	std	Y+37, r25	; 0x25
	char Pi[15] = "";			
    26fa:	19 82       	std	Y+1, r1	; 0x01
    26fc:	1a 82       	std	Y+2, r1	; 0x02
    26fe:	2d e0       	ldi	r18, 0x0D	; 13
    2700:	ce 01       	movw	r24, r28
    2702:	03 96       	adiw	r24, 0x03	; 3
    2704:	fc 01       	movw	r30, r24
    2706:	32 2f       	mov	r19, r18
    2708:	11 92       	st	Z+, r1
    270a:	3a 95       	dec	r19
    270c:	e9 f7       	brne	.-6      	; 0x2708 <vGUI+0x20>
	char Iter[15] = "";
    270e:	18 8a       	std	Y+16, r1	; 0x10
    2710:	19 8a       	std	Y+17, r1	; 0x11
    2712:	2d e0       	ldi	r18, 0x0D	; 13
    2714:	ce 01       	movw	r24, r28
    2716:	42 96       	adiw	r24, 0x12	; 18
    2718:	fc 01       	movw	r30, r24
    271a:	32 2f       	mov	r19, r18
    271c:	11 92       	st	Z+, r1
    271e:	3a 95       	dec	r19
    2720:	e9 f7       	brne	.-6      	; 0x271c <vGUI+0x34>
	char sTime[5] = "";
    2722:	1f 8e       	std	Y+31, r1	; 0x1f
    2724:	18 a2       	std	Y+32, r1	; 0x20
    2726:	23 e0       	ldi	r18, 0x03	; 3
    2728:	ce 01       	movw	r24, r28
    272a:	81 96       	adiw	r24, 0x21	; 33
    272c:	fc 01       	movw	r30, r24
    272e:	32 2f       	mov	r19, r18
    2730:	11 92       	st	Z+, r1
    2732:	3a 95       	dec	r19
    2734:	e9 f7       	brne	.-6      	; 0x2730 <vGUI+0x48>
	for(;;) {
		
		xEventGroupClearBits(egPiStates, FINISHCALC);
    2736:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    273a:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    273e:	48 e0       	ldi	r20, 0x08	; 8
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	70 e0       	ldi	r23, 0x00	; 0
    2746:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
		if (dPi4 != 1) {
    274a:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <dPi4>
    274e:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <dPi4+0x1>
    2752:	a0 91 eb 2c 	lds	r26, 0x2CEB	; 0x802ceb <dPi4+0x2>
    2756:	b0 91 ec 2c 	lds	r27, 0x2CEC	; 0x802cec <dPi4+0x3>
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e8       	ldi	r20, 0x80	; 128
    2760:	5f e3       	ldi	r21, 0x3F	; 63
    2762:	bc 01       	movw	r22, r24
    2764:	cd 01       	movw	r24, r26
    2766:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <__cmpsf2>
    276a:	88 23       	and	r24, r24
    276c:	61 f1       	breq	.+88     	; 0x27c6 <vGUI+0xde>
			sprintf(Pi, "%f", 4*dPi4);	
    276e:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <dPi4>
    2772:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <dPi4+0x1>
    2776:	a0 91 eb 2c 	lds	r26, 0x2CEB	; 0x802ceb <dPi4+0x2>
    277a:	b0 91 ec 2c 	lds	r27, 0x2CEC	; 0x802cec <dPi4+0x3>
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	50 e4       	ldi	r21, 0x40	; 64
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	2b 2f       	mov	r18, r27
    2794:	2f 93       	push	r18
    2796:	2a 2f       	mov	r18, r26
    2798:	2f 93       	push	r18
    279a:	29 2f       	mov	r18, r25
    279c:	2f 93       	push	r18
    279e:	8f 93       	push	r24
    27a0:	84 e1       	ldi	r24, 0x14	; 20
    27a2:	90 e2       	ldi	r25, 0x20	; 32
    27a4:	89 2f       	mov	r24, r25
    27a6:	8f 93       	push	r24
    27a8:	84 e1       	ldi	r24, 0x14	; 20
    27aa:	90 e2       	ldi	r25, 0x20	; 32
    27ac:	8f 93       	push	r24
    27ae:	ce 01       	movw	r24, r28
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	9f 93       	push	r25
    27b4:	8f 93       	push	r24
    27b6:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <sprintf>
    27ba:	8d b7       	in	r24, 0x3d	; 61
    27bc:	9e b7       	in	r25, 0x3e	; 62
    27be:	08 96       	adiw	r24, 0x08	; 8
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0a c0       	rjmp	.+20     	; 0x27da <vGUI+0xf2>
		}
		else {
			sprintf(Pi, "press start");
    27c6:	2c e0       	ldi	r18, 0x0C	; 12
    27c8:	e7 e1       	ldi	r30, 0x17	; 23
    27ca:	f0 e2       	ldi	r31, 0x20	; 32
    27cc:	ce 01       	movw	r24, r28
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	dc 01       	movw	r26, r24
    27d2:	01 90       	ld	r0, Z+
    27d4:	0d 92       	st	X+, r0
    27d6:	2a 95       	dec	r18
    27d8:	e1 f7       	brne	.-8      	; 0x27d2 <vGUI+0xea>
		}
		sprintf(Iter, "%ld", i);
    27da:	80 91 ef 2c 	lds	r24, 0x2CEF	; 0x802cef <i>
    27de:	90 91 f0 2c 	lds	r25, 0x2CF0	; 0x802cf0 <i+0x1>
    27e2:	a0 91 f1 2c 	lds	r26, 0x2CF1	; 0x802cf1 <i+0x2>
    27e6:	b0 91 f2 2c 	lds	r27, 0x2CF2	; 0x802cf2 <i+0x3>
    27ea:	2b 2f       	mov	r18, r27
    27ec:	2f 93       	push	r18
    27ee:	2a 2f       	mov	r18, r26
    27f0:	2f 93       	push	r18
    27f2:	29 2f       	mov	r18, r25
    27f4:	2f 93       	push	r18
    27f6:	8f 93       	push	r24
    27f8:	83 e2       	ldi	r24, 0x23	; 35
    27fa:	90 e2       	ldi	r25, 0x20	; 32
    27fc:	89 2f       	mov	r24, r25
    27fe:	8f 93       	push	r24
    2800:	83 e2       	ldi	r24, 0x23	; 35
    2802:	90 e2       	ldi	r25, 0x20	; 32
    2804:	8f 93       	push	r24
    2806:	ce 01       	movw	r24, r28
    2808:	40 96       	adiw	r24, 0x10	; 16
    280a:	29 2f       	mov	r18, r25
    280c:	2f 93       	push	r18
    280e:	8f 93       	push	r24
    2810:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <sprintf>
    2814:	ed b7       	in	r30, 0x3d	; 61
    2816:	fe b7       	in	r31, 0x3e	; 62
    2818:	38 96       	adiw	r30, 0x08	; 8
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	de bf       	out	0x3e, r29	; 62
		sprintf(sTime, "%ld", Timems);
    281e:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <Timems>
    2822:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <Timems+0x1>
    2826:	a0 91 f5 2c 	lds	r26, 0x2CF5	; 0x802cf5 <Timems+0x2>
    282a:	b0 91 f6 2c 	lds	r27, 0x2CF6	; 0x802cf6 <Timems+0x3>
    282e:	2b 2f       	mov	r18, r27
    2830:	2f 93       	push	r18
    2832:	2a 2f       	mov	r18, r26
    2834:	2f 93       	push	r18
    2836:	29 2f       	mov	r18, r25
    2838:	2f 93       	push	r18
    283a:	8f 93       	push	r24
    283c:	83 e2       	ldi	r24, 0x23	; 35
    283e:	90 e2       	ldi	r25, 0x20	; 32
    2840:	89 2f       	mov	r24, r25
    2842:	8f 93       	push	r24
    2844:	83 e2       	ldi	r24, 0x23	; 35
    2846:	90 e2       	ldi	r25, 0x20	; 32
    2848:	8f 93       	push	r24
    284a:	ce 01       	movw	r24, r28
    284c:	4f 96       	adiw	r24, 0x1f	; 31
    284e:	29 2f       	mov	r18, r25
    2850:	2f 93       	push	r18
    2852:	8f 93       	push	r24
    2854:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <sprintf>
    2858:	8d b7       	in	r24, 0x3d	; 61
    285a:	9e b7       	in	r25, 0x3e	; 62
    285c:	08 96       	adiw	r24, 0x08	; 8
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	de bf       	out	0x3e, r29	; 62
		vDisplayClear();
    2862:	0e 94 1c 1a 	call	0x3438	; 0x3438 <vDisplayClear>
		vDisplayWriteStringAtPos(0,0,"PI Calculator");
    2866:	87 e2       	ldi	r24, 0x27	; 39
    2868:	90 e2       	ldi	r25, 0x20	; 32
    286a:	89 2f       	mov	r24, r25
    286c:	8f 93       	push	r24
    286e:	87 e2       	ldi	r24, 0x27	; 39
    2870:	90 e2       	ldi	r25, 0x20	; 32
    2872:	8f 93       	push	r24
    2874:	1f 92       	push	r1
    2876:	1f 92       	push	r1
    2878:	1f 92       	push	r1
    287a:	1f 92       	push	r1
    287c:	0e 94 2e 1a 	call	0x345c	; 0x345c <vDisplayWriteStringAtPos>
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
		vDisplayWriteStringAtPos(1,0,"%s", Iter);
    288c:	ce 01       	movw	r24, r28
    288e:	40 96       	adiw	r24, 0x10	; 16
    2890:	29 2f       	mov	r18, r25
    2892:	2f 93       	push	r18
    2894:	8f 93       	push	r24
    2896:	85 e3       	ldi	r24, 0x35	; 53
    2898:	90 e2       	ldi	r25, 0x20	; 32
    289a:	89 2f       	mov	r24, r25
    289c:	8f 93       	push	r24
    289e:	85 e3       	ldi	r24, 0x35	; 53
    28a0:	90 e2       	ldi	r25, 0x20	; 32
    28a2:	8f 93       	push	r24
    28a4:	1f 92       	push	r1
    28a6:	1f 92       	push	r1
    28a8:	1f 92       	push	r1
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	8f 93       	push	r24
    28ae:	0e 94 2e 1a 	call	0x345c	; 0x345c <vDisplayWriteStringAtPos>
    28b2:	ed b7       	in	r30, 0x3d	; 61
    28b4:	fe b7       	in	r31, 0x3e	; 62
    28b6:	38 96       	adiw	r30, 0x08	; 8
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(2,0,"Pi: %s", Pi);
    28bc:	ce 01       	movw	r24, r28
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	9f 93       	push	r25
    28c2:	8f 93       	push	r24
    28c4:	88 e3       	ldi	r24, 0x38	; 56
    28c6:	90 e2       	ldi	r25, 0x20	; 32
    28c8:	89 2f       	mov	r24, r25
    28ca:	8f 93       	push	r24
    28cc:	88 e3       	ldi	r24, 0x38	; 56
    28ce:	90 e2       	ldi	r25, 0x20	; 32
    28d0:	8f 93       	push	r24
    28d2:	1f 92       	push	r1
    28d4:	1f 92       	push	r1
    28d6:	1f 92       	push	r1
    28d8:	82 e0       	ldi	r24, 0x02	; 2
    28da:	8f 93       	push	r24
    28dc:	0e 94 2e 1a 	call	0x345c	; 0x345c <vDisplayWriteStringAtPos>
    28e0:	8d b7       	in	r24, 0x3d	; 61
    28e2:	9e b7       	in	r25, 0x3e	; 62
    28e4:	08 96       	adiw	r24, 0x08	; 8
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(3,0,"Zeit: %s ms",sTime);
    28ea:	ce 01       	movw	r24, r28
    28ec:	4f 96       	adiw	r24, 0x1f	; 31
    28ee:	29 2f       	mov	r18, r25
    28f0:	2f 93       	push	r18
    28f2:	8f 93       	push	r24
    28f4:	8f e3       	ldi	r24, 0x3F	; 63
    28f6:	90 e2       	ldi	r25, 0x20	; 32
    28f8:	89 2f       	mov	r24, r25
    28fa:	8f 93       	push	r24
    28fc:	8f e3       	ldi	r24, 0x3F	; 63
    28fe:	90 e2       	ldi	r25, 0x20	; 32
    2900:	8f 93       	push	r24
    2902:	1f 92       	push	r1
    2904:	1f 92       	push	r1
    2906:	1f 92       	push	r1
    2908:	83 e0       	ldi	r24, 0x03	; 3
    290a:	8f 93       	push	r24
    290c:	0e 94 2e 1a 	call	0x345c	; 0x345c <vDisplayWriteStringAtPos>
    2910:	ed b7       	in	r30, 0x3d	; 61
    2912:	fe b7       	in	r31, 0x3e	; 62
    2914:	38 96       	adiw	r30, 0x08	; 8
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	de bf       	out	0x3e, r29	; 62
		xEventGroupSetBits(egPiStates, FINISHCALC);
    291a:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    291e:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    2922:	48 e0       	ldi	r20, 0x08	; 8
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	60 e0       	ldi	r22, 0x00	; 0
    2928:	70 e0       	ldi	r23, 0x00	; 0
    292a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
		
		vTaskDelay(500 / portTICK_RATE_MS);
    292e:	64 ef       	ldi	r22, 0xF4	; 244
    2930:	71 e0       	ldi	r23, 0x01	; 1
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
	}
    293a:	fd ce       	rjmp	.-518    	; 0x2736 <vGUI+0x4e>

0000293c <vButton>:
}

void vButton(void *pvParameters) {
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	1f 92       	push	r1
    2942:	1f 92       	push	r1
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	9a 83       	std	Y+2, r25	; 0x02
	initButtons();
    294c:	0e 94 ca 01 	call	0x394	; 0x394 <initButtons>
	
	while (1) {
		updateButtons();
    2950:	0e 94 e6 01 	call	0x3cc	; 0x3cc <updateButtons>
		if (getButtonPress(BUTTON1) == SHORT_PRESSED) {
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>
    295a:	81 30       	cpi	r24, 0x01	; 1
    295c:	79 f4       	brne	.+30     	; 0x297c <vButton+0x40>
			xEventGroupSetBits(egPiStates, STARTCALC);
    295e:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    2962:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    2966:	41 e0       	ldi	r20, 0x01	; 1
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
			TCD0.CTRLA = TC_CLKSEL_DIV1_gc ;						// Timer starten
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	99 e0       	ldi	r25, 0x09	; 9
    2976:	21 e0       	ldi	r18, 0x01	; 1
    2978:	fc 01       	movw	r30, r24
    297a:	20 83       	st	Z, r18
//			xEventGroupClearBits(egPiStates, STOPCALC);
		}

		if (getButtonPress(BUTTON2) == SHORT_PRESSED) {
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>
    2982:	81 30       	cpi	r24, 0x01	; 1
    2984:	71 f4       	brne	.+28     	; 0x29a2 <vButton+0x66>
//			xEventGroupSetBits(egPiStates, STOPCALC);
			xEventGroupClearBits(egPiStates, STARTCALC);
    2986:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    298a:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    298e:	41 e0       	ldi	r20, 0x01	; 1
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	70 e0       	ldi	r23, 0x00	; 0
    2996:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
			TCD0.CTRLA = TC_CLKSEL_OFF_gc ;							// Timer stoppen
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	99 e0       	ldi	r25, 0x09	; 9
    299e:	fc 01       	movw	r30, r24
    29a0:	10 82       	st	Z, r1

		}
		
		if (getButtonPress(BUTTON3) == SHORT_PRESSED) {
    29a2:	82 e0       	ldi	r24, 0x02	; 2
    29a4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>
    29a8:	81 30       	cpi	r24, 0x01	; 1
    29aa:	51 f4       	brne	.+20     	; 0x29c0 <vButton+0x84>
			xEventGroupSetBits(egPiStates, RESETCALC);
    29ac:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    29b0:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    29b4:	44 e0       	ldi	r20, 0x04	; 4
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	60 e0       	ldi	r22, 0x00	; 0
    29ba:	70 e0       	ldi	r23, 0x00	; 0
    29bc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
			
		}		

		if (getButtonPress(BUTTON4) == SHORT_PRESSED) {
    29c0:	83 e0       	ldi	r24, 0x03	; 3
    29c2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>

		}

		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    29c6:	6a e0       	ldi	r22, 0x0A	; 10
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
	}
    29d2:	be cf       	rjmp	.-132    	; 0x2950 <vButton+0x14>

000029d4 <vCalc>:
}

void vCalc(void *pvParameters) {
    29d4:	cf 92       	push	r12
    29d6:	df 92       	push	r13
    29d8:	ef 92       	push	r14
    29da:	ff 92       	push	r15
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <vCalc+0xe>
    29e2:	1f 92       	push	r1
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	8b 83       	std	Y+3, r24	; 0x03
    29ea:	9c 83       	std	Y+4, r25	; 0x04
	dPi4 = 1;
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	a0 e8       	ldi	r26, 0x80	; 128
    29f2:	bf e3       	ldi	r27, 0x3F	; 63
    29f4:	80 93 e9 2c 	sts	0x2CE9, r24	; 0x802ce9 <dPi4>
    29f8:	90 93 ea 2c 	sts	0x2CEA, r25	; 0x802cea <dPi4+0x1>
    29fc:	a0 93 eb 2c 	sts	0x2CEB, r26	; 0x802ceb <dPi4+0x2>
    2a00:	b0 93 ec 2c 	sts	0x2CEC, r27	; 0x802cec <dPi4+0x3>
	uint16_t calcstate = 0x0000;
    2a04:	19 82       	std	Y+1, r1	; 0x01
    2a06:	1a 82       	std	Y+2, r1	; 0x02
	i = 0;
    2a08:	10 92 ef 2c 	sts	0x2CEF, r1	; 0x802cef <i>
    2a0c:	10 92 f0 2c 	sts	0x2CF0, r1	; 0x802cf0 <i+0x1>
    2a10:	10 92 f1 2c 	sts	0x2CF1, r1	; 0x802cf1 <i+0x2>
    2a14:	10 92 f2 2c 	sts	0x2CF2, r1	; 0x802cf2 <i+0x3>
	
	
	TCD0.CTRLA = TC_CLKSEL_OFF_gc ;
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	99 e0       	ldi	r25, 0x09	; 9
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	10 82       	st	Z, r1
	TCD0.CTRLB = 0x00;
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	99 e0       	ldi	r25, 0x09	; 9
    2a24:	fc 01       	movw	r30, r24
    2a26:	11 82       	std	Z+1, r1	; 0x01
	TCD0.INTCTRLA = 0x03;
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	99 e0       	ldi	r25, 0x09	; 9
    2a2c:	23 e0       	ldi	r18, 0x03	; 3
    2a2e:	fc 01       	movw	r30, r24
    2a30:	26 83       	std	Z+6, r18	; 0x06
	TCD0.PER = 32000-1;							// Zeit mit KO Abgleichen, allenfalls hier korrigieren!!
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	99 e0       	ldi	r25, 0x09	; 9
    2a36:	2f ef       	ldi	r18, 0xFF	; 255
    2a38:	3c e7       	ldi	r19, 0x7C	; 124
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	26 a3       	std	Z+38, r18	; 0x26
    2a3e:	37 a3       	std	Z+39, r19	; 0x27
	
	for(;;) {
		
		calcstate = xEventGroupGetBits(egPiStates);
    2a40:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    2a44:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	ba 01       	movw	r22, r20
    2a4e:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	9a 83       	std	Y+2, r25	; 0x02
	//	xEventGroupWaitBits(egPiStates, STARTCALC, pdFALSE, pdFALSE, portMAX_DELAY);
		
		if (calcstate & FINISHCALC) {
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5e:	88 70       	andi	r24, 0x08	; 8
    2a60:	99 27       	eor	r25, r25
    2a62:	89 2b       	or	r24, r25
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <vCalc+0x94>
    2a66:	98 c0       	rjmp	.+304    	; 0x2b98 <vCalc+0x1c4>
			if (calcstate & STARTCALC) {
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	81 70       	andi	r24, 0x01	; 1
    2a6e:	99 27       	eor	r25, r25
    2a70:	89 2b       	or	r24, r25
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <vCalc+0xa2>
    2a74:	91 c0       	rjmp	.+290    	; 0x2b98 <vCalc+0x1c4>
				dPi4 = dPi4 - (1.0/(3+4*i)) + (1.0/(5+4*i));
    2a76:	c0 90 e9 2c 	lds	r12, 0x2CE9	; 0x802ce9 <dPi4>
    2a7a:	d0 90 ea 2c 	lds	r13, 0x2CEA	; 0x802cea <dPi4+0x1>
    2a7e:	e0 90 eb 2c 	lds	r14, 0x2CEB	; 0x802ceb <dPi4+0x2>
    2a82:	f0 90 ec 2c 	lds	r15, 0x2CEC	; 0x802cec <dPi4+0x3>
    2a86:	80 91 ef 2c 	lds	r24, 0x2CEF	; 0x802cef <i>
    2a8a:	90 91 f0 2c 	lds	r25, 0x2CF0	; 0x802cf0 <i+0x1>
    2a8e:	a0 91 f1 2c 	lds	r26, 0x2CF1	; 0x802cf1 <i+0x2>
    2a92:	b0 91 f2 2c 	lds	r27, 0x2CF2	; 0x802cf2 <i+0x3>
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	aa 1f       	adc	r26, r26
    2a9c:	bb 1f       	adc	r27, r27
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	aa 1f       	adc	r26, r26
    2aa4:	bb 1f       	adc	r27, r27
    2aa6:	03 96       	adiw	r24, 0x03	; 3
    2aa8:	a1 1d       	adc	r26, r1
    2aaa:	b1 1d       	adc	r27, r1
    2aac:	bc 01       	movw	r22, r24
    2aae:	cd 01       	movw	r24, r26
    2ab0:	0e 94 a3 20 	call	0x4146	; 0x4146 <__floatsisf>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9c 01       	movw	r18, r24
    2aba:	ad 01       	movw	r20, r26
    2abc:	60 e0       	ldi	r22, 0x00	; 0
    2abe:	70 e0       	ldi	r23, 0x00	; 0
    2ac0:	80 e8       	ldi	r24, 0x80	; 128
    2ac2:	9f e3       	ldi	r25, 0x3F	; 63
    2ac4:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <__divsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9c 01       	movw	r18, r24
    2ace:	ad 01       	movw	r20, r26
    2ad0:	c7 01       	movw	r24, r14
    2ad2:	b6 01       	movw	r22, r12
    2ad4:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <__subsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	6c 01       	movw	r12, r24
    2ade:	7d 01       	movw	r14, r26
    2ae0:	80 91 ef 2c 	lds	r24, 0x2CEF	; 0x802cef <i>
    2ae4:	90 91 f0 2c 	lds	r25, 0x2CF0	; 0x802cf0 <i+0x1>
    2ae8:	a0 91 f1 2c 	lds	r26, 0x2CF1	; 0x802cf1 <i+0x2>
    2aec:	b0 91 f2 2c 	lds	r27, 0x2CF2	; 0x802cf2 <i+0x3>
    2af0:	88 0f       	add	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	aa 1f       	adc	r26, r26
    2af6:	bb 1f       	adc	r27, r27
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	aa 1f       	adc	r26, r26
    2afe:	bb 1f       	adc	r27, r27
    2b00:	05 96       	adiw	r24, 0x05	; 5
    2b02:	a1 1d       	adc	r26, r1
    2b04:	b1 1d       	adc	r27, r1
    2b06:	bc 01       	movw	r22, r24
    2b08:	cd 01       	movw	r24, r26
    2b0a:	0e 94 a3 20 	call	0x4146	; 0x4146 <__floatsisf>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	9c 01       	movw	r18, r24
    2b14:	ad 01       	movw	r20, r26
    2b16:	60 e0       	ldi	r22, 0x00	; 0
    2b18:	70 e0       	ldi	r23, 0x00	; 0
    2b1a:	80 e8       	ldi	r24, 0x80	; 128
    2b1c:	9f e3       	ldi	r25, 0x3F	; 63
    2b1e:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <__divsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	9c 01       	movw	r18, r24
    2b28:	ad 01       	movw	r20, r26
    2b2a:	c7 01       	movw	r24, r14
    2b2c:	b6 01       	movw	r22, r12
    2b2e:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__addsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	80 93 e9 2c 	sts	0x2CE9, r24	; 0x802ce9 <dPi4>
    2b3a:	90 93 ea 2c 	sts	0x2CEA, r25	; 0x802cea <dPi4+0x1>
    2b3e:	a0 93 eb 2c 	sts	0x2CEB, r26	; 0x802ceb <dPi4+0x2>
    2b42:	b0 93 ec 2c 	sts	0x2CEC, r27	; 0x802cec <dPi4+0x3>
				i++;
    2b46:	80 91 ef 2c 	lds	r24, 0x2CEF	; 0x802cef <i>
    2b4a:	90 91 f0 2c 	lds	r25, 0x2CF0	; 0x802cf0 <i+0x1>
    2b4e:	a0 91 f1 2c 	lds	r26, 0x2CF1	; 0x802cf1 <i+0x2>
    2b52:	b0 91 f2 2c 	lds	r27, 0x2CF2	; 0x802cf2 <i+0x3>
    2b56:	01 96       	adiw	r24, 0x01	; 1
    2b58:	a1 1d       	adc	r26, r1
    2b5a:	b1 1d       	adc	r27, r1
    2b5c:	80 93 ef 2c 	sts	0x2CEF, r24	; 0x802cef <i>
    2b60:	90 93 f0 2c 	sts	0x2CF0, r25	; 0x802cf0 <i+0x1>
    2b64:	a0 93 f1 2c 	sts	0x2CF1, r26	; 0x802cf1 <i+0x2>
    2b68:	b0 93 f2 2c 	sts	0x2CF2, r27	; 0x802cf2 <i+0x3>
				if (dPi4 < 0.7854 ) {
    2b6c:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <dPi4>
    2b70:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <dPi4+0x1>
    2b74:	a0 91 eb 2c 	lds	r26, 0x2CEB	; 0x802ceb <dPi4+0x2>
    2b78:	b0 91 ec 2c 	lds	r27, 0x2CEC	; 0x802cec <dPi4+0x3>
    2b7c:	29 ef       	ldi	r18, 0xF9	; 249
    2b7e:	3f e0       	ldi	r19, 0x0F	; 15
    2b80:	49 e4       	ldi	r20, 0x49	; 73
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <__cmpsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	24 f4       	brge	.+8      	; 0x2b98 <vCalc+0x1c4>
					TCD0.CTRLA = TC_CLKSEL_OFF_gc ;
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	99 e0       	ldi	r25, 0x09	; 9
    2b94:	fc 01       	movw	r30, r24
    2b96:	10 82       	st	Z, r1
		}
/*		if (calcstate & STOPCALC) {
			// do nothing
		}
*/
		if (calcstate & RESETCALC) {
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9c:	84 70       	andi	r24, 0x04	; 4
    2b9e:	99 27       	eor	r25, r25
    2ba0:	89 2b       	or	r24, r25
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <vCalc+0x1d2>
    2ba4:	4d cf       	rjmp	.-358    	; 0x2a40 <vCalc+0x6c>
			dPi4 = 1;
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	a0 e8       	ldi	r26, 0x80	; 128
    2bac:	bf e3       	ldi	r27, 0x3F	; 63
    2bae:	80 93 e9 2c 	sts	0x2CE9, r24	; 0x802ce9 <dPi4>
    2bb2:	90 93 ea 2c 	sts	0x2CEA, r25	; 0x802cea <dPi4+0x1>
    2bb6:	a0 93 eb 2c 	sts	0x2CEB, r26	; 0x802ceb <dPi4+0x2>
    2bba:	b0 93 ec 2c 	sts	0x2CEC, r27	; 0x802cec <dPi4+0x3>
			i = 0;
    2bbe:	10 92 ef 2c 	sts	0x2CEF, r1	; 0x802cef <i>
    2bc2:	10 92 f0 2c 	sts	0x2CF0, r1	; 0x802cf0 <i+0x1>
    2bc6:	10 92 f1 2c 	sts	0x2CF1, r1	; 0x802cf1 <i+0x2>
    2bca:	10 92 f2 2c 	sts	0x2CF2, r1	; 0x802cf2 <i+0x3>
			Timems = 0;
    2bce:	10 92 f3 2c 	sts	0x2CF3, r1	; 0x802cf3 <Timems>
    2bd2:	10 92 f4 2c 	sts	0x2CF4, r1	; 0x802cf4 <Timems+0x1>
    2bd6:	10 92 f5 2c 	sts	0x2CF5, r1	; 0x802cf5 <Timems+0x2>
    2bda:	10 92 f6 2c 	sts	0x2CF6, r1	; 0x802cf6 <Timems+0x3>
			xEventGroupClearBits(egPiStates, RESETCALC);
    2bde:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    2be2:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    2be6:	44 e0       	ldi	r20, 0x04	; 4
    2be8:	50 e0       	ldi	r21, 0x00	; 0
    2bea:	60 e0       	ldi	r22, 0x00	; 0
    2bec:	70 e0       	ldi	r23, 0x00	; 0
    2bee:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
		}
	}
    2bf2:	26 cf       	rjmp	.-436    	; 0x2a40 <vCalc+0x6c>

00002bf4 <__vector_77>:
}
	

ISR(TCD0_OVF_vect)
{
    2bf4:	1f 92       	push	r1
    2bf6:	0f 92       	push	r0
    2bf8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2bfc:	0f 92       	push	r0
    2bfe:	11 24       	eor	r1, r1
    2c00:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c04:	0f 92       	push	r0
    2c06:	2f 93       	push	r18
    2c08:	8f 93       	push	r24
    2c0a:	9f 93       	push	r25
    2c0c:	af 93       	push	r26
    2c0e:	bf 93       	push	r27
    2c10:	ef 93       	push	r30
    2c12:	ff 93       	push	r31
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	1f 92       	push	r1
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
    2c1e:	19 82       	std	Y+1, r1	; 0x01
	Timems++;
    2c20:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <Timems>
    2c24:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <Timems+0x1>
    2c28:	a0 91 f5 2c 	lds	r26, 0x2CF5	; 0x802cf5 <Timems+0x2>
    2c2c:	b0 91 f6 2c 	lds	r27, 0x2CF6	; 0x802cf6 <Timems+0x3>
    2c30:	01 96       	adiw	r24, 0x01	; 1
    2c32:	a1 1d       	adc	r26, r1
    2c34:	b1 1d       	adc	r27, r1
    2c36:	80 93 f3 2c 	sts	0x2CF3, r24	; 0x802cf3 <Timems>
    2c3a:	90 93 f4 2c 	sts	0x2CF4, r25	; 0x802cf4 <Timems+0x1>
    2c3e:	a0 93 f5 2c 	sts	0x2CF5, r26	; 0x802cf5 <Timems+0x2>
    2c42:	b0 93 f6 2c 	sts	0x2CF6, r27	; 0x802cf6 <Timems+0x3>
	PORTF.OUTTGL = PIN0_bm;			//LED1
    2c46:	80 ea       	ldi	r24, 0xA0	; 160
    2c48:	96 e0       	ldi	r25, 0x06	; 6
    2c4a:	21 e0       	ldi	r18, 0x01	; 1
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	27 83       	std	Z+7, r18	; 0x07
	//xEventGroupSetBitsFromISR(egPiStates, TICK, &xHigherPriorityTaskWoken);
    2c50:	00 00       	nop
    2c52:	0f 90       	pop	r0
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	ff 91       	pop	r31
    2c5a:	ef 91       	pop	r30
    2c5c:	bf 91       	pop	r27
    2c5e:	af 91       	pop	r26
    2c60:	9f 91       	pop	r25
    2c62:	8f 91       	pop	r24
    2c64:	2f 91       	pop	r18
    2c66:	0f 90       	pop	r0
    2c68:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c6c:	0f 90       	pop	r0
    2c6e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c72:	0f 90       	pop	r0
    2c74:	1f 90       	pop	r1
    2c76:	18 95       	reti

00002c78 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    2c78:	1f 92       	push	r1
    2c7a:	0f 92       	push	r0
    2c7c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c80:	0f 92       	push	r0
    2c82:	11 24       	eor	r1, r1
    2c84:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c88:	0f 92       	push	r0
    2c8a:	2f 93       	push	r18
    2c8c:	3f 93       	push	r19
    2c8e:	4f 93       	push	r20
    2c90:	5f 93       	push	r21
    2c92:	6f 93       	push	r22
    2c94:	7f 93       	push	r23
    2c96:	8f 93       	push	r24
    2c98:	9f 93       	push	r25
    2c9a:	af 93       	push	r26
    2c9c:	bf 93       	push	r27
    2c9e:	ef 93       	push	r30
    2ca0:	ff 93       	push	r31
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	1f 92       	push	r1
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	19 82       	std	Y+1, r1	; 0x01
    2cae:	80 91 fb 2c 	lds	r24, 0x2CFB	; 0x802cfb <egDisplayTiming>
    2cb2:	90 91 fc 2c 	lds	r25, 0x2CFC	; 0x802cfc <egDisplayTiming+0x1>
    2cb6:	9e 01       	movw	r18, r28
    2cb8:	2f 5f       	subi	r18, 0xFF	; 255
    2cba:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbc:	41 e0       	ldi	r20, 0x01	; 1
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <xEventGroupSetBitsFromISR>
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	9b e0       	ldi	r25, 0x0B	; 11
    2cce:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	9b e0       	ldi	r25, 0x0B	; 11
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	16 82       	std	Z+6, r1	; 0x06
    2cda:	00 00       	nop
    2cdc:	0f 90       	pop	r0
    2cde:	df 91       	pop	r29
    2ce0:	cf 91       	pop	r28
    2ce2:	ff 91       	pop	r31
    2ce4:	ef 91       	pop	r30
    2ce6:	bf 91       	pop	r27
    2ce8:	af 91       	pop	r26
    2cea:	9f 91       	pop	r25
    2cec:	8f 91       	pop	r24
    2cee:	7f 91       	pop	r23
    2cf0:	6f 91       	pop	r22
    2cf2:	5f 91       	pop	r21
    2cf4:	4f 91       	pop	r20
    2cf6:	3f 91       	pop	r19
    2cf8:	2f 91       	pop	r18
    2cfa:	0f 90       	pop	r0
    2cfc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d00:	0f 90       	pop	r0
    2d02:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2d06:	0f 90       	pop	r0
    2d08:	1f 90       	pop	r1
    2d0a:	18 95       	reti

00002d0c <delayUS>:
    2d0c:	cf 92       	push	r12
    2d0e:	df 92       	push	r13
    2d10:	ef 92       	push	r14
    2d12:	ff 92       	push	r15
    2d14:	0f 93       	push	r16
    2d16:	cf 93       	push	r28
    2d18:	df 93       	push	r29
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <delayUS+0x10>
    2d1c:	1f 92       	push	r1
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	69 83       	std	Y+1, r22	; 0x01
    2d24:	7a 83       	std	Y+2, r23	; 0x02
    2d26:	8b 83       	std	Y+3, r24	; 0x03
    2d28:	9c 83       	std	Y+4, r25	; 0x04
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2e:	ab 81       	ldd	r26, Y+3	; 0x03
    2d30:	bc 81       	ldd	r27, Y+4	; 0x04
    2d32:	02 97       	sbiw	r24, 0x02	; 2
    2d34:	a1 05       	cpc	r26, r1
    2d36:	b1 05       	cpc	r27, r1
    2d38:	40 f4       	brcc	.+16     	; 0x2d4a <delayUS+0x3e>
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	a0 e0       	ldi	r26, 0x00	; 0
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	9a 83       	std	Y+2, r25	; 0x02
    2d46:	ab 83       	std	Y+3, r26	; 0x03
    2d48:	bc 83       	std	Y+4, r27	; 0x04
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	9b e0       	ldi	r25, 0x0B	; 11
    2d4e:	21 e0       	ldi	r18, 0x01	; 1
    2d50:	fc 01       	movw	r30, r24
    2d52:	26 83       	std	Z+6, r18	; 0x06
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	9b e0       	ldi	r25, 0x0B	; 11
    2d58:	fc 01       	movw	r30, r24
    2d5a:	10 a2       	std	Z+32, r1	; 0x20
    2d5c:	11 a2       	std	Z+33, r1	; 0x21
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	9b e0       	ldi	r25, 0x0B	; 11
    2d64:	0e 94 50 03 	call	0x6a0	; 0x6a0 <TC0_ConfigWGM>
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d6e:	bc 81       	ldd	r27, Y+4	; 0x04
    2d70:	8e 3f       	cpi	r24, 0xFE	; 254
    2d72:	9f 4f       	sbci	r25, 0xFF	; 255
    2d74:	a1 05       	cpc	r26, r1
    2d76:	b1 05       	cpc	r27, r1
    2d78:	98 f4       	brcc	.+38     	; 0x2da0 <delayUS+0x94>
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	3b e0       	ldi	r19, 0x0B	; 11
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	9a 81       	ldd	r25, Y+2	; 0x02
    2d82:	ab 81       	ldd	r26, Y+3	; 0x03
    2d84:	bc 81       	ldd	r27, Y+4	; 0x04
    2d86:	b6 95       	lsr	r27
    2d88:	a7 95       	ror	r26
    2d8a:	97 95       	ror	r25
    2d8c:	87 95       	ror	r24
    2d8e:	f9 01       	movw	r30, r18
    2d90:	86 a3       	std	Z+38, r24	; 0x26
    2d92:	97 a3       	std	Z+39, r25	; 0x27
    2d94:	65 e0       	ldi	r22, 0x05	; 5
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	9b e0       	ldi	r25, 0x0B	; 11
    2d9a:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2d9e:	1f c0       	rjmp	.+62     	; 0x2dde <delayUS+0xd2>
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	ab 81       	ldd	r26, Y+3	; 0x03
    2da6:	bc 81       	ldd	r27, Y+4	; 0x04
    2da8:	80 34       	cpi	r24, 0x40	; 64
    2daa:	92 44       	sbci	r25, 0x42	; 66
    2dac:	af 40       	sbci	r26, 0x0F	; 15
    2dae:	b1 05       	cpc	r27, r1
    2db0:	b0 f4       	brcc	.+44     	; 0x2dde <delayUS+0xd2>
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	3b e0       	ldi	r19, 0x0B	; 11
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	ab 81       	ldd	r26, Y+3	; 0x03
    2dbc:	bc 81       	ldd	r27, Y+4	; 0x04
    2dbe:	68 94       	set
    2dc0:	14 f8       	bld	r1, 4
    2dc2:	b6 95       	lsr	r27
    2dc4:	a7 95       	ror	r26
    2dc6:	97 95       	ror	r25
    2dc8:	87 95       	ror	r24
    2dca:	16 94       	lsr	r1
    2dcc:	d1 f7       	brne	.-12     	; 0x2dc2 <delayUS+0xb6>
    2dce:	f9 01       	movw	r30, r18
    2dd0:	86 a3       	std	Z+38, r24	; 0x26
    2dd2:	97 a3       	std	Z+39, r25	; 0x27
    2dd4:	67 e0       	ldi	r22, 0x07	; 7
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	9b e0       	ldi	r25, 0x0B	; 11
    2dda:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2dde:	80 91 fb 2c 	lds	r24, 0x2CFB	; 0x802cfb <egDisplayTiming>
    2de2:	90 91 fc 2c 	lds	r25, 0x2CFC	; 0x802cfc <egDisplayTiming+0x1>
    2de6:	0f 2e       	mov	r0, r31
    2de8:	f4 ef       	ldi	r31, 0xF4	; 244
    2dea:	cf 2e       	mov	r12, r31
    2dec:	dd 24       	eor	r13, r13
    2dee:	d3 94       	inc	r13
    2df0:	e1 2c       	mov	r14, r1
    2df2:	f1 2c       	mov	r15, r1
    2df4:	f0 2d       	mov	r31, r0
    2df6:	00 e0       	ldi	r16, 0x00	; 0
    2df8:	21 e0       	ldi	r18, 0x01	; 1
    2dfa:	41 e0       	ldi	r20, 0x01	; 1
    2dfc:	50 e0       	ldi	r21, 0x00	; 0
    2dfe:	60 e0       	ldi	r22, 0x00	; 0
    2e00:	70 e0       	ldi	r23, 0x00	; 0
    2e02:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <xEventGroupWaitBits>
    2e06:	00 00       	nop
    2e08:	24 96       	adiw	r28, 0x04	; 4
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	de bf       	out	0x3e, r29	; 62
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	0f 91       	pop	r16
    2e14:	ff 90       	pop	r15
    2e16:	ef 90       	pop	r14
    2e18:	df 90       	pop	r13
    2e1a:	cf 90       	pop	r12
    2e1c:	08 95       	ret

00002e1e <setPort>:
    2e1e:	cf 93       	push	r28
    2e20:	df 93       	push	r29
    2e22:	1f 92       	push	r1
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	89 83       	std	Y+1, r24	; 0x01
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	8f 70       	andi	r24, 0x0F	; 15
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	82 95       	swap	r24
    2e34:	80 7f       	andi	r24, 0xF0	; 240
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	96 e0       	ldi	r25, 0x06	; 6
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	36 e0       	ldi	r19, 0x06	; 6
    2e40:	f9 01       	movw	r30, r18
    2e42:	34 81       	ldd	r19, Z+4	; 0x04
    2e44:	29 81       	ldd	r18, Y+1	; 0x01
    2e46:	2f 60       	ori	r18, 0x0F	; 15
    2e48:	23 23       	and	r18, r19
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	24 83       	std	Z+4, r18	; 0x04
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	96 e0       	ldi	r25, 0x06	; 6
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	36 e0       	ldi	r19, 0x06	; 6
    2e56:	f9 01       	movw	r30, r18
    2e58:	34 81       	ldd	r19, Z+4	; 0x04
    2e5a:	29 81       	ldd	r18, Y+1	; 0x01
    2e5c:	23 2b       	or	r18, r19
    2e5e:	fc 01       	movw	r30, r24
    2e60:	24 83       	std	Z+4, r18	; 0x04
    2e62:	00 00       	nop
    2e64:	0f 90       	pop	r0
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	08 95       	ret

00002e6c <setRS>:
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	1f 92       	push	r1
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	89 83       	std	Y+1, r24	; 0x01
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	88 23       	and	r24, r24
    2e7c:	31 f0       	breq	.+12     	; 0x2e8a <setRS+0x1e>
    2e7e:	80 e6       	ldi	r24, 0x60	; 96
    2e80:	96 e0       	ldi	r25, 0x06	; 6
    2e82:	21 e0       	ldi	r18, 0x01	; 1
    2e84:	fc 01       	movw	r30, r24
    2e86:	25 83       	std	Z+5, r18	; 0x05
    2e88:	05 c0       	rjmp	.+10     	; 0x2e94 <setRS+0x28>
    2e8a:	80 e6       	ldi	r24, 0x60	; 96
    2e8c:	96 e0       	ldi	r25, 0x06	; 6
    2e8e:	21 e0       	ldi	r18, 0x01	; 1
    2e90:	fc 01       	movw	r30, r24
    2e92:	26 83       	std	Z+6, r18	; 0x06
    2e94:	00 00       	nop
    2e96:	0f 90       	pop	r0
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	08 95       	ret

00002e9e <setRW>:
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	1f 92       	push	r1
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	88 23       	and	r24, r24
    2eae:	31 f0       	breq	.+12     	; 0x2ebc <setRW+0x1e>
    2eb0:	80 e6       	ldi	r24, 0x60	; 96
    2eb2:	96 e0       	ldi	r25, 0x06	; 6
    2eb4:	22 e0       	ldi	r18, 0x02	; 2
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	25 83       	std	Z+5, r18	; 0x05
    2eba:	05 c0       	rjmp	.+10     	; 0x2ec6 <setRW+0x28>
    2ebc:	80 e6       	ldi	r24, 0x60	; 96
    2ebe:	96 e0       	ldi	r25, 0x06	; 6
    2ec0:	22 e0       	ldi	r18, 0x02	; 2
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	26 83       	std	Z+6, r18	; 0x06
    2ec6:	00 00       	nop
    2ec8:	0f 90       	pop	r0
    2eca:	df 91       	pop	r29
    2ecc:	cf 91       	pop	r28
    2ece:	08 95       	ret

00002ed0 <setE>:
    2ed0:	cf 93       	push	r28
    2ed2:	df 93       	push	r29
    2ed4:	1f 92       	push	r1
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	88 23       	and	r24, r24
    2ee0:	31 f0       	breq	.+12     	; 0x2eee <setE+0x1e>
    2ee2:	80 e6       	ldi	r24, 0x60	; 96
    2ee4:	96 e0       	ldi	r25, 0x06	; 6
    2ee6:	24 e0       	ldi	r18, 0x04	; 4
    2ee8:	fc 01       	movw	r30, r24
    2eea:	25 83       	std	Z+5, r18	; 0x05
    2eec:	05 c0       	rjmp	.+10     	; 0x2ef8 <setE+0x28>
    2eee:	80 e6       	ldi	r24, 0x60	; 96
    2ef0:	96 e0       	ldi	r25, 0x06	; 6
    2ef2:	24 e0       	ldi	r18, 0x04	; 4
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	26 83       	std	Z+6, r18	; 0x06
    2ef8:	00 00       	nop
    2efa:	0f 90       	pop	r0
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	08 95       	ret

00002f02 <Nybble>:
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <setE>
    2f10:	61 e0       	ldi	r22, 0x01	; 1
    2f12:	70 e0       	ldi	r23, 0x00	; 0
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <delayUS>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <setE>
    2f22:	00 00       	nop
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	08 95       	ret

00002f2a <command>:
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	1f 92       	push	r1
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	89 83       	std	Y+1, r24	; 0x01
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	82 95       	swap	r24
    2f3a:	8f 70       	andi	r24, 0x0F	; 15
    2f3c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <setPort>
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <setRS>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <setRW>
    2f4c:	0e 94 81 17 	call	0x2f02	; 0x2f02 <Nybble>
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	8f 70       	andi	r24, 0x0F	; 15
    2f54:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <setPort>
    2f58:	0e 94 81 17 	call	0x2f02	; 0x2f02 <Nybble>
    2f5c:	00 00       	nop
    2f5e:	0f 90       	pop	r0
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	08 95       	ret

00002f66 <write>:
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	1f 92       	push	r1
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	89 83       	std	Y+1, r24	; 0x01
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	82 95       	swap	r24
    2f76:	8f 70       	andi	r24, 0x0F	; 15
    2f78:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <setPort>
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <setRS>
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <setRW>
    2f88:	0e 94 81 17 	call	0x2f02	; 0x2f02 <Nybble>
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	8f 70       	andi	r24, 0x0F	; 15
    2f90:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <setPort>
    2f94:	0e 94 81 17 	call	0x2f02	; 0x2f02 <Nybble>
    2f98:	00 00       	nop
    2f9a:	0f 90       	pop	r0
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	08 95       	ret

00002fa2 <vInitDisplay>:
 
 void vInitDisplay() {
    2fa2:	ef 92       	push	r14
    2fa4:	ff 92       	push	r15
    2fa6:	0f 93       	push	r16
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	96 e0       	ldi	r25, 0x06	; 6
    2fb4:	20 e1       	ldi	r18, 0x10	; 16
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	96 e0       	ldi	r25, 0x06	; 6
    2fbe:	20 e2       	ldi	r18, 0x20	; 32
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	96 e0       	ldi	r25, 0x06	; 6
    2fc8:	20 e4       	ldi	r18, 0x40	; 64
    2fca:	fc 01       	movw	r30, r24
    2fcc:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	96 e0       	ldi	r25, 0x06	; 6
    2fd2:	20 e8       	ldi	r18, 0x80	; 128
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    2fd8:	80 e6       	ldi	r24, 0x60	; 96
    2fda:	96 e0       	ldi	r25, 0x06	; 6
    2fdc:	21 e0       	ldi	r18, 0x01	; 1
    2fde:	fc 01       	movw	r30, r24
    2fe0:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    2fe2:	80 e6       	ldi	r24, 0x60	; 96
    2fe4:	96 e0       	ldi	r25, 0x06	; 6
    2fe6:	22 e0       	ldi	r18, 0x02	; 2
    2fe8:	fc 01       	movw	r30, r24
    2fea:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    2fec:	80 e6       	ldi	r24, 0x60	; 96
    2fee:	96 e0       	ldi	r25, 0x06	; 6
    2ff0:	24 e0       	ldi	r18, 0x04	; 4
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	96 e0       	ldi	r25, 0x06	; 6
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	36 e0       	ldi	r19, 0x06	; 6
    2ffe:	f9 01       	movw	r30, r18
    3000:	24 81       	ldd	r18, Z+4	; 0x04
    3002:	2f 70       	andi	r18, 0x0F	; 15
    3004:	fc 01       	movw	r30, r24
    3006:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    3008:	80 e6       	ldi	r24, 0x60	; 96
    300a:	96 e0       	ldi	r25, 0x06	; 6
    300c:	20 e6       	ldi	r18, 0x60	; 96
    300e:	36 e0       	ldi	r19, 0x06	; 6
    3010:	f9 01       	movw	r30, r18
    3012:	24 81       	ldd	r18, Z+4	; 0x04
    3014:	28 7f       	andi	r18, 0xF8	; 248
    3016:	fc 01       	movw	r30, r24
    3018:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    301a:	40 e0       	ldi	r20, 0x00	; 0
    301c:	66 e1       	ldi	r22, 0x16	; 22
    301e:	88 e0       	ldi	r24, 0x08	; 8
    3020:	0e 94 8d 08 	call	0x111a	; 0x111a <xQueueGenericCreate>
    3024:	80 93 f9 2c 	sts	0x2CF9, r24	; 0x802cf9 <displayLineQueue>
    3028:	90 93 fa 2c 	sts	0x2CFA, r25	; 0x802cfa <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    302c:	0e 94 66 03 	call	0x6cc	; 0x6cc <xEventGroupCreate>
    3030:	80 93 fb 2c 	sts	0x2CFB, r24	; 0x802cfb <egDisplayTiming>
    3034:	90 93 fc 2c 	sts	0x2CFC, r25	; 0x802cfc <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);	//von Hand auf Prio 2 gestellt
    3038:	e1 2c       	mov	r14, r1
    303a:	f1 2c       	mov	r15, r1
    303c:	02 e0       	ldi	r16, 0x02	; 2
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	4e e5       	ldi	r20, 0x5E	; 94
    3044:	51 e0       	ldi	r21, 0x01	; 1
    3046:	6b e4       	ldi	r22, 0x4B	; 75
    3048:	70 e2       	ldi	r23, 0x20	; 32
    304a:	8f ec       	ldi	r24, 0xCF	; 207
    304c:	98 e1       	ldi	r25, 0x18	; 24
    304e:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
 }
    3052:	00 00       	nop
    3054:	df 91       	pop	r29
    3056:	cf 91       	pop	r28
    3058:	0f 91       	pop	r16
    305a:	ff 90       	pop	r15
    305c:	ef 90       	pop	r14
    305e:	08 95       	ret

00003060 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    3060:	cf 93       	push	r28
    3062:	df 93       	push	r29
    3064:	00 d0       	rcall	.+0      	; 0x3066 <_displaySetPos+0x6>
    3066:	1f 92       	push	r1
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	9a 83       	std	Y+2, r25	; 0x02
    3070:	6b 83       	std	Y+3, r22	; 0x03
    3072:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	9a 81       	ldd	r25, Y+2	; 0x02
    3078:	81 30       	cpi	r24, 0x01	; 1
    307a:	91 05       	cpc	r25, r1
    307c:	89 f0       	breq	.+34     	; 0x30a0 <_displaySetPos+0x40>
    307e:	82 30       	cpi	r24, 0x02	; 2
    3080:	91 05       	cpc	r25, r1
    3082:	1c f4       	brge	.+6      	; 0x308a <_displaySetPos+0x2a>
    3084:	89 2b       	or	r24, r25
    3086:	39 f0       	breq	.+14     	; 0x3096 <_displaySetPos+0x36>
    3088:	1a c0       	rjmp	.+52     	; 0x30be <_displaySetPos+0x5e>
    308a:	82 30       	cpi	r24, 0x02	; 2
    308c:	91 05       	cpc	r25, r1
    308e:	69 f0       	breq	.+26     	; 0x30aa <_displaySetPos+0x4a>
    3090:	03 97       	sbiw	r24, 0x03	; 3
    3092:	81 f0       	breq	.+32     	; 0x30b4 <_displaySetPos+0x54>
    3094:	14 c0       	rjmp	.+40     	; 0x30be <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	80 58       	subi	r24, 0x80	; 128
    309a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <command>
		 break;
    309e:	0f c0       	rjmp	.+30     	; 0x30be <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	80 54       	subi	r24, 0x40	; 64
    30a4:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <command>
		 break;
    30a8:	0a c0       	rjmp	.+20     	; 0x30be <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	8c 56       	subi	r24, 0x6C	; 108
    30ae:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <command>
		 break;
    30b2:	05 c0       	rjmp	.+10     	; 0x30be <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	8c 52       	subi	r24, 0x2C	; 44
    30b8:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <command>
		 break;
    30bc:	00 00       	nop
	 }
	 delayUS(39);
    30be:	67 e2       	ldi	r22, 0x27	; 39
    30c0:	70 e0       	ldi	r23, 0x00	; 0
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <delayUS>
 }
    30ca:	00 00       	nop
    30cc:	24 96       	adiw	r28, 0x04	; 4
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	de bf       	out	0x3e, r29	; 62
    30d2:	df 91       	pop	r29
    30d4:	cf 91       	pop	r28
    30d6:	08 95       	ret

000030d8 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    30d8:	cf 93       	push	r28
    30da:	df 93       	push	r29
    30dc:	1f 92       	push	r1
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <write>
	 delayUS(43);
    30ea:	6b e2       	ldi	r22, 0x2B	; 43
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <delayUS>
 }
    30f6:	00 00       	nop
    30f8:	0f 90       	pop	r0
    30fa:	df 91       	pop	r29
    30fc:	cf 91       	pop	r28
    30fe:	08 95       	ret

00003100 <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	00 d0       	rcall	.+0      	; 0x3106 <_displayWriteString+0x6>
    3106:	1f 92       	push	r1
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	8b 83       	std	Y+3, r24	; 0x03
    310e:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    3110:	19 82       	std	Y+1, r1	; 0x01
    3112:	1a 82       	std	Y+2, r1	; 0x02
    3114:	19 c0       	rjmp	.+50     	; 0x3148 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	9a 81       	ldd	r25, Y+2	; 0x02
    311a:	2b 81       	ldd	r18, Y+3	; 0x03
    311c:	3c 81       	ldd	r19, Y+4	; 0x04
    311e:	82 0f       	add	r24, r18
    3120:	93 1f       	adc	r25, r19
    3122:	fc 01       	movw	r30, r24
    3124:	80 81       	ld	r24, Z
    3126:	88 23       	and	r24, r24
    3128:	a1 f0       	breq	.+40     	; 0x3152 <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	9a 81       	ldd	r25, Y+2	; 0x02
    312e:	2b 81       	ldd	r18, Y+3	; 0x03
    3130:	3c 81       	ldd	r19, Y+4	; 0x04
    3132:	82 0f       	add	r24, r18
    3134:	93 1f       	adc	r25, r19
    3136:	fc 01       	movw	r30, r24
    3138:	80 81       	ld	r24, Z
    313a:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	9a 81       	ldd	r25, Y+2	; 0x02
    3142:	01 96       	adiw	r24, 0x01	; 1
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	9a 83       	std	Y+2, r25	; 0x02
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	9a 81       	ldd	r25, Y+2	; 0x02
    314c:	44 97       	sbiw	r24, 0x14	; 20
    314e:	1c f3       	brlt	.-58     	; 0x3116 <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    3150:	01 c0       	rjmp	.+2      	; 0x3154 <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    3152:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    3154:	00 00       	nop
    3156:	24 96       	adiw	r28, 0x04	; 4
    3158:	cd bf       	out	0x3d, r28	; 61
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	08 95       	ret

00003162 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	00 d0       	rcall	.+0      	; 0x3168 <_displayWriteStringAtPos+0x6>
    3168:	00 d0       	rcall	.+0      	; 0x316a <_displayWriteStringAtPos+0x8>
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	9a 83       	std	Y+2, r25	; 0x02
    3172:	6b 83       	std	Y+3, r22	; 0x03
    3174:	7c 83       	std	Y+4, r23	; 0x04
    3176:	4d 83       	std	Y+5, r20	; 0x05
    3178:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    317a:	2b 81       	ldd	r18, Y+3	; 0x03
    317c:	3c 81       	ldd	r19, Y+4	; 0x04
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	9a 81       	ldd	r25, Y+2	; 0x02
    3182:	b9 01       	movw	r22, r18
    3184:	0e 94 30 18 	call	0x3060	; 0x3060 <_displaySetPos>
	 _displayWriteString(s);
    3188:	8d 81       	ldd	r24, Y+5	; 0x05
    318a:	9e 81       	ldd	r25, Y+6	; 0x06
    318c:	0e 94 80 18 	call	0x3100	; 0x3100 <_displayWriteString>
 }
    3190:	00 00       	nop
    3192:	26 96       	adiw	r28, 0x06	; 6
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	de bf       	out	0x3e, r29	; 62
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	08 95       	ret

0000319e <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    319e:	cf 93       	push	r28
    31a0:	df 93       	push	r29
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	c0 57       	subi	r28, 0x70	; 112
    31a8:	d1 09       	sbc	r29, r1
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	9e 01       	movw	r18, r28
    31b0:	21 59       	subi	r18, 0x91	; 145
    31b2:	3f 4f       	sbci	r19, 0xFF	; 255
    31b4:	f9 01       	movw	r30, r18
    31b6:	80 83       	st	Z, r24
    31b8:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    31ba:	19 82       	std	Y+1, r1	; 0x01
    31bc:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    31be:	1b 82       	std	Y+3, r1	; 0x03
    31c0:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    31c2:	1d 82       	std	Y+5, r1	; 0x05
    31c4:	1e 82       	std	Y+6, r1	; 0x06
    31c6:	26 c0       	rjmp	.+76     	; 0x3214 <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    31c8:	1f 82       	std	Y+7, r1	; 0x07
    31ca:	18 86       	std	Y+8, r1	; 0x08
    31cc:	1a c0       	rjmp	.+52     	; 0x3202 <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    31ce:	2d 81       	ldd	r18, Y+5	; 0x05
    31d0:	3e 81       	ldd	r19, Y+6	; 0x06
    31d2:	44 e1       	ldi	r20, 0x14	; 20
    31d4:	42 9f       	mul	r20, r18
    31d6:	c0 01       	movw	r24, r0
    31d8:	43 9f       	mul	r20, r19
    31da:	90 0d       	add	r25, r0
    31dc:	11 24       	eor	r1, r1
    31de:	9e 01       	movw	r18, r28
    31e0:	2f 5f       	subi	r18, 0xFF	; 255
    31e2:	3f 4f       	sbci	r19, 0xFF	; 255
    31e4:	28 0f       	add	r18, r24
    31e6:	39 1f       	adc	r19, r25
    31e8:	8f 81       	ldd	r24, Y+7	; 0x07
    31ea:	98 85       	ldd	r25, Y+8	; 0x08
    31ec:	82 0f       	add	r24, r18
    31ee:	93 1f       	adc	r25, r19
    31f0:	08 96       	adiw	r24, 0x08	; 8
    31f2:	20 e2       	ldi	r18, 0x20	; 32
    31f4:	fc 01       	movw	r30, r24
    31f6:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    31f8:	8f 81       	ldd	r24, Y+7	; 0x07
    31fa:	98 85       	ldd	r25, Y+8	; 0x08
    31fc:	01 96       	adiw	r24, 0x01	; 1
    31fe:	8f 83       	std	Y+7, r24	; 0x07
    3200:	98 87       	std	Y+8, r25	; 0x08
    3202:	8f 81       	ldd	r24, Y+7	; 0x07
    3204:	98 85       	ldd	r25, Y+8	; 0x08
    3206:	44 97       	sbiw	r24, 0x14	; 20
    3208:	14 f3       	brlt	.-60     	; 0x31ce <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	9e 81       	ldd	r25, Y+6	; 0x06
    320e:	01 96       	adiw	r24, 0x01	; 1
    3210:	8d 83       	std	Y+5, r24	; 0x05
    3212:	9e 83       	std	Y+6, r25	; 0x06
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	04 97       	sbiw	r24, 0x04	; 4
    321a:	b4 f2       	brlt	.-84     	; 0x31c8 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    321c:	60 e4       	ldi	r22, 0x40	; 64
    321e:	7c e9       	ldi	r23, 0x9C	; 156
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <delayUS>
	 setPort(0x03);
    3228:	83 e0       	ldi	r24, 0x03	; 3
    322a:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <setPort>
	 delayUS(5000);
    322e:	68 e8       	ldi	r22, 0x88	; 136
    3230:	73 e1       	ldi	r23, 0x13	; 19
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <delayUS>
	 Nybble();
    323a:	0e 94 81 17 	call	0x2f02	; 0x2f02 <Nybble>
	 delayUS(160);
    323e:	60 ea       	ldi	r22, 0xA0	; 160
    3240:	70 e0       	ldi	r23, 0x00	; 0
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <delayUS>
	 Nybble();
    324a:	0e 94 81 17 	call	0x2f02	; 0x2f02 <Nybble>
	 delayUS(160);
    324e:	60 ea       	ldi	r22, 0xA0	; 160
    3250:	70 e0       	ldi	r23, 0x00	; 0
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <delayUS>
	 Nybble();
    325a:	0e 94 81 17 	call	0x2f02	; 0x2f02 <Nybble>
	 delayUS(160);
    325e:	60 ea       	ldi	r22, 0xA0	; 160
    3260:	70 e0       	ldi	r23, 0x00	; 0
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <delayUS>
	 setPort(0x02);
    326a:	82 e0       	ldi	r24, 0x02	; 2
    326c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <setPort>
	 Nybble();
    3270:	0e 94 81 17 	call	0x2f02	; 0x2f02 <Nybble>
	 command(0x28);
    3274:	88 e2       	ldi	r24, 0x28	; 40
    3276:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <command>
	 command(0x10);
    327a:	80 e1       	ldi	r24, 0x10	; 16
    327c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <command>
	 command(0x0C); //Cursor and Blinking off
    3280:	8c e0       	ldi	r24, 0x0C	; 12
    3282:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <command>
	 command(0x06);
    3286:	86 e0       	ldi	r24, 0x06	; 6
    3288:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    328c:	68 ec       	ldi	r22, 0xC8	; 200
    328e:	70 e0       	ldi	r23, 0x00	; 0
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    3298:	80 91 fb 2c 	lds	r24, 0x2CFB	; 0x802cfb <egDisplayTiming>
    329c:	90 91 fc 2c 	lds	r25, 0x2CFC	; 0x802cfc <egDisplayTiming+0x1>
    32a0:	40 e0       	ldi	r20, 0x00	; 0
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	ba 01       	movw	r22, r20
    32a6:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	89 2b       	or	r24, r25
    32b0:	8a 2b       	or	r24, r26
    32b2:	8b 2b       	or	r24, r27
    32b4:	09 f4       	brne	.+2      	; 0x32b8 <vDisplayUpdateTask+0x11a>
    32b6:	96 c0       	rjmp	.+300    	; 0x33e4 <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    32b8:	80 91 fb 2c 	lds	r24, 0x2CFB	; 0x802cfb <egDisplayTiming>
    32bc:	90 91 fc 2c 	lds	r25, 0x2CFC	; 0x802cfc <egDisplayTiming+0x1>
    32c0:	42 e0       	ldi	r20, 0x02	; 2
    32c2:	50 e0       	ldi	r21, 0x00	; 0
    32c4:	60 e0       	ldi	r22, 0x00	; 0
    32c6:	70 e0       	ldi	r23, 0x00	; 0
    32c8:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    32cc:	19 82       	std	Y+1, r1	; 0x01
    32ce:	1a 82       	std	Y+2, r1	; 0x02
    32d0:	26 c0       	rjmp	.+76     	; 0x331e <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    32d2:	1b 82       	std	Y+3, r1	; 0x03
    32d4:	1c 82       	std	Y+4, r1	; 0x04
    32d6:	1a c0       	rjmp	.+52     	; 0x330c <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    32d8:	29 81       	ldd	r18, Y+1	; 0x01
    32da:	3a 81       	ldd	r19, Y+2	; 0x02
    32dc:	44 e1       	ldi	r20, 0x14	; 20
    32de:	42 9f       	mul	r20, r18
    32e0:	c0 01       	movw	r24, r0
    32e2:	43 9f       	mul	r20, r19
    32e4:	90 0d       	add	r25, r0
    32e6:	11 24       	eor	r1, r1
    32e8:	9e 01       	movw	r18, r28
    32ea:	2f 5f       	subi	r18, 0xFF	; 255
    32ec:	3f 4f       	sbci	r19, 0xFF	; 255
    32ee:	28 0f       	add	r18, r24
    32f0:	39 1f       	adc	r19, r25
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	9c 81       	ldd	r25, Y+4	; 0x04
    32f6:	82 0f       	add	r24, r18
    32f8:	93 1f       	adc	r25, r19
    32fa:	08 96       	adiw	r24, 0x08	; 8
    32fc:	20 e2       	ldi	r18, 0x20	; 32
    32fe:	fc 01       	movw	r30, r24
    3300:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    3302:	8b 81       	ldd	r24, Y+3	; 0x03
    3304:	9c 81       	ldd	r25, Y+4	; 0x04
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	8b 83       	std	Y+3, r24	; 0x03
    330a:	9c 83       	std	Y+4, r25	; 0x04
    330c:	8b 81       	ldd	r24, Y+3	; 0x03
    330e:	9c 81       	ldd	r25, Y+4	; 0x04
    3310:	44 97       	sbiw	r24, 0x14	; 20
    3312:	14 f3       	brlt	.-60     	; 0x32d8 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	9a 81       	ldd	r25, Y+2	; 0x02
    3318:	01 96       	adiw	r24, 0x01	; 1
    331a:	89 83       	std	Y+1, r24	; 0x01
    331c:	9a 83       	std	Y+2, r25	; 0x02
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	04 97       	sbiw	r24, 0x04	; 4
    3324:	b4 f2       	brlt	.-84     	; 0x32d2 <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    3326:	5e c0       	rjmp	.+188    	; 0x33e4 <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    3328:	80 91 f9 2c 	lds	r24, 0x2CF9	; 0x802cf9 <displayLineQueue>
    332c:	90 91 fa 2c 	lds	r25, 0x2CFA	; 0x802cfa <displayLineQueue+0x1>
    3330:	be 01       	movw	r22, r28
    3332:	67 5a       	subi	r22, 0xA7	; 167
    3334:	7f 4f       	sbci	r23, 0xFF	; 255
    3336:	2f ef       	ldi	r18, 0xFF	; 255
    3338:	3f ef       	ldi	r19, 0xFF	; 255
    333a:	a9 01       	movw	r20, r18
    333c:	0e 94 a9 09 	call	0x1352	; 0x1352 <xQueueReceive>
    3340:	88 23       	and	r24, r24
    3342:	09 f4       	brne	.+2      	; 0x3346 <vDisplayUpdateTask+0x1a8>
    3344:	4f c0       	rjmp	.+158    	; 0x33e4 <vDisplayUpdateTask+0x246>
				i=0;			
    3346:	19 82       	std	Y+1, r1	; 0x01
    3348:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    334a:	32 c0       	rjmp	.+100    	; 0x33b0 <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    334c:	ce 01       	movw	r24, r28
    334e:	87 5a       	subi	r24, 0xA7	; 167
    3350:	9f 4f       	sbci	r25, 0xFF	; 255
    3352:	fc 01       	movw	r30, r24
    3354:	80 81       	ld	r24, Z
    3356:	48 2f       	mov	r20, r24
    3358:	50 e0       	ldi	r21, 0x00	; 0
    335a:	ce 01       	movw	r24, r28
    335c:	87 5a       	subi	r24, 0xA7	; 167
    335e:	9f 4f       	sbci	r25, 0xFF	; 255
    3360:	fc 01       	movw	r30, r24
    3362:	81 81       	ldd	r24, Z+1	; 0x01
    3364:	28 2f       	mov	r18, r24
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	9a 81       	ldd	r25, Y+2	; 0x02
    336c:	82 0f       	add	r24, r18
    336e:	93 1f       	adc	r25, r19
    3370:	be 01       	movw	r22, r28
    3372:	67 5a       	subi	r22, 0xA7	; 167
    3374:	7f 4f       	sbci	r23, 0xFF	; 255
    3376:	29 81       	ldd	r18, Y+1	; 0x01
    3378:	3a 81       	ldd	r19, Y+2	; 0x02
    337a:	26 0f       	add	r18, r22
    337c:	37 1f       	adc	r19, r23
    337e:	2e 5f       	subi	r18, 0xFE	; 254
    3380:	3f 4f       	sbci	r19, 0xFF	; 255
    3382:	f9 01       	movw	r30, r18
    3384:	60 81       	ld	r22, Z
    3386:	74 e1       	ldi	r23, 0x14	; 20
    3388:	74 9f       	mul	r23, r20
    338a:	90 01       	movw	r18, r0
    338c:	75 9f       	mul	r23, r21
    338e:	30 0d       	add	r19, r0
    3390:	11 24       	eor	r1, r1
    3392:	ae 01       	movw	r20, r28
    3394:	4f 5f       	subi	r20, 0xFF	; 255
    3396:	5f 4f       	sbci	r21, 0xFF	; 255
    3398:	24 0f       	add	r18, r20
    339a:	35 1f       	adc	r19, r21
    339c:	82 0f       	add	r24, r18
    339e:	93 1f       	adc	r25, r19
    33a0:	08 96       	adiw	r24, 0x08	; 8
    33a2:	fc 01       	movw	r30, r24
    33a4:	60 83       	st	Z, r22
					i++;
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	9a 81       	ldd	r25, Y+2	; 0x02
    33aa:	01 96       	adiw	r24, 0x01	; 1
    33ac:	89 83       	std	Y+1, r24	; 0x01
    33ae:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    33b0:	ce 01       	movw	r24, r28
    33b2:	87 5a       	subi	r24, 0xA7	; 167
    33b4:	9f 4f       	sbci	r25, 0xFF	; 255
    33b6:	fc 01       	movw	r30, r24
    33b8:	81 81       	ldd	r24, Z+1	; 0x01
    33ba:	28 2f       	mov	r18, r24
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	9a 81       	ldd	r25, Y+2	; 0x02
    33c2:	82 0f       	add	r24, r18
    33c4:	93 1f       	adc	r25, r19
    33c6:	44 97       	sbiw	r24, 0x14	; 20
    33c8:	6c f4       	brge	.+26     	; 0x33e4 <vDisplayUpdateTask+0x246>
    33ca:	9e 01       	movw	r18, r28
    33cc:	27 5a       	subi	r18, 0xA7	; 167
    33ce:	3f 4f       	sbci	r19, 0xFF	; 255
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	9a 81       	ldd	r25, Y+2	; 0x02
    33d4:	82 0f       	add	r24, r18
    33d6:	93 1f       	adc	r25, r19
    33d8:	02 96       	adiw	r24, 0x02	; 2
    33da:	fc 01       	movw	r30, r24
    33dc:	80 81       	ld	r24, Z
    33de:	88 23       	and	r24, r24
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <vDisplayUpdateTask+0x246>
    33e2:	b4 cf       	rjmp	.-152    	; 0x334c <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    33e4:	80 91 f9 2c 	lds	r24, 0x2CF9	; 0x802cf9 <displayLineQueue>
    33e8:	90 91 fa 2c 	lds	r25, 0x2CFA	; 0x802cfa <displayLineQueue+0x1>
    33ec:	0e 94 4f 0a 	call	0x149e	; 0x149e <uxQueueMessagesWaiting>
    33f0:	88 23       	and	r24, r24
    33f2:	09 f0       	breq	.+2      	; 0x33f6 <vDisplayUpdateTask+0x258>
    33f4:	99 cf       	rjmp	.-206    	; 0x3328 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    33f6:	19 82       	std	Y+1, r1	; 0x01
    33f8:	1a 82       	std	Y+2, r1	; 0x02
    33fa:	19 c0       	rjmp	.+50     	; 0x342e <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    33fc:	9e 01       	movw	r18, r28
    33fe:	27 5f       	subi	r18, 0xF7	; 247
    3400:	3f 4f       	sbci	r19, 0xFF	; 255
    3402:	49 81       	ldd	r20, Y+1	; 0x01
    3404:	5a 81       	ldd	r21, Y+2	; 0x02
    3406:	64 e1       	ldi	r22, 0x14	; 20
    3408:	64 9f       	mul	r22, r20
    340a:	c0 01       	movw	r24, r0
    340c:	65 9f       	mul	r22, r21
    340e:	90 0d       	add	r25, r0
    3410:	11 24       	eor	r1, r1
    3412:	28 0f       	add	r18, r24
    3414:	39 1f       	adc	r19, r25
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	9a 81       	ldd	r25, Y+2	; 0x02
    341a:	a9 01       	movw	r20, r18
    341c:	60 e0       	ldi	r22, 0x00	; 0
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	0e 94 b1 18 	call	0x3162	; 0x3162 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	9a 81       	ldd	r25, Y+2	; 0x02
    3428:	01 96       	adiw	r24, 0x01	; 1
    342a:	89 83       	std	Y+1, r24	; 0x01
    342c:	9a 83       	std	Y+2, r25	; 0x02
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	9a 81       	ldd	r25, Y+2	; 0x02
    3432:	04 97       	sbiw	r24, 0x04	; 4
    3434:	1c f3       	brlt	.-58     	; 0x33fc <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    3436:	2a cf       	rjmp	.-428    	; 0x328c <vDisplayUpdateTask+0xee>

00003438 <vDisplayClear>:
 }
 

void vDisplayClear() {
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    3440:	80 91 fb 2c 	lds	r24, 0x2CFB	; 0x802cfb <egDisplayTiming>
    3444:	90 91 fc 2c 	lds	r25, 0x2CFC	; 0x802cfc <egDisplayTiming+0x1>
    3448:	42 e0       	ldi	r20, 0x02	; 2
    344a:	50 e0       	ldi	r21, 0x00	; 0
    344c:	60 e0       	ldi	r22, 0x00	; 0
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
}
    3454:	00 00       	nop
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	08 95       	ret

0000345c <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	1f 92       	push	r1
    3462:	1f 92       	push	r1
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    3468:	ce 01       	movw	r24, r28
    346a:	0e 96       	adiw	r24, 0x0e	; 14
    346c:	89 83       	std	Y+1, r24	; 0x01
    346e:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    3470:	29 81       	ldd	r18, Y+1	; 0x01
    3472:	3a 81       	ldd	r19, Y+2	; 0x02
    3474:	4c 85       	ldd	r20, Y+12	; 0x0c
    3476:	5d 85       	ldd	r21, Y+13	; 0x0d
    3478:	6a 85       	ldd	r22, Y+10	; 0x0a
    347a:	7b 85       	ldd	r23, Y+11	; 0x0b
    347c:	88 85       	ldd	r24, Y+8	; 0x08
    347e:	99 85       	ldd	r25, Y+9	; 0x09
    3480:	0e 94 48 1a 	call	0x3490	; 0x3490 <display_vprintf>
	va_end(arg);	
}
    3484:	00 00       	nop
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	df 91       	pop	r29
    348c:	cf 91       	pop	r28
    348e:	08 95       	ret

00003490 <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    3490:	0f 93       	push	r16
    3492:	cf 93       	push	r28
    3494:	df 93       	push	r29
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
    349a:	ec 97       	sbiw	r28, 0x3c	; 60
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	8d ab       	std	Y+53, r24	; 0x35
    34a2:	9e ab       	std	Y+54, r25	; 0x36
    34a4:	6f ab       	std	Y+55, r22	; 0x37
    34a6:	78 af       	std	Y+56, r23	; 0x38
    34a8:	49 af       	std	Y+57, r20	; 0x39
    34aa:	5a af       	std	Y+58, r21	; 0x3a
    34ac:	2b af       	std	Y+59, r18	; 0x3b
    34ae:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    34b0:	19 82       	std	Y+1, r1	; 0x01
    34b2:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    34b4:	1b 82       	std	Y+3, r1	; 0x03
    34b6:	1c 82       	std	Y+4, r1	; 0x04
    34b8:	0b c0       	rjmp	.+22     	; 0x34d0 <display_vprintf+0x40>
		buffer[i] = 0x00;
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
    34bc:	9c 81       	ldd	r25, Y+4	; 0x04
    34be:	84 54       	subi	r24, 0x44	; 68
    34c0:	93 4d       	sbci	r25, 0xD3	; 211
    34c2:	fc 01       	movw	r30, r24
    34c4:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    34c6:	8b 81       	ldd	r24, Y+3	; 0x03
    34c8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ca:	01 96       	adiw	r24, 0x01	; 1
    34cc:	8b 83       	std	Y+3, r24	; 0x03
    34ce:	9c 83       	std	Y+4, r25	; 0x04
    34d0:	8b 81       	ldd	r24, Y+3	; 0x03
    34d2:	9c 81       	ldd	r25, Y+4	; 0x04
    34d4:	44 97       	sbiw	r24, 0x14	; 20
    34d6:	8c f3       	brlt	.-30     	; 0x34ba <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    34d8:	1d 82       	std	Y+5, r1	; 0x05
    34da:	1e 82       	std	Y+6, r1	; 0x06
    34dc:	0b c0       	rjmp	.+22     	; 0x34f4 <display_vprintf+0x64>
		str[i] = 0x00;
    34de:	8d 81       	ldd	r24, Y+5	; 0x05
    34e0:	9e 81       	ldd	r25, Y+6	; 0x06
    34e2:	80 53       	subi	r24, 0x30	; 48
    34e4:	93 4d       	sbci	r25, 0xD3	; 211
    34e6:	fc 01       	movw	r30, r24
    34e8:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    34ea:	8d 81       	ldd	r24, Y+5	; 0x05
    34ec:	9e 81       	ldd	r25, Y+6	; 0x06
    34ee:	01 96       	adiw	r24, 0x01	; 1
    34f0:	8d 83       	std	Y+5, r24	; 0x05
    34f2:	9e 83       	std	Y+6, r25	; 0x06
    34f4:	8d 81       	ldd	r24, Y+5	; 0x05
    34f6:	9e 81       	ldd	r25, Y+6	; 0x06
    34f8:	44 97       	sbiw	r24, 0x14	; 20
    34fa:	8c f3       	brlt	.-30     	; 0x34de <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    34fc:	be c1       	rjmp	.+892    	; 0x387a <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    34fe:	8d 89       	ldd	r24, Y+21	; 0x15
    3500:	85 32       	cpi	r24, 0x25	; 37
    3502:	09 f0       	breq	.+2      	; 0x3506 <display_vprintf+0x76>
    3504:	a0 c1       	rjmp	.+832    	; 0x3846 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    3506:	89 ad       	ldd	r24, Y+57	; 0x39
    3508:	9a ad       	ldd	r25, Y+58	; 0x3a
    350a:	9c 01       	movw	r18, r24
    350c:	2f 5f       	subi	r18, 0xFF	; 255
    350e:	3f 4f       	sbci	r19, 0xFF	; 255
    3510:	29 af       	std	Y+57, r18	; 0x39
    3512:	3a af       	std	Y+58, r19	; 0x3a
    3514:	fc 01       	movw	r30, r24
    3516:	80 81       	ld	r24, Z
    3518:	8d 8b       	std	Y+21, r24	; 0x15
    351a:	8d 89       	ldd	r24, Y+21	; 0x15
    351c:	88 2f       	mov	r24, r24
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	85 36       	cpi	r24, 0x65	; 101
    3522:	91 05       	cpc	r25, r1
    3524:	09 f4       	brne	.+2      	; 0x3528 <display_vprintf+0x98>
    3526:	46 c1       	rjmp	.+652    	; 0x37b4 <display_vprintf+0x324>
    3528:	86 36       	cpi	r24, 0x66	; 102
    352a:	91 05       	cpc	r25, r1
    352c:	54 f4       	brge	.+20     	; 0x3542 <display_vprintf+0xb2>
    352e:	83 36       	cpi	r24, 0x63	; 99
    3530:	91 05       	cpc	r25, r1
    3532:	01 f1       	breq	.+64     	; 0x3574 <display_vprintf+0xe4>
    3534:	84 36       	cpi	r24, 0x64	; 100
    3536:	91 05       	cpc	r25, r1
    3538:	0c f0       	brlt	.+2      	; 0x353c <display_vprintf+0xac>
    353a:	70 c0       	rjmp	.+224    	; 0x361c <display_vprintf+0x18c>
    353c:	85 97       	sbiw	r24, 0x25	; 37
    353e:	69 f0       	breq	.+26     	; 0x355a <display_vprintf+0xca>
    3540:	9c c1       	rjmp	.+824    	; 0x387a <display_vprintf+0x3ea>
    3542:	83 37       	cpi	r24, 0x73	; 115
    3544:	91 05       	cpc	r25, r1
    3546:	71 f1       	breq	.+92     	; 0x35a4 <display_vprintf+0x114>
    3548:	88 37       	cpi	r24, 0x78	; 120
    354a:	91 05       	cpc	r25, r1
    354c:	09 f4       	brne	.+2      	; 0x3550 <display_vprintf+0xc0>
    354e:	a8 c0       	rjmp	.+336    	; 0x36a0 <display_vprintf+0x210>
    3550:	86 36       	cpi	r24, 0x66	; 102
    3552:	91 05       	cpc	r25, r1
    3554:	09 f4       	brne	.+2      	; 0x3558 <display_vprintf+0xc8>
    3556:	e6 c0       	rjmp	.+460    	; 0x3724 <display_vprintf+0x294>
    3558:	90 c1       	rjmp	.+800    	; 0x387a <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	9a 81       	ldd	r25, Y+2	; 0x02
    355e:	80 53       	subi	r24, 0x30	; 48
    3560:	93 4d       	sbci	r25, 0xD3	; 211
    3562:	25 e2       	ldi	r18, 0x25	; 37
    3564:	fc 01       	movw	r30, r24
    3566:	20 83       	st	Z, r18
				length++;
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	9a 81       	ldd	r25, Y+2	; 0x02
    356c:	01 96       	adiw	r24, 0x01	; 1
    356e:	89 83       	std	Y+1, r24	; 0x01
    3570:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3572:	83 c1       	rjmp	.+774    	; 0x387a <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    3574:	8b ad       	ldd	r24, Y+59	; 0x3b
    3576:	9c ad       	ldd	r25, Y+60	; 0x3c
    3578:	9c 01       	movw	r18, r24
    357a:	2e 5f       	subi	r18, 0xFE	; 254
    357c:	3f 4f       	sbci	r19, 0xFF	; 255
    357e:	2b af       	std	Y+59, r18	; 0x3b
    3580:	3c af       	std	Y+60, r19	; 0x3c
    3582:	fc 01       	movw	r30, r24
    3584:	80 81       	ld	r24, Z
    3586:	91 81       	ldd	r25, Z+1	; 0x01
    3588:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	80 53       	subi	r24, 0x30	; 48
    3590:	93 4d       	sbci	r25, 0xD3	; 211
    3592:	2e 89       	ldd	r18, Y+22	; 0x16
    3594:	fc 01       	movw	r30, r24
    3596:	20 83       	st	Z, r18
				length++;
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	9a 81       	ldd	r25, Y+2	; 0x02
    359c:	01 96       	adiw	r24, 0x01	; 1
    359e:	89 83       	std	Y+1, r24	; 0x01
    35a0:	9a 83       	std	Y+2, r25	; 0x02
				break;
    35a2:	6b c1       	rjmp	.+726    	; 0x387a <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    35a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    35a6:	9c ad       	ldd	r25, Y+60	; 0x3c
    35a8:	9c 01       	movw	r18, r24
    35aa:	2e 5f       	subi	r18, 0xFE	; 254
    35ac:	3f 4f       	sbci	r19, 0xFF	; 255
    35ae:	2b af       	std	Y+59, r18	; 0x3b
    35b0:	3c af       	std	Y+60, r19	; 0x3c
    35b2:	fc 01       	movw	r30, r24
    35b4:	80 81       	ld	r24, Z
    35b6:	91 81       	ldd	r25, Z+1	; 0x01
    35b8:	8f 8b       	std	Y+23, r24	; 0x17
    35ba:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    35bc:	1f 82       	std	Y+7, r1	; 0x07
    35be:	18 86       	std	Y+8, r1	; 0x08
    35c0:	17 c0       	rjmp	.+46     	; 0x35f0 <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    35c2:	29 81       	ldd	r18, Y+1	; 0x01
    35c4:	3a 81       	ldd	r19, Y+2	; 0x02
    35c6:	8f 81       	ldd	r24, Y+7	; 0x07
    35c8:	98 85       	ldd	r25, Y+8	; 0x08
    35ca:	82 0f       	add	r24, r18
    35cc:	93 1f       	adc	r25, r19
    35ce:	2f 81       	ldd	r18, Y+7	; 0x07
    35d0:	38 85       	ldd	r19, Y+8	; 0x08
    35d2:	4f 89       	ldd	r20, Y+23	; 0x17
    35d4:	58 8d       	ldd	r21, Y+24	; 0x18
    35d6:	24 0f       	add	r18, r20
    35d8:	35 1f       	adc	r19, r21
    35da:	f9 01       	movw	r30, r18
    35dc:	20 81       	ld	r18, Z
    35de:	80 53       	subi	r24, 0x30	; 48
    35e0:	93 4d       	sbci	r25, 0xD3	; 211
    35e2:	fc 01       	movw	r30, r24
    35e4:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    35e6:	8f 81       	ldd	r24, Y+7	; 0x07
    35e8:	98 85       	ldd	r25, Y+8	; 0x08
    35ea:	01 96       	adiw	r24, 0x01	; 1
    35ec:	8f 83       	std	Y+7, r24	; 0x07
    35ee:	98 87       	std	Y+8, r25	; 0x08
    35f0:	8f 89       	ldd	r24, Y+23	; 0x17
    35f2:	98 8d       	ldd	r25, Y+24	; 0x18
    35f4:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <strlen>
    35f8:	9c 01       	movw	r18, r24
    35fa:	8f 81       	ldd	r24, Y+7	; 0x07
    35fc:	98 85       	ldd	r25, Y+8	; 0x08
    35fe:	82 17       	cp	r24, r18
    3600:	93 07       	cpc	r25, r19
    3602:	f8 f2       	brcs	.-66     	; 0x35c2 <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    3604:	8f 89       	ldd	r24, Y+23	; 0x17
    3606:	98 8d       	ldd	r25, Y+24	; 0x18
    3608:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <strlen>
    360c:	9c 01       	movw	r18, r24
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	9a 81       	ldd	r25, Y+2	; 0x02
    3612:	82 0f       	add	r24, r18
    3614:	93 1f       	adc	r25, r19
    3616:	89 83       	std	Y+1, r24	; 0x01
    3618:	9a 83       	std	Y+2, r25	; 0x02
				break;
    361a:	2f c1       	rjmp	.+606    	; 0x387a <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    361c:	8b ad       	ldd	r24, Y+59	; 0x3b
    361e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3620:	9c 01       	movw	r18, r24
    3622:	2e 5f       	subi	r18, 0xFE	; 254
    3624:	3f 4f       	sbci	r19, 0xFF	; 255
    3626:	2b af       	std	Y+59, r18	; 0x3b
    3628:	3c af       	std	Y+60, r19	; 0x3c
    362a:	fc 01       	movw	r30, r24
    362c:	80 81       	ld	r24, Z
    362e:	91 81       	ldd	r25, Z+1	; 0x01
    3630:	89 8f       	std	Y+25, r24	; 0x19
    3632:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    3634:	89 8d       	ldd	r24, Y+25	; 0x19
    3636:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3638:	4a e0       	ldi	r20, 0x0A	; 10
    363a:	50 e0       	ldi	r21, 0x00	; 0
    363c:	6c eb       	ldi	r22, 0xBC	; 188
    363e:	7c e2       	ldi	r23, 0x2C	; 44
    3640:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    3644:	19 86       	std	Y+9, r1	; 0x09
    3646:	1a 86       	std	Y+10, r1	; 0x0a
    3648:	15 c0       	rjmp	.+42     	; 0x3674 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    364a:	29 81       	ldd	r18, Y+1	; 0x01
    364c:	3a 81       	ldd	r19, Y+2	; 0x02
    364e:	89 85       	ldd	r24, Y+9	; 0x09
    3650:	9a 85       	ldd	r25, Y+10	; 0x0a
    3652:	82 0f       	add	r24, r18
    3654:	93 1f       	adc	r25, r19
    3656:	29 85       	ldd	r18, Y+9	; 0x09
    3658:	3a 85       	ldd	r19, Y+10	; 0x0a
    365a:	24 54       	subi	r18, 0x44	; 68
    365c:	33 4d       	sbci	r19, 0xD3	; 211
    365e:	f9 01       	movw	r30, r18
    3660:	20 81       	ld	r18, Z
    3662:	80 53       	subi	r24, 0x30	; 48
    3664:	93 4d       	sbci	r25, 0xD3	; 211
    3666:	fc 01       	movw	r30, r24
    3668:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    366a:	89 85       	ldd	r24, Y+9	; 0x09
    366c:	9a 85       	ldd	r25, Y+10	; 0x0a
    366e:	01 96       	adiw	r24, 0x01	; 1
    3670:	89 87       	std	Y+9, r24	; 0x09
    3672:	9a 87       	std	Y+10, r25	; 0x0a
    3674:	8c eb       	ldi	r24, 0xBC	; 188
    3676:	9c e2       	ldi	r25, 0x2C	; 44
    3678:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <strlen>
    367c:	9c 01       	movw	r18, r24
    367e:	89 85       	ldd	r24, Y+9	; 0x09
    3680:	9a 85       	ldd	r25, Y+10	; 0x0a
    3682:	82 17       	cp	r24, r18
    3684:	93 07       	cpc	r25, r19
    3686:	08 f3       	brcs	.-62     	; 0x364a <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    3688:	8c eb       	ldi	r24, 0xBC	; 188
    368a:	9c e2       	ldi	r25, 0x2C	; 44
    368c:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <strlen>
    3690:	9c 01       	movw	r18, r24
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	9a 81       	ldd	r25, Y+2	; 0x02
    3696:	82 0f       	add	r24, r18
    3698:	93 1f       	adc	r25, r19
    369a:	89 83       	std	Y+1, r24	; 0x01
    369c:	9a 83       	std	Y+2, r25	; 0x02
				break;
    369e:	ed c0       	rjmp	.+474    	; 0x387a <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    36a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    36a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    36a4:	9c 01       	movw	r18, r24
    36a6:	2e 5f       	subi	r18, 0xFE	; 254
    36a8:	3f 4f       	sbci	r19, 0xFF	; 255
    36aa:	2b af       	std	Y+59, r18	; 0x3b
    36ac:	3c af       	std	Y+60, r19	; 0x3c
    36ae:	fc 01       	movw	r30, r24
    36b0:	80 81       	ld	r24, Z
    36b2:	91 81       	ldd	r25, Z+1	; 0x01
    36b4:	89 8f       	std	Y+25, r24	; 0x19
    36b6:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    36b8:	89 8d       	ldd	r24, Y+25	; 0x19
    36ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    36bc:	40 e1       	ldi	r20, 0x10	; 16
    36be:	50 e0       	ldi	r21, 0x00	; 0
    36c0:	6c eb       	ldi	r22, 0xBC	; 188
    36c2:	7c e2       	ldi	r23, 0x2C	; 44
    36c4:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    36c8:	1b 86       	std	Y+11, r1	; 0x0b
    36ca:	1c 86       	std	Y+12, r1	; 0x0c
    36cc:	15 c0       	rjmp	.+42     	; 0x36f8 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    36ce:	29 81       	ldd	r18, Y+1	; 0x01
    36d0:	3a 81       	ldd	r19, Y+2	; 0x02
    36d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    36d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    36d6:	82 0f       	add	r24, r18
    36d8:	93 1f       	adc	r25, r19
    36da:	2b 85       	ldd	r18, Y+11	; 0x0b
    36dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    36de:	24 54       	subi	r18, 0x44	; 68
    36e0:	33 4d       	sbci	r19, 0xD3	; 211
    36e2:	f9 01       	movw	r30, r18
    36e4:	20 81       	ld	r18, Z
    36e6:	80 53       	subi	r24, 0x30	; 48
    36e8:	93 4d       	sbci	r25, 0xD3	; 211
    36ea:	fc 01       	movw	r30, r24
    36ec:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    36ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    36f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    36f2:	01 96       	adiw	r24, 0x01	; 1
    36f4:	8b 87       	std	Y+11, r24	; 0x0b
    36f6:	9c 87       	std	Y+12, r25	; 0x0c
    36f8:	8c eb       	ldi	r24, 0xBC	; 188
    36fa:	9c e2       	ldi	r25, 0x2C	; 44
    36fc:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <strlen>
    3700:	9c 01       	movw	r18, r24
    3702:	8b 85       	ldd	r24, Y+11	; 0x0b
    3704:	9c 85       	ldd	r25, Y+12	; 0x0c
    3706:	82 17       	cp	r24, r18
    3708:	93 07       	cpc	r25, r19
    370a:	08 f3       	brcs	.-62     	; 0x36ce <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    370c:	8c eb       	ldi	r24, 0xBC	; 188
    370e:	9c e2       	ldi	r25, 0x2C	; 44
    3710:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <strlen>
    3714:	9c 01       	movw	r18, r24
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	9a 81       	ldd	r25, Y+2	; 0x02
    371a:	82 0f       	add	r24, r18
    371c:	93 1f       	adc	r25, r19
    371e:	89 83       	std	Y+1, r24	; 0x01
    3720:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3722:	ab c0       	rjmp	.+342    	; 0x387a <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    3724:	8b ad       	ldd	r24, Y+59	; 0x3b
    3726:	9c ad       	ldd	r25, Y+60	; 0x3c
    3728:	9c 01       	movw	r18, r24
    372a:	2c 5f       	subi	r18, 0xFC	; 252
    372c:	3f 4f       	sbci	r19, 0xFF	; 255
    372e:	2b af       	std	Y+59, r18	; 0x3b
    3730:	3c af       	std	Y+60, r19	; 0x3c
    3732:	fc 01       	movw	r30, r24
    3734:	80 81       	ld	r24, Z
    3736:	91 81       	ldd	r25, Z+1	; 0x01
    3738:	a2 81       	ldd	r26, Z+2	; 0x02
    373a:	b3 81       	ldd	r27, Z+3	; 0x03
    373c:	8b 8f       	std	Y+27, r24	; 0x1b
    373e:	9c 8f       	std	Y+28, r25	; 0x1c
    3740:	ad 8f       	std	Y+29, r26	; 0x1d
    3742:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    3744:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3746:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3748:	ad 8d       	ldd	r26, Y+29	; 0x1d
    374a:	be 8d       	ldd	r27, Y+30	; 0x1e
    374c:	ac 01       	movw	r20, r24
    374e:	bd 01       	movw	r22, r26
    3750:	8c eb       	ldi	r24, 0xBC	; 188
    3752:	9c e2       	ldi	r25, 0x2C	; 44
    3754:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    3758:	1d 86       	std	Y+13, r1	; 0x0d
    375a:	1e 86       	std	Y+14, r1	; 0x0e
    375c:	15 c0       	rjmp	.+42     	; 0x3788 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    375e:	29 81       	ldd	r18, Y+1	; 0x01
    3760:	3a 81       	ldd	r19, Y+2	; 0x02
    3762:	8d 85       	ldd	r24, Y+13	; 0x0d
    3764:	9e 85       	ldd	r25, Y+14	; 0x0e
    3766:	82 0f       	add	r24, r18
    3768:	93 1f       	adc	r25, r19
    376a:	2d 85       	ldd	r18, Y+13	; 0x0d
    376c:	3e 85       	ldd	r19, Y+14	; 0x0e
    376e:	24 54       	subi	r18, 0x44	; 68
    3770:	33 4d       	sbci	r19, 0xD3	; 211
    3772:	f9 01       	movw	r30, r18
    3774:	20 81       	ld	r18, Z
    3776:	80 53       	subi	r24, 0x30	; 48
    3778:	93 4d       	sbci	r25, 0xD3	; 211
    377a:	fc 01       	movw	r30, r24
    377c:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    377e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3780:	9e 85       	ldd	r25, Y+14	; 0x0e
    3782:	01 96       	adiw	r24, 0x01	; 1
    3784:	8d 87       	std	Y+13, r24	; 0x0d
    3786:	9e 87       	std	Y+14, r25	; 0x0e
    3788:	8c eb       	ldi	r24, 0xBC	; 188
    378a:	9c e2       	ldi	r25, 0x2C	; 44
    378c:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <strlen>
    3790:	9c 01       	movw	r18, r24
    3792:	8d 85       	ldd	r24, Y+13	; 0x0d
    3794:	9e 85       	ldd	r25, Y+14	; 0x0e
    3796:	82 17       	cp	r24, r18
    3798:	93 07       	cpc	r25, r19
    379a:	08 f3       	brcs	.-62     	; 0x375e <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    379c:	8c eb       	ldi	r24, 0xBC	; 188
    379e:	9c e2       	ldi	r25, 0x2C	; 44
    37a0:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <strlen>
    37a4:	9c 01       	movw	r18, r24
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	9a 81       	ldd	r25, Y+2	; 0x02
    37aa:	82 0f       	add	r24, r18
    37ac:	93 1f       	adc	r25, r19
    37ae:	89 83       	std	Y+1, r24	; 0x01
    37b0:	9a 83       	std	Y+2, r25	; 0x02
				break;
    37b2:	63 c0       	rjmp	.+198    	; 0x387a <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    37b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    37b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    37b8:	9c 01       	movw	r18, r24
    37ba:	2c 5f       	subi	r18, 0xFC	; 252
    37bc:	3f 4f       	sbci	r19, 0xFF	; 255
    37be:	2b af       	std	Y+59, r18	; 0x3b
    37c0:	3c af       	std	Y+60, r19	; 0x3c
    37c2:	fc 01       	movw	r30, r24
    37c4:	80 81       	ld	r24, Z
    37c6:	91 81       	ldd	r25, Z+1	; 0x01
    37c8:	a2 81       	ldd	r26, Z+2	; 0x02
    37ca:	b3 81       	ldd	r27, Z+3	; 0x03
    37cc:	8b 8f       	std	Y+27, r24	; 0x1b
    37ce:	9c 8f       	std	Y+28, r25	; 0x1c
    37d0:	ad 8f       	std	Y+29, r26	; 0x1d
    37d2:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    37d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37d8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    37da:	be 8d       	ldd	r27, Y+30	; 0x1e
    37dc:	ac 01       	movw	r20, r24
    37de:	bd 01       	movw	r22, r26
    37e0:	8c eb       	ldi	r24, 0xBC	; 188
    37e2:	9c e2       	ldi	r25, 0x2C	; 44
    37e4:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    37e8:	1f 86       	std	Y+15, r1	; 0x0f
    37ea:	18 8a       	std	Y+16, r1	; 0x10
    37ec:	15 c0       	rjmp	.+42     	; 0x3818 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    37ee:	29 81       	ldd	r18, Y+1	; 0x01
    37f0:	3a 81       	ldd	r19, Y+2	; 0x02
    37f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f4:	98 89       	ldd	r25, Y+16	; 0x10
    37f6:	82 0f       	add	r24, r18
    37f8:	93 1f       	adc	r25, r19
    37fa:	2f 85       	ldd	r18, Y+15	; 0x0f
    37fc:	38 89       	ldd	r19, Y+16	; 0x10
    37fe:	24 54       	subi	r18, 0x44	; 68
    3800:	33 4d       	sbci	r19, 0xD3	; 211
    3802:	f9 01       	movw	r30, r18
    3804:	20 81       	ld	r18, Z
    3806:	80 53       	subi	r24, 0x30	; 48
    3808:	93 4d       	sbci	r25, 0xD3	; 211
    380a:	fc 01       	movw	r30, r24
    380c:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    380e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3810:	98 89       	ldd	r25, Y+16	; 0x10
    3812:	01 96       	adiw	r24, 0x01	; 1
    3814:	8f 87       	std	Y+15, r24	; 0x0f
    3816:	98 8b       	std	Y+16, r25	; 0x10
    3818:	8c eb       	ldi	r24, 0xBC	; 188
    381a:	9c e2       	ldi	r25, 0x2C	; 44
    381c:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <strlen>
    3820:	9c 01       	movw	r18, r24
    3822:	8f 85       	ldd	r24, Y+15	; 0x0f
    3824:	98 89       	ldd	r25, Y+16	; 0x10
    3826:	82 17       	cp	r24, r18
    3828:	93 07       	cpc	r25, r19
    382a:	08 f3       	brcs	.-62     	; 0x37ee <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    382c:	8c eb       	ldi	r24, 0xBC	; 188
    382e:	9c e2       	ldi	r25, 0x2C	; 44
    3830:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <strlen>
    3834:	9c 01       	movw	r18, r24
    3836:	89 81       	ldd	r24, Y+1	; 0x01
    3838:	9a 81       	ldd	r25, Y+2	; 0x02
    383a:	82 0f       	add	r24, r18
    383c:	93 1f       	adc	r25, r19
    383e:	89 83       	std	Y+1, r24	; 0x01
    3840:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3842:	00 00       	nop
    3844:	1a c0       	rjmp	.+52     	; 0x387a <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	9a 81       	ldd	r25, Y+2	; 0x02
    384a:	80 53       	subi	r24, 0x30	; 48
    384c:	93 4d       	sbci	r25, 0xD3	; 211
    384e:	2d 89       	ldd	r18, Y+21	; 0x15
    3850:	fc 01       	movw	r30, r24
    3852:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    3854:	89 81       	ldd	r24, Y+1	; 0x01
    3856:	9a 81       	ldd	r25, Y+2	; 0x02
    3858:	80 53       	subi	r24, 0x30	; 48
    385a:	93 4d       	sbci	r25, 0xD3	; 211
    385c:	fc 01       	movw	r30, r24
    385e:	80 81       	ld	r24, Z
    3860:	8a 30       	cpi	r24, 0x0A	; 10
    3862:	31 f4       	brne	.+12     	; 0x3870 <display_vprintf+0x3e0>
				str[length] = '\0';				
    3864:	89 81       	ldd	r24, Y+1	; 0x01
    3866:	9a 81       	ldd	r25, Y+2	; 0x02
    3868:	80 53       	subi	r24, 0x30	; 48
    386a:	93 4d       	sbci	r25, 0xD3	; 211
    386c:	fc 01       	movw	r30, r24
    386e:	10 82       	st	Z, r1
			}
			length++;
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	9a 81       	ldd	r25, Y+2	; 0x02
    3874:	01 96       	adiw	r24, 0x01	; 1
    3876:	89 83       	std	Y+1, r24	; 0x01
    3878:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    387a:	89 ad       	ldd	r24, Y+57	; 0x39
    387c:	9a ad       	ldd	r25, Y+58	; 0x3a
    387e:	9c 01       	movw	r18, r24
    3880:	2f 5f       	subi	r18, 0xFF	; 255
    3882:	3f 4f       	sbci	r19, 0xFF	; 255
    3884:	29 af       	std	Y+57, r18	; 0x39
    3886:	3a af       	std	Y+58, r19	; 0x3a
    3888:	fc 01       	movw	r30, r24
    388a:	80 81       	ld	r24, Z
    388c:	8d 8b       	std	Y+21, r24	; 0x15
    388e:	8d 89       	ldd	r24, Y+21	; 0x15
    3890:	88 23       	and	r24, r24
    3892:	09 f0       	breq	.+2      	; 0x3896 <display_vprintf+0x406>
    3894:	34 ce       	rjmp	.-920    	; 0x34fe <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    3896:	29 81       	ldd	r18, Y+1	; 0x01
    3898:	3a 81       	ldd	r19, Y+2	; 0x02
    389a:	8f a9       	ldd	r24, Y+55	; 0x37
    389c:	98 ad       	ldd	r25, Y+56	; 0x38
    389e:	82 0f       	add	r24, r18
    38a0:	93 1f       	adc	r25, r19
    38a2:	44 97       	sbiw	r24, 0x14	; 20
    38a4:	54 f0       	brlt	.+20     	; 0x38ba <display_vprintf+0x42a>
		length = 20-pos;
    38a6:	24 e1       	ldi	r18, 0x14	; 20
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	8f a9       	ldd	r24, Y+55	; 0x37
    38ac:	98 ad       	ldd	r25, Y+56	; 0x38
    38ae:	a9 01       	movw	r20, r18
    38b0:	48 1b       	sub	r20, r24
    38b2:	59 0b       	sbc	r21, r25
    38b4:	ca 01       	movw	r24, r20
    38b6:	89 83       	std	Y+1, r24	; 0x01
    38b8:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    38ba:	19 8a       	std	Y+17, r1	; 0x11
    38bc:	1a 8a       	std	Y+18, r1	; 0x12
    38be:	0e c0       	rjmp	.+28     	; 0x38dc <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    38c0:	9e 01       	movw	r18, r28
    38c2:	2f 5d       	subi	r18, 0xDF	; 223
    38c4:	3f 4f       	sbci	r19, 0xFF	; 255
    38c6:	89 89       	ldd	r24, Y+17	; 0x11
    38c8:	9a 89       	ldd	r25, Y+18	; 0x12
    38ca:	82 0f       	add	r24, r18
    38cc:	93 1f       	adc	r25, r19
    38ce:	fc 01       	movw	r30, r24
    38d0:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    38d2:	89 89       	ldd	r24, Y+17	; 0x11
    38d4:	9a 89       	ldd	r25, Y+18	; 0x12
    38d6:	01 96       	adiw	r24, 0x01	; 1
    38d8:	89 8b       	std	Y+17, r24	; 0x11
    38da:	9a 8b       	std	Y+18, r25	; 0x12
    38dc:	89 89       	ldd	r24, Y+17	; 0x11
    38de:	9a 89       	ldd	r25, Y+18	; 0x12
    38e0:	44 97       	sbiw	r24, 0x14	; 20
    38e2:	74 f3       	brlt	.-36     	; 0x38c0 <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    38e4:	8d a9       	ldd	r24, Y+53	; 0x35
    38e6:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    38e8:	8f a9       	ldd	r24, Y+55	; 0x37
    38ea:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    38ec:	1b 8a       	std	Y+19, r1	; 0x13
    38ee:	1c 8a       	std	Y+20, r1	; 0x14
    38f0:	14 c0       	rjmp	.+40     	; 0x391a <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    38f2:	8b 89       	ldd	r24, Y+19	; 0x13
    38f4:	9c 89       	ldd	r25, Y+20	; 0x14
    38f6:	80 53       	subi	r24, 0x30	; 48
    38f8:	93 4d       	sbci	r25, 0xD3	; 211
    38fa:	fc 01       	movw	r30, r24
    38fc:	40 81       	ld	r20, Z
    38fe:	9e 01       	movw	r18, r28
    3900:	2f 5d       	subi	r18, 0xDF	; 223
    3902:	3f 4f       	sbci	r19, 0xFF	; 255
    3904:	8b 89       	ldd	r24, Y+19	; 0x13
    3906:	9c 89       	ldd	r25, Y+20	; 0x14
    3908:	82 0f       	add	r24, r18
    390a:	93 1f       	adc	r25, r19
    390c:	fc 01       	movw	r30, r24
    390e:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    3910:	8b 89       	ldd	r24, Y+19	; 0x13
    3912:	9c 89       	ldd	r25, Y+20	; 0x14
    3914:	01 96       	adiw	r24, 0x01	; 1
    3916:	8b 8b       	std	Y+19, r24	; 0x13
    3918:	9c 8b       	std	Y+20, r25	; 0x14
    391a:	2b 89       	ldd	r18, Y+19	; 0x13
    391c:	3c 89       	ldd	r19, Y+20	; 0x14
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	9a 81       	ldd	r25, Y+2	; 0x02
    3922:	28 17       	cp	r18, r24
    3924:	39 07       	cpc	r19, r25
    3926:	2c f3       	brlt	.-54     	; 0x38f2 <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    3928:	80 91 f9 2c 	lds	r24, 0x2CF9	; 0x802cf9 <displayLineQueue>
    392c:	90 91 fa 2c 	lds	r25, 0x2CFA	; 0x802cfa <displayLineQueue+0x1>
    3930:	be 01       	movw	r22, r28
    3932:	61 5e       	subi	r22, 0xE1	; 225
    3934:	7f 4f       	sbci	r23, 0xFF	; 255
    3936:	00 e0       	ldi	r16, 0x00	; 0
    3938:	2f ef       	ldi	r18, 0xFF	; 255
    393a:	3f ef       	ldi	r19, 0xFF	; 255
    393c:	a9 01       	movw	r20, r18
    393e:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
	
	
	return length;
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3946:	ec 96       	adiw	r28, 0x3c	; 60
    3948:	cd bf       	out	0x3d, r28	; 61
    394a:	de bf       	out	0x3e, r29	; 62
    394c:	df 91       	pop	r29
    394e:	cf 91       	pop	r28
    3950:	0f 91       	pop	r16
    3952:	08 95       	ret

00003954 <normalize>:

static int normalize(double *val) {
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	28 97       	sbiw	r28, 0x08	; 8
    395e:	cd bf       	out	0x3d, r28	; 61
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	8f 83       	std	Y+7, r24	; 0x07
    3964:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    3966:	19 82       	std	Y+1, r1	; 0x01
    3968:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    396a:	8f 81       	ldd	r24, Y+7	; 0x07
    396c:	98 85       	ldd	r25, Y+8	; 0x08
    396e:	fc 01       	movw	r30, r24
    3970:	80 81       	ld	r24, Z
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	a2 81       	ldd	r26, Z+2	; 0x02
    3976:	b3 81       	ldd	r27, Z+3	; 0x03
    3978:	8b 83       	std	Y+3, r24	; 0x03
    397a:	9c 83       	std	Y+4, r25	; 0x04
    397c:	ad 83       	std	Y+5, r26	; 0x05
    397e:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    3980:	15 c0       	rjmp	.+42     	; 0x39ac <normalize+0x58>
        value /= 10.0;
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	40 e2       	ldi	r20, 0x20	; 32
    3988:	51 e4       	ldi	r21, 0x41	; 65
    398a:	6b 81       	ldd	r22, Y+3	; 0x03
    398c:	7c 81       	ldd	r23, Y+4	; 0x04
    398e:	8d 81       	ldd	r24, Y+5	; 0x05
    3990:	9e 81       	ldd	r25, Y+6	; 0x06
    3992:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <__divsf3>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	8b 83       	std	Y+3, r24	; 0x03
    399c:	9c 83       	std	Y+4, r25	; 0x04
    399e:	ad 83       	std	Y+5, r26	; 0x05
    39a0:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	9a 81       	ldd	r25, Y+2	; 0x02
    39a6:	01 96       	adiw	r24, 0x01	; 1
    39a8:	89 83       	std	Y+1, r24	; 0x01
    39aa:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	40 e8       	ldi	r20, 0x80	; 128
    39b2:	5f e3       	ldi	r21, 0x3F	; 63
    39b4:	6b 81       	ldd	r22, Y+3	; 0x03
    39b6:	7c 81       	ldd	r23, Y+4	; 0x04
    39b8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ba:	9e 81       	ldd	r25, Y+6	; 0x06
    39bc:	0e 94 53 21 	call	0x42a6	; 0x42a6 <__gesf2>
    39c0:	88 23       	and	r24, r24
    39c2:	fc f6       	brge	.-66     	; 0x3982 <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    39c4:	15 c0       	rjmp	.+42     	; 0x39f0 <normalize+0x9c>
        value *= 10.0;
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	40 e2       	ldi	r20, 0x20	; 32
    39cc:	51 e4       	ldi	r21, 0x41	; 65
    39ce:	6b 81       	ldd	r22, Y+3	; 0x03
    39d0:	7c 81       	ldd	r23, Y+4	; 0x04
    39d2:	8d 81       	ldd	r24, Y+5	; 0x05
    39d4:	9e 81       	ldd	r25, Y+6	; 0x06
    39d6:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__mulsf3>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	8b 83       	std	Y+3, r24	; 0x03
    39e0:	9c 83       	std	Y+4, r25	; 0x04
    39e2:	ad 83       	std	Y+5, r26	; 0x05
    39e4:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    39e6:	89 81       	ldd	r24, Y+1	; 0x01
    39e8:	9a 81       	ldd	r25, Y+2	; 0x02
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	89 83       	std	Y+1, r24	; 0x01
    39ee:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    39f0:	2d ec       	ldi	r18, 0xCD	; 205
    39f2:	3c ec       	ldi	r19, 0xCC	; 204
    39f4:	4c ec       	ldi	r20, 0xCC	; 204
    39f6:	5d e3       	ldi	r21, 0x3D	; 61
    39f8:	6b 81       	ldd	r22, Y+3	; 0x03
    39fa:	7c 81       	ldd	r23, Y+4	; 0x04
    39fc:	8d 81       	ldd	r24, Y+5	; 0x05
    39fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3a00:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <__cmpsf2>
    3a04:	88 23       	and	r24, r24
    3a06:	fc f2       	brlt	.-66     	; 0x39c6 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    3a08:	2f 81       	ldd	r18, Y+7	; 0x07
    3a0a:	38 85       	ldd	r19, Y+8	; 0x08
    3a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a10:	ad 81       	ldd	r26, Y+5	; 0x05
    3a12:	be 81       	ldd	r27, Y+6	; 0x06
    3a14:	f9 01       	movw	r30, r18
    3a16:	80 83       	st	Z, r24
    3a18:	91 83       	std	Z+1, r25	; 0x01
    3a1a:	a2 83       	std	Z+2, r26	; 0x02
    3a1c:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3a22:	28 96       	adiw	r28, 0x08	; 8
    3a24:	cd bf       	out	0x3d, r28	; 61
    3a26:	de bf       	out	0x3e, r29	; 62
    3a28:	df 91       	pop	r29
    3a2a:	cf 91       	pop	r28
    3a2c:	08 95       	ret

00003a2e <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    3a2e:	cf 92       	push	r12
    3a30:	df 92       	push	r13
    3a32:	ef 92       	push	r14
    3a34:	ff 92       	push	r15
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
    3a3a:	cd b7       	in	r28, 0x3d	; 61
    3a3c:	de b7       	in	r29, 0x3e	; 62
    3a3e:	2e 97       	sbiw	r28, 0x0e	; 14
    3a40:	cd bf       	out	0x3d, r28	; 61
    3a42:	de bf       	out	0x3e, r29	; 62
    3a44:	89 87       	std	Y+9, r24	; 0x09
    3a46:	9a 87       	std	Y+10, r25	; 0x0a
    3a48:	4b 87       	std	Y+11, r20	; 0x0b
    3a4a:	5c 87       	std	Y+12, r21	; 0x0c
    3a4c:	6d 87       	std	Y+13, r22	; 0x0d
    3a4e:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    3a50:	19 82       	std	Y+1, r1	; 0x01
    3a52:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    3a54:	1b 82       	std	Y+3, r1	; 0x03
    3a56:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    3a58:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a5c:	ad 85       	ldd	r26, Y+13	; 0x0d
    3a5e:	be 85       	ldd	r27, Y+14	; 0x0e
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	a9 01       	movw	r20, r18
    3a66:	bc 01       	movw	r22, r24
    3a68:	cd 01       	movw	r24, r26
    3a6a:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <__cmpsf2>
    3a6e:	88 23       	and	r24, r24
    3a70:	59 f4       	brne	.+22     	; 0x3a88 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    3a72:	89 85       	ldd	r24, Y+9	; 0x09
    3a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a76:	20 e3       	ldi	r18, 0x30	; 48
    3a78:	fc 01       	movw	r30, r24
    3a7a:	20 83       	st	Z, r18
        buffer[1] = '\0';
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a80:	01 96       	adiw	r24, 0x01	; 1
    3a82:	fc 01       	movw	r30, r24
    3a84:	10 82       	st	Z, r1
        return;
    3a86:	18 c1       	rjmp	.+560    	; 0x3cb8 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    3a88:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a8c:	ad 85       	ldd	r26, Y+13	; 0x0d
    3a8e:	be 85       	ldd	r27, Y+14	; 0x0e
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	a9 01       	movw	r20, r18
    3a96:	bc 01       	movw	r22, r24
    3a98:	cd 01       	movw	r24, r26
    3a9a:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <__cmpsf2>
    3a9e:	88 23       	and	r24, r24
    3aa0:	9c f4       	brge	.+38     	; 0x3ac8 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    3aa2:	89 85       	ldd	r24, Y+9	; 0x09
    3aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa6:	9c 01       	movw	r18, r24
    3aa8:	2f 5f       	subi	r18, 0xFF	; 255
    3aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    3aac:	29 87       	std	Y+9, r18	; 0x09
    3aae:	3a 87       	std	Y+10, r19	; 0x0a
    3ab0:	2d e2       	ldi	r18, 0x2D	; 45
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	20 83       	st	Z, r18
        value = -value;
    3ab6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ab8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3aba:	ad 85       	ldd	r26, Y+13	; 0x0d
    3abc:	be 85       	ldd	r27, Y+14	; 0x0e
    3abe:	b0 58       	subi	r27, 0x80	; 128
    3ac0:	8b 87       	std	Y+11, r24	; 0x0b
    3ac2:	9c 87       	std	Y+12, r25	; 0x0c
    3ac4:	ad 87       	std	Y+13, r26	; 0x0d
    3ac6:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    3ac8:	ce 01       	movw	r24, r28
    3aca:	0b 96       	adiw	r24, 0x0b	; 11
    3acc:	0e 94 aa 1c 	call	0x3954	; 0x3954 <normalize>
    3ad0:	89 83       	std	Y+1, r24	; 0x01
    3ad2:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    3ad4:	53 c0       	rjmp	.+166    	; 0x3b7c <ftoa_fixed+0x14e>
        int digit = value * 10;
    3ad6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ad8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ada:	ad 85       	ldd	r26, Y+13	; 0x0d
    3adc:	be 85       	ldd	r27, Y+14	; 0x0e
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e2       	ldi	r20, 0x20	; 32
    3ae4:	51 e4       	ldi	r21, 0x41	; 65
    3ae6:	bc 01       	movw	r22, r24
    3ae8:	cd 01       	movw	r24, r26
    3aea:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	bc 01       	movw	r22, r24
    3af4:	cd 01       	movw	r24, r26
    3af6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__fixsfsi>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	8d 83       	std	Y+5, r24	; 0x05
    3b00:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    3b02:	89 85       	ldd	r24, Y+9	; 0x09
    3b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b06:	9c 01       	movw	r18, r24
    3b08:	2f 5f       	subi	r18, 0xFF	; 255
    3b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0c:	29 87       	std	Y+9, r18	; 0x09
    3b0e:	3a 87       	std	Y+10, r19	; 0x0a
    3b10:	2d 81       	ldd	r18, Y+5	; 0x05
    3b12:	20 5d       	subi	r18, 0xD0	; 208
    3b14:	fc 01       	movw	r30, r24
    3b16:	20 83       	st	Z, r18
        value = value * 10 - digit;
    3b18:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b1c:	ad 85       	ldd	r26, Y+13	; 0x0d
    3b1e:	be 85       	ldd	r27, Y+14	; 0x0e
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 e2       	ldi	r20, 0x20	; 32
    3b26:	51 e4       	ldi	r21, 0x41	; 65
    3b28:	bc 01       	movw	r22, r24
    3b2a:	cd 01       	movw	r24, r26
    3b2c:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__mulsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	6c 01       	movw	r12, r24
    3b36:	7d 01       	movw	r14, r26
    3b38:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b3c:	09 2e       	mov	r0, r25
    3b3e:	00 0c       	add	r0, r0
    3b40:	aa 0b       	sbc	r26, r26
    3b42:	bb 0b       	sbc	r27, r27
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	0e 94 a3 20 	call	0x4146	; 0x4146 <__floatsisf>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	9c 01       	movw	r18, r24
    3b52:	ad 01       	movw	r20, r26
    3b54:	c7 01       	movw	r24, r14
    3b56:	b6 01       	movw	r22, r12
    3b58:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <__subsf3>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	8b 87       	std	Y+11, r24	; 0x0b
    3b62:	9c 87       	std	Y+12, r25	; 0x0c
    3b64:	ad 87       	std	Y+13, r26	; 0x0d
    3b66:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    3b68:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6c:	01 96       	adiw	r24, 0x01	; 1
    3b6e:	8b 83       	std	Y+3, r24	; 0x03
    3b70:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	9a 81       	ldd	r25, Y+2	; 0x02
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	89 83       	std	Y+1, r24	; 0x01
    3b7a:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b80:	18 16       	cp	r1, r24
    3b82:	19 06       	cpc	r1, r25
    3b84:	0c f4       	brge	.+2      	; 0x3b88 <ftoa_fixed+0x15a>
    3b86:	a7 cf       	rjmp	.-178    	; 0x3ad6 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    3b88:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b8c:	89 2b       	or	r24, r25
    3b8e:	51 f4       	brne	.+20     	; 0x3ba4 <ftoa_fixed+0x176>
        *buffer++ = '0';
    3b90:	89 85       	ldd	r24, Y+9	; 0x09
    3b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b94:	9c 01       	movw	r18, r24
    3b96:	2f 5f       	subi	r18, 0xFF	; 255
    3b98:	3f 4f       	sbci	r19, 0xFF	; 255
    3b9a:	29 87       	std	Y+9, r18	; 0x09
    3b9c:	3a 87       	std	Y+10, r19	; 0x0a
    3b9e:	20 e3       	ldi	r18, 0x30	; 48
    3ba0:	fc 01       	movw	r30, r24
    3ba2:	20 83       	st	Z, r18

    *buffer++ = '.';
    3ba4:	89 85       	ldd	r24, Y+9	; 0x09
    3ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba8:	9c 01       	movw	r18, r24
    3baa:	2f 5f       	subi	r18, 0xFF	; 255
    3bac:	3f 4f       	sbci	r19, 0xFF	; 255
    3bae:	29 87       	std	Y+9, r18	; 0x09
    3bb0:	3a 87       	std	Y+10, r19	; 0x0a
    3bb2:	2e e2       	ldi	r18, 0x2E	; 46
    3bb4:	fc 01       	movw	r30, r24
    3bb6:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    3bb8:	14 c0       	rjmp	.+40     	; 0x3be2 <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    3bba:	89 85       	ldd	r24, Y+9	; 0x09
    3bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bbe:	9c 01       	movw	r18, r24
    3bc0:	2f 5f       	subi	r18, 0xFF	; 255
    3bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc4:	29 87       	std	Y+9, r18	; 0x09
    3bc6:	3a 87       	std	Y+10, r19	; 0x0a
    3bc8:	20 e3       	ldi	r18, 0x30	; 48
    3bca:	fc 01       	movw	r30, r24
    3bcc:	20 83       	st	Z, r18
        --exponent;
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd2:	01 97       	sbiw	r24, 0x01	; 1
    3bd4:	89 83       	std	Y+1, r24	; 0x01
    3bd6:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    3bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bda:	9c 81       	ldd	r25, Y+4	; 0x04
    3bdc:	01 96       	adiw	r24, 0x01	; 1
    3bde:	8b 83       	std	Y+3, r24	; 0x03
    3be0:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
    3be4:	9a 81       	ldd	r25, Y+2	; 0x02
    3be6:	99 23       	and	r25, r25
    3be8:	0c f0       	brlt	.+2      	; 0x3bec <ftoa_fixed+0x1be>
    3bea:	58 c0       	rjmp	.+176    	; 0x3c9c <ftoa_fixed+0x26e>
    3bec:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <width.5062>
    3bf0:	90 91 64 20 	lds	r25, 0x2064	; 0x802064 <width.5062+0x1>
    3bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    3bf6:	3c 81       	ldd	r19, Y+4	; 0x04
    3bf8:	28 17       	cp	r18, r24
    3bfa:	39 07       	cpc	r19, r25
    3bfc:	f4 f2       	brlt	.-68     	; 0x3bba <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    3bfe:	4e c0       	rjmp	.+156    	; 0x3c9c <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    3c00:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c02:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c04:	ad 85       	ldd	r26, Y+13	; 0x0d
    3c06:	be 85       	ldd	r27, Y+14	; 0x0e
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	40 e2       	ldi	r20, 0x20	; 32
    3c0e:	51 e4       	ldi	r21, 0x41	; 65
    3c10:	bc 01       	movw	r22, r24
    3c12:	cd 01       	movw	r24, r26
    3c14:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__mulsf3>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	bc 01       	movw	r22, r24
    3c1e:	cd 01       	movw	r24, r26
    3c20:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__fixsfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	8f 83       	std	Y+7, r24	; 0x07
    3c2a:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    3c2c:	89 85       	ldd	r24, Y+9	; 0x09
    3c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c30:	9c 01       	movw	r18, r24
    3c32:	2f 5f       	subi	r18, 0xFF	; 255
    3c34:	3f 4f       	sbci	r19, 0xFF	; 255
    3c36:	29 87       	std	Y+9, r18	; 0x09
    3c38:	3a 87       	std	Y+10, r19	; 0x0a
    3c3a:	2f 81       	ldd	r18, Y+7	; 0x07
    3c3c:	20 5d       	subi	r18, 0xD0	; 208
    3c3e:	fc 01       	movw	r30, r24
    3c40:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    3c42:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c44:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c46:	ad 85       	ldd	r26, Y+13	; 0x0d
    3c48:	be 85       	ldd	r27, Y+14	; 0x0e
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	40 e2       	ldi	r20, 0x20	; 32
    3c50:	51 e4       	ldi	r21, 0x41	; 65
    3c52:	bc 01       	movw	r22, r24
    3c54:	cd 01       	movw	r24, r26
    3c56:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__mulsf3>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	6c 01       	movw	r12, r24
    3c60:	7d 01       	movw	r14, r26
    3c62:	8f 81       	ldd	r24, Y+7	; 0x07
    3c64:	98 85       	ldd	r25, Y+8	; 0x08
    3c66:	09 2e       	mov	r0, r25
    3c68:	00 0c       	add	r0, r0
    3c6a:	aa 0b       	sbc	r26, r26
    3c6c:	bb 0b       	sbc	r27, r27
    3c6e:	bc 01       	movw	r22, r24
    3c70:	cd 01       	movw	r24, r26
    3c72:	0e 94 a3 20 	call	0x4146	; 0x4146 <__floatsisf>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	9c 01       	movw	r18, r24
    3c7c:	ad 01       	movw	r20, r26
    3c7e:	c7 01       	movw	r24, r14
    3c80:	b6 01       	movw	r22, r12
    3c82:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <__subsf3>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	8b 87       	std	Y+11, r24	; 0x0b
    3c8c:	9c 87       	std	Y+12, r25	; 0x0c
    3c8e:	ad 87       	std	Y+13, r26	; 0x0d
    3c90:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    3c92:	8b 81       	ldd	r24, Y+3	; 0x03
    3c94:	9c 81       	ldd	r25, Y+4	; 0x04
    3c96:	01 96       	adiw	r24, 0x01	; 1
    3c98:	8b 83       	std	Y+3, r24	; 0x03
    3c9a:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    3c9c:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <width.5062>
    3ca0:	90 91 64 20 	lds	r25, 0x2064	; 0x802064 <width.5062+0x1>
    3ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    3ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    3ca8:	28 17       	cp	r18, r24
    3caa:	39 07       	cpc	r19, r25
    3cac:	0c f4       	brge	.+2      	; 0x3cb0 <ftoa_fixed+0x282>
    3cae:	a8 cf       	rjmp	.-176    	; 0x3c00 <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    3cb0:	89 85       	ldd	r24, Y+9	; 0x09
    3cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	10 82       	st	Z, r1
}
    3cb8:	2e 96       	adiw	r28, 0x0e	; 14
    3cba:	cd bf       	out	0x3d, r28	; 61
    3cbc:	de bf       	out	0x3e, r29	; 62
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	ff 90       	pop	r15
    3cc4:	ef 90       	pop	r14
    3cc6:	df 90       	pop	r13
    3cc8:	cf 90       	pop	r12
    3cca:	08 95       	ret

00003ccc <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    3ccc:	cf 92       	push	r12
    3cce:	df 92       	push	r13
    3cd0:	ef 92       	push	r14
    3cd2:	ff 92       	push	r15
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
    3cdc:	2e 97       	sbiw	r28, 0x0e	; 14
    3cde:	cd bf       	out	0x3d, r28	; 61
    3ce0:	de bf       	out	0x3e, r29	; 62
    3ce2:	89 87       	std	Y+9, r24	; 0x09
    3ce4:	9a 87       	std	Y+10, r25	; 0x0a
    3ce6:	4b 87       	std	Y+11, r20	; 0x0b
    3ce8:	5c 87       	std	Y+12, r21	; 0x0c
    3cea:	6d 87       	std	Y+13, r22	; 0x0d
    3cec:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    3cee:	1b 82       	std	Y+3, r1	; 0x03
    3cf0:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    3cf2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3cf4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cf6:	ad 85       	ldd	r26, Y+13	; 0x0d
    3cf8:	be 85       	ldd	r27, Y+14	; 0x0e
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	a9 01       	movw	r20, r18
    3d00:	bc 01       	movw	r22, r24
    3d02:	cd 01       	movw	r24, r26
    3d04:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <__cmpsf2>
    3d08:	88 23       	and	r24, r24
    3d0a:	59 f4       	brne	.+22     	; 0x3d22 <ftoa_sci+0x56>
        buffer[0] = '0';
    3d0c:	89 85       	ldd	r24, Y+9	; 0x09
    3d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d10:	20 e3       	ldi	r18, 0x30	; 48
    3d12:	fc 01       	movw	r30, r24
    3d14:	20 83       	st	Z, r18
        buffer[1] = '\0';
    3d16:	89 85       	ldd	r24, Y+9	; 0x09
    3d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d1a:	01 96       	adiw	r24, 0x01	; 1
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	10 82       	st	Z, r1
        return;
    3d20:	ec c0       	rjmp	.+472    	; 0x3efa <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    3d22:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d24:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d26:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d28:	be 85       	ldd	r27, Y+14	; 0x0e
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	a9 01       	movw	r20, r18
    3d30:	bc 01       	movw	r22, r24
    3d32:	cd 01       	movw	r24, r26
    3d34:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <__cmpsf2>
    3d38:	88 23       	and	r24, r24
    3d3a:	9c f4       	brge	.+38     	; 0x3d62 <ftoa_sci+0x96>
        *buffer++ = '-';
    3d3c:	89 85       	ldd	r24, Y+9	; 0x09
    3d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d40:	9c 01       	movw	r18, r24
    3d42:	2f 5f       	subi	r18, 0xFF	; 255
    3d44:	3f 4f       	sbci	r19, 0xFF	; 255
    3d46:	29 87       	std	Y+9, r18	; 0x09
    3d48:	3a 87       	std	Y+10, r19	; 0x0a
    3d4a:	2d e2       	ldi	r18, 0x2D	; 45
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	20 83       	st	Z, r18
        value = -value;
    3d50:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d52:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d54:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d56:	be 85       	ldd	r27, Y+14	; 0x0e
    3d58:	b0 58       	subi	r27, 0x80	; 128
    3d5a:	8b 87       	std	Y+11, r24	; 0x0b
    3d5c:	9c 87       	std	Y+12, r25	; 0x0c
    3d5e:	ad 87       	std	Y+13, r26	; 0x0d
    3d60:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    3d62:	ce 01       	movw	r24, r28
    3d64:	0b 96       	adiw	r24, 0x0b	; 11
    3d66:	0e 94 aa 1c 	call	0x3954	; 0x3954 <normalize>
    3d6a:	8b 83       	std	Y+3, r24	; 0x03
    3d6c:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    3d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d70:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d72:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d74:	be 85       	ldd	r27, Y+14	; 0x0e
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	40 e2       	ldi	r20, 0x20	; 32
    3d7c:	51 e4       	ldi	r21, 0x41	; 65
    3d7e:	bc 01       	movw	r22, r24
    3d80:	cd 01       	movw	r24, r26
    3d82:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__mulsf3>
    3d86:	dc 01       	movw	r26, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	bc 01       	movw	r22, r24
    3d8c:	cd 01       	movw	r24, r26
    3d8e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__fixsfsi>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	8d 83       	std	Y+5, r24	; 0x05
    3d98:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    3d9a:	89 85       	ldd	r24, Y+9	; 0x09
    3d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d9e:	9c 01       	movw	r18, r24
    3da0:	2f 5f       	subi	r18, 0xFF	; 255
    3da2:	3f 4f       	sbci	r19, 0xFF	; 255
    3da4:	29 87       	std	Y+9, r18	; 0x09
    3da6:	3a 87       	std	Y+10, r19	; 0x0a
    3da8:	2d 81       	ldd	r18, Y+5	; 0x05
    3daa:	20 5d       	subi	r18, 0xD0	; 208
    3dac:	fc 01       	movw	r30, r24
    3dae:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    3db0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3db2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3db4:	ad 85       	ldd	r26, Y+13	; 0x0d
    3db6:	be 85       	ldd	r27, Y+14	; 0x0e
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	40 e2       	ldi	r20, 0x20	; 32
    3dbe:	51 e4       	ldi	r21, 0x41	; 65
    3dc0:	bc 01       	movw	r22, r24
    3dc2:	cd 01       	movw	r24, r26
    3dc4:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__mulsf3>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	6c 01       	movw	r12, r24
    3dce:	7d 01       	movw	r14, r26
    3dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd4:	09 2e       	mov	r0, r25
    3dd6:	00 0c       	add	r0, r0
    3dd8:	aa 0b       	sbc	r26, r26
    3dda:	bb 0b       	sbc	r27, r27
    3ddc:	bc 01       	movw	r22, r24
    3dde:	cd 01       	movw	r24, r26
    3de0:	0e 94 a3 20 	call	0x4146	; 0x4146 <__floatsisf>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	9c 01       	movw	r18, r24
    3dea:	ad 01       	movw	r20, r26
    3dec:	c7 01       	movw	r24, r14
    3dee:	b6 01       	movw	r22, r12
    3df0:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <__subsf3>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	8b 87       	std	Y+11, r24	; 0x0b
    3dfa:	9c 87       	std	Y+12, r25	; 0x0c
    3dfc:	ad 87       	std	Y+13, r26	; 0x0d
    3dfe:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    3e00:	8b 81       	ldd	r24, Y+3	; 0x03
    3e02:	9c 81       	ldd	r25, Y+4	; 0x04
    3e04:	01 97       	sbiw	r24, 0x01	; 1
    3e06:	8b 83       	std	Y+3, r24	; 0x03
    3e08:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    3e0a:	89 85       	ldd	r24, Y+9	; 0x09
    3e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e0e:	9c 01       	movw	r18, r24
    3e10:	2f 5f       	subi	r18, 0xFF	; 255
    3e12:	3f 4f       	sbci	r19, 0xFF	; 255
    3e14:	29 87       	std	Y+9, r18	; 0x09
    3e16:	3a 87       	std	Y+10, r19	; 0x0a
    3e18:	2e e2       	ldi	r18, 0x2E	; 46
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    3e1e:	19 82       	std	Y+1, r1	; 0x01
    3e20:	1a 82       	std	Y+2, r1	; 0x02
    3e22:	4e c0       	rjmp	.+156    	; 0x3ec0 <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    3e24:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e26:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e28:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e2a:	be 85       	ldd	r27, Y+14	; 0x0e
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	40 e2       	ldi	r20, 0x20	; 32
    3e32:	51 e4       	ldi	r21, 0x41	; 65
    3e34:	bc 01       	movw	r22, r24
    3e36:	cd 01       	movw	r24, r26
    3e38:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__mulsf3>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	bc 01       	movw	r22, r24
    3e42:	cd 01       	movw	r24, r26
    3e44:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__fixsfsi>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	8f 83       	std	Y+7, r24	; 0x07
    3e4e:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    3e50:	89 85       	ldd	r24, Y+9	; 0x09
    3e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e54:	9c 01       	movw	r18, r24
    3e56:	2f 5f       	subi	r18, 0xFF	; 255
    3e58:	3f 4f       	sbci	r19, 0xFF	; 255
    3e5a:	29 87       	std	Y+9, r18	; 0x09
    3e5c:	3a 87       	std	Y+10, r19	; 0x0a
    3e5e:	2f 81       	ldd	r18, Y+7	; 0x07
    3e60:	20 5d       	subi	r18, 0xD0	; 208
    3e62:	fc 01       	movw	r30, r24
    3e64:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    3e66:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e68:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e6a:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e6c:	be 85       	ldd	r27, Y+14	; 0x0e
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	40 e2       	ldi	r20, 0x20	; 32
    3e74:	51 e4       	ldi	r21, 0x41	; 65
    3e76:	bc 01       	movw	r22, r24
    3e78:	cd 01       	movw	r24, r26
    3e7a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__mulsf3>
    3e7e:	dc 01       	movw	r26, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	6c 01       	movw	r12, r24
    3e84:	7d 01       	movw	r14, r26
    3e86:	8f 81       	ldd	r24, Y+7	; 0x07
    3e88:	98 85       	ldd	r25, Y+8	; 0x08
    3e8a:	09 2e       	mov	r0, r25
    3e8c:	00 0c       	add	r0, r0
    3e8e:	aa 0b       	sbc	r26, r26
    3e90:	bb 0b       	sbc	r27, r27
    3e92:	bc 01       	movw	r22, r24
    3e94:	cd 01       	movw	r24, r26
    3e96:	0e 94 a3 20 	call	0x4146	; 0x4146 <__floatsisf>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	9c 01       	movw	r18, r24
    3ea0:	ad 01       	movw	r20, r26
    3ea2:	c7 01       	movw	r24, r14
    3ea4:	b6 01       	movw	r22, r12
    3ea6:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <__subsf3>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	8b 87       	std	Y+11, r24	; 0x0b
    3eb0:	9c 87       	std	Y+12, r25	; 0x0c
    3eb2:	ad 87       	std	Y+13, r26	; 0x0d
    3eb4:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    3eb6:	89 81       	ldd	r24, Y+1	; 0x01
    3eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eba:	01 96       	adiw	r24, 0x01	; 1
    3ebc:	89 83       	std	Y+1, r24	; 0x01
    3ebe:	9a 83       	std	Y+2, r25	; 0x02
    3ec0:	80 91 65 20 	lds	r24, 0x2065	; 0x802065 <width.5079>
    3ec4:	90 91 66 20 	lds	r25, 0x2066	; 0x802066 <width.5079+0x1>
    3ec8:	29 81       	ldd	r18, Y+1	; 0x01
    3eca:	3a 81       	ldd	r19, Y+2	; 0x02
    3ecc:	28 17       	cp	r18, r24
    3ece:	39 07       	cpc	r19, r25
    3ed0:	0c f4       	brge	.+2      	; 0x3ed4 <ftoa_sci+0x208>
    3ed2:	a8 cf       	rjmp	.-176    	; 0x3e24 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    3ed4:	89 85       	ldd	r24, Y+9	; 0x09
    3ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed8:	9c 01       	movw	r18, r24
    3eda:	2f 5f       	subi	r18, 0xFF	; 255
    3edc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ede:	29 87       	std	Y+9, r18	; 0x09
    3ee0:	3a 87       	std	Y+10, r19	; 0x0a
    3ee2:	25 e6       	ldi	r18, 0x65	; 101
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    3ee8:	29 85       	ldd	r18, Y+9	; 0x09
    3eea:	3a 85       	ldd	r19, Y+10	; 0x0a
    3eec:	8b 81       	ldd	r24, Y+3	; 0x03
    3eee:	9c 81       	ldd	r25, Y+4	; 0x04
    3ef0:	4a e0       	ldi	r20, 0x0A	; 10
    3ef2:	50 e0       	ldi	r21, 0x00	; 0
    3ef4:	b9 01       	movw	r22, r18
    3ef6:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <itoa>
}
    3efa:	2e 96       	adiw	r28, 0x0e	; 14
    3efc:	cd bf       	out	0x3d, r28	; 61
    3efe:	de bf       	out	0x3e, r29	; 62
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	ff 90       	pop	r15
    3f06:	ef 90       	pop	r14
    3f08:	df 90       	pop	r13
    3f0a:	cf 90       	pop	r12
    3f0c:	08 95       	ret

00003f0e <__subsf3>:
    3f0e:	50 58       	subi	r21, 0x80	; 128

00003f10 <__addsf3>:
    3f10:	bb 27       	eor	r27, r27
    3f12:	aa 27       	eor	r26, r26
    3f14:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__addsf3x>
    3f18:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__fp_round>
    3f1c:	0e 94 0b 21 	call	0x4216	; 0x4216 <__fp_pscA>
    3f20:	38 f0       	brcs	.+14     	; 0x3f30 <__addsf3+0x20>
    3f22:	0e 94 12 21 	call	0x4224	; 0x4224 <__fp_pscB>
    3f26:	20 f0       	brcs	.+8      	; 0x3f30 <__addsf3+0x20>
    3f28:	39 f4       	brne	.+14     	; 0x3f38 <__addsf3+0x28>
    3f2a:	9f 3f       	cpi	r25, 0xFF	; 255
    3f2c:	19 f4       	brne	.+6      	; 0x3f34 <__addsf3+0x24>
    3f2e:	26 f4       	brtc	.+8      	; 0x3f38 <__addsf3+0x28>
    3f30:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__fp_nan>
    3f34:	0e f4       	brtc	.+2      	; 0x3f38 <__addsf3+0x28>
    3f36:	e0 95       	com	r30
    3f38:	e7 fb       	bst	r30, 7
    3f3a:	0c 94 02 21 	jmp	0x4204	; 0x4204 <__fp_inf>

00003f3e <__addsf3x>:
    3f3e:	e9 2f       	mov	r30, r25
    3f40:	0e 94 2a 21 	call	0x4254	; 0x4254 <__fp_split3>
    3f44:	58 f3       	brcs	.-42     	; 0x3f1c <__addsf3+0xc>
    3f46:	ba 17       	cp	r27, r26
    3f48:	62 07       	cpc	r22, r18
    3f4a:	73 07       	cpc	r23, r19
    3f4c:	84 07       	cpc	r24, r20
    3f4e:	95 07       	cpc	r25, r21
    3f50:	20 f0       	brcs	.+8      	; 0x3f5a <__addsf3x+0x1c>
    3f52:	79 f4       	brne	.+30     	; 0x3f72 <__addsf3x+0x34>
    3f54:	a6 f5       	brtc	.+104    	; 0x3fbe <__addsf3x+0x80>
    3f56:	0c 94 4c 21 	jmp	0x4298	; 0x4298 <__fp_zero>
    3f5a:	0e f4       	brtc	.+2      	; 0x3f5e <__addsf3x+0x20>
    3f5c:	e0 95       	com	r30
    3f5e:	0b 2e       	mov	r0, r27
    3f60:	ba 2f       	mov	r27, r26
    3f62:	a0 2d       	mov	r26, r0
    3f64:	0b 01       	movw	r0, r22
    3f66:	b9 01       	movw	r22, r18
    3f68:	90 01       	movw	r18, r0
    3f6a:	0c 01       	movw	r0, r24
    3f6c:	ca 01       	movw	r24, r20
    3f6e:	a0 01       	movw	r20, r0
    3f70:	11 24       	eor	r1, r1
    3f72:	ff 27       	eor	r31, r31
    3f74:	59 1b       	sub	r21, r25
    3f76:	99 f0       	breq	.+38     	; 0x3f9e <__addsf3x+0x60>
    3f78:	59 3f       	cpi	r21, 0xF9	; 249
    3f7a:	50 f4       	brcc	.+20     	; 0x3f90 <__addsf3x+0x52>
    3f7c:	50 3e       	cpi	r21, 0xE0	; 224
    3f7e:	68 f1       	brcs	.+90     	; 0x3fda <__addsf3x+0x9c>
    3f80:	1a 16       	cp	r1, r26
    3f82:	f0 40       	sbci	r31, 0x00	; 0
    3f84:	a2 2f       	mov	r26, r18
    3f86:	23 2f       	mov	r18, r19
    3f88:	34 2f       	mov	r19, r20
    3f8a:	44 27       	eor	r20, r20
    3f8c:	58 5f       	subi	r21, 0xF8	; 248
    3f8e:	f3 cf       	rjmp	.-26     	; 0x3f76 <__addsf3x+0x38>
    3f90:	46 95       	lsr	r20
    3f92:	37 95       	ror	r19
    3f94:	27 95       	ror	r18
    3f96:	a7 95       	ror	r26
    3f98:	f0 40       	sbci	r31, 0x00	; 0
    3f9a:	53 95       	inc	r21
    3f9c:	c9 f7       	brne	.-14     	; 0x3f90 <__addsf3x+0x52>
    3f9e:	7e f4       	brtc	.+30     	; 0x3fbe <__addsf3x+0x80>
    3fa0:	1f 16       	cp	r1, r31
    3fa2:	ba 0b       	sbc	r27, r26
    3fa4:	62 0b       	sbc	r22, r18
    3fa6:	73 0b       	sbc	r23, r19
    3fa8:	84 0b       	sbc	r24, r20
    3faa:	ba f0       	brmi	.+46     	; 0x3fda <__addsf3x+0x9c>
    3fac:	91 50       	subi	r25, 0x01	; 1
    3fae:	a1 f0       	breq	.+40     	; 0x3fd8 <__addsf3x+0x9a>
    3fb0:	ff 0f       	add	r31, r31
    3fb2:	bb 1f       	adc	r27, r27
    3fb4:	66 1f       	adc	r22, r22
    3fb6:	77 1f       	adc	r23, r23
    3fb8:	88 1f       	adc	r24, r24
    3fba:	c2 f7       	brpl	.-16     	; 0x3fac <__addsf3x+0x6e>
    3fbc:	0e c0       	rjmp	.+28     	; 0x3fda <__addsf3x+0x9c>
    3fbe:	ba 0f       	add	r27, r26
    3fc0:	62 1f       	adc	r22, r18
    3fc2:	73 1f       	adc	r23, r19
    3fc4:	84 1f       	adc	r24, r20
    3fc6:	48 f4       	brcc	.+18     	; 0x3fda <__addsf3x+0x9c>
    3fc8:	87 95       	ror	r24
    3fca:	77 95       	ror	r23
    3fcc:	67 95       	ror	r22
    3fce:	b7 95       	ror	r27
    3fd0:	f7 95       	ror	r31
    3fd2:	9e 3f       	cpi	r25, 0xFE	; 254
    3fd4:	08 f0       	brcs	.+2      	; 0x3fd8 <__addsf3x+0x9a>
    3fd6:	b0 cf       	rjmp	.-160    	; 0x3f38 <__addsf3+0x28>
    3fd8:	93 95       	inc	r25
    3fda:	88 0f       	add	r24, r24
    3fdc:	08 f0       	brcs	.+2      	; 0x3fe0 <__addsf3x+0xa2>
    3fde:	99 27       	eor	r25, r25
    3fe0:	ee 0f       	add	r30, r30
    3fe2:	97 95       	ror	r25
    3fe4:	87 95       	ror	r24
    3fe6:	08 95       	ret

00003fe8 <__cmpsf2>:
    3fe8:	0e 94 de 20 	call	0x41bc	; 0x41bc <__fp_cmp>
    3fec:	08 f4       	brcc	.+2      	; 0x3ff0 <__cmpsf2+0x8>
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	08 95       	ret

00003ff2 <__divsf3>:
    3ff2:	0e 94 0d 20 	call	0x401a	; 0x401a <__divsf3x>
    3ff6:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__fp_round>
    3ffa:	0e 94 12 21 	call	0x4224	; 0x4224 <__fp_pscB>
    3ffe:	58 f0       	brcs	.+22     	; 0x4016 <__stack+0x17>
    4000:	0e 94 0b 21 	call	0x4216	; 0x4216 <__fp_pscA>
    4004:	40 f0       	brcs	.+16     	; 0x4016 <__stack+0x17>
    4006:	29 f4       	brne	.+10     	; 0x4012 <__stack+0x13>
    4008:	5f 3f       	cpi	r21, 0xFF	; 255
    400a:	29 f0       	breq	.+10     	; 0x4016 <__stack+0x17>
    400c:	0c 94 02 21 	jmp	0x4204	; 0x4204 <__fp_inf>
    4010:	51 11       	cpse	r21, r1
    4012:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__fp_szero>
    4016:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__fp_nan>

0000401a <__divsf3x>:
    401a:	0e 94 2a 21 	call	0x4254	; 0x4254 <__fp_split3>
    401e:	68 f3       	brcs	.-38     	; 0x3ffa <__divsf3+0x8>

00004020 <__divsf3_pse>:
    4020:	99 23       	and	r25, r25
    4022:	b1 f3       	breq	.-20     	; 0x4010 <__stack+0x11>
    4024:	55 23       	and	r21, r21
    4026:	91 f3       	breq	.-28     	; 0x400c <__stack+0xd>
    4028:	95 1b       	sub	r25, r21
    402a:	55 0b       	sbc	r21, r21
    402c:	bb 27       	eor	r27, r27
    402e:	aa 27       	eor	r26, r26
    4030:	62 17       	cp	r22, r18
    4032:	73 07       	cpc	r23, r19
    4034:	84 07       	cpc	r24, r20
    4036:	38 f0       	brcs	.+14     	; 0x4046 <__divsf3_pse+0x26>
    4038:	9f 5f       	subi	r25, 0xFF	; 255
    403a:	5f 4f       	sbci	r21, 0xFF	; 255
    403c:	22 0f       	add	r18, r18
    403e:	33 1f       	adc	r19, r19
    4040:	44 1f       	adc	r20, r20
    4042:	aa 1f       	adc	r26, r26
    4044:	a9 f3       	breq	.-22     	; 0x4030 <__divsf3_pse+0x10>
    4046:	35 d0       	rcall	.+106    	; 0x40b2 <__divsf3_pse+0x92>
    4048:	0e 2e       	mov	r0, r30
    404a:	3a f0       	brmi	.+14     	; 0x405a <__divsf3_pse+0x3a>
    404c:	e0 e8       	ldi	r30, 0x80	; 128
    404e:	32 d0       	rcall	.+100    	; 0x40b4 <__divsf3_pse+0x94>
    4050:	91 50       	subi	r25, 0x01	; 1
    4052:	50 40       	sbci	r21, 0x00	; 0
    4054:	e6 95       	lsr	r30
    4056:	00 1c       	adc	r0, r0
    4058:	ca f7       	brpl	.-14     	; 0x404c <__divsf3_pse+0x2c>
    405a:	2b d0       	rcall	.+86     	; 0x40b2 <__divsf3_pse+0x92>
    405c:	fe 2f       	mov	r31, r30
    405e:	29 d0       	rcall	.+82     	; 0x40b2 <__divsf3_pse+0x92>
    4060:	66 0f       	add	r22, r22
    4062:	77 1f       	adc	r23, r23
    4064:	88 1f       	adc	r24, r24
    4066:	bb 1f       	adc	r27, r27
    4068:	26 17       	cp	r18, r22
    406a:	37 07       	cpc	r19, r23
    406c:	48 07       	cpc	r20, r24
    406e:	ab 07       	cpc	r26, r27
    4070:	b0 e8       	ldi	r27, 0x80	; 128
    4072:	09 f0       	breq	.+2      	; 0x4076 <__divsf3_pse+0x56>
    4074:	bb 0b       	sbc	r27, r27
    4076:	80 2d       	mov	r24, r0
    4078:	bf 01       	movw	r22, r30
    407a:	ff 27       	eor	r31, r31
    407c:	93 58       	subi	r25, 0x83	; 131
    407e:	5f 4f       	sbci	r21, 0xFF	; 255
    4080:	3a f0       	brmi	.+14     	; 0x4090 <__divsf3_pse+0x70>
    4082:	9e 3f       	cpi	r25, 0xFE	; 254
    4084:	51 05       	cpc	r21, r1
    4086:	78 f0       	brcs	.+30     	; 0x40a6 <__divsf3_pse+0x86>
    4088:	0c 94 02 21 	jmp	0x4204	; 0x4204 <__fp_inf>
    408c:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__fp_szero>
    4090:	5f 3f       	cpi	r21, 0xFF	; 255
    4092:	e4 f3       	brlt	.-8      	; 0x408c <__divsf3_pse+0x6c>
    4094:	98 3e       	cpi	r25, 0xE8	; 232
    4096:	d4 f3       	brlt	.-12     	; 0x408c <__divsf3_pse+0x6c>
    4098:	86 95       	lsr	r24
    409a:	77 95       	ror	r23
    409c:	67 95       	ror	r22
    409e:	b7 95       	ror	r27
    40a0:	f7 95       	ror	r31
    40a2:	9f 5f       	subi	r25, 0xFF	; 255
    40a4:	c9 f7       	brne	.-14     	; 0x4098 <__divsf3_pse+0x78>
    40a6:	88 0f       	add	r24, r24
    40a8:	91 1d       	adc	r25, r1
    40aa:	96 95       	lsr	r25
    40ac:	87 95       	ror	r24
    40ae:	97 f9       	bld	r25, 7
    40b0:	08 95       	ret
    40b2:	e1 e0       	ldi	r30, 0x01	; 1
    40b4:	66 0f       	add	r22, r22
    40b6:	77 1f       	adc	r23, r23
    40b8:	88 1f       	adc	r24, r24
    40ba:	bb 1f       	adc	r27, r27
    40bc:	62 17       	cp	r22, r18
    40be:	73 07       	cpc	r23, r19
    40c0:	84 07       	cpc	r24, r20
    40c2:	ba 07       	cpc	r27, r26
    40c4:	20 f0       	brcs	.+8      	; 0x40ce <__divsf3_pse+0xae>
    40c6:	62 1b       	sub	r22, r18
    40c8:	73 0b       	sbc	r23, r19
    40ca:	84 0b       	sbc	r24, r20
    40cc:	ba 0b       	sbc	r27, r26
    40ce:	ee 1f       	adc	r30, r30
    40d0:	88 f7       	brcc	.-30     	; 0x40b4 <__divsf3_pse+0x94>
    40d2:	e0 95       	com	r30
    40d4:	08 95       	ret

000040d6 <__fixsfsi>:
    40d6:	0e 94 72 20 	call	0x40e4	; 0x40e4 <__fixunssfsi>
    40da:	68 94       	set
    40dc:	b1 11       	cpse	r27, r1
    40de:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__fp_szero>
    40e2:	08 95       	ret

000040e4 <__fixunssfsi>:
    40e4:	0e 94 32 21 	call	0x4264	; 0x4264 <__fp_splitA>
    40e8:	88 f0       	brcs	.+34     	; 0x410c <__fixunssfsi+0x28>
    40ea:	9f 57       	subi	r25, 0x7F	; 127
    40ec:	98 f0       	brcs	.+38     	; 0x4114 <__fixunssfsi+0x30>
    40ee:	b9 2f       	mov	r27, r25
    40f0:	99 27       	eor	r25, r25
    40f2:	b7 51       	subi	r27, 0x17	; 23
    40f4:	b0 f0       	brcs	.+44     	; 0x4122 <__fixunssfsi+0x3e>
    40f6:	e1 f0       	breq	.+56     	; 0x4130 <__fixunssfsi+0x4c>
    40f8:	66 0f       	add	r22, r22
    40fa:	77 1f       	adc	r23, r23
    40fc:	88 1f       	adc	r24, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	1a f0       	brmi	.+6      	; 0x4108 <__fixunssfsi+0x24>
    4102:	ba 95       	dec	r27
    4104:	c9 f7       	brne	.-14     	; 0x40f8 <__fixunssfsi+0x14>
    4106:	14 c0       	rjmp	.+40     	; 0x4130 <__fixunssfsi+0x4c>
    4108:	b1 30       	cpi	r27, 0x01	; 1
    410a:	91 f0       	breq	.+36     	; 0x4130 <__fixunssfsi+0x4c>
    410c:	0e 94 4c 21 	call	0x4298	; 0x4298 <__fp_zero>
    4110:	b1 e0       	ldi	r27, 0x01	; 1
    4112:	08 95       	ret
    4114:	0c 94 4c 21 	jmp	0x4298	; 0x4298 <__fp_zero>
    4118:	67 2f       	mov	r22, r23
    411a:	78 2f       	mov	r23, r24
    411c:	88 27       	eor	r24, r24
    411e:	b8 5f       	subi	r27, 0xF8	; 248
    4120:	39 f0       	breq	.+14     	; 0x4130 <__fixunssfsi+0x4c>
    4122:	b9 3f       	cpi	r27, 0xF9	; 249
    4124:	cc f3       	brlt	.-14     	; 0x4118 <__fixunssfsi+0x34>
    4126:	86 95       	lsr	r24
    4128:	77 95       	ror	r23
    412a:	67 95       	ror	r22
    412c:	b3 95       	inc	r27
    412e:	d9 f7       	brne	.-10     	; 0x4126 <__fixunssfsi+0x42>
    4130:	3e f4       	brtc	.+14     	; 0x4140 <__fixunssfsi+0x5c>
    4132:	90 95       	com	r25
    4134:	80 95       	com	r24
    4136:	70 95       	com	r23
    4138:	61 95       	neg	r22
    413a:	7f 4f       	sbci	r23, 0xFF	; 255
    413c:	8f 4f       	sbci	r24, 0xFF	; 255
    413e:	9f 4f       	sbci	r25, 0xFF	; 255
    4140:	08 95       	ret

00004142 <__floatunsisf>:
    4142:	e8 94       	clt
    4144:	09 c0       	rjmp	.+18     	; 0x4158 <__floatsisf+0x12>

00004146 <__floatsisf>:
    4146:	97 fb       	bst	r25, 7
    4148:	3e f4       	brtc	.+14     	; 0x4158 <__floatsisf+0x12>
    414a:	90 95       	com	r25
    414c:	80 95       	com	r24
    414e:	70 95       	com	r23
    4150:	61 95       	neg	r22
    4152:	7f 4f       	sbci	r23, 0xFF	; 255
    4154:	8f 4f       	sbci	r24, 0xFF	; 255
    4156:	9f 4f       	sbci	r25, 0xFF	; 255
    4158:	99 23       	and	r25, r25
    415a:	a9 f0       	breq	.+42     	; 0x4186 <__floatsisf+0x40>
    415c:	f9 2f       	mov	r31, r25
    415e:	96 e9       	ldi	r25, 0x96	; 150
    4160:	bb 27       	eor	r27, r27
    4162:	93 95       	inc	r25
    4164:	f6 95       	lsr	r31
    4166:	87 95       	ror	r24
    4168:	77 95       	ror	r23
    416a:	67 95       	ror	r22
    416c:	b7 95       	ror	r27
    416e:	f1 11       	cpse	r31, r1
    4170:	f8 cf       	rjmp	.-16     	; 0x4162 <__floatsisf+0x1c>
    4172:	fa f4       	brpl	.+62     	; 0x41b2 <__floatsisf+0x6c>
    4174:	bb 0f       	add	r27, r27
    4176:	11 f4       	brne	.+4      	; 0x417c <__floatsisf+0x36>
    4178:	60 ff       	sbrs	r22, 0
    417a:	1b c0       	rjmp	.+54     	; 0x41b2 <__floatsisf+0x6c>
    417c:	6f 5f       	subi	r22, 0xFF	; 255
    417e:	7f 4f       	sbci	r23, 0xFF	; 255
    4180:	8f 4f       	sbci	r24, 0xFF	; 255
    4182:	9f 4f       	sbci	r25, 0xFF	; 255
    4184:	16 c0       	rjmp	.+44     	; 0x41b2 <__floatsisf+0x6c>
    4186:	88 23       	and	r24, r24
    4188:	11 f0       	breq	.+4      	; 0x418e <__floatsisf+0x48>
    418a:	96 e9       	ldi	r25, 0x96	; 150
    418c:	11 c0       	rjmp	.+34     	; 0x41b0 <__floatsisf+0x6a>
    418e:	77 23       	and	r23, r23
    4190:	21 f0       	breq	.+8      	; 0x419a <__floatsisf+0x54>
    4192:	9e e8       	ldi	r25, 0x8E	; 142
    4194:	87 2f       	mov	r24, r23
    4196:	76 2f       	mov	r23, r22
    4198:	05 c0       	rjmp	.+10     	; 0x41a4 <__floatsisf+0x5e>
    419a:	66 23       	and	r22, r22
    419c:	71 f0       	breq	.+28     	; 0x41ba <__floatsisf+0x74>
    419e:	96 e8       	ldi	r25, 0x86	; 134
    41a0:	86 2f       	mov	r24, r22
    41a2:	70 e0       	ldi	r23, 0x00	; 0
    41a4:	60 e0       	ldi	r22, 0x00	; 0
    41a6:	2a f0       	brmi	.+10     	; 0x41b2 <__floatsisf+0x6c>
    41a8:	9a 95       	dec	r25
    41aa:	66 0f       	add	r22, r22
    41ac:	77 1f       	adc	r23, r23
    41ae:	88 1f       	adc	r24, r24
    41b0:	da f7       	brpl	.-10     	; 0x41a8 <__floatsisf+0x62>
    41b2:	88 0f       	add	r24, r24
    41b4:	96 95       	lsr	r25
    41b6:	87 95       	ror	r24
    41b8:	97 f9       	bld	r25, 7
    41ba:	08 95       	ret

000041bc <__fp_cmp>:
    41bc:	99 0f       	add	r25, r25
    41be:	00 08       	sbc	r0, r0
    41c0:	55 0f       	add	r21, r21
    41c2:	aa 0b       	sbc	r26, r26
    41c4:	e0 e8       	ldi	r30, 0x80	; 128
    41c6:	fe ef       	ldi	r31, 0xFE	; 254
    41c8:	16 16       	cp	r1, r22
    41ca:	17 06       	cpc	r1, r23
    41cc:	e8 07       	cpc	r30, r24
    41ce:	f9 07       	cpc	r31, r25
    41d0:	c0 f0       	brcs	.+48     	; 0x4202 <__fp_cmp+0x46>
    41d2:	12 16       	cp	r1, r18
    41d4:	13 06       	cpc	r1, r19
    41d6:	e4 07       	cpc	r30, r20
    41d8:	f5 07       	cpc	r31, r21
    41da:	98 f0       	brcs	.+38     	; 0x4202 <__fp_cmp+0x46>
    41dc:	62 1b       	sub	r22, r18
    41de:	73 0b       	sbc	r23, r19
    41e0:	84 0b       	sbc	r24, r20
    41e2:	95 0b       	sbc	r25, r21
    41e4:	39 f4       	brne	.+14     	; 0x41f4 <__fp_cmp+0x38>
    41e6:	0a 26       	eor	r0, r26
    41e8:	61 f0       	breq	.+24     	; 0x4202 <__fp_cmp+0x46>
    41ea:	23 2b       	or	r18, r19
    41ec:	24 2b       	or	r18, r20
    41ee:	25 2b       	or	r18, r21
    41f0:	21 f4       	brne	.+8      	; 0x41fa <__fp_cmp+0x3e>
    41f2:	08 95       	ret
    41f4:	0a 26       	eor	r0, r26
    41f6:	09 f4       	brne	.+2      	; 0x41fa <__fp_cmp+0x3e>
    41f8:	a1 40       	sbci	r26, 0x01	; 1
    41fa:	a6 95       	lsr	r26
    41fc:	8f ef       	ldi	r24, 0xFF	; 255
    41fe:	81 1d       	adc	r24, r1
    4200:	81 1d       	adc	r24, r1
    4202:	08 95       	ret

00004204 <__fp_inf>:
    4204:	97 f9       	bld	r25, 7
    4206:	9f 67       	ori	r25, 0x7F	; 127
    4208:	80 e8       	ldi	r24, 0x80	; 128
    420a:	70 e0       	ldi	r23, 0x00	; 0
    420c:	60 e0       	ldi	r22, 0x00	; 0
    420e:	08 95       	ret

00004210 <__fp_nan>:
    4210:	9f ef       	ldi	r25, 0xFF	; 255
    4212:	80 ec       	ldi	r24, 0xC0	; 192
    4214:	08 95       	ret

00004216 <__fp_pscA>:
    4216:	00 24       	eor	r0, r0
    4218:	0a 94       	dec	r0
    421a:	16 16       	cp	r1, r22
    421c:	17 06       	cpc	r1, r23
    421e:	18 06       	cpc	r1, r24
    4220:	09 06       	cpc	r0, r25
    4222:	08 95       	ret

00004224 <__fp_pscB>:
    4224:	00 24       	eor	r0, r0
    4226:	0a 94       	dec	r0
    4228:	12 16       	cp	r1, r18
    422a:	13 06       	cpc	r1, r19
    422c:	14 06       	cpc	r1, r20
    422e:	05 06       	cpc	r0, r21
    4230:	08 95       	ret

00004232 <__fp_round>:
    4232:	09 2e       	mov	r0, r25
    4234:	03 94       	inc	r0
    4236:	00 0c       	add	r0, r0
    4238:	11 f4       	brne	.+4      	; 0x423e <__fp_round+0xc>
    423a:	88 23       	and	r24, r24
    423c:	52 f0       	brmi	.+20     	; 0x4252 <__fp_round+0x20>
    423e:	bb 0f       	add	r27, r27
    4240:	40 f4       	brcc	.+16     	; 0x4252 <__fp_round+0x20>
    4242:	bf 2b       	or	r27, r31
    4244:	11 f4       	brne	.+4      	; 0x424a <__fp_round+0x18>
    4246:	60 ff       	sbrs	r22, 0
    4248:	04 c0       	rjmp	.+8      	; 0x4252 <__fp_round+0x20>
    424a:	6f 5f       	subi	r22, 0xFF	; 255
    424c:	7f 4f       	sbci	r23, 0xFF	; 255
    424e:	8f 4f       	sbci	r24, 0xFF	; 255
    4250:	9f 4f       	sbci	r25, 0xFF	; 255
    4252:	08 95       	ret

00004254 <__fp_split3>:
    4254:	57 fd       	sbrc	r21, 7
    4256:	90 58       	subi	r25, 0x80	; 128
    4258:	44 0f       	add	r20, r20
    425a:	55 1f       	adc	r21, r21
    425c:	59 f0       	breq	.+22     	; 0x4274 <__fp_splitA+0x10>
    425e:	5f 3f       	cpi	r21, 0xFF	; 255
    4260:	71 f0       	breq	.+28     	; 0x427e <__fp_splitA+0x1a>
    4262:	47 95       	ror	r20

00004264 <__fp_splitA>:
    4264:	88 0f       	add	r24, r24
    4266:	97 fb       	bst	r25, 7
    4268:	99 1f       	adc	r25, r25
    426a:	61 f0       	breq	.+24     	; 0x4284 <__fp_splitA+0x20>
    426c:	9f 3f       	cpi	r25, 0xFF	; 255
    426e:	79 f0       	breq	.+30     	; 0x428e <__fp_splitA+0x2a>
    4270:	87 95       	ror	r24
    4272:	08 95       	ret
    4274:	12 16       	cp	r1, r18
    4276:	13 06       	cpc	r1, r19
    4278:	14 06       	cpc	r1, r20
    427a:	55 1f       	adc	r21, r21
    427c:	f2 cf       	rjmp	.-28     	; 0x4262 <__fp_split3+0xe>
    427e:	46 95       	lsr	r20
    4280:	f1 df       	rcall	.-30     	; 0x4264 <__fp_splitA>
    4282:	08 c0       	rjmp	.+16     	; 0x4294 <__fp_splitA+0x30>
    4284:	16 16       	cp	r1, r22
    4286:	17 06       	cpc	r1, r23
    4288:	18 06       	cpc	r1, r24
    428a:	99 1f       	adc	r25, r25
    428c:	f1 cf       	rjmp	.-30     	; 0x4270 <__fp_splitA+0xc>
    428e:	86 95       	lsr	r24
    4290:	71 05       	cpc	r23, r1
    4292:	61 05       	cpc	r22, r1
    4294:	08 94       	sec
    4296:	08 95       	ret

00004298 <__fp_zero>:
    4298:	e8 94       	clt

0000429a <__fp_szero>:
    429a:	bb 27       	eor	r27, r27
    429c:	66 27       	eor	r22, r22
    429e:	77 27       	eor	r23, r23
    42a0:	cb 01       	movw	r24, r22
    42a2:	97 f9       	bld	r25, 7
    42a4:	08 95       	ret

000042a6 <__gesf2>:
    42a6:	0e 94 de 20 	call	0x41bc	; 0x41bc <__fp_cmp>
    42aa:	08 f4       	brcc	.+2      	; 0x42ae <__gesf2+0x8>
    42ac:	8f ef       	ldi	r24, 0xFF	; 255
    42ae:	08 95       	ret

000042b0 <__mulsf3>:
    42b0:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__mulsf3x>
    42b4:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__fp_round>
    42b8:	0e 94 0b 21 	call	0x4216	; 0x4216 <__fp_pscA>
    42bc:	38 f0       	brcs	.+14     	; 0x42cc <__mulsf3+0x1c>
    42be:	0e 94 12 21 	call	0x4224	; 0x4224 <__fp_pscB>
    42c2:	20 f0       	brcs	.+8      	; 0x42cc <__mulsf3+0x1c>
    42c4:	95 23       	and	r25, r21
    42c6:	11 f0       	breq	.+4      	; 0x42cc <__mulsf3+0x1c>
    42c8:	0c 94 02 21 	jmp	0x4204	; 0x4204 <__fp_inf>
    42cc:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__fp_nan>
    42d0:	11 24       	eor	r1, r1
    42d2:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__fp_szero>

000042d6 <__mulsf3x>:
    42d6:	0e 94 2a 21 	call	0x4254	; 0x4254 <__fp_split3>
    42da:	70 f3       	brcs	.-36     	; 0x42b8 <__mulsf3+0x8>

000042dc <__mulsf3_pse>:
    42dc:	95 9f       	mul	r25, r21
    42de:	c1 f3       	breq	.-16     	; 0x42d0 <__mulsf3+0x20>
    42e0:	95 0f       	add	r25, r21
    42e2:	50 e0       	ldi	r21, 0x00	; 0
    42e4:	55 1f       	adc	r21, r21
    42e6:	62 9f       	mul	r22, r18
    42e8:	f0 01       	movw	r30, r0
    42ea:	72 9f       	mul	r23, r18
    42ec:	bb 27       	eor	r27, r27
    42ee:	f0 0d       	add	r31, r0
    42f0:	b1 1d       	adc	r27, r1
    42f2:	63 9f       	mul	r22, r19
    42f4:	aa 27       	eor	r26, r26
    42f6:	f0 0d       	add	r31, r0
    42f8:	b1 1d       	adc	r27, r1
    42fa:	aa 1f       	adc	r26, r26
    42fc:	64 9f       	mul	r22, r20
    42fe:	66 27       	eor	r22, r22
    4300:	b0 0d       	add	r27, r0
    4302:	a1 1d       	adc	r26, r1
    4304:	66 1f       	adc	r22, r22
    4306:	82 9f       	mul	r24, r18
    4308:	22 27       	eor	r18, r18
    430a:	b0 0d       	add	r27, r0
    430c:	a1 1d       	adc	r26, r1
    430e:	62 1f       	adc	r22, r18
    4310:	73 9f       	mul	r23, r19
    4312:	b0 0d       	add	r27, r0
    4314:	a1 1d       	adc	r26, r1
    4316:	62 1f       	adc	r22, r18
    4318:	83 9f       	mul	r24, r19
    431a:	a0 0d       	add	r26, r0
    431c:	61 1d       	adc	r22, r1
    431e:	22 1f       	adc	r18, r18
    4320:	74 9f       	mul	r23, r20
    4322:	33 27       	eor	r19, r19
    4324:	a0 0d       	add	r26, r0
    4326:	61 1d       	adc	r22, r1
    4328:	23 1f       	adc	r18, r19
    432a:	84 9f       	mul	r24, r20
    432c:	60 0d       	add	r22, r0
    432e:	21 1d       	adc	r18, r1
    4330:	82 2f       	mov	r24, r18
    4332:	76 2f       	mov	r23, r22
    4334:	6a 2f       	mov	r22, r26
    4336:	11 24       	eor	r1, r1
    4338:	9f 57       	subi	r25, 0x7F	; 127
    433a:	50 40       	sbci	r21, 0x00	; 0
    433c:	9a f0       	brmi	.+38     	; 0x4364 <__mulsf3_pse+0x88>
    433e:	f1 f0       	breq	.+60     	; 0x437c <__mulsf3_pse+0xa0>
    4340:	88 23       	and	r24, r24
    4342:	4a f0       	brmi	.+18     	; 0x4356 <__mulsf3_pse+0x7a>
    4344:	ee 0f       	add	r30, r30
    4346:	ff 1f       	adc	r31, r31
    4348:	bb 1f       	adc	r27, r27
    434a:	66 1f       	adc	r22, r22
    434c:	77 1f       	adc	r23, r23
    434e:	88 1f       	adc	r24, r24
    4350:	91 50       	subi	r25, 0x01	; 1
    4352:	50 40       	sbci	r21, 0x00	; 0
    4354:	a9 f7       	brne	.-22     	; 0x4340 <__mulsf3_pse+0x64>
    4356:	9e 3f       	cpi	r25, 0xFE	; 254
    4358:	51 05       	cpc	r21, r1
    435a:	80 f0       	brcs	.+32     	; 0x437c <__mulsf3_pse+0xa0>
    435c:	0c 94 02 21 	jmp	0x4204	; 0x4204 <__fp_inf>
    4360:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__fp_szero>
    4364:	5f 3f       	cpi	r21, 0xFF	; 255
    4366:	e4 f3       	brlt	.-8      	; 0x4360 <__mulsf3_pse+0x84>
    4368:	98 3e       	cpi	r25, 0xE8	; 232
    436a:	d4 f3       	brlt	.-12     	; 0x4360 <__mulsf3_pse+0x84>
    436c:	86 95       	lsr	r24
    436e:	77 95       	ror	r23
    4370:	67 95       	ror	r22
    4372:	b7 95       	ror	r27
    4374:	f7 95       	ror	r31
    4376:	e7 95       	ror	r30
    4378:	9f 5f       	subi	r25, 0xFF	; 255
    437a:	c1 f7       	brne	.-16     	; 0x436c <__mulsf3_pse+0x90>
    437c:	fe 2b       	or	r31, r30
    437e:	88 0f       	add	r24, r24
    4380:	91 1d       	adc	r25, r1
    4382:	96 95       	lsr	r25
    4384:	87 95       	ror	r24
    4386:	97 f9       	bld	r25, 7
    4388:	08 95       	ret

0000438a <vfprintf>:
    438a:	2f 92       	push	r2
    438c:	3f 92       	push	r3
    438e:	4f 92       	push	r4
    4390:	5f 92       	push	r5
    4392:	6f 92       	push	r6
    4394:	7f 92       	push	r7
    4396:	8f 92       	push	r8
    4398:	9f 92       	push	r9
    439a:	af 92       	push	r10
    439c:	bf 92       	push	r11
    439e:	cf 92       	push	r12
    43a0:	df 92       	push	r13
    43a2:	ef 92       	push	r14
    43a4:	ff 92       	push	r15
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	cd b7       	in	r28, 0x3d	; 61
    43b0:	de b7       	in	r29, 0x3e	; 62
    43b2:	60 97       	sbiw	r28, 0x10	; 16
    43b4:	cd bf       	out	0x3d, r28	; 61
    43b6:	de bf       	out	0x3e, r29	; 62
    43b8:	7c 01       	movw	r14, r24
    43ba:	1b 01       	movw	r2, r22
    43bc:	6a 01       	movw	r12, r20
    43be:	fc 01       	movw	r30, r24
    43c0:	16 82       	std	Z+6, r1	; 0x06
    43c2:	17 82       	std	Z+7, r1	; 0x07
    43c4:	83 81       	ldd	r24, Z+3	; 0x03
    43c6:	81 ff       	sbrs	r24, 1
    43c8:	44 c3       	rjmp	.+1672   	; 0x4a52 <vfprintf+0x6c8>
    43ca:	9e 01       	movw	r18, r28
    43cc:	2f 5f       	subi	r18, 0xFF	; 255
    43ce:	3f 4f       	sbci	r19, 0xFF	; 255
    43d0:	39 01       	movw	r6, r18
    43d2:	f7 01       	movw	r30, r14
    43d4:	93 81       	ldd	r25, Z+3	; 0x03
    43d6:	f1 01       	movw	r30, r2
    43d8:	93 fd       	sbrc	r25, 3
    43da:	85 91       	lpm	r24, Z+
    43dc:	93 ff       	sbrs	r25, 3
    43de:	81 91       	ld	r24, Z+
    43e0:	1f 01       	movw	r2, r30
    43e2:	88 23       	and	r24, r24
    43e4:	09 f4       	brne	.+2      	; 0x43e8 <vfprintf+0x5e>
    43e6:	31 c3       	rjmp	.+1634   	; 0x4a4a <vfprintf+0x6c0>
    43e8:	85 32       	cpi	r24, 0x25	; 37
    43ea:	39 f4       	brne	.+14     	; 0x43fa <vfprintf+0x70>
    43ec:	93 fd       	sbrc	r25, 3
    43ee:	85 91       	lpm	r24, Z+
    43f0:	93 ff       	sbrs	r25, 3
    43f2:	81 91       	ld	r24, Z+
    43f4:	1f 01       	movw	r2, r30
    43f6:	85 32       	cpi	r24, 0x25	; 37
    43f8:	39 f4       	brne	.+14     	; 0x4408 <vfprintf+0x7e>
    43fa:	b7 01       	movw	r22, r14
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4402:	56 01       	movw	r10, r12
    4404:	65 01       	movw	r12, r10
    4406:	e5 cf       	rjmp	.-54     	; 0x43d2 <vfprintf+0x48>
    4408:	10 e0       	ldi	r17, 0x00	; 0
    440a:	51 2c       	mov	r5, r1
    440c:	91 2c       	mov	r9, r1
    440e:	ff e1       	ldi	r31, 0x1F	; 31
    4410:	f9 15       	cp	r31, r9
    4412:	d8 f0       	brcs	.+54     	; 0x444a <vfprintf+0xc0>
    4414:	8b 32       	cpi	r24, 0x2B	; 43
    4416:	79 f0       	breq	.+30     	; 0x4436 <vfprintf+0xac>
    4418:	38 f4       	brcc	.+14     	; 0x4428 <vfprintf+0x9e>
    441a:	80 32       	cpi	r24, 0x20	; 32
    441c:	79 f0       	breq	.+30     	; 0x443c <vfprintf+0xb2>
    441e:	83 32       	cpi	r24, 0x23	; 35
    4420:	a1 f4       	brne	.+40     	; 0x444a <vfprintf+0xc0>
    4422:	f9 2d       	mov	r31, r9
    4424:	f0 61       	ori	r31, 0x10	; 16
    4426:	2e c0       	rjmp	.+92     	; 0x4484 <vfprintf+0xfa>
    4428:	8d 32       	cpi	r24, 0x2D	; 45
    442a:	61 f0       	breq	.+24     	; 0x4444 <vfprintf+0xba>
    442c:	80 33       	cpi	r24, 0x30	; 48
    442e:	69 f4       	brne	.+26     	; 0x444a <vfprintf+0xc0>
    4430:	29 2d       	mov	r18, r9
    4432:	21 60       	ori	r18, 0x01	; 1
    4434:	2d c0       	rjmp	.+90     	; 0x4490 <vfprintf+0x106>
    4436:	39 2d       	mov	r19, r9
    4438:	32 60       	ori	r19, 0x02	; 2
    443a:	93 2e       	mov	r9, r19
    443c:	89 2d       	mov	r24, r9
    443e:	84 60       	ori	r24, 0x04	; 4
    4440:	98 2e       	mov	r9, r24
    4442:	2a c0       	rjmp	.+84     	; 0x4498 <vfprintf+0x10e>
    4444:	e9 2d       	mov	r30, r9
    4446:	e8 60       	ori	r30, 0x08	; 8
    4448:	15 c0       	rjmp	.+42     	; 0x4474 <vfprintf+0xea>
    444a:	97 fc       	sbrc	r9, 7
    444c:	2d c0       	rjmp	.+90     	; 0x44a8 <vfprintf+0x11e>
    444e:	20 ed       	ldi	r18, 0xD0	; 208
    4450:	28 0f       	add	r18, r24
    4452:	2a 30       	cpi	r18, 0x0A	; 10
    4454:	88 f4       	brcc	.+34     	; 0x4478 <vfprintf+0xee>
    4456:	96 fe       	sbrs	r9, 6
    4458:	06 c0       	rjmp	.+12     	; 0x4466 <vfprintf+0xdc>
    445a:	3a e0       	ldi	r19, 0x0A	; 10
    445c:	13 9f       	mul	r17, r19
    445e:	20 0d       	add	r18, r0
    4460:	11 24       	eor	r1, r1
    4462:	12 2f       	mov	r17, r18
    4464:	19 c0       	rjmp	.+50     	; 0x4498 <vfprintf+0x10e>
    4466:	8a e0       	ldi	r24, 0x0A	; 10
    4468:	58 9e       	mul	r5, r24
    446a:	20 0d       	add	r18, r0
    446c:	11 24       	eor	r1, r1
    446e:	52 2e       	mov	r5, r18
    4470:	e9 2d       	mov	r30, r9
    4472:	e0 62       	ori	r30, 0x20	; 32
    4474:	9e 2e       	mov	r9, r30
    4476:	10 c0       	rjmp	.+32     	; 0x4498 <vfprintf+0x10e>
    4478:	8e 32       	cpi	r24, 0x2E	; 46
    447a:	31 f4       	brne	.+12     	; 0x4488 <vfprintf+0xfe>
    447c:	96 fc       	sbrc	r9, 6
    447e:	e5 c2       	rjmp	.+1482   	; 0x4a4a <vfprintf+0x6c0>
    4480:	f9 2d       	mov	r31, r9
    4482:	f0 64       	ori	r31, 0x40	; 64
    4484:	9f 2e       	mov	r9, r31
    4486:	08 c0       	rjmp	.+16     	; 0x4498 <vfprintf+0x10e>
    4488:	8c 36       	cpi	r24, 0x6C	; 108
    448a:	21 f4       	brne	.+8      	; 0x4494 <vfprintf+0x10a>
    448c:	29 2d       	mov	r18, r9
    448e:	20 68       	ori	r18, 0x80	; 128
    4490:	92 2e       	mov	r9, r18
    4492:	02 c0       	rjmp	.+4      	; 0x4498 <vfprintf+0x10e>
    4494:	88 36       	cpi	r24, 0x68	; 104
    4496:	41 f4       	brne	.+16     	; 0x44a8 <vfprintf+0x11e>
    4498:	f1 01       	movw	r30, r2
    449a:	93 fd       	sbrc	r25, 3
    449c:	85 91       	lpm	r24, Z+
    449e:	93 ff       	sbrs	r25, 3
    44a0:	81 91       	ld	r24, Z+
    44a2:	1f 01       	movw	r2, r30
    44a4:	81 11       	cpse	r24, r1
    44a6:	b3 cf       	rjmp	.-154    	; 0x440e <vfprintf+0x84>
    44a8:	9b eb       	ldi	r25, 0xBB	; 187
    44aa:	98 0f       	add	r25, r24
    44ac:	93 30       	cpi	r25, 0x03	; 3
    44ae:	20 f4       	brcc	.+8      	; 0x44b8 <vfprintf+0x12e>
    44b0:	99 2d       	mov	r25, r9
    44b2:	90 61       	ori	r25, 0x10	; 16
    44b4:	80 5e       	subi	r24, 0xE0	; 224
    44b6:	07 c0       	rjmp	.+14     	; 0x44c6 <vfprintf+0x13c>
    44b8:	9b e9       	ldi	r25, 0x9B	; 155
    44ba:	98 0f       	add	r25, r24
    44bc:	93 30       	cpi	r25, 0x03	; 3
    44be:	08 f0       	brcs	.+2      	; 0x44c2 <vfprintf+0x138>
    44c0:	66 c1       	rjmp	.+716    	; 0x478e <vfprintf+0x404>
    44c2:	99 2d       	mov	r25, r9
    44c4:	9f 7e       	andi	r25, 0xEF	; 239
    44c6:	96 ff       	sbrs	r25, 6
    44c8:	16 e0       	ldi	r17, 0x06	; 6
    44ca:	9f 73       	andi	r25, 0x3F	; 63
    44cc:	99 2e       	mov	r9, r25
    44ce:	85 36       	cpi	r24, 0x65	; 101
    44d0:	19 f4       	brne	.+6      	; 0x44d8 <vfprintf+0x14e>
    44d2:	90 64       	ori	r25, 0x40	; 64
    44d4:	99 2e       	mov	r9, r25
    44d6:	08 c0       	rjmp	.+16     	; 0x44e8 <vfprintf+0x15e>
    44d8:	86 36       	cpi	r24, 0x66	; 102
    44da:	21 f4       	brne	.+8      	; 0x44e4 <vfprintf+0x15a>
    44dc:	39 2f       	mov	r19, r25
    44de:	30 68       	ori	r19, 0x80	; 128
    44e0:	93 2e       	mov	r9, r19
    44e2:	02 c0       	rjmp	.+4      	; 0x44e8 <vfprintf+0x15e>
    44e4:	11 11       	cpse	r17, r1
    44e6:	11 50       	subi	r17, 0x01	; 1
    44e8:	97 fe       	sbrs	r9, 7
    44ea:	07 c0       	rjmp	.+14     	; 0x44fa <vfprintf+0x170>
    44ec:	1c 33       	cpi	r17, 0x3C	; 60
    44ee:	50 f4       	brcc	.+20     	; 0x4504 <vfprintf+0x17a>
    44f0:	44 24       	eor	r4, r4
    44f2:	43 94       	inc	r4
    44f4:	41 0e       	add	r4, r17
    44f6:	27 e0       	ldi	r18, 0x07	; 7
    44f8:	0b c0       	rjmp	.+22     	; 0x4510 <vfprintf+0x186>
    44fa:	18 30       	cpi	r17, 0x08	; 8
    44fc:	38 f0       	brcs	.+14     	; 0x450c <vfprintf+0x182>
    44fe:	27 e0       	ldi	r18, 0x07	; 7
    4500:	17 e0       	ldi	r17, 0x07	; 7
    4502:	05 c0       	rjmp	.+10     	; 0x450e <vfprintf+0x184>
    4504:	27 e0       	ldi	r18, 0x07	; 7
    4506:	9c e3       	ldi	r25, 0x3C	; 60
    4508:	49 2e       	mov	r4, r25
    450a:	02 c0       	rjmp	.+4      	; 0x4510 <vfprintf+0x186>
    450c:	21 2f       	mov	r18, r17
    450e:	41 2c       	mov	r4, r1
    4510:	56 01       	movw	r10, r12
    4512:	84 e0       	ldi	r24, 0x04	; 4
    4514:	a8 0e       	add	r10, r24
    4516:	b1 1c       	adc	r11, r1
    4518:	f6 01       	movw	r30, r12
    451a:	60 81       	ld	r22, Z
    451c:	71 81       	ldd	r23, Z+1	; 0x01
    451e:	82 81       	ldd	r24, Z+2	; 0x02
    4520:	93 81       	ldd	r25, Z+3	; 0x03
    4522:	04 2d       	mov	r16, r4
    4524:	a3 01       	movw	r20, r6
    4526:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__ftoa_engine>
    452a:	6c 01       	movw	r12, r24
    452c:	f9 81       	ldd	r31, Y+1	; 0x01
    452e:	fc 87       	std	Y+12, r31	; 0x0c
    4530:	f0 ff       	sbrs	r31, 0
    4532:	02 c0       	rjmp	.+4      	; 0x4538 <vfprintf+0x1ae>
    4534:	f3 ff       	sbrs	r31, 3
    4536:	06 c0       	rjmp	.+12     	; 0x4544 <vfprintf+0x1ba>
    4538:	91 fc       	sbrc	r9, 1
    453a:	06 c0       	rjmp	.+12     	; 0x4548 <vfprintf+0x1be>
    453c:	92 fe       	sbrs	r9, 2
    453e:	06 c0       	rjmp	.+12     	; 0x454c <vfprintf+0x1c2>
    4540:	00 e2       	ldi	r16, 0x20	; 32
    4542:	05 c0       	rjmp	.+10     	; 0x454e <vfprintf+0x1c4>
    4544:	0d e2       	ldi	r16, 0x2D	; 45
    4546:	03 c0       	rjmp	.+6      	; 0x454e <vfprintf+0x1c4>
    4548:	0b e2       	ldi	r16, 0x2B	; 43
    454a:	01 c0       	rjmp	.+2      	; 0x454e <vfprintf+0x1c4>
    454c:	00 e0       	ldi	r16, 0x00	; 0
    454e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4550:	8c 70       	andi	r24, 0x0C	; 12
    4552:	19 f0       	breq	.+6      	; 0x455a <vfprintf+0x1d0>
    4554:	01 11       	cpse	r16, r1
    4556:	5a c2       	rjmp	.+1204   	; 0x4a0c <vfprintf+0x682>
    4558:	9b c2       	rjmp	.+1334   	; 0x4a90 <vfprintf+0x706>
    455a:	97 fe       	sbrs	r9, 7
    455c:	10 c0       	rjmp	.+32     	; 0x457e <vfprintf+0x1f4>
    455e:	4c 0c       	add	r4, r12
    4560:	fc 85       	ldd	r31, Y+12	; 0x0c
    4562:	f4 ff       	sbrs	r31, 4
    4564:	04 c0       	rjmp	.+8      	; 0x456e <vfprintf+0x1e4>
    4566:	8a 81       	ldd	r24, Y+2	; 0x02
    4568:	81 33       	cpi	r24, 0x31	; 49
    456a:	09 f4       	brne	.+2      	; 0x456e <vfprintf+0x1e4>
    456c:	4a 94       	dec	r4
    456e:	14 14       	cp	r1, r4
    4570:	74 f5       	brge	.+92     	; 0x45ce <vfprintf+0x244>
    4572:	28 e0       	ldi	r18, 0x08	; 8
    4574:	24 15       	cp	r18, r4
    4576:	78 f5       	brcc	.+94     	; 0x45d6 <vfprintf+0x24c>
    4578:	88 e0       	ldi	r24, 0x08	; 8
    457a:	48 2e       	mov	r4, r24
    457c:	2c c0       	rjmp	.+88     	; 0x45d6 <vfprintf+0x24c>
    457e:	96 fc       	sbrc	r9, 6
    4580:	2a c0       	rjmp	.+84     	; 0x45d6 <vfprintf+0x24c>
    4582:	81 2f       	mov	r24, r17
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	8c 15       	cp	r24, r12
    4588:	9d 05       	cpc	r25, r13
    458a:	9c f0       	brlt	.+38     	; 0x45b2 <vfprintf+0x228>
    458c:	3c ef       	ldi	r19, 0xFC	; 252
    458e:	c3 16       	cp	r12, r19
    4590:	3f ef       	ldi	r19, 0xFF	; 255
    4592:	d3 06       	cpc	r13, r19
    4594:	74 f0       	brlt	.+28     	; 0x45b2 <vfprintf+0x228>
    4596:	89 2d       	mov	r24, r9
    4598:	80 68       	ori	r24, 0x80	; 128
    459a:	98 2e       	mov	r9, r24
    459c:	0a c0       	rjmp	.+20     	; 0x45b2 <vfprintf+0x228>
    459e:	e2 e0       	ldi	r30, 0x02	; 2
    45a0:	f0 e0       	ldi	r31, 0x00	; 0
    45a2:	ec 0f       	add	r30, r28
    45a4:	fd 1f       	adc	r31, r29
    45a6:	e1 0f       	add	r30, r17
    45a8:	f1 1d       	adc	r31, r1
    45aa:	80 81       	ld	r24, Z
    45ac:	80 33       	cpi	r24, 0x30	; 48
    45ae:	19 f4       	brne	.+6      	; 0x45b6 <vfprintf+0x22c>
    45b0:	11 50       	subi	r17, 0x01	; 1
    45b2:	11 11       	cpse	r17, r1
    45b4:	f4 cf       	rjmp	.-24     	; 0x459e <vfprintf+0x214>
    45b6:	97 fe       	sbrs	r9, 7
    45b8:	0e c0       	rjmp	.+28     	; 0x45d6 <vfprintf+0x24c>
    45ba:	44 24       	eor	r4, r4
    45bc:	43 94       	inc	r4
    45be:	41 0e       	add	r4, r17
    45c0:	81 2f       	mov	r24, r17
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	c8 16       	cp	r12, r24
    45c6:	d9 06       	cpc	r13, r25
    45c8:	2c f4       	brge	.+10     	; 0x45d4 <vfprintf+0x24a>
    45ca:	1c 19       	sub	r17, r12
    45cc:	04 c0       	rjmp	.+8      	; 0x45d6 <vfprintf+0x24c>
    45ce:	44 24       	eor	r4, r4
    45d0:	43 94       	inc	r4
    45d2:	01 c0       	rjmp	.+2      	; 0x45d6 <vfprintf+0x24c>
    45d4:	10 e0       	ldi	r17, 0x00	; 0
    45d6:	97 fe       	sbrs	r9, 7
    45d8:	06 c0       	rjmp	.+12     	; 0x45e6 <vfprintf+0x25c>
    45da:	1c 14       	cp	r1, r12
    45dc:	1d 04       	cpc	r1, r13
    45de:	34 f4       	brge	.+12     	; 0x45ec <vfprintf+0x262>
    45e0:	c6 01       	movw	r24, r12
    45e2:	01 96       	adiw	r24, 0x01	; 1
    45e4:	05 c0       	rjmp	.+10     	; 0x45f0 <vfprintf+0x266>
    45e6:	85 e0       	ldi	r24, 0x05	; 5
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	02 c0       	rjmp	.+4      	; 0x45f0 <vfprintf+0x266>
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	01 11       	cpse	r16, r1
    45f2:	01 96       	adiw	r24, 0x01	; 1
    45f4:	11 23       	and	r17, r17
    45f6:	31 f0       	breq	.+12     	; 0x4604 <vfprintf+0x27a>
    45f8:	21 2f       	mov	r18, r17
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	2f 5f       	subi	r18, 0xFF	; 255
    45fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4600:	82 0f       	add	r24, r18
    4602:	93 1f       	adc	r25, r19
    4604:	25 2d       	mov	r18, r5
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	82 17       	cp	r24, r18
    460a:	93 07       	cpc	r25, r19
    460c:	14 f4       	brge	.+4      	; 0x4612 <vfprintf+0x288>
    460e:	58 1a       	sub	r5, r24
    4610:	01 c0       	rjmp	.+2      	; 0x4614 <vfprintf+0x28a>
    4612:	51 2c       	mov	r5, r1
    4614:	89 2d       	mov	r24, r9
    4616:	89 70       	andi	r24, 0x09	; 9
    4618:	49 f4       	brne	.+18     	; 0x462c <vfprintf+0x2a2>
    461a:	55 20       	and	r5, r5
    461c:	39 f0       	breq	.+14     	; 0x462c <vfprintf+0x2a2>
    461e:	b7 01       	movw	r22, r14
    4620:	80 e2       	ldi	r24, 0x20	; 32
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4628:	5a 94       	dec	r5
    462a:	f7 cf       	rjmp	.-18     	; 0x461a <vfprintf+0x290>
    462c:	00 23       	and	r16, r16
    462e:	29 f0       	breq	.+10     	; 0x463a <vfprintf+0x2b0>
    4630:	b7 01       	movw	r22, r14
    4632:	80 2f       	mov	r24, r16
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    463a:	93 fc       	sbrc	r9, 3
    463c:	09 c0       	rjmp	.+18     	; 0x4650 <vfprintf+0x2c6>
    463e:	55 20       	and	r5, r5
    4640:	39 f0       	breq	.+14     	; 0x4650 <vfprintf+0x2c6>
    4642:	b7 01       	movw	r22, r14
    4644:	80 e3       	ldi	r24, 0x30	; 48
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    464c:	5a 94       	dec	r5
    464e:	f7 cf       	rjmp	.-18     	; 0x463e <vfprintf+0x2b4>
    4650:	97 fe       	sbrs	r9, 7
    4652:	4c c0       	rjmp	.+152    	; 0x46ec <vfprintf+0x362>
    4654:	46 01       	movw	r8, r12
    4656:	d7 fe       	sbrs	r13, 7
    4658:	02 c0       	rjmp	.+4      	; 0x465e <vfprintf+0x2d4>
    465a:	81 2c       	mov	r8, r1
    465c:	91 2c       	mov	r9, r1
    465e:	c6 01       	movw	r24, r12
    4660:	88 19       	sub	r24, r8
    4662:	99 09       	sbc	r25, r9
    4664:	f3 01       	movw	r30, r6
    4666:	e8 0f       	add	r30, r24
    4668:	f9 1f       	adc	r31, r25
    466a:	ed 87       	std	Y+13, r30	; 0x0d
    466c:	fe 87       	std	Y+14, r31	; 0x0e
    466e:	96 01       	movw	r18, r12
    4670:	24 19       	sub	r18, r4
    4672:	31 09       	sbc	r19, r1
    4674:	2f 87       	std	Y+15, r18	; 0x0f
    4676:	38 8b       	std	Y+16, r19	; 0x10
    4678:	01 2f       	mov	r16, r17
    467a:	10 e0       	ldi	r17, 0x00	; 0
    467c:	11 95       	neg	r17
    467e:	01 95       	neg	r16
    4680:	11 09       	sbc	r17, r1
    4682:	3f ef       	ldi	r19, 0xFF	; 255
    4684:	83 16       	cp	r8, r19
    4686:	93 06       	cpc	r9, r19
    4688:	29 f4       	brne	.+10     	; 0x4694 <vfprintf+0x30a>
    468a:	b7 01       	movw	r22, r14
    468c:	8e e2       	ldi	r24, 0x2E	; 46
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4694:	c8 14       	cp	r12, r8
    4696:	d9 04       	cpc	r13, r9
    4698:	4c f0       	brlt	.+18     	; 0x46ac <vfprintf+0x322>
    469a:	8f 85       	ldd	r24, Y+15	; 0x0f
    469c:	98 89       	ldd	r25, Y+16	; 0x10
    469e:	88 15       	cp	r24, r8
    46a0:	99 05       	cpc	r25, r9
    46a2:	24 f4       	brge	.+8      	; 0x46ac <vfprintf+0x322>
    46a4:	ed 85       	ldd	r30, Y+13	; 0x0d
    46a6:	fe 85       	ldd	r31, Y+14	; 0x0e
    46a8:	81 81       	ldd	r24, Z+1	; 0x01
    46aa:	01 c0       	rjmp	.+2      	; 0x46ae <vfprintf+0x324>
    46ac:	80 e3       	ldi	r24, 0x30	; 48
    46ae:	f1 e0       	ldi	r31, 0x01	; 1
    46b0:	8f 1a       	sub	r8, r31
    46b2:	91 08       	sbc	r9, r1
    46b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    46b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    46b8:	2f 5f       	subi	r18, 0xFF	; 255
    46ba:	3f 4f       	sbci	r19, 0xFF	; 255
    46bc:	2d 87       	std	Y+13, r18	; 0x0d
    46be:	3e 87       	std	Y+14, r19	; 0x0e
    46c0:	80 16       	cp	r8, r16
    46c2:	91 06       	cpc	r9, r17
    46c4:	2c f0       	brlt	.+10     	; 0x46d0 <vfprintf+0x346>
    46c6:	b7 01       	movw	r22, r14
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    46ce:	d9 cf       	rjmp	.-78     	; 0x4682 <vfprintf+0x2f8>
    46d0:	c8 14       	cp	r12, r8
    46d2:	d9 04       	cpc	r13, r9
    46d4:	41 f4       	brne	.+16     	; 0x46e6 <vfprintf+0x35c>
    46d6:	9a 81       	ldd	r25, Y+2	; 0x02
    46d8:	96 33       	cpi	r25, 0x36	; 54
    46da:	20 f4       	brcc	.+8      	; 0x46e4 <vfprintf+0x35a>
    46dc:	95 33       	cpi	r25, 0x35	; 53
    46de:	19 f4       	brne	.+6      	; 0x46e6 <vfprintf+0x35c>
    46e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    46e2:	34 ff       	sbrs	r19, 4
    46e4:	81 e3       	ldi	r24, 0x31	; 49
    46e6:	b7 01       	movw	r22, r14
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	4e c0       	rjmp	.+156    	; 0x4788 <vfprintf+0x3fe>
    46ec:	8a 81       	ldd	r24, Y+2	; 0x02
    46ee:	81 33       	cpi	r24, 0x31	; 49
    46f0:	19 f0       	breq	.+6      	; 0x46f8 <vfprintf+0x36e>
    46f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    46f4:	9f 7e       	andi	r25, 0xEF	; 239
    46f6:	9c 87       	std	Y+12, r25	; 0x0c
    46f8:	b7 01       	movw	r22, r14
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4700:	11 11       	cpse	r17, r1
    4702:	05 c0       	rjmp	.+10     	; 0x470e <vfprintf+0x384>
    4704:	94 fc       	sbrc	r9, 4
    4706:	18 c0       	rjmp	.+48     	; 0x4738 <vfprintf+0x3ae>
    4708:	85 e6       	ldi	r24, 0x65	; 101
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	17 c0       	rjmp	.+46     	; 0x473c <vfprintf+0x3b2>
    470e:	b7 01       	movw	r22, r14
    4710:	8e e2       	ldi	r24, 0x2E	; 46
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4718:	1e 5f       	subi	r17, 0xFE	; 254
    471a:	82 e0       	ldi	r24, 0x02	; 2
    471c:	01 e0       	ldi	r16, 0x01	; 1
    471e:	08 0f       	add	r16, r24
    4720:	f3 01       	movw	r30, r6
    4722:	e8 0f       	add	r30, r24
    4724:	f1 1d       	adc	r31, r1
    4726:	80 81       	ld	r24, Z
    4728:	b7 01       	movw	r22, r14
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4730:	80 2f       	mov	r24, r16
    4732:	01 13       	cpse	r16, r17
    4734:	f3 cf       	rjmp	.-26     	; 0x471c <vfprintf+0x392>
    4736:	e6 cf       	rjmp	.-52     	; 0x4704 <vfprintf+0x37a>
    4738:	85 e4       	ldi	r24, 0x45	; 69
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	b7 01       	movw	r22, r14
    473e:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4742:	d7 fc       	sbrc	r13, 7
    4744:	06 c0       	rjmp	.+12     	; 0x4752 <vfprintf+0x3c8>
    4746:	c1 14       	cp	r12, r1
    4748:	d1 04       	cpc	r13, r1
    474a:	41 f4       	brne	.+16     	; 0x475c <vfprintf+0x3d2>
    474c:	ec 85       	ldd	r30, Y+12	; 0x0c
    474e:	e4 ff       	sbrs	r30, 4
    4750:	05 c0       	rjmp	.+10     	; 0x475c <vfprintf+0x3d2>
    4752:	d1 94       	neg	r13
    4754:	c1 94       	neg	r12
    4756:	d1 08       	sbc	r13, r1
    4758:	8d e2       	ldi	r24, 0x2D	; 45
    475a:	01 c0       	rjmp	.+2      	; 0x475e <vfprintf+0x3d4>
    475c:	8b e2       	ldi	r24, 0x2B	; 43
    475e:	b7 01       	movw	r22, r14
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4766:	80 e3       	ldi	r24, 0x30	; 48
    4768:	2a e0       	ldi	r18, 0x0A	; 10
    476a:	c2 16       	cp	r12, r18
    476c:	d1 04       	cpc	r13, r1
    476e:	2c f0       	brlt	.+10     	; 0x477a <vfprintf+0x3f0>
    4770:	8f 5f       	subi	r24, 0xFF	; 255
    4772:	fa e0       	ldi	r31, 0x0A	; 10
    4774:	cf 1a       	sub	r12, r31
    4776:	d1 08       	sbc	r13, r1
    4778:	f7 cf       	rjmp	.-18     	; 0x4768 <vfprintf+0x3de>
    477a:	b7 01       	movw	r22, r14
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4782:	b7 01       	movw	r22, r14
    4784:	c6 01       	movw	r24, r12
    4786:	c0 96       	adiw	r24, 0x30	; 48
    4788:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    478c:	54 c1       	rjmp	.+680    	; 0x4a36 <vfprintf+0x6ac>
    478e:	83 36       	cpi	r24, 0x63	; 99
    4790:	31 f0       	breq	.+12     	; 0x479e <vfprintf+0x414>
    4792:	83 37       	cpi	r24, 0x73	; 115
    4794:	79 f0       	breq	.+30     	; 0x47b4 <vfprintf+0x42a>
    4796:	83 35       	cpi	r24, 0x53	; 83
    4798:	09 f0       	breq	.+2      	; 0x479c <vfprintf+0x412>
    479a:	56 c0       	rjmp	.+172    	; 0x4848 <vfprintf+0x4be>
    479c:	20 c0       	rjmp	.+64     	; 0x47de <vfprintf+0x454>
    479e:	56 01       	movw	r10, r12
    47a0:	32 e0       	ldi	r19, 0x02	; 2
    47a2:	a3 0e       	add	r10, r19
    47a4:	b1 1c       	adc	r11, r1
    47a6:	f6 01       	movw	r30, r12
    47a8:	80 81       	ld	r24, Z
    47aa:	89 83       	std	Y+1, r24	; 0x01
    47ac:	01 e0       	ldi	r16, 0x01	; 1
    47ae:	10 e0       	ldi	r17, 0x00	; 0
    47b0:	63 01       	movw	r12, r6
    47b2:	12 c0       	rjmp	.+36     	; 0x47d8 <vfprintf+0x44e>
    47b4:	56 01       	movw	r10, r12
    47b6:	f2 e0       	ldi	r31, 0x02	; 2
    47b8:	af 0e       	add	r10, r31
    47ba:	b1 1c       	adc	r11, r1
    47bc:	f6 01       	movw	r30, r12
    47be:	c0 80       	ld	r12, Z
    47c0:	d1 80       	ldd	r13, Z+1	; 0x01
    47c2:	96 fe       	sbrs	r9, 6
    47c4:	03 c0       	rjmp	.+6      	; 0x47cc <vfprintf+0x442>
    47c6:	61 2f       	mov	r22, r17
    47c8:	70 e0       	ldi	r23, 0x00	; 0
    47ca:	02 c0       	rjmp	.+4      	; 0x47d0 <vfprintf+0x446>
    47cc:	6f ef       	ldi	r22, 0xFF	; 255
    47ce:	7f ef       	ldi	r23, 0xFF	; 255
    47d0:	c6 01       	movw	r24, r12
    47d2:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <strnlen>
    47d6:	8c 01       	movw	r16, r24
    47d8:	f9 2d       	mov	r31, r9
    47da:	ff 77       	andi	r31, 0x7F	; 127
    47dc:	14 c0       	rjmp	.+40     	; 0x4806 <vfprintf+0x47c>
    47de:	56 01       	movw	r10, r12
    47e0:	22 e0       	ldi	r18, 0x02	; 2
    47e2:	a2 0e       	add	r10, r18
    47e4:	b1 1c       	adc	r11, r1
    47e6:	f6 01       	movw	r30, r12
    47e8:	c0 80       	ld	r12, Z
    47ea:	d1 80       	ldd	r13, Z+1	; 0x01
    47ec:	96 fe       	sbrs	r9, 6
    47ee:	03 c0       	rjmp	.+6      	; 0x47f6 <vfprintf+0x46c>
    47f0:	61 2f       	mov	r22, r17
    47f2:	70 e0       	ldi	r23, 0x00	; 0
    47f4:	02 c0       	rjmp	.+4      	; 0x47fa <vfprintf+0x470>
    47f6:	6f ef       	ldi	r22, 0xFF	; 255
    47f8:	7f ef       	ldi	r23, 0xFF	; 255
    47fa:	c6 01       	movw	r24, r12
    47fc:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <strnlen_P>
    4800:	8c 01       	movw	r16, r24
    4802:	f9 2d       	mov	r31, r9
    4804:	f0 68       	ori	r31, 0x80	; 128
    4806:	9f 2e       	mov	r9, r31
    4808:	f3 fd       	sbrc	r31, 3
    480a:	1a c0       	rjmp	.+52     	; 0x4840 <vfprintf+0x4b6>
    480c:	85 2d       	mov	r24, r5
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	08 17       	cp	r16, r24
    4812:	19 07       	cpc	r17, r25
    4814:	a8 f4       	brcc	.+42     	; 0x4840 <vfprintf+0x4b6>
    4816:	b7 01       	movw	r22, r14
    4818:	80 e2       	ldi	r24, 0x20	; 32
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4820:	5a 94       	dec	r5
    4822:	f4 cf       	rjmp	.-24     	; 0x480c <vfprintf+0x482>
    4824:	f6 01       	movw	r30, r12
    4826:	97 fc       	sbrc	r9, 7
    4828:	85 91       	lpm	r24, Z+
    482a:	97 fe       	sbrs	r9, 7
    482c:	81 91       	ld	r24, Z+
    482e:	6f 01       	movw	r12, r30
    4830:	b7 01       	movw	r22, r14
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4838:	51 10       	cpse	r5, r1
    483a:	5a 94       	dec	r5
    483c:	01 50       	subi	r16, 0x01	; 1
    483e:	11 09       	sbc	r17, r1
    4840:	01 15       	cp	r16, r1
    4842:	11 05       	cpc	r17, r1
    4844:	79 f7       	brne	.-34     	; 0x4824 <vfprintf+0x49a>
    4846:	f7 c0       	rjmp	.+494    	; 0x4a36 <vfprintf+0x6ac>
    4848:	84 36       	cpi	r24, 0x64	; 100
    484a:	11 f0       	breq	.+4      	; 0x4850 <vfprintf+0x4c6>
    484c:	89 36       	cpi	r24, 0x69	; 105
    484e:	61 f5       	brne	.+88     	; 0x48a8 <vfprintf+0x51e>
    4850:	56 01       	movw	r10, r12
    4852:	97 fe       	sbrs	r9, 7
    4854:	09 c0       	rjmp	.+18     	; 0x4868 <vfprintf+0x4de>
    4856:	24 e0       	ldi	r18, 0x04	; 4
    4858:	a2 0e       	add	r10, r18
    485a:	b1 1c       	adc	r11, r1
    485c:	f6 01       	movw	r30, r12
    485e:	60 81       	ld	r22, Z
    4860:	71 81       	ldd	r23, Z+1	; 0x01
    4862:	82 81       	ldd	r24, Z+2	; 0x02
    4864:	93 81       	ldd	r25, Z+3	; 0x03
    4866:	0a c0       	rjmp	.+20     	; 0x487c <vfprintf+0x4f2>
    4868:	f2 e0       	ldi	r31, 0x02	; 2
    486a:	af 0e       	add	r10, r31
    486c:	b1 1c       	adc	r11, r1
    486e:	f6 01       	movw	r30, r12
    4870:	60 81       	ld	r22, Z
    4872:	71 81       	ldd	r23, Z+1	; 0x01
    4874:	07 2e       	mov	r0, r23
    4876:	00 0c       	add	r0, r0
    4878:	88 0b       	sbc	r24, r24
    487a:	99 0b       	sbc	r25, r25
    487c:	f9 2d       	mov	r31, r9
    487e:	ff 76       	andi	r31, 0x6F	; 111
    4880:	9f 2e       	mov	r9, r31
    4882:	97 ff       	sbrs	r25, 7
    4884:	09 c0       	rjmp	.+18     	; 0x4898 <vfprintf+0x50e>
    4886:	90 95       	com	r25
    4888:	80 95       	com	r24
    488a:	70 95       	com	r23
    488c:	61 95       	neg	r22
    488e:	7f 4f       	sbci	r23, 0xFF	; 255
    4890:	8f 4f       	sbci	r24, 0xFF	; 255
    4892:	9f 4f       	sbci	r25, 0xFF	; 255
    4894:	f0 68       	ori	r31, 0x80	; 128
    4896:	9f 2e       	mov	r9, r31
    4898:	2a e0       	ldi	r18, 0x0A	; 10
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	a3 01       	movw	r20, r6
    489e:	0e 94 09 27 	call	0x4e12	; 0x4e12 <__ultoa_invert>
    48a2:	c8 2e       	mov	r12, r24
    48a4:	c6 18       	sub	r12, r6
    48a6:	3f c0       	rjmp	.+126    	; 0x4926 <vfprintf+0x59c>
    48a8:	09 2d       	mov	r16, r9
    48aa:	85 37       	cpi	r24, 0x75	; 117
    48ac:	21 f4       	brne	.+8      	; 0x48b6 <vfprintf+0x52c>
    48ae:	0f 7e       	andi	r16, 0xEF	; 239
    48b0:	2a e0       	ldi	r18, 0x0A	; 10
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	1d c0       	rjmp	.+58     	; 0x48f0 <vfprintf+0x566>
    48b6:	09 7f       	andi	r16, 0xF9	; 249
    48b8:	8f 36       	cpi	r24, 0x6F	; 111
    48ba:	91 f0       	breq	.+36     	; 0x48e0 <vfprintf+0x556>
    48bc:	18 f4       	brcc	.+6      	; 0x48c4 <vfprintf+0x53a>
    48be:	88 35       	cpi	r24, 0x58	; 88
    48c0:	59 f0       	breq	.+22     	; 0x48d8 <vfprintf+0x54e>
    48c2:	c3 c0       	rjmp	.+390    	; 0x4a4a <vfprintf+0x6c0>
    48c4:	80 37       	cpi	r24, 0x70	; 112
    48c6:	19 f0       	breq	.+6      	; 0x48ce <vfprintf+0x544>
    48c8:	88 37       	cpi	r24, 0x78	; 120
    48ca:	11 f0       	breq	.+4      	; 0x48d0 <vfprintf+0x546>
    48cc:	be c0       	rjmp	.+380    	; 0x4a4a <vfprintf+0x6c0>
    48ce:	00 61       	ori	r16, 0x10	; 16
    48d0:	04 ff       	sbrs	r16, 4
    48d2:	09 c0       	rjmp	.+18     	; 0x48e6 <vfprintf+0x55c>
    48d4:	04 60       	ori	r16, 0x04	; 4
    48d6:	07 c0       	rjmp	.+14     	; 0x48e6 <vfprintf+0x55c>
    48d8:	94 fe       	sbrs	r9, 4
    48da:	08 c0       	rjmp	.+16     	; 0x48ec <vfprintf+0x562>
    48dc:	06 60       	ori	r16, 0x06	; 6
    48de:	06 c0       	rjmp	.+12     	; 0x48ec <vfprintf+0x562>
    48e0:	28 e0       	ldi	r18, 0x08	; 8
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	05 c0       	rjmp	.+10     	; 0x48f0 <vfprintf+0x566>
    48e6:	20 e1       	ldi	r18, 0x10	; 16
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	02 c0       	rjmp	.+4      	; 0x48f0 <vfprintf+0x566>
    48ec:	20 e1       	ldi	r18, 0x10	; 16
    48ee:	32 e0       	ldi	r19, 0x02	; 2
    48f0:	56 01       	movw	r10, r12
    48f2:	07 ff       	sbrs	r16, 7
    48f4:	09 c0       	rjmp	.+18     	; 0x4908 <vfprintf+0x57e>
    48f6:	84 e0       	ldi	r24, 0x04	; 4
    48f8:	a8 0e       	add	r10, r24
    48fa:	b1 1c       	adc	r11, r1
    48fc:	f6 01       	movw	r30, r12
    48fe:	60 81       	ld	r22, Z
    4900:	71 81       	ldd	r23, Z+1	; 0x01
    4902:	82 81       	ldd	r24, Z+2	; 0x02
    4904:	93 81       	ldd	r25, Z+3	; 0x03
    4906:	08 c0       	rjmp	.+16     	; 0x4918 <vfprintf+0x58e>
    4908:	f2 e0       	ldi	r31, 0x02	; 2
    490a:	af 0e       	add	r10, r31
    490c:	b1 1c       	adc	r11, r1
    490e:	f6 01       	movw	r30, r12
    4910:	60 81       	ld	r22, Z
    4912:	71 81       	ldd	r23, Z+1	; 0x01
    4914:	80 e0       	ldi	r24, 0x00	; 0
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	a3 01       	movw	r20, r6
    491a:	0e 94 09 27 	call	0x4e12	; 0x4e12 <__ultoa_invert>
    491e:	c8 2e       	mov	r12, r24
    4920:	c6 18       	sub	r12, r6
    4922:	0f 77       	andi	r16, 0x7F	; 127
    4924:	90 2e       	mov	r9, r16
    4926:	96 fe       	sbrs	r9, 6
    4928:	0b c0       	rjmp	.+22     	; 0x4940 <vfprintf+0x5b6>
    492a:	09 2d       	mov	r16, r9
    492c:	0e 7f       	andi	r16, 0xFE	; 254
    492e:	c1 16       	cp	r12, r17
    4930:	50 f4       	brcc	.+20     	; 0x4946 <vfprintf+0x5bc>
    4932:	94 fe       	sbrs	r9, 4
    4934:	0a c0       	rjmp	.+20     	; 0x494a <vfprintf+0x5c0>
    4936:	92 fc       	sbrc	r9, 2
    4938:	08 c0       	rjmp	.+16     	; 0x494a <vfprintf+0x5c0>
    493a:	09 2d       	mov	r16, r9
    493c:	0e 7e       	andi	r16, 0xEE	; 238
    493e:	05 c0       	rjmp	.+10     	; 0x494a <vfprintf+0x5c0>
    4940:	dc 2c       	mov	r13, r12
    4942:	09 2d       	mov	r16, r9
    4944:	03 c0       	rjmp	.+6      	; 0x494c <vfprintf+0x5c2>
    4946:	dc 2c       	mov	r13, r12
    4948:	01 c0       	rjmp	.+2      	; 0x494c <vfprintf+0x5c2>
    494a:	d1 2e       	mov	r13, r17
    494c:	04 ff       	sbrs	r16, 4
    494e:	0d c0       	rjmp	.+26     	; 0x496a <vfprintf+0x5e0>
    4950:	fe 01       	movw	r30, r28
    4952:	ec 0d       	add	r30, r12
    4954:	f1 1d       	adc	r31, r1
    4956:	80 81       	ld	r24, Z
    4958:	80 33       	cpi	r24, 0x30	; 48
    495a:	11 f4       	brne	.+4      	; 0x4960 <vfprintf+0x5d6>
    495c:	09 7e       	andi	r16, 0xE9	; 233
    495e:	09 c0       	rjmp	.+18     	; 0x4972 <vfprintf+0x5e8>
    4960:	02 ff       	sbrs	r16, 2
    4962:	06 c0       	rjmp	.+12     	; 0x4970 <vfprintf+0x5e6>
    4964:	d3 94       	inc	r13
    4966:	d3 94       	inc	r13
    4968:	04 c0       	rjmp	.+8      	; 0x4972 <vfprintf+0x5e8>
    496a:	80 2f       	mov	r24, r16
    496c:	86 78       	andi	r24, 0x86	; 134
    496e:	09 f0       	breq	.+2      	; 0x4972 <vfprintf+0x5e8>
    4970:	d3 94       	inc	r13
    4972:	03 fd       	sbrc	r16, 3
    4974:	11 c0       	rjmp	.+34     	; 0x4998 <vfprintf+0x60e>
    4976:	00 ff       	sbrs	r16, 0
    4978:	06 c0       	rjmp	.+12     	; 0x4986 <vfprintf+0x5fc>
    497a:	1c 2d       	mov	r17, r12
    497c:	d5 14       	cp	r13, r5
    497e:	80 f4       	brcc	.+32     	; 0x49a0 <vfprintf+0x616>
    4980:	15 0d       	add	r17, r5
    4982:	1d 19       	sub	r17, r13
    4984:	0d c0       	rjmp	.+26     	; 0x49a0 <vfprintf+0x616>
    4986:	d5 14       	cp	r13, r5
    4988:	58 f4       	brcc	.+22     	; 0x49a0 <vfprintf+0x616>
    498a:	b7 01       	movw	r22, r14
    498c:	80 e2       	ldi	r24, 0x20	; 32
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4994:	d3 94       	inc	r13
    4996:	f7 cf       	rjmp	.-18     	; 0x4986 <vfprintf+0x5fc>
    4998:	d5 14       	cp	r13, r5
    499a:	10 f4       	brcc	.+4      	; 0x49a0 <vfprintf+0x616>
    499c:	5d 18       	sub	r5, r13
    499e:	01 c0       	rjmp	.+2      	; 0x49a2 <vfprintf+0x618>
    49a0:	51 2c       	mov	r5, r1
    49a2:	04 ff       	sbrs	r16, 4
    49a4:	10 c0       	rjmp	.+32     	; 0x49c6 <vfprintf+0x63c>
    49a6:	b7 01       	movw	r22, r14
    49a8:	80 e3       	ldi	r24, 0x30	; 48
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    49b0:	02 ff       	sbrs	r16, 2
    49b2:	17 c0       	rjmp	.+46     	; 0x49e2 <vfprintf+0x658>
    49b4:	01 fd       	sbrc	r16, 1
    49b6:	03 c0       	rjmp	.+6      	; 0x49be <vfprintf+0x634>
    49b8:	88 e7       	ldi	r24, 0x78	; 120
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	02 c0       	rjmp	.+4      	; 0x49c2 <vfprintf+0x638>
    49be:	88 e5       	ldi	r24, 0x58	; 88
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	b7 01       	movw	r22, r14
    49c4:	0c c0       	rjmp	.+24     	; 0x49de <vfprintf+0x654>
    49c6:	80 2f       	mov	r24, r16
    49c8:	86 78       	andi	r24, 0x86	; 134
    49ca:	59 f0       	breq	.+22     	; 0x49e2 <vfprintf+0x658>
    49cc:	01 ff       	sbrs	r16, 1
    49ce:	02 c0       	rjmp	.+4      	; 0x49d4 <vfprintf+0x64a>
    49d0:	8b e2       	ldi	r24, 0x2B	; 43
    49d2:	01 c0       	rjmp	.+2      	; 0x49d6 <vfprintf+0x64c>
    49d4:	80 e2       	ldi	r24, 0x20	; 32
    49d6:	07 fd       	sbrc	r16, 7
    49d8:	8d e2       	ldi	r24, 0x2D	; 45
    49da:	b7 01       	movw	r22, r14
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    49e2:	c1 16       	cp	r12, r17
    49e4:	38 f4       	brcc	.+14     	; 0x49f4 <vfprintf+0x66a>
    49e6:	b7 01       	movw	r22, r14
    49e8:	80 e3       	ldi	r24, 0x30	; 48
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    49f0:	11 50       	subi	r17, 0x01	; 1
    49f2:	f7 cf       	rjmp	.-18     	; 0x49e2 <vfprintf+0x658>
    49f4:	ca 94       	dec	r12
    49f6:	f3 01       	movw	r30, r6
    49f8:	ec 0d       	add	r30, r12
    49fa:	f1 1d       	adc	r31, r1
    49fc:	80 81       	ld	r24, Z
    49fe:	b7 01       	movw	r22, r14
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4a06:	c1 10       	cpse	r12, r1
    4a08:	f5 cf       	rjmp	.-22     	; 0x49f4 <vfprintf+0x66a>
    4a0a:	15 c0       	rjmp	.+42     	; 0x4a36 <vfprintf+0x6ac>
    4a0c:	f4 e0       	ldi	r31, 0x04	; 4
    4a0e:	f5 15       	cp	r31, r5
    4a10:	60 f5       	brcc	.+88     	; 0x4a6a <vfprintf+0x6e0>
    4a12:	84 e0       	ldi	r24, 0x04	; 4
    4a14:	58 1a       	sub	r5, r24
    4a16:	93 fe       	sbrs	r9, 3
    4a18:	1f c0       	rjmp	.+62     	; 0x4a58 <vfprintf+0x6ce>
    4a1a:	01 11       	cpse	r16, r1
    4a1c:	27 c0       	rjmp	.+78     	; 0x4a6c <vfprintf+0x6e2>
    4a1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4a20:	23 ff       	sbrs	r18, 3
    4a22:	2a c0       	rjmp	.+84     	; 0x4a78 <vfprintf+0x6ee>
    4a24:	0c e3       	ldi	r16, 0x3C	; 60
    4a26:	12 e0       	ldi	r17, 0x02	; 2
    4a28:	39 2d       	mov	r19, r9
    4a2a:	30 71       	andi	r19, 0x10	; 16
    4a2c:	93 2e       	mov	r9, r19
    4a2e:	f8 01       	movw	r30, r16
    4a30:	84 91       	lpm	r24, Z
    4a32:	81 11       	cpse	r24, r1
    4a34:	24 c0       	rjmp	.+72     	; 0x4a7e <vfprintf+0x6f4>
    4a36:	55 20       	and	r5, r5
    4a38:	09 f4       	brne	.+2      	; 0x4a3c <vfprintf+0x6b2>
    4a3a:	e4 cc       	rjmp	.-1592   	; 0x4404 <vfprintf+0x7a>
    4a3c:	b7 01       	movw	r22, r14
    4a3e:	80 e2       	ldi	r24, 0x20	; 32
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4a46:	5a 94       	dec	r5
    4a48:	f6 cf       	rjmp	.-20     	; 0x4a36 <vfprintf+0x6ac>
    4a4a:	f7 01       	movw	r30, r14
    4a4c:	86 81       	ldd	r24, Z+6	; 0x06
    4a4e:	97 81       	ldd	r25, Z+7	; 0x07
    4a50:	26 c0       	rjmp	.+76     	; 0x4a9e <vfprintf+0x714>
    4a52:	8f ef       	ldi	r24, 0xFF	; 255
    4a54:	9f ef       	ldi	r25, 0xFF	; 255
    4a56:	23 c0       	rjmp	.+70     	; 0x4a9e <vfprintf+0x714>
    4a58:	b7 01       	movw	r22, r14
    4a5a:	80 e2       	ldi	r24, 0x20	; 32
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4a62:	5a 94       	dec	r5
    4a64:	51 10       	cpse	r5, r1
    4a66:	f8 cf       	rjmp	.-16     	; 0x4a58 <vfprintf+0x6ce>
    4a68:	d8 cf       	rjmp	.-80     	; 0x4a1a <vfprintf+0x690>
    4a6a:	51 2c       	mov	r5, r1
    4a6c:	b7 01       	movw	r22, r14
    4a6e:	80 2f       	mov	r24, r16
    4a70:	90 e0       	ldi	r25, 0x00	; 0
    4a72:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4a76:	d3 cf       	rjmp	.-90     	; 0x4a1e <vfprintf+0x694>
    4a78:	00 e4       	ldi	r16, 0x40	; 64
    4a7a:	12 e0       	ldi	r17, 0x02	; 2
    4a7c:	d5 cf       	rjmp	.-86     	; 0x4a28 <vfprintf+0x69e>
    4a7e:	91 10       	cpse	r9, r1
    4a80:	80 52       	subi	r24, 0x20	; 32
    4a82:	b7 01       	movw	r22, r14
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <fputc>
    4a8a:	0f 5f       	subi	r16, 0xFF	; 255
    4a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a8e:	cf cf       	rjmp	.-98     	; 0x4a2e <vfprintf+0x6a4>
    4a90:	23 e0       	ldi	r18, 0x03	; 3
    4a92:	25 15       	cp	r18, r5
    4a94:	10 f4       	brcc	.+4      	; 0x4a9a <vfprintf+0x710>
    4a96:	83 e0       	ldi	r24, 0x03	; 3
    4a98:	bd cf       	rjmp	.-134    	; 0x4a14 <vfprintf+0x68a>
    4a9a:	51 2c       	mov	r5, r1
    4a9c:	c0 cf       	rjmp	.-128    	; 0x4a1e <vfprintf+0x694>
    4a9e:	60 96       	adiw	r28, 0x10	; 16
    4aa0:	cd bf       	out	0x3d, r28	; 61
    4aa2:	de bf       	out	0x3e, r29	; 62
    4aa4:	df 91       	pop	r29
    4aa6:	cf 91       	pop	r28
    4aa8:	1f 91       	pop	r17
    4aaa:	0f 91       	pop	r16
    4aac:	ff 90       	pop	r15
    4aae:	ef 90       	pop	r14
    4ab0:	df 90       	pop	r13
    4ab2:	cf 90       	pop	r12
    4ab4:	bf 90       	pop	r11
    4ab6:	af 90       	pop	r10
    4ab8:	9f 90       	pop	r9
    4aba:	8f 90       	pop	r8
    4abc:	7f 90       	pop	r7
    4abe:	6f 90       	pop	r6
    4ac0:	5f 90       	pop	r5
    4ac2:	4f 90       	pop	r4
    4ac4:	3f 90       	pop	r3
    4ac6:	2f 90       	pop	r2
    4ac8:	08 95       	ret

00004aca <__tablejump2__>:
    4aca:	ee 0f       	add	r30, r30
    4acc:	ff 1f       	adc	r31, r31
    4ace:	88 1f       	adc	r24, r24
    4ad0:	8b bf       	out	0x3b, r24	; 59
    4ad2:	07 90       	elpm	r0, Z+
    4ad4:	f6 91       	elpm	r31, Z
    4ad6:	e0 2d       	mov	r30, r0
    4ad8:	19 94       	eijmp

00004ada <__ftoa_engine>:
    4ada:	28 30       	cpi	r18, 0x08	; 8
    4adc:	08 f0       	brcs	.+2      	; 0x4ae0 <__ftoa_engine+0x6>
    4ade:	27 e0       	ldi	r18, 0x07	; 7
    4ae0:	33 27       	eor	r19, r19
    4ae2:	da 01       	movw	r26, r20
    4ae4:	99 0f       	add	r25, r25
    4ae6:	31 1d       	adc	r19, r1
    4ae8:	87 fd       	sbrc	r24, 7
    4aea:	91 60       	ori	r25, 0x01	; 1
    4aec:	00 96       	adiw	r24, 0x00	; 0
    4aee:	61 05       	cpc	r22, r1
    4af0:	71 05       	cpc	r23, r1
    4af2:	39 f4       	brne	.+14     	; 0x4b02 <__ftoa_engine+0x28>
    4af4:	32 60       	ori	r19, 0x02	; 2
    4af6:	2e 5f       	subi	r18, 0xFE	; 254
    4af8:	3d 93       	st	X+, r19
    4afa:	30 e3       	ldi	r19, 0x30	; 48
    4afc:	2a 95       	dec	r18
    4afe:	e1 f7       	brne	.-8      	; 0x4af8 <__ftoa_engine+0x1e>
    4b00:	08 95       	ret
    4b02:	9f 3f       	cpi	r25, 0xFF	; 255
    4b04:	30 f0       	brcs	.+12     	; 0x4b12 <__ftoa_engine+0x38>
    4b06:	80 38       	cpi	r24, 0x80	; 128
    4b08:	71 05       	cpc	r23, r1
    4b0a:	61 05       	cpc	r22, r1
    4b0c:	09 f0       	breq	.+2      	; 0x4b10 <__ftoa_engine+0x36>
    4b0e:	3c 5f       	subi	r19, 0xFC	; 252
    4b10:	3c 5f       	subi	r19, 0xFC	; 252
    4b12:	3d 93       	st	X+, r19
    4b14:	91 30       	cpi	r25, 0x01	; 1
    4b16:	08 f0       	brcs	.+2      	; 0x4b1a <__ftoa_engine+0x40>
    4b18:	80 68       	ori	r24, 0x80	; 128
    4b1a:	91 1d       	adc	r25, r1
    4b1c:	df 93       	push	r29
    4b1e:	cf 93       	push	r28
    4b20:	1f 93       	push	r17
    4b22:	0f 93       	push	r16
    4b24:	ff 92       	push	r15
    4b26:	ef 92       	push	r14
    4b28:	19 2f       	mov	r17, r25
    4b2a:	98 7f       	andi	r25, 0xF8	; 248
    4b2c:	96 95       	lsr	r25
    4b2e:	e9 2f       	mov	r30, r25
    4b30:	96 95       	lsr	r25
    4b32:	96 95       	lsr	r25
    4b34:	e9 0f       	add	r30, r25
    4b36:	ff 27       	eor	r31, r31
    4b38:	e2 56       	subi	r30, 0x62	; 98
    4b3a:	fd 4f       	sbci	r31, 0xFD	; 253
    4b3c:	99 27       	eor	r25, r25
    4b3e:	33 27       	eor	r19, r19
    4b40:	ee 24       	eor	r14, r14
    4b42:	ff 24       	eor	r15, r15
    4b44:	a7 01       	movw	r20, r14
    4b46:	e7 01       	movw	r28, r14
    4b48:	05 90       	lpm	r0, Z+
    4b4a:	08 94       	sec
    4b4c:	07 94       	ror	r0
    4b4e:	28 f4       	brcc	.+10     	; 0x4b5a <__ftoa_engine+0x80>
    4b50:	36 0f       	add	r19, r22
    4b52:	e7 1e       	adc	r14, r23
    4b54:	f8 1e       	adc	r15, r24
    4b56:	49 1f       	adc	r20, r25
    4b58:	51 1d       	adc	r21, r1
    4b5a:	66 0f       	add	r22, r22
    4b5c:	77 1f       	adc	r23, r23
    4b5e:	88 1f       	adc	r24, r24
    4b60:	99 1f       	adc	r25, r25
    4b62:	06 94       	lsr	r0
    4b64:	a1 f7       	brne	.-24     	; 0x4b4e <__ftoa_engine+0x74>
    4b66:	05 90       	lpm	r0, Z+
    4b68:	07 94       	ror	r0
    4b6a:	28 f4       	brcc	.+10     	; 0x4b76 <__ftoa_engine+0x9c>
    4b6c:	e7 0e       	add	r14, r23
    4b6e:	f8 1e       	adc	r15, r24
    4b70:	49 1f       	adc	r20, r25
    4b72:	56 1f       	adc	r21, r22
    4b74:	c1 1d       	adc	r28, r1
    4b76:	77 0f       	add	r23, r23
    4b78:	88 1f       	adc	r24, r24
    4b7a:	99 1f       	adc	r25, r25
    4b7c:	66 1f       	adc	r22, r22
    4b7e:	06 94       	lsr	r0
    4b80:	a1 f7       	brne	.-24     	; 0x4b6a <__ftoa_engine+0x90>
    4b82:	05 90       	lpm	r0, Z+
    4b84:	07 94       	ror	r0
    4b86:	28 f4       	brcc	.+10     	; 0x4b92 <__ftoa_engine+0xb8>
    4b88:	f8 0e       	add	r15, r24
    4b8a:	49 1f       	adc	r20, r25
    4b8c:	56 1f       	adc	r21, r22
    4b8e:	c7 1f       	adc	r28, r23
    4b90:	d1 1d       	adc	r29, r1
    4b92:	88 0f       	add	r24, r24
    4b94:	99 1f       	adc	r25, r25
    4b96:	66 1f       	adc	r22, r22
    4b98:	77 1f       	adc	r23, r23
    4b9a:	06 94       	lsr	r0
    4b9c:	a1 f7       	brne	.-24     	; 0x4b86 <__ftoa_engine+0xac>
    4b9e:	05 90       	lpm	r0, Z+
    4ba0:	07 94       	ror	r0
    4ba2:	20 f4       	brcc	.+8      	; 0x4bac <__ftoa_engine+0xd2>
    4ba4:	49 0f       	add	r20, r25
    4ba6:	56 1f       	adc	r21, r22
    4ba8:	c7 1f       	adc	r28, r23
    4baa:	d8 1f       	adc	r29, r24
    4bac:	99 0f       	add	r25, r25
    4bae:	66 1f       	adc	r22, r22
    4bb0:	77 1f       	adc	r23, r23
    4bb2:	88 1f       	adc	r24, r24
    4bb4:	06 94       	lsr	r0
    4bb6:	a9 f7       	brne	.-22     	; 0x4ba2 <__ftoa_engine+0xc8>
    4bb8:	84 91       	lpm	r24, Z
    4bba:	10 95       	com	r17
    4bbc:	17 70       	andi	r17, 0x07	; 7
    4bbe:	41 f0       	breq	.+16     	; 0x4bd0 <__ftoa_engine+0xf6>
    4bc0:	d6 95       	lsr	r29
    4bc2:	c7 95       	ror	r28
    4bc4:	57 95       	ror	r21
    4bc6:	47 95       	ror	r20
    4bc8:	f7 94       	ror	r15
    4bca:	e7 94       	ror	r14
    4bcc:	1a 95       	dec	r17
    4bce:	c1 f7       	brne	.-16     	; 0x4bc0 <__ftoa_engine+0xe6>
    4bd0:	e4 e4       	ldi	r30, 0x44	; 68
    4bd2:	f2 e0       	ldi	r31, 0x02	; 2
    4bd4:	68 94       	set
    4bd6:	15 90       	lpm	r1, Z+
    4bd8:	15 91       	lpm	r17, Z+
    4bda:	35 91       	lpm	r19, Z+
    4bdc:	65 91       	lpm	r22, Z+
    4bde:	95 91       	lpm	r25, Z+
    4be0:	05 90       	lpm	r0, Z+
    4be2:	7f e2       	ldi	r23, 0x2F	; 47
    4be4:	73 95       	inc	r23
    4be6:	e1 18       	sub	r14, r1
    4be8:	f1 0a       	sbc	r15, r17
    4bea:	43 0b       	sbc	r20, r19
    4bec:	56 0b       	sbc	r21, r22
    4bee:	c9 0b       	sbc	r28, r25
    4bf0:	d0 09       	sbc	r29, r0
    4bf2:	c0 f7       	brcc	.-16     	; 0x4be4 <__ftoa_engine+0x10a>
    4bf4:	e1 0c       	add	r14, r1
    4bf6:	f1 1e       	adc	r15, r17
    4bf8:	43 1f       	adc	r20, r19
    4bfa:	56 1f       	adc	r21, r22
    4bfc:	c9 1f       	adc	r28, r25
    4bfe:	d0 1d       	adc	r29, r0
    4c00:	7e f4       	brtc	.+30     	; 0x4c20 <__ftoa_engine+0x146>
    4c02:	70 33       	cpi	r23, 0x30	; 48
    4c04:	11 f4       	brne	.+4      	; 0x4c0a <__ftoa_engine+0x130>
    4c06:	8a 95       	dec	r24
    4c08:	e6 cf       	rjmp	.-52     	; 0x4bd6 <__ftoa_engine+0xfc>
    4c0a:	e8 94       	clt
    4c0c:	01 50       	subi	r16, 0x01	; 1
    4c0e:	30 f0       	brcs	.+12     	; 0x4c1c <__ftoa_engine+0x142>
    4c10:	08 0f       	add	r16, r24
    4c12:	0a f4       	brpl	.+2      	; 0x4c16 <__ftoa_engine+0x13c>
    4c14:	00 27       	eor	r16, r16
    4c16:	02 17       	cp	r16, r18
    4c18:	08 f4       	brcc	.+2      	; 0x4c1c <__ftoa_engine+0x142>
    4c1a:	20 2f       	mov	r18, r16
    4c1c:	23 95       	inc	r18
    4c1e:	02 2f       	mov	r16, r18
    4c20:	7a 33       	cpi	r23, 0x3A	; 58
    4c22:	28 f0       	brcs	.+10     	; 0x4c2e <__ftoa_engine+0x154>
    4c24:	79 e3       	ldi	r23, 0x39	; 57
    4c26:	7d 93       	st	X+, r23
    4c28:	2a 95       	dec	r18
    4c2a:	e9 f7       	brne	.-6      	; 0x4c26 <__ftoa_engine+0x14c>
    4c2c:	10 c0       	rjmp	.+32     	; 0x4c4e <__ftoa_engine+0x174>
    4c2e:	7d 93       	st	X+, r23
    4c30:	2a 95       	dec	r18
    4c32:	89 f6       	brne	.-94     	; 0x4bd6 <__ftoa_engine+0xfc>
    4c34:	06 94       	lsr	r0
    4c36:	97 95       	ror	r25
    4c38:	67 95       	ror	r22
    4c3a:	37 95       	ror	r19
    4c3c:	17 95       	ror	r17
    4c3e:	17 94       	ror	r1
    4c40:	e1 18       	sub	r14, r1
    4c42:	f1 0a       	sbc	r15, r17
    4c44:	43 0b       	sbc	r20, r19
    4c46:	56 0b       	sbc	r21, r22
    4c48:	c9 0b       	sbc	r28, r25
    4c4a:	d0 09       	sbc	r29, r0
    4c4c:	98 f0       	brcs	.+38     	; 0x4c74 <__ftoa_engine+0x19a>
    4c4e:	23 95       	inc	r18
    4c50:	7e 91       	ld	r23, -X
    4c52:	73 95       	inc	r23
    4c54:	7a 33       	cpi	r23, 0x3A	; 58
    4c56:	08 f0       	brcs	.+2      	; 0x4c5a <__ftoa_engine+0x180>
    4c58:	70 e3       	ldi	r23, 0x30	; 48
    4c5a:	7c 93       	st	X, r23
    4c5c:	20 13       	cpse	r18, r16
    4c5e:	b8 f7       	brcc	.-18     	; 0x4c4e <__ftoa_engine+0x174>
    4c60:	7e 91       	ld	r23, -X
    4c62:	70 61       	ori	r23, 0x10	; 16
    4c64:	7d 93       	st	X+, r23
    4c66:	30 f0       	brcs	.+12     	; 0x4c74 <__ftoa_engine+0x19a>
    4c68:	83 95       	inc	r24
    4c6a:	71 e3       	ldi	r23, 0x31	; 49
    4c6c:	7d 93       	st	X+, r23
    4c6e:	70 e3       	ldi	r23, 0x30	; 48
    4c70:	2a 95       	dec	r18
    4c72:	e1 f7       	brne	.-8      	; 0x4c6c <__ftoa_engine+0x192>
    4c74:	11 24       	eor	r1, r1
    4c76:	ef 90       	pop	r14
    4c78:	ff 90       	pop	r15
    4c7a:	0f 91       	pop	r16
    4c7c:	1f 91       	pop	r17
    4c7e:	cf 91       	pop	r28
    4c80:	df 91       	pop	r29
    4c82:	99 27       	eor	r25, r25
    4c84:	87 fd       	sbrc	r24, 7
    4c86:	90 95       	com	r25
    4c88:	08 95       	ret

00004c8a <strnlen_P>:
    4c8a:	fc 01       	movw	r30, r24
    4c8c:	05 90       	lpm	r0, Z+
    4c8e:	61 50       	subi	r22, 0x01	; 1
    4c90:	70 40       	sbci	r23, 0x00	; 0
    4c92:	01 10       	cpse	r0, r1
    4c94:	d8 f7       	brcc	.-10     	; 0x4c8c <strnlen_P+0x2>
    4c96:	80 95       	com	r24
    4c98:	90 95       	com	r25
    4c9a:	8e 0f       	add	r24, r30
    4c9c:	9f 1f       	adc	r25, r31
    4c9e:	08 95       	ret

00004ca0 <memcpy>:
    4ca0:	fb 01       	movw	r30, r22
    4ca2:	dc 01       	movw	r26, r24
    4ca4:	02 c0       	rjmp	.+4      	; 0x4caa <memcpy+0xa>
    4ca6:	01 90       	ld	r0, Z+
    4ca8:	0d 92       	st	X+, r0
    4caa:	41 50       	subi	r20, 0x01	; 1
    4cac:	50 40       	sbci	r21, 0x00	; 0
    4cae:	d8 f7       	brcc	.-10     	; 0x4ca6 <memcpy+0x6>
    4cb0:	08 95       	ret

00004cb2 <memset>:
    4cb2:	dc 01       	movw	r26, r24
    4cb4:	01 c0       	rjmp	.+2      	; 0x4cb8 <memset+0x6>
    4cb6:	6d 93       	st	X+, r22
    4cb8:	41 50       	subi	r20, 0x01	; 1
    4cba:	50 40       	sbci	r21, 0x00	; 0
    4cbc:	e0 f7       	brcc	.-8      	; 0x4cb6 <memset+0x4>
    4cbe:	08 95       	ret

00004cc0 <strlen>:
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	01 90       	ld	r0, Z+
    4cc4:	00 20       	and	r0, r0
    4cc6:	e9 f7       	brne	.-6      	; 0x4cc2 <strlen+0x2>
    4cc8:	80 95       	com	r24
    4cca:	90 95       	com	r25
    4ccc:	8e 0f       	add	r24, r30
    4cce:	9f 1f       	adc	r25, r31
    4cd0:	08 95       	ret

00004cd2 <strnlen>:
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	61 50       	subi	r22, 0x01	; 1
    4cd6:	70 40       	sbci	r23, 0x00	; 0
    4cd8:	01 90       	ld	r0, Z+
    4cda:	01 10       	cpse	r0, r1
    4cdc:	d8 f7       	brcc	.-10     	; 0x4cd4 <strnlen+0x2>
    4cde:	80 95       	com	r24
    4ce0:	90 95       	com	r25
    4ce2:	8e 0f       	add	r24, r30
    4ce4:	9f 1f       	adc	r25, r31
    4ce6:	08 95       	ret

00004ce8 <itoa>:
    4ce8:	45 32       	cpi	r20, 0x25	; 37
    4cea:	51 05       	cpc	r21, r1
    4cec:	20 f4       	brcc	.+8      	; 0x4cf6 <itoa+0xe>
    4cee:	42 30       	cpi	r20, 0x02	; 2
    4cf0:	10 f0       	brcs	.+4      	; 0x4cf6 <itoa+0xe>
    4cf2:	0c 94 7f 26 	jmp	0x4cfe	; 0x4cfe <__itoa_ncheck>
    4cf6:	fb 01       	movw	r30, r22
    4cf8:	10 82       	st	Z, r1
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	08 95       	ret

00004cfe <__itoa_ncheck>:
    4cfe:	bb 27       	eor	r27, r27
    4d00:	4a 30       	cpi	r20, 0x0A	; 10
    4d02:	31 f4       	brne	.+12     	; 0x4d10 <__itoa_ncheck+0x12>
    4d04:	99 23       	and	r25, r25
    4d06:	22 f4       	brpl	.+8      	; 0x4d10 <__itoa_ncheck+0x12>
    4d08:	bd e2       	ldi	r27, 0x2D	; 45
    4d0a:	90 95       	com	r25
    4d0c:	81 95       	neg	r24
    4d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d10:	0c 94 8b 26 	jmp	0x4d16	; 0x4d16 <__utoa_common>

00004d14 <__utoa_ncheck>:
    4d14:	bb 27       	eor	r27, r27

00004d16 <__utoa_common>:
    4d16:	fb 01       	movw	r30, r22
    4d18:	55 27       	eor	r21, r21
    4d1a:	aa 27       	eor	r26, r26
    4d1c:	88 0f       	add	r24, r24
    4d1e:	99 1f       	adc	r25, r25
    4d20:	aa 1f       	adc	r26, r26
    4d22:	a4 17       	cp	r26, r20
    4d24:	10 f0       	brcs	.+4      	; 0x4d2a <__utoa_common+0x14>
    4d26:	a4 1b       	sub	r26, r20
    4d28:	83 95       	inc	r24
    4d2a:	50 51       	subi	r21, 0x10	; 16
    4d2c:	b9 f7       	brne	.-18     	; 0x4d1c <__utoa_common+0x6>
    4d2e:	a0 5d       	subi	r26, 0xD0	; 208
    4d30:	aa 33       	cpi	r26, 0x3A	; 58
    4d32:	08 f0       	brcs	.+2      	; 0x4d36 <__utoa_common+0x20>
    4d34:	a9 5d       	subi	r26, 0xD9	; 217
    4d36:	a1 93       	st	Z+, r26
    4d38:	00 97       	sbiw	r24, 0x00	; 0
    4d3a:	79 f7       	brne	.-34     	; 0x4d1a <__utoa_common+0x4>
    4d3c:	b1 11       	cpse	r27, r1
    4d3e:	b1 93       	st	Z+, r27
    4d40:	11 92       	st	Z+, r1
    4d42:	cb 01       	movw	r24, r22
    4d44:	0c 94 67 27 	jmp	0x4ece	; 0x4ece <strrev>

00004d48 <fputc>:
    4d48:	0f 93       	push	r16
    4d4a:	1f 93       	push	r17
    4d4c:	cf 93       	push	r28
    4d4e:	df 93       	push	r29
    4d50:	fb 01       	movw	r30, r22
    4d52:	23 81       	ldd	r18, Z+3	; 0x03
    4d54:	21 fd       	sbrc	r18, 1
    4d56:	03 c0       	rjmp	.+6      	; 0x4d5e <fputc+0x16>
    4d58:	8f ef       	ldi	r24, 0xFF	; 255
    4d5a:	9f ef       	ldi	r25, 0xFF	; 255
    4d5c:	2c c0       	rjmp	.+88     	; 0x4db6 <fputc+0x6e>
    4d5e:	22 ff       	sbrs	r18, 2
    4d60:	16 c0       	rjmp	.+44     	; 0x4d8e <fputc+0x46>
    4d62:	46 81       	ldd	r20, Z+6	; 0x06
    4d64:	57 81       	ldd	r21, Z+7	; 0x07
    4d66:	24 81       	ldd	r18, Z+4	; 0x04
    4d68:	35 81       	ldd	r19, Z+5	; 0x05
    4d6a:	42 17       	cp	r20, r18
    4d6c:	53 07       	cpc	r21, r19
    4d6e:	44 f4       	brge	.+16     	; 0x4d80 <fputc+0x38>
    4d70:	a0 81       	ld	r26, Z
    4d72:	b1 81       	ldd	r27, Z+1	; 0x01
    4d74:	9d 01       	movw	r18, r26
    4d76:	2f 5f       	subi	r18, 0xFF	; 255
    4d78:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7a:	20 83       	st	Z, r18
    4d7c:	31 83       	std	Z+1, r19	; 0x01
    4d7e:	8c 93       	st	X, r24
    4d80:	26 81       	ldd	r18, Z+6	; 0x06
    4d82:	37 81       	ldd	r19, Z+7	; 0x07
    4d84:	2f 5f       	subi	r18, 0xFF	; 255
    4d86:	3f 4f       	sbci	r19, 0xFF	; 255
    4d88:	26 83       	std	Z+6, r18	; 0x06
    4d8a:	37 83       	std	Z+7, r19	; 0x07
    4d8c:	14 c0       	rjmp	.+40     	; 0x4db6 <fputc+0x6e>
    4d8e:	8b 01       	movw	r16, r22
    4d90:	ec 01       	movw	r28, r24
    4d92:	fb 01       	movw	r30, r22
    4d94:	00 84       	ldd	r0, Z+8	; 0x08
    4d96:	f1 85       	ldd	r31, Z+9	; 0x09
    4d98:	e0 2d       	mov	r30, r0
    4d9a:	19 95       	eicall
    4d9c:	89 2b       	or	r24, r25
    4d9e:	e1 f6       	brne	.-72     	; 0x4d58 <fputc+0x10>
    4da0:	d8 01       	movw	r26, r16
    4da2:	16 96       	adiw	r26, 0x06	; 6
    4da4:	8d 91       	ld	r24, X+
    4da6:	9c 91       	ld	r25, X
    4da8:	17 97       	sbiw	r26, 0x07	; 7
    4daa:	01 96       	adiw	r24, 0x01	; 1
    4dac:	16 96       	adiw	r26, 0x06	; 6
    4dae:	8d 93       	st	X+, r24
    4db0:	9c 93       	st	X, r25
    4db2:	17 97       	sbiw	r26, 0x07	; 7
    4db4:	ce 01       	movw	r24, r28
    4db6:	df 91       	pop	r29
    4db8:	cf 91       	pop	r28
    4dba:	1f 91       	pop	r17
    4dbc:	0f 91       	pop	r16
    4dbe:	08 95       	ret

00004dc0 <sprintf>:
    4dc0:	0f 93       	push	r16
    4dc2:	1f 93       	push	r17
    4dc4:	cf 93       	push	r28
    4dc6:	df 93       	push	r29
    4dc8:	cd b7       	in	r28, 0x3d	; 61
    4dca:	de b7       	in	r29, 0x3e	; 62
    4dcc:	2e 97       	sbiw	r28, 0x0e	; 14
    4dce:	cd bf       	out	0x3d, r28	; 61
    4dd0:	de bf       	out	0x3e, r29	; 62
    4dd2:	0e 89       	ldd	r16, Y+22	; 0x16
    4dd4:	1f 89       	ldd	r17, Y+23	; 0x17
    4dd6:	86 e0       	ldi	r24, 0x06	; 6
    4dd8:	8c 83       	std	Y+4, r24	; 0x04
    4dda:	09 83       	std	Y+1, r16	; 0x01
    4ddc:	1a 83       	std	Y+2, r17	; 0x02
    4dde:	8f ef       	ldi	r24, 0xFF	; 255
    4de0:	9f e7       	ldi	r25, 0x7F	; 127
    4de2:	8d 83       	std	Y+5, r24	; 0x05
    4de4:	9e 83       	std	Y+6, r25	; 0x06
    4de6:	ae 01       	movw	r20, r28
    4de8:	46 5e       	subi	r20, 0xE6	; 230
    4dea:	5f 4f       	sbci	r21, 0xFF	; 255
    4dec:	68 8d       	ldd	r22, Y+24	; 0x18
    4dee:	79 8d       	ldd	r23, Y+25	; 0x19
    4df0:	ce 01       	movw	r24, r28
    4df2:	01 96       	adiw	r24, 0x01	; 1
    4df4:	0e 94 c5 21 	call	0x438a	; 0x438a <vfprintf>
    4df8:	ef 81       	ldd	r30, Y+7	; 0x07
    4dfa:	f8 85       	ldd	r31, Y+8	; 0x08
    4dfc:	e0 0f       	add	r30, r16
    4dfe:	f1 1f       	adc	r31, r17
    4e00:	10 82       	st	Z, r1
    4e02:	2e 96       	adiw	r28, 0x0e	; 14
    4e04:	cd bf       	out	0x3d, r28	; 61
    4e06:	de bf       	out	0x3e, r29	; 62
    4e08:	df 91       	pop	r29
    4e0a:	cf 91       	pop	r28
    4e0c:	1f 91       	pop	r17
    4e0e:	0f 91       	pop	r16
    4e10:	08 95       	ret

00004e12 <__ultoa_invert>:
    4e12:	fa 01       	movw	r30, r20
    4e14:	aa 27       	eor	r26, r26
    4e16:	28 30       	cpi	r18, 0x08	; 8
    4e18:	51 f1       	breq	.+84     	; 0x4e6e <__ultoa_invert+0x5c>
    4e1a:	20 31       	cpi	r18, 0x10	; 16
    4e1c:	81 f1       	breq	.+96     	; 0x4e7e <__ultoa_invert+0x6c>
    4e1e:	e8 94       	clt
    4e20:	6f 93       	push	r22
    4e22:	6e 7f       	andi	r22, 0xFE	; 254
    4e24:	6e 5f       	subi	r22, 0xFE	; 254
    4e26:	7f 4f       	sbci	r23, 0xFF	; 255
    4e28:	8f 4f       	sbci	r24, 0xFF	; 255
    4e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e2c:	af 4f       	sbci	r26, 0xFF	; 255
    4e2e:	b1 e0       	ldi	r27, 0x01	; 1
    4e30:	3e d0       	rcall	.+124    	; 0x4eae <__ultoa_invert+0x9c>
    4e32:	b4 e0       	ldi	r27, 0x04	; 4
    4e34:	3c d0       	rcall	.+120    	; 0x4eae <__ultoa_invert+0x9c>
    4e36:	67 0f       	add	r22, r23
    4e38:	78 1f       	adc	r23, r24
    4e3a:	89 1f       	adc	r24, r25
    4e3c:	9a 1f       	adc	r25, r26
    4e3e:	a1 1d       	adc	r26, r1
    4e40:	68 0f       	add	r22, r24
    4e42:	79 1f       	adc	r23, r25
    4e44:	8a 1f       	adc	r24, r26
    4e46:	91 1d       	adc	r25, r1
    4e48:	a1 1d       	adc	r26, r1
    4e4a:	6a 0f       	add	r22, r26
    4e4c:	71 1d       	adc	r23, r1
    4e4e:	81 1d       	adc	r24, r1
    4e50:	91 1d       	adc	r25, r1
    4e52:	a1 1d       	adc	r26, r1
    4e54:	20 d0       	rcall	.+64     	; 0x4e96 <__ultoa_invert+0x84>
    4e56:	09 f4       	brne	.+2      	; 0x4e5a <__ultoa_invert+0x48>
    4e58:	68 94       	set
    4e5a:	3f 91       	pop	r19
    4e5c:	2a e0       	ldi	r18, 0x0A	; 10
    4e5e:	26 9f       	mul	r18, r22
    4e60:	11 24       	eor	r1, r1
    4e62:	30 19       	sub	r19, r0
    4e64:	30 5d       	subi	r19, 0xD0	; 208
    4e66:	31 93       	st	Z+, r19
    4e68:	de f6       	brtc	.-74     	; 0x4e20 <__ultoa_invert+0xe>
    4e6a:	cf 01       	movw	r24, r30
    4e6c:	08 95       	ret
    4e6e:	46 2f       	mov	r20, r22
    4e70:	47 70       	andi	r20, 0x07	; 7
    4e72:	40 5d       	subi	r20, 0xD0	; 208
    4e74:	41 93       	st	Z+, r20
    4e76:	b3 e0       	ldi	r27, 0x03	; 3
    4e78:	0f d0       	rcall	.+30     	; 0x4e98 <__ultoa_invert+0x86>
    4e7a:	c9 f7       	brne	.-14     	; 0x4e6e <__ultoa_invert+0x5c>
    4e7c:	f6 cf       	rjmp	.-20     	; 0x4e6a <__ultoa_invert+0x58>
    4e7e:	46 2f       	mov	r20, r22
    4e80:	4f 70       	andi	r20, 0x0F	; 15
    4e82:	40 5d       	subi	r20, 0xD0	; 208
    4e84:	4a 33       	cpi	r20, 0x3A	; 58
    4e86:	18 f0       	brcs	.+6      	; 0x4e8e <__ultoa_invert+0x7c>
    4e88:	49 5d       	subi	r20, 0xD9	; 217
    4e8a:	31 fd       	sbrc	r19, 1
    4e8c:	40 52       	subi	r20, 0x20	; 32
    4e8e:	41 93       	st	Z+, r20
    4e90:	02 d0       	rcall	.+4      	; 0x4e96 <__ultoa_invert+0x84>
    4e92:	a9 f7       	brne	.-22     	; 0x4e7e <__ultoa_invert+0x6c>
    4e94:	ea cf       	rjmp	.-44     	; 0x4e6a <__ultoa_invert+0x58>
    4e96:	b4 e0       	ldi	r27, 0x04	; 4
    4e98:	a6 95       	lsr	r26
    4e9a:	97 95       	ror	r25
    4e9c:	87 95       	ror	r24
    4e9e:	77 95       	ror	r23
    4ea0:	67 95       	ror	r22
    4ea2:	ba 95       	dec	r27
    4ea4:	c9 f7       	brne	.-14     	; 0x4e98 <__ultoa_invert+0x86>
    4ea6:	00 97       	sbiw	r24, 0x00	; 0
    4ea8:	61 05       	cpc	r22, r1
    4eaa:	71 05       	cpc	r23, r1
    4eac:	08 95       	ret
    4eae:	9b 01       	movw	r18, r22
    4eb0:	ac 01       	movw	r20, r24
    4eb2:	0a 2e       	mov	r0, r26
    4eb4:	06 94       	lsr	r0
    4eb6:	57 95       	ror	r21
    4eb8:	47 95       	ror	r20
    4eba:	37 95       	ror	r19
    4ebc:	27 95       	ror	r18
    4ebe:	ba 95       	dec	r27
    4ec0:	c9 f7       	brne	.-14     	; 0x4eb4 <__ultoa_invert+0xa2>
    4ec2:	62 0f       	add	r22, r18
    4ec4:	73 1f       	adc	r23, r19
    4ec6:	84 1f       	adc	r24, r20
    4ec8:	95 1f       	adc	r25, r21
    4eca:	a0 1d       	adc	r26, r0
    4ecc:	08 95       	ret

00004ece <strrev>:
    4ece:	dc 01       	movw	r26, r24
    4ed0:	fc 01       	movw	r30, r24
    4ed2:	67 2f       	mov	r22, r23
    4ed4:	71 91       	ld	r23, Z+
    4ed6:	77 23       	and	r23, r23
    4ed8:	e1 f7       	brne	.-8      	; 0x4ed2 <strrev+0x4>
    4eda:	32 97       	sbiw	r30, 0x02	; 2
    4edc:	04 c0       	rjmp	.+8      	; 0x4ee6 <strrev+0x18>
    4ede:	7c 91       	ld	r23, X
    4ee0:	6d 93       	st	X+, r22
    4ee2:	70 83       	st	Z, r23
    4ee4:	62 91       	ld	r22, -Z
    4ee6:	ae 17       	cp	r26, r30
    4ee8:	bf 07       	cpc	r27, r31
    4eea:	c8 f3       	brcs	.-14     	; 0x4ede <strrev+0x10>
    4eec:	08 95       	ret

00004eee <_exit>:
    4eee:	f8 94       	cli

00004ef0 <__stop_program>:
    4ef0:	ff cf       	rjmp	.-2      	; 0x4ef0 <__stop_program>
