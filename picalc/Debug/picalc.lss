
picalc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004db8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00802000  00004db8  00004e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c91  0080205e  0080205e  00004eaa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004eaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000768  00000000  00000000  00004f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d4d0  00000000  00000000  000056b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004c1e  00000000  00000000  00012b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004d6d  00000000  00000000  0001779e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018f4  00000000  00000000  0001c50c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000055e8  00000000  00000000  0001de00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007e2b  00000000  00000000  000233e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a0  00000000  00000000  0002b213  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      10:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      14:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      18:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      1c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      20:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      24:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      28:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      2c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      30:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      34:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      38:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__vector_14>
      3c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      40:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      44:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      48:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      4c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      50:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      54:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      58:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      5c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      60:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      64:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      68:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      6c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      70:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      74:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      78:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      7c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      80:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      84:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      88:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      8c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      90:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      94:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      98:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      9c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ac:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      bc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      dc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ec:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      fc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     100:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     104:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     108:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     10c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     110:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     114:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     118:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     11c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     120:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     124:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     128:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     12c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     130:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     134:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     138:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     13c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     140:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     144:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     148:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     14c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     150:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     154:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     158:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     15c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     160:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     164:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     168:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     16c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     170:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     174:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     178:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     17c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     180:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     184:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     188:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     18c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     190:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     194:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     198:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     19c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1ac:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1b0:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__vector_108>
     1b4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1b8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1bc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1dc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1ec:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1fc:	50 12       	cpse	r5, r16
     1fe:	50 12       	cpse	r5, r16
     200:	50 12       	cpse	r5, r16
     202:	9d 12       	cpse	r9, r29
     204:	85 12       	cpse	r8, r21
     206:	9a 12       	cpse	r9, r26
     208:	50 12       	cpse	r5, r16
     20a:	50 12       	cpse	r5, r16
     20c:	9d 12       	cpse	r9, r29
     20e:	85 12       	cpse	r8, r21

00000210 <__trampolines_start>:
     210:	0c 94 9d 12 	jmp	0x253a	; 0x253a <prvTimerTask+0x212>
     214:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <vEventGroupSetBitsCallback>
     218:	0c 94 32 18 	jmp	0x3064	; 0x3064 <vDisplayUpdateTask>
     21c:	0c 94 94 11 	jmp	0x2328	; 0x2328 <prvTimerTask>
     220:	0c 94 6f 13 	jmp	0x26de	; 0x26de <vGUI>
     224:	0c 94 85 12 	jmp	0x250a	; 0x250a <prvTimerTask+0x1e2>
     228:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <vButton>
     22c:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <prvTimerTask+0x20c>
     230:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <vCalc>
     234:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <prvTimerTask+0x178>
     238:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <prvIdleTask>

0000023c <__trampolines_end>:
     23c:	6e 61       	ori	r22, 0x1E	; 30
     23e:	6e 00       	.word	0x006e	; ????

00000240 <__c.2332>:
     240:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     250:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     260:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     270:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     280:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     290:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     300:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     310:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     320:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     330:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	cf ef       	ldi	r28, 0xFF	; 255
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df e3       	ldi	r29, 0x3F	; 63
     348:	de bf       	out	0x3e, r29	; 62
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	0c bf       	out	0x3c, r16	; 60

0000034e <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     34e:	ef ee       	ldi	r30, 0xEF	; 239
     350:	fc e2       	ldi	r31, 0x2C	; 44
     352:	8a ea       	ldi	r24, 0xAA	; 170
     354:	90 e4       	ldi	r25, 0x40	; 64
     356:	81 93       	st	Z+, r24
     358:	e0 30       	cpi	r30, 0x00	; 0
     35a:	f9 07       	cpc	r31, r25
     35c:	e0 f3       	brcs	.-8      	; 0x356 <init_mem+0x8>

0000035e <__do_copy_data>:
     35e:	10 e2       	ldi	r17, 0x20	; 32
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	b0 e2       	ldi	r27, 0x20	; 32
     364:	e8 eb       	ldi	r30, 0xB8	; 184
     366:	fd e4       	ldi	r31, 0x4D	; 77
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	0b bf       	out	0x3b, r16	; 59
     36c:	02 c0       	rjmp	.+4      	; 0x372 <__do_copy_data+0x14>
     36e:	07 90       	elpm	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	ae 35       	cpi	r26, 0x5E	; 94
     374:	b1 07       	cpc	r27, r17
     376:	d9 f7       	brne	.-10     	; 0x36e <__do_copy_data+0x10>

00000378 <__do_clear_bss>:
     378:	2c e2       	ldi	r18, 0x2C	; 44
     37a:	ae e5       	ldi	r26, 0x5E	; 94
     37c:	b0 e2       	ldi	r27, 0x20	; 32
     37e:	01 c0       	rjmp	.+2      	; 0x382 <.do_clear_bss_start>

00000380 <.do_clear_bss_loop>:
     380:	1d 92       	st	X+, r1

00000382 <.do_clear_bss_start>:
     382:	af 3e       	cpi	r26, 0xEF	; 239
     384:	b2 07       	cpc	r27, r18
     386:	e1 f7       	brne	.-8      	; 0x380 <.do_clear_bss_loop>
     388:	0e 94 29 13 	call	0x2652	; 0x2652 <main>
     38c:	0c 94 da 26 	jmp	0x4db4	; 0x4db4 <_exit>

00000390 <__bad_interrupt>:
     390:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000394 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     39c:	80 ea       	ldi	r24, 0xA0	; 160
     39e:	96 e0       	ldi	r25, 0x06	; 6
     3a0:	20 e1       	ldi	r18, 0x10	; 16
     3a2:	fc 01       	movw	r30, r24
     3a4:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     3a6:	80 ea       	ldi	r24, 0xA0	; 160
     3a8:	96 e0       	ldi	r25, 0x06	; 6
     3aa:	20 e2       	ldi	r18, 0x20	; 32
     3ac:	fc 01       	movw	r30, r24
     3ae:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     3b0:	80 ea       	ldi	r24, 0xA0	; 160
     3b2:	96 e0       	ldi	r25, 0x06	; 6
     3b4:	20 e4       	ldi	r18, 0x40	; 64
     3b6:	fc 01       	movw	r30, r24
     3b8:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3ba:	80 ea       	ldi	r24, 0xA0	; 160
     3bc:	96 e0       	ldi	r25, 0x06	; 6
     3be:	20 e8       	ldi	r18, 0x80	; 128
     3c0:	fc 01       	movw	r30, r24
     3c2:	22 83       	std	Z+2, r18	; 0x02
 }
     3c4:	00 00       	nop
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3d4:	80 ea       	ldi	r24, 0xA0	; 160
     3d6:	96 e0       	ldi	r25, 0x06	; 6
     3d8:	fc 01       	movw	r30, r24
     3da:	80 85       	ldd	r24, Z+8	; 0x08
     3dc:	88 2f       	mov	r24, r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	80 71       	andi	r24, 0x10	; 16
     3e2:	99 27       	eor	r25, r25
     3e4:	95 95       	asr	r25
     3e6:	87 95       	ror	r24
     3e8:	95 95       	asr	r25
     3ea:	87 95       	ror	r24
     3ec:	95 95       	asr	r25
     3ee:	87 95       	ror	r24
     3f0:	95 95       	asr	r25
     3f2:	87 95       	ror	r24
     3f4:	89 2b       	or	r24, r25
     3f6:	89 f4       	brne	.+34     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		if(b1Count < 60000) {
     3f8:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     3fc:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     400:	80 36       	cpi	r24, 0x60	; 96
     402:	9a 4e       	sbci	r25, 0xEA	; 234
     404:	20 f5       	brcc	.+72     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			b1Count++;
     406:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     40a:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	80 93 5e 20 	sts	0x205E, r24	; 0x80205e <__data_end>
     414:	90 93 5f 20 	sts	0x205F, r25	; 0x80205f <__data_end+0x1>
     418:	1a c0       	rjmp	.+52     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     41a:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     41e:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     422:	0b 97       	sbiw	r24, 0x0b	; 11
     424:	68 f0       	brcs	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     426:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     42a:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     42e:	c3 97       	sbiw	r24, 0x33	; 51
     430:	18 f0       	brcs	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     432:	10 92 da 2c 	sts	0x2CDA, r1	; 0x802cda <b1Status>
     436:	07 c0       	rjmp	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	80 93 da 2c 	sts	0x2CDA, r24	; 0x802cda <b1Status>
     43e:	03 c0       	rjmp	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			}
		} else {
			b1Status = NOT_PRESSED;
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	80 93 da 2c 	sts	0x2CDA, r24	; 0x802cda <b1Status>
		}
		b1Count = 0;
     446:	10 92 5e 20 	sts	0x205E, r1	; 0x80205e <__data_end>
     44a:	10 92 5f 20 	sts	0x205F, r1	; 0x80205f <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     44e:	80 ea       	ldi	r24, 0xA0	; 160
     450:	96 e0       	ldi	r25, 0x06	; 6
     452:	fc 01       	movw	r30, r24
     454:	80 85       	ldd	r24, Z+8	; 0x08
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	80 72       	andi	r24, 0x20	; 32
     45c:	99 27       	eor	r25, r25
     45e:	95 95       	asr	r25
     460:	87 95       	ror	r24
     462:	95 95       	asr	r25
     464:	87 95       	ror	r24
     466:	95 95       	asr	r25
     468:	87 95       	ror	r24
     46a:	95 95       	asr	r25
     46c:	87 95       	ror	r24
     46e:	95 95       	asr	r25
     470:	87 95       	ror	r24
     472:	89 2b       	or	r24, r25
     474:	89 f4       	brne	.+34     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		if(b2Count < 60000) {
     476:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     47a:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     47e:	80 36       	cpi	r24, 0x60	; 96
     480:	9a 4e       	sbci	r25, 0xEA	; 234
     482:	20 f5       	brcc	.+72     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
			b2Count++;
     484:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     488:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <b2Count.3830>
     492:	90 93 61 20 	sts	0x2061, r25	; 0x802061 <b2Count.3830+0x1>
     496:	1a c0       	rjmp	.+52     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     498:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     49c:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     4a0:	0b 97       	sbiw	r24, 0x0b	; 11
     4a2:	68 f0       	brcs	.+26     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4a4:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     4a8:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     4ac:	c3 97       	sbiw	r24, 0x33	; 51
     4ae:	18 f0       	brcs	.+6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     4b0:	10 92 db 2c 	sts	0x2CDB, r1	; 0x802cdb <b2Status>
     4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 db 2c 	sts	0x2CDB, r24	; 0x802cdb <b2Status>
     4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
			}
		} else {
			b2Status = NOT_PRESSED;			
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	80 93 db 2c 	sts	0x2CDB, r24	; 0x802cdb <b2Status>
		}
		b2Count = 0;
     4c4:	10 92 60 20 	sts	0x2060, r1	; 0x802060 <b2Count.3830>
     4c8:	10 92 61 20 	sts	0x2061, r1	; 0x802061 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     4cc:	80 ea       	ldi	r24, 0xA0	; 160
     4ce:	96 e0       	ldi	r25, 0x06	; 6
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 85       	ldd	r24, Z+8	; 0x08
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	80 74       	andi	r24, 0x40	; 64
     4da:	99 27       	eor	r25, r25
     4dc:	08 2e       	mov	r0, r24
     4de:	89 2f       	mov	r24, r25
     4e0:	00 0c       	add	r0, r0
     4e2:	88 1f       	adc	r24, r24
     4e4:	99 0b       	sbc	r25, r25
     4e6:	00 0c       	add	r0, r0
     4e8:	88 1f       	adc	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	89 2b       	or	r24, r25
     4ee:	89 f4       	brne	.+34     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
		if(b3Count < 60000) {
     4f0:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     4f4:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     4f8:	80 36       	cpi	r24, 0x60	; 96
     4fa:	9a 4e       	sbci	r25, 0xEA	; 234
     4fc:	20 f5       	brcc	.+72     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
			b3Count++;
     4fe:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     502:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <b3Count.3831>
     50c:	90 93 63 20 	sts	0x2063, r25	; 0x802063 <b3Count.3831+0x1>
     510:	1a c0       	rjmp	.+52     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     512:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     516:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     51a:	0b 97       	sbiw	r24, 0x0b	; 11
     51c:	68 f0       	brcs	.+26     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     51e:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     522:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     526:	c3 97       	sbiw	r24, 0x33	; 51
     528:	18 f0       	brcs	.+6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     52a:	10 92 dc 2c 	sts	0x2CDC, r1	; 0x802cdc <b3Status>
     52e:	07 c0       	rjmp	.+14     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 dc 2c 	sts	0x2CDC, r24	; 0x802cdc <b3Status>
     536:	03 c0       	rjmp	.+6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
			}
		} else {
			b3Status = NOT_PRESSED;
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	80 93 dc 2c 	sts	0x2CDC, r24	; 0x802cdc <b3Status>
		}
		b3Count = 0;
     53e:	10 92 62 20 	sts	0x2062, r1	; 0x802062 <b3Count.3831>
     542:	10 92 63 20 	sts	0x2063, r1	; 0x802063 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     546:	80 ea       	ldi	r24, 0xA0	; 160
     548:	96 e0       	ldi	r25, 0x06	; 6
     54a:	fc 01       	movw	r30, r24
     54c:	80 85       	ldd	r24, Z+8	; 0x08
     54e:	88 23       	and	r24, r24
     550:	8c f0       	brlt	.+34     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
		if(b4Count < 60000) {
     552:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     556:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     55a:	80 36       	cpi	r24, 0x60	; 96
     55c:	9a 4e       	sbci	r25, 0xEA	; 234
     55e:	20 f5       	brcc	.+72     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			b4Count++;
     560:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     564:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	80 93 64 20 	sts	0x2064, r24	; 0x802064 <b4Count.3832>
     56e:	90 93 65 20 	sts	0x2065, r25	; 0x802065 <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     574:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     578:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     57c:	0b 97       	sbiw	r24, 0x0b	; 11
     57e:	68 f0       	brcs	.+26     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     580:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     584:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     588:	c3 97       	sbiw	r24, 0x33	; 51
     58a:	18 f0       	brcs	.+6      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     58c:	10 92 dd 2c 	sts	0x2CDD, r1	; 0x802cdd <b4Status>
     590:	07 c0       	rjmp	.+14     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	80 93 dd 2c 	sts	0x2CDD, r24	; 0x802cdd <b4Status>
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			}
		} else {
			b4Status = NOT_PRESSED;
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	80 93 dd 2c 	sts	0x2CDD, r24	; 0x802cdd <b4Status>
		}
		b4Count = 0;
     5a0:	10 92 64 20 	sts	0x2064, r1	; 0x802064 <b4Count.3832>
     5a4:	10 92 65 20 	sts	0x2065, r1	; 0x802065 <b4Count.3832+0x1>
	}
 }
     5a8:	00 00       	nop
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	88 2f       	mov	r24, r24
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	81 30       	cpi	r24, 0x01	; 1
     5c4:	91 05       	cpc	r25, r1
     5c6:	79 f0       	breq	.+30     	; 0x5e6 <getButtonPress+0x36>
     5c8:	82 30       	cpi	r24, 0x02	; 2
     5ca:	91 05       	cpc	r25, r1
     5cc:	1c f4       	brge	.+6      	; 0x5d4 <getButtonPress+0x24>
     5ce:	89 2b       	or	r24, r25
     5d0:	39 f0       	breq	.+14     	; 0x5e0 <getButtonPress+0x30>
     5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <getButtonPress+0x48>
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	91 05       	cpc	r25, r1
     5d8:	49 f0       	breq	.+18     	; 0x5ec <getButtonPress+0x3c>
     5da:	03 97       	sbiw	r24, 0x03	; 3
     5dc:	51 f0       	breq	.+20     	; 0x5f2 <getButtonPress+0x42>
     5de:	0c c0       	rjmp	.+24     	; 0x5f8 <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     5e0:	80 91 da 2c 	lds	r24, 0x2CDA	; 0x802cda <b1Status>
     5e4:	0a c0       	rjmp	.+20     	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     5e6:	80 91 db 2c 	lds	r24, 0x2CDB	; 0x802cdb <b2Status>
     5ea:	07 c0       	rjmp	.+14     	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     5ec:	80 91 dc 2c 	lds	r24, 0x2CDC	; 0x802cdc <b3Status>
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     5f2:	80 91 dd 2c 	lds	r24, 0x2CDD	; 0x802cdd <b4Status>
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	0f 90       	pop	r0
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     602:	0f 93       	push	r16
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	1f 92       	push	r1
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     60e:	2f b7       	in	r18, 0x3f	; 63
     610:	29 83       	std	Y+1, r18	; 0x01
     612:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     614:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     616:	fc 01       	movw	r30, r24
     618:	08 ed       	ldi	r16, 0xD8	; 216
     61a:	04 bf       	out	0x34, r16	; 52
     61c:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	8f bf       	out	0x3f, r24	; 63
#endif
}
     622:	0f 90       	pop	r0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	0f 91       	pop	r16
     62a:	08 95       	ret

0000062c <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     62c:	61 11       	cpse	r22, r1
     62e:	02 c0       	rjmp	.+4      	; 0x634 <CLKSYS_XOSC_Config+0x8>
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	01 c0       	rjmp	.+2      	; 0x636 <CLKSYS_XOSC_Config+0xa>
     634:	90 e2       	ldi	r25, 0x20	; 32
     636:	84 2b       	or	r24, r20
     638:	89 2b       	or	r24, r25
     63a:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     63e:	08 95       	ret

00000640 <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     640:	6f 71       	andi	r22, 0x1F	; 31
     642:	86 2b       	or	r24, r22
     644:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     648:	08 95       	ret

0000064a <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     64a:	e0 e5       	ldi	r30, 0x50	; 80
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	90 81       	ld	r25, Z
     650:	28 2f       	mov	r18, r24
     652:	20 95       	com	r18
     654:	92 23       	and	r25, r18
     656:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     658:	90 81       	ld	r25, Z
	return clkEnabled;
}
     65a:	89 23       	and	r24, r25
     65c:	08 95       	ret

0000065e <CLKSYS_Prescalers_Config>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     65e:	68 2b       	or	r22, r24
     660:	81 e4       	ldi	r24, 0x41	; 65
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 01 03 	call	0x602	; 0x602 <CCPWrite>
     668:	08 95       	ret

0000066a <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     672:	00 e4       	ldi	r16, 0x40	; 64
     674:	10 e0       	ldi	r17, 0x00	; 0
     676:	f8 01       	movw	r30, r16
     678:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
     67a:	68 7f       	andi	r22, 0xF8	; 248
     67c:	68 2b       	or	r22, r24
     67e:	80 e4       	ldi	r24, 0x40	; 64
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 01 03 	call	0x602	; 0x602 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     686:	f8 01       	movw	r30, r16
     688:	80 81       	ld	r24, Z
	return clkCtrl;
}
     68a:	8c 23       	and	r24, r28
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     694:	fc 01       	movw	r30, r24
     696:	90 81       	ld	r25, Z
     698:	90 7f       	andi	r25, 0xF0	; 240
     69a:	69 2b       	or	r22, r25
     69c:	60 83       	st	Z, r22
     69e:	08 95       	ret

000006a0 <TC0_ConfigWGM>:
     6a0:	fc 01       	movw	r30, r24
     6a2:	91 81       	ldd	r25, Z+1	; 0x01
     6a4:	98 7f       	andi	r25, 0xF8	; 248
     6a6:	69 2b       	or	r22, r25
     6a8:	61 83       	std	Z+1, r22	; 0x01
     6aa:	08 95       	ret

000006ac <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     6ac:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     6ae:	96 81       	ldd	r25, Z+6	; 0x06
     6b0:	9c 7f       	andi	r25, 0xFC	; 252
     6b2:	69 2b       	or	r22, r25
     6b4:	66 83       	std	Z+6, r22	; 0x06
     6b6:	08 95       	ret

000006b8 <software_reset>:
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     6b8:	00 00       	nop
     6ba:	88 ed       	ldi	r24, 0xD8	; 216
     6bc:	84 bf       	out	0x34, r24	; 52
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     6c4:	08 95       	ret

000006c6 <vApplicationStackOverflowHook>:
     6c6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <software_reset>
     6ca:	08 95       	ret

000006cc <xEventGroupCreate>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	80 e1       	ldi	r24, 0x10	; 16
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
     6d8:	ec 01       	movw	r28, r24
     6da:	00 97       	sbiw	r24, 0x00	; 0
     6dc:	41 f0       	breq	.+16     	; 0x6ee <xEventGroupCreate+0x22>
     6de:	fc 01       	movw	r30, r24
     6e0:	11 92       	st	Z+, r1
     6e2:	11 92       	st	Z+, r1
     6e4:	11 92       	st	Z+, r1
     6e6:	11 92       	st	Z+, r1
     6e8:	cf 01       	movw	r24, r30
     6ea:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
     6ee:	ce 01       	movw	r24, r28
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <xEventGroupWaitBits>:
     6f6:	2f 92       	push	r2
     6f8:	3f 92       	push	r3
     6fa:	4f 92       	push	r4
     6fc:	5f 92       	push	r5
     6fe:	6f 92       	push	r6
     700:	7f 92       	push	r7
     702:	8f 92       	push	r8
     704:	9f 92       	push	r9
     706:	af 92       	push	r10
     708:	bf 92       	push	r11
     70a:	cf 92       	push	r12
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
     71c:	4a 01       	movw	r8, r20
     71e:	5b 01       	movw	r10, r22
     720:	62 2e       	mov	r6, r18
     722:	70 2e       	mov	r7, r16
     724:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
     728:	28 80       	ld	r2, Y
     72a:	39 80       	ldd	r3, Y+1	; 0x01
     72c:	4a 80       	ldd	r4, Y+2	; 0x02
     72e:	5b 80       	ldd	r5, Y+3	; 0x03
     730:	01 11       	cpse	r16, r1
     732:	0d c0       	rjmp	.+26     	; 0x74e <xEventGroupWaitBits+0x58>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	b2 01       	movw	r22, r4
     738:	a1 01       	movw	r20, r2
     73a:	48 21       	and	r20, r8
     73c:	59 21       	and	r21, r9
     73e:	6a 21       	and	r22, r10
     740:	7b 21       	and	r23, r11
     742:	45 2b       	or	r20, r21
     744:	46 2b       	or	r20, r22
     746:	47 2b       	or	r20, r23
     748:	79 f4       	brne	.+30     	; 0x768 <xEventGroupWaitBits+0x72>
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	0d c0       	rjmp	.+26     	; 0x768 <xEventGroupWaitBits+0x72>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	b2 01       	movw	r22, r4
     752:	a1 01       	movw	r20, r2
     754:	48 21       	and	r20, r8
     756:	59 21       	and	r21, r9
     758:	6a 21       	and	r22, r10
     75a:	7b 21       	and	r23, r11
     75c:	48 15       	cp	r20, r8
     75e:	59 05       	cpc	r21, r9
     760:	6a 05       	cpc	r22, r10
     762:	7b 05       	cpc	r23, r11
     764:	09 f0       	breq	.+2      	; 0x768 <xEventGroupWaitBits+0x72>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	88 23       	and	r24, r24
     76a:	81 f0       	breq	.+32     	; 0x78c <xEventGroupWaitBits+0x96>
     76c:	66 20       	and	r6, r6
     76e:	09 f4       	brne	.+2      	; 0x772 <xEventGroupWaitBits+0x7c>
     770:	70 c0       	rjmp	.+224    	; 0x852 <xEventGroupWaitBits+0x15c>
     772:	80 94       	com	r8
     774:	90 94       	com	r9
     776:	a0 94       	com	r10
     778:	b0 94       	com	r11
     77a:	82 20       	and	r8, r2
     77c:	93 20       	and	r9, r3
     77e:	a4 20       	and	r10, r4
     780:	b5 20       	and	r11, r5
     782:	88 82       	st	Y, r8
     784:	99 82       	std	Y+1, r9	; 0x01
     786:	aa 82       	std	Y+2, r10	; 0x02
     788:	bb 82       	std	Y+3, r11	; 0x03
     78a:	63 c0       	rjmp	.+198    	; 0x852 <xEventGroupWaitBits+0x15c>
     78c:	c1 14       	cp	r12, r1
     78e:	d1 04       	cpc	r13, r1
     790:	e1 04       	cpc	r14, r1
     792:	f1 04       	cpc	r15, r1
     794:	09 f4       	brne	.+2      	; 0x798 <xEventGroupWaitBits+0xa2>
     796:	5d c0       	rjmp	.+186    	; 0x852 <xEventGroupWaitBits+0x15c>
     798:	66 20       	and	r6, r6
     79a:	29 f0       	breq	.+10     	; 0x7a6 <xEventGroupWaitBits+0xb0>
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <xEventGroupWaitBits+0xb6>
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	ba 01       	movw	r22, r20
     7ac:	71 10       	cpse	r7, r1
     7ae:	74 60       	ori	r23, 0x04	; 4
     7b0:	48 29       	or	r20, r8
     7b2:	59 29       	or	r21, r9
     7b4:	6a 29       	or	r22, r10
     7b6:	7b 29       	or	r23, r11
     7b8:	97 01       	movw	r18, r14
     7ba:	86 01       	movw	r16, r12
     7bc:	ce 01       	movw	r24, r28
     7be:	04 96       	adiw	r24, 0x04	; 4
     7c0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <vTaskPlaceOnUnorderedEventList>
     7c4:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     7c8:	81 11       	cpse	r24, r1
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <xEventGroupWaitBits+0xda>
     7cc:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
     7d0:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <uxTaskResetEventItemValue>
     7d4:	91 fd       	sbrc	r25, 1
     7d6:	39 c0       	rjmp	.+114    	; 0x84a <xEventGroupWaitBits+0x154>
     7d8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7dc:	ff 93       	push	r31
     7de:	f8 7f       	andi	r31, 0xF8	; 248
     7e0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7e4:	68 81       	ld	r22, Y
     7e6:	79 81       	ldd	r23, Y+1	; 0x01
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	9b 81       	ldd	r25, Y+3	; 0x03
     7ec:	71 10       	cpse	r7, r1
     7ee:	0d c0       	rjmp	.+26     	; 0x80a <xEventGroupWaitBits+0x114>
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	75 01       	movw	r14, r10
     7f4:	64 01       	movw	r12, r8
     7f6:	c6 22       	and	r12, r22
     7f8:	d7 22       	and	r13, r23
     7fa:	e8 22       	and	r14, r24
     7fc:	f9 22       	and	r15, r25
     7fe:	cd 28       	or	r12, r13
     800:	ce 28       	or	r12, r14
     802:	cf 28       	or	r12, r15
     804:	79 f4       	brne	.+30     	; 0x824 <xEventGroupWaitBits+0x12e>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	0d c0       	rjmp	.+26     	; 0x824 <xEventGroupWaitBits+0x12e>
     80a:	21 e0       	ldi	r18, 0x01	; 1
     80c:	75 01       	movw	r14, r10
     80e:	64 01       	movw	r12, r8
     810:	c6 22       	and	r12, r22
     812:	d7 22       	and	r13, r23
     814:	e8 22       	and	r14, r24
     816:	f9 22       	and	r15, r25
     818:	c8 14       	cp	r12, r8
     81a:	d9 04       	cpc	r13, r9
     81c:	ea 04       	cpc	r14, r10
     81e:	fb 04       	cpc	r15, r11
     820:	09 f0       	breq	.+2      	; 0x824 <xEventGroupWaitBits+0x12e>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	22 23       	and	r18, r18
     826:	71 f0       	breq	.+28     	; 0x844 <xEventGroupWaitBits+0x14e>
     828:	66 20       	and	r6, r6
     82a:	61 f0       	breq	.+24     	; 0x844 <xEventGroupWaitBits+0x14e>
     82c:	80 94       	com	r8
     82e:	90 94       	com	r9
     830:	a0 94       	com	r10
     832:	b0 94       	com	r11
     834:	86 22       	and	r8, r22
     836:	97 22       	and	r9, r23
     838:	a8 22       	and	r10, r24
     83a:	b9 22       	and	r11, r25
     83c:	88 82       	st	Y, r8
     83e:	99 82       	std	Y+1, r9	; 0x01
     840:	aa 82       	std	Y+2, r10	; 0x02
     842:	bb 82       	std	Y+3, r11	; 0x03
     844:	ff 91       	pop	r31
     846:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     84a:	1b 01       	movw	r2, r22
     84c:	2c 01       	movw	r4, r24
     84e:	55 24       	eor	r5, r5
     850:	02 c0       	rjmp	.+4      	; 0x856 <xEventGroupWaitBits+0x160>
     852:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     856:	c2 01       	movw	r24, r4
     858:	b1 01       	movw	r22, r2
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	af 90       	pop	r10
     86e:	9f 90       	pop	r9
     870:	8f 90       	pop	r8
     872:	7f 90       	pop	r7
     874:	6f 90       	pop	r6
     876:	5f 90       	pop	r5
     878:	4f 90       	pop	r4
     87a:	3f 90       	pop	r3
     87c:	2f 90       	pop	r2
     87e:	08 95       	ret

00000880 <xEventGroupClearBits>:
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     888:	ff 93       	push	r31
     88a:	f8 7f       	andi	r31, 0xF8	; 248
     88c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     890:	fc 01       	movw	r30, r24
     892:	00 81       	ld	r16, Z
     894:	11 81       	ldd	r17, Z+1	; 0x01
     896:	22 81       	ldd	r18, Z+2	; 0x02
     898:	33 81       	ldd	r19, Z+3	; 0x03
     89a:	40 95       	com	r20
     89c:	50 95       	com	r21
     89e:	60 95       	com	r22
     8a0:	70 95       	com	r23
     8a2:	40 23       	and	r20, r16
     8a4:	51 23       	and	r21, r17
     8a6:	62 23       	and	r22, r18
     8a8:	73 23       	and	r23, r19
     8aa:	40 83       	st	Z, r20
     8ac:	51 83       	std	Z+1, r21	; 0x01
     8ae:	62 83       	std	Z+2, r22	; 0x02
     8b0:	73 83       	std	Z+3, r23	; 0x03
     8b2:	ff 91       	pop	r31
     8b4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     8b8:	c9 01       	movw	r24, r18
     8ba:	b8 01       	movw	r22, r16
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <xEventGroupSetBits>:
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
     8e0:	6a 01       	movw	r12, r20
     8e2:	7b 01       	movw	r14, r22
     8e4:	8c 01       	movw	r16, r24
     8e6:	09 5f       	subi	r16, 0xF9	; 249
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
     8ee:	eb 85       	ldd	r30, Y+11	; 0x0b
     8f0:	fc 85       	ldd	r31, Y+12	; 0x0c
     8f2:	88 81       	ld	r24, Y
     8f4:	99 81       	ldd	r25, Y+1	; 0x01
     8f6:	aa 81       	ldd	r26, Y+2	; 0x02
     8f8:	bb 81       	ldd	r27, Y+3	; 0x03
     8fa:	c8 2a       	or	r12, r24
     8fc:	d9 2a       	or	r13, r25
     8fe:	ea 2a       	or	r14, r26
     900:	fb 2a       	or	r15, r27
     902:	c8 82       	st	Y, r12
     904:	d9 82       	std	Y+1, r13	; 0x01
     906:	ea 82       	std	Y+2, r14	; 0x02
     908:	fb 82       	std	Y+3, r15	; 0x03
     90a:	0e 17       	cp	r16, r30
     90c:	1f 07       	cpc	r17, r31
     90e:	09 f4       	brne	.+2      	; 0x912 <xEventGroupSetBits+0x50>
     910:	42 c0       	rjmp	.+132    	; 0x996 <xEventGroupSetBits+0xd4>
     912:	c1 2c       	mov	r12, r1
     914:	d1 2c       	mov	r13, r1
     916:	76 01       	movw	r14, r12
     918:	a4 80       	ldd	r10, Z+4	; 0x04
     91a:	b5 80       	ldd	r11, Z+5	; 0x05
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	a2 81       	ldd	r26, Z+2	; 0x02
     922:	b3 81       	ldd	r27, Z+3	; 0x03
     924:	ac 01       	movw	r20, r24
     926:	bd 01       	movw	r22, r26
     928:	77 27       	eor	r23, r23
     92a:	b2 fd       	sbrc	r27, 2
     92c:	0f c0       	rjmp	.+30     	; 0x94c <xEventGroupSetBits+0x8a>
     92e:	48 80       	ld	r4, Y
     930:	59 80       	ldd	r5, Y+1	; 0x01
     932:	6a 80       	ldd	r6, Y+2	; 0x02
     934:	7b 80       	ldd	r7, Y+3	; 0x03
     936:	44 22       	and	r4, r20
     938:	55 22       	and	r5, r21
     93a:	66 22       	and	r6, r22
     93c:	77 22       	and	r7, r23
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	45 28       	or	r4, r5
     942:	46 28       	or	r4, r6
     944:	47 28       	or	r4, r7
     946:	89 f4       	brne	.+34     	; 0x96a <xEventGroupSetBits+0xa8>
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	0f c0       	rjmp	.+30     	; 0x96a <xEventGroupSetBits+0xa8>
     94c:	48 80       	ld	r4, Y
     94e:	59 80       	ldd	r5, Y+1	; 0x01
     950:	6a 80       	ldd	r6, Y+2	; 0x02
     952:	7b 80       	ldd	r7, Y+3	; 0x03
     954:	44 22       	and	r4, r20
     956:	55 22       	and	r5, r21
     958:	66 22       	and	r6, r22
     95a:	77 22       	and	r7, r23
     95c:	21 e0       	ldi	r18, 0x01	; 1
     95e:	44 16       	cp	r4, r20
     960:	55 06       	cpc	r5, r21
     962:	66 06       	cpc	r6, r22
     964:	77 06       	cpc	r7, r23
     966:	09 f0       	breq	.+2      	; 0x96a <xEventGroupSetBits+0xa8>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	22 23       	and	r18, r18
     96c:	71 f0       	breq	.+28     	; 0x98a <xEventGroupSetBits+0xc8>
     96e:	b0 ff       	sbrs	r27, 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <xEventGroupSetBits+0xb8>
     972:	c4 2a       	or	r12, r20
     974:	d5 2a       	or	r13, r21
     976:	e6 2a       	or	r14, r22
     978:	f7 2a       	or	r15, r23
     97a:	48 81       	ld	r20, Y
     97c:	59 81       	ldd	r21, Y+1	; 0x01
     97e:	6a 81       	ldd	r22, Y+2	; 0x02
     980:	7b 81       	ldd	r23, Y+3	; 0x03
     982:	72 60       	ori	r23, 0x02	; 2
     984:	cf 01       	movw	r24, r30
     986:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <vTaskRemoveFromUnorderedEventList>
     98a:	ea 2d       	mov	r30, r10
     98c:	fb 2d       	mov	r31, r11
     98e:	0e 17       	cp	r16, r30
     990:	1f 07       	cpc	r17, r31
     992:	11 f6       	brne	.-124    	; 0x918 <xEventGroupSetBits+0x56>
     994:	03 c0       	rjmp	.+6      	; 0x99c <xEventGroupSetBits+0xda>
     996:	c1 2c       	mov	r12, r1
     998:	d1 2c       	mov	r13, r1
     99a:	76 01       	movw	r14, r12
     99c:	c0 94       	com	r12
     99e:	d0 94       	com	r13
     9a0:	e0 94       	com	r14
     9a2:	f0 94       	com	r15
     9a4:	88 81       	ld	r24, Y
     9a6:	99 81       	ldd	r25, Y+1	; 0x01
     9a8:	aa 81       	ldd	r26, Y+2	; 0x02
     9aa:	bb 81       	ldd	r27, Y+3	; 0x03
     9ac:	c8 22       	and	r12, r24
     9ae:	d9 22       	and	r13, r25
     9b0:	ea 22       	and	r14, r26
     9b2:	fb 22       	and	r15, r27
     9b4:	c8 82       	st	Y, r12
     9b6:	d9 82       	std	Y+1, r13	; 0x01
     9b8:	ea 82       	std	Y+2, r14	; 0x02
     9ba:	fb 82       	std	Y+3, r15	; 0x03
     9bc:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     9c0:	68 81       	ld	r22, Y
     9c2:	79 81       	ldd	r23, Y+1	; 0x01
     9c4:	8a 81       	ldd	r24, Y+2	; 0x02
     9c6:	9b 81       	ldd	r25, Y+3	; 0x03
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	cf 90       	pop	r12
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	7f 90       	pop	r7
     9de:	6f 90       	pop	r6
     9e0:	5f 90       	pop	r5
     9e2:	4f 90       	pop	r4
     9e4:	08 95       	ret

000009e6 <vEventGroupSetBitsCallback>:
     9e6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
     9ea:	08 95       	ret

000009ec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     9f0:	89 01       	movw	r16, r18
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	bc 01       	movw	r22, r24
     9f8:	83 ef       	ldi	r24, 0xF3	; 243
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	0e 94 c3 12 	call	0x2586	; 0x2586 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	08 95       	ret

00000a06 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     a0c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     a10:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <xNextFreeByte>
     a14:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <xNextFreeByte+0x1>
     a18:	c9 01       	movw	r24, r18
     a1a:	8c 0f       	add	r24, r28
     a1c:	9d 1f       	adc	r25, r29
     a1e:	88 3b       	cpi	r24, 0xB8	; 184
     a20:	4b e0       	ldi	r20, 0x0B	; 11
     a22:	94 07       	cpc	r25, r20
     a24:	58 f4       	brcc	.+22     	; 0xa3c <pvPortMalloc+0x36>
     a26:	28 17       	cp	r18, r24
     a28:	39 07       	cpc	r19, r25
     a2a:	58 f4       	brcc	.+22     	; 0xa42 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     a2c:	e9 01       	movw	r28, r18
     a2e:	c8 59       	subi	r28, 0x98	; 152
     a30:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     a32:	80 93 66 20 	sts	0x2066, r24	; 0x802066 <xNextFreeByte>
     a36:	90 93 67 20 	sts	0x2067, r25	; 0x802067 <xNextFreeByte+0x1>
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     a3c:	c0 e0       	ldi	r28, 0x00	; 0
     a3e:	d0 e0       	ldi	r29, 0x00	; 0
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <pvPortMalloc+0x40>
     a42:	c0 e0       	ldi	r28, 0x00	; 0
     a44:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     a46:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     a4a:	ce 01       	movw	r24, r28
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a52:	08 95       	ret

00000a54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a54:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a56:	03 96       	adiw	r24, 0x03	; 3
     a58:	81 83       	std	Z+1, r24	; 0x01
     a5a:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     a5c:	4f ef       	ldi	r20, 0xFF	; 255
     a5e:	5f ef       	ldi	r21, 0xFF	; 255
     a60:	ba 01       	movw	r22, r20
     a62:	43 83       	std	Z+3, r20	; 0x03
     a64:	54 83       	std	Z+4, r21	; 0x04
     a66:	65 83       	std	Z+5, r22	; 0x05
     a68:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a6a:	87 83       	std	Z+7, r24	; 0x07
     a6c:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a6e:	81 87       	std	Z+9, r24	; 0x09
     a70:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a72:	10 82       	st	Z, r1
     a74:	08 95       	ret

00000a76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     a76:	fc 01       	movw	r30, r24
     a78:	12 86       	std	Z+10, r1	; 0x0a
     a7a:	13 86       	std	Z+11, r1	; 0x0b
     a7c:	08 95       	ret

00000a7e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	9c 01       	movw	r18, r24
     a84:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     a86:	dc 01       	movw	r26, r24
     a88:	11 96       	adiw	r26, 0x01	; 1
     a8a:	cd 91       	ld	r28, X+
     a8c:	dc 91       	ld	r29, X
     a8e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     a90:	c4 83       	std	Z+4, r28	; 0x04
     a92:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a94:	8e 81       	ldd	r24, Y+6	; 0x06
     a96:	9f 81       	ldd	r25, Y+7	; 0x07
     a98:	86 83       	std	Z+6, r24	; 0x06
     a9a:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     a9c:	8e 81       	ldd	r24, Y+6	; 0x06
     a9e:	9f 81       	ldd	r25, Y+7	; 0x07
     aa0:	dc 01       	movw	r26, r24
     aa2:	14 96       	adiw	r26, 0x04	; 4
     aa4:	6d 93       	st	X+, r22
     aa6:	7c 93       	st	X, r23
     aa8:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     aaa:	6e 83       	std	Y+6, r22	; 0x06
     aac:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     aae:	22 87       	std	Z+10, r18	; 0x0a
     ab0:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     ab2:	f9 01       	movw	r30, r18
     ab4:	80 81       	ld	r24, Z
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	80 83       	st	Z, r24
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     aca:	08 81       	ld	r16, Y
     acc:	19 81       	ldd	r17, Y+1	; 0x01
     ace:	2a 81       	ldd	r18, Y+2	; 0x02
     ad0:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     ad2:	0f 3f       	cpi	r16, 0xFF	; 255
     ad4:	4f ef       	ldi	r20, 0xFF	; 255
     ad6:	14 07       	cpc	r17, r20
     ad8:	24 07       	cpc	r18, r20
     ada:	34 07       	cpc	r19, r20
     adc:	21 f4       	brne	.+8      	; 0xae6 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     ade:	fc 01       	movw	r30, r24
     ae0:	a1 85       	ldd	r26, Z+9	; 0x09
     ae2:	b2 85       	ldd	r27, Z+10	; 0x0a
     ae4:	11 c0       	rjmp	.+34     	; 0xb08 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ae6:	dc 01       	movw	r26, r24
     ae8:	13 96       	adiw	r26, 0x03	; 3
     aea:	01 c0       	rjmp	.+2      	; 0xaee <vListInsert+0x2e>
     aec:	df 01       	movw	r26, r30
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	ed 91       	ld	r30, X+
     af2:	fc 91       	ld	r31, X
     af4:	15 97       	sbiw	r26, 0x05	; 5
     af6:	40 81       	ld	r20, Z
     af8:	51 81       	ldd	r21, Z+1	; 0x01
     afa:	62 81       	ldd	r22, Z+2	; 0x02
     afc:	73 81       	ldd	r23, Z+3	; 0x03
     afe:	04 17       	cp	r16, r20
     b00:	15 07       	cpc	r17, r21
     b02:	26 07       	cpc	r18, r22
     b04:	37 07       	cpc	r19, r23
     b06:	90 f7       	brcc	.-28     	; 0xaec <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     b08:	14 96       	adiw	r26, 0x04	; 4
     b0a:	ed 91       	ld	r30, X+
     b0c:	fc 91       	ld	r31, X
     b0e:	15 97       	sbiw	r26, 0x05	; 5
     b10:	ec 83       	std	Y+4, r30	; 0x04
     b12:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b14:	c6 83       	std	Z+6, r28	; 0x06
     b16:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     b18:	ae 83       	std	Y+6, r26	; 0x06
     b1a:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     b1c:	14 96       	adiw	r26, 0x04	; 4
     b1e:	cd 93       	st	X+, r28
     b20:	dc 93       	st	X, r29
     b22:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     b24:	8a 87       	std	Y+10, r24	; 0x0a
     b26:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     b28:	fc 01       	movw	r30, r24
     b2a:	20 81       	ld	r18, Z
     b2c:	2f 5f       	subi	r18, 0xFF	; 255
     b2e:	20 83       	st	Z, r18
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	08 95       	ret

00000b3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     b40:	a2 85       	ldd	r26, Z+10	; 0x0a
     b42:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b44:	c4 81       	ldd	r28, Z+4	; 0x04
     b46:	d5 81       	ldd	r29, Z+5	; 0x05
     b48:	86 81       	ldd	r24, Z+6	; 0x06
     b4a:	97 81       	ldd	r25, Z+7	; 0x07
     b4c:	8e 83       	std	Y+6, r24	; 0x06
     b4e:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b50:	c6 81       	ldd	r28, Z+6	; 0x06
     b52:	d7 81       	ldd	r29, Z+7	; 0x07
     b54:	84 81       	ldd	r24, Z+4	; 0x04
     b56:	95 81       	ldd	r25, Z+5	; 0x05
     b58:	8c 83       	std	Y+4, r24	; 0x04
     b5a:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	12 97       	sbiw	r26, 0x02	; 2
     b64:	e8 17       	cp	r30, r24
     b66:	f9 07       	cpc	r31, r25
     b68:	31 f4       	brne	.+12     	; 0xb76 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     b6a:	86 81       	ldd	r24, Z+6	; 0x06
     b6c:	97 81       	ldd	r25, Z+7	; 0x07
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	8d 93       	st	X+, r24
     b72:	9c 93       	st	X, r25
     b74:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     b76:	12 86       	std	Z+10, r1	; 0x0a
     b78:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     b7a:	8c 91       	ld	r24, X
     b7c:	81 50       	subi	r24, 0x01	; 1
     b7e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     b80:	8c 91       	ld	r24, X
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <_portSetInterruptMaskFromIsr>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     b88:	e0 ea       	ldi	r30, 0xA0	; 160
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	92 81       	ldd	r25, Z+2	; 0x02
     b90:	98 7f       	andi	r25, 0xF8	; 248
     b92:	92 83       	std	Z+2, r25	; 0x02
     b94:	08 95       	ret

00000b96 <pxPortInitialiseStack>:
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	31 e1       	ldi	r19, 0x11	; 17
     ba0:	fc 01       	movw	r30, r24
     ba2:	30 83       	st	Z, r19
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	22 e2       	ldi	r18, 0x22	; 34
     ba8:	20 83       	st	Z, r18
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	a3 e3       	ldi	r26, 0x33	; 51
     bae:	a0 83       	st	Z, r26
     bb0:	6b 01       	movw	r12, r22
     bb2:	e1 2c       	mov	r14, r1
     bb4:	f1 2c       	mov	r15, r1
     bb6:	31 97       	sbiw	r30, 0x01	; 1
     bb8:	60 83       	st	Z, r22
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	d0 82       	st	Z, r13
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	e0 82       	st	Z, r14
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	61 e3       	ldi	r22, 0x31	; 49
     bc6:	60 83       	st	Z, r22
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	60 e8       	ldi	r22, 0x80	; 128
     bcc:	60 83       	st	Z, r22
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	67 e8       	ldi	r22, 0x87	; 135
     bd2:	60 83       	st	Z, r22
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	10 82       	st	Z, r1
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	10 82       	st	Z, r1
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	62 e0       	ldi	r22, 0x02	; 2
     be0:	60 83       	st	Z, r22
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	60 83       	st	Z, r22
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	64 e0       	ldi	r22, 0x04	; 4
     bec:	60 83       	st	Z, r22
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	65 e0       	ldi	r22, 0x05	; 5
     bf2:	60 83       	st	Z, r22
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	66 e0       	ldi	r22, 0x06	; 6
     bf8:	60 83       	st	Z, r22
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	67 e0       	ldi	r22, 0x07	; 7
     bfe:	60 83       	st	Z, r22
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	68 e0       	ldi	r22, 0x08	; 8
     c04:	60 83       	st	Z, r22
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	69 e0       	ldi	r22, 0x09	; 9
     c0a:	60 83       	st	Z, r22
     c0c:	31 97       	sbiw	r30, 0x01	; 1
     c0e:	60 e1       	ldi	r22, 0x10	; 16
     c10:	60 83       	st	Z, r22
     c12:	31 97       	sbiw	r30, 0x01	; 1
     c14:	30 83       	st	Z, r19
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	32 e1       	ldi	r19, 0x12	; 18
     c1a:	30 83       	st	Z, r19
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	33 e1       	ldi	r19, 0x13	; 19
     c20:	30 83       	st	Z, r19
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	34 e1       	ldi	r19, 0x14	; 20
     c26:	30 83       	st	Z, r19
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	35 e1       	ldi	r19, 0x15	; 21
     c2c:	30 83       	st	Z, r19
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	36 e1       	ldi	r19, 0x16	; 22
     c32:	30 83       	st	Z, r19
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	37 e1       	ldi	r19, 0x17	; 23
     c38:	30 83       	st	Z, r19
     c3a:	31 97       	sbiw	r30, 0x01	; 1
     c3c:	38 e1       	ldi	r19, 0x18	; 24
     c3e:	30 83       	st	Z, r19
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	39 e1       	ldi	r19, 0x19	; 25
     c44:	30 83       	st	Z, r19
     c46:	31 97       	sbiw	r30, 0x01	; 1
     c48:	30 e2       	ldi	r19, 0x20	; 32
     c4a:	30 83       	st	Z, r19
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	31 e2       	ldi	r19, 0x21	; 33
     c50:	30 83       	st	Z, r19
     c52:	31 97       	sbiw	r30, 0x01	; 1
     c54:	20 83       	st	Z, r18
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	23 e2       	ldi	r18, 0x23	; 35
     c5a:	20 83       	st	Z, r18
     c5c:	6a 01       	movw	r12, r20
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	40 83       	st	Z, r20
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	d0 82       	st	Z, r13
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	26 e2       	ldi	r18, 0x26	; 38
     c6a:	20 83       	st	Z, r18
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	27 e2       	ldi	r18, 0x27	; 39
     c70:	20 83       	st	Z, r18
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	28 e2       	ldi	r18, 0x28	; 40
     c76:	20 83       	st	Z, r18
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	29 e2       	ldi	r18, 0x29	; 41
     c7c:	20 83       	st	Z, r18
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	20 e3       	ldi	r18, 0x30	; 48
     c82:	20 83       	st	Z, r18
     c84:	88 97       	sbiw	r24, 0x28	; 40
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
     c8e:	08 95       	ret

00000c90 <xPortStartScheduler>:
     c90:	83 ef       	ldi	r24, 0xF3	; 243
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     c98:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     c9c:	65 e0       	ldi	r22, 0x05	; 5
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	98 e0       	ldi	r25, 0x08	; 8
     ca2:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	98 e0       	ldi	r25, 0x08	; 8
     cac:	0e 94 56 03 	call	0x6ac	; 0x6ac <TC0_SetOverflowIntLevel>
     cb0:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     cb4:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     cb8:	0d 90       	ld	r0, X+
     cba:	0d be       	out	0x3d, r0	; 61
     cbc:	0d 90       	ld	r0, X+
     cbe:	0e be       	out	0x3e, r0	; 62
     cc0:	ef 91       	pop	r30
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	7f 90       	pop	r7
     cf0:	6f 90       	pop	r6
     cf2:	5f 90       	pop	r5
     cf4:	4f 90       	pop	r4
     cf6:	3f 90       	pop	r3
     cf8:	2f 90       	pop	r2
     cfa:	1f 90       	pop	r1
     cfc:	0f 90       	pop	r0
     cfe:	ff 91       	pop	r31
     d00:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d04:	ff 91       	pop	r31
     d06:	ff bf       	out	0x3f, r31	; 63
     d08:	ff 91       	pop	r31
     d0a:	08 95       	ret
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	08 95       	ret

00000d10 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d10:	ff 93       	push	r31
     d12:	ff b7       	in	r31, 0x3f	; 63
     d14:	ff 93       	push	r31
     d16:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d1a:	ff 93       	push	r31
     d1c:	f8 7f       	andi	r31, 0xF8	; 248
     d1e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d22:	0f 92       	push	r0
     d24:	1f 92       	push	r1
     d26:	11 24       	eor	r1, r1
     d28:	2f 92       	push	r2
     d2a:	3f 92       	push	r3
     d2c:	4f 92       	push	r4
     d2e:	5f 92       	push	r5
     d30:	6f 92       	push	r6
     d32:	7f 92       	push	r7
     d34:	8f 92       	push	r8
     d36:	9f 92       	push	r9
     d38:	af 92       	push	r10
     d3a:	bf 92       	push	r11
     d3c:	cf 92       	push	r12
     d3e:	df 92       	push	r13
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ef 93       	push	r30
     d62:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     d66:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     d6a:	0d b6       	in	r0, 0x3d	; 61
     d6c:	0d 92       	st	X+, r0
     d6e:	0e b6       	in	r0, 0x3e	; 62
     d70:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d72:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d76:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     d7a:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     d7e:	0d 90       	ld	r0, X+
     d80:	0d be       	out	0x3d, r0	; 61
     d82:	0d 90       	ld	r0, X+
     d84:	0e be       	out	0x3e, r0	; 62
     d86:	ef 91       	pop	r30
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	9f 90       	pop	r9
     db2:	8f 90       	pop	r8
     db4:	7f 90       	pop	r7
     db6:	6f 90       	pop	r6
     db8:	5f 90       	pop	r5
     dba:	4f 90       	pop	r4
     dbc:	3f 90       	pop	r3
     dbe:	2f 90       	pop	r2
     dc0:	1f 90       	pop	r1
     dc2:	0f 90       	pop	r0
     dc4:	ff 91       	pop	r31
     dc6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     dca:	ff 91       	pop	r31
     dcc:	ff bf       	out	0x3f, r31	; 63
     dce:	ff 91       	pop	r31
	asm volatile ( "ret" );
     dd0:	08 95       	ret

00000dd2 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     dd2:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     dd4:	90 91 de 2c 	lds	r25, 0x2CDE	; 0x802cde <intTaskSwitchPending>
     dd8:	89 2b       	or	r24, r25
     dda:	80 93 de 2c 	sts	0x2CDE, r24	; 0x802cde <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     dde:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     de2:	91 30       	cpi	r25, 0x01	; 1
     de4:	41 f0       	breq	.+16     	; 0xdf6 <portTaskSwitchContext+0x24>
     de6:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     dea:	92 30       	cpi	r25, 0x02	; 2
     dec:	21 f0       	breq	.+8      	; 0xdf6 <portTaskSwitchContext+0x24>
     dee:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	59 f4       	brne	.+22     	; 0xe0c <portTaskSwitchContext+0x3a>
     df6:	88 23       	and	r24, r24
     df8:	49 f0       	breq	.+18     	; 0xe0c <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     dfa:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
     dfe:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     e00:	10 92 de 2c 	sts	0x2CDE, r1	; 0x802cde <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     e04:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     e08:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		}                                          					
	}
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     e10:	ff 93       	push	r31
     e12:	ff b7       	in	r31, 0x3f	; 63
     e14:	ff 93       	push	r31
     e16:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e1a:	ff 93       	push	r31
     e1c:	f8 7f       	andi	r31, 0xF8	; 248
     e1e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e22:	0f 92       	push	r0
     e24:	1f 92       	push	r1
     e26:	11 24       	eor	r1, r1
     e28:	2f 92       	push	r2
     e2a:	3f 92       	push	r3
     e2c:	4f 92       	push	r4
     e2e:	5f 92       	push	r5
     e30:	6f 92       	push	r6
     e32:	7f 92       	push	r7
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	ef 93       	push	r30
     e62:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     e66:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0
	//
	static void portTaskIncrementTick( void )
	{
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
     e72:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
     e76:	c8 2f       	mov	r28, r24
		xTaskIncrementTick();
     e78:	0e 94 8f 0c 	call	0x191e	; 0x191e <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
     e7c:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
		portTaskIncrementTick();
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <portTaskSwitchContext>
     e86:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     e8a:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     e8e:	0d 90       	ld	r0, X+
     e90:	0d be       	out	0x3d, r0	; 61
     e92:	0d 90       	ld	r0, X+
     e94:	0e be       	out	0x3e, r0	; 62
     e96:	ef 91       	pop	r30
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	8f 90       	pop	r8
     ec4:	7f 90       	pop	r7
     ec6:	6f 90       	pop	r6
     ec8:	5f 90       	pop	r5
     eca:	4f 90       	pop	r4
     ecc:	3f 90       	pop	r3
     ece:	2f 90       	pop	r2
     ed0:	1f 90       	pop	r1
     ed2:	0f 90       	pop	r0
     ed4:	ff 91       	pop	r31
     ed6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eda:	ff 91       	pop	r31
     edc:	ff bf       	out	0x3f, r31	; 63
     ede:	ff 91       	pop	r31
     ee0:	18 95       	reti

00000ee2 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     ee2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ee6:	ff 93       	push	r31
     ee8:	f8 7f       	andi	r31, 0xF8	; 248
     eea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eee:	fc 01       	movw	r30, r24
     ef0:	96 8d       	ldd	r25, Z+30	; 0x1e
     ef2:	ff 91       	pop	r31
     ef4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	91 11       	cpse	r25, r1
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 95       	ret

00000f00 <prvIsQueueFull>:
     f00:	dc 01       	movw	r26, r24
     f02:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f06:	ff 93       	push	r31
     f08:	f8 7f       	andi	r31, 0xF8	; 248
     f0a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f0e:	5e 96       	adiw	r26, 0x1e	; 30
     f10:	9c 91       	ld	r25, X
     f12:	5e 97       	sbiw	r26, 0x1e	; 30
     f14:	ff 91       	pop	r31
     f16:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	5f 96       	adiw	r26, 0x1f	; 31
     f1e:	2c 91       	ld	r18, X
     f20:	29 13       	cpse	r18, r25
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret

00000f26 <prvCopyDataToQueue>:
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	ec 01       	movw	r28, r24
     f30:	04 2f       	mov	r16, r20
     f32:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f34:	48 a1       	ldd	r20, Y+32	; 0x20
     f36:	44 23       	and	r20, r20
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <prvCopyDataToQueue+0x82>
     f3a:	01 11       	cpse	r16, r1
     f3c:	16 c0       	rjmp	.+44     	; 0xf6a <prvCopyDataToQueue+0x44>
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <memcpy>
     f48:	28 a1       	ldd	r18, Y+32	; 0x20
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	82 0f       	add	r24, r18
     f50:	91 1d       	adc	r25, r1
     f52:	8c 83       	std	Y+4, r24	; 0x04
     f54:	9d 83       	std	Y+5, r25	; 0x05
     f56:	2a 81       	ldd	r18, Y+2	; 0x02
     f58:	3b 81       	ldd	r19, Y+3	; 0x03
     f5a:	82 17       	cp	r24, r18
     f5c:	93 07       	cpc	r25, r19
     f5e:	20 f1       	brcs	.+72     	; 0xfa8 <prvCopyDataToQueue+0x82>
     f60:	88 81       	ld	r24, Y
     f62:	99 81       	ldd	r25, Y+1	; 0x01
     f64:	8c 83       	std	Y+4, r24	; 0x04
     f66:	9d 83       	std	Y+5, r25	; 0x05
     f68:	1f c0       	rjmp	.+62     	; 0xfa8 <prvCopyDataToQueue+0x82>
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	8e 81       	ldd	r24, Y+6	; 0x06
     f6e:	9f 81       	ldd	r25, Y+7	; 0x07
     f70:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <memcpy>
     f74:	88 a1       	ldd	r24, Y+32	; 0x20
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	91 95       	neg	r25
     f7a:	81 95       	neg	r24
     f7c:	91 09       	sbc	r25, r1
     f7e:	2e 81       	ldd	r18, Y+6	; 0x06
     f80:	3f 81       	ldd	r19, Y+7	; 0x07
     f82:	28 0f       	add	r18, r24
     f84:	39 1f       	adc	r19, r25
     f86:	2e 83       	std	Y+6, r18	; 0x06
     f88:	3f 83       	std	Y+7, r19	; 0x07
     f8a:	48 81       	ld	r20, Y
     f8c:	59 81       	ldd	r21, Y+1	; 0x01
     f8e:	24 17       	cp	r18, r20
     f90:	35 07       	cpc	r19, r21
     f92:	30 f4       	brcc	.+12     	; 0xfa0 <prvCopyDataToQueue+0x7a>
     f94:	2a 81       	ldd	r18, Y+2	; 0x02
     f96:	3b 81       	ldd	r19, Y+3	; 0x03
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	8e 83       	std	Y+6, r24	; 0x06
     f9e:	9f 83       	std	Y+7, r25	; 0x07
     fa0:	02 30       	cpi	r16, 0x02	; 2
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <prvCopyDataToQueue+0x82>
     fa4:	11 11       	cpse	r17, r1
     fa6:	11 50       	subi	r17, 0x01	; 1
     fa8:	1f 5f       	subi	r17, 0xFF	; 255
     faa:	1e 8f       	std	Y+30, r17	; 0x1e
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	08 95       	ret

00000fb8 <prvCopyDataFromQueue>:
     fb8:	fc 01       	movw	r30, r24
     fba:	40 a1       	ldd	r20, Z+32	; 0x20
     fbc:	44 23       	and	r20, r20
     fbe:	a9 f0       	breq	.+42     	; 0xfea <prvCopyDataFromQueue+0x32>
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	26 81       	ldd	r18, Z+6	; 0x06
     fc4:	37 81       	ldd	r19, Z+7	; 0x07
     fc6:	24 0f       	add	r18, r20
     fc8:	35 1f       	adc	r19, r21
     fca:	26 83       	std	Z+6, r18	; 0x06
     fcc:	37 83       	std	Z+7, r19	; 0x07
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	28 17       	cp	r18, r24
     fd4:	39 07       	cpc	r19, r25
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <prvCopyDataFromQueue+0x28>
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	86 83       	std	Z+6, r24	; 0x06
     fde:	97 83       	std	Z+7, r25	; 0x07
     fe0:	cb 01       	movw	r24, r22
     fe2:	66 81       	ldd	r22, Z+6	; 0x06
     fe4:	77 81       	ldd	r23, Z+7	; 0x07
     fe6:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <memcpy>
     fea:	08 95       	ret

00000fec <prvUnlockQueue>:
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	8c 01       	movw	r16, r24
     ff8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ffc:	ff 93       	push	r31
     ffe:	f8 7f       	andi	r31, 0xF8	; 248
    1000:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1004:	fc 01       	movw	r30, r24
    1006:	c2 a1       	ldd	r28, Z+34	; 0x22
    1008:	1c 16       	cp	r1, r28
    100a:	ac f4       	brge	.+42     	; 0x1036 <prvUnlockQueue+0x4a>
    100c:	83 89       	ldd	r24, Z+19	; 0x13
    100e:	81 11       	cpse	r24, r1
    1010:	06 c0       	rjmp	.+12     	; 0x101e <prvUnlockQueue+0x32>
    1012:	11 c0       	rjmp	.+34     	; 0x1036 <prvUnlockQueue+0x4a>
    1014:	f8 01       	movw	r30, r16
    1016:	83 89       	ldd	r24, Z+19	; 0x13
    1018:	81 11       	cpse	r24, r1
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <prvUnlockQueue+0x3a>
    101c:	0c c0       	rjmp	.+24     	; 0x1036 <prvUnlockQueue+0x4a>
    101e:	78 01       	movw	r14, r16
    1020:	f3 e1       	ldi	r31, 0x13	; 19
    1022:	ef 0e       	add	r14, r31
    1024:	f1 1c       	adc	r15, r1
    1026:	c7 01       	movw	r24, r14
    1028:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    102c:	81 11       	cpse	r24, r1
    102e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskMissedYield>
    1032:	c1 50       	subi	r28, 0x01	; 1
    1034:	79 f7       	brne	.-34     	; 0x1014 <prvUnlockQueue+0x28>
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	f8 01       	movw	r30, r16
    103a:	82 a3       	std	Z+34, r24	; 0x22
    103c:	ff 91       	pop	r31
    103e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1042:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1046:	ff 93       	push	r31
    1048:	f8 7f       	andi	r31, 0xF8	; 248
    104a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    104e:	f8 01       	movw	r30, r16
    1050:	c1 a1       	ldd	r28, Z+33	; 0x21
    1052:	1c 16       	cp	r1, r28
    1054:	ac f4       	brge	.+42     	; 0x1080 <prvUnlockQueue+0x94>
    1056:	80 85       	ldd	r24, Z+8	; 0x08
    1058:	81 11       	cpse	r24, r1
    105a:	06 c0       	rjmp	.+12     	; 0x1068 <prvUnlockQueue+0x7c>
    105c:	11 c0       	rjmp	.+34     	; 0x1080 <prvUnlockQueue+0x94>
    105e:	f8 01       	movw	r30, r16
    1060:	80 85       	ldd	r24, Z+8	; 0x08
    1062:	81 11       	cpse	r24, r1
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <prvUnlockQueue+0x84>
    1066:	0c c0       	rjmp	.+24     	; 0x1080 <prvUnlockQueue+0x94>
    1068:	78 01       	movw	r14, r16
    106a:	f8 e0       	ldi	r31, 0x08	; 8
    106c:	ef 0e       	add	r14, r31
    106e:	f1 1c       	adc	r15, r1
    1070:	c7 01       	movw	r24, r14
    1072:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    1076:	81 11       	cpse	r24, r1
    1078:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskMissedYield>
    107c:	c1 50       	subi	r28, 0x01	; 1
    107e:	79 f7       	brne	.-34     	; 0x105e <prvUnlockQueue+0x72>
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	f8 01       	movw	r30, r16
    1084:	81 a3       	std	Z+33, r24	; 0x21
    1086:	ff 91       	pop	r31
    1088:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	08 95       	ret

00001098 <xQueueGenericReset>:
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10a2:	ff 93       	push	r31
    10a4:	f8 7f       	andi	r31, 0xF8	; 248
    10a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10aa:	48 81       	ld	r20, Y
    10ac:	59 81       	ldd	r21, Y+1	; 0x01
    10ae:	28 a1       	ldd	r18, Y+32	; 0x20
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    10b4:	72 9f       	mul	r23, r18
    10b6:	c0 01       	movw	r24, r0
    10b8:	73 9f       	mul	r23, r19
    10ba:	90 0d       	add	r25, r0
    10bc:	11 24       	eor	r1, r1
    10be:	fa 01       	movw	r30, r20
    10c0:	e8 0f       	add	r30, r24
    10c2:	f9 1f       	adc	r31, r25
    10c4:	ea 83       	std	Y+2, r30	; 0x02
    10c6:	fb 83       	std	Y+3, r31	; 0x03
    10c8:	1e 8e       	std	Y+30, r1	; 0x1e
    10ca:	4c 83       	std	Y+4, r20	; 0x04
    10cc:	5d 83       	std	Y+5, r21	; 0x05
    10ce:	82 1b       	sub	r24, r18
    10d0:	93 0b       	sbc	r25, r19
    10d2:	84 0f       	add	r24, r20
    10d4:	95 1f       	adc	r25, r21
    10d6:	8e 83       	std	Y+6, r24	; 0x06
    10d8:	9f 83       	std	Y+7, r25	; 0x07
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	89 a3       	std	Y+33, r24	; 0x21
    10de:	8a a3       	std	Y+34, r24	; 0x22
    10e0:	61 11       	cpse	r22, r1
    10e2:	0c c0       	rjmp	.+24     	; 0x10fc <xQueueGenericReset+0x64>
    10e4:	88 85       	ldd	r24, Y+8	; 0x08
    10e6:	88 23       	and	r24, r24
    10e8:	89 f0       	breq	.+34     	; 0x110c <xQueueGenericReset+0x74>
    10ea:	ce 01       	movw	r24, r28
    10ec:	08 96       	adiw	r24, 0x08	; 8
    10ee:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    10f2:	88 23       	and	r24, r24
    10f4:	59 f0       	breq	.+22     	; 0x110c <xQueueGenericReset+0x74>
    10f6:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <xQueueGenericReset+0x74>
    10fc:	ce 01       	movw	r24, r28
    10fe:	08 96       	adiw	r24, 0x08	; 8
    1100:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    1104:	ce 01       	movw	r24, r28
    1106:	43 96       	adiw	r24, 0x13	; 19
    1108:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    110c:	ff 91       	pop	r31
    110e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <xQueueGenericCreate>:
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	08 2f       	mov	r16, r24
    1126:	16 2f       	mov	r17, r22
    1128:	f4 2e       	mov	r15, r20
    112a:	66 23       	and	r22, r22
    112c:	c9 f0       	breq	.+50     	; 0x1160 <xQueueGenericCreate+0x46>
    112e:	86 9f       	mul	r24, r22
    1130:	c0 01       	movw	r24, r0
    1132:	11 24       	eor	r1, r1
    1134:	85 96       	adiw	r24, 0x25	; 37
    1136:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    113a:	ec 01       	movw	r28, r24
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	49 f4       	brne	.+18     	; 0x1152 <xQueueGenericCreate+0x38>
    1140:	16 c0       	rjmp	.+44     	; 0x116e <xQueueGenericCreate+0x54>
    1142:	0f 8f       	std	Y+31, r16	; 0x1f
    1144:	18 a3       	std	Y+32, r17	; 0x20
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	ce 01       	movw	r24, r28
    114a:	0e 94 4c 08 	call	0x1098	; 0x1098 <xQueueGenericReset>
    114e:	fc a2       	std	Y+36, r15	; 0x24
    1150:	0e c0       	rjmp	.+28     	; 0x116e <xQueueGenericCreate+0x54>
    1152:	85 96       	adiw	r24, 0x25	; 37
    1154:	88 83       	st	Y, r24
    1156:	99 83       	std	Y+1, r25	; 0x01
    1158:	f4 cf       	rjmp	.-24     	; 0x1142 <xQueueGenericCreate+0x28>
    115a:	c8 83       	st	Y, r28
    115c:	d9 83       	std	Y+1, r29	; 0x01
    115e:	f1 cf       	rjmp	.-30     	; 0x1142 <xQueueGenericCreate+0x28>
    1160:	85 e2       	ldi	r24, 0x25	; 37
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    1168:	ec 01       	movw	r28, r24
    116a:	89 2b       	or	r24, r25
    116c:	b1 f7       	brne	.-20     	; 0x115a <xQueueGenericCreate+0x40>
    116e:	ce 01       	movw	r24, r28
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	08 95       	ret

0000117c <xQueueGenericSend>:
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	29 97       	sbiw	r28, 0x09	; 9
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	7c 01       	movw	r14, r24
    119c:	5b 01       	movw	r10, r22
    119e:	2e 83       	std	Y+6, r18	; 0x06
    11a0:	3f 83       	std	Y+7, r19	; 0x07
    11a2:	48 87       	std	Y+8, r20	; 0x08
    11a4:	59 87       	std	Y+9, r21	; 0x09
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	6c 01       	movw	r12, r24
    11aa:	88 e0       	ldi	r24, 0x08	; 8
    11ac:	c8 0e       	add	r12, r24
    11ae:	d1 1c       	adc	r13, r1
    11b0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11b4:	ff 93       	push	r31
    11b6:	f8 7f       	andi	r31, 0xF8	; 248
    11b8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11bc:	f7 01       	movw	r30, r14
    11be:	96 8d       	ldd	r25, Z+30	; 0x1e
    11c0:	87 8d       	ldd	r24, Z+31	; 0x1f
    11c2:	98 17       	cp	r25, r24
    11c4:	10 f0       	brcs	.+4      	; 0x11ca <xQueueGenericSend+0x4e>
    11c6:	02 30       	cpi	r16, 0x02	; 2
    11c8:	d1 f4       	brne	.+52     	; 0x11fe <xQueueGenericSend+0x82>
    11ca:	40 2f       	mov	r20, r16
    11cc:	b5 01       	movw	r22, r10
    11ce:	c7 01       	movw	r24, r14
    11d0:	0e 94 93 07 	call	0xf26	; 0xf26 <prvCopyDataToQueue>
    11d4:	f7 01       	movw	r30, r14
    11d6:	93 89       	ldd	r25, Z+19	; 0x13
    11d8:	99 23       	and	r25, r25
    11da:	49 f0       	breq	.+18     	; 0x11ee <xQueueGenericSend+0x72>
    11dc:	c7 01       	movw	r24, r14
    11de:	43 96       	adiw	r24, 0x13	; 19
    11e0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    11e4:	88 23       	and	r24, r24
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <xQueueGenericSend+0x78>
    11e8:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <xQueueGenericSend+0x78>
    11ee:	81 11       	cpse	r24, r1
    11f0:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    11f4:	ff 91       	pop	r31
    11f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	57 c0       	rjmp	.+174    	; 0x12ac <xQueueGenericSend+0x130>
    11fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1200:	9f 81       	ldd	r25, Y+7	; 0x07
    1202:	a8 85       	ldd	r26, Y+8	; 0x08
    1204:	b9 85       	ldd	r27, Y+9	; 0x09
    1206:	89 2b       	or	r24, r25
    1208:	8a 2b       	or	r24, r26
    120a:	8b 2b       	or	r24, r27
    120c:	29 f4       	brne	.+10     	; 0x1218 <xQueueGenericSend+0x9c>
    120e:	ff 91       	pop	r31
    1210:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	4a c0       	rjmp	.+148    	; 0x12ac <xQueueGenericSend+0x130>
    1218:	11 11       	cpse	r17, r1
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <xQueueGenericSend+0xaa>
    121c:	ce 01       	movw	r24, r28
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    1224:	11 e0       	ldi	r17, 0x01	; 1
    1226:	ff 91       	pop	r31
    1228:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    122c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    1230:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1234:	ff 93       	push	r31
    1236:	f8 7f       	andi	r31, 0xF8	; 248
    1238:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    123c:	f7 01       	movw	r30, r14
    123e:	81 a1       	ldd	r24, Z+33	; 0x21
    1240:	8f 3f       	cpi	r24, 0xFF	; 255
    1242:	09 f4       	brne	.+2      	; 0x1246 <xQueueGenericSend+0xca>
    1244:	11 a2       	std	Z+33, r1	; 0x21
    1246:	f7 01       	movw	r30, r14
    1248:	82 a1       	ldd	r24, Z+34	; 0x22
    124a:	8f 3f       	cpi	r24, 0xFF	; 255
    124c:	09 f4       	brne	.+2      	; 0x1250 <xQueueGenericSend+0xd4>
    124e:	12 a2       	std	Z+34, r1	; 0x22
    1250:	ff 91       	pop	r31
    1252:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1256:	be 01       	movw	r22, r28
    1258:	6a 5f       	subi	r22, 0xFA	; 250
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <xTaskCheckForTimeOut>
    1264:	81 11       	cpse	r24, r1
    1266:	1c c0       	rjmp	.+56     	; 0x12a0 <xQueueGenericSend+0x124>
    1268:	c7 01       	movw	r24, r14
    126a:	0e 94 80 07 	call	0xf00	; 0xf00 <prvIsQueueFull>
    126e:	88 23       	and	r24, r24
    1270:	89 f0       	breq	.+34     	; 0x1294 <xQueueGenericSend+0x118>
    1272:	4e 81       	ldd	r20, Y+6	; 0x06
    1274:	5f 81       	ldd	r21, Y+7	; 0x07
    1276:	68 85       	ldd	r22, Y+8	; 0x08
    1278:	79 85       	ldd	r23, Y+9	; 0x09
    127a:	c6 01       	movw	r24, r12
    127c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <vTaskPlaceOnEventList>
    1280:	c7 01       	movw	r24, r14
    1282:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1286:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    128a:	81 11       	cpse	r24, r1
    128c:	91 cf       	rjmp	.-222    	; 0x11b0 <xQueueGenericSend+0x34>
    128e:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1292:	8e cf       	rjmp	.-228    	; 0x11b0 <xQueueGenericSend+0x34>
    1294:	c7 01       	movw	r24, r14
    1296:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    129a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    129e:	88 cf       	rjmp	.-240    	; 0x11b0 <xQueueGenericSend+0x34>
    12a0:	c7 01       	movw	r24, r14
    12a2:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    12a6:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	29 96       	adiw	r28, 0x09	; 9
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	bf 90       	pop	r11
    12c4:	af 90       	pop	r10
    12c6:	08 95       	ret

000012c8 <xQueueGenericSendFromISR>:
    12c8:	af 92       	push	r10
    12ca:	bf 92       	push	r11
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ec 01       	movw	r28, r24
    12dc:	6b 01       	movw	r12, r22
    12de:	5a 01       	movw	r10, r20
    12e0:	02 2f       	mov	r16, r18
    12e2:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
    12e6:	f8 2e       	mov	r15, r24
    12e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ec:	98 17       	cp	r25, r24
    12ee:	10 f0       	brcs	.+4      	; 0x12f4 <xQueueGenericSendFromISR+0x2c>
    12f0:	02 30       	cpi	r16, 0x02	; 2
    12f2:	e1 f4       	brne	.+56     	; 0x132c <xQueueGenericSendFromISR+0x64>
    12f4:	1a a1       	ldd	r17, Y+34	; 0x22
    12f6:	40 2f       	mov	r20, r16
    12f8:	b6 01       	movw	r22, r12
    12fa:	ce 01       	movw	r24, r28
    12fc:	0e 94 93 07 	call	0xf26	; 0xf26 <prvCopyDataToQueue>
    1300:	1f 3f       	cpi	r17, 0xFF	; 255
    1302:	81 f4       	brne	.+32     	; 0x1324 <xQueueGenericSendFromISR+0x5c>
    1304:	8b 89       	ldd	r24, Y+19	; 0x13
    1306:	88 23       	and	r24, r24
    1308:	99 f0       	breq	.+38     	; 0x1330 <xQueueGenericSendFromISR+0x68>
    130a:	ce 01       	movw	r24, r28
    130c:	43 96       	adiw	r24, 0x13	; 19
    130e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    1312:	88 23       	and	r24, r24
    1314:	79 f0       	breq	.+30     	; 0x1334 <xQueueGenericSendFromISR+0x6c>
    1316:	a1 14       	cp	r10, r1
    1318:	b1 04       	cpc	r11, r1
    131a:	71 f0       	breq	.+28     	; 0x1338 <xQueueGenericSendFromISR+0x70>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	f5 01       	movw	r30, r10
    1320:	80 83       	st	Z, r24
    1322:	0b c0       	rjmp	.+22     	; 0x133a <xQueueGenericSendFromISR+0x72>
    1324:	1f 5f       	subi	r17, 0xFF	; 255
    1326:	1a a3       	std	Y+34, r17	; 0x22
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	07 c0       	rjmp	.+14     	; 0x133a <xQueueGenericSendFromISR+0x72>
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	05 c0       	rjmp	.+10     	; 0x133a <xQueueGenericSendFromISR+0x72>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	03 c0       	rjmp	.+6      	; 0x133a <xQueueGenericSendFromISR+0x72>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	01 c0       	rjmp	.+2      	; 0x133a <xQueueGenericSendFromISR+0x72>
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	08 95       	ret

00001352 <xQueueReceive>:
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	29 97       	sbiw	r28, 0x09	; 9
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	8c 01       	movw	r16, r24
    1372:	5b 01       	movw	r10, r22
    1374:	2e 83       	std	Y+6, r18	; 0x06
    1376:	3f 83       	std	Y+7, r19	; 0x07
    1378:	48 87       	std	Y+8, r20	; 0x08
    137a:	59 87       	std	Y+9, r21	; 0x09
    137c:	e1 2c       	mov	r14, r1
    137e:	6c 01       	movw	r12, r24
    1380:	83 e1       	ldi	r24, 0x13	; 19
    1382:	c8 0e       	add	r12, r24
    1384:	d1 1c       	adc	r13, r1
    1386:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    138a:	ff 93       	push	r31
    138c:	f8 7f       	andi	r31, 0xF8	; 248
    138e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1392:	f8 01       	movw	r30, r16
    1394:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1396:	ff 20       	and	r15, r15
    1398:	b1 f0       	breq	.+44     	; 0x13c6 <xQueueReceive+0x74>
    139a:	b5 01       	movw	r22, r10
    139c:	c8 01       	movw	r24, r16
    139e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <prvCopyDataFromQueue>
    13a2:	fa 94       	dec	r15
    13a4:	f8 01       	movw	r30, r16
    13a6:	f6 8e       	std	Z+30, r15	; 0x1e
    13a8:	80 85       	ldd	r24, Z+8	; 0x08
    13aa:	88 23       	and	r24, r24
    13ac:	39 f0       	breq	.+14     	; 0x13bc <xQueueReceive+0x6a>
    13ae:	c8 01       	movw	r24, r16
    13b0:	08 96       	adiw	r24, 0x08	; 8
    13b2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    13b6:	81 11       	cpse	r24, r1
    13b8:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    13bc:	ff 91       	pop	r31
    13be:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	5e c0       	rjmp	.+188    	; 0x1482 <xQueueReceive+0x130>
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	a8 85       	ldd	r26, Y+8	; 0x08
    13cc:	b9 85       	ldd	r27, Y+9	; 0x09
    13ce:	89 2b       	or	r24, r25
    13d0:	8a 2b       	or	r24, r26
    13d2:	8b 2b       	or	r24, r27
    13d4:	29 f4       	brne	.+10     	; 0x13e0 <xQueueReceive+0x8e>
    13d6:	ff 91       	pop	r31
    13d8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	51 c0       	rjmp	.+162    	; 0x1482 <xQueueReceive+0x130>
    13e0:	e1 10       	cpse	r14, r1
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <xQueueReceive+0x9e>
    13e4:	ce 01       	movw	r24, r28
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    13ec:	ee 24       	eor	r14, r14
    13ee:	e3 94       	inc	r14
    13f0:	ff 91       	pop	r31
    13f2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13f6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    13fa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13fe:	ff 93       	push	r31
    1400:	f8 7f       	andi	r31, 0xF8	; 248
    1402:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1406:	f8 01       	movw	r30, r16
    1408:	81 a1       	ldd	r24, Z+33	; 0x21
    140a:	8f 3f       	cpi	r24, 0xFF	; 255
    140c:	09 f4       	brne	.+2      	; 0x1410 <xQueueReceive+0xbe>
    140e:	11 a2       	std	Z+33, r1	; 0x21
    1410:	f8 01       	movw	r30, r16
    1412:	82 a1       	ldd	r24, Z+34	; 0x22
    1414:	8f 3f       	cpi	r24, 0xFF	; 255
    1416:	09 f4       	brne	.+2      	; 0x141a <xQueueReceive+0xc8>
    1418:	12 a2       	std	Z+34, r1	; 0x22
    141a:	ff 91       	pop	r31
    141c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1420:	be 01       	movw	r22, r28
    1422:	6a 5f       	subi	r22, 0xFA	; 250
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	ce 01       	movw	r24, r28
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <xTaskCheckForTimeOut>
    142e:	81 11       	cpse	r24, r1
    1430:	1c c0       	rjmp	.+56     	; 0x146a <xQueueReceive+0x118>
    1432:	c8 01       	movw	r24, r16
    1434:	0e 94 71 07 	call	0xee2	; 0xee2 <prvIsQueueEmpty>
    1438:	88 23       	and	r24, r24
    143a:	89 f0       	breq	.+34     	; 0x145e <xQueueReceive+0x10c>
    143c:	4e 81       	ldd	r20, Y+6	; 0x06
    143e:	5f 81       	ldd	r21, Y+7	; 0x07
    1440:	68 85       	ldd	r22, Y+8	; 0x08
    1442:	79 85       	ldd	r23, Y+9	; 0x09
    1444:	c6 01       	movw	r24, r12
    1446:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <vTaskPlaceOnEventList>
    144a:	c8 01       	movw	r24, r16
    144c:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1450:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1454:	81 11       	cpse	r24, r1
    1456:	97 cf       	rjmp	.-210    	; 0x1386 <xQueueReceive+0x34>
    1458:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    145c:	94 cf       	rjmp	.-216    	; 0x1386 <xQueueReceive+0x34>
    145e:	c8 01       	movw	r24, r16
    1460:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1464:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1468:	8e cf       	rjmp	.-228    	; 0x1386 <xQueueReceive+0x34>
    146a:	c8 01       	movw	r24, r16
    146c:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1470:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1474:	c8 01       	movw	r24, r16
    1476:	0e 94 71 07 	call	0xee2	; 0xee2 <prvIsQueueEmpty>
    147a:	88 23       	and	r24, r24
    147c:	09 f4       	brne	.+2      	; 0x1480 <xQueueReceive+0x12e>
    147e:	83 cf       	rjmp	.-250    	; 0x1386 <xQueueReceive+0x34>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	29 96       	adiw	r28, 0x09	; 9
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	08 95       	ret

0000149e <uxQueueMessagesWaiting>:
    149e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14a2:	ff 93       	push	r31
    14a4:	f8 7f       	andi	r31, 0xF8	; 248
    14a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14aa:	fc 01       	movw	r30, r24
    14ac:	86 8d       	ldd	r24, Z+30	; 0x1e
    14ae:	ff 91       	pop	r31
    14b0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14b4:	08 95       	ret

000014b6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    14bc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14c0:	ff 93       	push	r31
    14c2:	f8 7f       	andi	r31, 0xF8	; 248
    14c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14c8:	89 a1       	ldd	r24, Y+33	; 0x21
    14ca:	8f 3f       	cpi	r24, 0xFF	; 255
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <vQueueWaitForMessageRestricted+0x1a>
    14ce:	19 a2       	std	Y+33, r1	; 0x21
    14d0:	8a a1       	ldd	r24, Y+34	; 0x22
    14d2:	8f 3f       	cpi	r24, 0xFF	; 255
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <vQueueWaitForMessageRestricted+0x22>
    14d6:	1a a2       	std	Y+34, r1	; 0x22
    14d8:	ff 91       	pop	r31
    14da:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    14de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14e0:	81 11       	cpse	r24, r1
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    14e4:	ce 01       	movw	r24, r28
    14e6:	43 96       	adiw	r24, 0x13	; 19
    14e8:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    14ec:	ce 01       	movw	r24, r28
    14ee:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
	}
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    14f8:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    14fc:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    1500:	80 81       	ld	r24, Z
    1502:	81 11       	cpse	r24, r1
    1504:	0c c0       	rjmp	.+24     	; 0x151e <prvResetNextTaskUnblockTime+0x26>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	dc 01       	movw	r26, r24
    150c:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    1510:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1514:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1518:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    151c:	08 95       	ret
    151e:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    1522:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    1526:	07 80       	ldd	r0, Z+7	; 0x07
    1528:	f0 85       	ldd	r31, Z+8	; 0x08
    152a:	e0 2d       	mov	r30, r0
    152c:	00 84       	ldd	r0, Z+8	; 0x08
    152e:	f1 85       	ldd	r31, Z+9	; 0x09
    1530:	e0 2d       	mov	r30, r0
    1532:	82 81       	ldd	r24, Z+2	; 0x02
    1534:	93 81       	ldd	r25, Z+3	; 0x03
    1536:	a4 81       	ldd	r26, Z+4	; 0x04
    1538:	b5 81       	ldd	r27, Z+5	; 0x05
    153a:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    153e:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1542:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1546:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    154a:	08 95       	ret

0000154c <prvAddCurrentTaskToDelayedList>:
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	cf 93       	push	r28
    155e:	6b 01       	movw	r12, r22
    1560:	7c 01       	movw	r14, r24
    1562:	c4 2f       	mov	r28, r20
    1564:	80 90 2d 2c 	lds	r8, 0x2C2D	; 0x802c2d <xTickCount>
    1568:	90 90 2e 2c 	lds	r9, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    156c:	a0 90 2f 2c 	lds	r10, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1570:	b0 90 30 2c 	lds	r11, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1574:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1578:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    157c:	02 96       	adiw	r24, 0x02	; 2
    157e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	c8 16       	cp	r12, r24
    1586:	d8 06       	cpc	r13, r24
    1588:	e8 06       	cpc	r14, r24
    158a:	f8 06       	cpc	r15, r24
    158c:	69 f4       	brne	.+26     	; 0x15a8 <prvAddCurrentTaskToDelayedList+0x5c>
    158e:	cc 23       	and	r28, r28
    1590:	59 f0       	breq	.+22     	; 0x15a8 <prvAddCurrentTaskToDelayedList+0x5c>
    1592:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1596:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    159a:	6e 5f       	subi	r22, 0xFE	; 254
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	82 e3       	ldi	r24, 0x32	; 50
    15a0:	9c e2       	ldi	r25, 0x2C	; 44
    15a2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    15a6:	3f c0       	rjmp	.+126    	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    15a8:	c8 0c       	add	r12, r8
    15aa:	d9 1c       	adc	r13, r9
    15ac:	ea 1c       	adc	r14, r10
    15ae:	fb 1c       	adc	r15, r11
    15b0:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    15b4:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    15b8:	c2 82       	std	Z+2, r12	; 0x02
    15ba:	d3 82       	std	Z+3, r13	; 0x03
    15bc:	e4 82       	std	Z+4, r14	; 0x04
    15be:	f5 82       	std	Z+5, r15	; 0x05
    15c0:	c8 14       	cp	r12, r8
    15c2:	d9 04       	cpc	r13, r9
    15c4:	ea 04       	cpc	r14, r10
    15c6:	fb 04       	cpc	r15, r11
    15c8:	68 f4       	brcc	.+26     	; 0x15e4 <prvAddCurrentTaskToDelayedList+0x98>
    15ca:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    15ce:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    15d2:	80 91 48 2c 	lds	r24, 0x2C48	; 0x802c48 <pxOverflowDelayedTaskList>
    15d6:	90 91 49 2c 	lds	r25, 0x2C49	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    15da:	6e 5f       	subi	r22, 0xFE	; 254
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    15e2:	21 c0       	rjmp	.+66     	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    15e4:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    15e8:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    15ec:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    15f0:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    15f4:	6e 5f       	subi	r22, 0xFE	; 254
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    15fc:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <xNextTaskUnblockTime>
    1600:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1604:	a0 91 25 2c 	lds	r26, 0x2C25	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1608:	b0 91 26 2c 	lds	r27, 0x2C26	; 0x802c26 <xNextTaskUnblockTime+0x3>
    160c:	c8 16       	cp	r12, r24
    160e:	d9 06       	cpc	r13, r25
    1610:	ea 06       	cpc	r14, r26
    1612:	fb 06       	cpc	r15, r27
    1614:	40 f4       	brcc	.+16     	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    1616:	c0 92 23 2c 	sts	0x2C23, r12	; 0x802c23 <xNextTaskUnblockTime>
    161a:	d0 92 24 2c 	sts	0x2C24, r13	; 0x802c24 <xNextTaskUnblockTime+0x1>
    161e:	e0 92 25 2c 	sts	0x2C25, r14	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1622:	f0 92 26 2c 	sts	0x2C26, r15	; 0x802c26 <xNextTaskUnblockTime+0x3>
    1626:	cf 91       	pop	r28
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	9f 90       	pop	r9
    1636:	8f 90       	pop	r8
    1638:	08 95       	ret

0000163a <prvIdleTask>:
    163a:	c2 e6       	ldi	r28, 0x62	; 98
    163c:	dc e2       	ldi	r29, 0x2C	; 44
    163e:	88 81       	ld	r24, Y
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	10 f0       	brcs	.+4      	; 0x1648 <prvIdleTask+0xe>
    1644:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1648:	0e 94 21 13 	call	0x2642	; 0x2642 <vApplicationIdleHook>
    164c:	f8 cf       	rjmp	.-16     	; 0x163e <prvIdleTask+0x4>

0000164e <xTaskCreate>:
    164e:	4f 92       	push	r4
    1650:	5f 92       	push	r5
    1652:	6f 92       	push	r6
    1654:	7f 92       	push	r7
    1656:	8f 92       	push	r8
    1658:	9f 92       	push	r9
    165a:	af 92       	push	r10
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	4c 01       	movw	r8, r24
    166e:	6b 01       	movw	r12, r22
    1670:	5a 01       	movw	r10, r20
    1672:	29 01       	movw	r4, r18
    1674:	ca 01       	movw	r24, r20
    1676:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    167a:	3c 01       	movw	r6, r24
    167c:	89 2b       	or	r24, r25
    167e:	09 f4       	brne	.+2      	; 0x1682 <xTaskCreate+0x34>
    1680:	ea c0       	rjmp	.+468    	; 0x1856 <xTaskCreate+0x208>
    1682:	8c e2       	ldi	r24, 0x2C	; 44
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    168a:	ec 01       	movw	r28, r24
    168c:	89 2b       	or	r24, r25
    168e:	b1 f0       	breq	.+44     	; 0x16bc <xTaskCreate+0x6e>
    1690:	6b 8e       	std	Y+27, r6	; 0x1b
    1692:	7c 8e       	std	Y+28, r7	; 0x1c
    1694:	a5 01       	movw	r20, r10
    1696:	65 ea       	ldi	r22, 0xA5	; 165
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	c3 01       	movw	r24, r6
    169c:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <memset>
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	a2 1a       	sub	r10, r18
    16a4:	b1 08       	sbc	r11, r1
    16a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16aa:	a8 0e       	add	r10, r24
    16ac:	b9 1e       	adc	r11, r25
    16ae:	d6 01       	movw	r26, r12
    16b0:	8c 91       	ld	r24, X
    16b2:	8d 8f       	std	Y+29, r24	; 0x1d
    16b4:	8c 91       	ld	r24, X
    16b6:	81 11       	cpse	r24, r1
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <xTaskCreate+0x76>
    16ba:	18 c0       	rjmp	.+48     	; 0x16ec <xTaskCreate+0x9e>
    16bc:	c3 01       	movw	r24, r6
    16be:	0e 94 29 05 	call	0xa52	; 0xa52 <vPortFree>
    16c2:	c9 c0       	rjmp	.+402    	; 0x1856 <xTaskCreate+0x208>
    16c4:	ae 01       	movw	r20, r28
    16c6:	42 5e       	subi	r20, 0xE2	; 226
    16c8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ca:	f6 01       	movw	r30, r12
    16cc:	31 96       	adiw	r30, 0x01	; 1
    16ce:	b8 e0       	ldi	r27, 0x08	; 8
    16d0:	cb 0e       	add	r12, r27
    16d2:	d1 1c       	adc	r13, r1
    16d4:	cf 01       	movw	r24, r30
    16d6:	21 91       	ld	r18, Z+
    16d8:	da 01       	movw	r26, r20
    16da:	2d 93       	st	X+, r18
    16dc:	ad 01       	movw	r20, r26
    16de:	dc 01       	movw	r26, r24
    16e0:	8c 91       	ld	r24, X
    16e2:	88 23       	and	r24, r24
    16e4:	19 f0       	breq	.+6      	; 0x16ec <xTaskCreate+0x9e>
    16e6:	ec 15       	cp	r30, r12
    16e8:	fd 05       	cpc	r31, r13
    16ea:	a1 f7       	brne	.-24     	; 0x16d4 <xTaskCreate+0x86>
    16ec:	1c a2       	std	Y+36, r1	; 0x24
    16ee:	04 30       	cpi	r16, 0x04	; 4
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <xTaskCreate+0xa6>
    16f2:	03 e0       	ldi	r16, 0x03	; 3
    16f4:	0a 8f       	std	Y+26, r16	; 0x1a
    16f6:	6e 01       	movw	r12, r28
    16f8:	b2 e0       	ldi	r27, 0x02	; 2
    16fa:	cb 0e       	add	r12, r27
    16fc:	d1 1c       	adc	r13, r1
    16fe:	c6 01       	movw	r24, r12
    1700:	0e 94 3b 05 	call	0xa76	; 0xa76 <vListInitialiseItem>
    1704:	ce 01       	movw	r24, r28
    1706:	0e 96       	adiw	r24, 0x0e	; 14
    1708:	0e 94 3b 05 	call	0xa76	; 0xa76 <vListInitialiseItem>
    170c:	ca 87       	std	Y+10, r28	; 0x0a
    170e:	db 87       	std	Y+11, r29	; 0x0b
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a0 e0       	ldi	r26, 0x00	; 0
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	80 1b       	sub	r24, r16
    171a:	91 09       	sbc	r25, r1
    171c:	a1 09       	sbc	r26, r1
    171e:	b1 09       	sbc	r27, r1
    1720:	8e 87       	std	Y+14, r24	; 0x0e
    1722:	9f 87       	std	Y+15, r25	; 0x0f
    1724:	a8 8b       	std	Y+16, r26	; 0x10
    1726:	b9 8b       	std	Y+17, r27	; 0x11
    1728:	ce 8b       	std	Y+22, r28	; 0x16
    172a:	df 8b       	std	Y+23, r29	; 0x17
    172c:	1f a2       	std	Y+39, r1	; 0x27
    172e:	18 a6       	std	Y+40, r1	; 0x28
    1730:	19 a6       	std	Y+41, r1	; 0x29
    1732:	1a a6       	std	Y+42, r1	; 0x2a
    1734:	1b a6       	std	Y+43, r1	; 0x2b
    1736:	a2 01       	movw	r20, r4
    1738:	b4 01       	movw	r22, r8
    173a:	c5 01       	movw	r24, r10
    173c:	0e 94 cb 05 	call	0xb96	; 0xb96 <pxPortInitialiseStack>
    1740:	88 83       	st	Y, r24
    1742:	99 83       	std	Y+1, r25	; 0x01
    1744:	e1 14       	cp	r14, r1
    1746:	f1 04       	cpc	r15, r1
    1748:	19 f0       	breq	.+6      	; 0x1750 <xTaskCreate+0x102>
    174a:	f7 01       	movw	r30, r14
    174c:	c0 83       	st	Z, r28
    174e:	d1 83       	std	Z+1, r29	; 0x01
    1750:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1754:	ff 93       	push	r31
    1756:	f8 7f       	andi	r31, 0xF8	; 248
    1758:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    175c:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <uxCurrentNumberOfTasks>
    1760:	8f 5f       	subi	r24, 0xFF	; 255
    1762:	80 93 31 2c 	sts	0x2C31, r24	; 0x802c31 <uxCurrentNumberOfTasks>
    1766:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    176a:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    176e:	89 2b       	or	r24, r25
    1770:	a9 f5       	brne	.+106    	; 0x17dc <xTaskCreate+0x18e>
    1772:	c0 93 8e 2c 	sts	0x2C8E, r28	; 0x802c8e <pxCurrentTCB>
    1776:	d0 93 8f 2c 	sts	0x2C8F, r29	; 0x802c8f <pxCurrentTCB+0x1>
    177a:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <uxCurrentNumberOfTasks>
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	e9 f5       	brne	.+122    	; 0x17fc <xTaskCreate+0x1ae>
    1782:	82 e6       	ldi	r24, 0x62	; 98
    1784:	9c e2       	ldi	r25, 0x2C	; 44
    1786:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    178a:	8d e6       	ldi	r24, 0x6D	; 109
    178c:	9c e2       	ldi	r25, 0x2C	; 44
    178e:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    1792:	88 e7       	ldi	r24, 0x78	; 120
    1794:	9c e2       	ldi	r25, 0x2C	; 44
    1796:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    179a:	83 e8       	ldi	r24, 0x83	; 131
    179c:	9c e2       	ldi	r25, 0x2C	; 44
    179e:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17a2:	87 e5       	ldi	r24, 0x57	; 87
    17a4:	9c e2       	ldi	r25, 0x2C	; 44
    17a6:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17aa:	8c e4       	ldi	r24, 0x4C	; 76
    17ac:	9c e2       	ldi	r25, 0x2C	; 44
    17ae:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17b2:	8d e3       	ldi	r24, 0x3D	; 61
    17b4:	9c e2       	ldi	r25, 0x2C	; 44
    17b6:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17ba:	82 e3       	ldi	r24, 0x32	; 50
    17bc:	9c e2       	ldi	r25, 0x2C	; 44
    17be:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17c2:	87 e5       	ldi	r24, 0x57	; 87
    17c4:	9c e2       	ldi	r25, 0x2C	; 44
    17c6:	80 93 4a 2c 	sts	0x2C4A, r24	; 0x802c4a <pxDelayedTaskList>
    17ca:	90 93 4b 2c 	sts	0x2C4B, r25	; 0x802c4b <pxDelayedTaskList+0x1>
    17ce:	8c e4       	ldi	r24, 0x4C	; 76
    17d0:	9c e2       	ldi	r25, 0x2C	; 44
    17d2:	80 93 48 2c 	sts	0x2C48, r24	; 0x802c48 <pxOverflowDelayedTaskList>
    17d6:	90 93 49 2c 	sts	0x2C49, r25	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    17da:	10 c0       	rjmp	.+32     	; 0x17fc <xTaskCreate+0x1ae>
    17dc:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xSchedulerRunning>
    17e0:	81 11       	cpse	r24, r1
    17e2:	0c c0       	rjmp	.+24     	; 0x17fc <xTaskCreate+0x1ae>
    17e4:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    17e8:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    17ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    17ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17f0:	89 17       	cp	r24, r25
    17f2:	20 f0       	brcs	.+8      	; 0x17fc <xTaskCreate+0x1ae>
    17f4:	c0 93 8e 2c 	sts	0x2C8E, r28	; 0x802c8e <pxCurrentTCB>
    17f8:	d0 93 8f 2c 	sts	0x2C8F, r29	; 0x802c8f <pxCurrentTCB+0x1>
    17fc:	80 91 27 2c 	lds	r24, 0x2C27	; 0x802c27 <uxTaskNumber>
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	80 93 27 2c 	sts	0x2C27, r24	; 0x802c27 <uxTaskNumber>
    1806:	8d a3       	std	Y+37, r24	; 0x25
    1808:	8a 8d       	ldd	r24, Y+26	; 0x1a
    180a:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    180e:	98 17       	cp	r25, r24
    1810:	10 f4       	brcc	.+4      	; 0x1816 <xTaskCreate+0x1c8>
    1812:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1816:	fb e0       	ldi	r31, 0x0B	; 11
    1818:	8f 9f       	mul	r24, r31
    181a:	c0 01       	movw	r24, r0
    181c:	11 24       	eor	r1, r1
    181e:	b6 01       	movw	r22, r12
    1820:	8e 59       	subi	r24, 0x9E	; 158
    1822:	93 4d       	sbci	r25, 0xD3	; 211
    1824:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1828:	ff 91       	pop	r31
    182a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    182e:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xSchedulerRunning>
    1832:	88 23       	and	r24, r24
    1834:	61 f0       	breq	.+24     	; 0x184e <xTaskCreate+0x200>
    1836:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    183a:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    183e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1840:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1842:	98 17       	cp	r25, r24
    1844:	30 f4       	brcc	.+12     	; 0x1852 <xTaskCreate+0x204>
    1846:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <xTaskCreate+0x20a>
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <xTaskCreate+0x20a>
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <xTaskCreate+0x20a>
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	df 90       	pop	r13
    1864:	cf 90       	pop	r12
    1866:	bf 90       	pop	r11
    1868:	af 90       	pop	r10
    186a:	9f 90       	pop	r9
    186c:	8f 90       	pop	r8
    186e:	7f 90       	pop	r7
    1870:	6f 90       	pop	r6
    1872:	5f 90       	pop	r5
    1874:	4f 90       	pop	r4
    1876:	08 95       	ret

00001878 <vTaskStartScheduler>:
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	0f 2e       	mov	r0, r31
    1880:	f1 e2       	ldi	r31, 0x21	; 33
    1882:	ef 2e       	mov	r14, r31
    1884:	fc e2       	ldi	r31, 0x2C	; 44
    1886:	ff 2e       	mov	r15, r31
    1888:	f0 2d       	mov	r31, r0
    188a:	00 e0       	ldi	r16, 0x00	; 0
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	48 ec       	ldi	r20, 0xC8	; 200
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	6d e4       	ldi	r22, 0x4D	; 77
    1896:	70 e2       	ldi	r23, 0x20	; 32
    1898:	8d e1       	ldi	r24, 0x1D	; 29
    189a:	9b e0       	ldi	r25, 0x0B	; 11
    189c:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	09 f5       	brne	.+66     	; 0x18e6 <vTaskStartScheduler+0x6e>
    18a4:	0e 94 81 10 	call	0x2102	; 0x2102 <xTimerCreateTimerTask>
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	e9 f4       	brne	.+58     	; 0x18e6 <vTaskStartScheduler+0x6e>
    18ac:	e0 ea       	ldi	r30, 0xA0	; 160
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	88 7f       	andi	r24, 0xF8	; 248
    18b4:	82 83       	std	Z+2, r24	; 0x02
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	9f ef       	ldi	r25, 0xFF	; 255
    18ba:	dc 01       	movw	r26, r24
    18bc:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    18c0:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    18c4:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    18c8:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xSchedulerRunning>
    18d2:	10 92 2d 2c 	sts	0x2C2D, r1	; 0x802c2d <xTickCount>
    18d6:	10 92 2e 2c 	sts	0x2C2E, r1	; 0x802c2e <xTickCount+0x1>
    18da:	10 92 2f 2c 	sts	0x2C2F, r1	; 0x802c2f <xTickCount+0x2>
    18de:	10 92 30 2c 	sts	0x2C30, r1	; 0x802c30 <xTickCount+0x3>
    18e2:	0e 94 48 06 	call	0xc90	; 0xc90 <xPortStartScheduler>
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	08 95       	ret

000018ee <vTaskSuspendAll>:
    18ee:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxSchedulerSuspended>
    18f8:	08 95       	ret

000018fa <xTaskGetTickCount>:
    18fa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18fe:	ff 93       	push	r31
    1900:	f8 7f       	andi	r31, 0xF8	; 248
    1902:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1906:	60 91 2d 2c 	lds	r22, 0x2C2D	; 0x802c2d <xTickCount>
    190a:	70 91 2e 2c 	lds	r23, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    190e:	80 91 2f 2c 	lds	r24, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1912:	90 91 30 2c 	lds	r25, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1916:	ff 91       	pop	r31
    1918:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    191c:	08 95       	ret

0000191e <xTaskIncrementTick>:
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1936:	81 11       	cpse	r24, r1
    1938:	ad c0       	rjmp	.+346    	; 0x1a94 <xTaskIncrementTick+0x176>
    193a:	c0 90 2d 2c 	lds	r12, 0x2C2D	; 0x802c2d <xTickCount>
    193e:	d0 90 2e 2c 	lds	r13, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    1942:	e0 90 2f 2c 	lds	r14, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1946:	f0 90 30 2c 	lds	r15, 0x2C30	; 0x802c30 <xTickCount+0x3>
    194a:	8f ef       	ldi	r24, 0xFF	; 255
    194c:	c8 1a       	sub	r12, r24
    194e:	d8 0a       	sbc	r13, r24
    1950:	e8 0a       	sbc	r14, r24
    1952:	f8 0a       	sbc	r15, r24
    1954:	c0 92 2d 2c 	sts	0x2C2D, r12	; 0x802c2d <xTickCount>
    1958:	d0 92 2e 2c 	sts	0x2C2E, r13	; 0x802c2e <xTickCount+0x1>
    195c:	e0 92 2f 2c 	sts	0x2C2F, r14	; 0x802c2f <xTickCount+0x2>
    1960:	f0 92 30 2c 	sts	0x2C30, r15	; 0x802c30 <xTickCount+0x3>
    1964:	c1 14       	cp	r12, r1
    1966:	d1 04       	cpc	r13, r1
    1968:	e1 04       	cpc	r14, r1
    196a:	f1 04       	cpc	r15, r1
    196c:	b9 f4       	brne	.+46     	; 0x199c <xTaskIncrementTick+0x7e>
    196e:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    1972:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    1976:	20 91 48 2c 	lds	r18, 0x2C48	; 0x802c48 <pxOverflowDelayedTaskList>
    197a:	30 91 49 2c 	lds	r19, 0x2C49	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    197e:	20 93 4a 2c 	sts	0x2C4A, r18	; 0x802c4a <pxDelayedTaskList>
    1982:	30 93 4b 2c 	sts	0x2C4B, r19	; 0x802c4b <pxDelayedTaskList+0x1>
    1986:	80 93 48 2c 	sts	0x2C48, r24	; 0x802c48 <pxOverflowDelayedTaskList>
    198a:	90 93 49 2c 	sts	0x2C49, r25	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    198e:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <xNumOfOverflows>
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	80 93 28 2c 	sts	0x2C28, r24	; 0x802c28 <xNumOfOverflows>
    1998:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <prvResetNextTaskUnblockTime>
    199c:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <xNextTaskUnblockTime>
    19a0:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <xNextTaskUnblockTime+0x1>
    19a4:	a0 91 25 2c 	lds	r26, 0x2C25	; 0x802c25 <xNextTaskUnblockTime+0x2>
    19a8:	b0 91 26 2c 	lds	r27, 0x2C26	; 0x802c26 <xNextTaskUnblockTime+0x3>
    19ac:	c8 16       	cp	r12, r24
    19ae:	d9 06       	cpc	r13, r25
    19b0:	ea 06       	cpc	r14, r26
    19b2:	fb 06       	cpc	r15, r27
    19b4:	10 f4       	brcc	.+4      	; 0x19ba <xTaskIncrementTick+0x9c>
    19b6:	b1 2c       	mov	r11, r1
    19b8:	5c c0       	rjmp	.+184    	; 0x1a72 <xTaskIncrementTick+0x154>
    19ba:	b1 2c       	mov	r11, r1
    19bc:	0f 2e       	mov	r0, r31
    19be:	fb e0       	ldi	r31, 0x0B	; 11
    19c0:	af 2e       	mov	r10, r31
    19c2:	f0 2d       	mov	r31, r0
    19c4:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    19c8:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    19cc:	80 81       	ld	r24, Z
    19ce:	81 11       	cpse	r24, r1
    19d0:	0c c0       	rjmp	.+24     	; 0x19ea <xTaskIncrementTick+0xcc>
    19d2:	8f ef       	ldi	r24, 0xFF	; 255
    19d4:	9f ef       	ldi	r25, 0xFF	; 255
    19d6:	dc 01       	movw	r26, r24
    19d8:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    19dc:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    19e0:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    19e4:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    19e8:	44 c0       	rjmp	.+136    	; 0x1a72 <xTaskIncrementTick+0x154>
    19ea:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    19ee:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    19f2:	07 80       	ldd	r0, Z+7	; 0x07
    19f4:	f0 85       	ldd	r31, Z+8	; 0x08
    19f6:	e0 2d       	mov	r30, r0
    19f8:	c0 85       	ldd	r28, Z+8	; 0x08
    19fa:	d1 85       	ldd	r29, Z+9	; 0x09
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	ac 81       	ldd	r26, Y+4	; 0x04
    1a02:	bd 81       	ldd	r27, Y+5	; 0x05
    1a04:	c8 16       	cp	r12, r24
    1a06:	d9 06       	cpc	r13, r25
    1a08:	ea 06       	cpc	r14, r26
    1a0a:	fb 06       	cpc	r15, r27
    1a0c:	48 f4       	brcc	.+18     	; 0x1a20 <xTaskIncrementTick+0x102>
    1a0e:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    1a12:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1a16:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1a1a:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    1a1e:	29 c0       	rjmp	.+82     	; 0x1a72 <xTaskIncrementTick+0x154>
    1a20:	8e 01       	movw	r16, r28
    1a22:	0e 5f       	subi	r16, 0xFE	; 254
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	c8 01       	movw	r24, r16
    1a28:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1a2c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a2e:	99 8d       	ldd	r25, Y+25	; 0x19
    1a30:	89 2b       	or	r24, r25
    1a32:	21 f0       	breq	.+8      	; 0x1a3c <xTaskIncrementTick+0x11e>
    1a34:	ce 01       	movw	r24, r28
    1a36:	0e 96       	adiw	r24, 0x0e	; 14
    1a38:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1a3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a3e:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1a42:	98 17       	cp	r25, r24
    1a44:	10 f4       	brcc	.+4      	; 0x1a4a <xTaskIncrementTick+0x12c>
    1a46:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1a4a:	a8 9e       	mul	r10, r24
    1a4c:	c0 01       	movw	r24, r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	b8 01       	movw	r22, r16
    1a52:	8e 59       	subi	r24, 0x9E	; 158
    1a54:	93 4d       	sbci	r25, 0xD3	; 211
    1a56:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1a5a:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1a5e:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1a62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a64:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a66:	98 17       	cp	r25, r24
    1a68:	08 f4       	brcc	.+2      	; 0x1a6c <xTaskIncrementTick+0x14e>
    1a6a:	ac cf       	rjmp	.-168    	; 0x19c4 <xTaskIncrementTick+0xa6>
    1a6c:	bb 24       	eor	r11, r11
    1a6e:	b3 94       	inc	r11
    1a70:	a9 cf       	rjmp	.-174    	; 0x19c4 <xTaskIncrementTick+0xa6>
    1a72:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1a76:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1a7a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1a7c:	8b e0       	ldi	r24, 0x0B	; 11
    1a7e:	e8 9f       	mul	r30, r24
    1a80:	f0 01       	movw	r30, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	ee 59       	subi	r30, 0x9E	; 158
    1a86:	f3 4d       	sbci	r31, 0xD3	; 211
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	48 f0       	brcs	.+18     	; 0x1aa0 <xTaskIncrementTick+0x182>
    1a8e:	bb 24       	eor	r11, r11
    1a90:	b3 94       	inc	r11
    1a92:	06 c0       	rjmp	.+12     	; 0x1aa0 <xTaskIncrementTick+0x182>
    1a94:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <uxPendedTicks>
    1a98:	8f 5f       	subi	r24, 0xFF	; 255
    1a9a:	80 93 2a 2c 	sts	0x2C2A, r24	; 0x802c2a <uxPendedTicks>
    1a9e:	b1 2c       	mov	r11, r1
    1aa0:	80 91 29 2c 	lds	r24, 0x2C29	; 0x802c29 <xYieldPending>
    1aa4:	88 23       	and	r24, r24
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <xTaskIncrementTick+0x18e>
    1aa8:	bb 24       	eor	r11, r11
    1aaa:	b3 94       	inc	r11
    1aac:	8b 2d       	mov	r24, r11
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	af 90       	pop	r10
    1ac2:	08 95       	ret

00001ac4 <xTaskResumeAll>:
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ad8:	ff 93       	push	r31
    1ada:	f8 7f       	andi	r31, 0xF8	; 248
    1adc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ae0:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1ae4:	81 50       	subi	r24, 0x01	; 1
    1ae6:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxSchedulerSuspended>
    1aea:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1aee:	81 11       	cpse	r24, r1
    1af0:	5c c0       	rjmp	.+184    	; 0x1baa <xTaskResumeAll+0xe6>
    1af2:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <uxCurrentNumberOfTasks>
    1af6:	81 11       	cpse	r24, r1
    1af8:	2c c0       	rjmp	.+88     	; 0x1b52 <xTaskResumeAll+0x8e>
    1afa:	5a c0       	rjmp	.+180    	; 0x1bb0 <xTaskResumeAll+0xec>
    1afc:	d7 01       	movw	r26, r14
    1afe:	17 96       	adiw	r26, 0x07	; 7
    1b00:	ed 91       	ld	r30, X+
    1b02:	fc 91       	ld	r31, X
    1b04:	18 97       	sbiw	r26, 0x08	; 8
    1b06:	c0 85       	ldd	r28, Z+8	; 0x08
    1b08:	d1 85       	ldd	r29, Z+9	; 0x09
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	0e 96       	adiw	r24, 0x0e	; 14
    1b0e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1b12:	8e 01       	movw	r16, r28
    1b14:	0e 5f       	subi	r16, 0xFE	; 254
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	c8 01       	movw	r24, r16
    1b1a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1b1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b20:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1b24:	98 17       	cp	r25, r24
    1b26:	10 f4       	brcc	.+4      	; 0x1b2c <xTaskResumeAll+0x68>
    1b28:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1b2c:	d8 9e       	mul	r13, r24
    1b2e:	c0 01       	movw	r24, r0
    1b30:	11 24       	eor	r1, r1
    1b32:	b8 01       	movw	r22, r16
    1b34:	8e 59       	subi	r24, 0x9E	; 158
    1b36:	93 4d       	sbci	r25, 0xD3	; 211
    1b38:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1b3c:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1b40:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1b44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b46:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b48:	98 17       	cp	r25, r24
    1b4a:	88 f0       	brcs	.+34     	; 0x1b6e <xTaskResumeAll+0xaa>
    1b4c:	c0 92 29 2c 	sts	0x2C29, r12	; 0x802c29 <xYieldPending>
    1b50:	0e c0       	rjmp	.+28     	; 0x1b6e <xTaskResumeAll+0xaa>
    1b52:	c0 e0       	ldi	r28, 0x00	; 0
    1b54:	d0 e0       	ldi	r29, 0x00	; 0
    1b56:	0f 2e       	mov	r0, r31
    1b58:	fd e3       	ldi	r31, 0x3D	; 61
    1b5a:	ef 2e       	mov	r14, r31
    1b5c:	fc e2       	ldi	r31, 0x2C	; 44
    1b5e:	ff 2e       	mov	r15, r31
    1b60:	f0 2d       	mov	r31, r0
    1b62:	0f 2e       	mov	r0, r31
    1b64:	fb e0       	ldi	r31, 0x0B	; 11
    1b66:	df 2e       	mov	r13, r31
    1b68:	f0 2d       	mov	r31, r0
    1b6a:	cc 24       	eor	r12, r12
    1b6c:	c3 94       	inc	r12
    1b6e:	f7 01       	movw	r30, r14
    1b70:	80 81       	ld	r24, Z
    1b72:	81 11       	cpse	r24, r1
    1b74:	c3 cf       	rjmp	.-122    	; 0x1afc <xTaskResumeAll+0x38>
    1b76:	cd 2b       	or	r28, r29
    1b78:	11 f0       	breq	.+4      	; 0x1b7e <xTaskResumeAll+0xba>
    1b7a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <prvResetNextTaskUnblockTime>
    1b7e:	c0 91 2a 2c 	lds	r28, 0x2C2A	; 0x802c2a <uxPendedTicks>
    1b82:	cc 23       	and	r28, r28
    1b84:	51 f0       	breq	.+20     	; 0x1b9a <xTaskResumeAll+0xd6>
    1b86:	d1 e0       	ldi	r29, 0x01	; 1
    1b88:	0e 94 8f 0c 	call	0x191e	; 0x191e <xTaskIncrementTick>
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	d0 93 29 2c 	sts	0x2C29, r29	; 0x802c29 <xYieldPending>
    1b92:	c1 50       	subi	r28, 0x01	; 1
    1b94:	c9 f7       	brne	.-14     	; 0x1b88 <xTaskResumeAll+0xc4>
    1b96:	10 92 2a 2c 	sts	0x2C2A, r1	; 0x802c2a <uxPendedTicks>
    1b9a:	80 91 29 2c 	lds	r24, 0x2C29	; 0x802c29 <xYieldPending>
    1b9e:	88 23       	and	r24, r24
    1ba0:	31 f0       	breq	.+12     	; 0x1bae <xTaskResumeAll+0xea>
    1ba2:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <xTaskResumeAll+0xec>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <xTaskResumeAll+0xec>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	ff 91       	pop	r31
    1bb2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	08 95       	ret

00001bc8 <vTaskDelay>:
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	6b 01       	movw	r12, r22
    1bd2:	7c 01       	movw	r14, r24
    1bd4:	67 2b       	or	r22, r23
    1bd6:	68 2b       	or	r22, r24
    1bd8:	69 2b       	or	r22, r25
    1bda:	59 f0       	breq	.+22     	; 0x1bf2 <vTaskDelay+0x2a>
    1bdc:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	c7 01       	movw	r24, r14
    1be4:	b6 01       	movw	r22, r12
    1be6:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1bea:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1bee:	81 11       	cpse	r24, r1
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <vTaskDelay+0x2e>
    1bf2:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	08 95       	ret

00001c00 <vTaskSwitchContext>:
    1c00:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1c04:	88 23       	and	r24, r24
    1c06:	21 f0       	breq	.+8      	; 0x1c10 <vTaskSwitchContext+0x10>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1c0e:	08 95       	ret
    1c10:	10 92 29 2c 	sts	0x2C29, r1	; 0x802c29 <xYieldPending>
    1c14:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1c18:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1c1c:	03 8c       	ldd	r0, Z+27	; 0x1b
    1c1e:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1c20:	e0 2d       	mov	r30, r0
    1c22:	80 81       	ld	r24, Z
    1c24:	91 81       	ldd	r25, Z+1	; 0x01
    1c26:	a2 81       	ldd	r26, Z+2	; 0x02
    1c28:	b3 81       	ldd	r27, Z+3	; 0x03
    1c2a:	85 3a       	cpi	r24, 0xA5	; 165
    1c2c:	95 4a       	sbci	r25, 0xA5	; 165
    1c2e:	a5 4a       	sbci	r26, 0xA5	; 165
    1c30:	b5 4a       	sbci	r27, 0xA5	; 165
    1c32:	d9 f4       	brne	.+54     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c34:	84 81       	ldd	r24, Z+4	; 0x04
    1c36:	95 81       	ldd	r25, Z+5	; 0x05
    1c38:	a6 81       	ldd	r26, Z+6	; 0x06
    1c3a:	b7 81       	ldd	r27, Z+7	; 0x07
    1c3c:	85 3a       	cpi	r24, 0xA5	; 165
    1c3e:	95 4a       	sbci	r25, 0xA5	; 165
    1c40:	a5 4a       	sbci	r26, 0xA5	; 165
    1c42:	b5 4a       	sbci	r27, 0xA5	; 165
    1c44:	91 f4       	brne	.+36     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c46:	80 85       	ldd	r24, Z+8	; 0x08
    1c48:	91 85       	ldd	r25, Z+9	; 0x09
    1c4a:	a2 85       	ldd	r26, Z+10	; 0x0a
    1c4c:	b3 85       	ldd	r27, Z+11	; 0x0b
    1c4e:	85 3a       	cpi	r24, 0xA5	; 165
    1c50:	95 4a       	sbci	r25, 0xA5	; 165
    1c52:	a5 4a       	sbci	r26, 0xA5	; 165
    1c54:	b5 4a       	sbci	r27, 0xA5	; 165
    1c56:	49 f4       	brne	.+18     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c58:	84 85       	ldd	r24, Z+12	; 0x0c
    1c5a:	95 85       	ldd	r25, Z+13	; 0x0d
    1c5c:	a6 85       	ldd	r26, Z+14	; 0x0e
    1c5e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1c60:	85 3a       	cpi	r24, 0xA5	; 165
    1c62:	95 4a       	sbci	r25, 0xA5	; 165
    1c64:	a5 4a       	sbci	r26, 0xA5	; 165
    1c66:	b5 4a       	sbci	r27, 0xA5	; 165
    1c68:	61 f0       	breq	.+24     	; 0x1c82 <vTaskSwitchContext+0x82>
    1c6a:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1c6e:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1c72:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1c76:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1c7a:	63 5e       	subi	r22, 0xE3	; 227
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <vApplicationStackOverflowHook>
    1c82:	80 91 2c 2c 	lds	r24, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	9b e0       	ldi	r25, 0x0B	; 11
    1c8c:	89 9f       	mul	r24, r25
    1c8e:	f0 01       	movw	r30, r0
    1c90:	11 24       	eor	r1, r1
    1c92:	ee 59       	subi	r30, 0x9E	; 158
    1c94:	f3 4d       	sbci	r31, 0xD3	; 211
    1c96:	90 81       	ld	r25, Z
    1c98:	91 11       	cpse	r25, r1
    1c9a:	0e c0       	rjmp	.+28     	; 0x1cb8 <vTaskSwitchContext+0xb8>
    1c9c:	4b e0       	ldi	r20, 0x0B	; 11
    1c9e:	81 50       	subi	r24, 0x01	; 1
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	42 9f       	mul	r20, r18
    1ca6:	f0 01       	movw	r30, r0
    1ca8:	43 9f       	mul	r20, r19
    1caa:	f0 0d       	add	r31, r0
    1cac:	11 24       	eor	r1, r1
    1cae:	ee 59       	subi	r30, 0x9E	; 158
    1cb0:	f3 4d       	sbci	r31, 0xD3	; 211
    1cb2:	90 81       	ld	r25, Z
    1cb4:	99 23       	and	r25, r25
    1cb6:	99 f3       	breq	.-26     	; 0x1c9e <vTaskSwitchContext+0x9e>
    1cb8:	9b e0       	ldi	r25, 0x0B	; 11
    1cba:	92 9f       	mul	r25, r18
    1cbc:	a0 01       	movw	r20, r0
    1cbe:	93 9f       	mul	r25, r19
    1cc0:	50 0d       	add	r21, r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	da 01       	movw	r26, r20
    1cc6:	ae 59       	subi	r26, 0x9E	; 158
    1cc8:	b3 4d       	sbci	r27, 0xD3	; 211
    1cca:	11 96       	adiw	r26, 0x01	; 1
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	12 97       	sbiw	r26, 0x02	; 2
    1cd2:	04 80       	ldd	r0, Z+4	; 0x04
    1cd4:	f5 81       	ldd	r31, Z+5	; 0x05
    1cd6:	e0 2d       	mov	r30, r0
    1cd8:	11 96       	adiw	r26, 0x01	; 1
    1cda:	ed 93       	st	X+, r30
    1cdc:	fc 93       	st	X, r31
    1cde:	12 97       	sbiw	r26, 0x02	; 2
    1ce0:	4b 59       	subi	r20, 0x9B	; 155
    1ce2:	53 4d       	sbci	r21, 0xD3	; 211
    1ce4:	e4 17       	cp	r30, r20
    1ce6:	f5 07       	cpc	r31, r21
    1ce8:	29 f4       	brne	.+10     	; 0x1cf4 <vTaskSwitchContext+0xf4>
    1cea:	44 81       	ldd	r20, Z+4	; 0x04
    1cec:	55 81       	ldd	r21, Z+5	; 0x05
    1cee:	fd 01       	movw	r30, r26
    1cf0:	41 83       	std	Z+1, r20	; 0x01
    1cf2:	52 83       	std	Z+2, r21	; 0x02
    1cf4:	9b e0       	ldi	r25, 0x0B	; 11
    1cf6:	92 9f       	mul	r25, r18
    1cf8:	f0 01       	movw	r30, r0
    1cfa:	93 9f       	mul	r25, r19
    1cfc:	f0 0d       	add	r31, r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	ee 59       	subi	r30, 0x9E	; 158
    1d02:	f3 4d       	sbci	r31, 0xD3	; 211
    1d04:	01 80       	ldd	r0, Z+1	; 0x01
    1d06:	f2 81       	ldd	r31, Z+2	; 0x02
    1d08:	e0 2d       	mov	r30, r0
    1d0a:	20 85       	ldd	r18, Z+8	; 0x08
    1d0c:	31 85       	ldd	r19, Z+9	; 0x09
    1d0e:	20 93 8e 2c 	sts	0x2C8E, r18	; 0x802c8e <pxCurrentTCB>
    1d12:	30 93 8f 2c 	sts	0x2C8F, r19	; 0x802c8f <pxCurrentTCB+0x1>
    1d16:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1d1a:	08 95       	ret

00001d1c <vTaskPlaceOnEventList>:
    1d1c:	cf 92       	push	r12
    1d1e:	df 92       	push	r13
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	6a 01       	movw	r12, r20
    1d26:	7b 01       	movw	r14, r22
    1d28:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1d2c:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1d30:	62 5f       	subi	r22, 0xF2	; 242
    1d32:	7f 4f       	sbci	r23, 0xFF	; 255
    1d34:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	08 95       	ret

00001d4c <vTaskPlaceOnUnorderedEventList>:
    1d4c:	cf 92       	push	r12
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	68 01       	movw	r12, r16
    1d5a:	79 01       	movw	r14, r18
    1d5c:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1d60:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1d64:	70 68       	ori	r23, 0x80	; 128
    1d66:	46 87       	std	Z+14, r20	; 0x0e
    1d68:	57 87       	std	Z+15, r21	; 0x0f
    1d6a:	60 8b       	std	Z+16, r22	; 0x10
    1d6c:	71 8b       	std	Z+17, r23	; 0x11
    1d6e:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1d72:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1d76:	62 5f       	subi	r22, 0xF2	; 242
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	c7 01       	movw	r24, r14
    1d82:	b6 01       	movw	r22, r12
    1d84:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	08 95       	ret

00001d96 <vTaskPlaceOnEventListRestricted>:
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	cf 93       	push	r28
    1da0:	6a 01       	movw	r12, r20
    1da2:	7b 01       	movw	r14, r22
    1da4:	c2 2f       	mov	r28, r18
    1da6:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1daa:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1dae:	62 5f       	subi	r22, 0xF2	; 242
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1db6:	cc 23       	and	r28, r28
    1db8:	21 f0       	breq	.+8      	; 0x1dc2 <vTaskPlaceOnEventListRestricted+0x2c>
    1dba:	cc 24       	eor	r12, r12
    1dbc:	ca 94       	dec	r12
    1dbe:	dc 2c       	mov	r13, r12
    1dc0:	76 01       	movw	r14, r12
    1dc2:	4c 2f       	mov	r20, r28
    1dc4:	c7 01       	movw	r24, r14
    1dc6:	b6 01       	movw	r22, r12
    1dc8:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1dcc:	cf 91       	pop	r28
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	08 95       	ret

00001dd8 <xTaskRemoveFromEventList>:
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	dc 01       	movw	r26, r24
    1de2:	17 96       	adiw	r26, 0x07	; 7
    1de4:	ed 91       	ld	r30, X+
    1de6:	fc 91       	ld	r31, X
    1de8:	18 97       	sbiw	r26, 0x08	; 8
    1dea:	c0 85       	ldd	r28, Z+8	; 0x08
    1dec:	d1 85       	ldd	r29, Z+9	; 0x09
    1dee:	8e 01       	movw	r16, r28
    1df0:	02 5f       	subi	r16, 0xF2	; 242
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	c8 01       	movw	r24, r16
    1df6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1dfa:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1dfe:	81 11       	cpse	r24, r1
    1e00:	16 c0       	rjmp	.+44     	; 0x1e2e <xTaskRemoveFromEventList+0x56>
    1e02:	0c 50       	subi	r16, 0x0C	; 12
    1e04:	11 09       	sbc	r17, r1
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e0e:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1e12:	98 17       	cp	r25, r24
    1e14:	10 f4       	brcc	.+4      	; 0x1e1a <xTaskRemoveFromEventList+0x42>
    1e16:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1e1a:	bb e0       	ldi	r27, 0x0B	; 11
    1e1c:	8b 9f       	mul	r24, r27
    1e1e:	c0 01       	movw	r24, r0
    1e20:	11 24       	eor	r1, r1
    1e22:	b8 01       	movw	r22, r16
    1e24:	8e 59       	subi	r24, 0x9E	; 158
    1e26:	93 4d       	sbci	r25, 0xD3	; 211
    1e28:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1e2c:	05 c0       	rjmp	.+10     	; 0x1e38 <xTaskRemoveFromEventList+0x60>
    1e2e:	b8 01       	movw	r22, r16
    1e30:	8d e3       	ldi	r24, 0x3D	; 61
    1e32:	9c e2       	ldi	r25, 0x2C	; 44
    1e34:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1e38:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1e3c:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1e40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e42:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e44:	89 17       	cp	r24, r25
    1e46:	20 f4       	brcc	.+8      	; 0x1e50 <xTaskRemoveFromEventList+0x78>
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <xTaskRemoveFromEventList+0x7a>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	08 95       	ret

00001e5c <vTaskRemoveFromUnorderedEventList>:
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	70 68       	ori	r23, 0x80	; 128
    1e66:	fc 01       	movw	r30, r24
    1e68:	40 83       	st	Z, r20
    1e6a:	51 83       	std	Z+1, r21	; 0x01
    1e6c:	62 83       	std	Z+2, r22	; 0x02
    1e6e:	73 83       	std	Z+3, r23	; 0x03
    1e70:	c0 85       	ldd	r28, Z+8	; 0x08
    1e72:	d1 85       	ldd	r29, Z+9	; 0x09
    1e74:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e78:	8e 01       	movw	r16, r28
    1e7a:	0e 5f       	subi	r16, 0xFE	; 254
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7e:	c8 01       	movw	r24, r16
    1e80:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e86:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1e8a:	98 17       	cp	r25, r24
    1e8c:	10 f4       	brcc	.+4      	; 0x1e92 <vTaskRemoveFromUnorderedEventList+0x36>
    1e8e:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1e92:	fb e0       	ldi	r31, 0x0B	; 11
    1e94:	8f 9f       	mul	r24, r31
    1e96:	c0 01       	movw	r24, r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	b8 01       	movw	r22, r16
    1e9c:	8e 59       	subi	r24, 0x9E	; 158
    1e9e:	93 4d       	sbci	r25, 0xD3	; 211
    1ea0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1ea4:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1ea8:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1eac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1eae:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eb0:	89 17       	cp	r24, r25
    1eb2:	18 f4       	brcc	.+6      	; 0x1eba <vTaskRemoveFromUnorderedEventList+0x5e>
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <vTaskInternalSetTimeOutState>:
    1ec4:	20 91 28 2c 	lds	r18, 0x2C28	; 0x802c28 <xNumOfOverflows>
    1ec8:	fc 01       	movw	r30, r24
    1eca:	20 83       	st	Z, r18
    1ecc:	40 91 2d 2c 	lds	r20, 0x2C2D	; 0x802c2d <xTickCount>
    1ed0:	50 91 2e 2c 	lds	r21, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    1ed4:	60 91 2f 2c 	lds	r22, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1ed8:	70 91 30 2c 	lds	r23, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1edc:	41 83       	std	Z+1, r20	; 0x01
    1ede:	52 83       	std	Z+2, r21	; 0x02
    1ee0:	63 83       	std	Z+3, r22	; 0x03
    1ee2:	74 83       	std	Z+4, r23	; 0x04
    1ee4:	08 95       	ret

00001ee6 <xTaskCheckForTimeOut>:
    1ee6:	cf 92       	push	r12
    1ee8:	df 92       	push	r13
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	db 01       	movw	r26, r22
    1ef8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1efc:	ff 93       	push	r31
    1efe:	f8 7f       	andi	r31, 0xF8	; 248
    1f00:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f04:	40 91 2d 2c 	lds	r20, 0x2C2D	; 0x802c2d <xTickCount>
    1f08:	50 91 2e 2c 	lds	r21, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    1f0c:	60 91 2f 2c 	lds	r22, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1f10:	70 91 30 2c 	lds	r23, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1f14:	0d 91       	ld	r16, X+
    1f16:	1d 91       	ld	r17, X+
    1f18:	2d 91       	ld	r18, X+
    1f1a:	3c 91       	ld	r19, X
    1f1c:	13 97       	sbiw	r26, 0x03	; 3
    1f1e:	0f 3f       	cpi	r16, 0xFF	; 255
    1f20:	cf ef       	ldi	r28, 0xFF	; 255
    1f22:	1c 07       	cpc	r17, r28
    1f24:	2c 07       	cpc	r18, r28
    1f26:	3c 07       	cpc	r19, r28
    1f28:	69 f1       	breq	.+90     	; 0x1f84 <xTaskCheckForTimeOut+0x9e>
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	c1 80       	ldd	r12, Z+1	; 0x01
    1f2e:	d2 80       	ldd	r13, Z+2	; 0x02
    1f30:	e3 80       	ldd	r14, Z+3	; 0x03
    1f32:	f4 80       	ldd	r15, Z+4	; 0x04
    1f34:	e0 91 28 2c 	lds	r30, 0x2C28	; 0x802c28 <xNumOfOverflows>
    1f38:	ec 01       	movw	r28, r24
    1f3a:	f8 81       	ld	r31, Y
    1f3c:	fe 17       	cp	r31, r30
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <xTaskCheckForTimeOut+0x64>
    1f40:	4c 15       	cp	r20, r12
    1f42:	5d 05       	cpc	r21, r13
    1f44:	6e 05       	cpc	r22, r14
    1f46:	7f 05       	cpc	r23, r15
    1f48:	f8 f4       	brcc	.+62     	; 0x1f88 <xTaskCheckForTimeOut+0xa2>
    1f4a:	4c 19       	sub	r20, r12
    1f4c:	5d 09       	sbc	r21, r13
    1f4e:	6e 09       	sbc	r22, r14
    1f50:	7f 09       	sbc	r23, r15
    1f52:	40 17       	cp	r20, r16
    1f54:	51 07       	cpc	r21, r17
    1f56:	62 07       	cpc	r22, r18
    1f58:	73 07       	cpc	r23, r19
    1f5a:	68 f4       	brcc	.+26     	; 0x1f76 <xTaskCheckForTimeOut+0x90>
    1f5c:	fd 01       	movw	r30, r26
    1f5e:	04 1b       	sub	r16, r20
    1f60:	15 0b       	sbc	r17, r21
    1f62:	26 0b       	sbc	r18, r22
    1f64:	37 0b       	sbc	r19, r23
    1f66:	00 83       	st	Z, r16
    1f68:	11 83       	std	Z+1, r17	; 0x01
    1f6a:	22 83       	std	Z+2, r18	; 0x02
    1f6c:	33 83       	std	Z+3, r19	; 0x03
    1f6e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	0a c0       	rjmp	.+20     	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f76:	1d 92       	st	X+, r1
    1f78:	1d 92       	st	X+, r1
    1f7a:	1d 92       	st	X+, r1
    1f7c:	1c 92       	st	X, r1
    1f7e:	13 97       	sbiw	r26, 0x03	; 3
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	ff 91       	pop	r31
    1f8c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	ff 90       	pop	r15
    1f9a:	ef 90       	pop	r14
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	08 95       	ret

00001fa2 <vTaskMissedYield>:
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1fa8:	08 95       	ret

00001faa <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1faa:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xSchedulerRunning>
    1fae:	88 23       	and	r24, r24
    1fb0:	31 f0       	breq	.+12     	; 0x1fbe <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1fb2:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1fb6:	88 23       	and	r24, r24
    1fb8:	21 f0       	breq	.+8      	; 0x1fc2 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    1fc4:	08 95       	ret

00001fc6 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1fc6:	cf 92       	push	r12
    1fc8:	df 92       	push	r13
    1fca:	ef 92       	push	r14
    1fcc:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1fce:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1fd2:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1fd6:	66 85       	ldd	r22, Z+14	; 0x0e
    1fd8:	77 85       	ldd	r23, Z+15	; 0x0f
    1fda:	80 89       	ldd	r24, Z+16	; 0x10
    1fdc:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1fde:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1fe2:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1fe6:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1fea:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1fee:	5a 96       	adiw	r26, 0x1a	; 26
    1ff0:	2c 91       	ld	r18, X
    1ff2:	c1 2c       	mov	r12, r1
    1ff4:	d1 2c       	mov	r13, r1
    1ff6:	76 01       	movw	r14, r12
    1ff8:	68 94       	set
    1ffa:	c2 f8       	bld	r12, 2
    1ffc:	c2 1a       	sub	r12, r18
    1ffe:	d1 08       	sbc	r13, r1
    2000:	e1 08       	sbc	r14, r1
    2002:	f1 08       	sbc	r15, r1
    2004:	c6 86       	std	Z+14, r12	; 0x0e
    2006:	d7 86       	std	Z+15, r13	; 0x0f
    2008:	e0 8a       	std	Z+16, r14	; 0x10
    200a:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    200c:	ff 90       	pop	r15
    200e:	ef 90       	pop	r14
    2010:	df 90       	pop	r13
    2012:	cf 90       	pop	r12
    2014:	08 95       	ret

00002016 <prvInsertTimerInActiveList>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	fc 01       	movw	r30, r24
    2024:	42 83       	std	Z+2, r20	; 0x02
    2026:	53 83       	std	Z+3, r21	; 0x03
    2028:	64 83       	std	Z+4, r22	; 0x04
    202a:	75 83       	std	Z+5, r23	; 0x05
    202c:	82 87       	std	Z+10, r24	; 0x0a
    202e:	93 87       	std	Z+11, r25	; 0x0b
    2030:	04 17       	cp	r16, r20
    2032:	15 07       	cpc	r17, r21
    2034:	26 07       	cpc	r18, r22
    2036:	37 07       	cpc	r19, r23
    2038:	c0 f0       	brcs	.+48     	; 0x206a <prvInsertTimerInActiveList+0x54>
    203a:	0c 19       	sub	r16, r12
    203c:	1d 09       	sbc	r17, r13
    203e:	2e 09       	sbc	r18, r14
    2040:	3f 09       	sbc	r19, r15
    2042:	86 85       	ldd	r24, Z+14	; 0x0e
    2044:	97 85       	ldd	r25, Z+15	; 0x0f
    2046:	a0 89       	ldd	r26, Z+16	; 0x10
    2048:	b1 89       	ldd	r27, Z+17	; 0x11
    204a:	08 17       	cp	r16, r24
    204c:	19 07       	cpc	r17, r25
    204e:	2a 07       	cpc	r18, r26
    2050:	3b 07       	cpc	r19, r27
    2052:	00 f5       	brcc	.+64     	; 0x2094 <prvInsertTimerInActiveList+0x7e>
    2054:	bf 01       	movw	r22, r30
    2056:	6e 5f       	subi	r22, 0xFE	; 254
    2058:	7f 4f       	sbci	r23, 0xFF	; 255
    205a:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <pxOverflowTimerList>
    205e:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <pxOverflowTimerList+0x1>
    2062:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	18 c0       	rjmp	.+48     	; 0x209a <prvInsertTimerInActiveList+0x84>
    206a:	0c 15       	cp	r16, r12
    206c:	1d 05       	cpc	r17, r13
    206e:	2e 05       	cpc	r18, r14
    2070:	3f 05       	cpc	r19, r15
    2072:	28 f4       	brcc	.+10     	; 0x207e <prvInsertTimerInActiveList+0x68>
    2074:	4c 15       	cp	r20, r12
    2076:	5d 05       	cpc	r21, r13
    2078:	6e 05       	cpc	r22, r14
    207a:	7f 05       	cpc	r23, r15
    207c:	68 f4       	brcc	.+26     	; 0x2098 <prvInsertTimerInActiveList+0x82>
    207e:	bf 01       	movw	r22, r30
    2080:	6e 5f       	subi	r22, 0xFE	; 254
    2082:	7f 4f       	sbci	r23, 0xFF	; 255
    2084:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    2088:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    208c:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	03 c0       	rjmp	.+6      	; 0x209a <prvInsertTimerInActiveList+0x84>
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	01 c0       	rjmp	.+2      	; 0x209a <prvInsertTimerInActiveList+0x84>
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	08 95       	ret

000020a8 <prvCheckForValidListAndQueue>:
    20a8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    20ac:	ff 93       	push	r31
    20ae:	f8 7f       	andi	r31, 0xF8	; 248
    20b0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    20b4:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    20b8:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    20bc:	89 2b       	or	r24, r25
    20be:	e9 f4       	brne	.+58     	; 0x20fa <prvCheckForValidListAndQueue+0x52>
    20c0:	87 ea       	ldi	r24, 0xA7	; 167
    20c2:	9c e2       	ldi	r25, 0x2C	; 44
    20c4:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    20c8:	8c e9       	ldi	r24, 0x9C	; 156
    20ca:	9c e2       	ldi	r25, 0x2C	; 44
    20cc:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    20d0:	87 ea       	ldi	r24, 0xA7	; 167
    20d2:	9c e2       	ldi	r25, 0x2C	; 44
    20d4:	80 93 9a 2c 	sts	0x2C9A, r24	; 0x802c9a <pxCurrentTimerList>
    20d8:	90 93 9b 2c 	sts	0x2C9B, r25	; 0x802c9b <pxCurrentTimerList+0x1>
    20dc:	8c e9       	ldi	r24, 0x9C	; 156
    20de:	9c e2       	ldi	r25, 0x2C	; 44
    20e0:	80 93 98 2c 	sts	0x2C98, r24	; 0x802c98 <pxOverflowTimerList>
    20e4:	90 93 99 2c 	sts	0x2C99, r25	; 0x802c99 <pxOverflowTimerList+0x1>
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	69 e0       	ldi	r22, 0x09	; 9
    20ec:	85 e0       	ldi	r24, 0x05	; 5
    20ee:	0e 94 8d 08 	call	0x111a	; 0x111a <xQueueGenericCreate>
    20f2:	80 93 96 2c 	sts	0x2C96, r24	; 0x802c96 <xTimerQueue>
    20f6:	90 93 97 2c 	sts	0x2C97, r25	; 0x802c97 <xTimerQueue+0x1>
    20fa:	ff 91       	pop	r31
    20fc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2100:	08 95       	ret

00002102 <xTimerCreateTimerTask>:
    2102:	ef 92       	push	r14
    2104:	ff 92       	push	r15
    2106:	0f 93       	push	r16
    2108:	0e 94 54 10 	call	0x20a8	; 0x20a8 <prvCheckForValidListAndQueue>
    210c:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    2110:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    2114:	89 2b       	or	r24, r25
    2116:	91 f0       	breq	.+36     	; 0x213c <xTimerCreateTimerTask+0x3a>
    2118:	0f 2e       	mov	r0, r31
    211a:	f4 e9       	ldi	r31, 0x94	; 148
    211c:	ef 2e       	mov	r14, r31
    211e:	fc e2       	ldi	r31, 0x2C	; 44
    2120:	ff 2e       	mov	r15, r31
    2122:	f0 2d       	mov	r31, r0
    2124:	03 e0       	ldi	r16, 0x03	; 3
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	48 ec       	ldi	r20, 0xC8	; 200
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	62 e5       	ldi	r22, 0x52	; 82
    2130:	70 e2       	ldi	r23, 0x20	; 32
    2132:	84 e9       	ldi	r24, 0x94	; 148
    2134:	91 e1       	ldi	r25, 0x11	; 17
    2136:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
    213a:	01 c0       	rjmp	.+2      	; 0x213e <xTimerCreateTimerTask+0x3c>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	08 95       	ret

00002146 <xTimerGenericCommand>:
    2146:	8f 92       	push	r8
    2148:	9f 92       	push	r9
    214a:	af 92       	push	r10
    214c:	bf 92       	push	r11
    214e:	cf 92       	push	r12
    2150:	df 92       	push	r13
    2152:	ef 92       	push	r14
    2154:	ff 92       	push	r15
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	29 97       	sbiw	r28, 0x09	; 9
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <xTimerQueue>
    216c:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    2170:	30 97       	sbiw	r30, 0x00	; 0
    2172:	89 f1       	breq	.+98     	; 0x21d6 <xTimerGenericCommand+0x90>
    2174:	69 83       	std	Y+1, r22	; 0x01
    2176:	2a 83       	std	Y+2, r18	; 0x02
    2178:	3b 83       	std	Y+3, r19	; 0x03
    217a:	4c 83       	std	Y+4, r20	; 0x04
    217c:	5d 83       	std	Y+5, r21	; 0x05
    217e:	8e 83       	std	Y+6, r24	; 0x06
    2180:	9f 83       	std	Y+7, r25	; 0x07
    2182:	66 30       	cpi	r22, 0x06	; 6
    2184:	fc f4       	brge	.+62     	; 0x21c4 <xTimerGenericCommand+0x7e>
    2186:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xTaskGetSchedulerState>
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	69 f4       	brne	.+26     	; 0x21a8 <xTimerGenericCommand+0x62>
    218e:	00 e0       	ldi	r16, 0x00	; 0
    2190:	a7 01       	movw	r20, r14
    2192:	96 01       	movw	r18, r12
    2194:	be 01       	movw	r22, r28
    2196:	6f 5f       	subi	r22, 0xFF	; 255
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    219e:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    21a2:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
    21a6:	18 c0       	rjmp	.+48     	; 0x21d8 <xTimerGenericCommand+0x92>
    21a8:	00 e0       	ldi	r16, 0x00	; 0
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	a9 01       	movw	r20, r18
    21b0:	be 01       	movw	r22, r28
    21b2:	6f 5f       	subi	r22, 0xFF	; 255
    21b4:	7f 4f       	sbci	r23, 0xFF	; 255
    21b6:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    21ba:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    21be:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
    21c2:	0a c0       	rjmp	.+20     	; 0x21d8 <xTimerGenericCommand+0x92>
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	a8 01       	movw	r20, r16
    21c8:	be 01       	movw	r22, r28
    21ca:	6f 5f       	subi	r22, 0xFF	; 255
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	cf 01       	movw	r24, r30
    21d0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xQueueGenericSendFromISR>
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <xTimerGenericCommand+0x92>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	29 96       	adiw	r28, 0x09	; 9
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	ff 90       	pop	r15
    21e8:	ef 90       	pop	r14
    21ea:	df 90       	pop	r13
    21ec:	cf 90       	pop	r12
    21ee:	bf 90       	pop	r11
    21f0:	af 90       	pop	r10
    21f2:	9f 90       	pop	r9
    21f4:	8f 90       	pop	r8
    21f6:	08 95       	ret

000021f8 <prvSampleTimeNow>:
    21f8:	2f 92       	push	r2
    21fa:	3f 92       	push	r3
    21fc:	4f 92       	push	r4
    21fe:	5f 92       	push	r5
    2200:	6f 92       	push	r6
    2202:	7f 92       	push	r7
    2204:	8f 92       	push	r8
    2206:	9f 92       	push	r9
    2208:	af 92       	push	r10
    220a:	bf 92       	push	r11
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	1c 01       	movw	r2, r24
    221e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <xTaskGetTickCount>
    2222:	2b 01       	movw	r4, r22
    2224:	3c 01       	movw	r6, r24
    2226:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xLastTime.4745>
    222a:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <xLastTime.4745+0x1>
    222e:	a0 91 92 2c 	lds	r26, 0x2C92	; 0x802c92 <xLastTime.4745+0x2>
    2232:	b0 91 93 2c 	lds	r27, 0x2C93	; 0x802c93 <xLastTime.4745+0x3>
    2236:	48 16       	cp	r4, r24
    2238:	59 06       	cpc	r5, r25
    223a:	6a 06       	cpc	r6, r26
    223c:	7b 06       	cpc	r7, r27
    223e:	08 f0       	brcs	.+2      	; 0x2242 <prvSampleTimeNow+0x4a>
    2240:	54 c0       	rjmp	.+168    	; 0x22ea <prvSampleTimeNow+0xf2>
    2242:	3c c0       	rjmp	.+120    	; 0x22bc <prvSampleTimeNow+0xc4>
    2244:	07 80       	ldd	r0, Z+7	; 0x07
    2246:	f0 85       	ldd	r31, Z+8	; 0x08
    2248:	e0 2d       	mov	r30, r0
    224a:	80 80       	ld	r8, Z
    224c:	91 80       	ldd	r9, Z+1	; 0x01
    224e:	a2 80       	ldd	r10, Z+2	; 0x02
    2250:	b3 80       	ldd	r11, Z+3	; 0x03
    2252:	c0 85       	ldd	r28, Z+8	; 0x08
    2254:	d1 85       	ldd	r29, Z+9	; 0x09
    2256:	8e 01       	movw	r16, r28
    2258:	0e 5f       	subi	r16, 0xFE	; 254
    225a:	1f 4f       	sbci	r17, 0xFF	; 255
    225c:	c8 01       	movw	r24, r16
    225e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    2262:	ed 89       	ldd	r30, Y+21	; 0x15
    2264:	fe 89       	ldd	r31, Y+22	; 0x16
    2266:	ce 01       	movw	r24, r28
    2268:	19 95       	eicall
    226a:	8a 89       	ldd	r24, Y+18	; 0x12
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	31 f5       	brne	.+76     	; 0x22bc <prvSampleTimeNow+0xc4>
    2270:	8e 85       	ldd	r24, Y+14	; 0x0e
    2272:	9f 85       	ldd	r25, Y+15	; 0x0f
    2274:	a8 89       	ldd	r26, Y+16	; 0x10
    2276:	b9 89       	ldd	r27, Y+17	; 0x11
    2278:	88 0d       	add	r24, r8
    227a:	99 1d       	adc	r25, r9
    227c:	aa 1d       	adc	r26, r10
    227e:	bb 1d       	adc	r27, r11
    2280:	88 16       	cp	r8, r24
    2282:	99 06       	cpc	r9, r25
    2284:	aa 06       	cpc	r10, r26
    2286:	bb 06       	cpc	r11, r27
    2288:	70 f4       	brcc	.+28     	; 0x22a6 <prvSampleTimeNow+0xae>
    228a:	8a 83       	std	Y+2, r24	; 0x02
    228c:	9b 83       	std	Y+3, r25	; 0x03
    228e:	ac 83       	std	Y+4, r26	; 0x04
    2290:	bd 83       	std	Y+5, r27	; 0x05
    2292:	ca 87       	std	Y+10, r28	; 0x0a
    2294:	db 87       	std	Y+11, r29	; 0x0b
    2296:	b8 01       	movw	r22, r16
    2298:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    229c:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    22a0:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    22a4:	0b c0       	rjmp	.+22     	; 0x22bc <prvSampleTimeNow+0xc4>
    22a6:	c1 2c       	mov	r12, r1
    22a8:	d1 2c       	mov	r13, r1
    22aa:	76 01       	movw	r14, r12
    22ac:	00 e0       	ldi	r16, 0x00	; 0
    22ae:	10 e0       	ldi	r17, 0x00	; 0
    22b0:	a5 01       	movw	r20, r10
    22b2:	94 01       	movw	r18, r8
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	ce 01       	movw	r24, r28
    22b8:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    22bc:	e0 91 9a 2c 	lds	r30, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    22c0:	f0 91 9b 2c 	lds	r31, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    22c4:	80 81       	ld	r24, Z
    22c6:	81 11       	cpse	r24, r1
    22c8:	bd cf       	rjmp	.-134    	; 0x2244 <prvSampleTimeNow+0x4c>
    22ca:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <pxOverflowTimerList>
    22ce:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <pxOverflowTimerList+0x1>
    22d2:	80 93 9a 2c 	sts	0x2C9A, r24	; 0x802c9a <pxCurrentTimerList>
    22d6:	90 93 9b 2c 	sts	0x2C9B, r25	; 0x802c9b <pxCurrentTimerList+0x1>
    22da:	e0 93 98 2c 	sts	0x2C98, r30	; 0x802c98 <pxOverflowTimerList>
    22de:	f0 93 99 2c 	sts	0x2C99, r31	; 0x802c99 <pxOverflowTimerList+0x1>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	f1 01       	movw	r30, r2
    22e6:	80 83       	st	Z, r24
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <prvSampleTimeNow+0xf6>
    22ea:	f1 01       	movw	r30, r2
    22ec:	10 82       	st	Z, r1
    22ee:	40 92 90 2c 	sts	0x2C90, r4	; 0x802c90 <xLastTime.4745>
    22f2:	50 92 91 2c 	sts	0x2C91, r5	; 0x802c91 <xLastTime.4745+0x1>
    22f6:	60 92 92 2c 	sts	0x2C92, r6	; 0x802c92 <xLastTime.4745+0x2>
    22fa:	70 92 93 2c 	sts	0x2C93, r7	; 0x802c93 <xLastTime.4745+0x3>
    22fe:	c3 01       	movw	r24, r6
    2300:	b2 01       	movw	r22, r4
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	df 90       	pop	r13
    2310:	cf 90       	pop	r12
    2312:	bf 90       	pop	r11
    2314:	af 90       	pop	r10
    2316:	9f 90       	pop	r9
    2318:	8f 90       	pop	r8
    231a:	7f 90       	pop	r7
    231c:	6f 90       	pop	r6
    231e:	5f 90       	pop	r5
    2320:	4f 90       	pop	r4
    2322:	3f 90       	pop	r3
    2324:	2f 90       	pop	r2
    2326:	08 95       	ret

00002328 <prvTimerTask>:
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	2e 97       	sbiw	r28, 0x0e	; 14
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	ce 01       	movw	r24, r28
    2338:	01 96       	adiw	r24, 0x01	; 1
    233a:	1c 01       	movw	r2, r24
    233c:	a8 2e       	mov	r10, r24
    233e:	b3 2c       	mov	r11, r3
    2340:	e0 91 9a 2c 	lds	r30, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    2344:	f0 91 9b 2c 	lds	r31, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    2348:	80 81       	ld	r24, Z
    234a:	88 23       	and	r24, r24
    234c:	09 f4       	brne	.+2      	; 0x2350 <prvTimerTask+0x28>
    234e:	03 c1       	rjmp	.+518    	; 0x2556 <prvTimerTask+0x22e>
    2350:	07 80       	ldd	r0, Z+7	; 0x07
    2352:	f0 85       	ldd	r31, Z+8	; 0x08
    2354:	e0 2d       	mov	r30, r0
    2356:	40 80       	ld	r4, Z
    2358:	51 80       	ldd	r5, Z+1	; 0x01
    235a:	62 80       	ldd	r6, Z+2	; 0x02
    235c:	73 80       	ldd	r7, Z+3	; 0x03
    235e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    2362:	c1 01       	movw	r24, r2
    2364:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    2368:	6b 87       	std	Y+11, r22	; 0x0b
    236a:	7c 87       	std	Y+12, r23	; 0x0c
    236c:	8d 87       	std	Y+13, r24	; 0x0d
    236e:	9e 87       	std	Y+14, r25	; 0x0e
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	81 11       	cpse	r24, r1
    2374:	5e c0       	rjmp	.+188    	; 0x2432 <prvTimerTask+0x10a>
    2376:	8b 85       	ldd	r24, Y+11	; 0x0b
    2378:	9c 85       	ldd	r25, Y+12	; 0x0c
    237a:	ad 85       	ldd	r26, Y+13	; 0x0d
    237c:	be 85       	ldd	r27, Y+14	; 0x0e
    237e:	84 15       	cp	r24, r4
    2380:	95 05       	cpc	r25, r5
    2382:	a6 05       	cpc	r26, r6
    2384:	b7 05       	cpc	r27, r7
    2386:	e8 f1       	brcs	.+122    	; 0x2402 <prvTimerTask+0xda>
    2388:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    238c:	e0 91 9a 2c 	lds	r30, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    2390:	f0 91 9b 2c 	lds	r31, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    2394:	07 80       	ldd	r0, Z+7	; 0x07
    2396:	f0 85       	ldd	r31, Z+8	; 0x08
    2398:	e0 2d       	mov	r30, r0
    239a:	80 84       	ldd	r8, Z+8	; 0x08
    239c:	91 84       	ldd	r9, Z+9	; 0x09
    239e:	c4 01       	movw	r24, r8
    23a0:	02 96       	adiw	r24, 0x02	; 2
    23a2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    23a6:	d4 01       	movw	r26, r8
    23a8:	52 96       	adiw	r26, 0x12	; 18
    23aa:	8c 91       	ld	r24, X
    23ac:	52 97       	sbiw	r26, 0x12	; 18
    23ae:	81 30       	cpi	r24, 0x01	; 1
    23b0:	01 f5       	brne	.+64     	; 0x23f2 <prvTimerTask+0xca>
    23b2:	1e 96       	adiw	r26, 0x0e	; 14
    23b4:	4d 91       	ld	r20, X+
    23b6:	5d 91       	ld	r21, X+
    23b8:	6d 91       	ld	r22, X+
    23ba:	7c 91       	ld	r23, X
    23bc:	51 97       	sbiw	r26, 0x11	; 17
    23be:	44 0d       	add	r20, r4
    23c0:	55 1d       	adc	r21, r5
    23c2:	66 1d       	adc	r22, r6
    23c4:	77 1d       	adc	r23, r7
    23c6:	73 01       	movw	r14, r6
    23c8:	62 01       	movw	r12, r4
    23ca:	0b 85       	ldd	r16, Y+11	; 0x0b
    23cc:	1c 85       	ldd	r17, Y+12	; 0x0c
    23ce:	2d 85       	ldd	r18, Y+13	; 0x0d
    23d0:	3e 85       	ldd	r19, Y+14	; 0x0e
    23d2:	c4 01       	movw	r24, r8
    23d4:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    23d8:	88 23       	and	r24, r24
    23da:	59 f0       	breq	.+22     	; 0x23f2 <prvTimerTask+0xca>
    23dc:	c1 2c       	mov	r12, r1
    23de:	d1 2c       	mov	r13, r1
    23e0:	76 01       	movw	r14, r12
    23e2:	00 e0       	ldi	r16, 0x00	; 0
    23e4:	10 e0       	ldi	r17, 0x00	; 0
    23e6:	a3 01       	movw	r20, r6
    23e8:	92 01       	movw	r18, r4
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	c4 01       	movw	r24, r8
    23ee:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    23f2:	d4 01       	movw	r26, r8
    23f4:	55 96       	adiw	r26, 0x15	; 21
    23f6:	ed 91       	ld	r30, X+
    23f8:	fc 91       	ld	r31, X
    23fa:	56 97       	sbiw	r26, 0x16	; 22
    23fc:	c4 01       	movw	r24, r8
    23fe:	19 95       	eicall
    2400:	9c c0       	rjmp	.+312    	; 0x253a <prvTimerTask+0x212>
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	b3 01       	movw	r22, r6
    2406:	a2 01       	movw	r20, r4
    2408:	8b 85       	ldd	r24, Y+11	; 0x0b
    240a:	9c 85       	ldd	r25, Y+12	; 0x0c
    240c:	ad 85       	ldd	r26, Y+13	; 0x0d
    240e:	be 85       	ldd	r27, Y+14	; 0x0e
    2410:	48 1b       	sub	r20, r24
    2412:	59 0b       	sbc	r21, r25
    2414:	6a 0b       	sbc	r22, r26
    2416:	7b 0b       	sbc	r23, r27
    2418:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    241c:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    2420:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <vQueueWaitForMessageRestricted>
    2424:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    2428:	81 11       	cpse	r24, r1
    242a:	87 c0       	rjmp	.+270    	; 0x253a <prvTimerTask+0x212>
    242c:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    2430:	84 c0       	rjmp	.+264    	; 0x253a <prvTimerTask+0x212>
    2432:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    2436:	81 c0       	rjmp	.+258    	; 0x253a <prvTimerTask+0x212>
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	88 23       	and	r24, r24
    243c:	6c f4       	brge	.+26     	; 0x2458 <prvTimerTask+0x130>
    243e:	4e 81       	ldd	r20, Y+6	; 0x06
    2440:	5f 81       	ldd	r21, Y+7	; 0x07
    2442:	68 85       	ldd	r22, Y+8	; 0x08
    2444:	79 85       	ldd	r23, Y+9	; 0x09
    2446:	ea 81       	ldd	r30, Y+2	; 0x02
    2448:	fb 81       	ldd	r31, Y+3	; 0x03
    244a:	8c 81       	ldd	r24, Y+4	; 0x04
    244c:	9d 81       	ldd	r25, Y+5	; 0x05
    244e:	19 95       	eicall
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	88 23       	and	r24, r24
    2454:	0c f4       	brge	.+2      	; 0x2458 <prvTimerTask+0x130>
    2456:	71 c0       	rjmp	.+226    	; 0x253a <prvTimerTask+0x212>
    2458:	8e 80       	ldd	r8, Y+6	; 0x06
    245a:	9f 80       	ldd	r9, Y+7	; 0x07
    245c:	d4 01       	movw	r26, r8
    245e:	1c 96       	adiw	r26, 0x0c	; 12
    2460:	8d 91       	ld	r24, X+
    2462:	9c 91       	ld	r25, X
    2464:	1d 97       	sbiw	r26, 0x0d	; 13
    2466:	89 2b       	or	r24, r25
    2468:	21 f0       	breq	.+8      	; 0x2472 <prvTimerTask+0x14a>
    246a:	c4 01       	movw	r24, r8
    246c:	02 96       	adiw	r24, 0x02	; 2
    246e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    2472:	ce 01       	movw	r24, r28
    2474:	0a 96       	adiw	r24, 0x0a	; 10
    2476:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    247a:	8b 01       	movw	r16, r22
    247c:	9c 01       	movw	r18, r24
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	08 2e       	mov	r0, r24
    2482:	00 0c       	add	r0, r0
    2484:	99 0b       	sbc	r25, r25
    2486:	aa 0b       	sbc	r26, r26
    2488:	bb 0b       	sbc	r27, r27
    248a:	8a 30       	cpi	r24, 0x0A	; 10
    248c:	91 05       	cpc	r25, r1
    248e:	08 f0       	brcs	.+2      	; 0x2492 <prvTimerTask+0x16a>
    2490:	54 c0       	rjmp	.+168    	; 0x253a <prvTimerTask+0x212>
    2492:	fc 01       	movw	r30, r24
    2494:	88 27       	eor	r24, r24
    2496:	e2 50       	subi	r30, 0x02	; 2
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	8f 4f       	sbci	r24, 0xFF	; 255
    249c:	0c 94 c8 24 	jmp	0x4990	; 0x4990 <__tablejump2__>
    24a0:	ca 80       	ldd	r12, Y+2	; 0x02
    24a2:	db 80       	ldd	r13, Y+3	; 0x03
    24a4:	ec 80       	ldd	r14, Y+4	; 0x04
    24a6:	fd 80       	ldd	r15, Y+5	; 0x05
    24a8:	f4 01       	movw	r30, r8
    24aa:	46 85       	ldd	r20, Z+14	; 0x0e
    24ac:	57 85       	ldd	r21, Z+15	; 0x0f
    24ae:	60 89       	ldd	r22, Z+16	; 0x10
    24b0:	71 89       	ldd	r23, Z+17	; 0x11
    24b2:	4c 0d       	add	r20, r12
    24b4:	5d 1d       	adc	r21, r13
    24b6:	6e 1d       	adc	r22, r14
    24b8:	7f 1d       	adc	r23, r15
    24ba:	c4 01       	movw	r24, r8
    24bc:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    24c0:	88 23       	and	r24, r24
    24c2:	d9 f1       	breq	.+118    	; 0x253a <prvTimerTask+0x212>
    24c4:	d4 01       	movw	r26, r8
    24c6:	55 96       	adiw	r26, 0x15	; 21
    24c8:	ed 91       	ld	r30, X+
    24ca:	fc 91       	ld	r31, X
    24cc:	56 97       	sbiw	r26, 0x16	; 22
    24ce:	c4 01       	movw	r24, r8
    24d0:	19 95       	eicall
    24d2:	f4 01       	movw	r30, r8
    24d4:	82 89       	ldd	r24, Z+18	; 0x12
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	81 f5       	brne	.+96     	; 0x253a <prvTimerTask+0x212>
    24da:	4a 81       	ldd	r20, Y+2	; 0x02
    24dc:	5b 81       	ldd	r21, Y+3	; 0x03
    24de:	6c 81       	ldd	r22, Y+4	; 0x04
    24e0:	7d 81       	ldd	r23, Y+5	; 0x05
    24e2:	86 85       	ldd	r24, Z+14	; 0x0e
    24e4:	97 85       	ldd	r25, Z+15	; 0x0f
    24e6:	a0 89       	ldd	r26, Z+16	; 0x10
    24e8:	b1 89       	ldd	r27, Z+17	; 0x11
    24ea:	9a 01       	movw	r18, r20
    24ec:	ab 01       	movw	r20, r22
    24ee:	28 0f       	add	r18, r24
    24f0:	39 1f       	adc	r19, r25
    24f2:	4a 1f       	adc	r20, r26
    24f4:	5b 1f       	adc	r21, r27
    24f6:	c1 2c       	mov	r12, r1
    24f8:	d1 2c       	mov	r13, r1
    24fa:	76 01       	movw	r14, r12
    24fc:	00 e0       	ldi	r16, 0x00	; 0
    24fe:	10 e0       	ldi	r17, 0x00	; 0
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	c4 01       	movw	r24, r8
    2504:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    2508:	18 c0       	rjmp	.+48     	; 0x253a <prvTimerTask+0x212>
    250a:	4a 81       	ldd	r20, Y+2	; 0x02
    250c:	5b 81       	ldd	r21, Y+3	; 0x03
    250e:	6c 81       	ldd	r22, Y+4	; 0x04
    2510:	7d 81       	ldd	r23, Y+5	; 0x05
    2512:	d4 01       	movw	r26, r8
    2514:	1e 96       	adiw	r26, 0x0e	; 14
    2516:	4d 93       	st	X+, r20
    2518:	5d 93       	st	X+, r21
    251a:	6d 93       	st	X+, r22
    251c:	7c 93       	st	X, r23
    251e:	51 97       	sbiw	r26, 0x11	; 17
    2520:	40 0f       	add	r20, r16
    2522:	51 1f       	adc	r21, r17
    2524:	62 1f       	adc	r22, r18
    2526:	73 1f       	adc	r23, r19
    2528:	68 01       	movw	r12, r16
    252a:	79 01       	movw	r14, r18
    252c:	c4 01       	movw	r24, r8
    252e:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    2532:	03 c0       	rjmp	.+6      	; 0x253a <prvTimerTask+0x212>
    2534:	c4 01       	movw	r24, r8
    2536:	0e 94 29 05 	call	0xa52	; 0xa52 <vPortFree>
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	a9 01       	movw	r20, r18
    2540:	6a 2d       	mov	r22, r10
    2542:	7b 2d       	mov	r23, r11
    2544:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    2548:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    254c:	0e 94 a9 09 	call	0x1352	; 0x1352 <xQueueReceive>
    2550:	81 11       	cpse	r24, r1
    2552:	72 cf       	rjmp	.-284    	; 0x2438 <prvTimerTask+0x110>
    2554:	f5 ce       	rjmp	.-534    	; 0x2340 <prvTimerTask+0x18>
    2556:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    255a:	c1 01       	movw	r24, r2
    255c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    2560:	6b 87       	std	Y+11, r22	; 0x0b
    2562:	7c 87       	std	Y+12, r23	; 0x0c
    2564:	8d 87       	std	Y+13, r24	; 0x0d
    2566:	9e 87       	std	Y+14, r25	; 0x0e
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	81 11       	cpse	r24, r1
    256c:	62 cf       	rjmp	.-316    	; 0x2432 <prvTimerTask+0x10a>
    256e:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxOverflowTimerList>
    2572:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxOverflowTimerList+0x1>
    2576:	80 81       	ld	r24, Z
    2578:	21 e0       	ldi	r18, 0x01	; 1
    257a:	81 11       	cpse	r24, r1
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	41 2c       	mov	r4, r1
    2580:	51 2c       	mov	r5, r1
    2582:	32 01       	movw	r6, r4
    2584:	3f cf       	rjmp	.-386    	; 0x2404 <prvTimerTask+0xdc>

00002586 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2586:	0f 93       	push	r16
    2588:	1f 93       	push	r17
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	29 97       	sbiw	r28, 0x09	; 9
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    2598:	ee ef       	ldi	r30, 0xFE	; 254
    259a:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    259c:	8a 83       	std	Y+2, r24	; 0x02
    259e:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    25a0:	6c 83       	std	Y+4, r22	; 0x04
    25a2:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    25a4:	2e 83       	std	Y+6, r18	; 0x06
    25a6:	3f 83       	std	Y+7, r19	; 0x07
    25a8:	48 87       	std	Y+8, r20	; 0x08
    25aa:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	a8 01       	movw	r20, r16
    25b0:	be 01       	movw	r22, r28
    25b2:	6f 5f       	subi	r22, 0xFF	; 255
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    25ba:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    25be:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    25c2:	29 96       	adiw	r28, 0x09	; 9
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	08 95       	ret

000025d2 <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    25d2:	e0 e5       	ldi	r30, 0x50	; 80
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	81 60       	ori	r24, 0x01	; 1
    25da:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    25dc:	81 81       	ldd	r24, Z+1	; 0x01
    25de:	80 ff       	sbrs	r24, 0
    25e0:	fd cf       	rjmp	.-6      	; 0x25dc <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	0e 94 35 03 	call	0x66a	; 0x66a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    25e8:	8e e1       	ldi	r24, 0x1E	; 30
    25ea:	0e 94 25 03 	call	0x64a	; 0x64a <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	0e 94 2f 03 	call	0x65e	; 0x65e <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    25f6:	43 e0       	ldi	r20, 0x03	; 3
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	80 e4       	ldi	r24, 0x40	; 64
    25fc:	0e 94 16 03 	call	0x62c	; 0x62c <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    2600:	e0 e5       	ldi	r30, 0x50	; 80
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	88 60       	ori	r24, 0x08	; 8
    2608:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    260a:	81 81       	ldd	r24, Z+1	; 0x01
    260c:	83 ff       	sbrs	r24, 3
    260e:	fd cf       	rjmp	.-6      	; 0x260a <vInitClock+0x38>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    2610:	64 e0       	ldi	r22, 0x04	; 4
    2612:	80 ec       	ldi	r24, 0xC0	; 192
    2614:	0e 94 20 03 	call	0x640	; 0x640 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    2618:	e0 e5       	ldi	r30, 0x50	; 80
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	80 61       	ori	r24, 0x10	; 16
    2620:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	0e 94 2f 03 	call	0x65e	; 0x65e <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    262a:	e0 e5       	ldi	r30, 0x50	; 80
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	81 81       	ldd	r24, Z+1	; 0x01
    2630:	84 ff       	sbrs	r24, 4
    2632:	fd cf       	rjmp	.-6      	; 0x262e <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    2634:	84 e0       	ldi	r24, 0x04	; 4
    2636:	0e 94 35 03 	call	0x66a	; 0x66a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    263a:	87 e0       	ldi	r24, 0x07	; 7
    263c:	0e 94 25 03 	call	0x64a	; 0x64a <CLKSYS_Disable>
    2640:	08 95       	ret

00002642 <vApplicationIdleHook>:
double dPi4; 
long i;


void vApplicationIdleHook( void )
{	
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
	
}
    264a:	00 00       	nop
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	08 95       	ret

00002652 <main>:

int main(void)
{
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
	vInitClock();
    2660:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <vInitClock>
	vInitDisplay();
    2664:	0e 94 34 17 	call	0x2e68	; 0x2e68 <vInitDisplay>
	egPiStates = xEventGroupCreate();
    2668:	0e 94 66 03 	call	0x6cc	; 0x6cc <xEventGroupCreate>
    266c:	80 93 e3 2c 	sts	0x2CE3, r24	; 0x802ce3 <egPiStates>
    2670:	90 93 e4 2c 	sts	0x2CE4, r25	; 0x802ce4 <egPiStates+0x1>
	
	xTaskCreate( vButton, (const char *) "Button", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    2674:	e1 2c       	mov	r14, r1
    2676:	f1 2c       	mov	r15, r1
    2678:	03 e0       	ldi	r16, 0x03	; 3
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	48 ec       	ldi	r20, 0xC8	; 200
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	70 e2       	ldi	r23, 0x20	; 32
    2686:	8c e4       	ldi	r24, 0x4C	; 76
    2688:	94 e1       	ldi	r25, 0x14	; 20
    268a:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
	xTaskCreate( vGUI, (const char *) "GUITask", configMINIMAL_STACK_SIZE, NULL, 2, &GUITask);
    268e:	0f 2e       	mov	r0, r31
    2690:	f9 ee       	ldi	r31, 0xE9	; 233
    2692:	ef 2e       	mov	r14, r31
    2694:	fc e2       	ldi	r31, 0x2C	; 44
    2696:	ff 2e       	mov	r15, r31
    2698:	f0 2d       	mov	r31, r0
    269a:	02 e0       	ldi	r16, 0x02	; 2
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	48 ec       	ldi	r20, 0xC8	; 200
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	67 e0       	ldi	r22, 0x07	; 7
    26a6:	70 e2       	ldi	r23, 0x20	; 32
    26a8:	8f e6       	ldi	r24, 0x6F	; 111
    26aa:	93 e1       	ldi	r25, 0x13	; 19
    26ac:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
	xTaskCreate( vCalc, (const char *) "Calc", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    26b0:	e1 2c       	mov	r14, r1
    26b2:	f1 2c       	mov	r15, r1
    26b4:	01 e0       	ldi	r16, 0x01	; 1
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	48 ec       	ldi	r20, 0xC8	; 200
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	6f e0       	ldi	r22, 0x0F	; 15
    26c0:	70 e2       	ldi	r23, 0x20	; 32
    26c2:	83 ea       	ldi	r24, 0xA3	; 163
    26c4:	94 e1       	ldi	r25, 0x14	; 20
    26c6:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>

	vTaskStartScheduler();
    26ca:	0e 94 3c 0c 	call	0x1878	; 0x1878 <vTaskStartScheduler>
	return 0;
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
}
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	0f 91       	pop	r16
    26d8:	ff 90       	pop	r15
    26da:	ef 90       	pop	r14
    26dc:	08 95       	ret

000026de <vGUI>:

void vGUI(void *pvParameters) {
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	6b 97       	sbiw	r28, 0x1b	; 27
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	8a 8f       	std	Y+26, r24	; 0x1a
    26ee:	9b 8f       	std	Y+27, r25	; 0x1b
	char Pi[10] = "";			
    26f0:	19 82       	std	Y+1, r1	; 0x01
    26f2:	1a 82       	std	Y+2, r1	; 0x02
    26f4:	28 e0       	ldi	r18, 0x08	; 8
    26f6:	ce 01       	movw	r24, r28
    26f8:	03 96       	adiw	r24, 0x03	; 3
    26fa:	fc 01       	movw	r30, r24
    26fc:	32 2f       	mov	r19, r18
    26fe:	11 92       	st	Z+, r1
    2700:	3a 95       	dec	r19
    2702:	e9 f7       	brne	.-6      	; 0x26fe <vGUI+0x20>
	char Iter[15] = "";
    2704:	1b 86       	std	Y+11, r1	; 0x0b
    2706:	1c 86       	std	Y+12, r1	; 0x0c
    2708:	2d e0       	ldi	r18, 0x0D	; 13
    270a:	ce 01       	movw	r24, r28
    270c:	0d 96       	adiw	r24, 0x0d	; 13
    270e:	fc 01       	movw	r30, r24
    2710:	32 2f       	mov	r19, r18
    2712:	11 92       	st	Z+, r1
    2714:	3a 95       	dec	r19
    2716:	e9 f7       	brne	.-6      	; 0x2712 <vGUI+0x34>
	for(;;) {
		
		xEventGroupClearBits(egPiStates, FINISHCALC);
    2718:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    271c:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    2720:	48 e0       	ldi	r20, 0x08	; 8
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	70 e0       	ldi	r23, 0x00	; 0
    2728:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
		sprintf(Pi, "%f", 4*dPi4);
    272c:	80 91 df 2c 	lds	r24, 0x2CDF	; 0x802cdf <dPi4>
    2730:	90 91 e0 2c 	lds	r25, 0x2CE0	; 0x802ce0 <dPi4+0x1>
    2734:	a0 91 e1 2c 	lds	r26, 0x2CE1	; 0x802ce1 <dPi4+0x2>
    2738:	b0 91 e2 2c 	lds	r27, 0x2CE2	; 0x802ce2 <dPi4+0x3>
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	50 e4       	ldi	r21, 0x40	; 64
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 bb 20 	call	0x4176	; 0x4176 <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	2b 2f       	mov	r18, r27
    2752:	2f 93       	push	r18
    2754:	2a 2f       	mov	r18, r26
    2756:	2f 93       	push	r18
    2758:	29 2f       	mov	r18, r25
    275a:	2f 93       	push	r18
    275c:	8f 93       	push	r24
    275e:	84 e1       	ldi	r24, 0x14	; 20
    2760:	90 e2       	ldi	r25, 0x20	; 32
    2762:	89 2f       	mov	r24, r25
    2764:	8f 93       	push	r24
    2766:	84 e1       	ldi	r24, 0x14	; 20
    2768:	90 e2       	ldi	r25, 0x20	; 32
    276a:	8f 93       	push	r24
    276c:	ce 01       	movw	r24, r28
    276e:	01 96       	adiw	r24, 0x01	; 1
    2770:	9f 93       	push	r25
    2772:	8f 93       	push	r24
    2774:	0e 94 43 26 	call	0x4c86	; 0x4c86 <sprintf>
    2778:	8d b7       	in	r24, 0x3d	; 61
    277a:	9e b7       	in	r25, 0x3e	; 62
    277c:	08 96       	adiw	r24, 0x08	; 8
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	de bf       	out	0x3e, r29	; 62
		sprintf(Iter, "%ld", i);
    2782:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <i>
    2786:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <i+0x1>
    278a:	a0 91 e7 2c 	lds	r26, 0x2CE7	; 0x802ce7 <i+0x2>
    278e:	b0 91 e8 2c 	lds	r27, 0x2CE8	; 0x802ce8 <i+0x3>
    2792:	2b 2f       	mov	r18, r27
    2794:	2f 93       	push	r18
    2796:	2a 2f       	mov	r18, r26
    2798:	2f 93       	push	r18
    279a:	29 2f       	mov	r18, r25
    279c:	2f 93       	push	r18
    279e:	8f 93       	push	r24
    27a0:	87 e1       	ldi	r24, 0x17	; 23
    27a2:	90 e2       	ldi	r25, 0x20	; 32
    27a4:	89 2f       	mov	r24, r25
    27a6:	8f 93       	push	r24
    27a8:	87 e1       	ldi	r24, 0x17	; 23
    27aa:	90 e2       	ldi	r25, 0x20	; 32
    27ac:	8f 93       	push	r24
    27ae:	ce 01       	movw	r24, r28
    27b0:	0b 96       	adiw	r24, 0x0b	; 11
    27b2:	29 2f       	mov	r18, r25
    27b4:	2f 93       	push	r18
    27b6:	8f 93       	push	r24
    27b8:	0e 94 43 26 	call	0x4c86	; 0x4c86 <sprintf>
    27bc:	ed b7       	in	r30, 0x3d	; 61
    27be:	fe b7       	in	r31, 0x3e	; 62
    27c0:	38 96       	adiw	r30, 0x08	; 8
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	de bf       	out	0x3e, r29	; 62
		vDisplayClear();
    27c6:	0e 94 7f 19 	call	0x32fe	; 0x32fe <vDisplayClear>
		vDisplayWriteStringAtPos(0,0,"PI Calculator");
    27ca:	8b e1       	ldi	r24, 0x1B	; 27
    27cc:	90 e2       	ldi	r25, 0x20	; 32
    27ce:	89 2f       	mov	r24, r25
    27d0:	8f 93       	push	r24
    27d2:	8b e1       	ldi	r24, 0x1B	; 27
    27d4:	90 e2       	ldi	r25, 0x20	; 32
    27d6:	8f 93       	push	r24
    27d8:	1f 92       	push	r1
    27da:	1f 92       	push	r1
    27dc:	1f 92       	push	r1
    27de:	1f 92       	push	r1
    27e0:	0e 94 91 19 	call	0x3322	; 0x3322 <vDisplayWriteStringAtPos>
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
		vDisplayWriteStringAtPos(1,0,"%s", Iter);
    27f0:	ce 01       	movw	r24, r28
    27f2:	0b 96       	adiw	r24, 0x0b	; 11
    27f4:	29 2f       	mov	r18, r25
    27f6:	2f 93       	push	r18
    27f8:	8f 93       	push	r24
    27fa:	89 e2       	ldi	r24, 0x29	; 41
    27fc:	90 e2       	ldi	r25, 0x20	; 32
    27fe:	89 2f       	mov	r24, r25
    2800:	8f 93       	push	r24
    2802:	89 e2       	ldi	r24, 0x29	; 41
    2804:	90 e2       	ldi	r25, 0x20	; 32
    2806:	8f 93       	push	r24
    2808:	1f 92       	push	r1
    280a:	1f 92       	push	r1
    280c:	1f 92       	push	r1
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	8f 93       	push	r24
    2812:	0e 94 91 19 	call	0x3322	; 0x3322 <vDisplayWriteStringAtPos>
    2816:	8d b7       	in	r24, 0x3d	; 61
    2818:	9e b7       	in	r25, 0x3e	; 62
    281a:	08 96       	adiw	r24, 0x08	; 8
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(2,0,"Pi: %s", Pi);
    2820:	ce 01       	movw	r24, r28
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	9f 93       	push	r25
    2826:	8f 93       	push	r24
    2828:	8c e2       	ldi	r24, 0x2C	; 44
    282a:	90 e2       	ldi	r25, 0x20	; 32
    282c:	89 2f       	mov	r24, r25
    282e:	8f 93       	push	r24
    2830:	8c e2       	ldi	r24, 0x2C	; 44
    2832:	90 e2       	ldi	r25, 0x20	; 32
    2834:	8f 93       	push	r24
    2836:	1f 92       	push	r1
    2838:	1f 92       	push	r1
    283a:	1f 92       	push	r1
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	8f 93       	push	r24
    2840:	0e 94 91 19 	call	0x3322	; 0x3322 <vDisplayWriteStringAtPos>
    2844:	ed b7       	in	r30, 0x3d	; 61
    2846:	fe b7       	in	r31, 0x3e	; 62
    2848:	38 96       	adiw	r30, 0x08	; 8
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(3,0,"Zeit: xxxxxxms");
    284e:	83 e3       	ldi	r24, 0x33	; 51
    2850:	90 e2       	ldi	r25, 0x20	; 32
    2852:	89 2f       	mov	r24, r25
    2854:	8f 93       	push	r24
    2856:	83 e3       	ldi	r24, 0x33	; 51
    2858:	90 e2       	ldi	r25, 0x20	; 32
    285a:	8f 93       	push	r24
    285c:	1f 92       	push	r1
    285e:	1f 92       	push	r1
    2860:	1f 92       	push	r1
    2862:	83 e0       	ldi	r24, 0x03	; 3
    2864:	8f 93       	push	r24
    2866:	0e 94 91 19 	call	0x3322	; 0x3322 <vDisplayWriteStringAtPos>
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
		xEventGroupSetBits(egPiStates, FINISHCALC);
    2876:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    287a:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    287e:	48 e0       	ldi	r20, 0x08	; 8
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
		
		vTaskDelay(500 / portTICK_RATE_MS);
    288a:	64 ef       	ldi	r22, 0xF4	; 244
    288c:	71 e0       	ldi	r23, 0x01	; 1
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
	}
    2896:	40 cf       	rjmp	.-384    	; 0x2718 <vGUI+0x3a>

00002898 <vButton>:
}

void vButton(void *pvParameters) {
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	1f 92       	push	r1
    289e:	1f 92       	push	r1
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	9a 83       	std	Y+2, r25	; 0x02
	initButtons();
    28a8:	0e 94 ca 01 	call	0x394	; 0x394 <initButtons>
	
	while (1) {
		updateButtons();
    28ac:	0e 94 e6 01 	call	0x3cc	; 0x3cc <updateButtons>
		if (getButtonPress(BUTTON1) == SHORT_PRESSED) {
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>
    28b6:	81 30       	cpi	r24, 0x01	; 1
    28b8:	a1 f4       	brne	.+40     	; 0x28e2 <vButton+0x4a>
			xEventGroupSetBits(egPiStates, STARTCALC);
    28ba:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    28be:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	50 e0       	ldi	r21, 0x00	; 0
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
			xEventGroupClearBits(egPiStates, STOPCALC);
    28ce:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    28d2:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    28d6:	42 e0       	ldi	r20, 0x02	; 2
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	70 e0       	ldi	r23, 0x00	; 0
    28de:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
		}

		if (getButtonPress(BUTTON2) == SHORT_PRESSED) {
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>
    28e8:	81 30       	cpi	r24, 0x01	; 1
    28ea:	a1 f4       	brne	.+40     	; 0x2914 <vButton+0x7c>
			xEventGroupSetBits(egPiStates, STOPCALC);
    28ec:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    28f0:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    28f4:	42 e0       	ldi	r20, 0x02	; 2
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	60 e0       	ldi	r22, 0x00	; 0
    28fa:	70 e0       	ldi	r23, 0x00	; 0
    28fc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
			xEventGroupClearBits(egPiStates, STARTCALC);
    2900:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    2904:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    2908:	41 e0       	ldi	r20, 0x01	; 1
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	70 e0       	ldi	r23, 0x00	; 0
    2910:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
		}
		
		if (getButtonPress(BUTTON3) == SHORT_PRESSED) {
    2914:	82 e0       	ldi	r24, 0x02	; 2
    2916:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>
    291a:	81 30       	cpi	r24, 0x01	; 1
    291c:	51 f4       	brne	.+20     	; 0x2932 <vButton+0x9a>
			xEventGroupSetBits(egPiStates, RESETCALC);
    291e:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    2922:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    2926:	44 e0       	ldi	r20, 0x04	; 4
    2928:	50 e0       	ldi	r21, 0x00	; 0
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
			
		}		

		if (getButtonPress(BUTTON4) == SHORT_PRESSED) {
    2932:	83 e0       	ldi	r24, 0x03	; 3
    2934:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>

		}

		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    2938:	6a e0       	ldi	r22, 0x0A	; 10
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
	}
    2944:	b3 cf       	rjmp	.-154    	; 0x28ac <vButton+0x14>

00002946 <vCalc>:
}

void vCalc(void *pvParameters) {
    2946:	cf 92       	push	r12
    2948:	df 92       	push	r13
    294a:	ef 92       	push	r14
    294c:	ff 92       	push	r15
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	00 d0       	rcall	.+0      	; 0x2954 <vCalc+0xe>
    2954:	1f 92       	push	r1
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	8b 83       	std	Y+3, r24	; 0x03
    295c:	9c 83       	std	Y+4, r25	; 0x04
	dPi4 = 1;
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	a0 e8       	ldi	r26, 0x80	; 128
    2964:	bf e3       	ldi	r27, 0x3F	; 63
    2966:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <dPi4>
    296a:	90 93 e0 2c 	sts	0x2CE0, r25	; 0x802ce0 <dPi4+0x1>
    296e:	a0 93 e1 2c 	sts	0x2CE1, r26	; 0x802ce1 <dPi4+0x2>
    2972:	b0 93 e2 2c 	sts	0x2CE2, r27	; 0x802ce2 <dPi4+0x3>
	uint16_t calcstate = 0x0000;
    2976:	19 82       	std	Y+1, r1	; 0x01
    2978:	1a 82       	std	Y+2, r1	; 0x02
	
	for(i = 0;i<ITERATIONS;i++) {
    297a:	10 92 e5 2c 	sts	0x2CE5, r1	; 0x802ce5 <i>
    297e:	10 92 e6 2c 	sts	0x2CE6, r1	; 0x802ce6 <i+0x1>
    2982:	10 92 e7 2c 	sts	0x2CE7, r1	; 0x802ce7 <i+0x2>
    2986:	10 92 e8 2c 	sts	0x2CE8, r1	; 0x802ce8 <i+0x3>
    298a:	c0 c0       	rjmp	.+384    	; 0x2b0c <vCalc+0x1c6>
		
		calcstate = xEventGroupGetBits(egPiStates);
    298c:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    2990:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	ba 01       	movw	r22, r20
    299a:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	89 83       	std	Y+1, r24	; 0x01
    29a4:	9a 83       	std	Y+2, r25	; 0x02
	//	xEventGroupWaitBits(egPiStates, STARTCALC, pdFALSE, pdFALSE, portMAX_DELAY);
		
		if (calcstate & FINISHCALC) {
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	88 70       	andi	r24, 0x08	; 8
    29ac:	99 27       	eor	r25, r25
    29ae:	89 2b       	or	r24, r25
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <vCalc+0x6e>
    29b2:	6f c0       	rjmp	.+222    	; 0x2a92 <vCalc+0x14c>
			if (calcstate & STARTCALC) {
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	81 70       	andi	r24, 0x01	; 1
    29ba:	99 27       	eor	r25, r25
    29bc:	89 2b       	or	r24, r25
    29be:	09 f4       	brne	.+2      	; 0x29c2 <vCalc+0x7c>
    29c0:	68 c0       	rjmp	.+208    	; 0x2a92 <vCalc+0x14c>
				dPi4 = dPi4 - (1.0/(3+4*i)) + (1.0/(5+4*i));
    29c2:	c0 90 df 2c 	lds	r12, 0x2CDF	; 0x802cdf <dPi4>
    29c6:	d0 90 e0 2c 	lds	r13, 0x2CE0	; 0x802ce0 <dPi4+0x1>
    29ca:	e0 90 e1 2c 	lds	r14, 0x2CE1	; 0x802ce1 <dPi4+0x2>
    29ce:	f0 90 e2 2c 	lds	r15, 0x2CE2	; 0x802ce2 <dPi4+0x3>
    29d2:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <i>
    29d6:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <i+0x1>
    29da:	a0 91 e7 2c 	lds	r26, 0x2CE7	; 0x802ce7 <i+0x2>
    29de:	b0 91 e8 2c 	lds	r27, 0x2CE8	; 0x802ce8 <i+0x3>
    29e2:	88 0f       	add	r24, r24
    29e4:	99 1f       	adc	r25, r25
    29e6:	aa 1f       	adc	r26, r26
    29e8:	bb 1f       	adc	r27, r27
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	aa 1f       	adc	r26, r26
    29f0:	bb 1f       	adc	r27, r27
    29f2:	03 96       	adiw	r24, 0x03	; 3
    29f4:	a1 1d       	adc	r26, r1
    29f6:	b1 1d       	adc	r27, r1
    29f8:	bc 01       	movw	r22, r24
    29fa:	cd 01       	movw	r24, r26
    29fc:	0e 94 06 20 	call	0x400c	; 0x400c <__floatsisf>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9c 01       	movw	r18, r24
    2a06:	ad 01       	movw	r20, r26
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	80 e8       	ldi	r24, 0x80	; 128
    2a0e:	9f e3       	ldi	r25, 0x3F	; 63
    2a10:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__divsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9c 01       	movw	r18, r24
    2a1a:	ad 01       	movw	r20, r26
    2a1c:	c7 01       	movw	r24, r14
    2a1e:	b6 01       	movw	r22, r12
    2a20:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__subsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	6c 01       	movw	r12, r24
    2a2a:	7d 01       	movw	r14, r26
    2a2c:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <i>
    2a30:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <i+0x1>
    2a34:	a0 91 e7 2c 	lds	r26, 0x2CE7	; 0x802ce7 <i+0x2>
    2a38:	b0 91 e8 2c 	lds	r27, 0x2CE8	; 0x802ce8 <i+0x3>
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	aa 1f       	adc	r26, r26
    2a42:	bb 1f       	adc	r27, r27
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	aa 1f       	adc	r26, r26
    2a4a:	bb 1f       	adc	r27, r27
    2a4c:	05 96       	adiw	r24, 0x05	; 5
    2a4e:	a1 1d       	adc	r26, r1
    2a50:	b1 1d       	adc	r27, r1
    2a52:	bc 01       	movw	r22, r24
    2a54:	cd 01       	movw	r24, r26
    2a56:	0e 94 06 20 	call	0x400c	; 0x400c <__floatsisf>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	9c 01       	movw	r18, r24
    2a60:	ad 01       	movw	r20, r26
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	80 e8       	ldi	r24, 0x80	; 128
    2a68:	9f e3       	ldi	r25, 0x3F	; 63
    2a6a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__divsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9c 01       	movw	r18, r24
    2a74:	ad 01       	movw	r20, r26
    2a76:	c7 01       	movw	r24, r14
    2a78:	b6 01       	movw	r22, r12
    2a7a:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <__addsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <dPi4>
    2a86:	90 93 e0 2c 	sts	0x2CE0, r25	; 0x802ce0 <dPi4+0x1>
    2a8a:	a0 93 e1 2c 	sts	0x2CE1, r26	; 0x802ce1 <dPi4+0x2>
    2a8e:	b0 93 e2 2c 	sts	0x2CE2, r27	; 0x802ce2 <dPi4+0x3>
			}
		}
		if (calcstate & STOPCALC) {
			// do nothing
		}
		if (calcstate & RESETCALC) {
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	84 70       	andi	r24, 0x04	; 4
    2a98:	99 27       	eor	r25, r25
    2a9a:	89 2b       	or	r24, r25
    2a9c:	f1 f0       	breq	.+60     	; 0x2ada <vCalc+0x194>
			dPi4 = 1;
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 e8       	ldi	r26, 0x80	; 128
    2aa4:	bf e3       	ldi	r27, 0x3F	; 63
    2aa6:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <dPi4>
    2aaa:	90 93 e0 2c 	sts	0x2CE0, r25	; 0x802ce0 <dPi4+0x1>
    2aae:	a0 93 e1 2c 	sts	0x2CE1, r26	; 0x802ce1 <dPi4+0x2>
    2ab2:	b0 93 e2 2c 	sts	0x2CE2, r27	; 0x802ce2 <dPi4+0x3>
			i = 0;
    2ab6:	10 92 e5 2c 	sts	0x2CE5, r1	; 0x802ce5 <i>
    2aba:	10 92 e6 2c 	sts	0x2CE6, r1	; 0x802ce6 <i+0x1>
    2abe:	10 92 e7 2c 	sts	0x2CE7, r1	; 0x802ce7 <i+0x2>
    2ac2:	10 92 e8 2c 	sts	0x2CE8, r1	; 0x802ce8 <i+0x3>
			xEventGroupClearBits(egPiStates, RESETCALC);
    2ac6:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    2aca:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    2ace:	44 e0       	ldi	r20, 0x04	; 4
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	70 e0       	ldi	r23, 0x00	; 0
    2ad6:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
		 
		
		
		
		
		vTaskDelay(1/portTICK_RATE_MS);
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>

void vCalc(void *pvParameters) {
	dPi4 = 1;
	uint16_t calcstate = 0x0000;
	
	for(i = 0;i<ITERATIONS;i++) {
    2ae6:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <i>
    2aea:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <i+0x1>
    2aee:	a0 91 e7 2c 	lds	r26, 0x2CE7	; 0x802ce7 <i+0x2>
    2af2:	b0 91 e8 2c 	lds	r27, 0x2CE8	; 0x802ce8 <i+0x3>
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	a1 1d       	adc	r26, r1
    2afa:	b1 1d       	adc	r27, r1
    2afc:	80 93 e5 2c 	sts	0x2CE5, r24	; 0x802ce5 <i>
    2b00:	90 93 e6 2c 	sts	0x2CE6, r25	; 0x802ce6 <i+0x1>
    2b04:	a0 93 e7 2c 	sts	0x2CE7, r26	; 0x802ce7 <i+0x2>
    2b08:	b0 93 e8 2c 	sts	0x2CE8, r27	; 0x802ce8 <i+0x3>
    2b0c:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <i>
    2b10:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <i+0x1>
    2b14:	a0 91 e7 2c 	lds	r26, 0x2CE7	; 0x802ce7 <i+0x2>
    2b18:	b0 91 e8 2c 	lds	r27, 0x2CE8	; 0x802ce8 <i+0x3>
    2b1c:	80 34       	cpi	r24, 0x40	; 64
    2b1e:	92 44       	sbci	r25, 0x42	; 66
    2b20:	af 40       	sbci	r26, 0x0F	; 15
    2b22:	b1 05       	cpc	r27, r1
    2b24:	0c f4       	brge	.+2      	; 0x2b28 <vCalc+0x1e2>
    2b26:	32 cf       	rjmp	.-412    	; 0x298c <vCalc+0x46>
		
		
		vTaskDelay(1/portTICK_RATE_MS);
	}
	
}
    2b28:	00 00       	nop
    2b2a:	24 96       	adiw	r28, 0x04	; 4
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	ff 90       	pop	r15
    2b36:	ef 90       	pop	r14
    2b38:	df 90       	pop	r13
    2b3a:	cf 90       	pop	r12
    2b3c:	08 95       	ret

00002b3e <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    2b3e:	1f 92       	push	r1
    2b40:	0f 92       	push	r0
    2b42:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2b46:	0f 92       	push	r0
    2b48:	11 24       	eor	r1, r1
    2b4a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b4e:	0f 92       	push	r0
    2b50:	2f 93       	push	r18
    2b52:	3f 93       	push	r19
    2b54:	4f 93       	push	r20
    2b56:	5f 93       	push	r21
    2b58:	6f 93       	push	r22
    2b5a:	7f 93       	push	r23
    2b5c:	8f 93       	push	r24
    2b5e:	9f 93       	push	r25
    2b60:	af 93       	push	r26
    2b62:	bf 93       	push	r27
    2b64:	ef 93       	push	r30
    2b66:	ff 93       	push	r31
    2b68:	cf 93       	push	r28
    2b6a:	df 93       	push	r29
    2b6c:	1f 92       	push	r1
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	19 82       	std	Y+1, r1	; 0x01
    2b74:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egDisplayTiming>
    2b78:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egDisplayTiming+0x1>
    2b7c:	9e 01       	movw	r18, r28
    2b7e:	2f 5f       	subi	r18, 0xFF	; 255
    2b80:	3f 4f       	sbci	r19, 0xFF	; 255
    2b82:	41 e0       	ldi	r20, 0x01	; 1
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	60 e0       	ldi	r22, 0x00	; 0
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <xEventGroupSetBitsFromISR>
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	9b e0       	ldi	r25, 0x0B	; 11
    2b94:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	9b e0       	ldi	r25, 0x0B	; 11
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	16 82       	std	Z+6, r1	; 0x06
    2ba0:	00 00       	nop
    2ba2:	0f 90       	pop	r0
    2ba4:	df 91       	pop	r29
    2ba6:	cf 91       	pop	r28
    2ba8:	ff 91       	pop	r31
    2baa:	ef 91       	pop	r30
    2bac:	bf 91       	pop	r27
    2bae:	af 91       	pop	r26
    2bb0:	9f 91       	pop	r25
    2bb2:	8f 91       	pop	r24
    2bb4:	7f 91       	pop	r23
    2bb6:	6f 91       	pop	r22
    2bb8:	5f 91       	pop	r21
    2bba:	4f 91       	pop	r20
    2bbc:	3f 91       	pop	r19
    2bbe:	2f 91       	pop	r18
    2bc0:	0f 90       	pop	r0
    2bc2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2bc6:	0f 90       	pop	r0
    2bc8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2bcc:	0f 90       	pop	r0
    2bce:	1f 90       	pop	r1
    2bd0:	18 95       	reti

00002bd2 <delayUS>:
    2bd2:	cf 92       	push	r12
    2bd4:	df 92       	push	r13
    2bd6:	ef 92       	push	r14
    2bd8:	ff 92       	push	r15
    2bda:	0f 93       	push	r16
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <delayUS+0x10>
    2be2:	1f 92       	push	r1
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	69 83       	std	Y+1, r22	; 0x01
    2bea:	7a 83       	std	Y+2, r23	; 0x02
    2bec:	8b 83       	std	Y+3, r24	; 0x03
    2bee:	9c 83       	std	Y+4, r25	; 0x04
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	ab 81       	ldd	r26, Y+3	; 0x03
    2bf6:	bc 81       	ldd	r27, Y+4	; 0x04
    2bf8:	02 97       	sbiw	r24, 0x02	; 2
    2bfa:	a1 05       	cpc	r26, r1
    2bfc:	b1 05       	cpc	r27, r1
    2bfe:	40 f4       	brcc	.+16     	; 0x2c10 <delayUS+0x3e>
    2c00:	82 e0       	ldi	r24, 0x02	; 2
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	a0 e0       	ldi	r26, 0x00	; 0
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	9a 83       	std	Y+2, r25	; 0x02
    2c0c:	ab 83       	std	Y+3, r26	; 0x03
    2c0e:	bc 83       	std	Y+4, r27	; 0x04
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	9b e0       	ldi	r25, 0x0B	; 11
    2c14:	21 e0       	ldi	r18, 0x01	; 1
    2c16:	fc 01       	movw	r30, r24
    2c18:	26 83       	std	Z+6, r18	; 0x06
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	9b e0       	ldi	r25, 0x0B	; 11
    2c1e:	fc 01       	movw	r30, r24
    2c20:	10 a2       	std	Z+32, r1	; 0x20
    2c22:	11 a2       	std	Z+33, r1	; 0x21
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	9b e0       	ldi	r25, 0x0B	; 11
    2c2a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <TC0_ConfigWGM>
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	9a 81       	ldd	r25, Y+2	; 0x02
    2c32:	ab 81       	ldd	r26, Y+3	; 0x03
    2c34:	bc 81       	ldd	r27, Y+4	; 0x04
    2c36:	8e 3f       	cpi	r24, 0xFE	; 254
    2c38:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3a:	a1 05       	cpc	r26, r1
    2c3c:	b1 05       	cpc	r27, r1
    2c3e:	98 f4       	brcc	.+38     	; 0x2c66 <delayUS+0x94>
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	3b e0       	ldi	r19, 0x0B	; 11
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	9a 81       	ldd	r25, Y+2	; 0x02
    2c48:	ab 81       	ldd	r26, Y+3	; 0x03
    2c4a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c4c:	b6 95       	lsr	r27
    2c4e:	a7 95       	ror	r26
    2c50:	97 95       	ror	r25
    2c52:	87 95       	ror	r24
    2c54:	f9 01       	movw	r30, r18
    2c56:	86 a3       	std	Z+38, r24	; 0x26
    2c58:	97 a3       	std	Z+39, r25	; 0x27
    2c5a:	65 e0       	ldi	r22, 0x05	; 5
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	9b e0       	ldi	r25, 0x0B	; 11
    2c60:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2c64:	1f c0       	rjmp	.+62     	; 0x2ca4 <delayUS+0xd2>
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6a:	ab 81       	ldd	r26, Y+3	; 0x03
    2c6c:	bc 81       	ldd	r27, Y+4	; 0x04
    2c6e:	80 34       	cpi	r24, 0x40	; 64
    2c70:	92 44       	sbci	r25, 0x42	; 66
    2c72:	af 40       	sbci	r26, 0x0F	; 15
    2c74:	b1 05       	cpc	r27, r1
    2c76:	b0 f4       	brcc	.+44     	; 0x2ca4 <delayUS+0xd2>
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	3b e0       	ldi	r19, 0x0B	; 11
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c80:	ab 81       	ldd	r26, Y+3	; 0x03
    2c82:	bc 81       	ldd	r27, Y+4	; 0x04
    2c84:	68 94       	set
    2c86:	14 f8       	bld	r1, 4
    2c88:	b6 95       	lsr	r27
    2c8a:	a7 95       	ror	r26
    2c8c:	97 95       	ror	r25
    2c8e:	87 95       	ror	r24
    2c90:	16 94       	lsr	r1
    2c92:	d1 f7       	brne	.-12     	; 0x2c88 <delayUS+0xb6>
    2c94:	f9 01       	movw	r30, r18
    2c96:	86 a3       	std	Z+38, r24	; 0x26
    2c98:	97 a3       	std	Z+39, r25	; 0x27
    2c9a:	67 e0       	ldi	r22, 0x07	; 7
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	9b e0       	ldi	r25, 0x0B	; 11
    2ca0:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2ca4:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egDisplayTiming>
    2ca8:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egDisplayTiming+0x1>
    2cac:	0f 2e       	mov	r0, r31
    2cae:	f4 ef       	ldi	r31, 0xF4	; 244
    2cb0:	cf 2e       	mov	r12, r31
    2cb2:	dd 24       	eor	r13, r13
    2cb4:	d3 94       	inc	r13
    2cb6:	e1 2c       	mov	r14, r1
    2cb8:	f1 2c       	mov	r15, r1
    2cba:	f0 2d       	mov	r31, r0
    2cbc:	00 e0       	ldi	r16, 0x00	; 0
    2cbe:	21 e0       	ldi	r18, 0x01	; 1
    2cc0:	41 e0       	ldi	r20, 0x01	; 1
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	60 e0       	ldi	r22, 0x00	; 0
    2cc6:	70 e0       	ldi	r23, 0x00	; 0
    2cc8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <xEventGroupWaitBits>
    2ccc:	00 00       	nop
    2cce:	24 96       	adiw	r28, 0x04	; 4
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	ef 90       	pop	r14
    2cde:	df 90       	pop	r13
    2ce0:	cf 90       	pop	r12
    2ce2:	08 95       	ret

00002ce4 <setPort>:
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	1f 92       	push	r1
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	8f 70       	andi	r24, 0x0F	; 15
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	82 95       	swap	r24
    2cfa:	80 7f       	andi	r24, 0xF0	; 240
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	96 e0       	ldi	r25, 0x06	; 6
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	36 e0       	ldi	r19, 0x06	; 6
    2d06:	f9 01       	movw	r30, r18
    2d08:	34 81       	ldd	r19, Z+4	; 0x04
    2d0a:	29 81       	ldd	r18, Y+1	; 0x01
    2d0c:	2f 60       	ori	r18, 0x0F	; 15
    2d0e:	23 23       	and	r18, r19
    2d10:	fc 01       	movw	r30, r24
    2d12:	24 83       	std	Z+4, r18	; 0x04
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	96 e0       	ldi	r25, 0x06	; 6
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	36 e0       	ldi	r19, 0x06	; 6
    2d1c:	f9 01       	movw	r30, r18
    2d1e:	34 81       	ldd	r19, Z+4	; 0x04
    2d20:	29 81       	ldd	r18, Y+1	; 0x01
    2d22:	23 2b       	or	r18, r19
    2d24:	fc 01       	movw	r30, r24
    2d26:	24 83       	std	Z+4, r18	; 0x04
    2d28:	00 00       	nop
    2d2a:	0f 90       	pop	r0
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	08 95       	ret

00002d32 <setRS>:
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	1f 92       	push	r1
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	89 83       	std	Y+1, r24	; 0x01
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	88 23       	and	r24, r24
    2d42:	31 f0       	breq	.+12     	; 0x2d50 <setRS+0x1e>
    2d44:	80 e6       	ldi	r24, 0x60	; 96
    2d46:	96 e0       	ldi	r25, 0x06	; 6
    2d48:	21 e0       	ldi	r18, 0x01	; 1
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	25 83       	std	Z+5, r18	; 0x05
    2d4e:	05 c0       	rjmp	.+10     	; 0x2d5a <setRS+0x28>
    2d50:	80 e6       	ldi	r24, 0x60	; 96
    2d52:	96 e0       	ldi	r25, 0x06	; 6
    2d54:	21 e0       	ldi	r18, 0x01	; 1
    2d56:	fc 01       	movw	r30, r24
    2d58:	26 83       	std	Z+6, r18	; 0x06
    2d5a:	00 00       	nop
    2d5c:	0f 90       	pop	r0
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	08 95       	ret

00002d64 <setRW>:
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	1f 92       	push	r1
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	89 83       	std	Y+1, r24	; 0x01
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	88 23       	and	r24, r24
    2d74:	31 f0       	breq	.+12     	; 0x2d82 <setRW+0x1e>
    2d76:	80 e6       	ldi	r24, 0x60	; 96
    2d78:	96 e0       	ldi	r25, 0x06	; 6
    2d7a:	22 e0       	ldi	r18, 0x02	; 2
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	25 83       	std	Z+5, r18	; 0x05
    2d80:	05 c0       	rjmp	.+10     	; 0x2d8c <setRW+0x28>
    2d82:	80 e6       	ldi	r24, 0x60	; 96
    2d84:	96 e0       	ldi	r25, 0x06	; 6
    2d86:	22 e0       	ldi	r18, 0x02	; 2
    2d88:	fc 01       	movw	r30, r24
    2d8a:	26 83       	std	Z+6, r18	; 0x06
    2d8c:	00 00       	nop
    2d8e:	0f 90       	pop	r0
    2d90:	df 91       	pop	r29
    2d92:	cf 91       	pop	r28
    2d94:	08 95       	ret

00002d96 <setE>:
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	1f 92       	push	r1
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	89 83       	std	Y+1, r24	; 0x01
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	88 23       	and	r24, r24
    2da6:	31 f0       	breq	.+12     	; 0x2db4 <setE+0x1e>
    2da8:	80 e6       	ldi	r24, 0x60	; 96
    2daa:	96 e0       	ldi	r25, 0x06	; 6
    2dac:	24 e0       	ldi	r18, 0x04	; 4
    2dae:	fc 01       	movw	r30, r24
    2db0:	25 83       	std	Z+5, r18	; 0x05
    2db2:	05 c0       	rjmp	.+10     	; 0x2dbe <setE+0x28>
    2db4:	80 e6       	ldi	r24, 0x60	; 96
    2db6:	96 e0       	ldi	r25, 0x06	; 6
    2db8:	24 e0       	ldi	r18, 0x04	; 4
    2dba:	fc 01       	movw	r30, r24
    2dbc:	26 83       	std	Z+6, r18	; 0x06
    2dbe:	00 00       	nop
    2dc0:	0f 90       	pop	r0
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	08 95       	ret

00002dc8 <Nybble>:
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <setE>
    2dd6:	61 e0       	ldi	r22, 0x01	; 1
    2dd8:	70 e0       	ldi	r23, 0x00	; 0
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <delayUS>
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <setE>
    2de8:	00 00       	nop
    2dea:	df 91       	pop	r29
    2dec:	cf 91       	pop	r28
    2dee:	08 95       	ret

00002df0 <command>:
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	1f 92       	push	r1
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	82 95       	swap	r24
    2e00:	8f 70       	andi	r24, 0x0F	; 15
    2e02:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <setPort>
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	0e 94 99 16 	call	0x2d32	; 0x2d32 <setRS>
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <setRW>
    2e12:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <Nybble>
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	8f 70       	andi	r24, 0x0F	; 15
    2e1a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <setPort>
    2e1e:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <Nybble>
    2e22:	00 00       	nop
    2e24:	0f 90       	pop	r0
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	08 95       	ret

00002e2c <write>:
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	1f 92       	push	r1
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	82 95       	swap	r24
    2e3c:	8f 70       	andi	r24, 0x0F	; 15
    2e3e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <setPort>
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	0e 94 99 16 	call	0x2d32	; 0x2d32 <setRS>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <setRW>
    2e4e:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <Nybble>
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	8f 70       	andi	r24, 0x0F	; 15
    2e56:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <setPort>
    2e5a:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <Nybble>
    2e5e:	00 00       	nop
    2e60:	0f 90       	pop	r0
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	08 95       	ret

00002e68 <vInitDisplay>:
 
 void vInitDisplay() {
    2e68:	ef 92       	push	r14
    2e6a:	ff 92       	push	r15
    2e6c:	0f 93       	push	r16
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	96 e0       	ldi	r25, 0x06	; 6
    2e7a:	20 e1       	ldi	r18, 0x10	; 16
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	96 e0       	ldi	r25, 0x06	; 6
    2e84:	20 e2       	ldi	r18, 0x20	; 32
    2e86:	fc 01       	movw	r30, r24
    2e88:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	96 e0       	ldi	r25, 0x06	; 6
    2e8e:	20 e4       	ldi	r18, 0x40	; 64
    2e90:	fc 01       	movw	r30, r24
    2e92:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	96 e0       	ldi	r25, 0x06	; 6
    2e98:	20 e8       	ldi	r18, 0x80	; 128
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    2e9e:	80 e6       	ldi	r24, 0x60	; 96
    2ea0:	96 e0       	ldi	r25, 0x06	; 6
    2ea2:	21 e0       	ldi	r18, 0x01	; 1
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    2ea8:	80 e6       	ldi	r24, 0x60	; 96
    2eaa:	96 e0       	ldi	r25, 0x06	; 6
    2eac:	22 e0       	ldi	r18, 0x02	; 2
    2eae:	fc 01       	movw	r30, r24
    2eb0:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    2eb2:	80 e6       	ldi	r24, 0x60	; 96
    2eb4:	96 e0       	ldi	r25, 0x06	; 6
    2eb6:	24 e0       	ldi	r18, 0x04	; 4
    2eb8:	fc 01       	movw	r30, r24
    2eba:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	96 e0       	ldi	r25, 0x06	; 6
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	36 e0       	ldi	r19, 0x06	; 6
    2ec4:	f9 01       	movw	r30, r18
    2ec6:	24 81       	ldd	r18, Z+4	; 0x04
    2ec8:	2f 70       	andi	r18, 0x0F	; 15
    2eca:	fc 01       	movw	r30, r24
    2ecc:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    2ece:	80 e6       	ldi	r24, 0x60	; 96
    2ed0:	96 e0       	ldi	r25, 0x06	; 6
    2ed2:	20 e6       	ldi	r18, 0x60	; 96
    2ed4:	36 e0       	ldi	r19, 0x06	; 6
    2ed6:	f9 01       	movw	r30, r18
    2ed8:	24 81       	ldd	r18, Z+4	; 0x04
    2eda:	28 7f       	andi	r18, 0xF8	; 248
    2edc:	fc 01       	movw	r30, r24
    2ede:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	66 e1       	ldi	r22, 0x16	; 22
    2ee4:	88 e0       	ldi	r24, 0x08	; 8
    2ee6:	0e 94 8d 08 	call	0x111a	; 0x111a <xQueueGenericCreate>
    2eea:	80 93 eb 2c 	sts	0x2CEB, r24	; 0x802ceb <displayLineQueue>
    2eee:	90 93 ec 2c 	sts	0x2CEC, r25	; 0x802cec <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    2ef2:	0e 94 66 03 	call	0x6cc	; 0x6cc <xEventGroupCreate>
    2ef6:	80 93 ed 2c 	sts	0x2CED, r24	; 0x802ced <egDisplayTiming>
    2efa:	90 93 ee 2c 	sts	0x2CEE, r25	; 0x802cee <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);	//von Hand auf Prio 2 gestellt
    2efe:	e1 2c       	mov	r14, r1
    2f00:	f1 2c       	mov	r15, r1
    2f02:	02 e0       	ldi	r16, 0x02	; 2
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	4e e5       	ldi	r20, 0x5E	; 94
    2f0a:	51 e0       	ldi	r21, 0x01	; 1
    2f0c:	62 e4       	ldi	r22, 0x42	; 66
    2f0e:	70 e2       	ldi	r23, 0x20	; 32
    2f10:	82 e3       	ldi	r24, 0x32	; 50
    2f12:	98 e1       	ldi	r25, 0x18	; 24
    2f14:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
 }
    2f18:	00 00       	nop
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	0f 91       	pop	r16
    2f20:	ff 90       	pop	r15
    2f22:	ef 90       	pop	r14
    2f24:	08 95       	ret

00002f26 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <_displaySetPos+0x6>
    2f2c:	1f 92       	push	r1
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	89 83       	std	Y+1, r24	; 0x01
    2f34:	9a 83       	std	Y+2, r25	; 0x02
    2f36:	6b 83       	std	Y+3, r22	; 0x03
    2f38:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3e:	81 30       	cpi	r24, 0x01	; 1
    2f40:	91 05       	cpc	r25, r1
    2f42:	89 f0       	breq	.+34     	; 0x2f66 <_displaySetPos+0x40>
    2f44:	82 30       	cpi	r24, 0x02	; 2
    2f46:	91 05       	cpc	r25, r1
    2f48:	1c f4       	brge	.+6      	; 0x2f50 <_displaySetPos+0x2a>
    2f4a:	89 2b       	or	r24, r25
    2f4c:	39 f0       	breq	.+14     	; 0x2f5c <_displaySetPos+0x36>
    2f4e:	1a c0       	rjmp	.+52     	; 0x2f84 <_displaySetPos+0x5e>
    2f50:	82 30       	cpi	r24, 0x02	; 2
    2f52:	91 05       	cpc	r25, r1
    2f54:	69 f0       	breq	.+26     	; 0x2f70 <_displaySetPos+0x4a>
    2f56:	03 97       	sbiw	r24, 0x03	; 3
    2f58:	81 f0       	breq	.+32     	; 0x2f7a <_displaySetPos+0x54>
    2f5a:	14 c0       	rjmp	.+40     	; 0x2f84 <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	80 58       	subi	r24, 0x80	; 128
    2f60:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <command>
		 break;
    2f64:	0f c0       	rjmp	.+30     	; 0x2f84 <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    2f66:	8b 81       	ldd	r24, Y+3	; 0x03
    2f68:	80 54       	subi	r24, 0x40	; 64
    2f6a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <command>
		 break;
    2f6e:	0a c0       	rjmp	.+20     	; 0x2f84 <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    2f70:	8b 81       	ldd	r24, Y+3	; 0x03
    2f72:	8c 56       	subi	r24, 0x6C	; 108
    2f74:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <command>
		 break;
    2f78:	05 c0       	rjmp	.+10     	; 0x2f84 <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    2f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7c:	8c 52       	subi	r24, 0x2C	; 44
    2f7e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <command>
		 break;
    2f82:	00 00       	nop
	 }
	 delayUS(39);
    2f84:	67 e2       	ldi	r22, 0x27	; 39
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <delayUS>
 }
    2f90:	00 00       	nop
    2f92:	24 96       	adiw	r28, 0x04	; 4
    2f94:	cd bf       	out	0x3d, r28	; 61
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	08 95       	ret

00002f9e <_displayWriteChar>:

 void _displayWriteChar(char c) {
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	1f 92       	push	r1
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <write>
	 delayUS(43);
    2fb0:	6b e2       	ldi	r22, 0x2B	; 43
    2fb2:	70 e0       	ldi	r23, 0x00	; 0
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <delayUS>
 }
    2fbc:	00 00       	nop
    2fbe:	0f 90       	pop	r0
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	08 95       	ret

00002fc6 <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    2fc6:	cf 93       	push	r28
    2fc8:	df 93       	push	r29
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <_displayWriteString+0x6>
    2fcc:	1f 92       	push	r1
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
    2fd4:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    2fd6:	19 82       	std	Y+1, r1	; 0x01
    2fd8:	1a 82       	std	Y+2, r1	; 0x02
    2fda:	19 c0       	rjmp	.+50     	; 0x300e <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe0:	2b 81       	ldd	r18, Y+3	; 0x03
    2fe2:	3c 81       	ldd	r19, Y+4	; 0x04
    2fe4:	82 0f       	add	r24, r18
    2fe6:	93 1f       	adc	r25, r19
    2fe8:	fc 01       	movw	r30, r24
    2fea:	80 81       	ld	r24, Z
    2fec:	88 23       	and	r24, r24
    2fee:	a1 f0       	breq	.+40     	; 0x3018 <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ff6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ff8:	82 0f       	add	r24, r18
    2ffa:	93 1f       	adc	r25, r19
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	80 81       	ld	r24, Z
    3000:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	9a 81       	ldd	r25, Y+2	; 0x02
    3008:	01 96       	adiw	r24, 0x01	; 1
    300a:	89 83       	std	Y+1, r24	; 0x01
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	9a 81       	ldd	r25, Y+2	; 0x02
    3012:	44 97       	sbiw	r24, 0x14	; 20
    3014:	1c f3       	brlt	.-58     	; 0x2fdc <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    3016:	01 c0       	rjmp	.+2      	; 0x301a <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    3018:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    301a:	00 00       	nop
    301c:	24 96       	adiw	r28, 0x04	; 4
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	df 91       	pop	r29
    3024:	cf 91       	pop	r28
    3026:	08 95       	ret

00003028 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    3028:	cf 93       	push	r28
    302a:	df 93       	push	r29
    302c:	00 d0       	rcall	.+0      	; 0x302e <_displayWriteStringAtPos+0x6>
    302e:	00 d0       	rcall	.+0      	; 0x3030 <_displayWriteStringAtPos+0x8>
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	9a 83       	std	Y+2, r25	; 0x02
    3038:	6b 83       	std	Y+3, r22	; 0x03
    303a:	7c 83       	std	Y+4, r23	; 0x04
    303c:	4d 83       	std	Y+5, r20	; 0x05
    303e:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    3040:	2b 81       	ldd	r18, Y+3	; 0x03
    3042:	3c 81       	ldd	r19, Y+4	; 0x04
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	9a 81       	ldd	r25, Y+2	; 0x02
    3048:	b9 01       	movw	r22, r18
    304a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <_displaySetPos>
	 _displayWriteString(s);
    304e:	8d 81       	ldd	r24, Y+5	; 0x05
    3050:	9e 81       	ldd	r25, Y+6	; 0x06
    3052:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <_displayWriteString>
 }
    3056:	00 00       	nop
    3058:	26 96       	adiw	r28, 0x06	; 6
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	08 95       	ret

00003064 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	c0 57       	subi	r28, 0x70	; 112
    306e:	d1 09       	sbc	r29, r1
    3070:	cd bf       	out	0x3d, r28	; 61
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	9e 01       	movw	r18, r28
    3076:	21 59       	subi	r18, 0x91	; 145
    3078:	3f 4f       	sbci	r19, 0xFF	; 255
    307a:	f9 01       	movw	r30, r18
    307c:	80 83       	st	Z, r24
    307e:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    3080:	19 82       	std	Y+1, r1	; 0x01
    3082:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    3084:	1b 82       	std	Y+3, r1	; 0x03
    3086:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    3088:	1d 82       	std	Y+5, r1	; 0x05
    308a:	1e 82       	std	Y+6, r1	; 0x06
    308c:	26 c0       	rjmp	.+76     	; 0x30da <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    308e:	1f 82       	std	Y+7, r1	; 0x07
    3090:	18 86       	std	Y+8, r1	; 0x08
    3092:	1a c0       	rjmp	.+52     	; 0x30c8 <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    3094:	2d 81       	ldd	r18, Y+5	; 0x05
    3096:	3e 81       	ldd	r19, Y+6	; 0x06
    3098:	44 e1       	ldi	r20, 0x14	; 20
    309a:	42 9f       	mul	r20, r18
    309c:	c0 01       	movw	r24, r0
    309e:	43 9f       	mul	r20, r19
    30a0:	90 0d       	add	r25, r0
    30a2:	11 24       	eor	r1, r1
    30a4:	9e 01       	movw	r18, r28
    30a6:	2f 5f       	subi	r18, 0xFF	; 255
    30a8:	3f 4f       	sbci	r19, 0xFF	; 255
    30aa:	28 0f       	add	r18, r24
    30ac:	39 1f       	adc	r19, r25
    30ae:	8f 81       	ldd	r24, Y+7	; 0x07
    30b0:	98 85       	ldd	r25, Y+8	; 0x08
    30b2:	82 0f       	add	r24, r18
    30b4:	93 1f       	adc	r25, r19
    30b6:	08 96       	adiw	r24, 0x08	; 8
    30b8:	20 e2       	ldi	r18, 0x20	; 32
    30ba:	fc 01       	movw	r30, r24
    30bc:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    30be:	8f 81       	ldd	r24, Y+7	; 0x07
    30c0:	98 85       	ldd	r25, Y+8	; 0x08
    30c2:	01 96       	adiw	r24, 0x01	; 1
    30c4:	8f 83       	std	Y+7, r24	; 0x07
    30c6:	98 87       	std	Y+8, r25	; 0x08
    30c8:	8f 81       	ldd	r24, Y+7	; 0x07
    30ca:	98 85       	ldd	r25, Y+8	; 0x08
    30cc:	44 97       	sbiw	r24, 0x14	; 20
    30ce:	14 f3       	brlt	.-60     	; 0x3094 <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    30d0:	8d 81       	ldd	r24, Y+5	; 0x05
    30d2:	9e 81       	ldd	r25, Y+6	; 0x06
    30d4:	01 96       	adiw	r24, 0x01	; 1
    30d6:	8d 83       	std	Y+5, r24	; 0x05
    30d8:	9e 83       	std	Y+6, r25	; 0x06
    30da:	8d 81       	ldd	r24, Y+5	; 0x05
    30dc:	9e 81       	ldd	r25, Y+6	; 0x06
    30de:	04 97       	sbiw	r24, 0x04	; 4
    30e0:	b4 f2       	brlt	.-84     	; 0x308e <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    30e2:	60 e4       	ldi	r22, 0x40	; 64
    30e4:	7c e9       	ldi	r23, 0x9C	; 156
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <delayUS>
	 setPort(0x03);
    30ee:	83 e0       	ldi	r24, 0x03	; 3
    30f0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <setPort>
	 delayUS(5000);
    30f4:	68 e8       	ldi	r22, 0x88	; 136
    30f6:	73 e1       	ldi	r23, 0x13	; 19
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <delayUS>
	 Nybble();
    3100:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <Nybble>
	 delayUS(160);
    3104:	60 ea       	ldi	r22, 0xA0	; 160
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <delayUS>
	 Nybble();
    3110:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <Nybble>
	 delayUS(160);
    3114:	60 ea       	ldi	r22, 0xA0	; 160
    3116:	70 e0       	ldi	r23, 0x00	; 0
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <delayUS>
	 Nybble();
    3120:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <Nybble>
	 delayUS(160);
    3124:	60 ea       	ldi	r22, 0xA0	; 160
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <delayUS>
	 setPort(0x02);
    3130:	82 e0       	ldi	r24, 0x02	; 2
    3132:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <setPort>
	 Nybble();
    3136:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <Nybble>
	 command(0x28);
    313a:	88 e2       	ldi	r24, 0x28	; 40
    313c:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <command>
	 command(0x10);
    3140:	80 e1       	ldi	r24, 0x10	; 16
    3142:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <command>
	 command(0x0C); //Cursor and Blinking off
    3146:	8c e0       	ldi	r24, 0x0C	; 12
    3148:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <command>
	 command(0x06);
    314c:	86 e0       	ldi	r24, 0x06	; 6
    314e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    3152:	68 ec       	ldi	r22, 0xC8	; 200
    3154:	70 e0       	ldi	r23, 0x00	; 0
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    315e:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egDisplayTiming>
    3162:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egDisplayTiming+0x1>
    3166:	40 e0       	ldi	r20, 0x00	; 0
    3168:	50 e0       	ldi	r21, 0x00	; 0
    316a:	ba 01       	movw	r22, r20
    316c:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	89 2b       	or	r24, r25
    3176:	8a 2b       	or	r24, r26
    3178:	8b 2b       	or	r24, r27
    317a:	09 f4       	brne	.+2      	; 0x317e <vDisplayUpdateTask+0x11a>
    317c:	96 c0       	rjmp	.+300    	; 0x32aa <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    317e:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egDisplayTiming>
    3182:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egDisplayTiming+0x1>
    3186:	42 e0       	ldi	r20, 0x02	; 2
    3188:	50 e0       	ldi	r21, 0x00	; 0
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	70 e0       	ldi	r23, 0x00	; 0
    318e:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    3192:	19 82       	std	Y+1, r1	; 0x01
    3194:	1a 82       	std	Y+2, r1	; 0x02
    3196:	26 c0       	rjmp	.+76     	; 0x31e4 <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    3198:	1b 82       	std	Y+3, r1	; 0x03
    319a:	1c 82       	std	Y+4, r1	; 0x04
    319c:	1a c0       	rjmp	.+52     	; 0x31d2 <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    319e:	29 81       	ldd	r18, Y+1	; 0x01
    31a0:	3a 81       	ldd	r19, Y+2	; 0x02
    31a2:	44 e1       	ldi	r20, 0x14	; 20
    31a4:	42 9f       	mul	r20, r18
    31a6:	c0 01       	movw	r24, r0
    31a8:	43 9f       	mul	r20, r19
    31aa:	90 0d       	add	r25, r0
    31ac:	11 24       	eor	r1, r1
    31ae:	9e 01       	movw	r18, r28
    31b0:	2f 5f       	subi	r18, 0xFF	; 255
    31b2:	3f 4f       	sbci	r19, 0xFF	; 255
    31b4:	28 0f       	add	r18, r24
    31b6:	39 1f       	adc	r19, r25
    31b8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ba:	9c 81       	ldd	r25, Y+4	; 0x04
    31bc:	82 0f       	add	r24, r18
    31be:	93 1f       	adc	r25, r19
    31c0:	08 96       	adiw	r24, 0x08	; 8
    31c2:	20 e2       	ldi	r18, 0x20	; 32
    31c4:	fc 01       	movw	r30, r24
    31c6:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	01 96       	adiw	r24, 0x01	; 1
    31ce:	8b 83       	std	Y+3, r24	; 0x03
    31d0:	9c 83       	std	Y+4, r25	; 0x04
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	9c 81       	ldd	r25, Y+4	; 0x04
    31d6:	44 97       	sbiw	r24, 0x14	; 20
    31d8:	14 f3       	brlt	.-60     	; 0x319e <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	9a 81       	ldd	r25, Y+2	; 0x02
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	89 83       	std	Y+1, r24	; 0x01
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	9a 81       	ldd	r25, Y+2	; 0x02
    31e8:	04 97       	sbiw	r24, 0x04	; 4
    31ea:	b4 f2       	brlt	.-84     	; 0x3198 <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    31ec:	5e c0       	rjmp	.+188    	; 0x32aa <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    31ee:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <displayLineQueue>
    31f2:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <displayLineQueue+0x1>
    31f6:	be 01       	movw	r22, r28
    31f8:	67 5a       	subi	r22, 0xA7	; 167
    31fa:	7f 4f       	sbci	r23, 0xFF	; 255
    31fc:	2f ef       	ldi	r18, 0xFF	; 255
    31fe:	3f ef       	ldi	r19, 0xFF	; 255
    3200:	a9 01       	movw	r20, r18
    3202:	0e 94 a9 09 	call	0x1352	; 0x1352 <xQueueReceive>
    3206:	88 23       	and	r24, r24
    3208:	09 f4       	brne	.+2      	; 0x320c <vDisplayUpdateTask+0x1a8>
    320a:	4f c0       	rjmp	.+158    	; 0x32aa <vDisplayUpdateTask+0x246>
				i=0;			
    320c:	19 82       	std	Y+1, r1	; 0x01
    320e:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    3210:	32 c0       	rjmp	.+100    	; 0x3276 <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    3212:	ce 01       	movw	r24, r28
    3214:	87 5a       	subi	r24, 0xA7	; 167
    3216:	9f 4f       	sbci	r25, 0xFF	; 255
    3218:	fc 01       	movw	r30, r24
    321a:	80 81       	ld	r24, Z
    321c:	48 2f       	mov	r20, r24
    321e:	50 e0       	ldi	r21, 0x00	; 0
    3220:	ce 01       	movw	r24, r28
    3222:	87 5a       	subi	r24, 0xA7	; 167
    3224:	9f 4f       	sbci	r25, 0xFF	; 255
    3226:	fc 01       	movw	r30, r24
    3228:	81 81       	ldd	r24, Z+1	; 0x01
    322a:	28 2f       	mov	r18, r24
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	9a 81       	ldd	r25, Y+2	; 0x02
    3232:	82 0f       	add	r24, r18
    3234:	93 1f       	adc	r25, r19
    3236:	be 01       	movw	r22, r28
    3238:	67 5a       	subi	r22, 0xA7	; 167
    323a:	7f 4f       	sbci	r23, 0xFF	; 255
    323c:	29 81       	ldd	r18, Y+1	; 0x01
    323e:	3a 81       	ldd	r19, Y+2	; 0x02
    3240:	26 0f       	add	r18, r22
    3242:	37 1f       	adc	r19, r23
    3244:	2e 5f       	subi	r18, 0xFE	; 254
    3246:	3f 4f       	sbci	r19, 0xFF	; 255
    3248:	f9 01       	movw	r30, r18
    324a:	60 81       	ld	r22, Z
    324c:	74 e1       	ldi	r23, 0x14	; 20
    324e:	74 9f       	mul	r23, r20
    3250:	90 01       	movw	r18, r0
    3252:	75 9f       	mul	r23, r21
    3254:	30 0d       	add	r19, r0
    3256:	11 24       	eor	r1, r1
    3258:	ae 01       	movw	r20, r28
    325a:	4f 5f       	subi	r20, 0xFF	; 255
    325c:	5f 4f       	sbci	r21, 0xFF	; 255
    325e:	24 0f       	add	r18, r20
    3260:	35 1f       	adc	r19, r21
    3262:	82 0f       	add	r24, r18
    3264:	93 1f       	adc	r25, r19
    3266:	08 96       	adiw	r24, 0x08	; 8
    3268:	fc 01       	movw	r30, r24
    326a:	60 83       	st	Z, r22
					i++;
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	9a 81       	ldd	r25, Y+2	; 0x02
    3270:	01 96       	adiw	r24, 0x01	; 1
    3272:	89 83       	std	Y+1, r24	; 0x01
    3274:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    3276:	ce 01       	movw	r24, r28
    3278:	87 5a       	subi	r24, 0xA7	; 167
    327a:	9f 4f       	sbci	r25, 0xFF	; 255
    327c:	fc 01       	movw	r30, r24
    327e:	81 81       	ldd	r24, Z+1	; 0x01
    3280:	28 2f       	mov	r18, r24
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	9a 81       	ldd	r25, Y+2	; 0x02
    3288:	82 0f       	add	r24, r18
    328a:	93 1f       	adc	r25, r19
    328c:	44 97       	sbiw	r24, 0x14	; 20
    328e:	6c f4       	brge	.+26     	; 0x32aa <vDisplayUpdateTask+0x246>
    3290:	9e 01       	movw	r18, r28
    3292:	27 5a       	subi	r18, 0xA7	; 167
    3294:	3f 4f       	sbci	r19, 0xFF	; 255
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	82 0f       	add	r24, r18
    329c:	93 1f       	adc	r25, r19
    329e:	02 96       	adiw	r24, 0x02	; 2
    32a0:	fc 01       	movw	r30, r24
    32a2:	80 81       	ld	r24, Z
    32a4:	88 23       	and	r24, r24
    32a6:	09 f0       	breq	.+2      	; 0x32aa <vDisplayUpdateTask+0x246>
    32a8:	b4 cf       	rjmp	.-152    	; 0x3212 <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    32aa:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <displayLineQueue>
    32ae:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <displayLineQueue+0x1>
    32b2:	0e 94 4f 0a 	call	0x149e	; 0x149e <uxQueueMessagesWaiting>
    32b6:	88 23       	and	r24, r24
    32b8:	09 f0       	breq	.+2      	; 0x32bc <vDisplayUpdateTask+0x258>
    32ba:	99 cf       	rjmp	.-206    	; 0x31ee <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    32bc:	19 82       	std	Y+1, r1	; 0x01
    32be:	1a 82       	std	Y+2, r1	; 0x02
    32c0:	19 c0       	rjmp	.+50     	; 0x32f4 <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    32c2:	9e 01       	movw	r18, r28
    32c4:	27 5f       	subi	r18, 0xF7	; 247
    32c6:	3f 4f       	sbci	r19, 0xFF	; 255
    32c8:	49 81       	ldd	r20, Y+1	; 0x01
    32ca:	5a 81       	ldd	r21, Y+2	; 0x02
    32cc:	64 e1       	ldi	r22, 0x14	; 20
    32ce:	64 9f       	mul	r22, r20
    32d0:	c0 01       	movw	r24, r0
    32d2:	65 9f       	mul	r22, r21
    32d4:	90 0d       	add	r25, r0
    32d6:	11 24       	eor	r1, r1
    32d8:	28 0f       	add	r18, r24
    32da:	39 1f       	adc	r19, r25
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	9a 81       	ldd	r25, Y+2	; 0x02
    32e0:	a9 01       	movw	r20, r18
    32e2:	60 e0       	ldi	r22, 0x00	; 0
    32e4:	70 e0       	ldi	r23, 0x00	; 0
    32e6:	0e 94 14 18 	call	0x3028	; 0x3028 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	9a 81       	ldd	r25, Y+2	; 0x02
    32ee:	01 96       	adiw	r24, 0x01	; 1
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	9a 83       	std	Y+2, r25	; 0x02
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	9a 81       	ldd	r25, Y+2	; 0x02
    32f8:	04 97       	sbiw	r24, 0x04	; 4
    32fa:	1c f3       	brlt	.-58     	; 0x32c2 <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    32fc:	2a cf       	rjmp	.-428    	; 0x3152 <vDisplayUpdateTask+0xee>

000032fe <vDisplayClear>:
 }
 

void vDisplayClear() {
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    3306:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egDisplayTiming>
    330a:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egDisplayTiming+0x1>
    330e:	42 e0       	ldi	r20, 0x02	; 2
    3310:	50 e0       	ldi	r21, 0x00	; 0
    3312:	60 e0       	ldi	r22, 0x00	; 0
    3314:	70 e0       	ldi	r23, 0x00	; 0
    3316:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
}
    331a:	00 00       	nop
    331c:	df 91       	pop	r29
    331e:	cf 91       	pop	r28
    3320:	08 95       	ret

00003322 <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
    3326:	1f 92       	push	r1
    3328:	1f 92       	push	r1
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    332e:	ce 01       	movw	r24, r28
    3330:	0e 96       	adiw	r24, 0x0e	; 14
    3332:	89 83       	std	Y+1, r24	; 0x01
    3334:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    3336:	29 81       	ldd	r18, Y+1	; 0x01
    3338:	3a 81       	ldd	r19, Y+2	; 0x02
    333a:	4c 85       	ldd	r20, Y+12	; 0x0c
    333c:	5d 85       	ldd	r21, Y+13	; 0x0d
    333e:	6a 85       	ldd	r22, Y+10	; 0x0a
    3340:	7b 85       	ldd	r23, Y+11	; 0x0b
    3342:	88 85       	ldd	r24, Y+8	; 0x08
    3344:	99 85       	ldd	r25, Y+9	; 0x09
    3346:	0e 94 ab 19 	call	0x3356	; 0x3356 <display_vprintf>
	va_end(arg);	
}
    334a:	00 00       	nop
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	df 91       	pop	r29
    3352:	cf 91       	pop	r28
    3354:	08 95       	ret

00003356 <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    3356:	0f 93       	push	r16
    3358:	cf 93       	push	r28
    335a:	df 93       	push	r29
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	ec 97       	sbiw	r28, 0x3c	; 60
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	8d ab       	std	Y+53, r24	; 0x35
    3368:	9e ab       	std	Y+54, r25	; 0x36
    336a:	6f ab       	std	Y+55, r22	; 0x37
    336c:	78 af       	std	Y+56, r23	; 0x38
    336e:	49 af       	std	Y+57, r20	; 0x39
    3370:	5a af       	std	Y+58, r21	; 0x3a
    3372:	2b af       	std	Y+59, r18	; 0x3b
    3374:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    3376:	19 82       	std	Y+1, r1	; 0x01
    3378:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    337a:	1b 82       	std	Y+3, r1	; 0x03
    337c:	1c 82       	std	Y+4, r1	; 0x04
    337e:	0b c0       	rjmp	.+22     	; 0x3396 <display_vprintf+0x40>
		buffer[i] = 0x00;
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	9c 81       	ldd	r25, Y+4	; 0x04
    3384:	8e 54       	subi	r24, 0x4E	; 78
    3386:	93 4d       	sbci	r25, 0xD3	; 211
    3388:	fc 01       	movw	r30, r24
    338a:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    338c:	8b 81       	ldd	r24, Y+3	; 0x03
    338e:	9c 81       	ldd	r25, Y+4	; 0x04
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	8b 83       	std	Y+3, r24	; 0x03
    3394:	9c 83       	std	Y+4, r25	; 0x04
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	9c 81       	ldd	r25, Y+4	; 0x04
    339a:	44 97       	sbiw	r24, 0x14	; 20
    339c:	8c f3       	brlt	.-30     	; 0x3380 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    339e:	1d 82       	std	Y+5, r1	; 0x05
    33a0:	1e 82       	std	Y+6, r1	; 0x06
    33a2:	0b c0       	rjmp	.+22     	; 0x33ba <display_vprintf+0x64>
		str[i] = 0x00;
    33a4:	8d 81       	ldd	r24, Y+5	; 0x05
    33a6:	9e 81       	ldd	r25, Y+6	; 0x06
    33a8:	8a 53       	subi	r24, 0x3A	; 58
    33aa:	93 4d       	sbci	r25, 0xD3	; 211
    33ac:	fc 01       	movw	r30, r24
    33ae:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    33b0:	8d 81       	ldd	r24, Y+5	; 0x05
    33b2:	9e 81       	ldd	r25, Y+6	; 0x06
    33b4:	01 96       	adiw	r24, 0x01	; 1
    33b6:	8d 83       	std	Y+5, r24	; 0x05
    33b8:	9e 83       	std	Y+6, r25	; 0x06
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	9e 81       	ldd	r25, Y+6	; 0x06
    33be:	44 97       	sbiw	r24, 0x14	; 20
    33c0:	8c f3       	brlt	.-30     	; 0x33a4 <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    33c2:	be c1       	rjmp	.+892    	; 0x3740 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    33c4:	8d 89       	ldd	r24, Y+21	; 0x15
    33c6:	85 32       	cpi	r24, 0x25	; 37
    33c8:	09 f0       	breq	.+2      	; 0x33cc <display_vprintf+0x76>
    33ca:	a0 c1       	rjmp	.+832    	; 0x370c <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    33cc:	89 ad       	ldd	r24, Y+57	; 0x39
    33ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    33d0:	9c 01       	movw	r18, r24
    33d2:	2f 5f       	subi	r18, 0xFF	; 255
    33d4:	3f 4f       	sbci	r19, 0xFF	; 255
    33d6:	29 af       	std	Y+57, r18	; 0x39
    33d8:	3a af       	std	Y+58, r19	; 0x3a
    33da:	fc 01       	movw	r30, r24
    33dc:	80 81       	ld	r24, Z
    33de:	8d 8b       	std	Y+21, r24	; 0x15
    33e0:	8d 89       	ldd	r24, Y+21	; 0x15
    33e2:	88 2f       	mov	r24, r24
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	85 36       	cpi	r24, 0x65	; 101
    33e8:	91 05       	cpc	r25, r1
    33ea:	09 f4       	brne	.+2      	; 0x33ee <display_vprintf+0x98>
    33ec:	46 c1       	rjmp	.+652    	; 0x367a <display_vprintf+0x324>
    33ee:	86 36       	cpi	r24, 0x66	; 102
    33f0:	91 05       	cpc	r25, r1
    33f2:	54 f4       	brge	.+20     	; 0x3408 <display_vprintf+0xb2>
    33f4:	83 36       	cpi	r24, 0x63	; 99
    33f6:	91 05       	cpc	r25, r1
    33f8:	01 f1       	breq	.+64     	; 0x343a <display_vprintf+0xe4>
    33fa:	84 36       	cpi	r24, 0x64	; 100
    33fc:	91 05       	cpc	r25, r1
    33fe:	0c f0       	brlt	.+2      	; 0x3402 <display_vprintf+0xac>
    3400:	70 c0       	rjmp	.+224    	; 0x34e2 <display_vprintf+0x18c>
    3402:	85 97       	sbiw	r24, 0x25	; 37
    3404:	69 f0       	breq	.+26     	; 0x3420 <display_vprintf+0xca>
    3406:	9c c1       	rjmp	.+824    	; 0x3740 <display_vprintf+0x3ea>
    3408:	83 37       	cpi	r24, 0x73	; 115
    340a:	91 05       	cpc	r25, r1
    340c:	71 f1       	breq	.+92     	; 0x346a <display_vprintf+0x114>
    340e:	88 37       	cpi	r24, 0x78	; 120
    3410:	91 05       	cpc	r25, r1
    3412:	09 f4       	brne	.+2      	; 0x3416 <display_vprintf+0xc0>
    3414:	a8 c0       	rjmp	.+336    	; 0x3566 <display_vprintf+0x210>
    3416:	86 36       	cpi	r24, 0x66	; 102
    3418:	91 05       	cpc	r25, r1
    341a:	09 f4       	brne	.+2      	; 0x341e <display_vprintf+0xc8>
    341c:	e6 c0       	rjmp	.+460    	; 0x35ea <display_vprintf+0x294>
    341e:	90 c1       	rjmp	.+800    	; 0x3740 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	9a 81       	ldd	r25, Y+2	; 0x02
    3424:	8a 53       	subi	r24, 0x3A	; 58
    3426:	93 4d       	sbci	r25, 0xD3	; 211
    3428:	25 e2       	ldi	r18, 0x25	; 37
    342a:	fc 01       	movw	r30, r24
    342c:	20 83       	st	Z, r18
				length++;
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	9a 81       	ldd	r25, Y+2	; 0x02
    3432:	01 96       	adiw	r24, 0x01	; 1
    3434:	89 83       	std	Y+1, r24	; 0x01
    3436:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3438:	83 c1       	rjmp	.+774    	; 0x3740 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    343a:	8b ad       	ldd	r24, Y+59	; 0x3b
    343c:	9c ad       	ldd	r25, Y+60	; 0x3c
    343e:	9c 01       	movw	r18, r24
    3440:	2e 5f       	subi	r18, 0xFE	; 254
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
    3444:	2b af       	std	Y+59, r18	; 0x3b
    3446:	3c af       	std	Y+60, r19	; 0x3c
    3448:	fc 01       	movw	r30, r24
    344a:	80 81       	ld	r24, Z
    344c:	91 81       	ldd	r25, Z+1	; 0x01
    344e:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    3450:	89 81       	ldd	r24, Y+1	; 0x01
    3452:	9a 81       	ldd	r25, Y+2	; 0x02
    3454:	8a 53       	subi	r24, 0x3A	; 58
    3456:	93 4d       	sbci	r25, 0xD3	; 211
    3458:	2e 89       	ldd	r18, Y+22	; 0x16
    345a:	fc 01       	movw	r30, r24
    345c:	20 83       	st	Z, r18
				length++;
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	01 96       	adiw	r24, 0x01	; 1
    3464:	89 83       	std	Y+1, r24	; 0x01
    3466:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3468:	6b c1       	rjmp	.+726    	; 0x3740 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    346a:	8b ad       	ldd	r24, Y+59	; 0x3b
    346c:	9c ad       	ldd	r25, Y+60	; 0x3c
    346e:	9c 01       	movw	r18, r24
    3470:	2e 5f       	subi	r18, 0xFE	; 254
    3472:	3f 4f       	sbci	r19, 0xFF	; 255
    3474:	2b af       	std	Y+59, r18	; 0x3b
    3476:	3c af       	std	Y+60, r19	; 0x3c
    3478:	fc 01       	movw	r30, r24
    347a:	80 81       	ld	r24, Z
    347c:	91 81       	ldd	r25, Z+1	; 0x01
    347e:	8f 8b       	std	Y+23, r24	; 0x17
    3480:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    3482:	1f 82       	std	Y+7, r1	; 0x07
    3484:	18 86       	std	Y+8, r1	; 0x08
    3486:	17 c0       	rjmp	.+46     	; 0x34b6 <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    3488:	29 81       	ldd	r18, Y+1	; 0x01
    348a:	3a 81       	ldd	r19, Y+2	; 0x02
    348c:	8f 81       	ldd	r24, Y+7	; 0x07
    348e:	98 85       	ldd	r25, Y+8	; 0x08
    3490:	82 0f       	add	r24, r18
    3492:	93 1f       	adc	r25, r19
    3494:	2f 81       	ldd	r18, Y+7	; 0x07
    3496:	38 85       	ldd	r19, Y+8	; 0x08
    3498:	4f 89       	ldd	r20, Y+23	; 0x17
    349a:	58 8d       	ldd	r21, Y+24	; 0x18
    349c:	24 0f       	add	r18, r20
    349e:	35 1f       	adc	r19, r21
    34a0:	f9 01       	movw	r30, r18
    34a2:	20 81       	ld	r18, Z
    34a4:	8a 53       	subi	r24, 0x3A	; 58
    34a6:	93 4d       	sbci	r25, 0xD3	; 211
    34a8:	fc 01       	movw	r30, r24
    34aa:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    34ac:	8f 81       	ldd	r24, Y+7	; 0x07
    34ae:	98 85       	ldd	r25, Y+8	; 0x08
    34b0:	01 96       	adiw	r24, 0x01	; 1
    34b2:	8f 83       	std	Y+7, r24	; 0x07
    34b4:	98 87       	std	Y+8, r25	; 0x08
    34b6:	8f 89       	ldd	r24, Y+23	; 0x17
    34b8:	98 8d       	ldd	r25, Y+24	; 0x18
    34ba:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <strlen>
    34be:	9c 01       	movw	r18, r24
    34c0:	8f 81       	ldd	r24, Y+7	; 0x07
    34c2:	98 85       	ldd	r25, Y+8	; 0x08
    34c4:	82 17       	cp	r24, r18
    34c6:	93 07       	cpc	r25, r19
    34c8:	f8 f2       	brcs	.-66     	; 0x3488 <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    34ca:	8f 89       	ldd	r24, Y+23	; 0x17
    34cc:	98 8d       	ldd	r25, Y+24	; 0x18
    34ce:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <strlen>
    34d2:	9c 01       	movw	r18, r24
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	9a 81       	ldd	r25, Y+2	; 0x02
    34d8:	82 0f       	add	r24, r18
    34da:	93 1f       	adc	r25, r19
    34dc:	89 83       	std	Y+1, r24	; 0x01
    34de:	9a 83       	std	Y+2, r25	; 0x02
				break;
    34e0:	2f c1       	rjmp	.+606    	; 0x3740 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    34e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    34e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    34e6:	9c 01       	movw	r18, r24
    34e8:	2e 5f       	subi	r18, 0xFE	; 254
    34ea:	3f 4f       	sbci	r19, 0xFF	; 255
    34ec:	2b af       	std	Y+59, r18	; 0x3b
    34ee:	3c af       	std	Y+60, r19	; 0x3c
    34f0:	fc 01       	movw	r30, r24
    34f2:	80 81       	ld	r24, Z
    34f4:	91 81       	ldd	r25, Z+1	; 0x01
    34f6:	89 8f       	std	Y+25, r24	; 0x19
    34f8:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    34fa:	89 8d       	ldd	r24, Y+25	; 0x19
    34fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34fe:	4a e0       	ldi	r20, 0x0A	; 10
    3500:	50 e0       	ldi	r21, 0x00	; 0
    3502:	62 eb       	ldi	r22, 0xB2	; 178
    3504:	7c e2       	ldi	r23, 0x2C	; 44
    3506:	0e 94 d7 25 	call	0x4bae	; 0x4bae <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    350a:	19 86       	std	Y+9, r1	; 0x09
    350c:	1a 86       	std	Y+10, r1	; 0x0a
    350e:	15 c0       	rjmp	.+42     	; 0x353a <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    3510:	29 81       	ldd	r18, Y+1	; 0x01
    3512:	3a 81       	ldd	r19, Y+2	; 0x02
    3514:	89 85       	ldd	r24, Y+9	; 0x09
    3516:	9a 85       	ldd	r25, Y+10	; 0x0a
    3518:	82 0f       	add	r24, r18
    351a:	93 1f       	adc	r25, r19
    351c:	29 85       	ldd	r18, Y+9	; 0x09
    351e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3520:	2e 54       	subi	r18, 0x4E	; 78
    3522:	33 4d       	sbci	r19, 0xD3	; 211
    3524:	f9 01       	movw	r30, r18
    3526:	20 81       	ld	r18, Z
    3528:	8a 53       	subi	r24, 0x3A	; 58
    352a:	93 4d       	sbci	r25, 0xD3	; 211
    352c:	fc 01       	movw	r30, r24
    352e:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    3530:	89 85       	ldd	r24, Y+9	; 0x09
    3532:	9a 85       	ldd	r25, Y+10	; 0x0a
    3534:	01 96       	adiw	r24, 0x01	; 1
    3536:	89 87       	std	Y+9, r24	; 0x09
    3538:	9a 87       	std	Y+10, r25	; 0x0a
    353a:	82 eb       	ldi	r24, 0xB2	; 178
    353c:	9c e2       	ldi	r25, 0x2C	; 44
    353e:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <strlen>
    3542:	9c 01       	movw	r18, r24
    3544:	89 85       	ldd	r24, Y+9	; 0x09
    3546:	9a 85       	ldd	r25, Y+10	; 0x0a
    3548:	82 17       	cp	r24, r18
    354a:	93 07       	cpc	r25, r19
    354c:	08 f3       	brcs	.-62     	; 0x3510 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    354e:	82 eb       	ldi	r24, 0xB2	; 178
    3550:	9c e2       	ldi	r25, 0x2C	; 44
    3552:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <strlen>
    3556:	9c 01       	movw	r18, r24
    3558:	89 81       	ldd	r24, Y+1	; 0x01
    355a:	9a 81       	ldd	r25, Y+2	; 0x02
    355c:	82 0f       	add	r24, r18
    355e:	93 1f       	adc	r25, r19
    3560:	89 83       	std	Y+1, r24	; 0x01
    3562:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3564:	ed c0       	rjmp	.+474    	; 0x3740 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    3566:	8b ad       	ldd	r24, Y+59	; 0x3b
    3568:	9c ad       	ldd	r25, Y+60	; 0x3c
    356a:	9c 01       	movw	r18, r24
    356c:	2e 5f       	subi	r18, 0xFE	; 254
    356e:	3f 4f       	sbci	r19, 0xFF	; 255
    3570:	2b af       	std	Y+59, r18	; 0x3b
    3572:	3c af       	std	Y+60, r19	; 0x3c
    3574:	fc 01       	movw	r30, r24
    3576:	80 81       	ld	r24, Z
    3578:	91 81       	ldd	r25, Z+1	; 0x01
    357a:	89 8f       	std	Y+25, r24	; 0x19
    357c:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    357e:	89 8d       	ldd	r24, Y+25	; 0x19
    3580:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3582:	40 e1       	ldi	r20, 0x10	; 16
    3584:	50 e0       	ldi	r21, 0x00	; 0
    3586:	62 eb       	ldi	r22, 0xB2	; 178
    3588:	7c e2       	ldi	r23, 0x2C	; 44
    358a:	0e 94 d7 25 	call	0x4bae	; 0x4bae <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    358e:	1b 86       	std	Y+11, r1	; 0x0b
    3590:	1c 86       	std	Y+12, r1	; 0x0c
    3592:	15 c0       	rjmp	.+42     	; 0x35be <display_vprintf+0x268>
					str[length+i] = buffer[i];
    3594:	29 81       	ldd	r18, Y+1	; 0x01
    3596:	3a 81       	ldd	r19, Y+2	; 0x02
    3598:	8b 85       	ldd	r24, Y+11	; 0x0b
    359a:	9c 85       	ldd	r25, Y+12	; 0x0c
    359c:	82 0f       	add	r24, r18
    359e:	93 1f       	adc	r25, r19
    35a0:	2b 85       	ldd	r18, Y+11	; 0x0b
    35a2:	3c 85       	ldd	r19, Y+12	; 0x0c
    35a4:	2e 54       	subi	r18, 0x4E	; 78
    35a6:	33 4d       	sbci	r19, 0xD3	; 211
    35a8:	f9 01       	movw	r30, r18
    35aa:	20 81       	ld	r18, Z
    35ac:	8a 53       	subi	r24, 0x3A	; 58
    35ae:	93 4d       	sbci	r25, 0xD3	; 211
    35b0:	fc 01       	movw	r30, r24
    35b2:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    35b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    35b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    35b8:	01 96       	adiw	r24, 0x01	; 1
    35ba:	8b 87       	std	Y+11, r24	; 0x0b
    35bc:	9c 87       	std	Y+12, r25	; 0x0c
    35be:	82 eb       	ldi	r24, 0xB2	; 178
    35c0:	9c e2       	ldi	r25, 0x2C	; 44
    35c2:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <strlen>
    35c6:	9c 01       	movw	r18, r24
    35c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    35ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    35cc:	82 17       	cp	r24, r18
    35ce:	93 07       	cpc	r25, r19
    35d0:	08 f3       	brcs	.-62     	; 0x3594 <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    35d2:	82 eb       	ldi	r24, 0xB2	; 178
    35d4:	9c e2       	ldi	r25, 0x2C	; 44
    35d6:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <strlen>
    35da:	9c 01       	movw	r18, r24
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	9a 81       	ldd	r25, Y+2	; 0x02
    35e0:	82 0f       	add	r24, r18
    35e2:	93 1f       	adc	r25, r19
    35e4:	89 83       	std	Y+1, r24	; 0x01
    35e6:	9a 83       	std	Y+2, r25	; 0x02
				break;
    35e8:	ab c0       	rjmp	.+342    	; 0x3740 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    35ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    35ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    35ee:	9c 01       	movw	r18, r24
    35f0:	2c 5f       	subi	r18, 0xFC	; 252
    35f2:	3f 4f       	sbci	r19, 0xFF	; 255
    35f4:	2b af       	std	Y+59, r18	; 0x3b
    35f6:	3c af       	std	Y+60, r19	; 0x3c
    35f8:	fc 01       	movw	r30, r24
    35fa:	80 81       	ld	r24, Z
    35fc:	91 81       	ldd	r25, Z+1	; 0x01
    35fe:	a2 81       	ldd	r26, Z+2	; 0x02
    3600:	b3 81       	ldd	r27, Z+3	; 0x03
    3602:	8b 8f       	std	Y+27, r24	; 0x1b
    3604:	9c 8f       	std	Y+28, r25	; 0x1c
    3606:	ad 8f       	std	Y+29, r26	; 0x1d
    3608:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    360a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    360c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    360e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3610:	be 8d       	ldd	r27, Y+30	; 0x1e
    3612:	ac 01       	movw	r20, r24
    3614:	bd 01       	movw	r22, r26
    3616:	82 eb       	ldi	r24, 0xB2	; 178
    3618:	9c e2       	ldi	r25, 0x2C	; 44
    361a:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    361e:	1d 86       	std	Y+13, r1	; 0x0d
    3620:	1e 86       	std	Y+14, r1	; 0x0e
    3622:	15 c0       	rjmp	.+42     	; 0x364e <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    3624:	29 81       	ldd	r18, Y+1	; 0x01
    3626:	3a 81       	ldd	r19, Y+2	; 0x02
    3628:	8d 85       	ldd	r24, Y+13	; 0x0d
    362a:	9e 85       	ldd	r25, Y+14	; 0x0e
    362c:	82 0f       	add	r24, r18
    362e:	93 1f       	adc	r25, r19
    3630:	2d 85       	ldd	r18, Y+13	; 0x0d
    3632:	3e 85       	ldd	r19, Y+14	; 0x0e
    3634:	2e 54       	subi	r18, 0x4E	; 78
    3636:	33 4d       	sbci	r19, 0xD3	; 211
    3638:	f9 01       	movw	r30, r18
    363a:	20 81       	ld	r18, Z
    363c:	8a 53       	subi	r24, 0x3A	; 58
    363e:	93 4d       	sbci	r25, 0xD3	; 211
    3640:	fc 01       	movw	r30, r24
    3642:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    3644:	8d 85       	ldd	r24, Y+13	; 0x0d
    3646:	9e 85       	ldd	r25, Y+14	; 0x0e
    3648:	01 96       	adiw	r24, 0x01	; 1
    364a:	8d 87       	std	Y+13, r24	; 0x0d
    364c:	9e 87       	std	Y+14, r25	; 0x0e
    364e:	82 eb       	ldi	r24, 0xB2	; 178
    3650:	9c e2       	ldi	r25, 0x2C	; 44
    3652:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <strlen>
    3656:	9c 01       	movw	r18, r24
    3658:	8d 85       	ldd	r24, Y+13	; 0x0d
    365a:	9e 85       	ldd	r25, Y+14	; 0x0e
    365c:	82 17       	cp	r24, r18
    365e:	93 07       	cpc	r25, r19
    3660:	08 f3       	brcs	.-62     	; 0x3624 <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    3662:	82 eb       	ldi	r24, 0xB2	; 178
    3664:	9c e2       	ldi	r25, 0x2C	; 44
    3666:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <strlen>
    366a:	9c 01       	movw	r18, r24
    366c:	89 81       	ldd	r24, Y+1	; 0x01
    366e:	9a 81       	ldd	r25, Y+2	; 0x02
    3670:	82 0f       	add	r24, r18
    3672:	93 1f       	adc	r25, r19
    3674:	89 83       	std	Y+1, r24	; 0x01
    3676:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3678:	63 c0       	rjmp	.+198    	; 0x3740 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    367a:	8b ad       	ldd	r24, Y+59	; 0x3b
    367c:	9c ad       	ldd	r25, Y+60	; 0x3c
    367e:	9c 01       	movw	r18, r24
    3680:	2c 5f       	subi	r18, 0xFC	; 252
    3682:	3f 4f       	sbci	r19, 0xFF	; 255
    3684:	2b af       	std	Y+59, r18	; 0x3b
    3686:	3c af       	std	Y+60, r19	; 0x3c
    3688:	fc 01       	movw	r30, r24
    368a:	80 81       	ld	r24, Z
    368c:	91 81       	ldd	r25, Z+1	; 0x01
    368e:	a2 81       	ldd	r26, Z+2	; 0x02
    3690:	b3 81       	ldd	r27, Z+3	; 0x03
    3692:	8b 8f       	std	Y+27, r24	; 0x1b
    3694:	9c 8f       	std	Y+28, r25	; 0x1c
    3696:	ad 8f       	std	Y+29, r26	; 0x1d
    3698:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    369a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    369c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    369e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    36a0:	be 8d       	ldd	r27, Y+30	; 0x1e
    36a2:	ac 01       	movw	r20, r24
    36a4:	bd 01       	movw	r22, r26
    36a6:	82 eb       	ldi	r24, 0xB2	; 178
    36a8:	9c e2       	ldi	r25, 0x2C	; 44
    36aa:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    36ae:	1f 86       	std	Y+15, r1	; 0x0f
    36b0:	18 8a       	std	Y+16, r1	; 0x10
    36b2:	15 c0       	rjmp	.+42     	; 0x36de <display_vprintf+0x388>
					str[length+i] = buffer[i];
    36b4:	29 81       	ldd	r18, Y+1	; 0x01
    36b6:	3a 81       	ldd	r19, Y+2	; 0x02
    36b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ba:	98 89       	ldd	r25, Y+16	; 0x10
    36bc:	82 0f       	add	r24, r18
    36be:	93 1f       	adc	r25, r19
    36c0:	2f 85       	ldd	r18, Y+15	; 0x0f
    36c2:	38 89       	ldd	r19, Y+16	; 0x10
    36c4:	2e 54       	subi	r18, 0x4E	; 78
    36c6:	33 4d       	sbci	r19, 0xD3	; 211
    36c8:	f9 01       	movw	r30, r18
    36ca:	20 81       	ld	r18, Z
    36cc:	8a 53       	subi	r24, 0x3A	; 58
    36ce:	93 4d       	sbci	r25, 0xD3	; 211
    36d0:	fc 01       	movw	r30, r24
    36d2:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    36d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d6:	98 89       	ldd	r25, Y+16	; 0x10
    36d8:	01 96       	adiw	r24, 0x01	; 1
    36da:	8f 87       	std	Y+15, r24	; 0x0f
    36dc:	98 8b       	std	Y+16, r25	; 0x10
    36de:	82 eb       	ldi	r24, 0xB2	; 178
    36e0:	9c e2       	ldi	r25, 0x2C	; 44
    36e2:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <strlen>
    36e6:	9c 01       	movw	r18, r24
    36e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ea:	98 89       	ldd	r25, Y+16	; 0x10
    36ec:	82 17       	cp	r24, r18
    36ee:	93 07       	cpc	r25, r19
    36f0:	08 f3       	brcs	.-62     	; 0x36b4 <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    36f2:	82 eb       	ldi	r24, 0xB2	; 178
    36f4:	9c e2       	ldi	r25, 0x2C	; 44
    36f6:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <strlen>
    36fa:	9c 01       	movw	r18, r24
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3700:	82 0f       	add	r24, r18
    3702:	93 1f       	adc	r25, r19
    3704:	89 83       	std	Y+1, r24	; 0x01
    3706:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3708:	00 00       	nop
    370a:	1a c0       	rjmp	.+52     	; 0x3740 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    370c:	89 81       	ldd	r24, Y+1	; 0x01
    370e:	9a 81       	ldd	r25, Y+2	; 0x02
    3710:	8a 53       	subi	r24, 0x3A	; 58
    3712:	93 4d       	sbci	r25, 0xD3	; 211
    3714:	2d 89       	ldd	r18, Y+21	; 0x15
    3716:	fc 01       	movw	r30, r24
    3718:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	9a 81       	ldd	r25, Y+2	; 0x02
    371e:	8a 53       	subi	r24, 0x3A	; 58
    3720:	93 4d       	sbci	r25, 0xD3	; 211
    3722:	fc 01       	movw	r30, r24
    3724:	80 81       	ld	r24, Z
    3726:	8a 30       	cpi	r24, 0x0A	; 10
    3728:	31 f4       	brne	.+12     	; 0x3736 <display_vprintf+0x3e0>
				str[length] = '\0';				
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	9a 81       	ldd	r25, Y+2	; 0x02
    372e:	8a 53       	subi	r24, 0x3A	; 58
    3730:	93 4d       	sbci	r25, 0xD3	; 211
    3732:	fc 01       	movw	r30, r24
    3734:	10 82       	st	Z, r1
			}
			length++;
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	9a 81       	ldd	r25, Y+2	; 0x02
    373a:	01 96       	adiw	r24, 0x01	; 1
    373c:	89 83       	std	Y+1, r24	; 0x01
    373e:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    3740:	89 ad       	ldd	r24, Y+57	; 0x39
    3742:	9a ad       	ldd	r25, Y+58	; 0x3a
    3744:	9c 01       	movw	r18, r24
    3746:	2f 5f       	subi	r18, 0xFF	; 255
    3748:	3f 4f       	sbci	r19, 0xFF	; 255
    374a:	29 af       	std	Y+57, r18	; 0x39
    374c:	3a af       	std	Y+58, r19	; 0x3a
    374e:	fc 01       	movw	r30, r24
    3750:	80 81       	ld	r24, Z
    3752:	8d 8b       	std	Y+21, r24	; 0x15
    3754:	8d 89       	ldd	r24, Y+21	; 0x15
    3756:	88 23       	and	r24, r24
    3758:	09 f0       	breq	.+2      	; 0x375c <display_vprintf+0x406>
    375a:	34 ce       	rjmp	.-920    	; 0x33c4 <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    375c:	29 81       	ldd	r18, Y+1	; 0x01
    375e:	3a 81       	ldd	r19, Y+2	; 0x02
    3760:	8f a9       	ldd	r24, Y+55	; 0x37
    3762:	98 ad       	ldd	r25, Y+56	; 0x38
    3764:	82 0f       	add	r24, r18
    3766:	93 1f       	adc	r25, r19
    3768:	44 97       	sbiw	r24, 0x14	; 20
    376a:	54 f0       	brlt	.+20     	; 0x3780 <display_vprintf+0x42a>
		length = 20-pos;
    376c:	24 e1       	ldi	r18, 0x14	; 20
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	8f a9       	ldd	r24, Y+55	; 0x37
    3772:	98 ad       	ldd	r25, Y+56	; 0x38
    3774:	a9 01       	movw	r20, r18
    3776:	48 1b       	sub	r20, r24
    3778:	59 0b       	sbc	r21, r25
    377a:	ca 01       	movw	r24, r20
    377c:	89 83       	std	Y+1, r24	; 0x01
    377e:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    3780:	19 8a       	std	Y+17, r1	; 0x11
    3782:	1a 8a       	std	Y+18, r1	; 0x12
    3784:	0e c0       	rjmp	.+28     	; 0x37a2 <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    3786:	9e 01       	movw	r18, r28
    3788:	2f 5d       	subi	r18, 0xDF	; 223
    378a:	3f 4f       	sbci	r19, 0xFF	; 255
    378c:	89 89       	ldd	r24, Y+17	; 0x11
    378e:	9a 89       	ldd	r25, Y+18	; 0x12
    3790:	82 0f       	add	r24, r18
    3792:	93 1f       	adc	r25, r19
    3794:	fc 01       	movw	r30, r24
    3796:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    3798:	89 89       	ldd	r24, Y+17	; 0x11
    379a:	9a 89       	ldd	r25, Y+18	; 0x12
    379c:	01 96       	adiw	r24, 0x01	; 1
    379e:	89 8b       	std	Y+17, r24	; 0x11
    37a0:	9a 8b       	std	Y+18, r25	; 0x12
    37a2:	89 89       	ldd	r24, Y+17	; 0x11
    37a4:	9a 89       	ldd	r25, Y+18	; 0x12
    37a6:	44 97       	sbiw	r24, 0x14	; 20
    37a8:	74 f3       	brlt	.-36     	; 0x3786 <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    37aa:	8d a9       	ldd	r24, Y+53	; 0x35
    37ac:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    37ae:	8f a9       	ldd	r24, Y+55	; 0x37
    37b0:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    37b2:	1b 8a       	std	Y+19, r1	; 0x13
    37b4:	1c 8a       	std	Y+20, r1	; 0x14
    37b6:	14 c0       	rjmp	.+40     	; 0x37e0 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    37b8:	8b 89       	ldd	r24, Y+19	; 0x13
    37ba:	9c 89       	ldd	r25, Y+20	; 0x14
    37bc:	8a 53       	subi	r24, 0x3A	; 58
    37be:	93 4d       	sbci	r25, 0xD3	; 211
    37c0:	fc 01       	movw	r30, r24
    37c2:	40 81       	ld	r20, Z
    37c4:	9e 01       	movw	r18, r28
    37c6:	2f 5d       	subi	r18, 0xDF	; 223
    37c8:	3f 4f       	sbci	r19, 0xFF	; 255
    37ca:	8b 89       	ldd	r24, Y+19	; 0x13
    37cc:	9c 89       	ldd	r25, Y+20	; 0x14
    37ce:	82 0f       	add	r24, r18
    37d0:	93 1f       	adc	r25, r19
    37d2:	fc 01       	movw	r30, r24
    37d4:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    37d6:	8b 89       	ldd	r24, Y+19	; 0x13
    37d8:	9c 89       	ldd	r25, Y+20	; 0x14
    37da:	01 96       	adiw	r24, 0x01	; 1
    37dc:	8b 8b       	std	Y+19, r24	; 0x13
    37de:	9c 8b       	std	Y+20, r25	; 0x14
    37e0:	2b 89       	ldd	r18, Y+19	; 0x13
    37e2:	3c 89       	ldd	r19, Y+20	; 0x14
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	9a 81       	ldd	r25, Y+2	; 0x02
    37e8:	28 17       	cp	r18, r24
    37ea:	39 07       	cpc	r19, r25
    37ec:	2c f3       	brlt	.-54     	; 0x37b8 <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    37ee:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <displayLineQueue>
    37f2:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <displayLineQueue+0x1>
    37f6:	be 01       	movw	r22, r28
    37f8:	61 5e       	subi	r22, 0xE1	; 225
    37fa:	7f 4f       	sbci	r23, 0xFF	; 255
    37fc:	00 e0       	ldi	r16, 0x00	; 0
    37fe:	2f ef       	ldi	r18, 0xFF	; 255
    3800:	3f ef       	ldi	r19, 0xFF	; 255
    3802:	a9 01       	movw	r20, r18
    3804:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
	
	
	return length;
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    380c:	ec 96       	adiw	r28, 0x3c	; 60
    380e:	cd bf       	out	0x3d, r28	; 61
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	0f 91       	pop	r16
    3818:	08 95       	ret

0000381a <normalize>:

static int normalize(double *val) {
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	28 97       	sbiw	r28, 0x08	; 8
    3824:	cd bf       	out	0x3d, r28	; 61
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	8f 83       	std	Y+7, r24	; 0x07
    382a:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    382c:	19 82       	std	Y+1, r1	; 0x01
    382e:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    3830:	8f 81       	ldd	r24, Y+7	; 0x07
    3832:	98 85       	ldd	r25, Y+8	; 0x08
    3834:	fc 01       	movw	r30, r24
    3836:	80 81       	ld	r24, Z
    3838:	91 81       	ldd	r25, Z+1	; 0x01
    383a:	a2 81       	ldd	r26, Z+2	; 0x02
    383c:	b3 81       	ldd	r27, Z+3	; 0x03
    383e:	8b 83       	std	Y+3, r24	; 0x03
    3840:	9c 83       	std	Y+4, r25	; 0x04
    3842:	ad 83       	std	Y+5, r26	; 0x05
    3844:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    3846:	15 c0       	rjmp	.+42     	; 0x3872 <normalize+0x58>
        value /= 10.0;
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	40 e2       	ldi	r20, 0x20	; 32
    384e:	51 e4       	ldi	r21, 0x41	; 65
    3850:	6b 81       	ldd	r22, Y+3	; 0x03
    3852:	7c 81       	ldd	r23, Y+4	; 0x04
    3854:	8d 81       	ldd	r24, Y+5	; 0x05
    3856:	9e 81       	ldd	r25, Y+6	; 0x06
    3858:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__divsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	8b 83       	std	Y+3, r24	; 0x03
    3862:	9c 83       	std	Y+4, r25	; 0x04
    3864:	ad 83       	std	Y+5, r26	; 0x05
    3866:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	9a 81       	ldd	r25, Y+2	; 0x02
    386c:	01 96       	adiw	r24, 0x01	; 1
    386e:	89 83       	std	Y+1, r24	; 0x01
    3870:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	40 e8       	ldi	r20, 0x80	; 128
    3878:	5f e3       	ldi	r21, 0x3F	; 63
    387a:	6b 81       	ldd	r22, Y+3	; 0x03
    387c:	7c 81       	ldd	r23, Y+4	; 0x04
    387e:	8d 81       	ldd	r24, Y+5	; 0x05
    3880:	9e 81       	ldd	r25, Y+6	; 0x06
    3882:	0e 94 b6 20 	call	0x416c	; 0x416c <__gesf2>
    3886:	88 23       	and	r24, r24
    3888:	fc f6       	brge	.-66     	; 0x3848 <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    388a:	15 c0       	rjmp	.+42     	; 0x38b6 <normalize+0x9c>
        value *= 10.0;
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	40 e2       	ldi	r20, 0x20	; 32
    3892:	51 e4       	ldi	r21, 0x41	; 65
    3894:	6b 81       	ldd	r22, Y+3	; 0x03
    3896:	7c 81       	ldd	r23, Y+4	; 0x04
    3898:	8d 81       	ldd	r24, Y+5	; 0x05
    389a:	9e 81       	ldd	r25, Y+6	; 0x06
    389c:	0e 94 bb 20 	call	0x4176	; 0x4176 <__mulsf3>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	8b 83       	std	Y+3, r24	; 0x03
    38a6:	9c 83       	std	Y+4, r25	; 0x04
    38a8:	ad 83       	std	Y+5, r26	; 0x05
    38aa:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	9a 81       	ldd	r25, Y+2	; 0x02
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	89 83       	std	Y+1, r24	; 0x01
    38b4:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    38b6:	2d ec       	ldi	r18, 0xCD	; 205
    38b8:	3c ec       	ldi	r19, 0xCC	; 204
    38ba:	4c ec       	ldi	r20, 0xCC	; 204
    38bc:	5d e3       	ldi	r21, 0x3D	; 61
    38be:	6b 81       	ldd	r22, Y+3	; 0x03
    38c0:	7c 81       	ldd	r23, Y+4	; 0x04
    38c2:	8d 81       	ldd	r24, Y+5	; 0x05
    38c4:	9e 81       	ldd	r25, Y+6	; 0x06
    38c6:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__cmpsf2>
    38ca:	88 23       	and	r24, r24
    38cc:	fc f2       	brlt	.-66     	; 0x388c <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    38ce:	2f 81       	ldd	r18, Y+7	; 0x07
    38d0:	38 85       	ldd	r19, Y+8	; 0x08
    38d2:	8b 81       	ldd	r24, Y+3	; 0x03
    38d4:	9c 81       	ldd	r25, Y+4	; 0x04
    38d6:	ad 81       	ldd	r26, Y+5	; 0x05
    38d8:	be 81       	ldd	r27, Y+6	; 0x06
    38da:	f9 01       	movw	r30, r18
    38dc:	80 83       	st	Z, r24
    38de:	91 83       	std	Z+1, r25	; 0x01
    38e0:	a2 83       	std	Z+2, r26	; 0x02
    38e2:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    38e4:	89 81       	ldd	r24, Y+1	; 0x01
    38e6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    38e8:	28 96       	adiw	r28, 0x08	; 8
    38ea:	cd bf       	out	0x3d, r28	; 61
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	df 91       	pop	r29
    38f0:	cf 91       	pop	r28
    38f2:	08 95       	ret

000038f4 <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    38f4:	cf 92       	push	r12
    38f6:	df 92       	push	r13
    38f8:	ef 92       	push	r14
    38fa:	ff 92       	push	r15
    38fc:	cf 93       	push	r28
    38fe:	df 93       	push	r29
    3900:	cd b7       	in	r28, 0x3d	; 61
    3902:	de b7       	in	r29, 0x3e	; 62
    3904:	2e 97       	sbiw	r28, 0x0e	; 14
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	89 87       	std	Y+9, r24	; 0x09
    390c:	9a 87       	std	Y+10, r25	; 0x0a
    390e:	4b 87       	std	Y+11, r20	; 0x0b
    3910:	5c 87       	std	Y+12, r21	; 0x0c
    3912:	6d 87       	std	Y+13, r22	; 0x0d
    3914:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    3916:	19 82       	std	Y+1, r1	; 0x01
    3918:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    391a:	1b 82       	std	Y+3, r1	; 0x03
    391c:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    391e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3920:	9c 85       	ldd	r25, Y+12	; 0x0c
    3922:	ad 85       	ldd	r26, Y+13	; 0x0d
    3924:	be 85       	ldd	r27, Y+14	; 0x0e
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	a9 01       	movw	r20, r18
    392c:	bc 01       	movw	r22, r24
    392e:	cd 01       	movw	r24, r26
    3930:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__cmpsf2>
    3934:	88 23       	and	r24, r24
    3936:	59 f4       	brne	.+22     	; 0x394e <ftoa_fixed+0x5a>
        buffer[0] = '0';
    3938:	89 85       	ldd	r24, Y+9	; 0x09
    393a:	9a 85       	ldd	r25, Y+10	; 0x0a
    393c:	20 e3       	ldi	r18, 0x30	; 48
    393e:	fc 01       	movw	r30, r24
    3940:	20 83       	st	Z, r18
        buffer[1] = '\0';
    3942:	89 85       	ldd	r24, Y+9	; 0x09
    3944:	9a 85       	ldd	r25, Y+10	; 0x0a
    3946:	01 96       	adiw	r24, 0x01	; 1
    3948:	fc 01       	movw	r30, r24
    394a:	10 82       	st	Z, r1
        return;
    394c:	18 c1       	rjmp	.+560    	; 0x3b7e <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    394e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3950:	9c 85       	ldd	r25, Y+12	; 0x0c
    3952:	ad 85       	ldd	r26, Y+13	; 0x0d
    3954:	be 85       	ldd	r27, Y+14	; 0x0e
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	a9 01       	movw	r20, r18
    395c:	bc 01       	movw	r22, r24
    395e:	cd 01       	movw	r24, r26
    3960:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__cmpsf2>
    3964:	88 23       	and	r24, r24
    3966:	9c f4       	brge	.+38     	; 0x398e <ftoa_fixed+0x9a>
        *buffer++ = '-';
    3968:	89 85       	ldd	r24, Y+9	; 0x09
    396a:	9a 85       	ldd	r25, Y+10	; 0x0a
    396c:	9c 01       	movw	r18, r24
    396e:	2f 5f       	subi	r18, 0xFF	; 255
    3970:	3f 4f       	sbci	r19, 0xFF	; 255
    3972:	29 87       	std	Y+9, r18	; 0x09
    3974:	3a 87       	std	Y+10, r19	; 0x0a
    3976:	2d e2       	ldi	r18, 0x2D	; 45
    3978:	fc 01       	movw	r30, r24
    397a:	20 83       	st	Z, r18
        value = -value;
    397c:	8b 85       	ldd	r24, Y+11	; 0x0b
    397e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3980:	ad 85       	ldd	r26, Y+13	; 0x0d
    3982:	be 85       	ldd	r27, Y+14	; 0x0e
    3984:	b0 58       	subi	r27, 0x80	; 128
    3986:	8b 87       	std	Y+11, r24	; 0x0b
    3988:	9c 87       	std	Y+12, r25	; 0x0c
    398a:	ad 87       	std	Y+13, r26	; 0x0d
    398c:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    398e:	ce 01       	movw	r24, r28
    3990:	0b 96       	adiw	r24, 0x0b	; 11
    3992:	0e 94 0d 1c 	call	0x381a	; 0x381a <normalize>
    3996:	89 83       	std	Y+1, r24	; 0x01
    3998:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    399a:	53 c0       	rjmp	.+166    	; 0x3a42 <ftoa_fixed+0x14e>
        int digit = value * 10;
    399c:	8b 85       	ldd	r24, Y+11	; 0x0b
    399e:	9c 85       	ldd	r25, Y+12	; 0x0c
    39a0:	ad 85       	ldd	r26, Y+13	; 0x0d
    39a2:	be 85       	ldd	r27, Y+14	; 0x0e
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	40 e2       	ldi	r20, 0x20	; 32
    39aa:	51 e4       	ldi	r21, 0x41	; 65
    39ac:	bc 01       	movw	r22, r24
    39ae:	cd 01       	movw	r24, r26
    39b0:	0e 94 bb 20 	call	0x4176	; 0x4176 <__mulsf3>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	bc 01       	movw	r22, r24
    39ba:	cd 01       	movw	r24, r26
    39bc:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <__fixsfsi>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	8d 83       	std	Y+5, r24	; 0x05
    39c6:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    39c8:	89 85       	ldd	r24, Y+9	; 0x09
    39ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    39cc:	9c 01       	movw	r18, r24
    39ce:	2f 5f       	subi	r18, 0xFF	; 255
    39d0:	3f 4f       	sbci	r19, 0xFF	; 255
    39d2:	29 87       	std	Y+9, r18	; 0x09
    39d4:	3a 87       	std	Y+10, r19	; 0x0a
    39d6:	2d 81       	ldd	r18, Y+5	; 0x05
    39d8:	20 5d       	subi	r18, 0xD0	; 208
    39da:	fc 01       	movw	r30, r24
    39dc:	20 83       	st	Z, r18
        value = value * 10 - digit;
    39de:	8b 85       	ldd	r24, Y+11	; 0x0b
    39e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    39e2:	ad 85       	ldd	r26, Y+13	; 0x0d
    39e4:	be 85       	ldd	r27, Y+14	; 0x0e
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	40 e2       	ldi	r20, 0x20	; 32
    39ec:	51 e4       	ldi	r21, 0x41	; 65
    39ee:	bc 01       	movw	r22, r24
    39f0:	cd 01       	movw	r24, r26
    39f2:	0e 94 bb 20 	call	0x4176	; 0x4176 <__mulsf3>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	6c 01       	movw	r12, r24
    39fc:	7d 01       	movw	r14, r26
    39fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3a00:	9e 81       	ldd	r25, Y+6	; 0x06
    3a02:	09 2e       	mov	r0, r25
    3a04:	00 0c       	add	r0, r0
    3a06:	aa 0b       	sbc	r26, r26
    3a08:	bb 0b       	sbc	r27, r27
    3a0a:	bc 01       	movw	r22, r24
    3a0c:	cd 01       	movw	r24, r26
    3a0e:	0e 94 06 20 	call	0x400c	; 0x400c <__floatsisf>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	9c 01       	movw	r18, r24
    3a18:	ad 01       	movw	r20, r26
    3a1a:	c7 01       	movw	r24, r14
    3a1c:	b6 01       	movw	r22, r12
    3a1e:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__subsf3>
    3a22:	dc 01       	movw	r26, r24
    3a24:	cb 01       	movw	r24, r22
    3a26:	8b 87       	std	Y+11, r24	; 0x0b
    3a28:	9c 87       	std	Y+12, r25	; 0x0c
    3a2a:	ad 87       	std	Y+13, r26	; 0x0d
    3a2c:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    3a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a30:	9c 81       	ldd	r25, Y+4	; 0x04
    3a32:	01 96       	adiw	r24, 0x01	; 1
    3a34:	8b 83       	std	Y+3, r24	; 0x03
    3a36:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	89 83       	std	Y+1, r24	; 0x01
    3a40:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	9a 81       	ldd	r25, Y+2	; 0x02
    3a46:	18 16       	cp	r1, r24
    3a48:	19 06       	cpc	r1, r25
    3a4a:	0c f4       	brge	.+2      	; 0x3a4e <ftoa_fixed+0x15a>
    3a4c:	a7 cf       	rjmp	.-178    	; 0x399c <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    3a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a50:	9c 81       	ldd	r25, Y+4	; 0x04
    3a52:	89 2b       	or	r24, r25
    3a54:	51 f4       	brne	.+20     	; 0x3a6a <ftoa_fixed+0x176>
        *buffer++ = '0';
    3a56:	89 85       	ldd	r24, Y+9	; 0x09
    3a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5a:	9c 01       	movw	r18, r24
    3a5c:	2f 5f       	subi	r18, 0xFF	; 255
    3a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a60:	29 87       	std	Y+9, r18	; 0x09
    3a62:	3a 87       	std	Y+10, r19	; 0x0a
    3a64:	20 e3       	ldi	r18, 0x30	; 48
    3a66:	fc 01       	movw	r30, r24
    3a68:	20 83       	st	Z, r18

    *buffer++ = '.';
    3a6a:	89 85       	ldd	r24, Y+9	; 0x09
    3a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6e:	9c 01       	movw	r18, r24
    3a70:	2f 5f       	subi	r18, 0xFF	; 255
    3a72:	3f 4f       	sbci	r19, 0xFF	; 255
    3a74:	29 87       	std	Y+9, r18	; 0x09
    3a76:	3a 87       	std	Y+10, r19	; 0x0a
    3a78:	2e e2       	ldi	r18, 0x2E	; 46
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    3a7e:	14 c0       	rjmp	.+40     	; 0x3aa8 <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    3a80:	89 85       	ldd	r24, Y+9	; 0x09
    3a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a84:	9c 01       	movw	r18, r24
    3a86:	2f 5f       	subi	r18, 0xFF	; 255
    3a88:	3f 4f       	sbci	r19, 0xFF	; 255
    3a8a:	29 87       	std	Y+9, r18	; 0x09
    3a8c:	3a 87       	std	Y+10, r19	; 0x0a
    3a8e:	20 e3       	ldi	r18, 0x30	; 48
    3a90:	fc 01       	movw	r30, r24
    3a92:	20 83       	st	Z, r18
        --exponent;
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	9a 81       	ldd	r25, Y+2	; 0x02
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	89 83       	std	Y+1, r24	; 0x01
    3a9c:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    3a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa2:	01 96       	adiw	r24, 0x01	; 1
    3aa4:	8b 83       	std	Y+3, r24	; 0x03
    3aa6:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3aac:	99 23       	and	r25, r25
    3aae:	0c f0       	brlt	.+2      	; 0x3ab2 <ftoa_fixed+0x1be>
    3ab0:	58 c0       	rjmp	.+176    	; 0x3b62 <ftoa_fixed+0x26e>
    3ab2:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <width.5062>
    3ab6:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <width.5062+0x1>
    3aba:	2b 81       	ldd	r18, Y+3	; 0x03
    3abc:	3c 81       	ldd	r19, Y+4	; 0x04
    3abe:	28 17       	cp	r18, r24
    3ac0:	39 07       	cpc	r19, r25
    3ac2:	f4 f2       	brlt	.-68     	; 0x3a80 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    3ac4:	4e c0       	rjmp	.+156    	; 0x3b62 <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    3ac6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ac8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3aca:	ad 85       	ldd	r26, Y+13	; 0x0d
    3acc:	be 85       	ldd	r27, Y+14	; 0x0e
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	40 e2       	ldi	r20, 0x20	; 32
    3ad4:	51 e4       	ldi	r21, 0x41	; 65
    3ad6:	bc 01       	movw	r22, r24
    3ad8:	cd 01       	movw	r24, r26
    3ada:	0e 94 bb 20 	call	0x4176	; 0x4176 <__mulsf3>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	bc 01       	movw	r22, r24
    3ae4:	cd 01       	movw	r24, r26
    3ae6:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <__fixsfsi>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	8f 83       	std	Y+7, r24	; 0x07
    3af0:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    3af2:	89 85       	ldd	r24, Y+9	; 0x09
    3af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af6:	9c 01       	movw	r18, r24
    3af8:	2f 5f       	subi	r18, 0xFF	; 255
    3afa:	3f 4f       	sbci	r19, 0xFF	; 255
    3afc:	29 87       	std	Y+9, r18	; 0x09
    3afe:	3a 87       	std	Y+10, r19	; 0x0a
    3b00:	2f 81       	ldd	r18, Y+7	; 0x07
    3b02:	20 5d       	subi	r18, 0xD0	; 208
    3b04:	fc 01       	movw	r30, r24
    3b06:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    3b08:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b0c:	ad 85       	ldd	r26, Y+13	; 0x0d
    3b0e:	be 85       	ldd	r27, Y+14	; 0x0e
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	40 e2       	ldi	r20, 0x20	; 32
    3b16:	51 e4       	ldi	r21, 0x41	; 65
    3b18:	bc 01       	movw	r22, r24
    3b1a:	cd 01       	movw	r24, r26
    3b1c:	0e 94 bb 20 	call	0x4176	; 0x4176 <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	6c 01       	movw	r12, r24
    3b26:	7d 01       	movw	r14, r26
    3b28:	8f 81       	ldd	r24, Y+7	; 0x07
    3b2a:	98 85       	ldd	r25, Y+8	; 0x08
    3b2c:	09 2e       	mov	r0, r25
    3b2e:	00 0c       	add	r0, r0
    3b30:	aa 0b       	sbc	r26, r26
    3b32:	bb 0b       	sbc	r27, r27
    3b34:	bc 01       	movw	r22, r24
    3b36:	cd 01       	movw	r24, r26
    3b38:	0e 94 06 20 	call	0x400c	; 0x400c <__floatsisf>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	9c 01       	movw	r18, r24
    3b42:	ad 01       	movw	r20, r26
    3b44:	c7 01       	movw	r24, r14
    3b46:	b6 01       	movw	r22, r12
    3b48:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__subsf3>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	8b 87       	std	Y+11, r24	; 0x0b
    3b52:	9c 87       	std	Y+12, r25	; 0x0c
    3b54:	ad 87       	std	Y+13, r26	; 0x0d
    3b56:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    3b58:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5c:	01 96       	adiw	r24, 0x01	; 1
    3b5e:	8b 83       	std	Y+3, r24	; 0x03
    3b60:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    3b62:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <width.5062>
    3b66:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <width.5062+0x1>
    3b6a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b6c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b6e:	28 17       	cp	r18, r24
    3b70:	39 07       	cpc	r19, r25
    3b72:	0c f4       	brge	.+2      	; 0x3b76 <ftoa_fixed+0x282>
    3b74:	a8 cf       	rjmp	.-176    	; 0x3ac6 <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    3b76:	89 85       	ldd	r24, Y+9	; 0x09
    3b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	10 82       	st	Z, r1
}
    3b7e:	2e 96       	adiw	r28, 0x0e	; 14
    3b80:	cd bf       	out	0x3d, r28	; 61
    3b82:	de bf       	out	0x3e, r29	; 62
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	ff 90       	pop	r15
    3b8a:	ef 90       	pop	r14
    3b8c:	df 90       	pop	r13
    3b8e:	cf 90       	pop	r12
    3b90:	08 95       	ret

00003b92 <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    3b92:	cf 92       	push	r12
    3b94:	df 92       	push	r13
    3b96:	ef 92       	push	r14
    3b98:	ff 92       	push	r15
    3b9a:	cf 93       	push	r28
    3b9c:	df 93       	push	r29
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
    3ba2:	2e 97       	sbiw	r28, 0x0e	; 14
    3ba4:	cd bf       	out	0x3d, r28	; 61
    3ba6:	de bf       	out	0x3e, r29	; 62
    3ba8:	89 87       	std	Y+9, r24	; 0x09
    3baa:	9a 87       	std	Y+10, r25	; 0x0a
    3bac:	4b 87       	std	Y+11, r20	; 0x0b
    3bae:	5c 87       	std	Y+12, r21	; 0x0c
    3bb0:	6d 87       	std	Y+13, r22	; 0x0d
    3bb2:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    3bb4:	1b 82       	std	Y+3, r1	; 0x03
    3bb6:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    3bb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bba:	9c 85       	ldd	r25, Y+12	; 0x0c
    3bbc:	ad 85       	ldd	r26, Y+13	; 0x0d
    3bbe:	be 85       	ldd	r27, Y+14	; 0x0e
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	a9 01       	movw	r20, r18
    3bc6:	bc 01       	movw	r22, r24
    3bc8:	cd 01       	movw	r24, r26
    3bca:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__cmpsf2>
    3bce:	88 23       	and	r24, r24
    3bd0:	59 f4       	brne	.+22     	; 0x3be8 <ftoa_sci+0x56>
        buffer[0] = '0';
    3bd2:	89 85       	ldd	r24, Y+9	; 0x09
    3bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd6:	20 e3       	ldi	r18, 0x30	; 48
    3bd8:	fc 01       	movw	r30, r24
    3bda:	20 83       	st	Z, r18
        buffer[1] = '\0';
    3bdc:	89 85       	ldd	r24, Y+9	; 0x09
    3bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be0:	01 96       	adiw	r24, 0x01	; 1
    3be2:	fc 01       	movw	r30, r24
    3be4:	10 82       	st	Z, r1
        return;
    3be6:	ec c0       	rjmp	.+472    	; 0x3dc0 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    3be8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bea:	9c 85       	ldd	r25, Y+12	; 0x0c
    3bec:	ad 85       	ldd	r26, Y+13	; 0x0d
    3bee:	be 85       	ldd	r27, Y+14	; 0x0e
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	a9 01       	movw	r20, r18
    3bf6:	bc 01       	movw	r22, r24
    3bf8:	cd 01       	movw	r24, r26
    3bfa:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__cmpsf2>
    3bfe:	88 23       	and	r24, r24
    3c00:	9c f4       	brge	.+38     	; 0x3c28 <ftoa_sci+0x96>
        *buffer++ = '-';
    3c02:	89 85       	ldd	r24, Y+9	; 0x09
    3c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c06:	9c 01       	movw	r18, r24
    3c08:	2f 5f       	subi	r18, 0xFF	; 255
    3c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c0c:	29 87       	std	Y+9, r18	; 0x09
    3c0e:	3a 87       	std	Y+10, r19	; 0x0a
    3c10:	2d e2       	ldi	r18, 0x2D	; 45
    3c12:	fc 01       	movw	r30, r24
    3c14:	20 83       	st	Z, r18
        value = -value;
    3c16:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c18:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c1a:	ad 85       	ldd	r26, Y+13	; 0x0d
    3c1c:	be 85       	ldd	r27, Y+14	; 0x0e
    3c1e:	b0 58       	subi	r27, 0x80	; 128
    3c20:	8b 87       	std	Y+11, r24	; 0x0b
    3c22:	9c 87       	std	Y+12, r25	; 0x0c
    3c24:	ad 87       	std	Y+13, r26	; 0x0d
    3c26:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    3c28:	ce 01       	movw	r24, r28
    3c2a:	0b 96       	adiw	r24, 0x0b	; 11
    3c2c:	0e 94 0d 1c 	call	0x381a	; 0x381a <normalize>
    3c30:	8b 83       	std	Y+3, r24	; 0x03
    3c32:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    3c34:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c36:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c38:	ad 85       	ldd	r26, Y+13	; 0x0d
    3c3a:	be 85       	ldd	r27, Y+14	; 0x0e
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	40 e2       	ldi	r20, 0x20	; 32
    3c42:	51 e4       	ldi	r21, 0x41	; 65
    3c44:	bc 01       	movw	r22, r24
    3c46:	cd 01       	movw	r24, r26
    3c48:	0e 94 bb 20 	call	0x4176	; 0x4176 <__mulsf3>
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	cb 01       	movw	r24, r22
    3c50:	bc 01       	movw	r22, r24
    3c52:	cd 01       	movw	r24, r26
    3c54:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <__fixsfsi>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	8d 83       	std	Y+5, r24	; 0x05
    3c5e:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    3c60:	89 85       	ldd	r24, Y+9	; 0x09
    3c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c64:	9c 01       	movw	r18, r24
    3c66:	2f 5f       	subi	r18, 0xFF	; 255
    3c68:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6a:	29 87       	std	Y+9, r18	; 0x09
    3c6c:	3a 87       	std	Y+10, r19	; 0x0a
    3c6e:	2d 81       	ldd	r18, Y+5	; 0x05
    3c70:	20 5d       	subi	r18, 0xD0	; 208
    3c72:	fc 01       	movw	r30, r24
    3c74:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    3c76:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c78:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c7a:	ad 85       	ldd	r26, Y+13	; 0x0d
    3c7c:	be 85       	ldd	r27, Y+14	; 0x0e
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	40 e2       	ldi	r20, 0x20	; 32
    3c84:	51 e4       	ldi	r21, 0x41	; 65
    3c86:	bc 01       	movw	r22, r24
    3c88:	cd 01       	movw	r24, r26
    3c8a:	0e 94 bb 20 	call	0x4176	; 0x4176 <__mulsf3>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	6c 01       	movw	r12, r24
    3c94:	7d 01       	movw	r14, r26
    3c96:	8d 81       	ldd	r24, Y+5	; 0x05
    3c98:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9a:	09 2e       	mov	r0, r25
    3c9c:	00 0c       	add	r0, r0
    3c9e:	aa 0b       	sbc	r26, r26
    3ca0:	bb 0b       	sbc	r27, r27
    3ca2:	bc 01       	movw	r22, r24
    3ca4:	cd 01       	movw	r24, r26
    3ca6:	0e 94 06 20 	call	0x400c	; 0x400c <__floatsisf>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	9c 01       	movw	r18, r24
    3cb0:	ad 01       	movw	r20, r26
    3cb2:	c7 01       	movw	r24, r14
    3cb4:	b6 01       	movw	r22, r12
    3cb6:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__subsf3>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	8b 87       	std	Y+11, r24	; 0x0b
    3cc0:	9c 87       	std	Y+12, r25	; 0x0c
    3cc2:	ad 87       	std	Y+13, r26	; 0x0d
    3cc4:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    3cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	8b 83       	std	Y+3, r24	; 0x03
    3cce:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    3cd0:	89 85       	ldd	r24, Y+9	; 0x09
    3cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd4:	9c 01       	movw	r18, r24
    3cd6:	2f 5f       	subi	r18, 0xFF	; 255
    3cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cda:	29 87       	std	Y+9, r18	; 0x09
    3cdc:	3a 87       	std	Y+10, r19	; 0x0a
    3cde:	2e e2       	ldi	r18, 0x2E	; 46
    3ce0:	fc 01       	movw	r30, r24
    3ce2:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    3ce4:	19 82       	std	Y+1, r1	; 0x01
    3ce6:	1a 82       	std	Y+2, r1	; 0x02
    3ce8:	4e c0       	rjmp	.+156    	; 0x3d86 <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    3cea:	8b 85       	ldd	r24, Y+11	; 0x0b
    3cec:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cee:	ad 85       	ldd	r26, Y+13	; 0x0d
    3cf0:	be 85       	ldd	r27, Y+14	; 0x0e
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 e2       	ldi	r20, 0x20	; 32
    3cf8:	51 e4       	ldi	r21, 0x41	; 65
    3cfa:	bc 01       	movw	r22, r24
    3cfc:	cd 01       	movw	r24, r26
    3cfe:	0e 94 bb 20 	call	0x4176	; 0x4176 <__mulsf3>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	bc 01       	movw	r22, r24
    3d08:	cd 01       	movw	r24, r26
    3d0a:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <__fixsfsi>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	8f 83       	std	Y+7, r24	; 0x07
    3d14:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    3d16:	89 85       	ldd	r24, Y+9	; 0x09
    3d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d1a:	9c 01       	movw	r18, r24
    3d1c:	2f 5f       	subi	r18, 0xFF	; 255
    3d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d20:	29 87       	std	Y+9, r18	; 0x09
    3d22:	3a 87       	std	Y+10, r19	; 0x0a
    3d24:	2f 81       	ldd	r18, Y+7	; 0x07
    3d26:	20 5d       	subi	r18, 0xD0	; 208
    3d28:	fc 01       	movw	r30, r24
    3d2a:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    3d2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d30:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d32:	be 85       	ldd	r27, Y+14	; 0x0e
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	40 e2       	ldi	r20, 0x20	; 32
    3d3a:	51 e4       	ldi	r21, 0x41	; 65
    3d3c:	bc 01       	movw	r22, r24
    3d3e:	cd 01       	movw	r24, r26
    3d40:	0e 94 bb 20 	call	0x4176	; 0x4176 <__mulsf3>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	6c 01       	movw	r12, r24
    3d4a:	7d 01       	movw	r14, r26
    3d4c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d4e:	98 85       	ldd	r25, Y+8	; 0x08
    3d50:	09 2e       	mov	r0, r25
    3d52:	00 0c       	add	r0, r0
    3d54:	aa 0b       	sbc	r26, r26
    3d56:	bb 0b       	sbc	r27, r27
    3d58:	bc 01       	movw	r22, r24
    3d5a:	cd 01       	movw	r24, r26
    3d5c:	0e 94 06 20 	call	0x400c	; 0x400c <__floatsisf>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	9c 01       	movw	r18, r24
    3d66:	ad 01       	movw	r20, r26
    3d68:	c7 01       	movw	r24, r14
    3d6a:	b6 01       	movw	r22, r12
    3d6c:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__subsf3>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	8b 87       	std	Y+11, r24	; 0x0b
    3d76:	9c 87       	std	Y+12, r25	; 0x0c
    3d78:	ad 87       	std	Y+13, r26	; 0x0d
    3d7a:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d80:	01 96       	adiw	r24, 0x01	; 1
    3d82:	89 83       	std	Y+1, r24	; 0x01
    3d84:	9a 83       	std	Y+2, r25	; 0x02
    3d86:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <width.5079>
    3d8a:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <width.5079+0x1>
    3d8e:	29 81       	ldd	r18, Y+1	; 0x01
    3d90:	3a 81       	ldd	r19, Y+2	; 0x02
    3d92:	28 17       	cp	r18, r24
    3d94:	39 07       	cpc	r19, r25
    3d96:	0c f4       	brge	.+2      	; 0x3d9a <ftoa_sci+0x208>
    3d98:	a8 cf       	rjmp	.-176    	; 0x3cea <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    3d9a:	89 85       	ldd	r24, Y+9	; 0x09
    3d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d9e:	9c 01       	movw	r18, r24
    3da0:	2f 5f       	subi	r18, 0xFF	; 255
    3da2:	3f 4f       	sbci	r19, 0xFF	; 255
    3da4:	29 87       	std	Y+9, r18	; 0x09
    3da6:	3a 87       	std	Y+10, r19	; 0x0a
    3da8:	25 e6       	ldi	r18, 0x65	; 101
    3daa:	fc 01       	movw	r30, r24
    3dac:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    3dae:	29 85       	ldd	r18, Y+9	; 0x09
    3db0:	3a 85       	ldd	r19, Y+10	; 0x0a
    3db2:	8b 81       	ldd	r24, Y+3	; 0x03
    3db4:	9c 81       	ldd	r25, Y+4	; 0x04
    3db6:	4a e0       	ldi	r20, 0x0A	; 10
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	b9 01       	movw	r22, r18
    3dbc:	0e 94 d7 25 	call	0x4bae	; 0x4bae <itoa>
}
    3dc0:	2e 96       	adiw	r28, 0x0e	; 14
    3dc2:	cd bf       	out	0x3d, r28	; 61
    3dc4:	de bf       	out	0x3e, r29	; 62
    3dc6:	df 91       	pop	r29
    3dc8:	cf 91       	pop	r28
    3dca:	ff 90       	pop	r15
    3dcc:	ef 90       	pop	r14
    3dce:	df 90       	pop	r13
    3dd0:	cf 90       	pop	r12
    3dd2:	08 95       	ret

00003dd4 <__subsf3>:
    3dd4:	50 58       	subi	r21, 0x80	; 128

00003dd6 <__addsf3>:
    3dd6:	bb 27       	eor	r27, r27
    3dd8:	aa 27       	eor	r26, r26
    3dda:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3x>
    3dde:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__fp_round>
    3de2:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__fp_pscA>
    3de6:	38 f0       	brcs	.+14     	; 0x3df6 <__addsf3+0x20>
    3de8:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fp_pscB>
    3dec:	20 f0       	brcs	.+8      	; 0x3df6 <__addsf3+0x20>
    3dee:	39 f4       	brne	.+14     	; 0x3dfe <__addsf3+0x28>
    3df0:	9f 3f       	cpi	r25, 0xFF	; 255
    3df2:	19 f4       	brne	.+6      	; 0x3dfa <__addsf3+0x24>
    3df4:	26 f4       	brtc	.+8      	; 0x3dfe <__addsf3+0x28>
    3df6:	0c 94 6b 20 	jmp	0x40d6	; 0x40d6 <__fp_nan>
    3dfa:	0e f4       	brtc	.+2      	; 0x3dfe <__addsf3+0x28>
    3dfc:	e0 95       	com	r30
    3dfe:	e7 fb       	bst	r30, 7
    3e00:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__fp_inf>

00003e04 <__addsf3x>:
    3e04:	e9 2f       	mov	r30, r25
    3e06:	0e 94 8d 20 	call	0x411a	; 0x411a <__fp_split3>
    3e0a:	58 f3       	brcs	.-42     	; 0x3de2 <__addsf3+0xc>
    3e0c:	ba 17       	cp	r27, r26
    3e0e:	62 07       	cpc	r22, r18
    3e10:	73 07       	cpc	r23, r19
    3e12:	84 07       	cpc	r24, r20
    3e14:	95 07       	cpc	r25, r21
    3e16:	20 f0       	brcs	.+8      	; 0x3e20 <__addsf3x+0x1c>
    3e18:	79 f4       	brne	.+30     	; 0x3e38 <__addsf3x+0x34>
    3e1a:	a6 f5       	brtc	.+104    	; 0x3e84 <__addsf3x+0x80>
    3e1c:	0c 94 af 20 	jmp	0x415e	; 0x415e <__fp_zero>
    3e20:	0e f4       	brtc	.+2      	; 0x3e24 <__addsf3x+0x20>
    3e22:	e0 95       	com	r30
    3e24:	0b 2e       	mov	r0, r27
    3e26:	ba 2f       	mov	r27, r26
    3e28:	a0 2d       	mov	r26, r0
    3e2a:	0b 01       	movw	r0, r22
    3e2c:	b9 01       	movw	r22, r18
    3e2e:	90 01       	movw	r18, r0
    3e30:	0c 01       	movw	r0, r24
    3e32:	ca 01       	movw	r24, r20
    3e34:	a0 01       	movw	r20, r0
    3e36:	11 24       	eor	r1, r1
    3e38:	ff 27       	eor	r31, r31
    3e3a:	59 1b       	sub	r21, r25
    3e3c:	99 f0       	breq	.+38     	; 0x3e64 <__addsf3x+0x60>
    3e3e:	59 3f       	cpi	r21, 0xF9	; 249
    3e40:	50 f4       	brcc	.+20     	; 0x3e56 <__addsf3x+0x52>
    3e42:	50 3e       	cpi	r21, 0xE0	; 224
    3e44:	68 f1       	brcs	.+90     	; 0x3ea0 <__addsf3x+0x9c>
    3e46:	1a 16       	cp	r1, r26
    3e48:	f0 40       	sbci	r31, 0x00	; 0
    3e4a:	a2 2f       	mov	r26, r18
    3e4c:	23 2f       	mov	r18, r19
    3e4e:	34 2f       	mov	r19, r20
    3e50:	44 27       	eor	r20, r20
    3e52:	58 5f       	subi	r21, 0xF8	; 248
    3e54:	f3 cf       	rjmp	.-26     	; 0x3e3c <__addsf3x+0x38>
    3e56:	46 95       	lsr	r20
    3e58:	37 95       	ror	r19
    3e5a:	27 95       	ror	r18
    3e5c:	a7 95       	ror	r26
    3e5e:	f0 40       	sbci	r31, 0x00	; 0
    3e60:	53 95       	inc	r21
    3e62:	c9 f7       	brne	.-14     	; 0x3e56 <__addsf3x+0x52>
    3e64:	7e f4       	brtc	.+30     	; 0x3e84 <__addsf3x+0x80>
    3e66:	1f 16       	cp	r1, r31
    3e68:	ba 0b       	sbc	r27, r26
    3e6a:	62 0b       	sbc	r22, r18
    3e6c:	73 0b       	sbc	r23, r19
    3e6e:	84 0b       	sbc	r24, r20
    3e70:	ba f0       	brmi	.+46     	; 0x3ea0 <__addsf3x+0x9c>
    3e72:	91 50       	subi	r25, 0x01	; 1
    3e74:	a1 f0       	breq	.+40     	; 0x3e9e <__addsf3x+0x9a>
    3e76:	ff 0f       	add	r31, r31
    3e78:	bb 1f       	adc	r27, r27
    3e7a:	66 1f       	adc	r22, r22
    3e7c:	77 1f       	adc	r23, r23
    3e7e:	88 1f       	adc	r24, r24
    3e80:	c2 f7       	brpl	.-16     	; 0x3e72 <__addsf3x+0x6e>
    3e82:	0e c0       	rjmp	.+28     	; 0x3ea0 <__addsf3x+0x9c>
    3e84:	ba 0f       	add	r27, r26
    3e86:	62 1f       	adc	r22, r18
    3e88:	73 1f       	adc	r23, r19
    3e8a:	84 1f       	adc	r24, r20
    3e8c:	48 f4       	brcc	.+18     	; 0x3ea0 <__addsf3x+0x9c>
    3e8e:	87 95       	ror	r24
    3e90:	77 95       	ror	r23
    3e92:	67 95       	ror	r22
    3e94:	b7 95       	ror	r27
    3e96:	f7 95       	ror	r31
    3e98:	9e 3f       	cpi	r25, 0xFE	; 254
    3e9a:	08 f0       	brcs	.+2      	; 0x3e9e <__addsf3x+0x9a>
    3e9c:	b0 cf       	rjmp	.-160    	; 0x3dfe <__addsf3+0x28>
    3e9e:	93 95       	inc	r25
    3ea0:	88 0f       	add	r24, r24
    3ea2:	08 f0       	brcs	.+2      	; 0x3ea6 <__addsf3x+0xa2>
    3ea4:	99 27       	eor	r25, r25
    3ea6:	ee 0f       	add	r30, r30
    3ea8:	97 95       	ror	r25
    3eaa:	87 95       	ror	r24
    3eac:	08 95       	ret

00003eae <__cmpsf2>:
    3eae:	0e 94 41 20 	call	0x4082	; 0x4082 <__fp_cmp>
    3eb2:	08 f4       	brcc	.+2      	; 0x3eb6 <__cmpsf2+0x8>
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	08 95       	ret

00003eb8 <__divsf3>:
    3eb8:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__divsf3x>
    3ebc:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__fp_round>
    3ec0:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fp_pscB>
    3ec4:	58 f0       	brcs	.+22     	; 0x3edc <__divsf3+0x24>
    3ec6:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__fp_pscA>
    3eca:	40 f0       	brcs	.+16     	; 0x3edc <__divsf3+0x24>
    3ecc:	29 f4       	brne	.+10     	; 0x3ed8 <__divsf3+0x20>
    3ece:	5f 3f       	cpi	r21, 0xFF	; 255
    3ed0:	29 f0       	breq	.+10     	; 0x3edc <__divsf3+0x24>
    3ed2:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__fp_inf>
    3ed6:	51 11       	cpse	r21, r1
    3ed8:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__fp_szero>
    3edc:	0c 94 6b 20 	jmp	0x40d6	; 0x40d6 <__fp_nan>

00003ee0 <__divsf3x>:
    3ee0:	0e 94 8d 20 	call	0x411a	; 0x411a <__fp_split3>
    3ee4:	68 f3       	brcs	.-38     	; 0x3ec0 <__divsf3+0x8>

00003ee6 <__divsf3_pse>:
    3ee6:	99 23       	and	r25, r25
    3ee8:	b1 f3       	breq	.-20     	; 0x3ed6 <__divsf3+0x1e>
    3eea:	55 23       	and	r21, r21
    3eec:	91 f3       	breq	.-28     	; 0x3ed2 <__divsf3+0x1a>
    3eee:	95 1b       	sub	r25, r21
    3ef0:	55 0b       	sbc	r21, r21
    3ef2:	bb 27       	eor	r27, r27
    3ef4:	aa 27       	eor	r26, r26
    3ef6:	62 17       	cp	r22, r18
    3ef8:	73 07       	cpc	r23, r19
    3efa:	84 07       	cpc	r24, r20
    3efc:	38 f0       	brcs	.+14     	; 0x3f0c <__divsf3_pse+0x26>
    3efe:	9f 5f       	subi	r25, 0xFF	; 255
    3f00:	5f 4f       	sbci	r21, 0xFF	; 255
    3f02:	22 0f       	add	r18, r18
    3f04:	33 1f       	adc	r19, r19
    3f06:	44 1f       	adc	r20, r20
    3f08:	aa 1f       	adc	r26, r26
    3f0a:	a9 f3       	breq	.-22     	; 0x3ef6 <__divsf3_pse+0x10>
    3f0c:	35 d0       	rcall	.+106    	; 0x3f78 <__divsf3_pse+0x92>
    3f0e:	0e 2e       	mov	r0, r30
    3f10:	3a f0       	brmi	.+14     	; 0x3f20 <__divsf3_pse+0x3a>
    3f12:	e0 e8       	ldi	r30, 0x80	; 128
    3f14:	32 d0       	rcall	.+100    	; 0x3f7a <__divsf3_pse+0x94>
    3f16:	91 50       	subi	r25, 0x01	; 1
    3f18:	50 40       	sbci	r21, 0x00	; 0
    3f1a:	e6 95       	lsr	r30
    3f1c:	00 1c       	adc	r0, r0
    3f1e:	ca f7       	brpl	.-14     	; 0x3f12 <__divsf3_pse+0x2c>
    3f20:	2b d0       	rcall	.+86     	; 0x3f78 <__divsf3_pse+0x92>
    3f22:	fe 2f       	mov	r31, r30
    3f24:	29 d0       	rcall	.+82     	; 0x3f78 <__divsf3_pse+0x92>
    3f26:	66 0f       	add	r22, r22
    3f28:	77 1f       	adc	r23, r23
    3f2a:	88 1f       	adc	r24, r24
    3f2c:	bb 1f       	adc	r27, r27
    3f2e:	26 17       	cp	r18, r22
    3f30:	37 07       	cpc	r19, r23
    3f32:	48 07       	cpc	r20, r24
    3f34:	ab 07       	cpc	r26, r27
    3f36:	b0 e8       	ldi	r27, 0x80	; 128
    3f38:	09 f0       	breq	.+2      	; 0x3f3c <__divsf3_pse+0x56>
    3f3a:	bb 0b       	sbc	r27, r27
    3f3c:	80 2d       	mov	r24, r0
    3f3e:	bf 01       	movw	r22, r30
    3f40:	ff 27       	eor	r31, r31
    3f42:	93 58       	subi	r25, 0x83	; 131
    3f44:	5f 4f       	sbci	r21, 0xFF	; 255
    3f46:	3a f0       	brmi	.+14     	; 0x3f56 <__divsf3_pse+0x70>
    3f48:	9e 3f       	cpi	r25, 0xFE	; 254
    3f4a:	51 05       	cpc	r21, r1
    3f4c:	78 f0       	brcs	.+30     	; 0x3f6c <__divsf3_pse+0x86>
    3f4e:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__fp_inf>
    3f52:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__fp_szero>
    3f56:	5f 3f       	cpi	r21, 0xFF	; 255
    3f58:	e4 f3       	brlt	.-8      	; 0x3f52 <__divsf3_pse+0x6c>
    3f5a:	98 3e       	cpi	r25, 0xE8	; 232
    3f5c:	d4 f3       	brlt	.-12     	; 0x3f52 <__divsf3_pse+0x6c>
    3f5e:	86 95       	lsr	r24
    3f60:	77 95       	ror	r23
    3f62:	67 95       	ror	r22
    3f64:	b7 95       	ror	r27
    3f66:	f7 95       	ror	r31
    3f68:	9f 5f       	subi	r25, 0xFF	; 255
    3f6a:	c9 f7       	brne	.-14     	; 0x3f5e <__divsf3_pse+0x78>
    3f6c:	88 0f       	add	r24, r24
    3f6e:	91 1d       	adc	r25, r1
    3f70:	96 95       	lsr	r25
    3f72:	87 95       	ror	r24
    3f74:	97 f9       	bld	r25, 7
    3f76:	08 95       	ret
    3f78:	e1 e0       	ldi	r30, 0x01	; 1
    3f7a:	66 0f       	add	r22, r22
    3f7c:	77 1f       	adc	r23, r23
    3f7e:	88 1f       	adc	r24, r24
    3f80:	bb 1f       	adc	r27, r27
    3f82:	62 17       	cp	r22, r18
    3f84:	73 07       	cpc	r23, r19
    3f86:	84 07       	cpc	r24, r20
    3f88:	ba 07       	cpc	r27, r26
    3f8a:	20 f0       	brcs	.+8      	; 0x3f94 <__divsf3_pse+0xae>
    3f8c:	62 1b       	sub	r22, r18
    3f8e:	73 0b       	sbc	r23, r19
    3f90:	84 0b       	sbc	r24, r20
    3f92:	ba 0b       	sbc	r27, r26
    3f94:	ee 1f       	adc	r30, r30
    3f96:	88 f7       	brcc	.-30     	; 0x3f7a <__divsf3_pse+0x94>
    3f98:	e0 95       	com	r30
    3f9a:	08 95       	ret

00003f9c <__fixsfsi>:
    3f9c:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <__fixunssfsi>
    3fa0:	68 94       	set
    3fa2:	b1 11       	cpse	r27, r1
    3fa4:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__fp_szero>
    3fa8:	08 95       	ret

00003faa <__fixunssfsi>:
    3faa:	0e 94 95 20 	call	0x412a	; 0x412a <__fp_splitA>
    3fae:	88 f0       	brcs	.+34     	; 0x3fd2 <__fixunssfsi+0x28>
    3fb0:	9f 57       	subi	r25, 0x7F	; 127
    3fb2:	98 f0       	brcs	.+38     	; 0x3fda <__fixunssfsi+0x30>
    3fb4:	b9 2f       	mov	r27, r25
    3fb6:	99 27       	eor	r25, r25
    3fb8:	b7 51       	subi	r27, 0x17	; 23
    3fba:	b0 f0       	brcs	.+44     	; 0x3fe8 <__fixunssfsi+0x3e>
    3fbc:	e1 f0       	breq	.+56     	; 0x3ff6 <__fixunssfsi+0x4c>
    3fbe:	66 0f       	add	r22, r22
    3fc0:	77 1f       	adc	r23, r23
    3fc2:	88 1f       	adc	r24, r24
    3fc4:	99 1f       	adc	r25, r25
    3fc6:	1a f0       	brmi	.+6      	; 0x3fce <__fixunssfsi+0x24>
    3fc8:	ba 95       	dec	r27
    3fca:	c9 f7       	brne	.-14     	; 0x3fbe <__fixunssfsi+0x14>
    3fcc:	14 c0       	rjmp	.+40     	; 0x3ff6 <__fixunssfsi+0x4c>
    3fce:	b1 30       	cpi	r27, 0x01	; 1
    3fd0:	91 f0       	breq	.+36     	; 0x3ff6 <__fixunssfsi+0x4c>
    3fd2:	0e 94 af 20 	call	0x415e	; 0x415e <__fp_zero>
    3fd6:	b1 e0       	ldi	r27, 0x01	; 1
    3fd8:	08 95       	ret
    3fda:	0c 94 af 20 	jmp	0x415e	; 0x415e <__fp_zero>
    3fde:	67 2f       	mov	r22, r23
    3fe0:	78 2f       	mov	r23, r24
    3fe2:	88 27       	eor	r24, r24
    3fe4:	b8 5f       	subi	r27, 0xF8	; 248
    3fe6:	39 f0       	breq	.+14     	; 0x3ff6 <__fixunssfsi+0x4c>
    3fe8:	b9 3f       	cpi	r27, 0xF9	; 249
    3fea:	cc f3       	brlt	.-14     	; 0x3fde <__fixunssfsi+0x34>
    3fec:	86 95       	lsr	r24
    3fee:	77 95       	ror	r23
    3ff0:	67 95       	ror	r22
    3ff2:	b3 95       	inc	r27
    3ff4:	d9 f7       	brne	.-10     	; 0x3fec <__fixunssfsi+0x42>
    3ff6:	3e f4       	brtc	.+14     	; 0x4006 <__stack+0x7>
    3ff8:	90 95       	com	r25
    3ffa:	80 95       	com	r24
    3ffc:	70 95       	com	r23
    3ffe:	61 95       	neg	r22
    4000:	7f 4f       	sbci	r23, 0xFF	; 255
    4002:	8f 4f       	sbci	r24, 0xFF	; 255
    4004:	9f 4f       	sbci	r25, 0xFF	; 255
    4006:	08 95       	ret

00004008 <__floatunsisf>:
    4008:	e8 94       	clt
    400a:	09 c0       	rjmp	.+18     	; 0x401e <__floatsisf+0x12>

0000400c <__floatsisf>:
    400c:	97 fb       	bst	r25, 7
    400e:	3e f4       	brtc	.+14     	; 0x401e <__floatsisf+0x12>
    4010:	90 95       	com	r25
    4012:	80 95       	com	r24
    4014:	70 95       	com	r23
    4016:	61 95       	neg	r22
    4018:	7f 4f       	sbci	r23, 0xFF	; 255
    401a:	8f 4f       	sbci	r24, 0xFF	; 255
    401c:	9f 4f       	sbci	r25, 0xFF	; 255
    401e:	99 23       	and	r25, r25
    4020:	a9 f0       	breq	.+42     	; 0x404c <__floatsisf+0x40>
    4022:	f9 2f       	mov	r31, r25
    4024:	96 e9       	ldi	r25, 0x96	; 150
    4026:	bb 27       	eor	r27, r27
    4028:	93 95       	inc	r25
    402a:	f6 95       	lsr	r31
    402c:	87 95       	ror	r24
    402e:	77 95       	ror	r23
    4030:	67 95       	ror	r22
    4032:	b7 95       	ror	r27
    4034:	f1 11       	cpse	r31, r1
    4036:	f8 cf       	rjmp	.-16     	; 0x4028 <__floatsisf+0x1c>
    4038:	fa f4       	brpl	.+62     	; 0x4078 <__floatsisf+0x6c>
    403a:	bb 0f       	add	r27, r27
    403c:	11 f4       	brne	.+4      	; 0x4042 <__floatsisf+0x36>
    403e:	60 ff       	sbrs	r22, 0
    4040:	1b c0       	rjmp	.+54     	; 0x4078 <__floatsisf+0x6c>
    4042:	6f 5f       	subi	r22, 0xFF	; 255
    4044:	7f 4f       	sbci	r23, 0xFF	; 255
    4046:	8f 4f       	sbci	r24, 0xFF	; 255
    4048:	9f 4f       	sbci	r25, 0xFF	; 255
    404a:	16 c0       	rjmp	.+44     	; 0x4078 <__floatsisf+0x6c>
    404c:	88 23       	and	r24, r24
    404e:	11 f0       	breq	.+4      	; 0x4054 <__floatsisf+0x48>
    4050:	96 e9       	ldi	r25, 0x96	; 150
    4052:	11 c0       	rjmp	.+34     	; 0x4076 <__floatsisf+0x6a>
    4054:	77 23       	and	r23, r23
    4056:	21 f0       	breq	.+8      	; 0x4060 <__floatsisf+0x54>
    4058:	9e e8       	ldi	r25, 0x8E	; 142
    405a:	87 2f       	mov	r24, r23
    405c:	76 2f       	mov	r23, r22
    405e:	05 c0       	rjmp	.+10     	; 0x406a <__floatsisf+0x5e>
    4060:	66 23       	and	r22, r22
    4062:	71 f0       	breq	.+28     	; 0x4080 <__floatsisf+0x74>
    4064:	96 e8       	ldi	r25, 0x86	; 134
    4066:	86 2f       	mov	r24, r22
    4068:	70 e0       	ldi	r23, 0x00	; 0
    406a:	60 e0       	ldi	r22, 0x00	; 0
    406c:	2a f0       	brmi	.+10     	; 0x4078 <__floatsisf+0x6c>
    406e:	9a 95       	dec	r25
    4070:	66 0f       	add	r22, r22
    4072:	77 1f       	adc	r23, r23
    4074:	88 1f       	adc	r24, r24
    4076:	da f7       	brpl	.-10     	; 0x406e <__floatsisf+0x62>
    4078:	88 0f       	add	r24, r24
    407a:	96 95       	lsr	r25
    407c:	87 95       	ror	r24
    407e:	97 f9       	bld	r25, 7
    4080:	08 95       	ret

00004082 <__fp_cmp>:
    4082:	99 0f       	add	r25, r25
    4084:	00 08       	sbc	r0, r0
    4086:	55 0f       	add	r21, r21
    4088:	aa 0b       	sbc	r26, r26
    408a:	e0 e8       	ldi	r30, 0x80	; 128
    408c:	fe ef       	ldi	r31, 0xFE	; 254
    408e:	16 16       	cp	r1, r22
    4090:	17 06       	cpc	r1, r23
    4092:	e8 07       	cpc	r30, r24
    4094:	f9 07       	cpc	r31, r25
    4096:	c0 f0       	brcs	.+48     	; 0x40c8 <__fp_cmp+0x46>
    4098:	12 16       	cp	r1, r18
    409a:	13 06       	cpc	r1, r19
    409c:	e4 07       	cpc	r30, r20
    409e:	f5 07       	cpc	r31, r21
    40a0:	98 f0       	brcs	.+38     	; 0x40c8 <__fp_cmp+0x46>
    40a2:	62 1b       	sub	r22, r18
    40a4:	73 0b       	sbc	r23, r19
    40a6:	84 0b       	sbc	r24, r20
    40a8:	95 0b       	sbc	r25, r21
    40aa:	39 f4       	brne	.+14     	; 0x40ba <__fp_cmp+0x38>
    40ac:	0a 26       	eor	r0, r26
    40ae:	61 f0       	breq	.+24     	; 0x40c8 <__fp_cmp+0x46>
    40b0:	23 2b       	or	r18, r19
    40b2:	24 2b       	or	r18, r20
    40b4:	25 2b       	or	r18, r21
    40b6:	21 f4       	brne	.+8      	; 0x40c0 <__fp_cmp+0x3e>
    40b8:	08 95       	ret
    40ba:	0a 26       	eor	r0, r26
    40bc:	09 f4       	brne	.+2      	; 0x40c0 <__fp_cmp+0x3e>
    40be:	a1 40       	sbci	r26, 0x01	; 1
    40c0:	a6 95       	lsr	r26
    40c2:	8f ef       	ldi	r24, 0xFF	; 255
    40c4:	81 1d       	adc	r24, r1
    40c6:	81 1d       	adc	r24, r1
    40c8:	08 95       	ret

000040ca <__fp_inf>:
    40ca:	97 f9       	bld	r25, 7
    40cc:	9f 67       	ori	r25, 0x7F	; 127
    40ce:	80 e8       	ldi	r24, 0x80	; 128
    40d0:	70 e0       	ldi	r23, 0x00	; 0
    40d2:	60 e0       	ldi	r22, 0x00	; 0
    40d4:	08 95       	ret

000040d6 <__fp_nan>:
    40d6:	9f ef       	ldi	r25, 0xFF	; 255
    40d8:	80 ec       	ldi	r24, 0xC0	; 192
    40da:	08 95       	ret

000040dc <__fp_pscA>:
    40dc:	00 24       	eor	r0, r0
    40de:	0a 94       	dec	r0
    40e0:	16 16       	cp	r1, r22
    40e2:	17 06       	cpc	r1, r23
    40e4:	18 06       	cpc	r1, r24
    40e6:	09 06       	cpc	r0, r25
    40e8:	08 95       	ret

000040ea <__fp_pscB>:
    40ea:	00 24       	eor	r0, r0
    40ec:	0a 94       	dec	r0
    40ee:	12 16       	cp	r1, r18
    40f0:	13 06       	cpc	r1, r19
    40f2:	14 06       	cpc	r1, r20
    40f4:	05 06       	cpc	r0, r21
    40f6:	08 95       	ret

000040f8 <__fp_round>:
    40f8:	09 2e       	mov	r0, r25
    40fa:	03 94       	inc	r0
    40fc:	00 0c       	add	r0, r0
    40fe:	11 f4       	brne	.+4      	; 0x4104 <__fp_round+0xc>
    4100:	88 23       	and	r24, r24
    4102:	52 f0       	brmi	.+20     	; 0x4118 <__fp_round+0x20>
    4104:	bb 0f       	add	r27, r27
    4106:	40 f4       	brcc	.+16     	; 0x4118 <__fp_round+0x20>
    4108:	bf 2b       	or	r27, r31
    410a:	11 f4       	brne	.+4      	; 0x4110 <__fp_round+0x18>
    410c:	60 ff       	sbrs	r22, 0
    410e:	04 c0       	rjmp	.+8      	; 0x4118 <__fp_round+0x20>
    4110:	6f 5f       	subi	r22, 0xFF	; 255
    4112:	7f 4f       	sbci	r23, 0xFF	; 255
    4114:	8f 4f       	sbci	r24, 0xFF	; 255
    4116:	9f 4f       	sbci	r25, 0xFF	; 255
    4118:	08 95       	ret

0000411a <__fp_split3>:
    411a:	57 fd       	sbrc	r21, 7
    411c:	90 58       	subi	r25, 0x80	; 128
    411e:	44 0f       	add	r20, r20
    4120:	55 1f       	adc	r21, r21
    4122:	59 f0       	breq	.+22     	; 0x413a <__fp_splitA+0x10>
    4124:	5f 3f       	cpi	r21, 0xFF	; 255
    4126:	71 f0       	breq	.+28     	; 0x4144 <__fp_splitA+0x1a>
    4128:	47 95       	ror	r20

0000412a <__fp_splitA>:
    412a:	88 0f       	add	r24, r24
    412c:	97 fb       	bst	r25, 7
    412e:	99 1f       	adc	r25, r25
    4130:	61 f0       	breq	.+24     	; 0x414a <__fp_splitA+0x20>
    4132:	9f 3f       	cpi	r25, 0xFF	; 255
    4134:	79 f0       	breq	.+30     	; 0x4154 <__fp_splitA+0x2a>
    4136:	87 95       	ror	r24
    4138:	08 95       	ret
    413a:	12 16       	cp	r1, r18
    413c:	13 06       	cpc	r1, r19
    413e:	14 06       	cpc	r1, r20
    4140:	55 1f       	adc	r21, r21
    4142:	f2 cf       	rjmp	.-28     	; 0x4128 <__fp_split3+0xe>
    4144:	46 95       	lsr	r20
    4146:	f1 df       	rcall	.-30     	; 0x412a <__fp_splitA>
    4148:	08 c0       	rjmp	.+16     	; 0x415a <__fp_splitA+0x30>
    414a:	16 16       	cp	r1, r22
    414c:	17 06       	cpc	r1, r23
    414e:	18 06       	cpc	r1, r24
    4150:	99 1f       	adc	r25, r25
    4152:	f1 cf       	rjmp	.-30     	; 0x4136 <__fp_splitA+0xc>
    4154:	86 95       	lsr	r24
    4156:	71 05       	cpc	r23, r1
    4158:	61 05       	cpc	r22, r1
    415a:	08 94       	sec
    415c:	08 95       	ret

0000415e <__fp_zero>:
    415e:	e8 94       	clt

00004160 <__fp_szero>:
    4160:	bb 27       	eor	r27, r27
    4162:	66 27       	eor	r22, r22
    4164:	77 27       	eor	r23, r23
    4166:	cb 01       	movw	r24, r22
    4168:	97 f9       	bld	r25, 7
    416a:	08 95       	ret

0000416c <__gesf2>:
    416c:	0e 94 41 20 	call	0x4082	; 0x4082 <__fp_cmp>
    4170:	08 f4       	brcc	.+2      	; 0x4174 <__gesf2+0x8>
    4172:	8f ef       	ldi	r24, 0xFF	; 255
    4174:	08 95       	ret

00004176 <__mulsf3>:
    4176:	0e 94 ce 20 	call	0x419c	; 0x419c <__mulsf3x>
    417a:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__fp_round>
    417e:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__fp_pscA>
    4182:	38 f0       	brcs	.+14     	; 0x4192 <__mulsf3+0x1c>
    4184:	0e 94 75 20 	call	0x40ea	; 0x40ea <__fp_pscB>
    4188:	20 f0       	brcs	.+8      	; 0x4192 <__mulsf3+0x1c>
    418a:	95 23       	and	r25, r21
    418c:	11 f0       	breq	.+4      	; 0x4192 <__mulsf3+0x1c>
    418e:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__fp_inf>
    4192:	0c 94 6b 20 	jmp	0x40d6	; 0x40d6 <__fp_nan>
    4196:	11 24       	eor	r1, r1
    4198:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__fp_szero>

0000419c <__mulsf3x>:
    419c:	0e 94 8d 20 	call	0x411a	; 0x411a <__fp_split3>
    41a0:	70 f3       	brcs	.-36     	; 0x417e <__mulsf3+0x8>

000041a2 <__mulsf3_pse>:
    41a2:	95 9f       	mul	r25, r21
    41a4:	c1 f3       	breq	.-16     	; 0x4196 <__mulsf3+0x20>
    41a6:	95 0f       	add	r25, r21
    41a8:	50 e0       	ldi	r21, 0x00	; 0
    41aa:	55 1f       	adc	r21, r21
    41ac:	62 9f       	mul	r22, r18
    41ae:	f0 01       	movw	r30, r0
    41b0:	72 9f       	mul	r23, r18
    41b2:	bb 27       	eor	r27, r27
    41b4:	f0 0d       	add	r31, r0
    41b6:	b1 1d       	adc	r27, r1
    41b8:	63 9f       	mul	r22, r19
    41ba:	aa 27       	eor	r26, r26
    41bc:	f0 0d       	add	r31, r0
    41be:	b1 1d       	adc	r27, r1
    41c0:	aa 1f       	adc	r26, r26
    41c2:	64 9f       	mul	r22, r20
    41c4:	66 27       	eor	r22, r22
    41c6:	b0 0d       	add	r27, r0
    41c8:	a1 1d       	adc	r26, r1
    41ca:	66 1f       	adc	r22, r22
    41cc:	82 9f       	mul	r24, r18
    41ce:	22 27       	eor	r18, r18
    41d0:	b0 0d       	add	r27, r0
    41d2:	a1 1d       	adc	r26, r1
    41d4:	62 1f       	adc	r22, r18
    41d6:	73 9f       	mul	r23, r19
    41d8:	b0 0d       	add	r27, r0
    41da:	a1 1d       	adc	r26, r1
    41dc:	62 1f       	adc	r22, r18
    41de:	83 9f       	mul	r24, r19
    41e0:	a0 0d       	add	r26, r0
    41e2:	61 1d       	adc	r22, r1
    41e4:	22 1f       	adc	r18, r18
    41e6:	74 9f       	mul	r23, r20
    41e8:	33 27       	eor	r19, r19
    41ea:	a0 0d       	add	r26, r0
    41ec:	61 1d       	adc	r22, r1
    41ee:	23 1f       	adc	r18, r19
    41f0:	84 9f       	mul	r24, r20
    41f2:	60 0d       	add	r22, r0
    41f4:	21 1d       	adc	r18, r1
    41f6:	82 2f       	mov	r24, r18
    41f8:	76 2f       	mov	r23, r22
    41fa:	6a 2f       	mov	r22, r26
    41fc:	11 24       	eor	r1, r1
    41fe:	9f 57       	subi	r25, 0x7F	; 127
    4200:	50 40       	sbci	r21, 0x00	; 0
    4202:	9a f0       	brmi	.+38     	; 0x422a <__mulsf3_pse+0x88>
    4204:	f1 f0       	breq	.+60     	; 0x4242 <__mulsf3_pse+0xa0>
    4206:	88 23       	and	r24, r24
    4208:	4a f0       	brmi	.+18     	; 0x421c <__mulsf3_pse+0x7a>
    420a:	ee 0f       	add	r30, r30
    420c:	ff 1f       	adc	r31, r31
    420e:	bb 1f       	adc	r27, r27
    4210:	66 1f       	adc	r22, r22
    4212:	77 1f       	adc	r23, r23
    4214:	88 1f       	adc	r24, r24
    4216:	91 50       	subi	r25, 0x01	; 1
    4218:	50 40       	sbci	r21, 0x00	; 0
    421a:	a9 f7       	brne	.-22     	; 0x4206 <__mulsf3_pse+0x64>
    421c:	9e 3f       	cpi	r25, 0xFE	; 254
    421e:	51 05       	cpc	r21, r1
    4220:	80 f0       	brcs	.+32     	; 0x4242 <__mulsf3_pse+0xa0>
    4222:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__fp_inf>
    4226:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__fp_szero>
    422a:	5f 3f       	cpi	r21, 0xFF	; 255
    422c:	e4 f3       	brlt	.-8      	; 0x4226 <__mulsf3_pse+0x84>
    422e:	98 3e       	cpi	r25, 0xE8	; 232
    4230:	d4 f3       	brlt	.-12     	; 0x4226 <__mulsf3_pse+0x84>
    4232:	86 95       	lsr	r24
    4234:	77 95       	ror	r23
    4236:	67 95       	ror	r22
    4238:	b7 95       	ror	r27
    423a:	f7 95       	ror	r31
    423c:	e7 95       	ror	r30
    423e:	9f 5f       	subi	r25, 0xFF	; 255
    4240:	c1 f7       	brne	.-16     	; 0x4232 <__mulsf3_pse+0x90>
    4242:	fe 2b       	or	r31, r30
    4244:	88 0f       	add	r24, r24
    4246:	91 1d       	adc	r25, r1
    4248:	96 95       	lsr	r25
    424a:	87 95       	ror	r24
    424c:	97 f9       	bld	r25, 7
    424e:	08 95       	ret

00004250 <vfprintf>:
    4250:	2f 92       	push	r2
    4252:	3f 92       	push	r3
    4254:	4f 92       	push	r4
    4256:	5f 92       	push	r5
    4258:	6f 92       	push	r6
    425a:	7f 92       	push	r7
    425c:	8f 92       	push	r8
    425e:	9f 92       	push	r9
    4260:	af 92       	push	r10
    4262:	bf 92       	push	r11
    4264:	cf 92       	push	r12
    4266:	df 92       	push	r13
    4268:	ef 92       	push	r14
    426a:	ff 92       	push	r15
    426c:	0f 93       	push	r16
    426e:	1f 93       	push	r17
    4270:	cf 93       	push	r28
    4272:	df 93       	push	r29
    4274:	cd b7       	in	r28, 0x3d	; 61
    4276:	de b7       	in	r29, 0x3e	; 62
    4278:	60 97       	sbiw	r28, 0x10	; 16
    427a:	cd bf       	out	0x3d, r28	; 61
    427c:	de bf       	out	0x3e, r29	; 62
    427e:	7c 01       	movw	r14, r24
    4280:	1b 01       	movw	r2, r22
    4282:	6a 01       	movw	r12, r20
    4284:	fc 01       	movw	r30, r24
    4286:	16 82       	std	Z+6, r1	; 0x06
    4288:	17 82       	std	Z+7, r1	; 0x07
    428a:	83 81       	ldd	r24, Z+3	; 0x03
    428c:	81 ff       	sbrs	r24, 1
    428e:	44 c3       	rjmp	.+1672   	; 0x4918 <vfprintf+0x6c8>
    4290:	9e 01       	movw	r18, r28
    4292:	2f 5f       	subi	r18, 0xFF	; 255
    4294:	3f 4f       	sbci	r19, 0xFF	; 255
    4296:	39 01       	movw	r6, r18
    4298:	f7 01       	movw	r30, r14
    429a:	93 81       	ldd	r25, Z+3	; 0x03
    429c:	f1 01       	movw	r30, r2
    429e:	93 fd       	sbrc	r25, 3
    42a0:	85 91       	lpm	r24, Z+
    42a2:	93 ff       	sbrs	r25, 3
    42a4:	81 91       	ld	r24, Z+
    42a6:	1f 01       	movw	r2, r30
    42a8:	88 23       	and	r24, r24
    42aa:	09 f4       	brne	.+2      	; 0x42ae <vfprintf+0x5e>
    42ac:	31 c3       	rjmp	.+1634   	; 0x4910 <vfprintf+0x6c0>
    42ae:	85 32       	cpi	r24, 0x25	; 37
    42b0:	39 f4       	brne	.+14     	; 0x42c0 <vfprintf+0x70>
    42b2:	93 fd       	sbrc	r25, 3
    42b4:	85 91       	lpm	r24, Z+
    42b6:	93 ff       	sbrs	r25, 3
    42b8:	81 91       	ld	r24, Z+
    42ba:	1f 01       	movw	r2, r30
    42bc:	85 32       	cpi	r24, 0x25	; 37
    42be:	39 f4       	brne	.+14     	; 0x42ce <vfprintf+0x7e>
    42c0:	b7 01       	movw	r22, r14
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    42c8:	56 01       	movw	r10, r12
    42ca:	65 01       	movw	r12, r10
    42cc:	e5 cf       	rjmp	.-54     	; 0x4298 <vfprintf+0x48>
    42ce:	10 e0       	ldi	r17, 0x00	; 0
    42d0:	51 2c       	mov	r5, r1
    42d2:	91 2c       	mov	r9, r1
    42d4:	ff e1       	ldi	r31, 0x1F	; 31
    42d6:	f9 15       	cp	r31, r9
    42d8:	d8 f0       	brcs	.+54     	; 0x4310 <vfprintf+0xc0>
    42da:	8b 32       	cpi	r24, 0x2B	; 43
    42dc:	79 f0       	breq	.+30     	; 0x42fc <vfprintf+0xac>
    42de:	38 f4       	brcc	.+14     	; 0x42ee <vfprintf+0x9e>
    42e0:	80 32       	cpi	r24, 0x20	; 32
    42e2:	79 f0       	breq	.+30     	; 0x4302 <vfprintf+0xb2>
    42e4:	83 32       	cpi	r24, 0x23	; 35
    42e6:	a1 f4       	brne	.+40     	; 0x4310 <vfprintf+0xc0>
    42e8:	f9 2d       	mov	r31, r9
    42ea:	f0 61       	ori	r31, 0x10	; 16
    42ec:	2e c0       	rjmp	.+92     	; 0x434a <vfprintf+0xfa>
    42ee:	8d 32       	cpi	r24, 0x2D	; 45
    42f0:	61 f0       	breq	.+24     	; 0x430a <vfprintf+0xba>
    42f2:	80 33       	cpi	r24, 0x30	; 48
    42f4:	69 f4       	brne	.+26     	; 0x4310 <vfprintf+0xc0>
    42f6:	29 2d       	mov	r18, r9
    42f8:	21 60       	ori	r18, 0x01	; 1
    42fa:	2d c0       	rjmp	.+90     	; 0x4356 <vfprintf+0x106>
    42fc:	39 2d       	mov	r19, r9
    42fe:	32 60       	ori	r19, 0x02	; 2
    4300:	93 2e       	mov	r9, r19
    4302:	89 2d       	mov	r24, r9
    4304:	84 60       	ori	r24, 0x04	; 4
    4306:	98 2e       	mov	r9, r24
    4308:	2a c0       	rjmp	.+84     	; 0x435e <vfprintf+0x10e>
    430a:	e9 2d       	mov	r30, r9
    430c:	e8 60       	ori	r30, 0x08	; 8
    430e:	15 c0       	rjmp	.+42     	; 0x433a <vfprintf+0xea>
    4310:	97 fc       	sbrc	r9, 7
    4312:	2d c0       	rjmp	.+90     	; 0x436e <vfprintf+0x11e>
    4314:	20 ed       	ldi	r18, 0xD0	; 208
    4316:	28 0f       	add	r18, r24
    4318:	2a 30       	cpi	r18, 0x0A	; 10
    431a:	88 f4       	brcc	.+34     	; 0x433e <vfprintf+0xee>
    431c:	96 fe       	sbrs	r9, 6
    431e:	06 c0       	rjmp	.+12     	; 0x432c <vfprintf+0xdc>
    4320:	3a e0       	ldi	r19, 0x0A	; 10
    4322:	13 9f       	mul	r17, r19
    4324:	20 0d       	add	r18, r0
    4326:	11 24       	eor	r1, r1
    4328:	12 2f       	mov	r17, r18
    432a:	19 c0       	rjmp	.+50     	; 0x435e <vfprintf+0x10e>
    432c:	8a e0       	ldi	r24, 0x0A	; 10
    432e:	58 9e       	mul	r5, r24
    4330:	20 0d       	add	r18, r0
    4332:	11 24       	eor	r1, r1
    4334:	52 2e       	mov	r5, r18
    4336:	e9 2d       	mov	r30, r9
    4338:	e0 62       	ori	r30, 0x20	; 32
    433a:	9e 2e       	mov	r9, r30
    433c:	10 c0       	rjmp	.+32     	; 0x435e <vfprintf+0x10e>
    433e:	8e 32       	cpi	r24, 0x2E	; 46
    4340:	31 f4       	brne	.+12     	; 0x434e <vfprintf+0xfe>
    4342:	96 fc       	sbrc	r9, 6
    4344:	e5 c2       	rjmp	.+1482   	; 0x4910 <vfprintf+0x6c0>
    4346:	f9 2d       	mov	r31, r9
    4348:	f0 64       	ori	r31, 0x40	; 64
    434a:	9f 2e       	mov	r9, r31
    434c:	08 c0       	rjmp	.+16     	; 0x435e <vfprintf+0x10e>
    434e:	8c 36       	cpi	r24, 0x6C	; 108
    4350:	21 f4       	brne	.+8      	; 0x435a <vfprintf+0x10a>
    4352:	29 2d       	mov	r18, r9
    4354:	20 68       	ori	r18, 0x80	; 128
    4356:	92 2e       	mov	r9, r18
    4358:	02 c0       	rjmp	.+4      	; 0x435e <vfprintf+0x10e>
    435a:	88 36       	cpi	r24, 0x68	; 104
    435c:	41 f4       	brne	.+16     	; 0x436e <vfprintf+0x11e>
    435e:	f1 01       	movw	r30, r2
    4360:	93 fd       	sbrc	r25, 3
    4362:	85 91       	lpm	r24, Z+
    4364:	93 ff       	sbrs	r25, 3
    4366:	81 91       	ld	r24, Z+
    4368:	1f 01       	movw	r2, r30
    436a:	81 11       	cpse	r24, r1
    436c:	b3 cf       	rjmp	.-154    	; 0x42d4 <vfprintf+0x84>
    436e:	9b eb       	ldi	r25, 0xBB	; 187
    4370:	98 0f       	add	r25, r24
    4372:	93 30       	cpi	r25, 0x03	; 3
    4374:	20 f4       	brcc	.+8      	; 0x437e <vfprintf+0x12e>
    4376:	99 2d       	mov	r25, r9
    4378:	90 61       	ori	r25, 0x10	; 16
    437a:	80 5e       	subi	r24, 0xE0	; 224
    437c:	07 c0       	rjmp	.+14     	; 0x438c <vfprintf+0x13c>
    437e:	9b e9       	ldi	r25, 0x9B	; 155
    4380:	98 0f       	add	r25, r24
    4382:	93 30       	cpi	r25, 0x03	; 3
    4384:	08 f0       	brcs	.+2      	; 0x4388 <vfprintf+0x138>
    4386:	66 c1       	rjmp	.+716    	; 0x4654 <vfprintf+0x404>
    4388:	99 2d       	mov	r25, r9
    438a:	9f 7e       	andi	r25, 0xEF	; 239
    438c:	96 ff       	sbrs	r25, 6
    438e:	16 e0       	ldi	r17, 0x06	; 6
    4390:	9f 73       	andi	r25, 0x3F	; 63
    4392:	99 2e       	mov	r9, r25
    4394:	85 36       	cpi	r24, 0x65	; 101
    4396:	19 f4       	brne	.+6      	; 0x439e <vfprintf+0x14e>
    4398:	90 64       	ori	r25, 0x40	; 64
    439a:	99 2e       	mov	r9, r25
    439c:	08 c0       	rjmp	.+16     	; 0x43ae <vfprintf+0x15e>
    439e:	86 36       	cpi	r24, 0x66	; 102
    43a0:	21 f4       	brne	.+8      	; 0x43aa <vfprintf+0x15a>
    43a2:	39 2f       	mov	r19, r25
    43a4:	30 68       	ori	r19, 0x80	; 128
    43a6:	93 2e       	mov	r9, r19
    43a8:	02 c0       	rjmp	.+4      	; 0x43ae <vfprintf+0x15e>
    43aa:	11 11       	cpse	r17, r1
    43ac:	11 50       	subi	r17, 0x01	; 1
    43ae:	97 fe       	sbrs	r9, 7
    43b0:	07 c0       	rjmp	.+14     	; 0x43c0 <vfprintf+0x170>
    43b2:	1c 33       	cpi	r17, 0x3C	; 60
    43b4:	50 f4       	brcc	.+20     	; 0x43ca <vfprintf+0x17a>
    43b6:	44 24       	eor	r4, r4
    43b8:	43 94       	inc	r4
    43ba:	41 0e       	add	r4, r17
    43bc:	27 e0       	ldi	r18, 0x07	; 7
    43be:	0b c0       	rjmp	.+22     	; 0x43d6 <vfprintf+0x186>
    43c0:	18 30       	cpi	r17, 0x08	; 8
    43c2:	38 f0       	brcs	.+14     	; 0x43d2 <vfprintf+0x182>
    43c4:	27 e0       	ldi	r18, 0x07	; 7
    43c6:	17 e0       	ldi	r17, 0x07	; 7
    43c8:	05 c0       	rjmp	.+10     	; 0x43d4 <vfprintf+0x184>
    43ca:	27 e0       	ldi	r18, 0x07	; 7
    43cc:	9c e3       	ldi	r25, 0x3C	; 60
    43ce:	49 2e       	mov	r4, r25
    43d0:	02 c0       	rjmp	.+4      	; 0x43d6 <vfprintf+0x186>
    43d2:	21 2f       	mov	r18, r17
    43d4:	41 2c       	mov	r4, r1
    43d6:	56 01       	movw	r10, r12
    43d8:	84 e0       	ldi	r24, 0x04	; 4
    43da:	a8 0e       	add	r10, r24
    43dc:	b1 1c       	adc	r11, r1
    43de:	f6 01       	movw	r30, r12
    43e0:	60 81       	ld	r22, Z
    43e2:	71 81       	ldd	r23, Z+1	; 0x01
    43e4:	82 81       	ldd	r24, Z+2	; 0x02
    43e6:	93 81       	ldd	r25, Z+3	; 0x03
    43e8:	04 2d       	mov	r16, r4
    43ea:	a3 01       	movw	r20, r6
    43ec:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__ftoa_engine>
    43f0:	6c 01       	movw	r12, r24
    43f2:	f9 81       	ldd	r31, Y+1	; 0x01
    43f4:	fc 87       	std	Y+12, r31	; 0x0c
    43f6:	f0 ff       	sbrs	r31, 0
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <vfprintf+0x1ae>
    43fa:	f3 ff       	sbrs	r31, 3
    43fc:	06 c0       	rjmp	.+12     	; 0x440a <vfprintf+0x1ba>
    43fe:	91 fc       	sbrc	r9, 1
    4400:	06 c0       	rjmp	.+12     	; 0x440e <vfprintf+0x1be>
    4402:	92 fe       	sbrs	r9, 2
    4404:	06 c0       	rjmp	.+12     	; 0x4412 <vfprintf+0x1c2>
    4406:	00 e2       	ldi	r16, 0x20	; 32
    4408:	05 c0       	rjmp	.+10     	; 0x4414 <vfprintf+0x1c4>
    440a:	0d e2       	ldi	r16, 0x2D	; 45
    440c:	03 c0       	rjmp	.+6      	; 0x4414 <vfprintf+0x1c4>
    440e:	0b e2       	ldi	r16, 0x2B	; 43
    4410:	01 c0       	rjmp	.+2      	; 0x4414 <vfprintf+0x1c4>
    4412:	00 e0       	ldi	r16, 0x00	; 0
    4414:	8c 85       	ldd	r24, Y+12	; 0x0c
    4416:	8c 70       	andi	r24, 0x0C	; 12
    4418:	19 f0       	breq	.+6      	; 0x4420 <vfprintf+0x1d0>
    441a:	01 11       	cpse	r16, r1
    441c:	5a c2       	rjmp	.+1204   	; 0x48d2 <vfprintf+0x682>
    441e:	9b c2       	rjmp	.+1334   	; 0x4956 <vfprintf+0x706>
    4420:	97 fe       	sbrs	r9, 7
    4422:	10 c0       	rjmp	.+32     	; 0x4444 <vfprintf+0x1f4>
    4424:	4c 0c       	add	r4, r12
    4426:	fc 85       	ldd	r31, Y+12	; 0x0c
    4428:	f4 ff       	sbrs	r31, 4
    442a:	04 c0       	rjmp	.+8      	; 0x4434 <vfprintf+0x1e4>
    442c:	8a 81       	ldd	r24, Y+2	; 0x02
    442e:	81 33       	cpi	r24, 0x31	; 49
    4430:	09 f4       	brne	.+2      	; 0x4434 <vfprintf+0x1e4>
    4432:	4a 94       	dec	r4
    4434:	14 14       	cp	r1, r4
    4436:	74 f5       	brge	.+92     	; 0x4494 <vfprintf+0x244>
    4438:	28 e0       	ldi	r18, 0x08	; 8
    443a:	24 15       	cp	r18, r4
    443c:	78 f5       	brcc	.+94     	; 0x449c <vfprintf+0x24c>
    443e:	88 e0       	ldi	r24, 0x08	; 8
    4440:	48 2e       	mov	r4, r24
    4442:	2c c0       	rjmp	.+88     	; 0x449c <vfprintf+0x24c>
    4444:	96 fc       	sbrc	r9, 6
    4446:	2a c0       	rjmp	.+84     	; 0x449c <vfprintf+0x24c>
    4448:	81 2f       	mov	r24, r17
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	8c 15       	cp	r24, r12
    444e:	9d 05       	cpc	r25, r13
    4450:	9c f0       	brlt	.+38     	; 0x4478 <vfprintf+0x228>
    4452:	3c ef       	ldi	r19, 0xFC	; 252
    4454:	c3 16       	cp	r12, r19
    4456:	3f ef       	ldi	r19, 0xFF	; 255
    4458:	d3 06       	cpc	r13, r19
    445a:	74 f0       	brlt	.+28     	; 0x4478 <vfprintf+0x228>
    445c:	89 2d       	mov	r24, r9
    445e:	80 68       	ori	r24, 0x80	; 128
    4460:	98 2e       	mov	r9, r24
    4462:	0a c0       	rjmp	.+20     	; 0x4478 <vfprintf+0x228>
    4464:	e2 e0       	ldi	r30, 0x02	; 2
    4466:	f0 e0       	ldi	r31, 0x00	; 0
    4468:	ec 0f       	add	r30, r28
    446a:	fd 1f       	adc	r31, r29
    446c:	e1 0f       	add	r30, r17
    446e:	f1 1d       	adc	r31, r1
    4470:	80 81       	ld	r24, Z
    4472:	80 33       	cpi	r24, 0x30	; 48
    4474:	19 f4       	brne	.+6      	; 0x447c <vfprintf+0x22c>
    4476:	11 50       	subi	r17, 0x01	; 1
    4478:	11 11       	cpse	r17, r1
    447a:	f4 cf       	rjmp	.-24     	; 0x4464 <vfprintf+0x214>
    447c:	97 fe       	sbrs	r9, 7
    447e:	0e c0       	rjmp	.+28     	; 0x449c <vfprintf+0x24c>
    4480:	44 24       	eor	r4, r4
    4482:	43 94       	inc	r4
    4484:	41 0e       	add	r4, r17
    4486:	81 2f       	mov	r24, r17
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	c8 16       	cp	r12, r24
    448c:	d9 06       	cpc	r13, r25
    448e:	2c f4       	brge	.+10     	; 0x449a <vfprintf+0x24a>
    4490:	1c 19       	sub	r17, r12
    4492:	04 c0       	rjmp	.+8      	; 0x449c <vfprintf+0x24c>
    4494:	44 24       	eor	r4, r4
    4496:	43 94       	inc	r4
    4498:	01 c0       	rjmp	.+2      	; 0x449c <vfprintf+0x24c>
    449a:	10 e0       	ldi	r17, 0x00	; 0
    449c:	97 fe       	sbrs	r9, 7
    449e:	06 c0       	rjmp	.+12     	; 0x44ac <vfprintf+0x25c>
    44a0:	1c 14       	cp	r1, r12
    44a2:	1d 04       	cpc	r1, r13
    44a4:	34 f4       	brge	.+12     	; 0x44b2 <vfprintf+0x262>
    44a6:	c6 01       	movw	r24, r12
    44a8:	01 96       	adiw	r24, 0x01	; 1
    44aa:	05 c0       	rjmp	.+10     	; 0x44b6 <vfprintf+0x266>
    44ac:	85 e0       	ldi	r24, 0x05	; 5
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	02 c0       	rjmp	.+4      	; 0x44b6 <vfprintf+0x266>
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	01 11       	cpse	r16, r1
    44b8:	01 96       	adiw	r24, 0x01	; 1
    44ba:	11 23       	and	r17, r17
    44bc:	31 f0       	breq	.+12     	; 0x44ca <vfprintf+0x27a>
    44be:	21 2f       	mov	r18, r17
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	2f 5f       	subi	r18, 0xFF	; 255
    44c4:	3f 4f       	sbci	r19, 0xFF	; 255
    44c6:	82 0f       	add	r24, r18
    44c8:	93 1f       	adc	r25, r19
    44ca:	25 2d       	mov	r18, r5
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	82 17       	cp	r24, r18
    44d0:	93 07       	cpc	r25, r19
    44d2:	14 f4       	brge	.+4      	; 0x44d8 <vfprintf+0x288>
    44d4:	58 1a       	sub	r5, r24
    44d6:	01 c0       	rjmp	.+2      	; 0x44da <vfprintf+0x28a>
    44d8:	51 2c       	mov	r5, r1
    44da:	89 2d       	mov	r24, r9
    44dc:	89 70       	andi	r24, 0x09	; 9
    44de:	49 f4       	brne	.+18     	; 0x44f2 <vfprintf+0x2a2>
    44e0:	55 20       	and	r5, r5
    44e2:	39 f0       	breq	.+14     	; 0x44f2 <vfprintf+0x2a2>
    44e4:	b7 01       	movw	r22, r14
    44e6:	80 e2       	ldi	r24, 0x20	; 32
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    44ee:	5a 94       	dec	r5
    44f0:	f7 cf       	rjmp	.-18     	; 0x44e0 <vfprintf+0x290>
    44f2:	00 23       	and	r16, r16
    44f4:	29 f0       	breq	.+10     	; 0x4500 <vfprintf+0x2b0>
    44f6:	b7 01       	movw	r22, r14
    44f8:	80 2f       	mov	r24, r16
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    4500:	93 fc       	sbrc	r9, 3
    4502:	09 c0       	rjmp	.+18     	; 0x4516 <vfprintf+0x2c6>
    4504:	55 20       	and	r5, r5
    4506:	39 f0       	breq	.+14     	; 0x4516 <vfprintf+0x2c6>
    4508:	b7 01       	movw	r22, r14
    450a:	80 e3       	ldi	r24, 0x30	; 48
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    4512:	5a 94       	dec	r5
    4514:	f7 cf       	rjmp	.-18     	; 0x4504 <vfprintf+0x2b4>
    4516:	97 fe       	sbrs	r9, 7
    4518:	4c c0       	rjmp	.+152    	; 0x45b2 <vfprintf+0x362>
    451a:	46 01       	movw	r8, r12
    451c:	d7 fe       	sbrs	r13, 7
    451e:	02 c0       	rjmp	.+4      	; 0x4524 <vfprintf+0x2d4>
    4520:	81 2c       	mov	r8, r1
    4522:	91 2c       	mov	r9, r1
    4524:	c6 01       	movw	r24, r12
    4526:	88 19       	sub	r24, r8
    4528:	99 09       	sbc	r25, r9
    452a:	f3 01       	movw	r30, r6
    452c:	e8 0f       	add	r30, r24
    452e:	f9 1f       	adc	r31, r25
    4530:	ed 87       	std	Y+13, r30	; 0x0d
    4532:	fe 87       	std	Y+14, r31	; 0x0e
    4534:	96 01       	movw	r18, r12
    4536:	24 19       	sub	r18, r4
    4538:	31 09       	sbc	r19, r1
    453a:	2f 87       	std	Y+15, r18	; 0x0f
    453c:	38 8b       	std	Y+16, r19	; 0x10
    453e:	01 2f       	mov	r16, r17
    4540:	10 e0       	ldi	r17, 0x00	; 0
    4542:	11 95       	neg	r17
    4544:	01 95       	neg	r16
    4546:	11 09       	sbc	r17, r1
    4548:	3f ef       	ldi	r19, 0xFF	; 255
    454a:	83 16       	cp	r8, r19
    454c:	93 06       	cpc	r9, r19
    454e:	29 f4       	brne	.+10     	; 0x455a <vfprintf+0x30a>
    4550:	b7 01       	movw	r22, r14
    4552:	8e e2       	ldi	r24, 0x2E	; 46
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    455a:	c8 14       	cp	r12, r8
    455c:	d9 04       	cpc	r13, r9
    455e:	4c f0       	brlt	.+18     	; 0x4572 <vfprintf+0x322>
    4560:	8f 85       	ldd	r24, Y+15	; 0x0f
    4562:	98 89       	ldd	r25, Y+16	; 0x10
    4564:	88 15       	cp	r24, r8
    4566:	99 05       	cpc	r25, r9
    4568:	24 f4       	brge	.+8      	; 0x4572 <vfprintf+0x322>
    456a:	ed 85       	ldd	r30, Y+13	; 0x0d
    456c:	fe 85       	ldd	r31, Y+14	; 0x0e
    456e:	81 81       	ldd	r24, Z+1	; 0x01
    4570:	01 c0       	rjmp	.+2      	; 0x4574 <vfprintf+0x324>
    4572:	80 e3       	ldi	r24, 0x30	; 48
    4574:	f1 e0       	ldi	r31, 0x01	; 1
    4576:	8f 1a       	sub	r8, r31
    4578:	91 08       	sbc	r9, r1
    457a:	2d 85       	ldd	r18, Y+13	; 0x0d
    457c:	3e 85       	ldd	r19, Y+14	; 0x0e
    457e:	2f 5f       	subi	r18, 0xFF	; 255
    4580:	3f 4f       	sbci	r19, 0xFF	; 255
    4582:	2d 87       	std	Y+13, r18	; 0x0d
    4584:	3e 87       	std	Y+14, r19	; 0x0e
    4586:	80 16       	cp	r8, r16
    4588:	91 06       	cpc	r9, r17
    458a:	2c f0       	brlt	.+10     	; 0x4596 <vfprintf+0x346>
    458c:	b7 01       	movw	r22, r14
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    4594:	d9 cf       	rjmp	.-78     	; 0x4548 <vfprintf+0x2f8>
    4596:	c8 14       	cp	r12, r8
    4598:	d9 04       	cpc	r13, r9
    459a:	41 f4       	brne	.+16     	; 0x45ac <vfprintf+0x35c>
    459c:	9a 81       	ldd	r25, Y+2	; 0x02
    459e:	96 33       	cpi	r25, 0x36	; 54
    45a0:	20 f4       	brcc	.+8      	; 0x45aa <vfprintf+0x35a>
    45a2:	95 33       	cpi	r25, 0x35	; 53
    45a4:	19 f4       	brne	.+6      	; 0x45ac <vfprintf+0x35c>
    45a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    45a8:	34 ff       	sbrs	r19, 4
    45aa:	81 e3       	ldi	r24, 0x31	; 49
    45ac:	b7 01       	movw	r22, r14
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	4e c0       	rjmp	.+156    	; 0x464e <vfprintf+0x3fe>
    45b2:	8a 81       	ldd	r24, Y+2	; 0x02
    45b4:	81 33       	cpi	r24, 0x31	; 49
    45b6:	19 f0       	breq	.+6      	; 0x45be <vfprintf+0x36e>
    45b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    45ba:	9f 7e       	andi	r25, 0xEF	; 239
    45bc:	9c 87       	std	Y+12, r25	; 0x0c
    45be:	b7 01       	movw	r22, r14
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    45c6:	11 11       	cpse	r17, r1
    45c8:	05 c0       	rjmp	.+10     	; 0x45d4 <vfprintf+0x384>
    45ca:	94 fc       	sbrc	r9, 4
    45cc:	18 c0       	rjmp	.+48     	; 0x45fe <vfprintf+0x3ae>
    45ce:	85 e6       	ldi	r24, 0x65	; 101
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	17 c0       	rjmp	.+46     	; 0x4602 <vfprintf+0x3b2>
    45d4:	b7 01       	movw	r22, r14
    45d6:	8e e2       	ldi	r24, 0x2E	; 46
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    45de:	1e 5f       	subi	r17, 0xFE	; 254
    45e0:	82 e0       	ldi	r24, 0x02	; 2
    45e2:	01 e0       	ldi	r16, 0x01	; 1
    45e4:	08 0f       	add	r16, r24
    45e6:	f3 01       	movw	r30, r6
    45e8:	e8 0f       	add	r30, r24
    45ea:	f1 1d       	adc	r31, r1
    45ec:	80 81       	ld	r24, Z
    45ee:	b7 01       	movw	r22, r14
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    45f6:	80 2f       	mov	r24, r16
    45f8:	01 13       	cpse	r16, r17
    45fa:	f3 cf       	rjmp	.-26     	; 0x45e2 <vfprintf+0x392>
    45fc:	e6 cf       	rjmp	.-52     	; 0x45ca <vfprintf+0x37a>
    45fe:	85 e4       	ldi	r24, 0x45	; 69
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	b7 01       	movw	r22, r14
    4604:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    4608:	d7 fc       	sbrc	r13, 7
    460a:	06 c0       	rjmp	.+12     	; 0x4618 <vfprintf+0x3c8>
    460c:	c1 14       	cp	r12, r1
    460e:	d1 04       	cpc	r13, r1
    4610:	41 f4       	brne	.+16     	; 0x4622 <vfprintf+0x3d2>
    4612:	ec 85       	ldd	r30, Y+12	; 0x0c
    4614:	e4 ff       	sbrs	r30, 4
    4616:	05 c0       	rjmp	.+10     	; 0x4622 <vfprintf+0x3d2>
    4618:	d1 94       	neg	r13
    461a:	c1 94       	neg	r12
    461c:	d1 08       	sbc	r13, r1
    461e:	8d e2       	ldi	r24, 0x2D	; 45
    4620:	01 c0       	rjmp	.+2      	; 0x4624 <vfprintf+0x3d4>
    4622:	8b e2       	ldi	r24, 0x2B	; 43
    4624:	b7 01       	movw	r22, r14
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    462c:	80 e3       	ldi	r24, 0x30	; 48
    462e:	2a e0       	ldi	r18, 0x0A	; 10
    4630:	c2 16       	cp	r12, r18
    4632:	d1 04       	cpc	r13, r1
    4634:	2c f0       	brlt	.+10     	; 0x4640 <vfprintf+0x3f0>
    4636:	8f 5f       	subi	r24, 0xFF	; 255
    4638:	fa e0       	ldi	r31, 0x0A	; 10
    463a:	cf 1a       	sub	r12, r31
    463c:	d1 08       	sbc	r13, r1
    463e:	f7 cf       	rjmp	.-18     	; 0x462e <vfprintf+0x3de>
    4640:	b7 01       	movw	r22, r14
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    4648:	b7 01       	movw	r22, r14
    464a:	c6 01       	movw	r24, r12
    464c:	c0 96       	adiw	r24, 0x30	; 48
    464e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    4652:	54 c1       	rjmp	.+680    	; 0x48fc <vfprintf+0x6ac>
    4654:	83 36       	cpi	r24, 0x63	; 99
    4656:	31 f0       	breq	.+12     	; 0x4664 <vfprintf+0x414>
    4658:	83 37       	cpi	r24, 0x73	; 115
    465a:	79 f0       	breq	.+30     	; 0x467a <vfprintf+0x42a>
    465c:	83 35       	cpi	r24, 0x53	; 83
    465e:	09 f0       	breq	.+2      	; 0x4662 <vfprintf+0x412>
    4660:	56 c0       	rjmp	.+172    	; 0x470e <vfprintf+0x4be>
    4662:	20 c0       	rjmp	.+64     	; 0x46a4 <vfprintf+0x454>
    4664:	56 01       	movw	r10, r12
    4666:	32 e0       	ldi	r19, 0x02	; 2
    4668:	a3 0e       	add	r10, r19
    466a:	b1 1c       	adc	r11, r1
    466c:	f6 01       	movw	r30, r12
    466e:	80 81       	ld	r24, Z
    4670:	89 83       	std	Y+1, r24	; 0x01
    4672:	01 e0       	ldi	r16, 0x01	; 1
    4674:	10 e0       	ldi	r17, 0x00	; 0
    4676:	63 01       	movw	r12, r6
    4678:	12 c0       	rjmp	.+36     	; 0x469e <vfprintf+0x44e>
    467a:	56 01       	movw	r10, r12
    467c:	f2 e0       	ldi	r31, 0x02	; 2
    467e:	af 0e       	add	r10, r31
    4680:	b1 1c       	adc	r11, r1
    4682:	f6 01       	movw	r30, r12
    4684:	c0 80       	ld	r12, Z
    4686:	d1 80       	ldd	r13, Z+1	; 0x01
    4688:	96 fe       	sbrs	r9, 6
    468a:	03 c0       	rjmp	.+6      	; 0x4692 <vfprintf+0x442>
    468c:	61 2f       	mov	r22, r17
    468e:	70 e0       	ldi	r23, 0x00	; 0
    4690:	02 c0       	rjmp	.+4      	; 0x4696 <vfprintf+0x446>
    4692:	6f ef       	ldi	r22, 0xFF	; 255
    4694:	7f ef       	ldi	r23, 0xFF	; 255
    4696:	c6 01       	movw	r24, r12
    4698:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <strnlen>
    469c:	8c 01       	movw	r16, r24
    469e:	f9 2d       	mov	r31, r9
    46a0:	ff 77       	andi	r31, 0x7F	; 127
    46a2:	14 c0       	rjmp	.+40     	; 0x46cc <vfprintf+0x47c>
    46a4:	56 01       	movw	r10, r12
    46a6:	22 e0       	ldi	r18, 0x02	; 2
    46a8:	a2 0e       	add	r10, r18
    46aa:	b1 1c       	adc	r11, r1
    46ac:	f6 01       	movw	r30, r12
    46ae:	c0 80       	ld	r12, Z
    46b0:	d1 80       	ldd	r13, Z+1	; 0x01
    46b2:	96 fe       	sbrs	r9, 6
    46b4:	03 c0       	rjmp	.+6      	; 0x46bc <vfprintf+0x46c>
    46b6:	61 2f       	mov	r22, r17
    46b8:	70 e0       	ldi	r23, 0x00	; 0
    46ba:	02 c0       	rjmp	.+4      	; 0x46c0 <vfprintf+0x470>
    46bc:	6f ef       	ldi	r22, 0xFF	; 255
    46be:	7f ef       	ldi	r23, 0xFF	; 255
    46c0:	c6 01       	movw	r24, r12
    46c2:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <strnlen_P>
    46c6:	8c 01       	movw	r16, r24
    46c8:	f9 2d       	mov	r31, r9
    46ca:	f0 68       	ori	r31, 0x80	; 128
    46cc:	9f 2e       	mov	r9, r31
    46ce:	f3 fd       	sbrc	r31, 3
    46d0:	1a c0       	rjmp	.+52     	; 0x4706 <vfprintf+0x4b6>
    46d2:	85 2d       	mov	r24, r5
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	08 17       	cp	r16, r24
    46d8:	19 07       	cpc	r17, r25
    46da:	a8 f4       	brcc	.+42     	; 0x4706 <vfprintf+0x4b6>
    46dc:	b7 01       	movw	r22, r14
    46de:	80 e2       	ldi	r24, 0x20	; 32
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    46e6:	5a 94       	dec	r5
    46e8:	f4 cf       	rjmp	.-24     	; 0x46d2 <vfprintf+0x482>
    46ea:	f6 01       	movw	r30, r12
    46ec:	97 fc       	sbrc	r9, 7
    46ee:	85 91       	lpm	r24, Z+
    46f0:	97 fe       	sbrs	r9, 7
    46f2:	81 91       	ld	r24, Z+
    46f4:	6f 01       	movw	r12, r30
    46f6:	b7 01       	movw	r22, r14
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    46fe:	51 10       	cpse	r5, r1
    4700:	5a 94       	dec	r5
    4702:	01 50       	subi	r16, 0x01	; 1
    4704:	11 09       	sbc	r17, r1
    4706:	01 15       	cp	r16, r1
    4708:	11 05       	cpc	r17, r1
    470a:	79 f7       	brne	.-34     	; 0x46ea <vfprintf+0x49a>
    470c:	f7 c0       	rjmp	.+494    	; 0x48fc <vfprintf+0x6ac>
    470e:	84 36       	cpi	r24, 0x64	; 100
    4710:	11 f0       	breq	.+4      	; 0x4716 <vfprintf+0x4c6>
    4712:	89 36       	cpi	r24, 0x69	; 105
    4714:	61 f5       	brne	.+88     	; 0x476e <vfprintf+0x51e>
    4716:	56 01       	movw	r10, r12
    4718:	97 fe       	sbrs	r9, 7
    471a:	09 c0       	rjmp	.+18     	; 0x472e <vfprintf+0x4de>
    471c:	24 e0       	ldi	r18, 0x04	; 4
    471e:	a2 0e       	add	r10, r18
    4720:	b1 1c       	adc	r11, r1
    4722:	f6 01       	movw	r30, r12
    4724:	60 81       	ld	r22, Z
    4726:	71 81       	ldd	r23, Z+1	; 0x01
    4728:	82 81       	ldd	r24, Z+2	; 0x02
    472a:	93 81       	ldd	r25, Z+3	; 0x03
    472c:	0a c0       	rjmp	.+20     	; 0x4742 <vfprintf+0x4f2>
    472e:	f2 e0       	ldi	r31, 0x02	; 2
    4730:	af 0e       	add	r10, r31
    4732:	b1 1c       	adc	r11, r1
    4734:	f6 01       	movw	r30, r12
    4736:	60 81       	ld	r22, Z
    4738:	71 81       	ldd	r23, Z+1	; 0x01
    473a:	07 2e       	mov	r0, r23
    473c:	00 0c       	add	r0, r0
    473e:	88 0b       	sbc	r24, r24
    4740:	99 0b       	sbc	r25, r25
    4742:	f9 2d       	mov	r31, r9
    4744:	ff 76       	andi	r31, 0x6F	; 111
    4746:	9f 2e       	mov	r9, r31
    4748:	97 ff       	sbrs	r25, 7
    474a:	09 c0       	rjmp	.+18     	; 0x475e <vfprintf+0x50e>
    474c:	90 95       	com	r25
    474e:	80 95       	com	r24
    4750:	70 95       	com	r23
    4752:	61 95       	neg	r22
    4754:	7f 4f       	sbci	r23, 0xFF	; 255
    4756:	8f 4f       	sbci	r24, 0xFF	; 255
    4758:	9f 4f       	sbci	r25, 0xFF	; 255
    475a:	f0 68       	ori	r31, 0x80	; 128
    475c:	9f 2e       	mov	r9, r31
    475e:	2a e0       	ldi	r18, 0x0A	; 10
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	a3 01       	movw	r20, r6
    4764:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <__ultoa_invert>
    4768:	c8 2e       	mov	r12, r24
    476a:	c6 18       	sub	r12, r6
    476c:	3f c0       	rjmp	.+126    	; 0x47ec <vfprintf+0x59c>
    476e:	09 2d       	mov	r16, r9
    4770:	85 37       	cpi	r24, 0x75	; 117
    4772:	21 f4       	brne	.+8      	; 0x477c <vfprintf+0x52c>
    4774:	0f 7e       	andi	r16, 0xEF	; 239
    4776:	2a e0       	ldi	r18, 0x0A	; 10
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	1d c0       	rjmp	.+58     	; 0x47b6 <vfprintf+0x566>
    477c:	09 7f       	andi	r16, 0xF9	; 249
    477e:	8f 36       	cpi	r24, 0x6F	; 111
    4780:	91 f0       	breq	.+36     	; 0x47a6 <vfprintf+0x556>
    4782:	18 f4       	brcc	.+6      	; 0x478a <vfprintf+0x53a>
    4784:	88 35       	cpi	r24, 0x58	; 88
    4786:	59 f0       	breq	.+22     	; 0x479e <vfprintf+0x54e>
    4788:	c3 c0       	rjmp	.+390    	; 0x4910 <vfprintf+0x6c0>
    478a:	80 37       	cpi	r24, 0x70	; 112
    478c:	19 f0       	breq	.+6      	; 0x4794 <vfprintf+0x544>
    478e:	88 37       	cpi	r24, 0x78	; 120
    4790:	11 f0       	breq	.+4      	; 0x4796 <vfprintf+0x546>
    4792:	be c0       	rjmp	.+380    	; 0x4910 <vfprintf+0x6c0>
    4794:	00 61       	ori	r16, 0x10	; 16
    4796:	04 ff       	sbrs	r16, 4
    4798:	09 c0       	rjmp	.+18     	; 0x47ac <vfprintf+0x55c>
    479a:	04 60       	ori	r16, 0x04	; 4
    479c:	07 c0       	rjmp	.+14     	; 0x47ac <vfprintf+0x55c>
    479e:	94 fe       	sbrs	r9, 4
    47a0:	08 c0       	rjmp	.+16     	; 0x47b2 <vfprintf+0x562>
    47a2:	06 60       	ori	r16, 0x06	; 6
    47a4:	06 c0       	rjmp	.+12     	; 0x47b2 <vfprintf+0x562>
    47a6:	28 e0       	ldi	r18, 0x08	; 8
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	05 c0       	rjmp	.+10     	; 0x47b6 <vfprintf+0x566>
    47ac:	20 e1       	ldi	r18, 0x10	; 16
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	02 c0       	rjmp	.+4      	; 0x47b6 <vfprintf+0x566>
    47b2:	20 e1       	ldi	r18, 0x10	; 16
    47b4:	32 e0       	ldi	r19, 0x02	; 2
    47b6:	56 01       	movw	r10, r12
    47b8:	07 ff       	sbrs	r16, 7
    47ba:	09 c0       	rjmp	.+18     	; 0x47ce <vfprintf+0x57e>
    47bc:	84 e0       	ldi	r24, 0x04	; 4
    47be:	a8 0e       	add	r10, r24
    47c0:	b1 1c       	adc	r11, r1
    47c2:	f6 01       	movw	r30, r12
    47c4:	60 81       	ld	r22, Z
    47c6:	71 81       	ldd	r23, Z+1	; 0x01
    47c8:	82 81       	ldd	r24, Z+2	; 0x02
    47ca:	93 81       	ldd	r25, Z+3	; 0x03
    47cc:	08 c0       	rjmp	.+16     	; 0x47de <vfprintf+0x58e>
    47ce:	f2 e0       	ldi	r31, 0x02	; 2
    47d0:	af 0e       	add	r10, r31
    47d2:	b1 1c       	adc	r11, r1
    47d4:	f6 01       	movw	r30, r12
    47d6:	60 81       	ld	r22, Z
    47d8:	71 81       	ldd	r23, Z+1	; 0x01
    47da:	80 e0       	ldi	r24, 0x00	; 0
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	a3 01       	movw	r20, r6
    47e0:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <__ultoa_invert>
    47e4:	c8 2e       	mov	r12, r24
    47e6:	c6 18       	sub	r12, r6
    47e8:	0f 77       	andi	r16, 0x7F	; 127
    47ea:	90 2e       	mov	r9, r16
    47ec:	96 fe       	sbrs	r9, 6
    47ee:	0b c0       	rjmp	.+22     	; 0x4806 <vfprintf+0x5b6>
    47f0:	09 2d       	mov	r16, r9
    47f2:	0e 7f       	andi	r16, 0xFE	; 254
    47f4:	c1 16       	cp	r12, r17
    47f6:	50 f4       	brcc	.+20     	; 0x480c <vfprintf+0x5bc>
    47f8:	94 fe       	sbrs	r9, 4
    47fa:	0a c0       	rjmp	.+20     	; 0x4810 <vfprintf+0x5c0>
    47fc:	92 fc       	sbrc	r9, 2
    47fe:	08 c0       	rjmp	.+16     	; 0x4810 <vfprintf+0x5c0>
    4800:	09 2d       	mov	r16, r9
    4802:	0e 7e       	andi	r16, 0xEE	; 238
    4804:	05 c0       	rjmp	.+10     	; 0x4810 <vfprintf+0x5c0>
    4806:	dc 2c       	mov	r13, r12
    4808:	09 2d       	mov	r16, r9
    480a:	03 c0       	rjmp	.+6      	; 0x4812 <vfprintf+0x5c2>
    480c:	dc 2c       	mov	r13, r12
    480e:	01 c0       	rjmp	.+2      	; 0x4812 <vfprintf+0x5c2>
    4810:	d1 2e       	mov	r13, r17
    4812:	04 ff       	sbrs	r16, 4
    4814:	0d c0       	rjmp	.+26     	; 0x4830 <vfprintf+0x5e0>
    4816:	fe 01       	movw	r30, r28
    4818:	ec 0d       	add	r30, r12
    481a:	f1 1d       	adc	r31, r1
    481c:	80 81       	ld	r24, Z
    481e:	80 33       	cpi	r24, 0x30	; 48
    4820:	11 f4       	brne	.+4      	; 0x4826 <vfprintf+0x5d6>
    4822:	09 7e       	andi	r16, 0xE9	; 233
    4824:	09 c0       	rjmp	.+18     	; 0x4838 <vfprintf+0x5e8>
    4826:	02 ff       	sbrs	r16, 2
    4828:	06 c0       	rjmp	.+12     	; 0x4836 <vfprintf+0x5e6>
    482a:	d3 94       	inc	r13
    482c:	d3 94       	inc	r13
    482e:	04 c0       	rjmp	.+8      	; 0x4838 <vfprintf+0x5e8>
    4830:	80 2f       	mov	r24, r16
    4832:	86 78       	andi	r24, 0x86	; 134
    4834:	09 f0       	breq	.+2      	; 0x4838 <vfprintf+0x5e8>
    4836:	d3 94       	inc	r13
    4838:	03 fd       	sbrc	r16, 3
    483a:	11 c0       	rjmp	.+34     	; 0x485e <vfprintf+0x60e>
    483c:	00 ff       	sbrs	r16, 0
    483e:	06 c0       	rjmp	.+12     	; 0x484c <vfprintf+0x5fc>
    4840:	1c 2d       	mov	r17, r12
    4842:	d5 14       	cp	r13, r5
    4844:	80 f4       	brcc	.+32     	; 0x4866 <vfprintf+0x616>
    4846:	15 0d       	add	r17, r5
    4848:	1d 19       	sub	r17, r13
    484a:	0d c0       	rjmp	.+26     	; 0x4866 <vfprintf+0x616>
    484c:	d5 14       	cp	r13, r5
    484e:	58 f4       	brcc	.+22     	; 0x4866 <vfprintf+0x616>
    4850:	b7 01       	movw	r22, r14
    4852:	80 e2       	ldi	r24, 0x20	; 32
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    485a:	d3 94       	inc	r13
    485c:	f7 cf       	rjmp	.-18     	; 0x484c <vfprintf+0x5fc>
    485e:	d5 14       	cp	r13, r5
    4860:	10 f4       	brcc	.+4      	; 0x4866 <vfprintf+0x616>
    4862:	5d 18       	sub	r5, r13
    4864:	01 c0       	rjmp	.+2      	; 0x4868 <vfprintf+0x618>
    4866:	51 2c       	mov	r5, r1
    4868:	04 ff       	sbrs	r16, 4
    486a:	10 c0       	rjmp	.+32     	; 0x488c <vfprintf+0x63c>
    486c:	b7 01       	movw	r22, r14
    486e:	80 e3       	ldi	r24, 0x30	; 48
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    4876:	02 ff       	sbrs	r16, 2
    4878:	17 c0       	rjmp	.+46     	; 0x48a8 <vfprintf+0x658>
    487a:	01 fd       	sbrc	r16, 1
    487c:	03 c0       	rjmp	.+6      	; 0x4884 <vfprintf+0x634>
    487e:	88 e7       	ldi	r24, 0x78	; 120
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	02 c0       	rjmp	.+4      	; 0x4888 <vfprintf+0x638>
    4884:	88 e5       	ldi	r24, 0x58	; 88
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	b7 01       	movw	r22, r14
    488a:	0c c0       	rjmp	.+24     	; 0x48a4 <vfprintf+0x654>
    488c:	80 2f       	mov	r24, r16
    488e:	86 78       	andi	r24, 0x86	; 134
    4890:	59 f0       	breq	.+22     	; 0x48a8 <vfprintf+0x658>
    4892:	01 ff       	sbrs	r16, 1
    4894:	02 c0       	rjmp	.+4      	; 0x489a <vfprintf+0x64a>
    4896:	8b e2       	ldi	r24, 0x2B	; 43
    4898:	01 c0       	rjmp	.+2      	; 0x489c <vfprintf+0x64c>
    489a:	80 e2       	ldi	r24, 0x20	; 32
    489c:	07 fd       	sbrc	r16, 7
    489e:	8d e2       	ldi	r24, 0x2D	; 45
    48a0:	b7 01       	movw	r22, r14
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    48a8:	c1 16       	cp	r12, r17
    48aa:	38 f4       	brcc	.+14     	; 0x48ba <vfprintf+0x66a>
    48ac:	b7 01       	movw	r22, r14
    48ae:	80 e3       	ldi	r24, 0x30	; 48
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    48b6:	11 50       	subi	r17, 0x01	; 1
    48b8:	f7 cf       	rjmp	.-18     	; 0x48a8 <vfprintf+0x658>
    48ba:	ca 94       	dec	r12
    48bc:	f3 01       	movw	r30, r6
    48be:	ec 0d       	add	r30, r12
    48c0:	f1 1d       	adc	r31, r1
    48c2:	80 81       	ld	r24, Z
    48c4:	b7 01       	movw	r22, r14
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    48cc:	c1 10       	cpse	r12, r1
    48ce:	f5 cf       	rjmp	.-22     	; 0x48ba <vfprintf+0x66a>
    48d0:	15 c0       	rjmp	.+42     	; 0x48fc <vfprintf+0x6ac>
    48d2:	f4 e0       	ldi	r31, 0x04	; 4
    48d4:	f5 15       	cp	r31, r5
    48d6:	60 f5       	brcc	.+88     	; 0x4930 <vfprintf+0x6e0>
    48d8:	84 e0       	ldi	r24, 0x04	; 4
    48da:	58 1a       	sub	r5, r24
    48dc:	93 fe       	sbrs	r9, 3
    48de:	1f c0       	rjmp	.+62     	; 0x491e <vfprintf+0x6ce>
    48e0:	01 11       	cpse	r16, r1
    48e2:	27 c0       	rjmp	.+78     	; 0x4932 <vfprintf+0x6e2>
    48e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    48e6:	23 ff       	sbrs	r18, 3
    48e8:	2a c0       	rjmp	.+84     	; 0x493e <vfprintf+0x6ee>
    48ea:	0c e3       	ldi	r16, 0x3C	; 60
    48ec:	12 e0       	ldi	r17, 0x02	; 2
    48ee:	39 2d       	mov	r19, r9
    48f0:	30 71       	andi	r19, 0x10	; 16
    48f2:	93 2e       	mov	r9, r19
    48f4:	f8 01       	movw	r30, r16
    48f6:	84 91       	lpm	r24, Z
    48f8:	81 11       	cpse	r24, r1
    48fa:	24 c0       	rjmp	.+72     	; 0x4944 <vfprintf+0x6f4>
    48fc:	55 20       	and	r5, r5
    48fe:	09 f4       	brne	.+2      	; 0x4902 <vfprintf+0x6b2>
    4900:	e4 cc       	rjmp	.-1592   	; 0x42ca <vfprintf+0x7a>
    4902:	b7 01       	movw	r22, r14
    4904:	80 e2       	ldi	r24, 0x20	; 32
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    490c:	5a 94       	dec	r5
    490e:	f6 cf       	rjmp	.-20     	; 0x48fc <vfprintf+0x6ac>
    4910:	f7 01       	movw	r30, r14
    4912:	86 81       	ldd	r24, Z+6	; 0x06
    4914:	97 81       	ldd	r25, Z+7	; 0x07
    4916:	26 c0       	rjmp	.+76     	; 0x4964 <vfprintf+0x714>
    4918:	8f ef       	ldi	r24, 0xFF	; 255
    491a:	9f ef       	ldi	r25, 0xFF	; 255
    491c:	23 c0       	rjmp	.+70     	; 0x4964 <vfprintf+0x714>
    491e:	b7 01       	movw	r22, r14
    4920:	80 e2       	ldi	r24, 0x20	; 32
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    4928:	5a 94       	dec	r5
    492a:	51 10       	cpse	r5, r1
    492c:	f8 cf       	rjmp	.-16     	; 0x491e <vfprintf+0x6ce>
    492e:	d8 cf       	rjmp	.-80     	; 0x48e0 <vfprintf+0x690>
    4930:	51 2c       	mov	r5, r1
    4932:	b7 01       	movw	r22, r14
    4934:	80 2f       	mov	r24, r16
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    493c:	d3 cf       	rjmp	.-90     	; 0x48e4 <vfprintf+0x694>
    493e:	00 e4       	ldi	r16, 0x40	; 64
    4940:	12 e0       	ldi	r17, 0x02	; 2
    4942:	d5 cf       	rjmp	.-86     	; 0x48ee <vfprintf+0x69e>
    4944:	91 10       	cpse	r9, r1
    4946:	80 52       	subi	r24, 0x20	; 32
    4948:	b7 01       	movw	r22, r14
    494a:	90 e0       	ldi	r25, 0x00	; 0
    494c:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <fputc>
    4950:	0f 5f       	subi	r16, 0xFF	; 255
    4952:	1f 4f       	sbci	r17, 0xFF	; 255
    4954:	cf cf       	rjmp	.-98     	; 0x48f4 <vfprintf+0x6a4>
    4956:	23 e0       	ldi	r18, 0x03	; 3
    4958:	25 15       	cp	r18, r5
    495a:	10 f4       	brcc	.+4      	; 0x4960 <vfprintf+0x710>
    495c:	83 e0       	ldi	r24, 0x03	; 3
    495e:	bd cf       	rjmp	.-134    	; 0x48da <vfprintf+0x68a>
    4960:	51 2c       	mov	r5, r1
    4962:	c0 cf       	rjmp	.-128    	; 0x48e4 <vfprintf+0x694>
    4964:	60 96       	adiw	r28, 0x10	; 16
    4966:	cd bf       	out	0x3d, r28	; 61
    4968:	de bf       	out	0x3e, r29	; 62
    496a:	df 91       	pop	r29
    496c:	cf 91       	pop	r28
    496e:	1f 91       	pop	r17
    4970:	0f 91       	pop	r16
    4972:	ff 90       	pop	r15
    4974:	ef 90       	pop	r14
    4976:	df 90       	pop	r13
    4978:	cf 90       	pop	r12
    497a:	bf 90       	pop	r11
    497c:	af 90       	pop	r10
    497e:	9f 90       	pop	r9
    4980:	8f 90       	pop	r8
    4982:	7f 90       	pop	r7
    4984:	6f 90       	pop	r6
    4986:	5f 90       	pop	r5
    4988:	4f 90       	pop	r4
    498a:	3f 90       	pop	r3
    498c:	2f 90       	pop	r2
    498e:	08 95       	ret

00004990 <__tablejump2__>:
    4990:	ee 0f       	add	r30, r30
    4992:	ff 1f       	adc	r31, r31
    4994:	88 1f       	adc	r24, r24
    4996:	8b bf       	out	0x3b, r24	; 59
    4998:	07 90       	elpm	r0, Z+
    499a:	f6 91       	elpm	r31, Z
    499c:	e0 2d       	mov	r30, r0
    499e:	19 94       	eijmp

000049a0 <__ftoa_engine>:
    49a0:	28 30       	cpi	r18, 0x08	; 8
    49a2:	08 f0       	brcs	.+2      	; 0x49a6 <__ftoa_engine+0x6>
    49a4:	27 e0       	ldi	r18, 0x07	; 7
    49a6:	33 27       	eor	r19, r19
    49a8:	da 01       	movw	r26, r20
    49aa:	99 0f       	add	r25, r25
    49ac:	31 1d       	adc	r19, r1
    49ae:	87 fd       	sbrc	r24, 7
    49b0:	91 60       	ori	r25, 0x01	; 1
    49b2:	00 96       	adiw	r24, 0x00	; 0
    49b4:	61 05       	cpc	r22, r1
    49b6:	71 05       	cpc	r23, r1
    49b8:	39 f4       	brne	.+14     	; 0x49c8 <__ftoa_engine+0x28>
    49ba:	32 60       	ori	r19, 0x02	; 2
    49bc:	2e 5f       	subi	r18, 0xFE	; 254
    49be:	3d 93       	st	X+, r19
    49c0:	30 e3       	ldi	r19, 0x30	; 48
    49c2:	2a 95       	dec	r18
    49c4:	e1 f7       	brne	.-8      	; 0x49be <__ftoa_engine+0x1e>
    49c6:	08 95       	ret
    49c8:	9f 3f       	cpi	r25, 0xFF	; 255
    49ca:	30 f0       	brcs	.+12     	; 0x49d8 <__ftoa_engine+0x38>
    49cc:	80 38       	cpi	r24, 0x80	; 128
    49ce:	71 05       	cpc	r23, r1
    49d0:	61 05       	cpc	r22, r1
    49d2:	09 f0       	breq	.+2      	; 0x49d6 <__ftoa_engine+0x36>
    49d4:	3c 5f       	subi	r19, 0xFC	; 252
    49d6:	3c 5f       	subi	r19, 0xFC	; 252
    49d8:	3d 93       	st	X+, r19
    49da:	91 30       	cpi	r25, 0x01	; 1
    49dc:	08 f0       	brcs	.+2      	; 0x49e0 <__ftoa_engine+0x40>
    49de:	80 68       	ori	r24, 0x80	; 128
    49e0:	91 1d       	adc	r25, r1
    49e2:	df 93       	push	r29
    49e4:	cf 93       	push	r28
    49e6:	1f 93       	push	r17
    49e8:	0f 93       	push	r16
    49ea:	ff 92       	push	r15
    49ec:	ef 92       	push	r14
    49ee:	19 2f       	mov	r17, r25
    49f0:	98 7f       	andi	r25, 0xF8	; 248
    49f2:	96 95       	lsr	r25
    49f4:	e9 2f       	mov	r30, r25
    49f6:	96 95       	lsr	r25
    49f8:	96 95       	lsr	r25
    49fa:	e9 0f       	add	r30, r25
    49fc:	ff 27       	eor	r31, r31
    49fe:	e2 56       	subi	r30, 0x62	; 98
    4a00:	fd 4f       	sbci	r31, 0xFD	; 253
    4a02:	99 27       	eor	r25, r25
    4a04:	33 27       	eor	r19, r19
    4a06:	ee 24       	eor	r14, r14
    4a08:	ff 24       	eor	r15, r15
    4a0a:	a7 01       	movw	r20, r14
    4a0c:	e7 01       	movw	r28, r14
    4a0e:	05 90       	lpm	r0, Z+
    4a10:	08 94       	sec
    4a12:	07 94       	ror	r0
    4a14:	28 f4       	brcc	.+10     	; 0x4a20 <__ftoa_engine+0x80>
    4a16:	36 0f       	add	r19, r22
    4a18:	e7 1e       	adc	r14, r23
    4a1a:	f8 1e       	adc	r15, r24
    4a1c:	49 1f       	adc	r20, r25
    4a1e:	51 1d       	adc	r21, r1
    4a20:	66 0f       	add	r22, r22
    4a22:	77 1f       	adc	r23, r23
    4a24:	88 1f       	adc	r24, r24
    4a26:	99 1f       	adc	r25, r25
    4a28:	06 94       	lsr	r0
    4a2a:	a1 f7       	brne	.-24     	; 0x4a14 <__ftoa_engine+0x74>
    4a2c:	05 90       	lpm	r0, Z+
    4a2e:	07 94       	ror	r0
    4a30:	28 f4       	brcc	.+10     	; 0x4a3c <__ftoa_engine+0x9c>
    4a32:	e7 0e       	add	r14, r23
    4a34:	f8 1e       	adc	r15, r24
    4a36:	49 1f       	adc	r20, r25
    4a38:	56 1f       	adc	r21, r22
    4a3a:	c1 1d       	adc	r28, r1
    4a3c:	77 0f       	add	r23, r23
    4a3e:	88 1f       	adc	r24, r24
    4a40:	99 1f       	adc	r25, r25
    4a42:	66 1f       	adc	r22, r22
    4a44:	06 94       	lsr	r0
    4a46:	a1 f7       	brne	.-24     	; 0x4a30 <__ftoa_engine+0x90>
    4a48:	05 90       	lpm	r0, Z+
    4a4a:	07 94       	ror	r0
    4a4c:	28 f4       	brcc	.+10     	; 0x4a58 <__ftoa_engine+0xb8>
    4a4e:	f8 0e       	add	r15, r24
    4a50:	49 1f       	adc	r20, r25
    4a52:	56 1f       	adc	r21, r22
    4a54:	c7 1f       	adc	r28, r23
    4a56:	d1 1d       	adc	r29, r1
    4a58:	88 0f       	add	r24, r24
    4a5a:	99 1f       	adc	r25, r25
    4a5c:	66 1f       	adc	r22, r22
    4a5e:	77 1f       	adc	r23, r23
    4a60:	06 94       	lsr	r0
    4a62:	a1 f7       	brne	.-24     	; 0x4a4c <__ftoa_engine+0xac>
    4a64:	05 90       	lpm	r0, Z+
    4a66:	07 94       	ror	r0
    4a68:	20 f4       	brcc	.+8      	; 0x4a72 <__ftoa_engine+0xd2>
    4a6a:	49 0f       	add	r20, r25
    4a6c:	56 1f       	adc	r21, r22
    4a6e:	c7 1f       	adc	r28, r23
    4a70:	d8 1f       	adc	r29, r24
    4a72:	99 0f       	add	r25, r25
    4a74:	66 1f       	adc	r22, r22
    4a76:	77 1f       	adc	r23, r23
    4a78:	88 1f       	adc	r24, r24
    4a7a:	06 94       	lsr	r0
    4a7c:	a9 f7       	brne	.-22     	; 0x4a68 <__ftoa_engine+0xc8>
    4a7e:	84 91       	lpm	r24, Z
    4a80:	10 95       	com	r17
    4a82:	17 70       	andi	r17, 0x07	; 7
    4a84:	41 f0       	breq	.+16     	; 0x4a96 <__ftoa_engine+0xf6>
    4a86:	d6 95       	lsr	r29
    4a88:	c7 95       	ror	r28
    4a8a:	57 95       	ror	r21
    4a8c:	47 95       	ror	r20
    4a8e:	f7 94       	ror	r15
    4a90:	e7 94       	ror	r14
    4a92:	1a 95       	dec	r17
    4a94:	c1 f7       	brne	.-16     	; 0x4a86 <__ftoa_engine+0xe6>
    4a96:	e4 e4       	ldi	r30, 0x44	; 68
    4a98:	f2 e0       	ldi	r31, 0x02	; 2
    4a9a:	68 94       	set
    4a9c:	15 90       	lpm	r1, Z+
    4a9e:	15 91       	lpm	r17, Z+
    4aa0:	35 91       	lpm	r19, Z+
    4aa2:	65 91       	lpm	r22, Z+
    4aa4:	95 91       	lpm	r25, Z+
    4aa6:	05 90       	lpm	r0, Z+
    4aa8:	7f e2       	ldi	r23, 0x2F	; 47
    4aaa:	73 95       	inc	r23
    4aac:	e1 18       	sub	r14, r1
    4aae:	f1 0a       	sbc	r15, r17
    4ab0:	43 0b       	sbc	r20, r19
    4ab2:	56 0b       	sbc	r21, r22
    4ab4:	c9 0b       	sbc	r28, r25
    4ab6:	d0 09       	sbc	r29, r0
    4ab8:	c0 f7       	brcc	.-16     	; 0x4aaa <__ftoa_engine+0x10a>
    4aba:	e1 0c       	add	r14, r1
    4abc:	f1 1e       	adc	r15, r17
    4abe:	43 1f       	adc	r20, r19
    4ac0:	56 1f       	adc	r21, r22
    4ac2:	c9 1f       	adc	r28, r25
    4ac4:	d0 1d       	adc	r29, r0
    4ac6:	7e f4       	brtc	.+30     	; 0x4ae6 <__ftoa_engine+0x146>
    4ac8:	70 33       	cpi	r23, 0x30	; 48
    4aca:	11 f4       	brne	.+4      	; 0x4ad0 <__ftoa_engine+0x130>
    4acc:	8a 95       	dec	r24
    4ace:	e6 cf       	rjmp	.-52     	; 0x4a9c <__ftoa_engine+0xfc>
    4ad0:	e8 94       	clt
    4ad2:	01 50       	subi	r16, 0x01	; 1
    4ad4:	30 f0       	brcs	.+12     	; 0x4ae2 <__ftoa_engine+0x142>
    4ad6:	08 0f       	add	r16, r24
    4ad8:	0a f4       	brpl	.+2      	; 0x4adc <__ftoa_engine+0x13c>
    4ada:	00 27       	eor	r16, r16
    4adc:	02 17       	cp	r16, r18
    4ade:	08 f4       	brcc	.+2      	; 0x4ae2 <__ftoa_engine+0x142>
    4ae0:	20 2f       	mov	r18, r16
    4ae2:	23 95       	inc	r18
    4ae4:	02 2f       	mov	r16, r18
    4ae6:	7a 33       	cpi	r23, 0x3A	; 58
    4ae8:	28 f0       	brcs	.+10     	; 0x4af4 <__ftoa_engine+0x154>
    4aea:	79 e3       	ldi	r23, 0x39	; 57
    4aec:	7d 93       	st	X+, r23
    4aee:	2a 95       	dec	r18
    4af0:	e9 f7       	brne	.-6      	; 0x4aec <__ftoa_engine+0x14c>
    4af2:	10 c0       	rjmp	.+32     	; 0x4b14 <__ftoa_engine+0x174>
    4af4:	7d 93       	st	X+, r23
    4af6:	2a 95       	dec	r18
    4af8:	89 f6       	brne	.-94     	; 0x4a9c <__ftoa_engine+0xfc>
    4afa:	06 94       	lsr	r0
    4afc:	97 95       	ror	r25
    4afe:	67 95       	ror	r22
    4b00:	37 95       	ror	r19
    4b02:	17 95       	ror	r17
    4b04:	17 94       	ror	r1
    4b06:	e1 18       	sub	r14, r1
    4b08:	f1 0a       	sbc	r15, r17
    4b0a:	43 0b       	sbc	r20, r19
    4b0c:	56 0b       	sbc	r21, r22
    4b0e:	c9 0b       	sbc	r28, r25
    4b10:	d0 09       	sbc	r29, r0
    4b12:	98 f0       	brcs	.+38     	; 0x4b3a <__ftoa_engine+0x19a>
    4b14:	23 95       	inc	r18
    4b16:	7e 91       	ld	r23, -X
    4b18:	73 95       	inc	r23
    4b1a:	7a 33       	cpi	r23, 0x3A	; 58
    4b1c:	08 f0       	brcs	.+2      	; 0x4b20 <__ftoa_engine+0x180>
    4b1e:	70 e3       	ldi	r23, 0x30	; 48
    4b20:	7c 93       	st	X, r23
    4b22:	20 13       	cpse	r18, r16
    4b24:	b8 f7       	brcc	.-18     	; 0x4b14 <__ftoa_engine+0x174>
    4b26:	7e 91       	ld	r23, -X
    4b28:	70 61       	ori	r23, 0x10	; 16
    4b2a:	7d 93       	st	X+, r23
    4b2c:	30 f0       	brcs	.+12     	; 0x4b3a <__ftoa_engine+0x19a>
    4b2e:	83 95       	inc	r24
    4b30:	71 e3       	ldi	r23, 0x31	; 49
    4b32:	7d 93       	st	X+, r23
    4b34:	70 e3       	ldi	r23, 0x30	; 48
    4b36:	2a 95       	dec	r18
    4b38:	e1 f7       	brne	.-8      	; 0x4b32 <__ftoa_engine+0x192>
    4b3a:	11 24       	eor	r1, r1
    4b3c:	ef 90       	pop	r14
    4b3e:	ff 90       	pop	r15
    4b40:	0f 91       	pop	r16
    4b42:	1f 91       	pop	r17
    4b44:	cf 91       	pop	r28
    4b46:	df 91       	pop	r29
    4b48:	99 27       	eor	r25, r25
    4b4a:	87 fd       	sbrc	r24, 7
    4b4c:	90 95       	com	r25
    4b4e:	08 95       	ret

00004b50 <strnlen_P>:
    4b50:	fc 01       	movw	r30, r24
    4b52:	05 90       	lpm	r0, Z+
    4b54:	61 50       	subi	r22, 0x01	; 1
    4b56:	70 40       	sbci	r23, 0x00	; 0
    4b58:	01 10       	cpse	r0, r1
    4b5a:	d8 f7       	brcc	.-10     	; 0x4b52 <strnlen_P+0x2>
    4b5c:	80 95       	com	r24
    4b5e:	90 95       	com	r25
    4b60:	8e 0f       	add	r24, r30
    4b62:	9f 1f       	adc	r25, r31
    4b64:	08 95       	ret

00004b66 <memcpy>:
    4b66:	fb 01       	movw	r30, r22
    4b68:	dc 01       	movw	r26, r24
    4b6a:	02 c0       	rjmp	.+4      	; 0x4b70 <memcpy+0xa>
    4b6c:	01 90       	ld	r0, Z+
    4b6e:	0d 92       	st	X+, r0
    4b70:	41 50       	subi	r20, 0x01	; 1
    4b72:	50 40       	sbci	r21, 0x00	; 0
    4b74:	d8 f7       	brcc	.-10     	; 0x4b6c <memcpy+0x6>
    4b76:	08 95       	ret

00004b78 <memset>:
    4b78:	dc 01       	movw	r26, r24
    4b7a:	01 c0       	rjmp	.+2      	; 0x4b7e <memset+0x6>
    4b7c:	6d 93       	st	X+, r22
    4b7e:	41 50       	subi	r20, 0x01	; 1
    4b80:	50 40       	sbci	r21, 0x00	; 0
    4b82:	e0 f7       	brcc	.-8      	; 0x4b7c <memset+0x4>
    4b84:	08 95       	ret

00004b86 <strlen>:
    4b86:	fc 01       	movw	r30, r24
    4b88:	01 90       	ld	r0, Z+
    4b8a:	00 20       	and	r0, r0
    4b8c:	e9 f7       	brne	.-6      	; 0x4b88 <strlen+0x2>
    4b8e:	80 95       	com	r24
    4b90:	90 95       	com	r25
    4b92:	8e 0f       	add	r24, r30
    4b94:	9f 1f       	adc	r25, r31
    4b96:	08 95       	ret

00004b98 <strnlen>:
    4b98:	fc 01       	movw	r30, r24
    4b9a:	61 50       	subi	r22, 0x01	; 1
    4b9c:	70 40       	sbci	r23, 0x00	; 0
    4b9e:	01 90       	ld	r0, Z+
    4ba0:	01 10       	cpse	r0, r1
    4ba2:	d8 f7       	brcc	.-10     	; 0x4b9a <strnlen+0x2>
    4ba4:	80 95       	com	r24
    4ba6:	90 95       	com	r25
    4ba8:	8e 0f       	add	r24, r30
    4baa:	9f 1f       	adc	r25, r31
    4bac:	08 95       	ret

00004bae <itoa>:
    4bae:	45 32       	cpi	r20, 0x25	; 37
    4bb0:	51 05       	cpc	r21, r1
    4bb2:	20 f4       	brcc	.+8      	; 0x4bbc <itoa+0xe>
    4bb4:	42 30       	cpi	r20, 0x02	; 2
    4bb6:	10 f0       	brcs	.+4      	; 0x4bbc <itoa+0xe>
    4bb8:	0c 94 e2 25 	jmp	0x4bc4	; 0x4bc4 <__itoa_ncheck>
    4bbc:	fb 01       	movw	r30, r22
    4bbe:	10 82       	st	Z, r1
    4bc0:	cb 01       	movw	r24, r22
    4bc2:	08 95       	ret

00004bc4 <__itoa_ncheck>:
    4bc4:	bb 27       	eor	r27, r27
    4bc6:	4a 30       	cpi	r20, 0x0A	; 10
    4bc8:	31 f4       	brne	.+12     	; 0x4bd6 <__itoa_ncheck+0x12>
    4bca:	99 23       	and	r25, r25
    4bcc:	22 f4       	brpl	.+8      	; 0x4bd6 <__itoa_ncheck+0x12>
    4bce:	bd e2       	ldi	r27, 0x2D	; 45
    4bd0:	90 95       	com	r25
    4bd2:	81 95       	neg	r24
    4bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    4bd6:	0c 94 ee 25 	jmp	0x4bdc	; 0x4bdc <__utoa_common>

00004bda <__utoa_ncheck>:
    4bda:	bb 27       	eor	r27, r27

00004bdc <__utoa_common>:
    4bdc:	fb 01       	movw	r30, r22
    4bde:	55 27       	eor	r21, r21
    4be0:	aa 27       	eor	r26, r26
    4be2:	88 0f       	add	r24, r24
    4be4:	99 1f       	adc	r25, r25
    4be6:	aa 1f       	adc	r26, r26
    4be8:	a4 17       	cp	r26, r20
    4bea:	10 f0       	brcs	.+4      	; 0x4bf0 <__utoa_common+0x14>
    4bec:	a4 1b       	sub	r26, r20
    4bee:	83 95       	inc	r24
    4bf0:	50 51       	subi	r21, 0x10	; 16
    4bf2:	b9 f7       	brne	.-18     	; 0x4be2 <__utoa_common+0x6>
    4bf4:	a0 5d       	subi	r26, 0xD0	; 208
    4bf6:	aa 33       	cpi	r26, 0x3A	; 58
    4bf8:	08 f0       	brcs	.+2      	; 0x4bfc <__utoa_common+0x20>
    4bfa:	a9 5d       	subi	r26, 0xD9	; 217
    4bfc:	a1 93       	st	Z+, r26
    4bfe:	00 97       	sbiw	r24, 0x00	; 0
    4c00:	79 f7       	brne	.-34     	; 0x4be0 <__utoa_common+0x4>
    4c02:	b1 11       	cpse	r27, r1
    4c04:	b1 93       	st	Z+, r27
    4c06:	11 92       	st	Z+, r1
    4c08:	cb 01       	movw	r24, r22
    4c0a:	0c 94 ca 26 	jmp	0x4d94	; 0x4d94 <strrev>

00004c0e <fputc>:
    4c0e:	0f 93       	push	r16
    4c10:	1f 93       	push	r17
    4c12:	cf 93       	push	r28
    4c14:	df 93       	push	r29
    4c16:	fb 01       	movw	r30, r22
    4c18:	23 81       	ldd	r18, Z+3	; 0x03
    4c1a:	21 fd       	sbrc	r18, 1
    4c1c:	03 c0       	rjmp	.+6      	; 0x4c24 <fputc+0x16>
    4c1e:	8f ef       	ldi	r24, 0xFF	; 255
    4c20:	9f ef       	ldi	r25, 0xFF	; 255
    4c22:	2c c0       	rjmp	.+88     	; 0x4c7c <fputc+0x6e>
    4c24:	22 ff       	sbrs	r18, 2
    4c26:	16 c0       	rjmp	.+44     	; 0x4c54 <fputc+0x46>
    4c28:	46 81       	ldd	r20, Z+6	; 0x06
    4c2a:	57 81       	ldd	r21, Z+7	; 0x07
    4c2c:	24 81       	ldd	r18, Z+4	; 0x04
    4c2e:	35 81       	ldd	r19, Z+5	; 0x05
    4c30:	42 17       	cp	r20, r18
    4c32:	53 07       	cpc	r21, r19
    4c34:	44 f4       	brge	.+16     	; 0x4c46 <fputc+0x38>
    4c36:	a0 81       	ld	r26, Z
    4c38:	b1 81       	ldd	r27, Z+1	; 0x01
    4c3a:	9d 01       	movw	r18, r26
    4c3c:	2f 5f       	subi	r18, 0xFF	; 255
    4c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c40:	20 83       	st	Z, r18
    4c42:	31 83       	std	Z+1, r19	; 0x01
    4c44:	8c 93       	st	X, r24
    4c46:	26 81       	ldd	r18, Z+6	; 0x06
    4c48:	37 81       	ldd	r19, Z+7	; 0x07
    4c4a:	2f 5f       	subi	r18, 0xFF	; 255
    4c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c4e:	26 83       	std	Z+6, r18	; 0x06
    4c50:	37 83       	std	Z+7, r19	; 0x07
    4c52:	14 c0       	rjmp	.+40     	; 0x4c7c <fputc+0x6e>
    4c54:	8b 01       	movw	r16, r22
    4c56:	ec 01       	movw	r28, r24
    4c58:	fb 01       	movw	r30, r22
    4c5a:	00 84       	ldd	r0, Z+8	; 0x08
    4c5c:	f1 85       	ldd	r31, Z+9	; 0x09
    4c5e:	e0 2d       	mov	r30, r0
    4c60:	19 95       	eicall
    4c62:	89 2b       	or	r24, r25
    4c64:	e1 f6       	brne	.-72     	; 0x4c1e <fputc+0x10>
    4c66:	d8 01       	movw	r26, r16
    4c68:	16 96       	adiw	r26, 0x06	; 6
    4c6a:	8d 91       	ld	r24, X+
    4c6c:	9c 91       	ld	r25, X
    4c6e:	17 97       	sbiw	r26, 0x07	; 7
    4c70:	01 96       	adiw	r24, 0x01	; 1
    4c72:	16 96       	adiw	r26, 0x06	; 6
    4c74:	8d 93       	st	X+, r24
    4c76:	9c 93       	st	X, r25
    4c78:	17 97       	sbiw	r26, 0x07	; 7
    4c7a:	ce 01       	movw	r24, r28
    4c7c:	df 91       	pop	r29
    4c7e:	cf 91       	pop	r28
    4c80:	1f 91       	pop	r17
    4c82:	0f 91       	pop	r16
    4c84:	08 95       	ret

00004c86 <sprintf>:
    4c86:	0f 93       	push	r16
    4c88:	1f 93       	push	r17
    4c8a:	cf 93       	push	r28
    4c8c:	df 93       	push	r29
    4c8e:	cd b7       	in	r28, 0x3d	; 61
    4c90:	de b7       	in	r29, 0x3e	; 62
    4c92:	2e 97       	sbiw	r28, 0x0e	; 14
    4c94:	cd bf       	out	0x3d, r28	; 61
    4c96:	de bf       	out	0x3e, r29	; 62
    4c98:	0e 89       	ldd	r16, Y+22	; 0x16
    4c9a:	1f 89       	ldd	r17, Y+23	; 0x17
    4c9c:	86 e0       	ldi	r24, 0x06	; 6
    4c9e:	8c 83       	std	Y+4, r24	; 0x04
    4ca0:	09 83       	std	Y+1, r16	; 0x01
    4ca2:	1a 83       	std	Y+2, r17	; 0x02
    4ca4:	8f ef       	ldi	r24, 0xFF	; 255
    4ca6:	9f e7       	ldi	r25, 0x7F	; 127
    4ca8:	8d 83       	std	Y+5, r24	; 0x05
    4caa:	9e 83       	std	Y+6, r25	; 0x06
    4cac:	ae 01       	movw	r20, r28
    4cae:	46 5e       	subi	r20, 0xE6	; 230
    4cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb2:	68 8d       	ldd	r22, Y+24	; 0x18
    4cb4:	79 8d       	ldd	r23, Y+25	; 0x19
    4cb6:	ce 01       	movw	r24, r28
    4cb8:	01 96       	adiw	r24, 0x01	; 1
    4cba:	0e 94 28 21 	call	0x4250	; 0x4250 <vfprintf>
    4cbe:	ef 81       	ldd	r30, Y+7	; 0x07
    4cc0:	f8 85       	ldd	r31, Y+8	; 0x08
    4cc2:	e0 0f       	add	r30, r16
    4cc4:	f1 1f       	adc	r31, r17
    4cc6:	10 82       	st	Z, r1
    4cc8:	2e 96       	adiw	r28, 0x0e	; 14
    4cca:	cd bf       	out	0x3d, r28	; 61
    4ccc:	de bf       	out	0x3e, r29	; 62
    4cce:	df 91       	pop	r29
    4cd0:	cf 91       	pop	r28
    4cd2:	1f 91       	pop	r17
    4cd4:	0f 91       	pop	r16
    4cd6:	08 95       	ret

00004cd8 <__ultoa_invert>:
    4cd8:	fa 01       	movw	r30, r20
    4cda:	aa 27       	eor	r26, r26
    4cdc:	28 30       	cpi	r18, 0x08	; 8
    4cde:	51 f1       	breq	.+84     	; 0x4d34 <__ultoa_invert+0x5c>
    4ce0:	20 31       	cpi	r18, 0x10	; 16
    4ce2:	81 f1       	breq	.+96     	; 0x4d44 <__ultoa_invert+0x6c>
    4ce4:	e8 94       	clt
    4ce6:	6f 93       	push	r22
    4ce8:	6e 7f       	andi	r22, 0xFE	; 254
    4cea:	6e 5f       	subi	r22, 0xFE	; 254
    4cec:	7f 4f       	sbci	r23, 0xFF	; 255
    4cee:	8f 4f       	sbci	r24, 0xFF	; 255
    4cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    4cf2:	af 4f       	sbci	r26, 0xFF	; 255
    4cf4:	b1 e0       	ldi	r27, 0x01	; 1
    4cf6:	3e d0       	rcall	.+124    	; 0x4d74 <__ultoa_invert+0x9c>
    4cf8:	b4 e0       	ldi	r27, 0x04	; 4
    4cfa:	3c d0       	rcall	.+120    	; 0x4d74 <__ultoa_invert+0x9c>
    4cfc:	67 0f       	add	r22, r23
    4cfe:	78 1f       	adc	r23, r24
    4d00:	89 1f       	adc	r24, r25
    4d02:	9a 1f       	adc	r25, r26
    4d04:	a1 1d       	adc	r26, r1
    4d06:	68 0f       	add	r22, r24
    4d08:	79 1f       	adc	r23, r25
    4d0a:	8a 1f       	adc	r24, r26
    4d0c:	91 1d       	adc	r25, r1
    4d0e:	a1 1d       	adc	r26, r1
    4d10:	6a 0f       	add	r22, r26
    4d12:	71 1d       	adc	r23, r1
    4d14:	81 1d       	adc	r24, r1
    4d16:	91 1d       	adc	r25, r1
    4d18:	a1 1d       	adc	r26, r1
    4d1a:	20 d0       	rcall	.+64     	; 0x4d5c <__ultoa_invert+0x84>
    4d1c:	09 f4       	brne	.+2      	; 0x4d20 <__ultoa_invert+0x48>
    4d1e:	68 94       	set
    4d20:	3f 91       	pop	r19
    4d22:	2a e0       	ldi	r18, 0x0A	; 10
    4d24:	26 9f       	mul	r18, r22
    4d26:	11 24       	eor	r1, r1
    4d28:	30 19       	sub	r19, r0
    4d2a:	30 5d       	subi	r19, 0xD0	; 208
    4d2c:	31 93       	st	Z+, r19
    4d2e:	de f6       	brtc	.-74     	; 0x4ce6 <__ultoa_invert+0xe>
    4d30:	cf 01       	movw	r24, r30
    4d32:	08 95       	ret
    4d34:	46 2f       	mov	r20, r22
    4d36:	47 70       	andi	r20, 0x07	; 7
    4d38:	40 5d       	subi	r20, 0xD0	; 208
    4d3a:	41 93       	st	Z+, r20
    4d3c:	b3 e0       	ldi	r27, 0x03	; 3
    4d3e:	0f d0       	rcall	.+30     	; 0x4d5e <__ultoa_invert+0x86>
    4d40:	c9 f7       	brne	.-14     	; 0x4d34 <__ultoa_invert+0x5c>
    4d42:	f6 cf       	rjmp	.-20     	; 0x4d30 <__ultoa_invert+0x58>
    4d44:	46 2f       	mov	r20, r22
    4d46:	4f 70       	andi	r20, 0x0F	; 15
    4d48:	40 5d       	subi	r20, 0xD0	; 208
    4d4a:	4a 33       	cpi	r20, 0x3A	; 58
    4d4c:	18 f0       	brcs	.+6      	; 0x4d54 <__ultoa_invert+0x7c>
    4d4e:	49 5d       	subi	r20, 0xD9	; 217
    4d50:	31 fd       	sbrc	r19, 1
    4d52:	40 52       	subi	r20, 0x20	; 32
    4d54:	41 93       	st	Z+, r20
    4d56:	02 d0       	rcall	.+4      	; 0x4d5c <__ultoa_invert+0x84>
    4d58:	a9 f7       	brne	.-22     	; 0x4d44 <__ultoa_invert+0x6c>
    4d5a:	ea cf       	rjmp	.-44     	; 0x4d30 <__ultoa_invert+0x58>
    4d5c:	b4 e0       	ldi	r27, 0x04	; 4
    4d5e:	a6 95       	lsr	r26
    4d60:	97 95       	ror	r25
    4d62:	87 95       	ror	r24
    4d64:	77 95       	ror	r23
    4d66:	67 95       	ror	r22
    4d68:	ba 95       	dec	r27
    4d6a:	c9 f7       	brne	.-14     	; 0x4d5e <__ultoa_invert+0x86>
    4d6c:	00 97       	sbiw	r24, 0x00	; 0
    4d6e:	61 05       	cpc	r22, r1
    4d70:	71 05       	cpc	r23, r1
    4d72:	08 95       	ret
    4d74:	9b 01       	movw	r18, r22
    4d76:	ac 01       	movw	r20, r24
    4d78:	0a 2e       	mov	r0, r26
    4d7a:	06 94       	lsr	r0
    4d7c:	57 95       	ror	r21
    4d7e:	47 95       	ror	r20
    4d80:	37 95       	ror	r19
    4d82:	27 95       	ror	r18
    4d84:	ba 95       	dec	r27
    4d86:	c9 f7       	brne	.-14     	; 0x4d7a <__ultoa_invert+0xa2>
    4d88:	62 0f       	add	r22, r18
    4d8a:	73 1f       	adc	r23, r19
    4d8c:	84 1f       	adc	r24, r20
    4d8e:	95 1f       	adc	r25, r21
    4d90:	a0 1d       	adc	r26, r0
    4d92:	08 95       	ret

00004d94 <strrev>:
    4d94:	dc 01       	movw	r26, r24
    4d96:	fc 01       	movw	r30, r24
    4d98:	67 2f       	mov	r22, r23
    4d9a:	71 91       	ld	r23, Z+
    4d9c:	77 23       	and	r23, r23
    4d9e:	e1 f7       	brne	.-8      	; 0x4d98 <strrev+0x4>
    4da0:	32 97       	sbiw	r30, 0x02	; 2
    4da2:	04 c0       	rjmp	.+8      	; 0x4dac <strrev+0x18>
    4da4:	7c 91       	ld	r23, X
    4da6:	6d 93       	st	X+, r22
    4da8:	70 83       	st	Z, r23
    4daa:	62 91       	ld	r22, -Z
    4dac:	ae 17       	cp	r26, r30
    4dae:	bf 07       	cpc	r27, r31
    4db0:	c8 f3       	brcs	.-14     	; 0x4da4 <strrev+0x10>
    4db2:	08 95       	ret

00004db4 <_exit>:
    4db4:	f8 94       	cli

00004db6 <__stop_program>:
    4db6:	ff cf       	rjmp	.-2      	; 0x4db6 <__stop_program>
