
picalc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00802000  00004234  000042c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c87  00802062  00802062  0000432a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000432a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000740  00000000  00000000  000043c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dfcc  00000000  00000000  00004b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e41  00000000  00000000  00012ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004b1d  00000000  00000000  00017915  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001784  00000000  00000000  0001c434  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005532  00000000  00000000  0001dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008ca4  00000000  00000000  000230ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f0  00000000  00000000  0002bd8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__ctors_end>
       4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
       8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
       c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      10:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      14:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      18:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      1c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      20:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      24:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      28:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      2c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      30:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      34:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      38:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__vector_14>
      3c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      40:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      44:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      48:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      4c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      50:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      54:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      58:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      5c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      60:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      64:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      68:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      6c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      70:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      74:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      78:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      7c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      80:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      84:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      88:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      8c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      90:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      94:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      98:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      9c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      a0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      a4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      a8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      ac:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      b0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      b4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      b8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      bc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      c0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      c4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      c8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      cc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      d0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      d4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      d8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      dc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      e0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      e4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      e8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      ec:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      f0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      f4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      f8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
      fc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     100:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     104:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     108:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     10c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     110:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     114:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     118:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     11c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     120:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     124:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     128:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     12c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     130:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     134:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     138:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     13c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     140:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     144:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     148:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     14c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     150:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     154:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     158:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     15c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     160:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     164:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     168:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     16c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     170:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     174:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     178:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     17c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     180:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     184:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     188:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     18c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     190:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     194:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     198:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     19c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1a0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1a4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1a8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1ac:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1b0:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__vector_108>
     1b4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1b8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1bc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1c0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1c4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1c8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1cc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1d0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1d4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1d8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1dc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1e0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1e4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1e8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1ec:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1f0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1f4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1f8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__bad_interrupt>
     1fc:	dd 11       	cpse	r29, r13
     1fe:	dd 11       	cpse	r29, r13
     200:	dd 11       	cpse	r29, r13
     202:	2a 12       	cpse	r2, r26
     204:	12 12       	cpse	r1, r18
     206:	27 12       	cpse	r2, r23
     208:	dd 11       	cpse	r29, r13
     20a:	dd 11       	cpse	r29, r13
     20c:	2a 12       	cpse	r2, r26
     20e:	12 12       	cpse	r1, r18

00000210 <__trampolines_start>:
     210:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <vButton>
     214:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <prvTimerTask+0x212>
     218:	0c 94 80 04 	jmp	0x900	; 0x900 <vEventGroupSetBitsCallback>
     21c:	0c 94 21 11 	jmp	0x2242	; 0x2242 <prvTimerTask>
     220:	0c 94 12 12 	jmp	0x2424	; 0x2424 <prvTimerTask+0x1e2>
     224:	0c 94 27 12 	jmp	0x244e	; 0x244e <prvTimerTask+0x20c>
     228:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <vDisplayUpdateTask>
     22c:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <prvTimerTask+0x178>
     230:	0c 94 ae 12 	jmp	0x255c	; 0x255c <vGUI>
     234:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <prvIdleTask>

00000238 <__trampolines_end>:
     238:	6e 61       	ori	r22, 0x1E	; 30
     23a:	6e 00       	.word	0x006e	; ????

0000023c <__c.2332>:
     23c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     24c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     25c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     26c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     27c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     28c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     29c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2ac:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2bc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2cc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2dc:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2ec:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2fc:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     30c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     31c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     32c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000033a <__ctors_end>:
     33a:	11 24       	eor	r1, r1
     33c:	1f be       	out	0x3f, r1	; 63
     33e:	cf ef       	ldi	r28, 0xFF	; 255
     340:	cd bf       	out	0x3d, r28	; 61
     342:	df e3       	ldi	r29, 0x3F	; 63
     344:	de bf       	out	0x3e, r29	; 62
     346:	00 e0       	ldi	r16, 0x00	; 0
     348:	0c bf       	out	0x3c, r16	; 60

0000034a <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     34a:	e9 ee       	ldi	r30, 0xE9	; 233
     34c:	fc e2       	ldi	r31, 0x2C	; 44
     34e:	8a ea       	ldi	r24, 0xAA	; 170
     350:	90 e4       	ldi	r25, 0x40	; 64
     352:	81 93       	st	Z+, r24
     354:	e0 30       	cpi	r30, 0x00	; 0
     356:	f9 07       	cpc	r31, r25
     358:	e0 f3       	brcs	.-8      	; 0x352 <init_mem+0x8>

0000035a <__do_copy_data>:
     35a:	10 e2       	ldi	r17, 0x20	; 32
     35c:	a0 e0       	ldi	r26, 0x00	; 0
     35e:	b0 e2       	ldi	r27, 0x20	; 32
     360:	e4 e3       	ldi	r30, 0x34	; 52
     362:	f2 e4       	ldi	r31, 0x42	; 66
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0b bf       	out	0x3b, r16	; 59
     368:	02 c0       	rjmp	.+4      	; 0x36e <__do_copy_data+0x14>
     36a:	07 90       	elpm	r0, Z+
     36c:	0d 92       	st	X+, r0
     36e:	a2 36       	cpi	r26, 0x62	; 98
     370:	b1 07       	cpc	r27, r17
     372:	d9 f7       	brne	.-10     	; 0x36a <__do_copy_data+0x10>

00000374 <__do_clear_bss>:
     374:	2c e2       	ldi	r18, 0x2C	; 44
     376:	a2 e6       	ldi	r26, 0x62	; 98
     378:	b0 e2       	ldi	r27, 0x20	; 32
     37a:	01 c0       	rjmp	.+2      	; 0x37e <.do_clear_bss_start>

0000037c <.do_clear_bss_loop>:
     37c:	1d 92       	st	X+, r1

0000037e <.do_clear_bss_start>:
     37e:	a9 3e       	cpi	r26, 0xE9	; 233
     380:	b2 07       	cpc	r27, r18
     382:	e1 f7       	brne	.-8      	; 0x37c <.do_clear_bss_loop>
     384:	0e 94 0d 13 	call	0x261a	; 0x261a <main>
     388:	0c 94 18 21 	jmp	0x4230	; 0x4230 <_exit>

0000038c <__bad_interrupt>:
     38c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000390 <initButtons>:
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
	PORTF.DIRCLR = PIN4_bm; //SW1
     390:	e0 ea       	ldi	r30, 0xA0	; 160
     392:	f6 e0       	ldi	r31, 0x06	; 6
     394:	80 e1       	ldi	r24, 0x10	; 16
     396:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     398:	80 e2       	ldi	r24, 0x20	; 32
     39a:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     39c:	80 e4       	ldi	r24, 0x40	; 64
     39e:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3a0:	80 e8       	ldi	r24, 0x80	; 128
     3a2:	82 83       	std	Z+2, r24	; 0x02
     3a4:	08 95       	ret

000003a6 <updateButtons>:
 void updateButtons(void) {
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3a6:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     3aa:	84 fd       	sbrc	r24, 4
     3ac:	0e c0       	rjmp	.+28     	; 0x3ca <updateButtons+0x24>
		if(b1Count < 60000) {
     3ae:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <b1Count.3829>
     3b2:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <b1Count.3829+0x1>
     3b6:	80 36       	cpi	r24, 0x60	; 96
     3b8:	2a ee       	ldi	r18, 0xEA	; 234
     3ba:	92 07       	cpc	r25, r18
     3bc:	e8 f4       	brcc	.+58     	; 0x3f8 <updateButtons+0x52>
			b1Count++;
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	80 93 68 20 	sts	0x2068, r24	; 0x802068 <b1Count.3829>
     3c4:	90 93 69 20 	sts	0x2069, r25	; 0x802069 <b1Count.3829+0x1>
     3c8:	17 c0       	rjmp	.+46     	; 0x3f8 <updateButtons+0x52>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3ca:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <b1Count.3829>
     3ce:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <b1Count.3829+0x1>
     3d2:	8b 30       	cpi	r24, 0x0B	; 11
     3d4:	91 05       	cpc	r25, r1
     3d6:	48 f0       	brcs	.+18     	; 0x3ea <updateButtons+0x44>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3d8:	c3 97       	sbiw	r24, 0x33	; 51
     3da:	18 f0       	brcs	.+6      	; 0x3e2 <updateButtons+0x3c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     3dc:	10 92 de 2c 	sts	0x2CDE, r1	; 0x802cde <b1Status>
     3e0:	07 c0       	rjmp	.+14     	; 0x3f0 <updateButtons+0x4a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 de 2c 	sts	0x2CDE, r24	; 0x802cde <b1Status>
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <updateButtons+0x4a>
			}
		} else {
			b1Status = NOT_PRESSED;
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	80 93 de 2c 	sts	0x2CDE, r24	; 0x802cde <b1Status>
		}
		b1Count = 0;
     3f0:	10 92 68 20 	sts	0x2068, r1	; 0x802068 <b1Count.3829>
     3f4:	10 92 69 20 	sts	0x2069, r1	; 0x802069 <b1Count.3829+0x1>
	}
	if(Button2_Value == 0) {
     3f8:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     3fc:	85 fd       	sbrc	r24, 5
     3fe:	0e c0       	rjmp	.+28     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		if(b2Count < 60000) {
     400:	80 91 66 20 	lds	r24, 0x2066	; 0x802066 <b2Count.3830>
     404:	90 91 67 20 	lds	r25, 0x2067	; 0x802067 <b2Count.3830+0x1>
     408:	80 36       	cpi	r24, 0x60	; 96
     40a:	2a ee       	ldi	r18, 0xEA	; 234
     40c:	92 07       	cpc	r25, r18
     40e:	e8 f4       	brcc	.+58     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			b2Count++;
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	80 93 66 20 	sts	0x2066, r24	; 0x802066 <b2Count.3830>
     416:	90 93 67 20 	sts	0x2067, r25	; 0x802067 <b2Count.3830+0x1>
     41a:	17 c0       	rjmp	.+46     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     41c:	80 91 66 20 	lds	r24, 0x2066	; 0x802066 <b2Count.3830>
     420:	90 91 67 20 	lds	r25, 0x2067	; 0x802067 <b2Count.3830+0x1>
     424:	8b 30       	cpi	r24, 0x0B	; 11
     426:	91 05       	cpc	r25, r1
     428:	48 f0       	brcs	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     42a:	c3 97       	sbiw	r24, 0x33	; 51
     42c:	18 f0       	brcs	.+6      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     42e:	10 92 df 2c 	sts	0x2CDF, r1	; 0x802cdf <b2Status>
     432:	07 c0       	rjmp	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <b2Status>
     43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
		} else {
			b2Status = NOT_PRESSED;			
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <b2Status>
		}
		b2Count = 0;
     442:	10 92 66 20 	sts	0x2066, r1	; 0x802066 <b2Count.3830>
     446:	10 92 67 20 	sts	0x2067, r1	; 0x802067 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     44a:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     44e:	86 fd       	sbrc	r24, 6
     450:	0e c0       	rjmp	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		if(b3Count < 60000) {
     452:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b3Count.3831>
     456:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b3Count.3831+0x1>
     45a:	80 36       	cpi	r24, 0x60	; 96
     45c:	2a ee       	ldi	r18, 0xEA	; 234
     45e:	92 07       	cpc	r25, r18
     460:	e8 f4       	brcc	.+58     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			b3Count++;
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	80 93 64 20 	sts	0x2064, r24	; 0x802064 <b3Count.3831>
     468:	90 93 65 20 	sts	0x2065, r25	; 0x802065 <b3Count.3831+0x1>
     46c:	17 c0       	rjmp	.+46     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     46e:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b3Count.3831>
     472:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b3Count.3831+0x1>
     476:	8b 30       	cpi	r24, 0x0B	; 11
     478:	91 05       	cpc	r25, r1
     47a:	48 f0       	brcs	.+18     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     47c:	c3 97       	sbiw	r24, 0x33	; 51
     47e:	18 f0       	brcs	.+6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     480:	10 92 e0 2c 	sts	0x2CE0, r1	; 0x802ce0 <b3Status>
     484:	07 c0       	rjmp	.+14     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	80 93 e0 2c 	sts	0x2CE0, r24	; 0x802ce0 <b3Status>
     48c:	03 c0       	rjmp	.+6      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			}
		} else {
			b3Status = NOT_PRESSED;
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	80 93 e0 2c 	sts	0x2CE0, r24	; 0x802ce0 <b3Status>
		}
		b3Count = 0;
     494:	10 92 64 20 	sts	0x2064, r1	; 0x802064 <b3Count.3831>
     498:	10 92 65 20 	sts	0x2065, r1	; 0x802065 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     49c:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     4a0:	88 23       	and	r24, r24
     4a2:	74 f0       	brlt	.+28     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
		if(b4Count < 60000) {
     4a4:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <__data_end>
     4a8:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <__data_end+0x1>
     4ac:	80 36       	cpi	r24, 0x60	; 96
     4ae:	2a ee       	ldi	r18, 0xEA	; 234
     4b0:	92 07       	cpc	r25, r18
     4b2:	e8 f4       	brcc	.+58     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
			b4Count++;
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <__data_end>
     4ba:	90 93 63 20 	sts	0x2063, r25	; 0x802063 <__data_end+0x1>
     4be:	08 95       	ret
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4c0:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <__data_end>
     4c4:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <__data_end+0x1>
     4c8:	8b 30       	cpi	r24, 0x0B	; 11
     4ca:	91 05       	cpc	r25, r1
     4cc:	48 f0       	brcs	.+18     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4ce:	c3 97       	sbiw	r24, 0x33	; 51
     4d0:	18 f0       	brcs	.+6      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     4d2:	10 92 e1 2c 	sts	0x2CE1, r1	; 0x802ce1 <b4Status>
     4d6:	07 c0       	rjmp	.+14     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 e1 2c 	sts	0x2CE1, r24	; 0x802ce1 <b4Status>
     4de:	03 c0       	rjmp	.+6      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
			}
		} else {
			b4Status = NOT_PRESSED;
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	80 93 e1 2c 	sts	0x2CE1, r24	; 0x802ce1 <b4Status>
		}
		b4Count = 0;
     4e6:	10 92 62 20 	sts	0x2062, r1	; 0x802062 <__data_end>
     4ea:	10 92 63 20 	sts	0x2063, r1	; 0x802063 <__data_end+0x1>
     4ee:	08 95       	ret

000004f0 <getButtonPress>:
	}
 }

 button_press_t getButtonPress(button_t button) {
	switch(button) {
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	49 f0       	breq	.+18     	; 0x506 <getButtonPress+0x16>
     4f4:	28 f0       	brcs	.+10     	; 0x500 <getButtonPress+0x10>
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	49 f0       	breq	.+18     	; 0x50c <getButtonPress+0x1c>
     4fa:	83 30       	cpi	r24, 0x03	; 3
     4fc:	51 f0       	breq	.+20     	; 0x512 <getButtonPress+0x22>
     4fe:	0c c0       	rjmp	.+24     	; 0x518 <getButtonPress+0x28>
		case BUTTON1:
			return b1Status;
     500:	80 91 de 2c 	lds	r24, 0x2CDE	; 0x802cde <b1Status>
     504:	08 95       	ret
		break;
		case BUTTON2:
			return b2Status;
     506:	80 91 df 2c 	lds	r24, 0x2CDF	; 0x802cdf <b2Status>
     50a:	08 95       	ret
		break;
		case BUTTON3:
			return b3Status;
     50c:	80 91 e0 2c 	lds	r24, 0x2CE0	; 0x802ce0 <b3Status>
     510:	08 95       	ret
		break;
		case BUTTON4:
			return b4Status;
     512:	80 91 e1 2c 	lds	r24, 0x2CE1	; 0x802ce1 <b4Status>
     516:	08 95       	ret
		break;
	}
	return NOT_PRESSED;
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	08 95       	ret

0000051c <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     51c:	0f 93       	push	r16
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	1f 92       	push	r1
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     528:	2f b7       	in	r18, 0x3f	; 63
     52a:	29 83       	std	Y+1, r18	; 0x01
     52c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     52e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     530:	fc 01       	movw	r30, r24
     532:	08 ed       	ldi	r16, 0xD8	; 216
     534:	04 bf       	out	0x34, r16	; 52
     536:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	8f bf       	out	0x3f, r24	; 63
#endif
}
     53c:	0f 90       	pop	r0
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     546:	61 11       	cpse	r22, r1
     548:	02 c0       	rjmp	.+4      	; 0x54e <CLKSYS_XOSC_Config+0x8>
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	01 c0       	rjmp	.+2      	; 0x550 <CLKSYS_XOSC_Config+0xa>
     54e:	90 e2       	ldi	r25, 0x20	; 32
     550:	84 2b       	or	r24, r20
     552:	89 2b       	or	r24, r25
     554:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     558:	08 95       	ret

0000055a <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     55a:	6f 71       	andi	r22, 0x1F	; 31
     55c:	86 2b       	or	r24, r22
     55e:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     562:	08 95       	ret

00000564 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     564:	e0 e5       	ldi	r30, 0x50	; 80
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	90 81       	ld	r25, Z
     56a:	28 2f       	mov	r18, r24
     56c:	20 95       	com	r18
     56e:	92 23       	and	r25, r18
     570:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     572:	90 81       	ld	r25, Z
	return clkEnabled;
}
     574:	89 23       	and	r24, r25
     576:	08 95       	ret

00000578 <CLKSYS_Prescalers_Config>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     578:	68 2b       	or	r22, r24
     57a:	81 e4       	ldi	r24, 0x41	; 65
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 8e 02 	call	0x51c	; 0x51c <CCPWrite>
     582:	08 95       	ret

00000584 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     58c:	00 e4       	ldi	r16, 0x40	; 64
     58e:	10 e0       	ldi	r17, 0x00	; 0
     590:	f8 01       	movw	r30, r16
     592:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
     594:	68 7f       	andi	r22, 0xF8	; 248
     596:	68 2b       	or	r22, r24
     598:	80 e4       	ldi	r24, 0x40	; 64
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 8e 02 	call	0x51c	; 0x51c <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     5a0:	f8 01       	movw	r30, r16
     5a2:	80 81       	ld	r24, Z
	return clkCtrl;
}
     5a4:	8c 23       	and	r24, r28
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     5ae:	fc 01       	movw	r30, r24
     5b0:	90 81       	ld	r25, Z
     5b2:	90 7f       	andi	r25, 0xF0	; 240
     5b4:	69 2b       	or	r22, r25
     5b6:	60 83       	st	Z, r22
     5b8:	08 95       	ret

000005ba <TC0_ConfigWGM>:
     5ba:	fc 01       	movw	r30, r24
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	98 7f       	andi	r25, 0xF8	; 248
     5c0:	69 2b       	or	r22, r25
     5c2:	61 83       	std	Z+1, r22	; 0x01
     5c4:	08 95       	ret

000005c6 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     5c6:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     5c8:	96 81       	ldd	r25, Z+6	; 0x06
     5ca:	9c 7f       	andi	r25, 0xFC	; 252
     5cc:	69 2b       	or	r22, r25
     5ce:	66 83       	std	Z+6, r22	; 0x06
     5d0:	08 95       	ret

000005d2 <software_reset>:
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     5d2:	00 00       	nop
     5d4:	88 ed       	ldi	r24, 0xD8	; 216
     5d6:	84 bf       	out	0x34, r24	; 52
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     5de:	08 95       	ret

000005e0 <vApplicationStackOverflowHook>:
     5e0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <software_reset>
     5e4:	08 95       	ret

000005e6 <xEventGroupCreate>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	80 e1       	ldi	r24, 0x10	; 16
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 90 04 	call	0x920	; 0x920 <pvPortMalloc>
     5f2:	ec 01       	movw	r28, r24
     5f4:	00 97       	sbiw	r24, 0x00	; 0
     5f6:	41 f0       	breq	.+16     	; 0x608 <xEventGroupCreate+0x22>
     5f8:	fc 01       	movw	r30, r24
     5fa:	11 92       	st	Z+, r1
     5fc:	11 92       	st	Z+, r1
     5fe:	11 92       	st	Z+, r1
     600:	11 92       	st	Z+, r1
     602:	cf 01       	movw	r24, r30
     604:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
     608:	ce 01       	movw	r24, r28
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <xEventGroupWaitBits>:
     610:	2f 92       	push	r2
     612:	3f 92       	push	r3
     614:	4f 92       	push	r4
     616:	5f 92       	push	r5
     618:	6f 92       	push	r6
     61a:	7f 92       	push	r7
     61c:	8f 92       	push	r8
     61e:	9f 92       	push	r9
     620:	af 92       	push	r10
     622:	bf 92       	push	r11
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	ec 01       	movw	r28, r24
     636:	4a 01       	movw	r8, r20
     638:	5b 01       	movw	r10, r22
     63a:	62 2e       	mov	r6, r18
     63c:	70 2e       	mov	r7, r16
     63e:	0e 94 04 0c 	call	0x1808	; 0x1808 <vTaskSuspendAll>
     642:	28 80       	ld	r2, Y
     644:	39 80       	ldd	r3, Y+1	; 0x01
     646:	4a 80       	ldd	r4, Y+2	; 0x02
     648:	5b 80       	ldd	r5, Y+3	; 0x03
     64a:	01 11       	cpse	r16, r1
     64c:	0d c0       	rjmp	.+26     	; 0x668 <xEventGroupWaitBits+0x58>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	b2 01       	movw	r22, r4
     652:	a1 01       	movw	r20, r2
     654:	48 21       	and	r20, r8
     656:	59 21       	and	r21, r9
     658:	6a 21       	and	r22, r10
     65a:	7b 21       	and	r23, r11
     65c:	45 2b       	or	r20, r21
     65e:	46 2b       	or	r20, r22
     660:	47 2b       	or	r20, r23
     662:	79 f4       	brne	.+30     	; 0x682 <xEventGroupWaitBits+0x72>
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0d c0       	rjmp	.+26     	; 0x682 <xEventGroupWaitBits+0x72>
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	b2 01       	movw	r22, r4
     66c:	a1 01       	movw	r20, r2
     66e:	48 21       	and	r20, r8
     670:	59 21       	and	r21, r9
     672:	6a 21       	and	r22, r10
     674:	7b 21       	and	r23, r11
     676:	48 15       	cp	r20, r8
     678:	59 05       	cpc	r21, r9
     67a:	6a 05       	cpc	r22, r10
     67c:	7b 05       	cpc	r23, r11
     67e:	09 f0       	breq	.+2      	; 0x682 <xEventGroupWaitBits+0x72>
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	88 23       	and	r24, r24
     684:	81 f0       	breq	.+32     	; 0x6a6 <xEventGroupWaitBits+0x96>
     686:	66 20       	and	r6, r6
     688:	09 f4       	brne	.+2      	; 0x68c <xEventGroupWaitBits+0x7c>
     68a:	70 c0       	rjmp	.+224    	; 0x76c <xEventGroupWaitBits+0x15c>
     68c:	80 94       	com	r8
     68e:	90 94       	com	r9
     690:	a0 94       	com	r10
     692:	b0 94       	com	r11
     694:	82 20       	and	r8, r2
     696:	93 20       	and	r9, r3
     698:	a4 20       	and	r10, r4
     69a:	b5 20       	and	r11, r5
     69c:	88 82       	st	Y, r8
     69e:	99 82       	std	Y+1, r9	; 0x01
     6a0:	aa 82       	std	Y+2, r10	; 0x02
     6a2:	bb 82       	std	Y+3, r11	; 0x03
     6a4:	63 c0       	rjmp	.+198    	; 0x76c <xEventGroupWaitBits+0x15c>
     6a6:	c1 14       	cp	r12, r1
     6a8:	d1 04       	cpc	r13, r1
     6aa:	e1 04       	cpc	r14, r1
     6ac:	f1 04       	cpc	r15, r1
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <xEventGroupWaitBits+0xa2>
     6b0:	5d c0       	rjmp	.+186    	; 0x76c <xEventGroupWaitBits+0x15c>
     6b2:	66 20       	and	r6, r6
     6b4:	29 f0       	breq	.+10     	; 0x6c0 <xEventGroupWaitBits+0xb0>
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	71 e0       	ldi	r23, 0x01	; 1
     6be:	03 c0       	rjmp	.+6      	; 0x6c6 <xEventGroupWaitBits+0xb6>
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	ba 01       	movw	r22, r20
     6c6:	71 10       	cpse	r7, r1
     6c8:	74 60       	ori	r23, 0x04	; 4
     6ca:	48 29       	or	r20, r8
     6cc:	59 29       	or	r21, r9
     6ce:	6a 29       	or	r22, r10
     6d0:	7b 29       	or	r23, r11
     6d2:	97 01       	movw	r18, r14
     6d4:	86 01       	movw	r16, r12
     6d6:	ce 01       	movw	r24, r28
     6d8:	04 96       	adiw	r24, 0x04	; 4
     6da:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <vTaskPlaceOnUnorderedEventList>
     6de:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
     6e2:	81 11       	cpse	r24, r1
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <xEventGroupWaitBits+0xda>
     6e6:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
     6ea:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <uxTaskResetEventItemValue>
     6ee:	91 fd       	sbrc	r25, 1
     6f0:	39 c0       	rjmp	.+114    	; 0x764 <xEventGroupWaitBits+0x154>
     6f2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     6f6:	ff 93       	push	r31
     6f8:	f8 7f       	andi	r31, 0xF8	; 248
     6fa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     6fe:	68 81       	ld	r22, Y
     700:	79 81       	ldd	r23, Y+1	; 0x01
     702:	8a 81       	ldd	r24, Y+2	; 0x02
     704:	9b 81       	ldd	r25, Y+3	; 0x03
     706:	71 10       	cpse	r7, r1
     708:	0d c0       	rjmp	.+26     	; 0x724 <xEventGroupWaitBits+0x114>
     70a:	21 e0       	ldi	r18, 0x01	; 1
     70c:	75 01       	movw	r14, r10
     70e:	64 01       	movw	r12, r8
     710:	c6 22       	and	r12, r22
     712:	d7 22       	and	r13, r23
     714:	e8 22       	and	r14, r24
     716:	f9 22       	and	r15, r25
     718:	cd 28       	or	r12, r13
     71a:	ce 28       	or	r12, r14
     71c:	cf 28       	or	r12, r15
     71e:	79 f4       	brne	.+30     	; 0x73e <xEventGroupWaitBits+0x12e>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	0d c0       	rjmp	.+26     	; 0x73e <xEventGroupWaitBits+0x12e>
     724:	21 e0       	ldi	r18, 0x01	; 1
     726:	75 01       	movw	r14, r10
     728:	64 01       	movw	r12, r8
     72a:	c6 22       	and	r12, r22
     72c:	d7 22       	and	r13, r23
     72e:	e8 22       	and	r14, r24
     730:	f9 22       	and	r15, r25
     732:	c8 14       	cp	r12, r8
     734:	d9 04       	cpc	r13, r9
     736:	ea 04       	cpc	r14, r10
     738:	fb 04       	cpc	r15, r11
     73a:	09 f0       	breq	.+2      	; 0x73e <xEventGroupWaitBits+0x12e>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	22 23       	and	r18, r18
     740:	71 f0       	breq	.+28     	; 0x75e <xEventGroupWaitBits+0x14e>
     742:	66 20       	and	r6, r6
     744:	61 f0       	breq	.+24     	; 0x75e <xEventGroupWaitBits+0x14e>
     746:	80 94       	com	r8
     748:	90 94       	com	r9
     74a:	a0 94       	com	r10
     74c:	b0 94       	com	r11
     74e:	86 22       	and	r8, r22
     750:	97 22       	and	r9, r23
     752:	a8 22       	and	r10, r24
     754:	b9 22       	and	r11, r25
     756:	88 82       	st	Y, r8
     758:	99 82       	std	Y+1, r9	; 0x01
     75a:	aa 82       	std	Y+2, r10	; 0x02
     75c:	bb 82       	std	Y+3, r11	; 0x03
     75e:	ff 91       	pop	r31
     760:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     764:	1b 01       	movw	r2, r22
     766:	2c 01       	movw	r4, r24
     768:	55 24       	eor	r5, r5
     76a:	02 c0       	rjmp	.+4      	; 0x770 <xEventGroupWaitBits+0x160>
     76c:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
     770:	c2 01       	movw	r24, r4
     772:	b1 01       	movw	r22, r2
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	df 90       	pop	r13
     782:	cf 90       	pop	r12
     784:	bf 90       	pop	r11
     786:	af 90       	pop	r10
     788:	9f 90       	pop	r9
     78a:	8f 90       	pop	r8
     78c:	7f 90       	pop	r7
     78e:	6f 90       	pop	r6
     790:	5f 90       	pop	r5
     792:	4f 90       	pop	r4
     794:	3f 90       	pop	r3
     796:	2f 90       	pop	r2
     798:	08 95       	ret

0000079a <xEventGroupClearBits>:
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7a2:	ff 93       	push	r31
     7a4:	f8 7f       	andi	r31, 0xF8	; 248
     7a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7aa:	fc 01       	movw	r30, r24
     7ac:	00 81       	ld	r16, Z
     7ae:	11 81       	ldd	r17, Z+1	; 0x01
     7b0:	22 81       	ldd	r18, Z+2	; 0x02
     7b2:	33 81       	ldd	r19, Z+3	; 0x03
     7b4:	40 95       	com	r20
     7b6:	50 95       	com	r21
     7b8:	60 95       	com	r22
     7ba:	70 95       	com	r23
     7bc:	40 23       	and	r20, r16
     7be:	51 23       	and	r21, r17
     7c0:	62 23       	and	r22, r18
     7c2:	73 23       	and	r23, r19
     7c4:	40 83       	st	Z, r20
     7c6:	51 83       	std	Z+1, r21	; 0x01
     7c8:	62 83       	std	Z+2, r22	; 0x02
     7ca:	73 83       	std	Z+3, r23	; 0x03
     7cc:	ff 91       	pop	r31
     7ce:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7d2:	c9 01       	movw	r24, r18
     7d4:	b8 01       	movw	r22, r16
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	08 95       	ret

000007dc <xEventGroupSetBits>:
     7dc:	4f 92       	push	r4
     7de:	5f 92       	push	r5
     7e0:	6f 92       	push	r6
     7e2:	7f 92       	push	r7
     7e4:	af 92       	push	r10
     7e6:	bf 92       	push	r11
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	ec 01       	movw	r28, r24
     7fa:	6a 01       	movw	r12, r20
     7fc:	7b 01       	movw	r14, r22
     7fe:	8c 01       	movw	r16, r24
     800:	09 5f       	subi	r16, 0xF9	; 249
     802:	1f 4f       	sbci	r17, 0xFF	; 255
     804:	0e 94 04 0c 	call	0x1808	; 0x1808 <vTaskSuspendAll>
     808:	eb 85       	ldd	r30, Y+11	; 0x0b
     80a:	fc 85       	ldd	r31, Y+12	; 0x0c
     80c:	88 81       	ld	r24, Y
     80e:	99 81       	ldd	r25, Y+1	; 0x01
     810:	aa 81       	ldd	r26, Y+2	; 0x02
     812:	bb 81       	ldd	r27, Y+3	; 0x03
     814:	c8 2a       	or	r12, r24
     816:	d9 2a       	or	r13, r25
     818:	ea 2a       	or	r14, r26
     81a:	fb 2a       	or	r15, r27
     81c:	c8 82       	st	Y, r12
     81e:	d9 82       	std	Y+1, r13	; 0x01
     820:	ea 82       	std	Y+2, r14	; 0x02
     822:	fb 82       	std	Y+3, r15	; 0x03
     824:	0e 17       	cp	r16, r30
     826:	1f 07       	cpc	r17, r31
     828:	09 f4       	brne	.+2      	; 0x82c <xEventGroupSetBits+0x50>
     82a:	42 c0       	rjmp	.+132    	; 0x8b0 <xEventGroupSetBits+0xd4>
     82c:	c1 2c       	mov	r12, r1
     82e:	d1 2c       	mov	r13, r1
     830:	76 01       	movw	r14, r12
     832:	a4 80       	ldd	r10, Z+4	; 0x04
     834:	b5 80       	ldd	r11, Z+5	; 0x05
     836:	80 81       	ld	r24, Z
     838:	91 81       	ldd	r25, Z+1	; 0x01
     83a:	a2 81       	ldd	r26, Z+2	; 0x02
     83c:	b3 81       	ldd	r27, Z+3	; 0x03
     83e:	ac 01       	movw	r20, r24
     840:	bd 01       	movw	r22, r26
     842:	77 27       	eor	r23, r23
     844:	b2 fd       	sbrc	r27, 2
     846:	0f c0       	rjmp	.+30     	; 0x866 <xEventGroupSetBits+0x8a>
     848:	48 80       	ld	r4, Y
     84a:	59 80       	ldd	r5, Y+1	; 0x01
     84c:	6a 80       	ldd	r6, Y+2	; 0x02
     84e:	7b 80       	ldd	r7, Y+3	; 0x03
     850:	44 22       	and	r4, r20
     852:	55 22       	and	r5, r21
     854:	66 22       	and	r6, r22
     856:	77 22       	and	r7, r23
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	45 28       	or	r4, r5
     85c:	46 28       	or	r4, r6
     85e:	47 28       	or	r4, r7
     860:	89 f4       	brne	.+34     	; 0x884 <xEventGroupSetBits+0xa8>
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	0f c0       	rjmp	.+30     	; 0x884 <xEventGroupSetBits+0xa8>
     866:	48 80       	ld	r4, Y
     868:	59 80       	ldd	r5, Y+1	; 0x01
     86a:	6a 80       	ldd	r6, Y+2	; 0x02
     86c:	7b 80       	ldd	r7, Y+3	; 0x03
     86e:	44 22       	and	r4, r20
     870:	55 22       	and	r5, r21
     872:	66 22       	and	r6, r22
     874:	77 22       	and	r7, r23
     876:	21 e0       	ldi	r18, 0x01	; 1
     878:	44 16       	cp	r4, r20
     87a:	55 06       	cpc	r5, r21
     87c:	66 06       	cpc	r6, r22
     87e:	77 06       	cpc	r7, r23
     880:	09 f0       	breq	.+2      	; 0x884 <xEventGroupSetBits+0xa8>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	22 23       	and	r18, r18
     886:	71 f0       	breq	.+28     	; 0x8a4 <xEventGroupSetBits+0xc8>
     888:	b0 ff       	sbrs	r27, 0
     88a:	04 c0       	rjmp	.+8      	; 0x894 <xEventGroupSetBits+0xb8>
     88c:	c4 2a       	or	r12, r20
     88e:	d5 2a       	or	r13, r21
     890:	e6 2a       	or	r14, r22
     892:	f7 2a       	or	r15, r23
     894:	48 81       	ld	r20, Y
     896:	59 81       	ldd	r21, Y+1	; 0x01
     898:	6a 81       	ldd	r22, Y+2	; 0x02
     89a:	7b 81       	ldd	r23, Y+3	; 0x03
     89c:	72 60       	ori	r23, 0x02	; 2
     89e:	cf 01       	movw	r24, r30
     8a0:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <vTaskRemoveFromUnorderedEventList>
     8a4:	ea 2d       	mov	r30, r10
     8a6:	fb 2d       	mov	r31, r11
     8a8:	0e 17       	cp	r16, r30
     8aa:	1f 07       	cpc	r17, r31
     8ac:	11 f6       	brne	.-124    	; 0x832 <xEventGroupSetBits+0x56>
     8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <xEventGroupSetBits+0xda>
     8b0:	c1 2c       	mov	r12, r1
     8b2:	d1 2c       	mov	r13, r1
     8b4:	76 01       	movw	r14, r12
     8b6:	c0 94       	com	r12
     8b8:	d0 94       	com	r13
     8ba:	e0 94       	com	r14
     8bc:	f0 94       	com	r15
     8be:	88 81       	ld	r24, Y
     8c0:	99 81       	ldd	r25, Y+1	; 0x01
     8c2:	aa 81       	ldd	r26, Y+2	; 0x02
     8c4:	bb 81       	ldd	r27, Y+3	; 0x03
     8c6:	c8 22       	and	r12, r24
     8c8:	d9 22       	and	r13, r25
     8ca:	ea 22       	and	r14, r26
     8cc:	fb 22       	and	r15, r27
     8ce:	c8 82       	st	Y, r12
     8d0:	d9 82       	std	Y+1, r13	; 0x01
     8d2:	ea 82       	std	Y+2, r14	; 0x02
     8d4:	fb 82       	std	Y+3, r15	; 0x03
     8d6:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
     8da:	68 81       	ld	r22, Y
     8dc:	79 81       	ldd	r23, Y+1	; 0x01
     8de:	8a 81       	ldd	r24, Y+2	; 0x02
     8e0:	9b 81       	ldd	r25, Y+3	; 0x03
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	7f 90       	pop	r7
     8f8:	6f 90       	pop	r6
     8fa:	5f 90       	pop	r5
     8fc:	4f 90       	pop	r4
     8fe:	08 95       	ret

00000900 <vEventGroupSetBitsCallback>:
     900:	0e 94 ee 03 	call	0x7dc	; 0x7dc <xEventGroupSetBits>
     904:	08 95       	ret

00000906 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     90a:	89 01       	movw	r16, r18
     90c:	9a 01       	movw	r18, r20
     90e:	ab 01       	movw	r20, r22
     910:	bc 01       	movw	r22, r24
     912:	80 e8       	ldi	r24, 0x80	; 128
     914:	94 e0       	ldi	r25, 0x04	; 4
     916:	0e 94 50 12 	call	0x24a0	; 0x24a0 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	08 95       	ret

00000920 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     926:	0e 94 04 0c 	call	0x1808	; 0x1808 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     92a:	20 91 6a 20 	lds	r18, 0x206A	; 0x80206a <xNextFreeByte>
     92e:	30 91 6b 20 	lds	r19, 0x206B	; 0x80206b <xNextFreeByte+0x1>
     932:	c9 01       	movw	r24, r18
     934:	8c 0f       	add	r24, r28
     936:	9d 1f       	adc	r25, r29
     938:	88 3b       	cpi	r24, 0xB8	; 184
     93a:	4b e0       	ldi	r20, 0x0B	; 11
     93c:	94 07       	cpc	r25, r20
     93e:	58 f4       	brcc	.+22     	; 0x956 <pvPortMalloc+0x36>
     940:	28 17       	cp	r18, r24
     942:	39 07       	cpc	r19, r25
     944:	58 f4       	brcc	.+22     	; 0x95c <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     946:	e9 01       	movw	r28, r18
     948:	c4 59       	subi	r28, 0x94	; 148
     94a:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     94c:	80 93 6a 20 	sts	0x206A, r24	; 0x80206a <xNextFreeByte>
     950:	90 93 6b 20 	sts	0x206B, r25	; 0x80206b <xNextFreeByte+0x1>
     954:	05 c0       	rjmp	.+10     	; 0x960 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     956:	c0 e0       	ldi	r28, 0x00	; 0
     958:	d0 e0       	ldi	r29, 0x00	; 0
     95a:	02 c0       	rjmp	.+4      	; 0x960 <pvPortMalloc+0x40>
     95c:	c0 e0       	ldi	r28, 0x00	; 0
     95e:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     960:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     964:	ce 01       	movw	r24, r28
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     96c:	08 95       	ret

0000096e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     96e:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     970:	03 96       	adiw	r24, 0x03	; 3
     972:	81 83       	std	Z+1, r24	; 0x01
     974:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     976:	4f ef       	ldi	r20, 0xFF	; 255
     978:	5f ef       	ldi	r21, 0xFF	; 255
     97a:	ba 01       	movw	r22, r20
     97c:	43 83       	std	Z+3, r20	; 0x03
     97e:	54 83       	std	Z+4, r21	; 0x04
     980:	65 83       	std	Z+5, r22	; 0x05
     982:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     984:	87 83       	std	Z+7, r24	; 0x07
     986:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     988:	81 87       	std	Z+9, r24	; 0x09
     98a:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     98c:	10 82       	st	Z, r1
     98e:	08 95       	ret

00000990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     990:	fc 01       	movw	r30, r24
     992:	12 86       	std	Z+10, r1	; 0x0a
     994:	13 86       	std	Z+11, r1	; 0x0b
     996:	08 95       	ret

00000998 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	9c 01       	movw	r18, r24
     99e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     9a0:	dc 01       	movw	r26, r24
     9a2:	11 96       	adiw	r26, 0x01	; 1
     9a4:	cd 91       	ld	r28, X+
     9a6:	dc 91       	ld	r29, X
     9a8:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     9aa:	c4 83       	std	Z+4, r28	; 0x04
     9ac:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     9ae:	8e 81       	ldd	r24, Y+6	; 0x06
     9b0:	9f 81       	ldd	r25, Y+7	; 0x07
     9b2:	86 83       	std	Z+6, r24	; 0x06
     9b4:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     9b6:	8e 81       	ldd	r24, Y+6	; 0x06
     9b8:	9f 81       	ldd	r25, Y+7	; 0x07
     9ba:	dc 01       	movw	r26, r24
     9bc:	14 96       	adiw	r26, 0x04	; 4
     9be:	6d 93       	st	X+, r22
     9c0:	7c 93       	st	X, r23
     9c2:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     9c4:	6e 83       	std	Y+6, r22	; 0x06
     9c6:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     9c8:	22 87       	std	Z+10, r18	; 0x0a
     9ca:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     9cc:	f9 01       	movw	r30, r18
     9ce:	80 81       	ld	r24, Z
     9d0:	8f 5f       	subi	r24, 0xFF	; 255
     9d2:	80 83       	st	Z, r24
}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9e4:	08 81       	ld	r16, Y
     9e6:	19 81       	ldd	r17, Y+1	; 0x01
     9e8:	2a 81       	ldd	r18, Y+2	; 0x02
     9ea:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     9ec:	0f 3f       	cpi	r16, 0xFF	; 255
     9ee:	4f ef       	ldi	r20, 0xFF	; 255
     9f0:	14 07       	cpc	r17, r20
     9f2:	24 07       	cpc	r18, r20
     9f4:	34 07       	cpc	r19, r20
     9f6:	21 f4       	brne	.+8      	; 0xa00 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     9f8:	fc 01       	movw	r30, r24
     9fa:	a1 85       	ldd	r26, Z+9	; 0x09
     9fc:	b2 85       	ldd	r27, Z+10	; 0x0a
     9fe:	11 c0       	rjmp	.+34     	; 0xa22 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a00:	dc 01       	movw	r26, r24
     a02:	13 96       	adiw	r26, 0x03	; 3
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <vListInsert+0x2e>
     a06:	df 01       	movw	r26, r30
     a08:	14 96       	adiw	r26, 0x04	; 4
     a0a:	ed 91       	ld	r30, X+
     a0c:	fc 91       	ld	r31, X
     a0e:	15 97       	sbiw	r26, 0x05	; 5
     a10:	40 81       	ld	r20, Z
     a12:	51 81       	ldd	r21, Z+1	; 0x01
     a14:	62 81       	ldd	r22, Z+2	; 0x02
     a16:	73 81       	ldd	r23, Z+3	; 0x03
     a18:	04 17       	cp	r16, r20
     a1a:	15 07       	cpc	r17, r21
     a1c:	26 07       	cpc	r18, r22
     a1e:	37 07       	cpc	r19, r23
     a20:	90 f7       	brcc	.-28     	; 0xa06 <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     a22:	14 96       	adiw	r26, 0x04	; 4
     a24:	ed 91       	ld	r30, X+
     a26:	fc 91       	ld	r31, X
     a28:	15 97       	sbiw	r26, 0x05	; 5
     a2a:	ec 83       	std	Y+4, r30	; 0x04
     a2c:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a2e:	c6 83       	std	Z+6, r28	; 0x06
     a30:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     a32:	ae 83       	std	Y+6, r26	; 0x06
     a34:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     a36:	14 96       	adiw	r26, 0x04	; 4
     a38:	cd 93       	st	X+, r28
     a3a:	dc 93       	st	X, r29
     a3c:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     a3e:	8a 87       	std	Y+10, r24	; 0x0a
     a40:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     a42:	fc 01       	movw	r30, r24
     a44:	20 81       	ld	r18, Z
     a46:	2f 5f       	subi	r18, 0xFF	; 255
     a48:	20 83       	st	Z, r18
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     a5a:	a2 85       	ldd	r26, Z+10	; 0x0a
     a5c:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a5e:	c4 81       	ldd	r28, Z+4	; 0x04
     a60:	d5 81       	ldd	r29, Z+5	; 0x05
     a62:	86 81       	ldd	r24, Z+6	; 0x06
     a64:	97 81       	ldd	r25, Z+7	; 0x07
     a66:	8e 83       	std	Y+6, r24	; 0x06
     a68:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a6a:	c6 81       	ldd	r28, Z+6	; 0x06
     a6c:	d7 81       	ldd	r29, Z+7	; 0x07
     a6e:	84 81       	ldd	r24, Z+4	; 0x04
     a70:	95 81       	ldd	r25, Z+5	; 0x05
     a72:	8c 83       	std	Y+4, r24	; 0x04
     a74:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     a76:	11 96       	adiw	r26, 0x01	; 1
     a78:	8d 91       	ld	r24, X+
     a7a:	9c 91       	ld	r25, X
     a7c:	12 97       	sbiw	r26, 0x02	; 2
     a7e:	e8 17       	cp	r30, r24
     a80:	f9 07       	cpc	r31, r25
     a82:	31 f4       	brne	.+12     	; 0xa90 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     a84:	86 81       	ldd	r24, Z+6	; 0x06
     a86:	97 81       	ldd	r25, Z+7	; 0x07
     a88:	11 96       	adiw	r26, 0x01	; 1
     a8a:	8d 93       	st	X+, r24
     a8c:	9c 93       	st	X, r25
     a8e:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     a90:	12 86       	std	Z+10, r1	; 0x0a
     a92:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     a94:	8c 91       	ld	r24, X
     a96:	81 50       	subi	r24, 0x01	; 1
     a98:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     a9a:	8c 91       	ld	r24, X
}
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <_portSetInterruptMaskFromIsr>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     aa2:	e0 ea       	ldi	r30, 0xA0	; 160
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	82 81       	ldd	r24, Z+2	; 0x02
     aa8:	92 81       	ldd	r25, Z+2	; 0x02
     aaa:	98 7f       	andi	r25, 0xF8	; 248
     aac:	92 83       	std	Z+2, r25	; 0x02
     aae:	08 95       	ret

00000ab0 <pxPortInitialiseStack>:
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	31 e1       	ldi	r19, 0x11	; 17
     aba:	fc 01       	movw	r30, r24
     abc:	30 83       	st	Z, r19
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	22 e2       	ldi	r18, 0x22	; 34
     ac2:	20 83       	st	Z, r18
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	a3 e3       	ldi	r26, 0x33	; 51
     ac8:	a0 83       	st	Z, r26
     aca:	6b 01       	movw	r12, r22
     acc:	e1 2c       	mov	r14, r1
     ace:	f1 2c       	mov	r15, r1
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	60 83       	st	Z, r22
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	d0 82       	st	Z, r13
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	e0 82       	st	Z, r14
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	61 e3       	ldi	r22, 0x31	; 49
     ae0:	60 83       	st	Z, r22
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	60 e8       	ldi	r22, 0x80	; 128
     ae6:	60 83       	st	Z, r22
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	67 e8       	ldi	r22, 0x87	; 135
     aec:	60 83       	st	Z, r22
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	10 82       	st	Z, r1
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	10 82       	st	Z, r1
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	62 e0       	ldi	r22, 0x02	; 2
     afa:	60 83       	st	Z, r22
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	63 e0       	ldi	r22, 0x03	; 3
     b00:	60 83       	st	Z, r22
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	64 e0       	ldi	r22, 0x04	; 4
     b06:	60 83       	st	Z, r22
     b08:	31 97       	sbiw	r30, 0x01	; 1
     b0a:	65 e0       	ldi	r22, 0x05	; 5
     b0c:	60 83       	st	Z, r22
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	66 e0       	ldi	r22, 0x06	; 6
     b12:	60 83       	st	Z, r22
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	67 e0       	ldi	r22, 0x07	; 7
     b18:	60 83       	st	Z, r22
     b1a:	31 97       	sbiw	r30, 0x01	; 1
     b1c:	68 e0       	ldi	r22, 0x08	; 8
     b1e:	60 83       	st	Z, r22
     b20:	31 97       	sbiw	r30, 0x01	; 1
     b22:	69 e0       	ldi	r22, 0x09	; 9
     b24:	60 83       	st	Z, r22
     b26:	31 97       	sbiw	r30, 0x01	; 1
     b28:	60 e1       	ldi	r22, 0x10	; 16
     b2a:	60 83       	st	Z, r22
     b2c:	31 97       	sbiw	r30, 0x01	; 1
     b2e:	30 83       	st	Z, r19
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	32 e1       	ldi	r19, 0x12	; 18
     b34:	30 83       	st	Z, r19
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	33 e1       	ldi	r19, 0x13	; 19
     b3a:	30 83       	st	Z, r19
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	34 e1       	ldi	r19, 0x14	; 20
     b40:	30 83       	st	Z, r19
     b42:	31 97       	sbiw	r30, 0x01	; 1
     b44:	35 e1       	ldi	r19, 0x15	; 21
     b46:	30 83       	st	Z, r19
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	36 e1       	ldi	r19, 0x16	; 22
     b4c:	30 83       	st	Z, r19
     b4e:	31 97       	sbiw	r30, 0x01	; 1
     b50:	37 e1       	ldi	r19, 0x17	; 23
     b52:	30 83       	st	Z, r19
     b54:	31 97       	sbiw	r30, 0x01	; 1
     b56:	38 e1       	ldi	r19, 0x18	; 24
     b58:	30 83       	st	Z, r19
     b5a:	31 97       	sbiw	r30, 0x01	; 1
     b5c:	39 e1       	ldi	r19, 0x19	; 25
     b5e:	30 83       	st	Z, r19
     b60:	31 97       	sbiw	r30, 0x01	; 1
     b62:	30 e2       	ldi	r19, 0x20	; 32
     b64:	30 83       	st	Z, r19
     b66:	31 97       	sbiw	r30, 0x01	; 1
     b68:	31 e2       	ldi	r19, 0x21	; 33
     b6a:	30 83       	st	Z, r19
     b6c:	31 97       	sbiw	r30, 0x01	; 1
     b6e:	20 83       	st	Z, r18
     b70:	31 97       	sbiw	r30, 0x01	; 1
     b72:	23 e2       	ldi	r18, 0x23	; 35
     b74:	20 83       	st	Z, r18
     b76:	6a 01       	movw	r12, r20
     b78:	31 97       	sbiw	r30, 0x01	; 1
     b7a:	40 83       	st	Z, r20
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	d0 82       	st	Z, r13
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	26 e2       	ldi	r18, 0x26	; 38
     b84:	20 83       	st	Z, r18
     b86:	31 97       	sbiw	r30, 0x01	; 1
     b88:	27 e2       	ldi	r18, 0x27	; 39
     b8a:	20 83       	st	Z, r18
     b8c:	31 97       	sbiw	r30, 0x01	; 1
     b8e:	28 e2       	ldi	r18, 0x28	; 40
     b90:	20 83       	st	Z, r18
     b92:	31 97       	sbiw	r30, 0x01	; 1
     b94:	29 e2       	ldi	r18, 0x29	; 41
     b96:	20 83       	st	Z, r18
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	20 e3       	ldi	r18, 0x30	; 48
     b9c:	20 83       	st	Z, r18
     b9e:	88 97       	sbiw	r24, 0x28	; 40
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	08 95       	ret

00000baa <xPortStartScheduler>:
     baa:	83 ef       	ldi	r24, 0xF3	; 243
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     bb2:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     bb6:	65 e0       	ldi	r22, 0x05	; 5
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	98 e0       	ldi	r25, 0x08	; 8
     bbc:	0e 94 d7 02 	call	0x5ae	; 0x5ae <TC0_ConfigClockSource>
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	98 e0       	ldi	r25, 0x08	; 8
     bc6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <TC0_SetOverflowIntLevel>
     bca:	a0 91 92 2c 	lds	r26, 0x2C92	; 0x802c92 <pxCurrentTCB>
     bce:	b0 91 93 2c 	lds	r27, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
     bd2:	0d 90       	ld	r0, X+
     bd4:	0d be       	out	0x3d, r0	; 61
     bd6:	0d 90       	ld	r0, X+
     bd8:	0e be       	out	0x3e, r0	; 62
     bda:	ef 91       	pop	r30
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	bf 91       	pop	r27
     be2:	af 91       	pop	r26
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	7f 91       	pop	r23
     bea:	6f 91       	pop	r22
     bec:	5f 91       	pop	r21
     bee:	4f 91       	pop	r20
     bf0:	3f 91       	pop	r19
     bf2:	2f 91       	pop	r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	bf 90       	pop	r11
     c02:	af 90       	pop	r10
     c04:	9f 90       	pop	r9
     c06:	8f 90       	pop	r8
     c08:	7f 90       	pop	r7
     c0a:	6f 90       	pop	r6
     c0c:	5f 90       	pop	r5
     c0e:	4f 90       	pop	r4
     c10:	3f 90       	pop	r3
     c12:	2f 90       	pop	r2
     c14:	1f 90       	pop	r1
     c16:	0f 90       	pop	r0
     c18:	ff 91       	pop	r31
     c1a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c1e:	ff 91       	pop	r31
     c20:	ff bf       	out	0x3f, r31	; 63
     c22:	ff 91       	pop	r31
     c24:	08 95       	ret
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	08 95       	ret

00000c2a <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     c2a:	ff 93       	push	r31
     c2c:	ff b7       	in	r31, 0x3f	; 63
     c2e:	ff 93       	push	r31
     c30:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c34:	ff 93       	push	r31
     c36:	f8 7f       	andi	r31, 0xF8	; 248
     c38:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c3c:	0f 92       	push	r0
     c3e:	1f 92       	push	r1
     c40:	11 24       	eor	r1, r1
     c42:	2f 92       	push	r2
     c44:	3f 92       	push	r3
     c46:	4f 92       	push	r4
     c48:	5f 92       	push	r5
     c4a:	6f 92       	push	r6
     c4c:	7f 92       	push	r7
     c4e:	8f 92       	push	r8
     c50:	9f 92       	push	r9
     c52:	af 92       	push	r10
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	2f 93       	push	r18
     c64:	3f 93       	push	r19
     c66:	4f 93       	push	r20
     c68:	5f 93       	push	r21
     c6a:	6f 93       	push	r22
     c6c:	7f 93       	push	r23
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	af 93       	push	r26
     c74:	bf 93       	push	r27
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	ef 93       	push	r30
     c7c:	a0 91 92 2c 	lds	r26, 0x2C92	; 0x802c92 <pxCurrentTCB>
     c80:	b0 91 93 2c 	lds	r27, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
     c84:	0d b6       	in	r0, 0x3d	; 61
     c86:	0d 92       	st	X+, r0
     c88:	0e b6       	in	r0, 0x3e	; 62
     c8a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     c8c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     c90:	a0 91 92 2c 	lds	r26, 0x2C92	; 0x802c92 <pxCurrentTCB>
     c94:	b0 91 93 2c 	lds	r27, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
     c98:	0d 90       	ld	r0, X+
     c9a:	0d be       	out	0x3d, r0	; 61
     c9c:	0d 90       	ld	r0, X+
     c9e:	0e be       	out	0x3e, r0	; 62
     ca0:	ef 91       	pop	r30
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	bf 91       	pop	r27
     ca8:	af 91       	pop	r26
     caa:	9f 91       	pop	r25
     cac:	8f 91       	pop	r24
     cae:	7f 91       	pop	r23
     cb0:	6f 91       	pop	r22
     cb2:	5f 91       	pop	r21
     cb4:	4f 91       	pop	r20
     cb6:	3f 91       	pop	r19
     cb8:	2f 91       	pop	r18
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	bf 90       	pop	r11
     cc8:	af 90       	pop	r10
     cca:	9f 90       	pop	r9
     ccc:	8f 90       	pop	r8
     cce:	7f 90       	pop	r7
     cd0:	6f 90       	pop	r6
     cd2:	5f 90       	pop	r5
     cd4:	4f 90       	pop	r4
     cd6:	3f 90       	pop	r3
     cd8:	2f 90       	pop	r2
     cda:	1f 90       	pop	r1
     cdc:	0f 90       	pop	r0
     cde:	ff 91       	pop	r31
     ce0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ce4:	ff 91       	pop	r31
     ce6:	ff bf       	out	0x3f, r31	; 63
     ce8:	ff 91       	pop	r31
	asm volatile ( "ret" );
     cea:	08 95       	ret

00000cec <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     cec:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     cee:	90 91 e2 2c 	lds	r25, 0x2CE2	; 0x802ce2 <intTaskSwitchPending>
     cf2:	89 2b       	or	r24, r25
     cf4:	80 93 e2 2c 	sts	0x2CE2, r24	; 0x802ce2 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     cf8:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     cfc:	91 30       	cpi	r25, 0x01	; 1
     cfe:	41 f0       	breq	.+16     	; 0xd10 <portTaskSwitchContext+0x24>
     d00:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     d04:	92 30       	cpi	r25, 0x02	; 2
     d06:	21 f0       	breq	.+8      	; 0xd10 <portTaskSwitchContext+0x24>
     d08:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     d0c:	94 30       	cpi	r25, 0x04	; 4
     d0e:	59 f4       	brne	.+22     	; 0xd26 <portTaskSwitchContext+0x3a>
     d10:	88 23       	and	r24, r24
     d12:	49 f0       	breq	.+18     	; 0xd26 <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     d14:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_portSetInterruptMaskFromIsr>
     d18:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     d1a:	10 92 e2 2c 	sts	0x2CE2, r1	; 0x802ce2 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     d1e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     d22:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		}                                          					
	}
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     d2a:	ff 93       	push	r31
     d2c:	ff b7       	in	r31, 0x3f	; 63
     d2e:	ff 93       	push	r31
     d30:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d34:	ff 93       	push	r31
     d36:	f8 7f       	andi	r31, 0xF8	; 248
     d38:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d3c:	0f 92       	push	r0
     d3e:	1f 92       	push	r1
     d40:	11 24       	eor	r1, r1
     d42:	2f 92       	push	r2
     d44:	3f 92       	push	r3
     d46:	4f 92       	push	r4
     d48:	5f 92       	push	r5
     d4a:	6f 92       	push	r6
     d4c:	7f 92       	push	r7
     d4e:	8f 92       	push	r8
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	2f 93       	push	r18
     d64:	3f 93       	push	r19
     d66:	4f 93       	push	r20
     d68:	5f 93       	push	r21
     d6a:	6f 93       	push	r22
     d6c:	7f 93       	push	r23
     d6e:	8f 93       	push	r24
     d70:	9f 93       	push	r25
     d72:	af 93       	push	r26
     d74:	bf 93       	push	r27
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	ef 93       	push	r30
     d7c:	a0 91 92 2c 	lds	r26, 0x2C92	; 0x802c92 <pxCurrentTCB>
     d80:	b0 91 93 2c 	lds	r27, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
     d84:	0d b6       	in	r0, 0x3d	; 61
     d86:	0d 92       	st	X+, r0
     d88:	0e b6       	in	r0, 0x3e	; 62
     d8a:	0d 92       	st	X+, r0
	//
	static void portTaskIncrementTick( void )
	{
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
     d8c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_portSetInterruptMaskFromIsr>
     d90:	c8 2f       	mov	r28, r24
		xTaskIncrementTick();
     d92:	0e 94 1c 0c 	call	0x1838	; 0x1838 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
     d96:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
		portTaskIncrementTick();
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	0e 94 76 06 	call	0xcec	; 0xcec <portTaskSwitchContext>
     da0:	a0 91 92 2c 	lds	r26, 0x2C92	; 0x802c92 <pxCurrentTCB>
     da4:	b0 91 93 2c 	lds	r27, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
     da8:	0d 90       	ld	r0, X+
     daa:	0d be       	out	0x3d, r0	; 61
     dac:	0d 90       	ld	r0, X+
     dae:	0e be       	out	0x3e, r0	; 62
     db0:	ef 91       	pop	r30
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	cf 90       	pop	r12
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	9f 90       	pop	r9
     ddc:	8f 90       	pop	r8
     dde:	7f 90       	pop	r7
     de0:	6f 90       	pop	r6
     de2:	5f 90       	pop	r5
     de4:	4f 90       	pop	r4
     de6:	3f 90       	pop	r3
     de8:	2f 90       	pop	r2
     dea:	1f 90       	pop	r1
     dec:	0f 90       	pop	r0
     dee:	ff 91       	pop	r31
     df0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     df4:	ff 91       	pop	r31
     df6:	ff bf       	out	0x3f, r31	; 63
     df8:	ff 91       	pop	r31
     dfa:	18 95       	reti

00000dfc <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     dfc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e00:	ff 93       	push	r31
     e02:	f8 7f       	andi	r31, 0xF8	; 248
     e04:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e08:	fc 01       	movw	r30, r24
     e0a:	96 8d       	ldd	r25, Z+30	; 0x1e
     e0c:	ff 91       	pop	r31
     e0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	91 11       	cpse	r25, r1
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	08 95       	ret

00000e1a <prvIsQueueFull>:
     e1a:	dc 01       	movw	r26, r24
     e1c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e20:	ff 93       	push	r31
     e22:	f8 7f       	andi	r31, 0xF8	; 248
     e24:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e28:	5e 96       	adiw	r26, 0x1e	; 30
     e2a:	9c 91       	ld	r25, X
     e2c:	5e 97       	sbiw	r26, 0x1e	; 30
     e2e:	ff 91       	pop	r31
     e30:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	5f 96       	adiw	r26, 0x1f	; 31
     e38:	2c 91       	ld	r18, X
     e3a:	29 13       	cpse	r18, r25
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	08 95       	ret

00000e40 <prvCopyDataToQueue>:
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ec 01       	movw	r28, r24
     e4a:	04 2f       	mov	r16, r20
     e4c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     e4e:	48 a1       	ldd	r20, Y+32	; 0x20
     e50:	44 23       	and	r20, r20
     e52:	b9 f1       	breq	.+110    	; 0xec2 <prvCopyDataToQueue+0x82>
     e54:	01 11       	cpse	r16, r1
     e56:	16 c0       	rjmp	.+44     	; 0xe84 <prvCopyDataToQueue+0x44>
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	9d 81       	ldd	r25, Y+5	; 0x05
     e5e:	0e 94 2e 20 	call	0x405c	; 0x405c <memcpy>
     e62:	28 a1       	ldd	r18, Y+32	; 0x20
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	9d 81       	ldd	r25, Y+5	; 0x05
     e68:	82 0f       	add	r24, r18
     e6a:	91 1d       	adc	r25, r1
     e6c:	8c 83       	std	Y+4, r24	; 0x04
     e6e:	9d 83       	std	Y+5, r25	; 0x05
     e70:	2a 81       	ldd	r18, Y+2	; 0x02
     e72:	3b 81       	ldd	r19, Y+3	; 0x03
     e74:	82 17       	cp	r24, r18
     e76:	93 07       	cpc	r25, r19
     e78:	20 f1       	brcs	.+72     	; 0xec2 <prvCopyDataToQueue+0x82>
     e7a:	88 81       	ld	r24, Y
     e7c:	99 81       	ldd	r25, Y+1	; 0x01
     e7e:	8c 83       	std	Y+4, r24	; 0x04
     e80:	9d 83       	std	Y+5, r25	; 0x05
     e82:	1f c0       	rjmp	.+62     	; 0xec2 <prvCopyDataToQueue+0x82>
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	8e 81       	ldd	r24, Y+6	; 0x06
     e88:	9f 81       	ldd	r25, Y+7	; 0x07
     e8a:	0e 94 2e 20 	call	0x405c	; 0x405c <memcpy>
     e8e:	88 a1       	ldd	r24, Y+32	; 0x20
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	91 95       	neg	r25
     e94:	81 95       	neg	r24
     e96:	91 09       	sbc	r25, r1
     e98:	2e 81       	ldd	r18, Y+6	; 0x06
     e9a:	3f 81       	ldd	r19, Y+7	; 0x07
     e9c:	28 0f       	add	r18, r24
     e9e:	39 1f       	adc	r19, r25
     ea0:	2e 83       	std	Y+6, r18	; 0x06
     ea2:	3f 83       	std	Y+7, r19	; 0x07
     ea4:	48 81       	ld	r20, Y
     ea6:	59 81       	ldd	r21, Y+1	; 0x01
     ea8:	24 17       	cp	r18, r20
     eaa:	35 07       	cpc	r19, r21
     eac:	30 f4       	brcc	.+12     	; 0xeba <prvCopyDataToQueue+0x7a>
     eae:	2a 81       	ldd	r18, Y+2	; 0x02
     eb0:	3b 81       	ldd	r19, Y+3	; 0x03
     eb2:	82 0f       	add	r24, r18
     eb4:	93 1f       	adc	r25, r19
     eb6:	8e 83       	std	Y+6, r24	; 0x06
     eb8:	9f 83       	std	Y+7, r25	; 0x07
     eba:	02 30       	cpi	r16, 0x02	; 2
     ebc:	11 f4       	brne	.+4      	; 0xec2 <prvCopyDataToQueue+0x82>
     ebe:	11 11       	cpse	r17, r1
     ec0:	11 50       	subi	r17, 0x01	; 1
     ec2:	1f 5f       	subi	r17, 0xFF	; 255
     ec4:	1e 8f       	std	Y+30, r17	; 0x1e
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <prvCopyDataFromQueue>:
     ed2:	fc 01       	movw	r30, r24
     ed4:	40 a1       	ldd	r20, Z+32	; 0x20
     ed6:	44 23       	and	r20, r20
     ed8:	a9 f0       	breq	.+42     	; 0xf04 <prvCopyDataFromQueue+0x32>
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	26 81       	ldd	r18, Z+6	; 0x06
     ede:	37 81       	ldd	r19, Z+7	; 0x07
     ee0:	24 0f       	add	r18, r20
     ee2:	35 1f       	adc	r19, r21
     ee4:	26 83       	std	Z+6, r18	; 0x06
     ee6:	37 83       	std	Z+7, r19	; 0x07
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	28 17       	cp	r18, r24
     eee:	39 07       	cpc	r19, r25
     ef0:	20 f0       	brcs	.+8      	; 0xefa <prvCopyDataFromQueue+0x28>
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	86 83       	std	Z+6, r24	; 0x06
     ef8:	97 83       	std	Z+7, r25	; 0x07
     efa:	cb 01       	movw	r24, r22
     efc:	66 81       	ldd	r22, Z+6	; 0x06
     efe:	77 81       	ldd	r23, Z+7	; 0x07
     f00:	0e 94 2e 20 	call	0x405c	; 0x405c <memcpy>
     f04:	08 95       	ret

00000f06 <prvUnlockQueue>:
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	8c 01       	movw	r16, r24
     f12:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f16:	ff 93       	push	r31
     f18:	f8 7f       	andi	r31, 0xF8	; 248
     f1a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f1e:	fc 01       	movw	r30, r24
     f20:	c2 a1       	ldd	r28, Z+34	; 0x22
     f22:	1c 16       	cp	r1, r28
     f24:	ac f4       	brge	.+42     	; 0xf50 <prvUnlockQueue+0x4a>
     f26:	83 89       	ldd	r24, Z+19	; 0x13
     f28:	81 11       	cpse	r24, r1
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <prvUnlockQueue+0x32>
     f2c:	11 c0       	rjmp	.+34     	; 0xf50 <prvUnlockQueue+0x4a>
     f2e:	f8 01       	movw	r30, r16
     f30:	83 89       	ldd	r24, Z+19	; 0x13
     f32:	81 11       	cpse	r24, r1
     f34:	05 c0       	rjmp	.+10     	; 0xf40 <prvUnlockQueue+0x3a>
     f36:	0c c0       	rjmp	.+24     	; 0xf50 <prvUnlockQueue+0x4a>
     f38:	78 01       	movw	r14, r16
     f3a:	f3 e1       	ldi	r31, 0x13	; 19
     f3c:	ef 0e       	add	r14, r31
     f3e:	f1 1c       	adc	r15, r1
     f40:	c7 01       	movw	r24, r14
     f42:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <xTaskRemoveFromEventList>
     f46:	81 11       	cpse	r24, r1
     f48:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <vTaskMissedYield>
     f4c:	c1 50       	subi	r28, 0x01	; 1
     f4e:	79 f7       	brne	.-34     	; 0xf2e <prvUnlockQueue+0x28>
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	f8 01       	movw	r30, r16
     f54:	82 a3       	std	Z+34, r24	; 0x22
     f56:	ff 91       	pop	r31
     f58:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f5c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f60:	ff 93       	push	r31
     f62:	f8 7f       	andi	r31, 0xF8	; 248
     f64:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f68:	f8 01       	movw	r30, r16
     f6a:	c1 a1       	ldd	r28, Z+33	; 0x21
     f6c:	1c 16       	cp	r1, r28
     f6e:	ac f4       	brge	.+42     	; 0xf9a <prvUnlockQueue+0x94>
     f70:	80 85       	ldd	r24, Z+8	; 0x08
     f72:	81 11       	cpse	r24, r1
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <prvUnlockQueue+0x7c>
     f76:	11 c0       	rjmp	.+34     	; 0xf9a <prvUnlockQueue+0x94>
     f78:	f8 01       	movw	r30, r16
     f7a:	80 85       	ldd	r24, Z+8	; 0x08
     f7c:	81 11       	cpse	r24, r1
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <prvUnlockQueue+0x84>
     f80:	0c c0       	rjmp	.+24     	; 0xf9a <prvUnlockQueue+0x94>
     f82:	78 01       	movw	r14, r16
     f84:	f8 e0       	ldi	r31, 0x08	; 8
     f86:	ef 0e       	add	r14, r31
     f88:	f1 1c       	adc	r15, r1
     f8a:	c7 01       	movw	r24, r14
     f8c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <xTaskRemoveFromEventList>
     f90:	81 11       	cpse	r24, r1
     f92:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <vTaskMissedYield>
     f96:	c1 50       	subi	r28, 0x01	; 1
     f98:	79 f7       	brne	.-34     	; 0xf78 <prvUnlockQueue+0x72>
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	f8 01       	movw	r30, r16
     f9e:	81 a3       	std	Z+33, r24	; 0x21
     fa0:	ff 91       	pop	r31
     fa2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	08 95       	ret

00000fb2 <xQueueGenericReset>:
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	ec 01       	movw	r28, r24
     fb8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fbc:	ff 93       	push	r31
     fbe:	f8 7f       	andi	r31, 0xF8	; 248
     fc0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fc4:	48 81       	ld	r20, Y
     fc6:	59 81       	ldd	r21, Y+1	; 0x01
     fc8:	28 a1       	ldd	r18, Y+32	; 0x20
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	7f 8d       	ldd	r23, Y+31	; 0x1f
     fce:	72 9f       	mul	r23, r18
     fd0:	c0 01       	movw	r24, r0
     fd2:	73 9f       	mul	r23, r19
     fd4:	90 0d       	add	r25, r0
     fd6:	11 24       	eor	r1, r1
     fd8:	fa 01       	movw	r30, r20
     fda:	e8 0f       	add	r30, r24
     fdc:	f9 1f       	adc	r31, r25
     fde:	ea 83       	std	Y+2, r30	; 0x02
     fe0:	fb 83       	std	Y+3, r31	; 0x03
     fe2:	1e 8e       	std	Y+30, r1	; 0x1e
     fe4:	4c 83       	std	Y+4, r20	; 0x04
     fe6:	5d 83       	std	Y+5, r21	; 0x05
     fe8:	82 1b       	sub	r24, r18
     fea:	93 0b       	sbc	r25, r19
     fec:	84 0f       	add	r24, r20
     fee:	95 1f       	adc	r25, r21
     ff0:	8e 83       	std	Y+6, r24	; 0x06
     ff2:	9f 83       	std	Y+7, r25	; 0x07
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	89 a3       	std	Y+33, r24	; 0x21
     ff8:	8a a3       	std	Y+34, r24	; 0x22
     ffa:	61 11       	cpse	r22, r1
     ffc:	0c c0       	rjmp	.+24     	; 0x1016 <xQueueGenericReset+0x64>
     ffe:	88 85       	ldd	r24, Y+8	; 0x08
    1000:	88 23       	and	r24, r24
    1002:	89 f0       	breq	.+34     	; 0x1026 <xQueueGenericReset+0x74>
    1004:	ce 01       	movw	r24, r28
    1006:	08 96       	adiw	r24, 0x08	; 8
    1008:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <xTaskRemoveFromEventList>
    100c:	88 23       	and	r24, r24
    100e:	59 f0       	breq	.+22     	; 0x1026 <xQueueGenericReset+0x74>
    1010:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <xQueueGenericReset+0x74>
    1016:	ce 01       	movw	r24, r28
    1018:	08 96       	adiw	r24, 0x08	; 8
    101a:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    101e:	ce 01       	movw	r24, r28
    1020:	43 96       	adiw	r24, 0x13	; 19
    1022:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    1026:	ff 91       	pop	r31
    1028:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <xQueueGenericCreate>:
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	08 2f       	mov	r16, r24
    1040:	16 2f       	mov	r17, r22
    1042:	f4 2e       	mov	r15, r20
    1044:	66 23       	and	r22, r22
    1046:	c9 f0       	breq	.+50     	; 0x107a <xQueueGenericCreate+0x46>
    1048:	86 9f       	mul	r24, r22
    104a:	c0 01       	movw	r24, r0
    104c:	11 24       	eor	r1, r1
    104e:	85 96       	adiw	r24, 0x25	; 37
    1050:	0e 94 90 04 	call	0x920	; 0x920 <pvPortMalloc>
    1054:	ec 01       	movw	r28, r24
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	49 f4       	brne	.+18     	; 0x106c <xQueueGenericCreate+0x38>
    105a:	16 c0       	rjmp	.+44     	; 0x1088 <xQueueGenericCreate+0x54>
    105c:	0f 8f       	std	Y+31, r16	; 0x1f
    105e:	18 a3       	std	Y+32, r17	; 0x20
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	ce 01       	movw	r24, r28
    1064:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <xQueueGenericReset>
    1068:	fc a2       	std	Y+36, r15	; 0x24
    106a:	0e c0       	rjmp	.+28     	; 0x1088 <xQueueGenericCreate+0x54>
    106c:	85 96       	adiw	r24, 0x25	; 37
    106e:	88 83       	st	Y, r24
    1070:	99 83       	std	Y+1, r25	; 0x01
    1072:	f4 cf       	rjmp	.-24     	; 0x105c <xQueueGenericCreate+0x28>
    1074:	c8 83       	st	Y, r28
    1076:	d9 83       	std	Y+1, r29	; 0x01
    1078:	f1 cf       	rjmp	.-30     	; 0x105c <xQueueGenericCreate+0x28>
    107a:	85 e2       	ldi	r24, 0x25	; 37
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 90 04 	call	0x920	; 0x920 <pvPortMalloc>
    1082:	ec 01       	movw	r28, r24
    1084:	89 2b       	or	r24, r25
    1086:	b1 f7       	brne	.-20     	; 0x1074 <xQueueGenericCreate+0x40>
    1088:	ce 01       	movw	r24, r28
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	08 95       	ret

00001096 <xQueueGenericSend>:
    1096:	af 92       	push	r10
    1098:	bf 92       	push	r11
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	29 97       	sbiw	r28, 0x09	; 9
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	7c 01       	movw	r14, r24
    10b6:	5b 01       	movw	r10, r22
    10b8:	2e 83       	std	Y+6, r18	; 0x06
    10ba:	3f 83       	std	Y+7, r19	; 0x07
    10bc:	48 87       	std	Y+8, r20	; 0x08
    10be:	59 87       	std	Y+9, r21	; 0x09
    10c0:	10 e0       	ldi	r17, 0x00	; 0
    10c2:	6c 01       	movw	r12, r24
    10c4:	88 e0       	ldi	r24, 0x08	; 8
    10c6:	c8 0e       	add	r12, r24
    10c8:	d1 1c       	adc	r13, r1
    10ca:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10ce:	ff 93       	push	r31
    10d0:	f8 7f       	andi	r31, 0xF8	; 248
    10d2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10d6:	f7 01       	movw	r30, r14
    10d8:	96 8d       	ldd	r25, Z+30	; 0x1e
    10da:	87 8d       	ldd	r24, Z+31	; 0x1f
    10dc:	98 17       	cp	r25, r24
    10de:	10 f0       	brcs	.+4      	; 0x10e4 <xQueueGenericSend+0x4e>
    10e0:	02 30       	cpi	r16, 0x02	; 2
    10e2:	d1 f4       	brne	.+52     	; 0x1118 <xQueueGenericSend+0x82>
    10e4:	40 2f       	mov	r20, r16
    10e6:	b5 01       	movw	r22, r10
    10e8:	c7 01       	movw	r24, r14
    10ea:	0e 94 20 07 	call	0xe40	; 0xe40 <prvCopyDataToQueue>
    10ee:	f7 01       	movw	r30, r14
    10f0:	93 89       	ldd	r25, Z+19	; 0x13
    10f2:	99 23       	and	r25, r25
    10f4:	49 f0       	breq	.+18     	; 0x1108 <xQueueGenericSend+0x72>
    10f6:	c7 01       	movw	r24, r14
    10f8:	43 96       	adiw	r24, 0x13	; 19
    10fa:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <xTaskRemoveFromEventList>
    10fe:	88 23       	and	r24, r24
    1100:	31 f0       	breq	.+12     	; 0x110e <xQueueGenericSend+0x78>
    1102:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
    1106:	03 c0       	rjmp	.+6      	; 0x110e <xQueueGenericSend+0x78>
    1108:	81 11       	cpse	r24, r1
    110a:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
    110e:	ff 91       	pop	r31
    1110:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	57 c0       	rjmp	.+174    	; 0x11c6 <xQueueGenericSend+0x130>
    1118:	8e 81       	ldd	r24, Y+6	; 0x06
    111a:	9f 81       	ldd	r25, Y+7	; 0x07
    111c:	a8 85       	ldd	r26, Y+8	; 0x08
    111e:	b9 85       	ldd	r27, Y+9	; 0x09
    1120:	89 2b       	or	r24, r25
    1122:	8a 2b       	or	r24, r26
    1124:	8b 2b       	or	r24, r27
    1126:	29 f4       	brne	.+10     	; 0x1132 <xQueueGenericSend+0x9c>
    1128:	ff 91       	pop	r31
    112a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	4a c0       	rjmp	.+148    	; 0x11c6 <xQueueGenericSend+0x130>
    1132:	11 11       	cpse	r17, r1
    1134:	05 c0       	rjmp	.+10     	; 0x1140 <xQueueGenericSend+0xaa>
    1136:	ce 01       	movw	r24, r28
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <vTaskInternalSetTimeOutState>
    113e:	11 e0       	ldi	r17, 0x01	; 1
    1140:	ff 91       	pop	r31
    1142:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1146:	0e 94 04 0c 	call	0x1808	; 0x1808 <vTaskSuspendAll>
    114a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    114e:	ff 93       	push	r31
    1150:	f8 7f       	andi	r31, 0xF8	; 248
    1152:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1156:	f7 01       	movw	r30, r14
    1158:	81 a1       	ldd	r24, Z+33	; 0x21
    115a:	8f 3f       	cpi	r24, 0xFF	; 255
    115c:	09 f4       	brne	.+2      	; 0x1160 <xQueueGenericSend+0xca>
    115e:	11 a2       	std	Z+33, r1	; 0x21
    1160:	f7 01       	movw	r30, r14
    1162:	82 a1       	ldd	r24, Z+34	; 0x22
    1164:	8f 3f       	cpi	r24, 0xFF	; 255
    1166:	09 f4       	brne	.+2      	; 0x116a <xQueueGenericSend+0xd4>
    1168:	12 a2       	std	Z+34, r1	; 0x22
    116a:	ff 91       	pop	r31
    116c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1170:	be 01       	movw	r22, r28
    1172:	6a 5f       	subi	r22, 0xFA	; 250
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	ce 01       	movw	r24, r28
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskCheckForTimeOut>
    117e:	81 11       	cpse	r24, r1
    1180:	1c c0       	rjmp	.+56     	; 0x11ba <xQueueGenericSend+0x124>
    1182:	c7 01       	movw	r24, r14
    1184:	0e 94 0d 07 	call	0xe1a	; 0xe1a <prvIsQueueFull>
    1188:	88 23       	and	r24, r24
    118a:	89 f0       	breq	.+34     	; 0x11ae <xQueueGenericSend+0x118>
    118c:	4e 81       	ldd	r20, Y+6	; 0x06
    118e:	5f 81       	ldd	r21, Y+7	; 0x07
    1190:	68 85       	ldd	r22, Y+8	; 0x08
    1192:	79 85       	ldd	r23, Y+9	; 0x09
    1194:	c6 01       	movw	r24, r12
    1196:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <vTaskPlaceOnEventList>
    119a:	c7 01       	movw	r24, r14
    119c:	0e 94 83 07 	call	0xf06	; 0xf06 <prvUnlockQueue>
    11a0:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
    11a4:	81 11       	cpse	r24, r1
    11a6:	91 cf       	rjmp	.-222    	; 0x10ca <xQueueGenericSend+0x34>
    11a8:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
    11ac:	8e cf       	rjmp	.-228    	; 0x10ca <xQueueGenericSend+0x34>
    11ae:	c7 01       	movw	r24, r14
    11b0:	0e 94 83 07 	call	0xf06	; 0xf06 <prvUnlockQueue>
    11b4:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
    11b8:	88 cf       	rjmp	.-240    	; 0x10ca <xQueueGenericSend+0x34>
    11ba:	c7 01       	movw	r24, r14
    11bc:	0e 94 83 07 	call	0xf06	; 0xf06 <prvUnlockQueue>
    11c0:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	29 96       	adiw	r28, 0x09	; 9
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	cf 90       	pop	r12
    11dc:	bf 90       	pop	r11
    11de:	af 90       	pop	r10
    11e0:	08 95       	ret

000011e2 <xQueueGenericSendFromISR>:
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	ec 01       	movw	r28, r24
    11f6:	6b 01       	movw	r12, r22
    11f8:	5a 01       	movw	r10, r20
    11fa:	02 2f       	mov	r16, r18
    11fc:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_portSetInterruptMaskFromIsr>
    1200:	f8 2e       	mov	r15, r24
    1202:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1204:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1206:	98 17       	cp	r25, r24
    1208:	10 f0       	brcs	.+4      	; 0x120e <xQueueGenericSendFromISR+0x2c>
    120a:	02 30       	cpi	r16, 0x02	; 2
    120c:	e1 f4       	brne	.+56     	; 0x1246 <xQueueGenericSendFromISR+0x64>
    120e:	1a a1       	ldd	r17, Y+34	; 0x22
    1210:	40 2f       	mov	r20, r16
    1212:	b6 01       	movw	r22, r12
    1214:	ce 01       	movw	r24, r28
    1216:	0e 94 20 07 	call	0xe40	; 0xe40 <prvCopyDataToQueue>
    121a:	1f 3f       	cpi	r17, 0xFF	; 255
    121c:	81 f4       	brne	.+32     	; 0x123e <xQueueGenericSendFromISR+0x5c>
    121e:	8b 89       	ldd	r24, Y+19	; 0x13
    1220:	88 23       	and	r24, r24
    1222:	99 f0       	breq	.+38     	; 0x124a <xQueueGenericSendFromISR+0x68>
    1224:	ce 01       	movw	r24, r28
    1226:	43 96       	adiw	r24, 0x13	; 19
    1228:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <xTaskRemoveFromEventList>
    122c:	88 23       	and	r24, r24
    122e:	79 f0       	breq	.+30     	; 0x124e <xQueueGenericSendFromISR+0x6c>
    1230:	a1 14       	cp	r10, r1
    1232:	b1 04       	cpc	r11, r1
    1234:	71 f0       	breq	.+28     	; 0x1252 <xQueueGenericSendFromISR+0x70>
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	f5 01       	movw	r30, r10
    123a:	80 83       	st	Z, r24
    123c:	0b c0       	rjmp	.+22     	; 0x1254 <xQueueGenericSendFromISR+0x72>
    123e:	1f 5f       	subi	r17, 0xFF	; 255
    1240:	1a a3       	std	Y+34, r17	; 0x22
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	07 c0       	rjmp	.+14     	; 0x1254 <xQueueGenericSendFromISR+0x72>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <xQueueGenericSendFromISR+0x72>
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <xQueueGenericSendFromISR+0x72>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <xQueueGenericSendFromISR+0x72>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	bf 90       	pop	r11
    1268:	af 90       	pop	r10
    126a:	08 95       	ret

0000126c <xQueueReceive>:
    126c:	af 92       	push	r10
    126e:	bf 92       	push	r11
    1270:	cf 92       	push	r12
    1272:	df 92       	push	r13
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	29 97       	sbiw	r28, 0x09	; 9
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	8c 01       	movw	r16, r24
    128c:	5b 01       	movw	r10, r22
    128e:	2e 83       	std	Y+6, r18	; 0x06
    1290:	3f 83       	std	Y+7, r19	; 0x07
    1292:	48 87       	std	Y+8, r20	; 0x08
    1294:	59 87       	std	Y+9, r21	; 0x09
    1296:	e1 2c       	mov	r14, r1
    1298:	6c 01       	movw	r12, r24
    129a:	83 e1       	ldi	r24, 0x13	; 19
    129c:	c8 0e       	add	r12, r24
    129e:	d1 1c       	adc	r13, r1
    12a0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    12a4:	ff 93       	push	r31
    12a6:	f8 7f       	andi	r31, 0xF8	; 248
    12a8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    12ac:	f8 01       	movw	r30, r16
    12ae:	f6 8c       	ldd	r15, Z+30	; 0x1e
    12b0:	ff 20       	and	r15, r15
    12b2:	b1 f0       	breq	.+44     	; 0x12e0 <xQueueReceive+0x74>
    12b4:	b5 01       	movw	r22, r10
    12b6:	c8 01       	movw	r24, r16
    12b8:	0e 94 69 07 	call	0xed2	; 0xed2 <prvCopyDataFromQueue>
    12bc:	fa 94       	dec	r15
    12be:	f8 01       	movw	r30, r16
    12c0:	f6 8e       	std	Z+30, r15	; 0x1e
    12c2:	80 85       	ldd	r24, Z+8	; 0x08
    12c4:	88 23       	and	r24, r24
    12c6:	39 f0       	breq	.+14     	; 0x12d6 <xQueueReceive+0x6a>
    12c8:	c8 01       	movw	r24, r16
    12ca:	08 96       	adiw	r24, 0x08	; 8
    12cc:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <xTaskRemoveFromEventList>
    12d0:	81 11       	cpse	r24, r1
    12d2:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
    12d6:	ff 91       	pop	r31
    12d8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	5e c0       	rjmp	.+188    	; 0x139c <xQueueReceive+0x130>
    12e0:	8e 81       	ldd	r24, Y+6	; 0x06
    12e2:	9f 81       	ldd	r25, Y+7	; 0x07
    12e4:	a8 85       	ldd	r26, Y+8	; 0x08
    12e6:	b9 85       	ldd	r27, Y+9	; 0x09
    12e8:	89 2b       	or	r24, r25
    12ea:	8a 2b       	or	r24, r26
    12ec:	8b 2b       	or	r24, r27
    12ee:	29 f4       	brne	.+10     	; 0x12fa <xQueueReceive+0x8e>
    12f0:	ff 91       	pop	r31
    12f2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	51 c0       	rjmp	.+162    	; 0x139c <xQueueReceive+0x130>
    12fa:	e1 10       	cpse	r14, r1
    12fc:	06 c0       	rjmp	.+12     	; 0x130a <xQueueReceive+0x9e>
    12fe:	ce 01       	movw	r24, r28
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <vTaskInternalSetTimeOutState>
    1306:	ee 24       	eor	r14, r14
    1308:	e3 94       	inc	r14
    130a:	ff 91       	pop	r31
    130c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1310:	0e 94 04 0c 	call	0x1808	; 0x1808 <vTaskSuspendAll>
    1314:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1318:	ff 93       	push	r31
    131a:	f8 7f       	andi	r31, 0xF8	; 248
    131c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1320:	f8 01       	movw	r30, r16
    1322:	81 a1       	ldd	r24, Z+33	; 0x21
    1324:	8f 3f       	cpi	r24, 0xFF	; 255
    1326:	09 f4       	brne	.+2      	; 0x132a <xQueueReceive+0xbe>
    1328:	11 a2       	std	Z+33, r1	; 0x21
    132a:	f8 01       	movw	r30, r16
    132c:	82 a1       	ldd	r24, Z+34	; 0x22
    132e:	8f 3f       	cpi	r24, 0xFF	; 255
    1330:	09 f4       	brne	.+2      	; 0x1334 <xQueueReceive+0xc8>
    1332:	12 a2       	std	Z+34, r1	; 0x22
    1334:	ff 91       	pop	r31
    1336:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    133a:	be 01       	movw	r22, r28
    133c:	6a 5f       	subi	r22, 0xFA	; 250
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	ce 01       	movw	r24, r28
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskCheckForTimeOut>
    1348:	81 11       	cpse	r24, r1
    134a:	1c c0       	rjmp	.+56     	; 0x1384 <xQueueReceive+0x118>
    134c:	c8 01       	movw	r24, r16
    134e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <prvIsQueueEmpty>
    1352:	88 23       	and	r24, r24
    1354:	89 f0       	breq	.+34     	; 0x1378 <xQueueReceive+0x10c>
    1356:	4e 81       	ldd	r20, Y+6	; 0x06
    1358:	5f 81       	ldd	r21, Y+7	; 0x07
    135a:	68 85       	ldd	r22, Y+8	; 0x08
    135c:	79 85       	ldd	r23, Y+9	; 0x09
    135e:	c6 01       	movw	r24, r12
    1360:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <vTaskPlaceOnEventList>
    1364:	c8 01       	movw	r24, r16
    1366:	0e 94 83 07 	call	0xf06	; 0xf06 <prvUnlockQueue>
    136a:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
    136e:	81 11       	cpse	r24, r1
    1370:	97 cf       	rjmp	.-210    	; 0x12a0 <xQueueReceive+0x34>
    1372:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
    1376:	94 cf       	rjmp	.-216    	; 0x12a0 <xQueueReceive+0x34>
    1378:	c8 01       	movw	r24, r16
    137a:	0e 94 83 07 	call	0xf06	; 0xf06 <prvUnlockQueue>
    137e:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
    1382:	8e cf       	rjmp	.-228    	; 0x12a0 <xQueueReceive+0x34>
    1384:	c8 01       	movw	r24, r16
    1386:	0e 94 83 07 	call	0xf06	; 0xf06 <prvUnlockQueue>
    138a:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
    138e:	c8 01       	movw	r24, r16
    1390:	0e 94 fe 06 	call	0xdfc	; 0xdfc <prvIsQueueEmpty>
    1394:	88 23       	and	r24, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <xQueueReceive+0x12e>
    1398:	83 cf       	rjmp	.-250    	; 0x12a0 <xQueueReceive+0x34>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	29 96       	adiw	r28, 0x09	; 9
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	bf 90       	pop	r11
    13b4:	af 90       	pop	r10
    13b6:	08 95       	ret

000013b8 <uxQueueMessagesWaiting>:
    13b8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13bc:	ff 93       	push	r31
    13be:	f8 7f       	andi	r31, 0xF8	; 248
    13c0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13c4:	fc 01       	movw	r30, r24
    13c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    13c8:	ff 91       	pop	r31
    13ca:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13ce:	08 95       	ret

000013d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    13d6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13da:	ff 93       	push	r31
    13dc:	f8 7f       	andi	r31, 0xF8	; 248
    13de:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13e2:	89 a1       	ldd	r24, Y+33	; 0x21
    13e4:	8f 3f       	cpi	r24, 0xFF	; 255
    13e6:	09 f4       	brne	.+2      	; 0x13ea <vQueueWaitForMessageRestricted+0x1a>
    13e8:	19 a2       	std	Y+33, r1	; 0x21
    13ea:	8a a1       	ldd	r24, Y+34	; 0x22
    13ec:	8f 3f       	cpi	r24, 0xFF	; 255
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <vQueueWaitForMessageRestricted+0x22>
    13f0:	1a a2       	std	Y+34, r1	; 0x22
    13f2:	ff 91       	pop	r31
    13f4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    13f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13fa:	81 11       	cpse	r24, r1
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    13fe:	ce 01       	movw	r24, r28
    1400:	43 96       	adiw	r24, 0x13	; 19
    1402:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1406:	ce 01       	movw	r24, r28
    1408:	0e 94 83 07 	call	0xf06	; 0xf06 <prvUnlockQueue>
	}
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    1412:	e0 91 4e 2c 	lds	r30, 0x2C4E	; 0x802c4e <pxDelayedTaskList>
    1416:	f0 91 4f 2c 	lds	r31, 0x2C4F	; 0x802c4f <pxDelayedTaskList+0x1>
    141a:	80 81       	ld	r24, Z
    141c:	81 11       	cpse	r24, r1
    141e:	0c c0       	rjmp	.+24     	; 0x1438 <prvResetNextTaskUnblockTime+0x26>
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	9f ef       	ldi	r25, 0xFF	; 255
    1424:	dc 01       	movw	r26, r24
    1426:	80 93 27 2c 	sts	0x2C27, r24	; 0x802c27 <xNextTaskUnblockTime>
    142a:	90 93 28 2c 	sts	0x2C28, r25	; 0x802c28 <xNextTaskUnblockTime+0x1>
    142e:	a0 93 29 2c 	sts	0x2C29, r26	; 0x802c29 <xNextTaskUnblockTime+0x2>
    1432:	b0 93 2a 2c 	sts	0x2C2A, r27	; 0x802c2a <xNextTaskUnblockTime+0x3>
    1436:	08 95       	ret
    1438:	e0 91 4e 2c 	lds	r30, 0x2C4E	; 0x802c4e <pxDelayedTaskList>
    143c:	f0 91 4f 2c 	lds	r31, 0x2C4F	; 0x802c4f <pxDelayedTaskList+0x1>
    1440:	07 80       	ldd	r0, Z+7	; 0x07
    1442:	f0 85       	ldd	r31, Z+8	; 0x08
    1444:	e0 2d       	mov	r30, r0
    1446:	00 84       	ldd	r0, Z+8	; 0x08
    1448:	f1 85       	ldd	r31, Z+9	; 0x09
    144a:	e0 2d       	mov	r30, r0
    144c:	82 81       	ldd	r24, Z+2	; 0x02
    144e:	93 81       	ldd	r25, Z+3	; 0x03
    1450:	a4 81       	ldd	r26, Z+4	; 0x04
    1452:	b5 81       	ldd	r27, Z+5	; 0x05
    1454:	80 93 27 2c 	sts	0x2C27, r24	; 0x802c27 <xNextTaskUnblockTime>
    1458:	90 93 28 2c 	sts	0x2C28, r25	; 0x802c28 <xNextTaskUnblockTime+0x1>
    145c:	a0 93 29 2c 	sts	0x2C29, r26	; 0x802c29 <xNextTaskUnblockTime+0x2>
    1460:	b0 93 2a 2c 	sts	0x2C2A, r27	; 0x802c2a <xNextTaskUnblockTime+0x3>
    1464:	08 95       	ret

00001466 <prvAddCurrentTaskToDelayedList>:
    1466:	8f 92       	push	r8
    1468:	9f 92       	push	r9
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	cf 93       	push	r28
    1478:	6b 01       	movw	r12, r22
    147a:	7c 01       	movw	r14, r24
    147c:	c4 2f       	mov	r28, r20
    147e:	80 90 31 2c 	lds	r8, 0x2C31	; 0x802c31 <xTickCount>
    1482:	90 90 32 2c 	lds	r9, 0x2C32	; 0x802c32 <xTickCount+0x1>
    1486:	a0 90 33 2c 	lds	r10, 0x2C33	; 0x802c33 <xTickCount+0x2>
    148a:	b0 90 34 2c 	lds	r11, 0x2C34	; 0x802c34 <xTickCount+0x3>
    148e:	80 91 92 2c 	lds	r24, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1492:	90 91 93 2c 	lds	r25, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1496:	02 96       	adiw	r24, 0x02	; 2
    1498:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	c8 16       	cp	r12, r24
    14a0:	d8 06       	cpc	r13, r24
    14a2:	e8 06       	cpc	r14, r24
    14a4:	f8 06       	cpc	r15, r24
    14a6:	69 f4       	brne	.+26     	; 0x14c2 <prvAddCurrentTaskToDelayedList+0x5c>
    14a8:	cc 23       	and	r28, r28
    14aa:	59 f0       	breq	.+22     	; 0x14c2 <prvAddCurrentTaskToDelayedList+0x5c>
    14ac:	60 91 92 2c 	lds	r22, 0x2C92	; 0x802c92 <pxCurrentTCB>
    14b0:	70 91 93 2c 	lds	r23, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    14b4:	6e 5f       	subi	r22, 0xFE	; 254
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	86 e3       	ldi	r24, 0x36	; 54
    14ba:	9c e2       	ldi	r25, 0x2C	; 44
    14bc:	0e 94 cc 04 	call	0x998	; 0x998 <vListInsertEnd>
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <prvAddCurrentTaskToDelayedList+0xda>
    14c2:	c8 0c       	add	r12, r8
    14c4:	d9 1c       	adc	r13, r9
    14c6:	ea 1c       	adc	r14, r10
    14c8:	fb 1c       	adc	r15, r11
    14ca:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    14ce:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    14d2:	c2 82       	std	Z+2, r12	; 0x02
    14d4:	d3 82       	std	Z+3, r13	; 0x03
    14d6:	e4 82       	std	Z+4, r14	; 0x04
    14d8:	f5 82       	std	Z+5, r15	; 0x05
    14da:	c8 14       	cp	r12, r8
    14dc:	d9 04       	cpc	r13, r9
    14de:	ea 04       	cpc	r14, r10
    14e0:	fb 04       	cpc	r15, r11
    14e2:	68 f4       	brcc	.+26     	; 0x14fe <prvAddCurrentTaskToDelayedList+0x98>
    14e4:	60 91 92 2c 	lds	r22, 0x2C92	; 0x802c92 <pxCurrentTCB>
    14e8:	70 91 93 2c 	lds	r23, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    14ec:	80 91 4c 2c 	lds	r24, 0x2C4C	; 0x802c4c <pxOverflowDelayedTaskList>
    14f0:	90 91 4d 2c 	lds	r25, 0x2C4D	; 0x802c4d <pxOverflowDelayedTaskList+0x1>
    14f4:	6e 5f       	subi	r22, 0xFE	; 254
    14f6:	7f 4f       	sbci	r23, 0xFF	; 255
    14f8:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>
    14fc:	21 c0       	rjmp	.+66     	; 0x1540 <prvAddCurrentTaskToDelayedList+0xda>
    14fe:	60 91 92 2c 	lds	r22, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1502:	70 91 93 2c 	lds	r23, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1506:	80 91 4e 2c 	lds	r24, 0x2C4E	; 0x802c4e <pxDelayedTaskList>
    150a:	90 91 4f 2c 	lds	r25, 0x2C4F	; 0x802c4f <pxDelayedTaskList+0x1>
    150e:	6e 5f       	subi	r22, 0xFE	; 254
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>
    1516:	80 91 27 2c 	lds	r24, 0x2C27	; 0x802c27 <xNextTaskUnblockTime>
    151a:	90 91 28 2c 	lds	r25, 0x2C28	; 0x802c28 <xNextTaskUnblockTime+0x1>
    151e:	a0 91 29 2c 	lds	r26, 0x2C29	; 0x802c29 <xNextTaskUnblockTime+0x2>
    1522:	b0 91 2a 2c 	lds	r27, 0x2C2A	; 0x802c2a <xNextTaskUnblockTime+0x3>
    1526:	c8 16       	cp	r12, r24
    1528:	d9 06       	cpc	r13, r25
    152a:	ea 06       	cpc	r14, r26
    152c:	fb 06       	cpc	r15, r27
    152e:	40 f4       	brcc	.+16     	; 0x1540 <prvAddCurrentTaskToDelayedList+0xda>
    1530:	c0 92 27 2c 	sts	0x2C27, r12	; 0x802c27 <xNextTaskUnblockTime>
    1534:	d0 92 28 2c 	sts	0x2C28, r13	; 0x802c28 <xNextTaskUnblockTime+0x1>
    1538:	e0 92 29 2c 	sts	0x2C29, r14	; 0x802c29 <xNextTaskUnblockTime+0x2>
    153c:	f0 92 2a 2c 	sts	0x2C2A, r15	; 0x802c2a <xNextTaskUnblockTime+0x3>
    1540:	cf 91       	pop	r28
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	bf 90       	pop	r11
    154c:	af 90       	pop	r10
    154e:	9f 90       	pop	r9
    1550:	8f 90       	pop	r8
    1552:	08 95       	ret

00001554 <prvIdleTask>:
    1554:	c6 e6       	ldi	r28, 0x66	; 102
    1556:	dc e2       	ldi	r29, 0x2C	; 44
    1558:	88 81       	ld	r24, Y
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	10 f0       	brcs	.+4      	; 0x1562 <prvIdleTask+0xe>
    155e:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
    1562:	0e 94 0c 13 	call	0x2618	; 0x2618 <vApplicationIdleHook>
    1566:	f8 cf       	rjmp	.-16     	; 0x1558 <prvIdleTask+0x4>

00001568 <xTaskCreate>:
    1568:	4f 92       	push	r4
    156a:	5f 92       	push	r5
    156c:	6f 92       	push	r6
    156e:	7f 92       	push	r7
    1570:	8f 92       	push	r8
    1572:	9f 92       	push	r9
    1574:	af 92       	push	r10
    1576:	bf 92       	push	r11
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	4c 01       	movw	r8, r24
    1588:	6b 01       	movw	r12, r22
    158a:	5a 01       	movw	r10, r20
    158c:	29 01       	movw	r4, r18
    158e:	ca 01       	movw	r24, r20
    1590:	0e 94 90 04 	call	0x920	; 0x920 <pvPortMalloc>
    1594:	3c 01       	movw	r6, r24
    1596:	89 2b       	or	r24, r25
    1598:	09 f4       	brne	.+2      	; 0x159c <xTaskCreate+0x34>
    159a:	ea c0       	rjmp	.+468    	; 0x1770 <xTaskCreate+0x208>
    159c:	8c e2       	ldi	r24, 0x2C	; 44
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 90 04 	call	0x920	; 0x920 <pvPortMalloc>
    15a4:	ec 01       	movw	r28, r24
    15a6:	89 2b       	or	r24, r25
    15a8:	b1 f0       	breq	.+44     	; 0x15d6 <xTaskCreate+0x6e>
    15aa:	6b 8e       	std	Y+27, r6	; 0x1b
    15ac:	7c 8e       	std	Y+28, r7	; 0x1c
    15ae:	a5 01       	movw	r20, r10
    15b0:	65 ea       	ldi	r22, 0xA5	; 165
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	c3 01       	movw	r24, r6
    15b6:	0e 94 37 20 	call	0x406e	; 0x406e <memset>
    15ba:	21 e0       	ldi	r18, 0x01	; 1
    15bc:	a2 1a       	sub	r10, r18
    15be:	b1 08       	sbc	r11, r1
    15c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c4:	a8 0e       	add	r10, r24
    15c6:	b9 1e       	adc	r11, r25
    15c8:	d6 01       	movw	r26, r12
    15ca:	8c 91       	ld	r24, X
    15cc:	8d 8f       	std	Y+29, r24	; 0x1d
    15ce:	8c 91       	ld	r24, X
    15d0:	81 11       	cpse	r24, r1
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <xTaskCreate+0x76>
    15d4:	18 c0       	rjmp	.+48     	; 0x1606 <xTaskCreate+0x9e>
    15d6:	c3 01       	movw	r24, r6
    15d8:	0e 94 b6 04 	call	0x96c	; 0x96c <vPortFree>
    15dc:	c9 c0       	rjmp	.+402    	; 0x1770 <xTaskCreate+0x208>
    15de:	ae 01       	movw	r20, r28
    15e0:	42 5e       	subi	r20, 0xE2	; 226
    15e2:	5f 4f       	sbci	r21, 0xFF	; 255
    15e4:	f6 01       	movw	r30, r12
    15e6:	31 96       	adiw	r30, 0x01	; 1
    15e8:	b8 e0       	ldi	r27, 0x08	; 8
    15ea:	cb 0e       	add	r12, r27
    15ec:	d1 1c       	adc	r13, r1
    15ee:	cf 01       	movw	r24, r30
    15f0:	21 91       	ld	r18, Z+
    15f2:	da 01       	movw	r26, r20
    15f4:	2d 93       	st	X+, r18
    15f6:	ad 01       	movw	r20, r26
    15f8:	dc 01       	movw	r26, r24
    15fa:	8c 91       	ld	r24, X
    15fc:	88 23       	and	r24, r24
    15fe:	19 f0       	breq	.+6      	; 0x1606 <xTaskCreate+0x9e>
    1600:	ec 15       	cp	r30, r12
    1602:	fd 05       	cpc	r31, r13
    1604:	a1 f7       	brne	.-24     	; 0x15ee <xTaskCreate+0x86>
    1606:	1c a2       	std	Y+36, r1	; 0x24
    1608:	04 30       	cpi	r16, 0x04	; 4
    160a:	08 f0       	brcs	.+2      	; 0x160e <xTaskCreate+0xa6>
    160c:	03 e0       	ldi	r16, 0x03	; 3
    160e:	0a 8f       	std	Y+26, r16	; 0x1a
    1610:	6e 01       	movw	r12, r28
    1612:	b2 e0       	ldi	r27, 0x02	; 2
    1614:	cb 0e       	add	r12, r27
    1616:	d1 1c       	adc	r13, r1
    1618:	c6 01       	movw	r24, r12
    161a:	0e 94 c8 04 	call	0x990	; 0x990 <vListInitialiseItem>
    161e:	ce 01       	movw	r24, r28
    1620:	0e 96       	adiw	r24, 0x0e	; 14
    1622:	0e 94 c8 04 	call	0x990	; 0x990 <vListInitialiseItem>
    1626:	ca 87       	std	Y+10, r28	; 0x0a
    1628:	db 87       	std	Y+11, r29	; 0x0b
    162a:	84 e0       	ldi	r24, 0x04	; 4
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a0 e0       	ldi	r26, 0x00	; 0
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	80 1b       	sub	r24, r16
    1634:	91 09       	sbc	r25, r1
    1636:	a1 09       	sbc	r26, r1
    1638:	b1 09       	sbc	r27, r1
    163a:	8e 87       	std	Y+14, r24	; 0x0e
    163c:	9f 87       	std	Y+15, r25	; 0x0f
    163e:	a8 8b       	std	Y+16, r26	; 0x10
    1640:	b9 8b       	std	Y+17, r27	; 0x11
    1642:	ce 8b       	std	Y+22, r28	; 0x16
    1644:	df 8b       	std	Y+23, r29	; 0x17
    1646:	1f a2       	std	Y+39, r1	; 0x27
    1648:	18 a6       	std	Y+40, r1	; 0x28
    164a:	19 a6       	std	Y+41, r1	; 0x29
    164c:	1a a6       	std	Y+42, r1	; 0x2a
    164e:	1b a6       	std	Y+43, r1	; 0x2b
    1650:	a2 01       	movw	r20, r4
    1652:	b4 01       	movw	r22, r8
    1654:	c5 01       	movw	r24, r10
    1656:	0e 94 58 05 	call	0xab0	; 0xab0 <pxPortInitialiseStack>
    165a:	88 83       	st	Y, r24
    165c:	99 83       	std	Y+1, r25	; 0x01
    165e:	e1 14       	cp	r14, r1
    1660:	f1 04       	cpc	r15, r1
    1662:	19 f0       	breq	.+6      	; 0x166a <xTaskCreate+0x102>
    1664:	f7 01       	movw	r30, r14
    1666:	c0 83       	st	Z, r28
    1668:	d1 83       	std	Z+1, r29	; 0x01
    166a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    166e:	ff 93       	push	r31
    1670:	f8 7f       	andi	r31, 0xF8	; 248
    1672:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1676:	80 91 35 2c 	lds	r24, 0x2C35	; 0x802c35 <uxCurrentNumberOfTasks>
    167a:	8f 5f       	subi	r24, 0xFF	; 255
    167c:	80 93 35 2c 	sts	0x2C35, r24	; 0x802c35 <uxCurrentNumberOfTasks>
    1680:	80 91 92 2c 	lds	r24, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1684:	90 91 93 2c 	lds	r25, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1688:	89 2b       	or	r24, r25
    168a:	a9 f5       	brne	.+106    	; 0x16f6 <xTaskCreate+0x18e>
    168c:	c0 93 92 2c 	sts	0x2C92, r28	; 0x802c92 <pxCurrentTCB>
    1690:	d0 93 93 2c 	sts	0x2C93, r29	; 0x802c93 <pxCurrentTCB+0x1>
    1694:	80 91 35 2c 	lds	r24, 0x2C35	; 0x802c35 <uxCurrentNumberOfTasks>
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	e9 f5       	brne	.+122    	; 0x1716 <xTaskCreate+0x1ae>
    169c:	86 e6       	ldi	r24, 0x66	; 102
    169e:	9c e2       	ldi	r25, 0x2C	; 44
    16a0:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    16a4:	81 e7       	ldi	r24, 0x71	; 113
    16a6:	9c e2       	ldi	r25, 0x2C	; 44
    16a8:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    16ac:	8c e7       	ldi	r24, 0x7C	; 124
    16ae:	9c e2       	ldi	r25, 0x2C	; 44
    16b0:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    16b4:	87 e8       	ldi	r24, 0x87	; 135
    16b6:	9c e2       	ldi	r25, 0x2C	; 44
    16b8:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    16bc:	8b e5       	ldi	r24, 0x5B	; 91
    16be:	9c e2       	ldi	r25, 0x2C	; 44
    16c0:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    16c4:	80 e5       	ldi	r24, 0x50	; 80
    16c6:	9c e2       	ldi	r25, 0x2C	; 44
    16c8:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    16cc:	81 e4       	ldi	r24, 0x41	; 65
    16ce:	9c e2       	ldi	r25, 0x2C	; 44
    16d0:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    16d4:	86 e3       	ldi	r24, 0x36	; 54
    16d6:	9c e2       	ldi	r25, 0x2C	; 44
    16d8:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    16dc:	8b e5       	ldi	r24, 0x5B	; 91
    16de:	9c e2       	ldi	r25, 0x2C	; 44
    16e0:	80 93 4e 2c 	sts	0x2C4E, r24	; 0x802c4e <pxDelayedTaskList>
    16e4:	90 93 4f 2c 	sts	0x2C4F, r25	; 0x802c4f <pxDelayedTaskList+0x1>
    16e8:	80 e5       	ldi	r24, 0x50	; 80
    16ea:	9c e2       	ldi	r25, 0x2C	; 44
    16ec:	80 93 4c 2c 	sts	0x2C4C, r24	; 0x802c4c <pxOverflowDelayedTaskList>
    16f0:	90 93 4d 2c 	sts	0x2C4D, r25	; 0x802c4d <pxOverflowDelayedTaskList+0x1>
    16f4:	10 c0       	rjmp	.+32     	; 0x1716 <xTaskCreate+0x1ae>
    16f6:	80 91 2f 2c 	lds	r24, 0x2C2F	; 0x802c2f <xSchedulerRunning>
    16fa:	81 11       	cpse	r24, r1
    16fc:	0c c0       	rjmp	.+24     	; 0x1716 <xTaskCreate+0x1ae>
    16fe:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1702:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1706:	92 8d       	ldd	r25, Z+26	; 0x1a
    1708:	8a 8d       	ldd	r24, Y+26	; 0x1a
    170a:	89 17       	cp	r24, r25
    170c:	20 f0       	brcs	.+8      	; 0x1716 <xTaskCreate+0x1ae>
    170e:	c0 93 92 2c 	sts	0x2C92, r28	; 0x802c92 <pxCurrentTCB>
    1712:	d0 93 93 2c 	sts	0x2C93, r29	; 0x802c93 <pxCurrentTCB+0x1>
    1716:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <uxTaskNumber>
    171a:	8f 5f       	subi	r24, 0xFF	; 255
    171c:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <uxTaskNumber>
    1720:	8d a3       	std	Y+37, r24	; 0x25
    1722:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1724:	90 91 30 2c 	lds	r25, 0x2C30	; 0x802c30 <uxTopReadyPriority>
    1728:	98 17       	cp	r25, r24
    172a:	10 f4       	brcc	.+4      	; 0x1730 <xTaskCreate+0x1c8>
    172c:	80 93 30 2c 	sts	0x2C30, r24	; 0x802c30 <uxTopReadyPriority>
    1730:	fb e0       	ldi	r31, 0x0B	; 11
    1732:	8f 9f       	mul	r24, r31
    1734:	c0 01       	movw	r24, r0
    1736:	11 24       	eor	r1, r1
    1738:	b6 01       	movw	r22, r12
    173a:	8a 59       	subi	r24, 0x9A	; 154
    173c:	93 4d       	sbci	r25, 0xD3	; 211
    173e:	0e 94 cc 04 	call	0x998	; 0x998 <vListInsertEnd>
    1742:	ff 91       	pop	r31
    1744:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1748:	80 91 2f 2c 	lds	r24, 0x2C2F	; 0x802c2f <xSchedulerRunning>
    174c:	88 23       	and	r24, r24
    174e:	61 f0       	breq	.+24     	; 0x1768 <xTaskCreate+0x200>
    1750:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1754:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1758:	92 8d       	ldd	r25, Z+26	; 0x1a
    175a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    175c:	98 17       	cp	r25, r24
    175e:	30 f4       	brcc	.+12     	; 0x176c <xTaskCreate+0x204>
    1760:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <xTaskCreate+0x20a>
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	03 c0       	rjmp	.+6      	; 0x1772 <xTaskCreate+0x20a>
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <xTaskCreate+0x20a>
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	cf 90       	pop	r12
    1780:	bf 90       	pop	r11
    1782:	af 90       	pop	r10
    1784:	9f 90       	pop	r9
    1786:	8f 90       	pop	r8
    1788:	7f 90       	pop	r7
    178a:	6f 90       	pop	r6
    178c:	5f 90       	pop	r5
    178e:	4f 90       	pop	r4
    1790:	08 95       	ret

00001792 <vTaskStartScheduler>:
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	0f 2e       	mov	r0, r31
    179a:	f5 e2       	ldi	r31, 0x25	; 37
    179c:	ef 2e       	mov	r14, r31
    179e:	fc e2       	ldi	r31, 0x2C	; 44
    17a0:	ff 2e       	mov	r15, r31
    17a2:	f0 2d       	mov	r31, r0
    17a4:	00 e0       	ldi	r16, 0x00	; 0
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	48 ec       	ldi	r20, 0xC8	; 200
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	70 e2       	ldi	r23, 0x20	; 32
    17b2:	8a ea       	ldi	r24, 0xAA	; 170
    17b4:	9a e0       	ldi	r25, 0x0A	; 10
    17b6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xTaskCreate>
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	09 f5       	brne	.+66     	; 0x1800 <vTaskStartScheduler+0x6e>
    17be:	0e 94 0e 10 	call	0x201c	; 0x201c <xTimerCreateTimerTask>
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	e9 f4       	brne	.+58     	; 0x1800 <vTaskStartScheduler+0x6e>
    17c6:	e0 ea       	ldi	r30, 0xA0	; 160
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	88 7f       	andi	r24, 0xF8	; 248
    17ce:	82 83       	std	Z+2, r24	; 0x02
    17d0:	8f ef       	ldi	r24, 0xFF	; 255
    17d2:	9f ef       	ldi	r25, 0xFF	; 255
    17d4:	dc 01       	movw	r26, r24
    17d6:	80 93 27 2c 	sts	0x2C27, r24	; 0x802c27 <xNextTaskUnblockTime>
    17da:	90 93 28 2c 	sts	0x2C28, r25	; 0x802c28 <xNextTaskUnblockTime+0x1>
    17de:	a0 93 29 2c 	sts	0x2C29, r26	; 0x802c29 <xNextTaskUnblockTime+0x2>
    17e2:	b0 93 2a 2c 	sts	0x2C2A, r27	; 0x802c2a <xNextTaskUnblockTime+0x3>
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	80 93 2f 2c 	sts	0x2C2F, r24	; 0x802c2f <xSchedulerRunning>
    17ec:	10 92 31 2c 	sts	0x2C31, r1	; 0x802c31 <xTickCount>
    17f0:	10 92 32 2c 	sts	0x2C32, r1	; 0x802c32 <xTickCount+0x1>
    17f4:	10 92 33 2c 	sts	0x2C33, r1	; 0x802c33 <xTickCount+0x2>
    17f8:	10 92 34 2c 	sts	0x2C34, r1	; 0x802c34 <xTickCount+0x3>
    17fc:	0e 94 d5 05 	call	0xbaa	; 0xbaa <xPortStartScheduler>
    1800:	0f 91       	pop	r16
    1802:	ff 90       	pop	r15
    1804:	ef 90       	pop	r14
    1806:	08 95       	ret

00001808 <vTaskSuspendAll>:
    1808:	80 91 24 2c 	lds	r24, 0x2C24	; 0x802c24 <uxSchedulerSuspended>
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	80 93 24 2c 	sts	0x2C24, r24	; 0x802c24 <uxSchedulerSuspended>
    1812:	08 95       	ret

00001814 <xTaskGetTickCount>:
    1814:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1818:	ff 93       	push	r31
    181a:	f8 7f       	andi	r31, 0xF8	; 248
    181c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1820:	60 91 31 2c 	lds	r22, 0x2C31	; 0x802c31 <xTickCount>
    1824:	70 91 32 2c 	lds	r23, 0x2C32	; 0x802c32 <xTickCount+0x1>
    1828:	80 91 33 2c 	lds	r24, 0x2C33	; 0x802c33 <xTickCount+0x2>
    182c:	90 91 34 2c 	lds	r25, 0x2C34	; 0x802c34 <xTickCount+0x3>
    1830:	ff 91       	pop	r31
    1832:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1836:	08 95       	ret

00001838 <xTaskIncrementTick>:
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	80 91 24 2c 	lds	r24, 0x2C24	; 0x802c24 <uxSchedulerSuspended>
    1850:	81 11       	cpse	r24, r1
    1852:	ad c0       	rjmp	.+346    	; 0x19ae <xTaskIncrementTick+0x176>
    1854:	c0 90 31 2c 	lds	r12, 0x2C31	; 0x802c31 <xTickCount>
    1858:	d0 90 32 2c 	lds	r13, 0x2C32	; 0x802c32 <xTickCount+0x1>
    185c:	e0 90 33 2c 	lds	r14, 0x2C33	; 0x802c33 <xTickCount+0x2>
    1860:	f0 90 34 2c 	lds	r15, 0x2C34	; 0x802c34 <xTickCount+0x3>
    1864:	8f ef       	ldi	r24, 0xFF	; 255
    1866:	c8 1a       	sub	r12, r24
    1868:	d8 0a       	sbc	r13, r24
    186a:	e8 0a       	sbc	r14, r24
    186c:	f8 0a       	sbc	r15, r24
    186e:	c0 92 31 2c 	sts	0x2C31, r12	; 0x802c31 <xTickCount>
    1872:	d0 92 32 2c 	sts	0x2C32, r13	; 0x802c32 <xTickCount+0x1>
    1876:	e0 92 33 2c 	sts	0x2C33, r14	; 0x802c33 <xTickCount+0x2>
    187a:	f0 92 34 2c 	sts	0x2C34, r15	; 0x802c34 <xTickCount+0x3>
    187e:	c1 14       	cp	r12, r1
    1880:	d1 04       	cpc	r13, r1
    1882:	e1 04       	cpc	r14, r1
    1884:	f1 04       	cpc	r15, r1
    1886:	b9 f4       	brne	.+46     	; 0x18b6 <xTaskIncrementTick+0x7e>
    1888:	80 91 4e 2c 	lds	r24, 0x2C4E	; 0x802c4e <pxDelayedTaskList>
    188c:	90 91 4f 2c 	lds	r25, 0x2C4F	; 0x802c4f <pxDelayedTaskList+0x1>
    1890:	20 91 4c 2c 	lds	r18, 0x2C4C	; 0x802c4c <pxOverflowDelayedTaskList>
    1894:	30 91 4d 2c 	lds	r19, 0x2C4D	; 0x802c4d <pxOverflowDelayedTaskList+0x1>
    1898:	20 93 4e 2c 	sts	0x2C4E, r18	; 0x802c4e <pxDelayedTaskList>
    189c:	30 93 4f 2c 	sts	0x2C4F, r19	; 0x802c4f <pxDelayedTaskList+0x1>
    18a0:	80 93 4c 2c 	sts	0x2C4C, r24	; 0x802c4c <pxOverflowDelayedTaskList>
    18a4:	90 93 4d 2c 	sts	0x2C4D, r25	; 0x802c4d <pxOverflowDelayedTaskList+0x1>
    18a8:	80 91 2c 2c 	lds	r24, 0x2C2C	; 0x802c2c <xNumOfOverflows>
    18ac:	8f 5f       	subi	r24, 0xFF	; 255
    18ae:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <xNumOfOverflows>
    18b2:	0e 94 09 0a 	call	0x1412	; 0x1412 <prvResetNextTaskUnblockTime>
    18b6:	80 91 27 2c 	lds	r24, 0x2C27	; 0x802c27 <xNextTaskUnblockTime>
    18ba:	90 91 28 2c 	lds	r25, 0x2C28	; 0x802c28 <xNextTaskUnblockTime+0x1>
    18be:	a0 91 29 2c 	lds	r26, 0x2C29	; 0x802c29 <xNextTaskUnblockTime+0x2>
    18c2:	b0 91 2a 2c 	lds	r27, 0x2C2A	; 0x802c2a <xNextTaskUnblockTime+0x3>
    18c6:	c8 16       	cp	r12, r24
    18c8:	d9 06       	cpc	r13, r25
    18ca:	ea 06       	cpc	r14, r26
    18cc:	fb 06       	cpc	r15, r27
    18ce:	10 f4       	brcc	.+4      	; 0x18d4 <xTaskIncrementTick+0x9c>
    18d0:	b1 2c       	mov	r11, r1
    18d2:	5c c0       	rjmp	.+184    	; 0x198c <xTaskIncrementTick+0x154>
    18d4:	b1 2c       	mov	r11, r1
    18d6:	0f 2e       	mov	r0, r31
    18d8:	fb e0       	ldi	r31, 0x0B	; 11
    18da:	af 2e       	mov	r10, r31
    18dc:	f0 2d       	mov	r31, r0
    18de:	e0 91 4e 2c 	lds	r30, 0x2C4E	; 0x802c4e <pxDelayedTaskList>
    18e2:	f0 91 4f 2c 	lds	r31, 0x2C4F	; 0x802c4f <pxDelayedTaskList+0x1>
    18e6:	80 81       	ld	r24, Z
    18e8:	81 11       	cpse	r24, r1
    18ea:	0c c0       	rjmp	.+24     	; 0x1904 <xTaskIncrementTick+0xcc>
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	9f ef       	ldi	r25, 0xFF	; 255
    18f0:	dc 01       	movw	r26, r24
    18f2:	80 93 27 2c 	sts	0x2C27, r24	; 0x802c27 <xNextTaskUnblockTime>
    18f6:	90 93 28 2c 	sts	0x2C28, r25	; 0x802c28 <xNextTaskUnblockTime+0x1>
    18fa:	a0 93 29 2c 	sts	0x2C29, r26	; 0x802c29 <xNextTaskUnblockTime+0x2>
    18fe:	b0 93 2a 2c 	sts	0x2C2A, r27	; 0x802c2a <xNextTaskUnblockTime+0x3>
    1902:	44 c0       	rjmp	.+136    	; 0x198c <xTaskIncrementTick+0x154>
    1904:	e0 91 4e 2c 	lds	r30, 0x2C4E	; 0x802c4e <pxDelayedTaskList>
    1908:	f0 91 4f 2c 	lds	r31, 0x2C4F	; 0x802c4f <pxDelayedTaskList+0x1>
    190c:	07 80       	ldd	r0, Z+7	; 0x07
    190e:	f0 85       	ldd	r31, Z+8	; 0x08
    1910:	e0 2d       	mov	r30, r0
    1912:	c0 85       	ldd	r28, Z+8	; 0x08
    1914:	d1 85       	ldd	r29, Z+9	; 0x09
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	9b 81       	ldd	r25, Y+3	; 0x03
    191a:	ac 81       	ldd	r26, Y+4	; 0x04
    191c:	bd 81       	ldd	r27, Y+5	; 0x05
    191e:	c8 16       	cp	r12, r24
    1920:	d9 06       	cpc	r13, r25
    1922:	ea 06       	cpc	r14, r26
    1924:	fb 06       	cpc	r15, r27
    1926:	48 f4       	brcc	.+18     	; 0x193a <xTaskIncrementTick+0x102>
    1928:	80 93 27 2c 	sts	0x2C27, r24	; 0x802c27 <xNextTaskUnblockTime>
    192c:	90 93 28 2c 	sts	0x2C28, r25	; 0x802c28 <xNextTaskUnblockTime+0x1>
    1930:	a0 93 29 2c 	sts	0x2C29, r26	; 0x802c29 <xNextTaskUnblockTime+0x2>
    1934:	b0 93 2a 2c 	sts	0x2C2A, r27	; 0x802c2a <xNextTaskUnblockTime+0x3>
    1938:	29 c0       	rjmp	.+82     	; 0x198c <xTaskIncrementTick+0x154>
    193a:	8e 01       	movw	r16, r28
    193c:	0e 5f       	subi	r16, 0xFE	; 254
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	c8 01       	movw	r24, r16
    1942:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    1946:	88 8d       	ldd	r24, Y+24	; 0x18
    1948:	99 8d       	ldd	r25, Y+25	; 0x19
    194a:	89 2b       	or	r24, r25
    194c:	21 f0       	breq	.+8      	; 0x1956 <xTaskIncrementTick+0x11e>
    194e:	ce 01       	movw	r24, r28
    1950:	0e 96       	adiw	r24, 0x0e	; 14
    1952:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    1956:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1958:	90 91 30 2c 	lds	r25, 0x2C30	; 0x802c30 <uxTopReadyPriority>
    195c:	98 17       	cp	r25, r24
    195e:	10 f4       	brcc	.+4      	; 0x1964 <xTaskIncrementTick+0x12c>
    1960:	80 93 30 2c 	sts	0x2C30, r24	; 0x802c30 <uxTopReadyPriority>
    1964:	a8 9e       	mul	r10, r24
    1966:	c0 01       	movw	r24, r0
    1968:	11 24       	eor	r1, r1
    196a:	b8 01       	movw	r22, r16
    196c:	8a 59       	subi	r24, 0x9A	; 154
    196e:	93 4d       	sbci	r25, 0xD3	; 211
    1970:	0e 94 cc 04 	call	0x998	; 0x998 <vListInsertEnd>
    1974:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1978:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    197c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    197e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1980:	98 17       	cp	r25, r24
    1982:	08 f4       	brcc	.+2      	; 0x1986 <xTaskIncrementTick+0x14e>
    1984:	ac cf       	rjmp	.-168    	; 0x18de <xTaskIncrementTick+0xa6>
    1986:	bb 24       	eor	r11, r11
    1988:	b3 94       	inc	r11
    198a:	a9 cf       	rjmp	.-174    	; 0x18de <xTaskIncrementTick+0xa6>
    198c:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1990:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1994:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1996:	8b e0       	ldi	r24, 0x0B	; 11
    1998:	e8 9f       	mul	r30, r24
    199a:	f0 01       	movw	r30, r0
    199c:	11 24       	eor	r1, r1
    199e:	ea 59       	subi	r30, 0x9A	; 154
    19a0:	f3 4d       	sbci	r31, 0xD3	; 211
    19a2:	80 81       	ld	r24, Z
    19a4:	82 30       	cpi	r24, 0x02	; 2
    19a6:	48 f0       	brcs	.+18     	; 0x19ba <xTaskIncrementTick+0x182>
    19a8:	bb 24       	eor	r11, r11
    19aa:	b3 94       	inc	r11
    19ac:	06 c0       	rjmp	.+12     	; 0x19ba <xTaskIncrementTick+0x182>
    19ae:	80 91 2e 2c 	lds	r24, 0x2C2E	; 0x802c2e <uxPendedTicks>
    19b2:	8f 5f       	subi	r24, 0xFF	; 255
    19b4:	80 93 2e 2c 	sts	0x2C2E, r24	; 0x802c2e <uxPendedTicks>
    19b8:	b1 2c       	mov	r11, r1
    19ba:	80 91 2d 2c 	lds	r24, 0x2C2D	; 0x802c2d <xYieldPending>
    19be:	88 23       	and	r24, r24
    19c0:	11 f0       	breq	.+4      	; 0x19c6 <xTaskIncrementTick+0x18e>
    19c2:	bb 24       	eor	r11, r11
    19c4:	b3 94       	inc	r11
    19c6:	8b 2d       	mov	r24, r11
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	cf 90       	pop	r12
    19d8:	bf 90       	pop	r11
    19da:	af 90       	pop	r10
    19dc:	08 95       	ret

000019de <xTaskResumeAll>:
    19de:	cf 92       	push	r12
    19e0:	df 92       	push	r13
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19f2:	ff 93       	push	r31
    19f4:	f8 7f       	andi	r31, 0xF8	; 248
    19f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19fa:	80 91 24 2c 	lds	r24, 0x2C24	; 0x802c24 <uxSchedulerSuspended>
    19fe:	81 50       	subi	r24, 0x01	; 1
    1a00:	80 93 24 2c 	sts	0x2C24, r24	; 0x802c24 <uxSchedulerSuspended>
    1a04:	80 91 24 2c 	lds	r24, 0x2C24	; 0x802c24 <uxSchedulerSuspended>
    1a08:	81 11       	cpse	r24, r1
    1a0a:	5c c0       	rjmp	.+184    	; 0x1ac4 <xTaskResumeAll+0xe6>
    1a0c:	80 91 35 2c 	lds	r24, 0x2C35	; 0x802c35 <uxCurrentNumberOfTasks>
    1a10:	81 11       	cpse	r24, r1
    1a12:	2c c0       	rjmp	.+88     	; 0x1a6c <xTaskResumeAll+0x8e>
    1a14:	5a c0       	rjmp	.+180    	; 0x1aca <xTaskResumeAll+0xec>
    1a16:	d7 01       	movw	r26, r14
    1a18:	17 96       	adiw	r26, 0x07	; 7
    1a1a:	ed 91       	ld	r30, X+
    1a1c:	fc 91       	ld	r31, X
    1a1e:	18 97       	sbiw	r26, 0x08	; 8
    1a20:	c0 85       	ldd	r28, Z+8	; 0x08
    1a22:	d1 85       	ldd	r29, Z+9	; 0x09
    1a24:	ce 01       	movw	r24, r28
    1a26:	0e 96       	adiw	r24, 0x0e	; 14
    1a28:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    1a2c:	8e 01       	movw	r16, r28
    1a2e:	0e 5f       	subi	r16, 0xFE	; 254
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	c8 01       	movw	r24, r16
    1a34:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    1a38:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a3a:	90 91 30 2c 	lds	r25, 0x2C30	; 0x802c30 <uxTopReadyPriority>
    1a3e:	98 17       	cp	r25, r24
    1a40:	10 f4       	brcc	.+4      	; 0x1a46 <xTaskResumeAll+0x68>
    1a42:	80 93 30 2c 	sts	0x2C30, r24	; 0x802c30 <uxTopReadyPriority>
    1a46:	d8 9e       	mul	r13, r24
    1a48:	c0 01       	movw	r24, r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	b8 01       	movw	r22, r16
    1a4e:	8a 59       	subi	r24, 0x9A	; 154
    1a50:	93 4d       	sbci	r25, 0xD3	; 211
    1a52:	0e 94 cc 04 	call	0x998	; 0x998 <vListInsertEnd>
    1a56:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1a5a:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1a5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a60:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a62:	98 17       	cp	r25, r24
    1a64:	88 f0       	brcs	.+34     	; 0x1a88 <xTaskResumeAll+0xaa>
    1a66:	c0 92 2d 2c 	sts	0x2C2D, r12	; 0x802c2d <xYieldPending>
    1a6a:	0e c0       	rjmp	.+28     	; 0x1a88 <xTaskResumeAll+0xaa>
    1a6c:	c0 e0       	ldi	r28, 0x00	; 0
    1a6e:	d0 e0       	ldi	r29, 0x00	; 0
    1a70:	0f 2e       	mov	r0, r31
    1a72:	f1 e4       	ldi	r31, 0x41	; 65
    1a74:	ef 2e       	mov	r14, r31
    1a76:	fc e2       	ldi	r31, 0x2C	; 44
    1a78:	ff 2e       	mov	r15, r31
    1a7a:	f0 2d       	mov	r31, r0
    1a7c:	0f 2e       	mov	r0, r31
    1a7e:	fb e0       	ldi	r31, 0x0B	; 11
    1a80:	df 2e       	mov	r13, r31
    1a82:	f0 2d       	mov	r31, r0
    1a84:	cc 24       	eor	r12, r12
    1a86:	c3 94       	inc	r12
    1a88:	f7 01       	movw	r30, r14
    1a8a:	80 81       	ld	r24, Z
    1a8c:	81 11       	cpse	r24, r1
    1a8e:	c3 cf       	rjmp	.-122    	; 0x1a16 <xTaskResumeAll+0x38>
    1a90:	cd 2b       	or	r28, r29
    1a92:	11 f0       	breq	.+4      	; 0x1a98 <xTaskResumeAll+0xba>
    1a94:	0e 94 09 0a 	call	0x1412	; 0x1412 <prvResetNextTaskUnblockTime>
    1a98:	c0 91 2e 2c 	lds	r28, 0x2C2E	; 0x802c2e <uxPendedTicks>
    1a9c:	cc 23       	and	r28, r28
    1a9e:	51 f0       	breq	.+20     	; 0x1ab4 <xTaskResumeAll+0xd6>
    1aa0:	d1 e0       	ldi	r29, 0x01	; 1
    1aa2:	0e 94 1c 0c 	call	0x1838	; 0x1838 <xTaskIncrementTick>
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	d0 93 2d 2c 	sts	0x2C2D, r29	; 0x802c2d <xYieldPending>
    1aac:	c1 50       	subi	r28, 0x01	; 1
    1aae:	c9 f7       	brne	.-14     	; 0x1aa2 <xTaskResumeAll+0xc4>
    1ab0:	10 92 2e 2c 	sts	0x2C2E, r1	; 0x802c2e <uxPendedTicks>
    1ab4:	80 91 2d 2c 	lds	r24, 0x2C2D	; 0x802c2d <xYieldPending>
    1ab8:	88 23       	and	r24, r24
    1aba:	31 f0       	breq	.+12     	; 0x1ac8 <xTaskResumeAll+0xea>
    1abc:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	03 c0       	rjmp	.+6      	; 0x1aca <xTaskResumeAll+0xec>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <xTaskResumeAll+0xec>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	ff 91       	pop	r31
    1acc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	ff 90       	pop	r15
    1ada:	ef 90       	pop	r14
    1adc:	df 90       	pop	r13
    1ade:	cf 90       	pop	r12
    1ae0:	08 95       	ret

00001ae2 <vTaskDelay>:
    1ae2:	cf 92       	push	r12
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	6b 01       	movw	r12, r22
    1aec:	7c 01       	movw	r14, r24
    1aee:	67 2b       	or	r22, r23
    1af0:	68 2b       	or	r22, r24
    1af2:	69 2b       	or	r22, r25
    1af4:	59 f0       	breq	.+22     	; 0x1b0c <vTaskDelay+0x2a>
    1af6:	0e 94 04 0c 	call	0x1808	; 0x1808 <vTaskSuspendAll>
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	c7 01       	movw	r24, r14
    1afe:	b6 01       	movw	r22, r12
    1b00:	0e 94 33 0a 	call	0x1466	; 0x1466 <prvAddCurrentTaskToDelayedList>
    1b04:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
    1b08:	81 11       	cpse	r24, r1
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <vTaskDelay+0x2e>
    1b0c:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
    1b10:	ff 90       	pop	r15
    1b12:	ef 90       	pop	r14
    1b14:	df 90       	pop	r13
    1b16:	cf 90       	pop	r12
    1b18:	08 95       	ret

00001b1a <vTaskSwitchContext>:
    1b1a:	80 91 24 2c 	lds	r24, 0x2C24	; 0x802c24 <uxSchedulerSuspended>
    1b1e:	88 23       	and	r24, r24
    1b20:	21 f0       	breq	.+8      	; 0x1b2a <vTaskSwitchContext+0x10>
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	80 93 2d 2c 	sts	0x2C2D, r24	; 0x802c2d <xYieldPending>
    1b28:	08 95       	ret
    1b2a:	10 92 2d 2c 	sts	0x2C2D, r1	; 0x802c2d <xYieldPending>
    1b2e:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1b32:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1b36:	03 8c       	ldd	r0, Z+27	; 0x1b
    1b38:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1b3a:	e0 2d       	mov	r30, r0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	91 81       	ldd	r25, Z+1	; 0x01
    1b40:	a2 81       	ldd	r26, Z+2	; 0x02
    1b42:	b3 81       	ldd	r27, Z+3	; 0x03
    1b44:	85 3a       	cpi	r24, 0xA5	; 165
    1b46:	95 4a       	sbci	r25, 0xA5	; 165
    1b48:	a5 4a       	sbci	r26, 0xA5	; 165
    1b4a:	b5 4a       	sbci	r27, 0xA5	; 165
    1b4c:	d9 f4       	brne	.+54     	; 0x1b84 <vTaskSwitchContext+0x6a>
    1b4e:	84 81       	ldd	r24, Z+4	; 0x04
    1b50:	95 81       	ldd	r25, Z+5	; 0x05
    1b52:	a6 81       	ldd	r26, Z+6	; 0x06
    1b54:	b7 81       	ldd	r27, Z+7	; 0x07
    1b56:	85 3a       	cpi	r24, 0xA5	; 165
    1b58:	95 4a       	sbci	r25, 0xA5	; 165
    1b5a:	a5 4a       	sbci	r26, 0xA5	; 165
    1b5c:	b5 4a       	sbci	r27, 0xA5	; 165
    1b5e:	91 f4       	brne	.+36     	; 0x1b84 <vTaskSwitchContext+0x6a>
    1b60:	80 85       	ldd	r24, Z+8	; 0x08
    1b62:	91 85       	ldd	r25, Z+9	; 0x09
    1b64:	a2 85       	ldd	r26, Z+10	; 0x0a
    1b66:	b3 85       	ldd	r27, Z+11	; 0x0b
    1b68:	85 3a       	cpi	r24, 0xA5	; 165
    1b6a:	95 4a       	sbci	r25, 0xA5	; 165
    1b6c:	a5 4a       	sbci	r26, 0xA5	; 165
    1b6e:	b5 4a       	sbci	r27, 0xA5	; 165
    1b70:	49 f4       	brne	.+18     	; 0x1b84 <vTaskSwitchContext+0x6a>
    1b72:	84 85       	ldd	r24, Z+12	; 0x0c
    1b74:	95 85       	ldd	r25, Z+13	; 0x0d
    1b76:	a6 85       	ldd	r26, Z+14	; 0x0e
    1b78:	b7 85       	ldd	r27, Z+15	; 0x0f
    1b7a:	85 3a       	cpi	r24, 0xA5	; 165
    1b7c:	95 4a       	sbci	r25, 0xA5	; 165
    1b7e:	a5 4a       	sbci	r26, 0xA5	; 165
    1b80:	b5 4a       	sbci	r27, 0xA5	; 165
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <vTaskSwitchContext+0x82>
    1b84:	60 91 92 2c 	lds	r22, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1b88:	70 91 93 2c 	lds	r23, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1b8c:	80 91 92 2c 	lds	r24, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1b90:	90 91 93 2c 	lds	r25, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1b94:	63 5e       	subi	r22, 0xE3	; 227
    1b96:	7f 4f       	sbci	r23, 0xFF	; 255
    1b98:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <vApplicationStackOverflowHook>
    1b9c:	80 91 30 2c 	lds	r24, 0x2C30	; 0x802c30 <uxTopReadyPriority>
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	9b e0       	ldi	r25, 0x0B	; 11
    1ba6:	89 9f       	mul	r24, r25
    1ba8:	f0 01       	movw	r30, r0
    1baa:	11 24       	eor	r1, r1
    1bac:	ea 59       	subi	r30, 0x9A	; 154
    1bae:	f3 4d       	sbci	r31, 0xD3	; 211
    1bb0:	90 81       	ld	r25, Z
    1bb2:	91 11       	cpse	r25, r1
    1bb4:	0e c0       	rjmp	.+28     	; 0x1bd2 <vTaskSwitchContext+0xb8>
    1bb6:	4b e0       	ldi	r20, 0x0B	; 11
    1bb8:	81 50       	subi	r24, 0x01	; 1
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	42 9f       	mul	r20, r18
    1bc0:	f0 01       	movw	r30, r0
    1bc2:	43 9f       	mul	r20, r19
    1bc4:	f0 0d       	add	r31, r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	ea 59       	subi	r30, 0x9A	; 154
    1bca:	f3 4d       	sbci	r31, 0xD3	; 211
    1bcc:	90 81       	ld	r25, Z
    1bce:	99 23       	and	r25, r25
    1bd0:	99 f3       	breq	.-26     	; 0x1bb8 <vTaskSwitchContext+0x9e>
    1bd2:	9b e0       	ldi	r25, 0x0B	; 11
    1bd4:	92 9f       	mul	r25, r18
    1bd6:	a0 01       	movw	r20, r0
    1bd8:	93 9f       	mul	r25, r19
    1bda:	50 0d       	add	r21, r0
    1bdc:	11 24       	eor	r1, r1
    1bde:	da 01       	movw	r26, r20
    1be0:	aa 59       	subi	r26, 0x9A	; 154
    1be2:	b3 4d       	sbci	r27, 0xD3	; 211
    1be4:	11 96       	adiw	r26, 0x01	; 1
    1be6:	ed 91       	ld	r30, X+
    1be8:	fc 91       	ld	r31, X
    1bea:	12 97       	sbiw	r26, 0x02	; 2
    1bec:	04 80       	ldd	r0, Z+4	; 0x04
    1bee:	f5 81       	ldd	r31, Z+5	; 0x05
    1bf0:	e0 2d       	mov	r30, r0
    1bf2:	11 96       	adiw	r26, 0x01	; 1
    1bf4:	ed 93       	st	X+, r30
    1bf6:	fc 93       	st	X, r31
    1bf8:	12 97       	sbiw	r26, 0x02	; 2
    1bfa:	47 59       	subi	r20, 0x97	; 151
    1bfc:	53 4d       	sbci	r21, 0xD3	; 211
    1bfe:	e4 17       	cp	r30, r20
    1c00:	f5 07       	cpc	r31, r21
    1c02:	29 f4       	brne	.+10     	; 0x1c0e <vTaskSwitchContext+0xf4>
    1c04:	44 81       	ldd	r20, Z+4	; 0x04
    1c06:	55 81       	ldd	r21, Z+5	; 0x05
    1c08:	fd 01       	movw	r30, r26
    1c0a:	41 83       	std	Z+1, r20	; 0x01
    1c0c:	52 83       	std	Z+2, r21	; 0x02
    1c0e:	9b e0       	ldi	r25, 0x0B	; 11
    1c10:	92 9f       	mul	r25, r18
    1c12:	f0 01       	movw	r30, r0
    1c14:	93 9f       	mul	r25, r19
    1c16:	f0 0d       	add	r31, r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	ea 59       	subi	r30, 0x9A	; 154
    1c1c:	f3 4d       	sbci	r31, 0xD3	; 211
    1c1e:	01 80       	ldd	r0, Z+1	; 0x01
    1c20:	f2 81       	ldd	r31, Z+2	; 0x02
    1c22:	e0 2d       	mov	r30, r0
    1c24:	20 85       	ldd	r18, Z+8	; 0x08
    1c26:	31 85       	ldd	r19, Z+9	; 0x09
    1c28:	20 93 92 2c 	sts	0x2C92, r18	; 0x802c92 <pxCurrentTCB>
    1c2c:	30 93 93 2c 	sts	0x2C93, r19	; 0x802c93 <pxCurrentTCB+0x1>
    1c30:	80 93 30 2c 	sts	0x2C30, r24	; 0x802c30 <uxTopReadyPriority>
    1c34:	08 95       	ret

00001c36 <vTaskPlaceOnEventList>:
    1c36:	cf 92       	push	r12
    1c38:	df 92       	push	r13
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	6a 01       	movw	r12, r20
    1c40:	7b 01       	movw	r14, r22
    1c42:	60 91 92 2c 	lds	r22, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1c46:	70 91 93 2c 	lds	r23, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1c4a:	62 5f       	subi	r22, 0xF2	; 242
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>
    1c52:	41 e0       	ldi	r20, 0x01	; 1
    1c54:	c7 01       	movw	r24, r14
    1c56:	b6 01       	movw	r22, r12
    1c58:	0e 94 33 0a 	call	0x1466	; 0x1466 <prvAddCurrentTaskToDelayedList>
    1c5c:	ff 90       	pop	r15
    1c5e:	ef 90       	pop	r14
    1c60:	df 90       	pop	r13
    1c62:	cf 90       	pop	r12
    1c64:	08 95       	ret

00001c66 <vTaskPlaceOnUnorderedEventList>:
    1c66:	cf 92       	push	r12
    1c68:	df 92       	push	r13
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	68 01       	movw	r12, r16
    1c74:	79 01       	movw	r14, r18
    1c76:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1c7a:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1c7e:	70 68       	ori	r23, 0x80	; 128
    1c80:	46 87       	std	Z+14, r20	; 0x0e
    1c82:	57 87       	std	Z+15, r21	; 0x0f
    1c84:	60 8b       	std	Z+16, r22	; 0x10
    1c86:	71 8b       	std	Z+17, r23	; 0x11
    1c88:	60 91 92 2c 	lds	r22, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1c8c:	70 91 93 2c 	lds	r23, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1c90:	62 5f       	subi	r22, 0xF2	; 242
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255
    1c94:	0e 94 cc 04 	call	0x998	; 0x998 <vListInsertEnd>
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	c7 01       	movw	r24, r14
    1c9c:	b6 01       	movw	r22, r12
    1c9e:	0e 94 33 0a 	call	0x1466	; 0x1466 <prvAddCurrentTaskToDelayedList>
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	cf 90       	pop	r12
    1cae:	08 95       	ret

00001cb0 <vTaskPlaceOnEventListRestricted>:
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	cf 93       	push	r28
    1cba:	6a 01       	movw	r12, r20
    1cbc:	7b 01       	movw	r14, r22
    1cbe:	c2 2f       	mov	r28, r18
    1cc0:	60 91 92 2c 	lds	r22, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1cc4:	70 91 93 2c 	lds	r23, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1cc8:	62 5f       	subi	r22, 0xF2	; 242
    1cca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ccc:	0e 94 cc 04 	call	0x998	; 0x998 <vListInsertEnd>
    1cd0:	cc 23       	and	r28, r28
    1cd2:	21 f0       	breq	.+8      	; 0x1cdc <vTaskPlaceOnEventListRestricted+0x2c>
    1cd4:	cc 24       	eor	r12, r12
    1cd6:	ca 94       	dec	r12
    1cd8:	dc 2c       	mov	r13, r12
    1cda:	76 01       	movw	r14, r12
    1cdc:	4c 2f       	mov	r20, r28
    1cde:	c7 01       	movw	r24, r14
    1ce0:	b6 01       	movw	r22, r12
    1ce2:	0e 94 33 0a 	call	0x1466	; 0x1466 <prvAddCurrentTaskToDelayedList>
    1ce6:	cf 91       	pop	r28
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
    1cf0:	08 95       	ret

00001cf2 <xTaskRemoveFromEventList>:
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	17 96       	adiw	r26, 0x07	; 7
    1cfe:	ed 91       	ld	r30, X+
    1d00:	fc 91       	ld	r31, X
    1d02:	18 97       	sbiw	r26, 0x08	; 8
    1d04:	c0 85       	ldd	r28, Z+8	; 0x08
    1d06:	d1 85       	ldd	r29, Z+9	; 0x09
    1d08:	8e 01       	movw	r16, r28
    1d0a:	02 5f       	subi	r16, 0xF2	; 242
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0e:	c8 01       	movw	r24, r16
    1d10:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    1d14:	80 91 24 2c 	lds	r24, 0x2C24	; 0x802c24 <uxSchedulerSuspended>
    1d18:	81 11       	cpse	r24, r1
    1d1a:	16 c0       	rjmp	.+44     	; 0x1d48 <xTaskRemoveFromEventList+0x56>
    1d1c:	0c 50       	subi	r16, 0x0C	; 12
    1d1e:	11 09       	sbc	r17, r1
    1d20:	c8 01       	movw	r24, r16
    1d22:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    1d26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d28:	90 91 30 2c 	lds	r25, 0x2C30	; 0x802c30 <uxTopReadyPriority>
    1d2c:	98 17       	cp	r25, r24
    1d2e:	10 f4       	brcc	.+4      	; 0x1d34 <xTaskRemoveFromEventList+0x42>
    1d30:	80 93 30 2c 	sts	0x2C30, r24	; 0x802c30 <uxTopReadyPriority>
    1d34:	bb e0       	ldi	r27, 0x0B	; 11
    1d36:	8b 9f       	mul	r24, r27
    1d38:	c0 01       	movw	r24, r0
    1d3a:	11 24       	eor	r1, r1
    1d3c:	b8 01       	movw	r22, r16
    1d3e:	8a 59       	subi	r24, 0x9A	; 154
    1d40:	93 4d       	sbci	r25, 0xD3	; 211
    1d42:	0e 94 cc 04 	call	0x998	; 0x998 <vListInsertEnd>
    1d46:	05 c0       	rjmp	.+10     	; 0x1d52 <xTaskRemoveFromEventList+0x60>
    1d48:	b8 01       	movw	r22, r16
    1d4a:	81 e4       	ldi	r24, 0x41	; 65
    1d4c:	9c e2       	ldi	r25, 0x2C	; 44
    1d4e:	0e 94 cc 04 	call	0x998	; 0x998 <vListInsertEnd>
    1d52:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1d56:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1d5a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d5e:	89 17       	cp	r24, r25
    1d60:	20 f4       	brcc	.+8      	; 0x1d6a <xTaskRemoveFromEventList+0x78>
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	80 93 2d 2c 	sts	0x2C2D, r24	; 0x802c2d <xYieldPending>
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <xTaskRemoveFromEventList+0x7a>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	1f 91       	pop	r17
    1d72:	0f 91       	pop	r16
    1d74:	08 95       	ret

00001d76 <vTaskRemoveFromUnorderedEventList>:
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	70 68       	ori	r23, 0x80	; 128
    1d80:	fc 01       	movw	r30, r24
    1d82:	40 83       	st	Z, r20
    1d84:	51 83       	std	Z+1, r21	; 0x01
    1d86:	62 83       	std	Z+2, r22	; 0x02
    1d88:	73 83       	std	Z+3, r23	; 0x03
    1d8a:	c0 85       	ldd	r28, Z+8	; 0x08
    1d8c:	d1 85       	ldd	r29, Z+9	; 0x09
    1d8e:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    1d92:	8e 01       	movw	r16, r28
    1d94:	0e 5f       	subi	r16, 0xFE	; 254
    1d96:	1f 4f       	sbci	r17, 0xFF	; 255
    1d98:	c8 01       	movw	r24, r16
    1d9a:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    1d9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1da0:	90 91 30 2c 	lds	r25, 0x2C30	; 0x802c30 <uxTopReadyPriority>
    1da4:	98 17       	cp	r25, r24
    1da6:	10 f4       	brcc	.+4      	; 0x1dac <vTaskRemoveFromUnorderedEventList+0x36>
    1da8:	80 93 30 2c 	sts	0x2C30, r24	; 0x802c30 <uxTopReadyPriority>
    1dac:	fb e0       	ldi	r31, 0x0B	; 11
    1dae:	8f 9f       	mul	r24, r31
    1db0:	c0 01       	movw	r24, r0
    1db2:	11 24       	eor	r1, r1
    1db4:	b8 01       	movw	r22, r16
    1db6:	8a 59       	subi	r24, 0x9A	; 154
    1db8:	93 4d       	sbci	r25, 0xD3	; 211
    1dba:	0e 94 cc 04 	call	0x998	; 0x998 <vListInsertEnd>
    1dbe:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1dc2:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1dc6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1dc8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dca:	89 17       	cp	r24, r25
    1dcc:	18 f4       	brcc	.+6      	; 0x1dd4 <vTaskRemoveFromUnorderedEventList+0x5e>
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	80 93 2d 2c 	sts	0x2C2D, r24	; 0x802c2d <xYieldPending>
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <vTaskInternalSetTimeOutState>:
    1dde:	20 91 2c 2c 	lds	r18, 0x2C2C	; 0x802c2c <xNumOfOverflows>
    1de2:	fc 01       	movw	r30, r24
    1de4:	20 83       	st	Z, r18
    1de6:	40 91 31 2c 	lds	r20, 0x2C31	; 0x802c31 <xTickCount>
    1dea:	50 91 32 2c 	lds	r21, 0x2C32	; 0x802c32 <xTickCount+0x1>
    1dee:	60 91 33 2c 	lds	r22, 0x2C33	; 0x802c33 <xTickCount+0x2>
    1df2:	70 91 34 2c 	lds	r23, 0x2C34	; 0x802c34 <xTickCount+0x3>
    1df6:	41 83       	std	Z+1, r20	; 0x01
    1df8:	52 83       	std	Z+2, r21	; 0x02
    1dfa:	63 83       	std	Z+3, r22	; 0x03
    1dfc:	74 83       	std	Z+4, r23	; 0x04
    1dfe:	08 95       	ret

00001e00 <xTaskCheckForTimeOut>:
    1e00:	cf 92       	push	r12
    1e02:	df 92       	push	r13
    1e04:	ef 92       	push	r14
    1e06:	ff 92       	push	r15
    1e08:	0f 93       	push	r16
    1e0a:	1f 93       	push	r17
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	db 01       	movw	r26, r22
    1e12:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e16:	ff 93       	push	r31
    1e18:	f8 7f       	andi	r31, 0xF8	; 248
    1e1a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e1e:	40 91 31 2c 	lds	r20, 0x2C31	; 0x802c31 <xTickCount>
    1e22:	50 91 32 2c 	lds	r21, 0x2C32	; 0x802c32 <xTickCount+0x1>
    1e26:	60 91 33 2c 	lds	r22, 0x2C33	; 0x802c33 <xTickCount+0x2>
    1e2a:	70 91 34 2c 	lds	r23, 0x2C34	; 0x802c34 <xTickCount+0x3>
    1e2e:	0d 91       	ld	r16, X+
    1e30:	1d 91       	ld	r17, X+
    1e32:	2d 91       	ld	r18, X+
    1e34:	3c 91       	ld	r19, X
    1e36:	13 97       	sbiw	r26, 0x03	; 3
    1e38:	0f 3f       	cpi	r16, 0xFF	; 255
    1e3a:	cf ef       	ldi	r28, 0xFF	; 255
    1e3c:	1c 07       	cpc	r17, r28
    1e3e:	2c 07       	cpc	r18, r28
    1e40:	3c 07       	cpc	r19, r28
    1e42:	69 f1       	breq	.+90     	; 0x1e9e <xTaskCheckForTimeOut+0x9e>
    1e44:	fc 01       	movw	r30, r24
    1e46:	c1 80       	ldd	r12, Z+1	; 0x01
    1e48:	d2 80       	ldd	r13, Z+2	; 0x02
    1e4a:	e3 80       	ldd	r14, Z+3	; 0x03
    1e4c:	f4 80       	ldd	r15, Z+4	; 0x04
    1e4e:	e0 91 2c 2c 	lds	r30, 0x2C2C	; 0x802c2c <xNumOfOverflows>
    1e52:	ec 01       	movw	r28, r24
    1e54:	f8 81       	ld	r31, Y
    1e56:	fe 17       	cp	r31, r30
    1e58:	29 f0       	breq	.+10     	; 0x1e64 <xTaskCheckForTimeOut+0x64>
    1e5a:	4c 15       	cp	r20, r12
    1e5c:	5d 05       	cpc	r21, r13
    1e5e:	6e 05       	cpc	r22, r14
    1e60:	7f 05       	cpc	r23, r15
    1e62:	f8 f4       	brcc	.+62     	; 0x1ea2 <xTaskCheckForTimeOut+0xa2>
    1e64:	4c 19       	sub	r20, r12
    1e66:	5d 09       	sbc	r21, r13
    1e68:	6e 09       	sbc	r22, r14
    1e6a:	7f 09       	sbc	r23, r15
    1e6c:	40 17       	cp	r20, r16
    1e6e:	51 07       	cpc	r21, r17
    1e70:	62 07       	cpc	r22, r18
    1e72:	73 07       	cpc	r23, r19
    1e74:	68 f4       	brcc	.+26     	; 0x1e90 <xTaskCheckForTimeOut+0x90>
    1e76:	fd 01       	movw	r30, r26
    1e78:	04 1b       	sub	r16, r20
    1e7a:	15 0b       	sbc	r17, r21
    1e7c:	26 0b       	sbc	r18, r22
    1e7e:	37 0b       	sbc	r19, r23
    1e80:	00 83       	st	Z, r16
    1e82:	11 83       	std	Z+1, r17	; 0x01
    1e84:	22 83       	std	Z+2, r18	; 0x02
    1e86:	33 83       	std	Z+3, r19	; 0x03
    1e88:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <vTaskInternalSetTimeOutState>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	0a c0       	rjmp	.+20     	; 0x1ea4 <xTaskCheckForTimeOut+0xa4>
    1e90:	1d 92       	st	X+, r1
    1e92:	1d 92       	st	X+, r1
    1e94:	1d 92       	st	X+, r1
    1e96:	1c 92       	st	X, r1
    1e98:	13 97       	sbiw	r26, 0x03	; 3
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	03 c0       	rjmp	.+6      	; 0x1ea4 <xTaskCheckForTimeOut+0xa4>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	01 c0       	rjmp	.+2      	; 0x1ea4 <xTaskCheckForTimeOut+0xa4>
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	ff 91       	pop	r31
    1ea6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	ff 90       	pop	r15
    1eb4:	ef 90       	pop	r14
    1eb6:	df 90       	pop	r13
    1eb8:	cf 90       	pop	r12
    1eba:	08 95       	ret

00001ebc <vTaskMissedYield>:
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	80 93 2d 2c 	sts	0x2C2D, r24	; 0x802c2d <xYieldPending>
    1ec2:	08 95       	ret

00001ec4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1ec4:	80 91 2f 2c 	lds	r24, 0x2C2F	; 0x802c2f <xSchedulerRunning>
    1ec8:	88 23       	and	r24, r24
    1eca:	31 f0       	breq	.+12     	; 0x1ed8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1ecc:	80 91 24 2c 	lds	r24, 0x2C24	; 0x802c24 <uxSchedulerSuspended>
    1ed0:	88 23       	and	r24, r24
    1ed2:	21 f0       	breq	.+8      	; 0x1edc <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    1edc:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    1ede:	08 95       	ret

00001ee0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1ee0:	cf 92       	push	r12
    1ee2:	df 92       	push	r13
    1ee4:	ef 92       	push	r14
    1ee6:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1ee8:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1eec:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1ef0:	66 85       	ldd	r22, Z+14	; 0x0e
    1ef2:	77 85       	ldd	r23, Z+15	; 0x0f
    1ef4:	80 89       	ldd	r24, Z+16	; 0x10
    1ef6:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1ef8:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1efc:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1f00:	a0 91 92 2c 	lds	r26, 0x2C92	; 0x802c92 <pxCurrentTCB>
    1f04:	b0 91 93 2c 	lds	r27, 0x2C93	; 0x802c93 <pxCurrentTCB+0x1>
    1f08:	5a 96       	adiw	r26, 0x1a	; 26
    1f0a:	2c 91       	ld	r18, X
    1f0c:	c1 2c       	mov	r12, r1
    1f0e:	d1 2c       	mov	r13, r1
    1f10:	76 01       	movw	r14, r12
    1f12:	68 94       	set
    1f14:	c2 f8       	bld	r12, 2
    1f16:	c2 1a       	sub	r12, r18
    1f18:	d1 08       	sbc	r13, r1
    1f1a:	e1 08       	sbc	r14, r1
    1f1c:	f1 08       	sbc	r15, r1
    1f1e:	c6 86       	std	Z+14, r12	; 0x0e
    1f20:	d7 86       	std	Z+15, r13	; 0x0f
    1f22:	e0 8a       	std	Z+16, r14	; 0x10
    1f24:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	df 90       	pop	r13
    1f2c:	cf 90       	pop	r12
    1f2e:	08 95       	ret

00001f30 <prvInsertTimerInActiveList>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1f30:	cf 92       	push	r12
    1f32:	df 92       	push	r13
    1f34:	ef 92       	push	r14
    1f36:	ff 92       	push	r15
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	42 83       	std	Z+2, r20	; 0x02
    1f40:	53 83       	std	Z+3, r21	; 0x03
    1f42:	64 83       	std	Z+4, r22	; 0x04
    1f44:	75 83       	std	Z+5, r23	; 0x05
    1f46:	82 87       	std	Z+10, r24	; 0x0a
    1f48:	93 87       	std	Z+11, r25	; 0x0b
    1f4a:	04 17       	cp	r16, r20
    1f4c:	15 07       	cpc	r17, r21
    1f4e:	26 07       	cpc	r18, r22
    1f50:	37 07       	cpc	r19, r23
    1f52:	c0 f0       	brcs	.+48     	; 0x1f84 <prvInsertTimerInActiveList+0x54>
    1f54:	0c 19       	sub	r16, r12
    1f56:	1d 09       	sbc	r17, r13
    1f58:	2e 09       	sbc	r18, r14
    1f5a:	3f 09       	sbc	r19, r15
    1f5c:	86 85       	ldd	r24, Z+14	; 0x0e
    1f5e:	97 85       	ldd	r25, Z+15	; 0x0f
    1f60:	a0 89       	ldd	r26, Z+16	; 0x10
    1f62:	b1 89       	ldd	r27, Z+17	; 0x11
    1f64:	08 17       	cp	r16, r24
    1f66:	19 07       	cpc	r17, r25
    1f68:	2a 07       	cpc	r18, r26
    1f6a:	3b 07       	cpc	r19, r27
    1f6c:	00 f5       	brcc	.+64     	; 0x1fae <prvInsertTimerInActiveList+0x7e>
    1f6e:	bf 01       	movw	r22, r30
    1f70:	6e 5f       	subi	r22, 0xFE	; 254
    1f72:	7f 4f       	sbci	r23, 0xFF	; 255
    1f74:	80 91 9c 2c 	lds	r24, 0x2C9C	; 0x802c9c <pxOverflowTimerList>
    1f78:	90 91 9d 2c 	lds	r25, 0x2C9D	; 0x802c9d <pxOverflowTimerList+0x1>
    1f7c:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	18 c0       	rjmp	.+48     	; 0x1fb4 <prvInsertTimerInActiveList+0x84>
    1f84:	0c 15       	cp	r16, r12
    1f86:	1d 05       	cpc	r17, r13
    1f88:	2e 05       	cpc	r18, r14
    1f8a:	3f 05       	cpc	r19, r15
    1f8c:	28 f4       	brcc	.+10     	; 0x1f98 <prvInsertTimerInActiveList+0x68>
    1f8e:	4c 15       	cp	r20, r12
    1f90:	5d 05       	cpc	r21, r13
    1f92:	6e 05       	cpc	r22, r14
    1f94:	7f 05       	cpc	r23, r15
    1f96:	68 f4       	brcc	.+26     	; 0x1fb2 <prvInsertTimerInActiveList+0x82>
    1f98:	bf 01       	movw	r22, r30
    1f9a:	6e 5f       	subi	r22, 0xFE	; 254
    1f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9e:	80 91 9e 2c 	lds	r24, 0x2C9E	; 0x802c9e <pxCurrentTimerList>
    1fa2:	90 91 9f 2c 	lds	r25, 0x2C9F	; 0x802c9f <pxCurrentTimerList+0x1>
    1fa6:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	03 c0       	rjmp	.+6      	; 0x1fb4 <prvInsertTimerInActiveList+0x84>
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	01 c0       	rjmp	.+2      	; 0x1fb4 <prvInsertTimerInActiveList+0x84>
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	ff 90       	pop	r15
    1fba:	ef 90       	pop	r14
    1fbc:	df 90       	pop	r13
    1fbe:	cf 90       	pop	r12
    1fc0:	08 95       	ret

00001fc2 <prvCheckForValidListAndQueue>:
    1fc2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fc6:	ff 93       	push	r31
    1fc8:	f8 7f       	andi	r31, 0xF8	; 248
    1fca:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fce:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <xTimerQueue>
    1fd2:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <xTimerQueue+0x1>
    1fd6:	89 2b       	or	r24, r25
    1fd8:	e9 f4       	brne	.+58     	; 0x2014 <prvCheckForValidListAndQueue+0x52>
    1fda:	8b ea       	ldi	r24, 0xAB	; 171
    1fdc:	9c e2       	ldi	r25, 0x2C	; 44
    1fde:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    1fe2:	80 ea       	ldi	r24, 0xA0	; 160
    1fe4:	9c e2       	ldi	r25, 0x2C	; 44
    1fe6:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialise>
    1fea:	8b ea       	ldi	r24, 0xAB	; 171
    1fec:	9c e2       	ldi	r25, 0x2C	; 44
    1fee:	80 93 9e 2c 	sts	0x2C9E, r24	; 0x802c9e <pxCurrentTimerList>
    1ff2:	90 93 9f 2c 	sts	0x2C9F, r25	; 0x802c9f <pxCurrentTimerList+0x1>
    1ff6:	80 ea       	ldi	r24, 0xA0	; 160
    1ff8:	9c e2       	ldi	r25, 0x2C	; 44
    1ffa:	80 93 9c 2c 	sts	0x2C9C, r24	; 0x802c9c <pxOverflowTimerList>
    1ffe:	90 93 9d 2c 	sts	0x2C9D, r25	; 0x802c9d <pxOverflowTimerList+0x1>
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	69 e0       	ldi	r22, 0x09	; 9
    2006:	85 e0       	ldi	r24, 0x05	; 5
    2008:	0e 94 1a 08 	call	0x1034	; 0x1034 <xQueueGenericCreate>
    200c:	80 93 9a 2c 	sts	0x2C9A, r24	; 0x802c9a <xTimerQueue>
    2010:	90 93 9b 2c 	sts	0x2C9B, r25	; 0x802c9b <xTimerQueue+0x1>
    2014:	ff 91       	pop	r31
    2016:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    201a:	08 95       	ret

0000201c <xTimerCreateTimerTask>:
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	0f 93       	push	r16
    2022:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <prvCheckForValidListAndQueue>
    2026:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <xTimerQueue>
    202a:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <xTimerQueue+0x1>
    202e:	89 2b       	or	r24, r25
    2030:	91 f0       	breq	.+36     	; 0x2056 <xTimerCreateTimerTask+0x3a>
    2032:	0f 2e       	mov	r0, r31
    2034:	f8 e9       	ldi	r31, 0x98	; 152
    2036:	ef 2e       	mov	r14, r31
    2038:	fc e2       	ldi	r31, 0x2C	; 44
    203a:	ff 2e       	mov	r15, r31
    203c:	f0 2d       	mov	r31, r0
    203e:	03 e0       	ldi	r16, 0x03	; 3
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	48 ec       	ldi	r20, 0xC8	; 200
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	65 e0       	ldi	r22, 0x05	; 5
    204a:	70 e2       	ldi	r23, 0x20	; 32
    204c:	81 e2       	ldi	r24, 0x21	; 33
    204e:	91 e1       	ldi	r25, 0x11	; 17
    2050:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xTaskCreate>
    2054:	01 c0       	rjmp	.+2      	; 0x2058 <xTimerCreateTimerTask+0x3c>
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	08 95       	ret

00002060 <xTimerGenericCommand>:
    2060:	8f 92       	push	r8
    2062:	9f 92       	push	r9
    2064:	af 92       	push	r10
    2066:	bf 92       	push	r11
    2068:	cf 92       	push	r12
    206a:	df 92       	push	r13
    206c:	ef 92       	push	r14
    206e:	ff 92       	push	r15
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	29 97       	sbiw	r28, 0x09	; 9
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	e0 91 9a 2c 	lds	r30, 0x2C9A	; 0x802c9a <xTimerQueue>
    2086:	f0 91 9b 2c 	lds	r31, 0x2C9B	; 0x802c9b <xTimerQueue+0x1>
    208a:	30 97       	sbiw	r30, 0x00	; 0
    208c:	89 f1       	breq	.+98     	; 0x20f0 <xTimerGenericCommand+0x90>
    208e:	69 83       	std	Y+1, r22	; 0x01
    2090:	2a 83       	std	Y+2, r18	; 0x02
    2092:	3b 83       	std	Y+3, r19	; 0x03
    2094:	4c 83       	std	Y+4, r20	; 0x04
    2096:	5d 83       	std	Y+5, r21	; 0x05
    2098:	8e 83       	std	Y+6, r24	; 0x06
    209a:	9f 83       	std	Y+7, r25	; 0x07
    209c:	66 30       	cpi	r22, 0x06	; 6
    209e:	fc f4       	brge	.+62     	; 0x20de <xTimerGenericCommand+0x7e>
    20a0:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <xTaskGetSchedulerState>
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	69 f4       	brne	.+26     	; 0x20c2 <xTimerGenericCommand+0x62>
    20a8:	00 e0       	ldi	r16, 0x00	; 0
    20aa:	a7 01       	movw	r20, r14
    20ac:	96 01       	movw	r18, r12
    20ae:	be 01       	movw	r22, r28
    20b0:	6f 5f       	subi	r22, 0xFF	; 255
    20b2:	7f 4f       	sbci	r23, 0xFF	; 255
    20b4:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <xTimerQueue>
    20b8:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <xTimerQueue+0x1>
    20bc:	0e 94 4b 08 	call	0x1096	; 0x1096 <xQueueGenericSend>
    20c0:	18 c0       	rjmp	.+48     	; 0x20f2 <xTimerGenericCommand+0x92>
    20c2:	00 e0       	ldi	r16, 0x00	; 0
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	a9 01       	movw	r20, r18
    20ca:	be 01       	movw	r22, r28
    20cc:	6f 5f       	subi	r22, 0xFF	; 255
    20ce:	7f 4f       	sbci	r23, 0xFF	; 255
    20d0:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <xTimerQueue>
    20d4:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <xTimerQueue+0x1>
    20d8:	0e 94 4b 08 	call	0x1096	; 0x1096 <xQueueGenericSend>
    20dc:	0a c0       	rjmp	.+20     	; 0x20f2 <xTimerGenericCommand+0x92>
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	a8 01       	movw	r20, r16
    20e2:	be 01       	movw	r22, r28
    20e4:	6f 5f       	subi	r22, 0xFF	; 255
    20e6:	7f 4f       	sbci	r23, 0xFF	; 255
    20e8:	cf 01       	movw	r24, r30
    20ea:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <xQueueGenericSendFromISR>
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <xTimerGenericCommand+0x92>
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	29 96       	adiw	r28, 0x09	; 9
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	df 90       	pop	r13
    2106:	cf 90       	pop	r12
    2108:	bf 90       	pop	r11
    210a:	af 90       	pop	r10
    210c:	9f 90       	pop	r9
    210e:	8f 90       	pop	r8
    2110:	08 95       	ret

00002112 <prvSampleTimeNow>:
    2112:	2f 92       	push	r2
    2114:	3f 92       	push	r3
    2116:	4f 92       	push	r4
    2118:	5f 92       	push	r5
    211a:	6f 92       	push	r6
    211c:	7f 92       	push	r7
    211e:	8f 92       	push	r8
    2120:	9f 92       	push	r9
    2122:	af 92       	push	r10
    2124:	bf 92       	push	r11
    2126:	cf 92       	push	r12
    2128:	df 92       	push	r13
    212a:	ef 92       	push	r14
    212c:	ff 92       	push	r15
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	1c 01       	movw	r2, r24
    2138:	0e 94 0a 0c 	call	0x1814	; 0x1814 <xTaskGetTickCount>
    213c:	2b 01       	movw	r4, r22
    213e:	3c 01       	movw	r6, r24
    2140:	80 91 94 2c 	lds	r24, 0x2C94	; 0x802c94 <xLastTime.4745>
    2144:	90 91 95 2c 	lds	r25, 0x2C95	; 0x802c95 <xLastTime.4745+0x1>
    2148:	a0 91 96 2c 	lds	r26, 0x2C96	; 0x802c96 <xLastTime.4745+0x2>
    214c:	b0 91 97 2c 	lds	r27, 0x2C97	; 0x802c97 <xLastTime.4745+0x3>
    2150:	48 16       	cp	r4, r24
    2152:	59 06       	cpc	r5, r25
    2154:	6a 06       	cpc	r6, r26
    2156:	7b 06       	cpc	r7, r27
    2158:	08 f0       	brcs	.+2      	; 0x215c <prvSampleTimeNow+0x4a>
    215a:	54 c0       	rjmp	.+168    	; 0x2204 <prvSampleTimeNow+0xf2>
    215c:	3c c0       	rjmp	.+120    	; 0x21d6 <prvSampleTimeNow+0xc4>
    215e:	07 80       	ldd	r0, Z+7	; 0x07
    2160:	f0 85       	ldd	r31, Z+8	; 0x08
    2162:	e0 2d       	mov	r30, r0
    2164:	80 80       	ld	r8, Z
    2166:	91 80       	ldd	r9, Z+1	; 0x01
    2168:	a2 80       	ldd	r10, Z+2	; 0x02
    216a:	b3 80       	ldd	r11, Z+3	; 0x03
    216c:	c0 85       	ldd	r28, Z+8	; 0x08
    216e:	d1 85       	ldd	r29, Z+9	; 0x09
    2170:	8e 01       	movw	r16, r28
    2172:	0e 5f       	subi	r16, 0xFE	; 254
    2174:	1f 4f       	sbci	r17, 0xFF	; 255
    2176:	c8 01       	movw	r24, r16
    2178:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    217c:	ed 89       	ldd	r30, Y+21	; 0x15
    217e:	fe 89       	ldd	r31, Y+22	; 0x16
    2180:	ce 01       	movw	r24, r28
    2182:	19 95       	eicall
    2184:	8a 89       	ldd	r24, Y+18	; 0x12
    2186:	81 30       	cpi	r24, 0x01	; 1
    2188:	31 f5       	brne	.+76     	; 0x21d6 <prvSampleTimeNow+0xc4>
    218a:	8e 85       	ldd	r24, Y+14	; 0x0e
    218c:	9f 85       	ldd	r25, Y+15	; 0x0f
    218e:	a8 89       	ldd	r26, Y+16	; 0x10
    2190:	b9 89       	ldd	r27, Y+17	; 0x11
    2192:	88 0d       	add	r24, r8
    2194:	99 1d       	adc	r25, r9
    2196:	aa 1d       	adc	r26, r10
    2198:	bb 1d       	adc	r27, r11
    219a:	88 16       	cp	r8, r24
    219c:	99 06       	cpc	r9, r25
    219e:	aa 06       	cpc	r10, r26
    21a0:	bb 06       	cpc	r11, r27
    21a2:	70 f4       	brcc	.+28     	; 0x21c0 <prvSampleTimeNow+0xae>
    21a4:	8a 83       	std	Y+2, r24	; 0x02
    21a6:	9b 83       	std	Y+3, r25	; 0x03
    21a8:	ac 83       	std	Y+4, r26	; 0x04
    21aa:	bd 83       	std	Y+5, r27	; 0x05
    21ac:	ca 87       	std	Y+10, r28	; 0x0a
    21ae:	db 87       	std	Y+11, r29	; 0x0b
    21b0:	b8 01       	movw	r22, r16
    21b2:	80 91 9e 2c 	lds	r24, 0x2C9E	; 0x802c9e <pxCurrentTimerList>
    21b6:	90 91 9f 2c 	lds	r25, 0x2C9F	; 0x802c9f <pxCurrentTimerList+0x1>
    21ba:	0e 94 ed 04 	call	0x9da	; 0x9da <vListInsert>
    21be:	0b c0       	rjmp	.+22     	; 0x21d6 <prvSampleTimeNow+0xc4>
    21c0:	c1 2c       	mov	r12, r1
    21c2:	d1 2c       	mov	r13, r1
    21c4:	76 01       	movw	r14, r12
    21c6:	00 e0       	ldi	r16, 0x00	; 0
    21c8:	10 e0       	ldi	r17, 0x00	; 0
    21ca:	a5 01       	movw	r20, r10
    21cc:	94 01       	movw	r18, r8
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	ce 01       	movw	r24, r28
    21d2:	0e 94 30 10 	call	0x2060	; 0x2060 <xTimerGenericCommand>
    21d6:	e0 91 9e 2c 	lds	r30, 0x2C9E	; 0x802c9e <pxCurrentTimerList>
    21da:	f0 91 9f 2c 	lds	r31, 0x2C9F	; 0x802c9f <pxCurrentTimerList+0x1>
    21de:	80 81       	ld	r24, Z
    21e0:	81 11       	cpse	r24, r1
    21e2:	bd cf       	rjmp	.-134    	; 0x215e <prvSampleTimeNow+0x4c>
    21e4:	80 91 9c 2c 	lds	r24, 0x2C9C	; 0x802c9c <pxOverflowTimerList>
    21e8:	90 91 9d 2c 	lds	r25, 0x2C9D	; 0x802c9d <pxOverflowTimerList+0x1>
    21ec:	80 93 9e 2c 	sts	0x2C9E, r24	; 0x802c9e <pxCurrentTimerList>
    21f0:	90 93 9f 2c 	sts	0x2C9F, r25	; 0x802c9f <pxCurrentTimerList+0x1>
    21f4:	e0 93 9c 2c 	sts	0x2C9C, r30	; 0x802c9c <pxOverflowTimerList>
    21f8:	f0 93 9d 2c 	sts	0x2C9D, r31	; 0x802c9d <pxOverflowTimerList+0x1>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	f1 01       	movw	r30, r2
    2200:	80 83       	st	Z, r24
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <prvSampleTimeNow+0xf6>
    2204:	f1 01       	movw	r30, r2
    2206:	10 82       	st	Z, r1
    2208:	40 92 94 2c 	sts	0x2C94, r4	; 0x802c94 <xLastTime.4745>
    220c:	50 92 95 2c 	sts	0x2C95, r5	; 0x802c95 <xLastTime.4745+0x1>
    2210:	60 92 96 2c 	sts	0x2C96, r6	; 0x802c96 <xLastTime.4745+0x2>
    2214:	70 92 97 2c 	sts	0x2C97, r7	; 0x802c97 <xLastTime.4745+0x3>
    2218:	c3 01       	movw	r24, r6
    221a:	b2 01       	movw	r22, r4
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	1f 91       	pop	r17
    2222:	0f 91       	pop	r16
    2224:	ff 90       	pop	r15
    2226:	ef 90       	pop	r14
    2228:	df 90       	pop	r13
    222a:	cf 90       	pop	r12
    222c:	bf 90       	pop	r11
    222e:	af 90       	pop	r10
    2230:	9f 90       	pop	r9
    2232:	8f 90       	pop	r8
    2234:	7f 90       	pop	r7
    2236:	6f 90       	pop	r6
    2238:	5f 90       	pop	r5
    223a:	4f 90       	pop	r4
    223c:	3f 90       	pop	r3
    223e:	2f 90       	pop	r2
    2240:	08 95       	ret

00002242 <prvTimerTask>:
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	2e 97       	sbiw	r28, 0x0e	; 14
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	ce 01       	movw	r24, r28
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	1c 01       	movw	r2, r24
    2256:	a8 2e       	mov	r10, r24
    2258:	b3 2c       	mov	r11, r3
    225a:	e0 91 9e 2c 	lds	r30, 0x2C9E	; 0x802c9e <pxCurrentTimerList>
    225e:	f0 91 9f 2c 	lds	r31, 0x2C9F	; 0x802c9f <pxCurrentTimerList+0x1>
    2262:	80 81       	ld	r24, Z
    2264:	88 23       	and	r24, r24
    2266:	09 f4       	brne	.+2      	; 0x226a <prvTimerTask+0x28>
    2268:	03 c1       	rjmp	.+518    	; 0x2470 <prvTimerTask+0x22e>
    226a:	07 80       	ldd	r0, Z+7	; 0x07
    226c:	f0 85       	ldd	r31, Z+8	; 0x08
    226e:	e0 2d       	mov	r30, r0
    2270:	40 80       	ld	r4, Z
    2272:	51 80       	ldd	r5, Z+1	; 0x01
    2274:	62 80       	ldd	r6, Z+2	; 0x02
    2276:	73 80       	ldd	r7, Z+3	; 0x03
    2278:	0e 94 04 0c 	call	0x1808	; 0x1808 <vTaskSuspendAll>
    227c:	c1 01       	movw	r24, r2
    227e:	0e 94 89 10 	call	0x2112	; 0x2112 <prvSampleTimeNow>
    2282:	6b 87       	std	Y+11, r22	; 0x0b
    2284:	7c 87       	std	Y+12, r23	; 0x0c
    2286:	8d 87       	std	Y+13, r24	; 0x0d
    2288:	9e 87       	std	Y+14, r25	; 0x0e
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	81 11       	cpse	r24, r1
    228e:	5e c0       	rjmp	.+188    	; 0x234c <prvTimerTask+0x10a>
    2290:	8b 85       	ldd	r24, Y+11	; 0x0b
    2292:	9c 85       	ldd	r25, Y+12	; 0x0c
    2294:	ad 85       	ldd	r26, Y+13	; 0x0d
    2296:	be 85       	ldd	r27, Y+14	; 0x0e
    2298:	84 15       	cp	r24, r4
    229a:	95 05       	cpc	r25, r5
    229c:	a6 05       	cpc	r26, r6
    229e:	b7 05       	cpc	r27, r7
    22a0:	e8 f1       	brcs	.+122    	; 0x231c <prvTimerTask+0xda>
    22a2:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
    22a6:	e0 91 9e 2c 	lds	r30, 0x2C9E	; 0x802c9e <pxCurrentTimerList>
    22aa:	f0 91 9f 2c 	lds	r31, 0x2C9F	; 0x802c9f <pxCurrentTimerList+0x1>
    22ae:	07 80       	ldd	r0, Z+7	; 0x07
    22b0:	f0 85       	ldd	r31, Z+8	; 0x08
    22b2:	e0 2d       	mov	r30, r0
    22b4:	80 84       	ldd	r8, Z+8	; 0x08
    22b6:	91 84       	ldd	r9, Z+9	; 0x09
    22b8:	c4 01       	movw	r24, r8
    22ba:	02 96       	adiw	r24, 0x02	; 2
    22bc:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    22c0:	d4 01       	movw	r26, r8
    22c2:	52 96       	adiw	r26, 0x12	; 18
    22c4:	8c 91       	ld	r24, X
    22c6:	52 97       	sbiw	r26, 0x12	; 18
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	01 f5       	brne	.+64     	; 0x230c <prvTimerTask+0xca>
    22cc:	1e 96       	adiw	r26, 0x0e	; 14
    22ce:	4d 91       	ld	r20, X+
    22d0:	5d 91       	ld	r21, X+
    22d2:	6d 91       	ld	r22, X+
    22d4:	7c 91       	ld	r23, X
    22d6:	51 97       	sbiw	r26, 0x11	; 17
    22d8:	44 0d       	add	r20, r4
    22da:	55 1d       	adc	r21, r5
    22dc:	66 1d       	adc	r22, r6
    22de:	77 1d       	adc	r23, r7
    22e0:	73 01       	movw	r14, r6
    22e2:	62 01       	movw	r12, r4
    22e4:	0b 85       	ldd	r16, Y+11	; 0x0b
    22e6:	1c 85       	ldd	r17, Y+12	; 0x0c
    22e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    22ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    22ec:	c4 01       	movw	r24, r8
    22ee:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvInsertTimerInActiveList>
    22f2:	88 23       	and	r24, r24
    22f4:	59 f0       	breq	.+22     	; 0x230c <prvTimerTask+0xca>
    22f6:	c1 2c       	mov	r12, r1
    22f8:	d1 2c       	mov	r13, r1
    22fa:	76 01       	movw	r14, r12
    22fc:	00 e0       	ldi	r16, 0x00	; 0
    22fe:	10 e0       	ldi	r17, 0x00	; 0
    2300:	a3 01       	movw	r20, r6
    2302:	92 01       	movw	r18, r4
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	c4 01       	movw	r24, r8
    2308:	0e 94 30 10 	call	0x2060	; 0x2060 <xTimerGenericCommand>
    230c:	d4 01       	movw	r26, r8
    230e:	55 96       	adiw	r26, 0x15	; 21
    2310:	ed 91       	ld	r30, X+
    2312:	fc 91       	ld	r31, X
    2314:	56 97       	sbiw	r26, 0x16	; 22
    2316:	c4 01       	movw	r24, r8
    2318:	19 95       	eicall
    231a:	9c c0       	rjmp	.+312    	; 0x2454 <prvTimerTask+0x212>
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	b3 01       	movw	r22, r6
    2320:	a2 01       	movw	r20, r4
    2322:	8b 85       	ldd	r24, Y+11	; 0x0b
    2324:	9c 85       	ldd	r25, Y+12	; 0x0c
    2326:	ad 85       	ldd	r26, Y+13	; 0x0d
    2328:	be 85       	ldd	r27, Y+14	; 0x0e
    232a:	48 1b       	sub	r20, r24
    232c:	59 0b       	sbc	r21, r25
    232e:	6a 0b       	sbc	r22, r26
    2330:	7b 0b       	sbc	r23, r27
    2332:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <xTimerQueue>
    2336:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <xTimerQueue+0x1>
    233a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <vQueueWaitForMessageRestricted>
    233e:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
    2342:	81 11       	cpse	r24, r1
    2344:	87 c0       	rjmp	.+270    	; 0x2454 <prvTimerTask+0x212>
    2346:	0e 94 15 06 	call	0xc2a	; 0xc2a <vPortYield>
    234a:	84 c0       	rjmp	.+264    	; 0x2454 <prvTimerTask+0x212>
    234c:	0e 94 ef 0c 	call	0x19de	; 0x19de <xTaskResumeAll>
    2350:	81 c0       	rjmp	.+258    	; 0x2454 <prvTimerTask+0x212>
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	88 23       	and	r24, r24
    2356:	6c f4       	brge	.+26     	; 0x2372 <prvTimerTask+0x130>
    2358:	4e 81       	ldd	r20, Y+6	; 0x06
    235a:	5f 81       	ldd	r21, Y+7	; 0x07
    235c:	68 85       	ldd	r22, Y+8	; 0x08
    235e:	79 85       	ldd	r23, Y+9	; 0x09
    2360:	ea 81       	ldd	r30, Y+2	; 0x02
    2362:	fb 81       	ldd	r31, Y+3	; 0x03
    2364:	8c 81       	ldd	r24, Y+4	; 0x04
    2366:	9d 81       	ldd	r25, Y+5	; 0x05
    2368:	19 95       	eicall
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	88 23       	and	r24, r24
    236e:	0c f4       	brge	.+2      	; 0x2372 <prvTimerTask+0x130>
    2370:	71 c0       	rjmp	.+226    	; 0x2454 <prvTimerTask+0x212>
    2372:	8e 80       	ldd	r8, Y+6	; 0x06
    2374:	9f 80       	ldd	r9, Y+7	; 0x07
    2376:	d4 01       	movw	r26, r8
    2378:	1c 96       	adiw	r26, 0x0c	; 12
    237a:	8d 91       	ld	r24, X+
    237c:	9c 91       	ld	r25, X
    237e:	1d 97       	sbiw	r26, 0x0d	; 13
    2380:	89 2b       	or	r24, r25
    2382:	21 f0       	breq	.+8      	; 0x238c <prvTimerTask+0x14a>
    2384:	c4 01       	movw	r24, r8
    2386:	02 96       	adiw	r24, 0x02	; 2
    2388:	0e 94 2a 05 	call	0xa54	; 0xa54 <uxListRemove>
    238c:	ce 01       	movw	r24, r28
    238e:	0a 96       	adiw	r24, 0x0a	; 10
    2390:	0e 94 89 10 	call	0x2112	; 0x2112 <prvSampleTimeNow>
    2394:	8b 01       	movw	r16, r22
    2396:	9c 01       	movw	r18, r24
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	08 2e       	mov	r0, r24
    239c:	00 0c       	add	r0, r0
    239e:	99 0b       	sbc	r25, r25
    23a0:	aa 0b       	sbc	r26, r26
    23a2:	bb 0b       	sbc	r27, r27
    23a4:	8a 30       	cpi	r24, 0x0A	; 10
    23a6:	91 05       	cpc	r25, r1
    23a8:	08 f0       	brcs	.+2      	; 0x23ac <prvTimerTask+0x16a>
    23aa:	54 c0       	rjmp	.+168    	; 0x2454 <prvTimerTask+0x212>
    23ac:	fc 01       	movw	r30, r24
    23ae:	88 27       	eor	r24, r24
    23b0:	e2 50       	subi	r30, 0x02	; 2
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	8f 4f       	sbci	r24, 0xFF	; 255
    23b6:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__tablejump2__>
    23ba:	ca 80       	ldd	r12, Y+2	; 0x02
    23bc:	db 80       	ldd	r13, Y+3	; 0x03
    23be:	ec 80       	ldd	r14, Y+4	; 0x04
    23c0:	fd 80       	ldd	r15, Y+5	; 0x05
    23c2:	f4 01       	movw	r30, r8
    23c4:	46 85       	ldd	r20, Z+14	; 0x0e
    23c6:	57 85       	ldd	r21, Z+15	; 0x0f
    23c8:	60 89       	ldd	r22, Z+16	; 0x10
    23ca:	71 89       	ldd	r23, Z+17	; 0x11
    23cc:	4c 0d       	add	r20, r12
    23ce:	5d 1d       	adc	r21, r13
    23d0:	6e 1d       	adc	r22, r14
    23d2:	7f 1d       	adc	r23, r15
    23d4:	c4 01       	movw	r24, r8
    23d6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvInsertTimerInActiveList>
    23da:	88 23       	and	r24, r24
    23dc:	d9 f1       	breq	.+118    	; 0x2454 <prvTimerTask+0x212>
    23de:	d4 01       	movw	r26, r8
    23e0:	55 96       	adiw	r26, 0x15	; 21
    23e2:	ed 91       	ld	r30, X+
    23e4:	fc 91       	ld	r31, X
    23e6:	56 97       	sbiw	r26, 0x16	; 22
    23e8:	c4 01       	movw	r24, r8
    23ea:	19 95       	eicall
    23ec:	f4 01       	movw	r30, r8
    23ee:	82 89       	ldd	r24, Z+18	; 0x12
    23f0:	81 30       	cpi	r24, 0x01	; 1
    23f2:	81 f5       	brne	.+96     	; 0x2454 <prvTimerTask+0x212>
    23f4:	4a 81       	ldd	r20, Y+2	; 0x02
    23f6:	5b 81       	ldd	r21, Y+3	; 0x03
    23f8:	6c 81       	ldd	r22, Y+4	; 0x04
    23fa:	7d 81       	ldd	r23, Y+5	; 0x05
    23fc:	86 85       	ldd	r24, Z+14	; 0x0e
    23fe:	97 85       	ldd	r25, Z+15	; 0x0f
    2400:	a0 89       	ldd	r26, Z+16	; 0x10
    2402:	b1 89       	ldd	r27, Z+17	; 0x11
    2404:	9a 01       	movw	r18, r20
    2406:	ab 01       	movw	r20, r22
    2408:	28 0f       	add	r18, r24
    240a:	39 1f       	adc	r19, r25
    240c:	4a 1f       	adc	r20, r26
    240e:	5b 1f       	adc	r21, r27
    2410:	c1 2c       	mov	r12, r1
    2412:	d1 2c       	mov	r13, r1
    2414:	76 01       	movw	r14, r12
    2416:	00 e0       	ldi	r16, 0x00	; 0
    2418:	10 e0       	ldi	r17, 0x00	; 0
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	c4 01       	movw	r24, r8
    241e:	0e 94 30 10 	call	0x2060	; 0x2060 <xTimerGenericCommand>
    2422:	18 c0       	rjmp	.+48     	; 0x2454 <prvTimerTask+0x212>
    2424:	4a 81       	ldd	r20, Y+2	; 0x02
    2426:	5b 81       	ldd	r21, Y+3	; 0x03
    2428:	6c 81       	ldd	r22, Y+4	; 0x04
    242a:	7d 81       	ldd	r23, Y+5	; 0x05
    242c:	d4 01       	movw	r26, r8
    242e:	1e 96       	adiw	r26, 0x0e	; 14
    2430:	4d 93       	st	X+, r20
    2432:	5d 93       	st	X+, r21
    2434:	6d 93       	st	X+, r22
    2436:	7c 93       	st	X, r23
    2438:	51 97       	sbiw	r26, 0x11	; 17
    243a:	40 0f       	add	r20, r16
    243c:	51 1f       	adc	r21, r17
    243e:	62 1f       	adc	r22, r18
    2440:	73 1f       	adc	r23, r19
    2442:	68 01       	movw	r12, r16
    2444:	79 01       	movw	r14, r18
    2446:	c4 01       	movw	r24, r8
    2448:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvInsertTimerInActiveList>
    244c:	03 c0       	rjmp	.+6      	; 0x2454 <prvTimerTask+0x212>
    244e:	c4 01       	movw	r24, r8
    2450:	0e 94 b6 04 	call	0x96c	; 0x96c <vPortFree>
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	a9 01       	movw	r20, r18
    245a:	6a 2d       	mov	r22, r10
    245c:	7b 2d       	mov	r23, r11
    245e:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <xTimerQueue>
    2462:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <xTimerQueue+0x1>
    2466:	0e 94 36 09 	call	0x126c	; 0x126c <xQueueReceive>
    246a:	81 11       	cpse	r24, r1
    246c:	72 cf       	rjmp	.-284    	; 0x2352 <prvTimerTask+0x110>
    246e:	f5 ce       	rjmp	.-534    	; 0x225a <prvTimerTask+0x18>
    2470:	0e 94 04 0c 	call	0x1808	; 0x1808 <vTaskSuspendAll>
    2474:	c1 01       	movw	r24, r2
    2476:	0e 94 89 10 	call	0x2112	; 0x2112 <prvSampleTimeNow>
    247a:	6b 87       	std	Y+11, r22	; 0x0b
    247c:	7c 87       	std	Y+12, r23	; 0x0c
    247e:	8d 87       	std	Y+13, r24	; 0x0d
    2480:	9e 87       	std	Y+14, r25	; 0x0e
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	81 11       	cpse	r24, r1
    2486:	62 cf       	rjmp	.-316    	; 0x234c <prvTimerTask+0x10a>
    2488:	e0 91 9c 2c 	lds	r30, 0x2C9C	; 0x802c9c <pxOverflowTimerList>
    248c:	f0 91 9d 2c 	lds	r31, 0x2C9D	; 0x802c9d <pxOverflowTimerList+0x1>
    2490:	80 81       	ld	r24, Z
    2492:	21 e0       	ldi	r18, 0x01	; 1
    2494:	81 11       	cpse	r24, r1
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	41 2c       	mov	r4, r1
    249a:	51 2c       	mov	r5, r1
    249c:	32 01       	movw	r6, r4
    249e:	3f cf       	rjmp	.-386    	; 0x231e <prvTimerTask+0xdc>

000024a0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	29 97       	sbiw	r28, 0x09	; 9
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    24b2:	ee ef       	ldi	r30, 0xFE	; 254
    24b4:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    24b6:	8a 83       	std	Y+2, r24	; 0x02
    24b8:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    24ba:	6c 83       	std	Y+4, r22	; 0x04
    24bc:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    24be:	2e 83       	std	Y+6, r18	; 0x06
    24c0:	3f 83       	std	Y+7, r19	; 0x07
    24c2:	48 87       	std	Y+8, r20	; 0x08
    24c4:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	a8 01       	movw	r20, r16
    24ca:	be 01       	movw	r22, r28
    24cc:	6f 5f       	subi	r22, 0xFF	; 255
    24ce:	7f 4f       	sbci	r23, 0xFF	; 255
    24d0:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <xTimerQueue>
    24d4:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <xTimerQueue+0x1>
    24d8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    24dc:	29 96       	adiw	r28, 0x09	; 9
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	08 95       	ret

000024ec <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    24ec:	e0 e5       	ldi	r30, 0x50	; 80
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	81 60       	ori	r24, 0x01	; 1
    24f4:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    24f6:	81 81       	ldd	r24, Z+1	; 0x01
    24f8:	80 ff       	sbrs	r24, 0
    24fa:	fd cf       	rjmp	.-6      	; 0x24f6 <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	0e 94 c2 02 	call	0x584	; 0x584 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    2502:	8e e1       	ldi	r24, 0x1E	; 30
    2504:	0e 94 b2 02 	call	0x564	; 0x564 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	0e 94 bc 02 	call	0x578	; 0x578 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    2510:	43 e0       	ldi	r20, 0x03	; 3
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	80 e4       	ldi	r24, 0x40	; 64
    2516:	0e 94 a3 02 	call	0x546	; 0x546 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    251a:	e0 e5       	ldi	r30, 0x50	; 80
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	88 60       	ori	r24, 0x08	; 8
    2522:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    2524:	81 81       	ldd	r24, Z+1	; 0x01
    2526:	83 ff       	sbrs	r24, 3
    2528:	fd cf       	rjmp	.-6      	; 0x2524 <vInitClock+0x38>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    252a:	64 e0       	ldi	r22, 0x04	; 4
    252c:	80 ec       	ldi	r24, 0xC0	; 192
    252e:	0e 94 ad 02 	call	0x55a	; 0x55a <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    2532:	e0 e5       	ldi	r30, 0x50	; 80
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	80 61       	ori	r24, 0x10	; 16
    253a:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	0e 94 bc 02 	call	0x578	; 0x578 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    2544:	e0 e5       	ldi	r30, 0x50	; 80
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	81 81       	ldd	r24, Z+1	; 0x01
    254a:	84 ff       	sbrs	r24, 4
    254c:	fd cf       	rjmp	.-6      	; 0x2548 <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    254e:	84 e0       	ldi	r24, 0x04	; 4
    2550:	0e 94 c2 02 	call	0x584	; 0x584 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    2554:	87 e0       	ldi	r24, 0x07	; 7
    2556:	0e 94 b2 02 	call	0x564	; 0x564 <CLKSYS_Disable>
    255a:	08 95       	ret

0000255c <vGUI>:
void vGUI(void *pvParameters) {
	
	
	for(;;) {
		vDisplayClear();
		vDisplayWriteStringAtPos(0,0,"PI Calculator");
    255c:	0f 2e       	mov	r0, r31
    255e:	fd e0       	ldi	r31, 0x0D	; 13
    2560:	cf 2e       	mov	r12, r31
    2562:	f0 e2       	ldi	r31, 0x20	; 32
    2564:	df 2e       	mov	r13, r31
    2566:	f0 2d       	mov	r31, r0
		vDisplayWriteStringAtPos(1,0,"Philipp Eppler");
    2568:	0f 2e       	mov	r0, r31
    256a:	fb e1       	ldi	r31, 0x1B	; 27
    256c:	ef 2e       	mov	r14, r31
    256e:	f0 e2       	ldi	r31, 0x20	; 32
    2570:	ff 2e       	mov	r15, r31
    2572:	f0 2d       	mov	r31, r0
    2574:	99 24       	eor	r9, r9
    2576:	93 94       	inc	r9
		vDisplayWriteStringAtPos(2,0,"Pi: 3.1415xxx");
    2578:	0a e2       	ldi	r16, 0x2A	; 42
    257a:	10 e2       	ldi	r17, 0x20	; 32
    257c:	68 94       	set
    257e:	aa 24       	eor	r10, r10
    2580:	a1 f8       	bld	r10, 1
		vDisplayWriteStringAtPos(3,0,"Zeit: xxxxxxms");
    2582:	c8 e3       	ldi	r28, 0x38	; 56
    2584:	d0 e2       	ldi	r29, 0x20	; 32
    2586:	0f 2e       	mov	r0, r31
    2588:	f3 e0       	ldi	r31, 0x03	; 3
    258a:	bf 2e       	mov	r11, r31
    258c:	f0 2d       	mov	r31, r0

void vGUI(void *pvParameters) {
	
	
	for(;;) {
		vDisplayClear();
    258e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <vDisplayClear>
		vDisplayWriteStringAtPos(0,0,"PI Calculator");
    2592:	df 92       	push	r13
    2594:	cf 92       	push	r12
    2596:	1f 92       	push	r1
    2598:	1f 92       	push	r1
    259a:	1f 92       	push	r1
    259c:	1f 92       	push	r1
    259e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <vDisplayWriteStringAtPos>
		vDisplayWriteStringAtPos(1,0,"Philipp Eppler");
    25a2:	ff 92       	push	r15
    25a4:	ef 92       	push	r14
    25a6:	1f 92       	push	r1
    25a8:	1f 92       	push	r1
    25aa:	1f 92       	push	r1
    25ac:	9f 92       	push	r9
    25ae:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <vDisplayWriteStringAtPos>
		vDisplayWriteStringAtPos(2,0,"Pi: 3.1415xxx");
    25b2:	1f 93       	push	r17
    25b4:	0f 93       	push	r16
    25b6:	1f 92       	push	r1
    25b8:	1f 92       	push	r1
    25ba:	1f 92       	push	r1
    25bc:	af 92       	push	r10
    25be:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <vDisplayWriteStringAtPos>
		vDisplayWriteStringAtPos(3,0,"Zeit: xxxxxxms");
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	1f 92       	push	r1
    25c8:	1f 92       	push	r1
    25ca:	1f 92       	push	r1
    25cc:	bf 92       	push	r11
    25ce:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <vDisplayWriteStringAtPos>
		
		
		vTaskDelay(500 / portTICK_RATE_MS);
    25d2:	64 ef       	ldi	r22, 0xF4	; 244
    25d4:	71 e0       	ldi	r23, 0x01	; 1
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <vTaskDelay>
    25de:	8d b7       	in	r24, 0x3d	; 61
    25e0:	9e b7       	in	r25, 0x3e	; 62
    25e2:	48 96       	adiw	r24, 0x18	; 24
    25e4:	8d bf       	out	0x3d, r24	; 61
    25e6:	9e bf       	out	0x3e, r25	; 62
    25e8:	d2 cf       	rjmp	.-92     	; 0x258e <vGUI+0x32>

000025ea <vButton>:
	}
}

void vButton(void *pvParameters) {
	initButtons();
    25ea:	0e 94 c8 01 	call	0x390	; 0x390 <initButtons>
	
	while (1) {
		updateButtons();
    25ee:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <updateButtons>
		if (getButtonPress(BUTTON1) == SHORT_PRESSED) {
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>

		}

		if (getButtonPress(BUTTON2) == SHORT_PRESSED) {
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>

		}
		
		if (getButtonPress(BUTTON3) == SHORT_PRESSED) {
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>

		}		

		if (getButtonPress(BUTTON4) == SHORT_PRESSED) {
    2604:	83 e0       	ldi	r24, 0x03	; 3
    2606:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getButtonPress>

		}

		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    260a:	6a e0       	ldi	r22, 0x0A	; 10
    260c:	70 e0       	ldi	r23, 0x00	; 0
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <vTaskDelay>
    2616:	eb cf       	rjmp	.-42     	; 0x25ee <vButton+0x4>

00002618 <vApplicationIdleHook>:
void vButton(void *pvParameters);

TaskHandle_t GUITask;

void vApplicationIdleHook( void )
{	
    2618:	08 95       	ret

0000261a <main>:
	
}

int main(void)
{
    261a:	ef 92       	push	r14
    261c:	ff 92       	push	r15
    261e:	0f 93       	push	r16
	vInitClock();
    2620:	0e 94 76 12 	call	0x24ec	; 0x24ec <vInitClock>
	vInitDisplay();
    2624:	0e 94 3b 14 	call	0x2876	; 0x2876 <vInitDisplay>
	
	xTaskCreate( vButton, (const char *) "Button", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    2628:	e1 2c       	mov	r14, r1
    262a:	f1 2c       	mov	r15, r1
    262c:	03 e0       	ldi	r16, 0x03	; 3
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	48 ec       	ldi	r20, 0xC8	; 200
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	67 e4       	ldi	r22, 0x47	; 71
    2638:	70 e2       	ldi	r23, 0x20	; 32
    263a:	85 ef       	ldi	r24, 0xF5	; 245
    263c:	92 e1       	ldi	r25, 0x12	; 18
    263e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xTaskCreate>
	xTaskCreate( vGUI, (const char *) "GUITask", configMINIMAL_STACK_SIZE, NULL, 2, &GUITask);
    2642:	0f 2e       	mov	r0, r31
    2644:	f3 ee       	ldi	r31, 0xE3	; 227
    2646:	ef 2e       	mov	r14, r31
    2648:	fc e2       	ldi	r31, 0x2C	; 44
    264a:	ff 2e       	mov	r15, r31
    264c:	f0 2d       	mov	r31, r0
    264e:	02 e0       	ldi	r16, 0x02	; 2
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	48 ec       	ldi	r20, 0xC8	; 200
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	6e e4       	ldi	r22, 0x4E	; 78
    265a:	70 e2       	ldi	r23, 0x20	; 32
    265c:	8e ea       	ldi	r24, 0xAE	; 174
    265e:	92 e1       	ldi	r25, 0x12	; 18
    2660:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xTaskCreate>

	vTaskStartScheduler();
    2664:	0e 94 c9 0b 	call	0x1792	; 0x1792 <vTaskStartScheduler>
	return 0;
}
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	0f 91       	pop	r16
    266e:	ff 90       	pop	r15
    2670:	ef 90       	pop	r14
    2672:	08 95       	ret

00002674 <__vector_108>:
 void displayHome() {
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
    2674:	1f 92       	push	r1
    2676:	0f 92       	push	r0
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	0f 92       	push	r0
    267c:	11 24       	eor	r1, r1
    267e:	0b b6       	in	r0, 0x3b	; 59
    2680:	0f 92       	push	r0
    2682:	2f 93       	push	r18
    2684:	3f 93       	push	r19
    2686:	4f 93       	push	r20
    2688:	5f 93       	push	r21
    268a:	6f 93       	push	r22
    268c:	7f 93       	push	r23
    268e:	8f 93       	push	r24
    2690:	9f 93       	push	r25
    2692:	af 93       	push	r26
    2694:	bf 93       	push	r27
    2696:	ef 93       	push	r30
    2698:	ff 93       	push	r31
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	1f 92       	push	r1
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	19 82       	std	Y+1, r1	; 0x01
    26a6:	9e 01       	movw	r18, r28
    26a8:	2f 5f       	subi	r18, 0xFF	; 255
    26aa:	3f 4f       	sbci	r19, 0xFF	; 255
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	60 e0       	ldi	r22, 0x00	; 0
    26b2:	70 e0       	ldi	r23, 0x00	; 0
    26b4:	80 91 e7 2c 	lds	r24, 0x2CE7	; 0x802ce7 <egDisplayTiming>
    26b8:	90 91 e8 2c 	lds	r25, 0x2CE8	; 0x802ce8 <egDisplayTiming+0x1>
    26bc:	0e 94 83 04 	call	0x906	; 0x906 <xEventGroupSetBitsFromISR>
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	9b e0       	ldi	r25, 0x0B	; 11
    26c6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <TC0_ConfigClockSource>
    26ca:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x700b06>
    26ce:	0f 90       	pop	r0
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	ff 91       	pop	r31
    26d6:	ef 91       	pop	r30
    26d8:	bf 91       	pop	r27
    26da:	af 91       	pop	r26
    26dc:	9f 91       	pop	r25
    26de:	8f 91       	pop	r24
    26e0:	7f 91       	pop	r23
    26e2:	6f 91       	pop	r22
    26e4:	5f 91       	pop	r21
    26e6:	4f 91       	pop	r20
    26e8:	3f 91       	pop	r19
    26ea:	2f 91       	pop	r18
    26ec:	0f 90       	pop	r0
    26ee:	0b be       	out	0x3b, r0	; 59
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	0f 90       	pop	r0
    26f6:	1f 90       	pop	r1
    26f8:	18 95       	reti

000026fa <delayUS>:
    26fa:	cf 92       	push	r12
    26fc:	df 92       	push	r13
    26fe:	ef 92       	push	r14
    2700:	ff 92       	push	r15
    2702:	0f 93       	push	r16
    2704:	6b 01       	movw	r12, r22
    2706:	7c 01       	movw	r14, r24
    2708:	82 e0       	ldi	r24, 0x02	; 2
    270a:	c8 16       	cp	r12, r24
    270c:	d1 04       	cpc	r13, r1
    270e:	e1 04       	cpc	r14, r1
    2710:	f1 04       	cpc	r15, r1
    2712:	08 f4       	brcc	.+2      	; 0x2716 <delayUS+0x1c>
    2714:	4e c0       	rjmp	.+156    	; 0x27b2 <delayUS+0xb8>
    2716:	e0 e0       	ldi	r30, 0x00	; 0
    2718:	fb e0       	ldi	r31, 0x0B	; 11
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	86 83       	std	Z+6, r24	; 0x06
    271e:	10 a2       	std	Z+32, r1	; 0x20
    2720:	11 a2       	std	Z+33, r1	; 0x21
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	9b e0       	ldi	r25, 0x0B	; 11
    2728:	0e 94 dd 02 	call	0x5ba	; 0x5ba <TC0_ConfigWGM>
    272c:	8e ef       	ldi	r24, 0xFE	; 254
    272e:	c8 16       	cp	r12, r24
    2730:	8f ef       	ldi	r24, 0xFF	; 255
    2732:	d8 06       	cpc	r13, r24
    2734:	e1 04       	cpc	r14, r1
    2736:	f1 04       	cpc	r15, r1
    2738:	70 f4       	brcc	.+28     	; 0x2756 <delayUS+0x5c>
    273a:	f6 94       	lsr	r15
    273c:	e7 94       	ror	r14
    273e:	d7 94       	ror	r13
    2740:	c7 94       	ror	r12
    2742:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    2746:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    274a:	65 e0       	ldi	r22, 0x05	; 5
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	9b e0       	ldi	r25, 0x0B	; 11
    2750:	0e 94 d7 02 	call	0x5ae	; 0x5ae <TC0_ConfigClockSource>
    2754:	19 c0       	rjmp	.+50     	; 0x2788 <delayUS+0x8e>
    2756:	80 e4       	ldi	r24, 0x40	; 64
    2758:	c8 16       	cp	r12, r24
    275a:	82 e4       	ldi	r24, 0x42	; 66
    275c:	d8 06       	cpc	r13, r24
    275e:	8f e0       	ldi	r24, 0x0F	; 15
    2760:	e8 06       	cpc	r14, r24
    2762:	f1 04       	cpc	r15, r1
    2764:	88 f4       	brcc	.+34     	; 0x2788 <delayUS+0x8e>
    2766:	68 94       	set
    2768:	14 f8       	bld	r1, 4
    276a:	f6 94       	lsr	r15
    276c:	e7 94       	ror	r14
    276e:	d7 94       	ror	r13
    2770:	c7 94       	ror	r12
    2772:	16 94       	lsr	r1
    2774:	d1 f7       	brne	.-12     	; 0x276a <delayUS+0x70>
    2776:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    277a:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    277e:	67 e0       	ldi	r22, 0x07	; 7
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	9b e0       	ldi	r25, 0x0B	; 11
    2784:	0e 94 d7 02 	call	0x5ae	; 0x5ae <TC0_ConfigClockSource>
    2788:	0f 2e       	mov	r0, r31
    278a:	f4 ef       	ldi	r31, 0xF4	; 244
    278c:	cf 2e       	mov	r12, r31
    278e:	dd 24       	eor	r13, r13
    2790:	d3 94       	inc	r13
    2792:	e1 2c       	mov	r14, r1
    2794:	f1 2c       	mov	r15, r1
    2796:	f0 2d       	mov	r31, r0
    2798:	00 e0       	ldi	r16, 0x00	; 0
    279a:	21 e0       	ldi	r18, 0x01	; 1
    279c:	41 e0       	ldi	r20, 0x01	; 1
    279e:	50 e0       	ldi	r21, 0x00	; 0
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	80 91 e7 2c 	lds	r24, 0x2CE7	; 0x802ce7 <egDisplayTiming>
    27a8:	90 91 e8 2c 	lds	r25, 0x2CE8	; 0x802ce8 <egDisplayTiming+0x1>
    27ac:	0e 94 08 03 	call	0x610	; 0x610 <xEventGroupWaitBits>
    27b0:	11 c0       	rjmp	.+34     	; 0x27d4 <delayUS+0xda>
    27b2:	e0 e0       	ldi	r30, 0x00	; 0
    27b4:	fb e0       	ldi	r31, 0x0B	; 11
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	86 83       	std	Z+6, r24	; 0x06
    27ba:	10 a2       	std	Z+32, r1	; 0x20
    27bc:	11 a2       	std	Z+33, r1	; 0x21
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	9b e0       	ldi	r25, 0x0B	; 11
    27c4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <TC0_ConfigWGM>
    27c8:	c1 2c       	mov	r12, r1
    27ca:	d1 2c       	mov	r13, r1
    27cc:	76 01       	movw	r14, r12
    27ce:	68 94       	set
    27d0:	c1 f8       	bld	r12, 1
    27d2:	b3 cf       	rjmp	.-154    	; 0x273a <delayUS+0x40>
    27d4:	0f 91       	pop	r16
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	df 90       	pop	r13
    27dc:	cf 90       	pop	r12
    27de:	08 95       	ret

000027e0 <setPort>:
    27e0:	82 95       	swap	r24
    27e2:	80 7f       	andi	r24, 0xF0	; 240
    27e4:	e0 e0       	ldi	r30, 0x00	; 0
    27e6:	f6 e0       	ldi	r31, 0x06	; 6
    27e8:	94 81       	ldd	r25, Z+4	; 0x04
    27ea:	28 2f       	mov	r18, r24
    27ec:	2f 60       	ori	r18, 0x0F	; 15
    27ee:	92 23       	and	r25, r18
    27f0:	94 83       	std	Z+4, r25	; 0x04
    27f2:	94 81       	ldd	r25, Z+4	; 0x04
    27f4:	89 2b       	or	r24, r25
    27f6:	84 83       	std	Z+4, r24	; 0x04
    27f8:	08 95       	ret

000027fa <Nybble>:
    27fa:	1f 93       	push	r17
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
    2800:	c0 e6       	ldi	r28, 0x60	; 96
    2802:	d6 e0       	ldi	r29, 0x06	; 6
    2804:	14 e0       	ldi	r17, 0x04	; 4
    2806:	1d 83       	std	Y+5, r17	; 0x05
    2808:	61 e0       	ldi	r22, 0x01	; 1
    280a:	70 e0       	ldi	r23, 0x00	; 0
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	0e 94 7d 13 	call	0x26fa	; 0x26fa <delayUS>
    2814:	1e 83       	std	Y+6, r17	; 0x06
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	1f 91       	pop	r17
    281c:	08 95       	ret

0000281e <command>:
    281e:	cf 93       	push	r28
    2820:	c8 2f       	mov	r28, r24
    2822:	82 95       	swap	r24
    2824:	8f 70       	andi	r24, 0x0F	; 15
    2826:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <setPort>
    282a:	e0 e6       	ldi	r30, 0x60	; 96
    282c:	f6 e0       	ldi	r31, 0x06	; 6
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	86 83       	std	Z+6, r24	; 0x06
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	86 83       	std	Z+6, r24	; 0x06
    2836:	0e 94 fd 13 	call	0x27fa	; 0x27fa <Nybble>
    283a:	8c 2f       	mov	r24, r28
    283c:	8f 70       	andi	r24, 0x0F	; 15
    283e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <setPort>
    2842:	0e 94 fd 13 	call	0x27fa	; 0x27fa <Nybble>
    2846:	cf 91       	pop	r28
    2848:	08 95       	ret

0000284a <write>:
    284a:	cf 93       	push	r28
    284c:	c8 2f       	mov	r28, r24
    284e:	82 95       	swap	r24
    2850:	8f 70       	andi	r24, 0x0F	; 15
    2852:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <setPort>
    2856:	e0 e6       	ldi	r30, 0x60	; 96
    2858:	f6 e0       	ldi	r31, 0x06	; 6
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	85 83       	std	Z+5, r24	; 0x05
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	86 83       	std	Z+6, r24	; 0x06
    2862:	0e 94 fd 13 	call	0x27fa	; 0x27fa <Nybble>
    2866:	8c 2f       	mov	r24, r28
    2868:	8f 70       	andi	r24, 0x0F	; 15
    286a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <setPort>
    286e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <Nybble>
    2872:	cf 91       	pop	r28
    2874:	08 95       	ret

00002876 <vInitDisplay>:
 }
 
 void vInitDisplay() {
    2876:	ef 92       	push	r14
    2878:	ff 92       	push	r15
    287a:	0f 93       	push	r16
	PORTA.DIRSET = PIN4_bm;
    287c:	e0 e0       	ldi	r30, 0x00	; 0
    287e:	f6 e0       	ldi	r31, 0x06	; 6
    2880:	80 e1       	ldi	r24, 0x10	; 16
    2882:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN5_bm;
    2884:	80 e2       	ldi	r24, 0x20	; 32
    2886:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN6_bm;
    2888:	80 e4       	ldi	r24, 0x40	; 64
    288a:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN7_bm;
    288c:	80 e8       	ldi	r24, 0x80	; 128
    288e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN0_bm;
    2890:	a0 e6       	ldi	r26, 0x60	; 96
    2892:	b6 e0       	ldi	r27, 0x06	; 6
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	11 96       	adiw	r26, 0x01	; 1
    2898:	8c 93       	st	X, r24
    289a:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN1_bm;
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	11 96       	adiw	r26, 0x01	; 1
    28a0:	8c 93       	st	X, r24
    28a2:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN2_bm;
    28a4:	84 e0       	ldi	r24, 0x04	; 4
    28a6:	11 96       	adiw	r26, 0x01	; 1
    28a8:	8c 93       	st	X, r24
    28aa:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.OUT &= 0x0F;
    28ac:	84 81       	ldd	r24, Z+4	; 0x04
    28ae:	8f 70       	andi	r24, 0x0F	; 15
    28b0:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= 0xF8;
    28b2:	14 96       	adiw	r26, 0x04	; 4
    28b4:	8c 91       	ld	r24, X
    28b6:	14 97       	sbiw	r26, 0x04	; 4
    28b8:	88 7f       	andi	r24, 0xF8	; 248
    28ba:	14 96       	adiw	r26, 0x04	; 4
    28bc:	8c 93       	st	X, r24

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	66 e1       	ldi	r22, 0x16	; 22
    28c2:	88 e0       	ldi	r24, 0x08	; 8
    28c4:	0e 94 1a 08 	call	0x1034	; 0x1034 <xQueueGenericCreate>
    28c8:	80 93 e5 2c 	sts	0x2CE5, r24	; 0x802ce5 <displayLineQueue>
    28cc:	90 93 e6 2c 	sts	0x2CE6, r25	; 0x802ce6 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    28d0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <xEventGroupCreate>
    28d4:	80 93 e7 2c 	sts	0x2CE7, r24	; 0x802ce7 <egDisplayTiming>
    28d8:	90 93 e8 2c 	sts	0x2CE8, r25	; 0x802ce8 <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);	//von Hand auf Prio 2 gestellt
    28dc:	e1 2c       	mov	r14, r1
    28de:	f1 2c       	mov	r15, r1
    28e0:	02 e0       	ldi	r16, 0x02	; 2
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4e e5       	ldi	r20, 0x5E	; 94
    28e8:	51 e0       	ldi	r21, 0x01	; 1
    28ea:	66 e5       	ldi	r22, 0x56	; 86
    28ec:	70 e2       	ldi	r23, 0x20	; 32
    28ee:	89 ed       	ldi	r24, 0xD9	; 217
    28f0:	94 e1       	ldi	r25, 0x14	; 20
    28f2:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xTaskCreate>
 }
    28f6:	0f 91       	pop	r16
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	08 95       	ret

000028fe <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
	 switch(line) {
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	91 05       	cpc	r25, r1
    2902:	79 f0       	breq	.+30     	; 0x2922 <_displaySetPos+0x24>
    2904:	1c f4       	brge	.+6      	; 0x290c <_displaySetPos+0xe>
    2906:	89 2b       	or	r24, r25
    2908:	39 f0       	breq	.+14     	; 0x2918 <_displaySetPos+0x1a>
    290a:	19 c0       	rjmp	.+50     	; 0x293e <_displaySetPos+0x40>
    290c:	82 30       	cpi	r24, 0x02	; 2
    290e:	91 05       	cpc	r25, r1
    2910:	69 f0       	breq	.+26     	; 0x292c <_displaySetPos+0x2e>
    2912:	03 97       	sbiw	r24, 0x03	; 3
    2914:	81 f0       	breq	.+32     	; 0x2936 <_displaySetPos+0x38>
    2916:	13 c0       	rjmp	.+38     	; 0x293e <_displaySetPos+0x40>
		 case 0:
		 command(0x80 + 0x00 + pos);
    2918:	80 e8       	ldi	r24, 0x80	; 128
    291a:	86 0f       	add	r24, r22
    291c:	0e 94 0f 14 	call	0x281e	; 0x281e <command>
		 break;
    2920:	0e c0       	rjmp	.+28     	; 0x293e <_displaySetPos+0x40>
		 case 1:
		 command(0x80 + 0x40 + pos);
    2922:	80 ec       	ldi	r24, 0xC0	; 192
    2924:	86 0f       	add	r24, r22
    2926:	0e 94 0f 14 	call	0x281e	; 0x281e <command>
		 break;
    292a:	09 c0       	rjmp	.+18     	; 0x293e <_displaySetPos+0x40>
		 case 2:
		 command(0x80 + 0x14 + pos);
    292c:	84 e9       	ldi	r24, 0x94	; 148
    292e:	86 0f       	add	r24, r22
    2930:	0e 94 0f 14 	call	0x281e	; 0x281e <command>
		 break;
    2934:	04 c0       	rjmp	.+8      	; 0x293e <_displaySetPos+0x40>
		 case 3:
		 command(0x80 + 0x54 + pos);
    2936:	84 ed       	ldi	r24, 0xD4	; 212
    2938:	86 0f       	add	r24, r22
    293a:	0e 94 0f 14 	call	0x281e	; 0x281e <command>
		 break;
	 }
	 delayUS(39);
    293e:	67 e2       	ldi	r22, 0x27	; 39
    2940:	70 e0       	ldi	r23, 0x00	; 0
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	0e 94 7d 13 	call	0x26fa	; 0x26fa <delayUS>
    294a:	08 95       	ret

0000294c <_displayWriteChar>:
 }

 void _displayWriteChar(char c) {
	 write(c);
    294c:	0e 94 25 14 	call	0x284a	; 0x284a <write>
	 delayUS(43);
    2950:	6b e2       	ldi	r22, 0x2B	; 43
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 7d 13 	call	0x26fa	; 0x26fa <delayUS>
    295c:	08 95       	ret

0000295e <_displayWriteString>:
 }
 
 void _displayWriteString(char* s) {
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	fc 01       	movw	r30, r24
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
    2968:	80 81       	ld	r24, Z
    296a:	81 11       	cpse	r24, r1
    296c:	0a c0       	rjmp	.+20     	; 0x2982 <_displayWriteString+0x24>
    296e:	11 c0       	rjmp	.+34     	; 0x2992 <_displayWriteString+0x34>
    2970:	89 91       	ld	r24, Y+
    2972:	88 23       	and	r24, r24
    2974:	71 f0       	breq	.+28     	; 0x2992 <_displayWriteString+0x34>
			 break;
		 }
		 _displayWriteChar(s[i]);
    2976:	0e 94 a6 14 	call	0x294c	; 0x294c <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    297a:	0c 17       	cp	r16, r28
    297c:	1d 07       	cpc	r17, r29
    297e:	c1 f7       	brne	.-16     	; 0x2970 <_displayWriteString+0x12>
    2980:	08 c0       	rjmp	.+16     	; 0x2992 <_displayWriteString+0x34>
    2982:	8f 01       	movw	r16, r30
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
    2984:	0e 94 a6 14 	call	0x294c	; 0x294c <_displayWriteChar>
    2988:	e8 01       	movw	r28, r16
    298a:	21 96       	adiw	r28, 0x01	; 1
    298c:	0c 5e       	subi	r16, 0xEC	; 236
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	ef cf       	rjmp	.-34     	; 0x2970 <_displayWriteString+0x12>
	 }
 }
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	08 95       	ret

0000299c <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	ea 01       	movw	r28, r20
	 _displaySetPos(line, pos);
    29a2:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_displaySetPos>
	 _displayWriteString(s);
    29a6:	ce 01       	movw	r24, r28
    29a8:	0e 94 af 14 	call	0x295e	; 0x295e <_displayWriteString>
 }
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	08 95       	ret

000029b2 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	c6 56       	subi	r28, 0x66	; 102
    29bc:	d1 09       	sbc	r29, r1
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	5e 01       	movw	r10, r28
    29c4:	41 e5       	ldi	r20, 0x51	; 81
    29c6:	a4 0e       	add	r10, r20
    29c8:	b1 1c       	adc	r11, r1
    29ca:	fe 01       	movw	r30, r28
    29cc:	31 96       	adiw	r30, 0x01	; 1
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
			displayLines[i][j] = 0x20;
    29ce:	20 e2       	ldi	r18, 0x20	; 32
    29d0:	08 c0       	rjmp	.+16     	; 0x29e2 <vDisplayUpdateTask+0x30>
    29d2:	21 93       	st	Z+, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    29d4:	e8 17       	cp	r30, r24
    29d6:	f9 07       	cpc	r31, r25
    29d8:	e1 f7       	brne	.-8      	; 0x29d2 <vDisplayUpdateTask+0x20>
    29da:	fc 01       	movw	r30, r24

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    29dc:	a8 16       	cp	r10, r24
    29de:	b9 06       	cpc	r11, r25
    29e0:	19 f0       	breq	.+6      	; 0x29e8 <vDisplayUpdateTask+0x36>
    29e2:	cf 01       	movw	r24, r30
    29e4:	44 96       	adiw	r24, 0x14	; 20
    29e6:	f5 cf       	rjmp	.-22     	; 0x29d2 <vDisplayUpdateTask+0x20>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    29e8:	60 e4       	ldi	r22, 0x40	; 64
    29ea:	7c e9       	ldi	r23, 0x9C	; 156
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0e 94 7d 13 	call	0x26fa	; 0x26fa <delayUS>
	 setPort(0x03);
    29f4:	83 e0       	ldi	r24, 0x03	; 3
    29f6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <setPort>
	 delayUS(5000);
    29fa:	68 e8       	ldi	r22, 0x88	; 136
    29fc:	73 e1       	ldi	r23, 0x13	; 19
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e 94 7d 13 	call	0x26fa	; 0x26fa <delayUS>
	 Nybble();
    2a06:	0e 94 fd 13 	call	0x27fa	; 0x27fa <Nybble>
	 delayUS(160);
    2a0a:	60 ea       	ldi	r22, 0xA0	; 160
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	0e 94 7d 13 	call	0x26fa	; 0x26fa <delayUS>
	 Nybble();
    2a16:	0e 94 fd 13 	call	0x27fa	; 0x27fa <Nybble>
	 delayUS(160);
    2a1a:	60 ea       	ldi	r22, 0xA0	; 160
    2a1c:	70 e0       	ldi	r23, 0x00	; 0
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	0e 94 7d 13 	call	0x26fa	; 0x26fa <delayUS>
	 Nybble();
    2a26:	0e 94 fd 13 	call	0x27fa	; 0x27fa <Nybble>
	 delayUS(160);
    2a2a:	60 ea       	ldi	r22, 0xA0	; 160
    2a2c:	70 e0       	ldi	r23, 0x00	; 0
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 7d 13 	call	0x26fa	; 0x26fa <delayUS>
	 setPort(0x02);
    2a36:	82 e0       	ldi	r24, 0x02	; 2
    2a38:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <setPort>
	 Nybble();
    2a3c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <Nybble>
	 command(0x28);
    2a40:	88 e2       	ldi	r24, 0x28	; 40
    2a42:	0e 94 0f 14 	call	0x281e	; 0x281e <command>
	 command(0x10);
    2a46:	80 e1       	ldi	r24, 0x10	; 16
    2a48:	0e 94 0f 14 	call	0x281e	; 0x281e <command>
	 command(0x0C); //Cursor and Blinking off
    2a4c:	8c e0       	ldi	r24, 0x0C	; 12
    2a4e:	0e 94 0f 14 	call	0x281e	; 0x281e <command>
	 command(0x06);
    2a52:	86 e0       	ldi	r24, 0x06	; 6
    2a54:	0e 94 0f 14 	call	0x281e	; 0x281e <command>
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    2a58:	10 e2       	ldi	r17, 0x20	; 32
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    2a5a:	6e 01       	movw	r12, r28
    2a5c:	51 e5       	ldi	r21, 0x51	; 81
    2a5e:	c5 0e       	add	r12, r21
    2a60:	d1 1c       	adc	r13, r1
    2a62:	0f 2e       	mov	r0, r31
    2a64:	f4 e1       	ldi	r31, 0x14	; 20
    2a66:	4f 2e       	mov	r4, r31
    2a68:	f0 2d       	mov	r31, r0
    2a6a:	0f 2e       	mov	r0, r31
    2a6c:	f6 e1       	ldi	r31, 0x16	; 22
    2a6e:	8f 2e       	mov	r8, r31
    2a70:	91 2c       	mov	r9, r1
    2a72:	f0 2d       	mov	r31, r0
    2a74:	5c 2c       	mov	r5, r12
    2a76:	0d 2d       	mov	r16, r13
	 command(0x10);
	 command(0x0C); //Cursor and Blinking off
	 command(0x06);
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    2a78:	68 ec       	ldi	r22, 0xC8	; 200
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	50 e0       	ldi	r21, 0x00	; 0
    2a88:	ba 01       	movw	r22, r20
    2a8a:	80 91 e7 2c 	lds	r24, 0x2CE7	; 0x802ce7 <egDisplayTiming>
    2a8e:	90 91 e8 2c 	lds	r25, 0x2CE8	; 0x802ce8 <egDisplayTiming+0x1>
    2a92:	0e 94 cd 03 	call	0x79a	; 0x79a <xEventGroupClearBits>
    2a96:	67 2b       	or	r22, r23
    2a98:	68 2b       	or	r22, r24
    2a9a:	69 2b       	or	r22, r25
    2a9c:	09 f4       	brne	.+2      	; 0x2aa0 <vDisplayUpdateTask+0xee>
    2a9e:	49 c0       	rjmp	.+146    	; 0x2b32 <vDisplayUpdateTask+0x180>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2aa0:	42 e0       	ldi	r20, 0x02	; 2
    2aa2:	50 e0       	ldi	r21, 0x00	; 0
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	80 91 e7 2c 	lds	r24, 0x2CE7	; 0x802ce7 <egDisplayTiming>
    2aac:	90 91 e8 2c 	lds	r25, 0x2CE8	; 0x802ce8 <egDisplayTiming+0x1>
    2ab0:	0e 94 cd 03 	call	0x79a	; 0x79a <xEventGroupClearBits>
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	31 96       	adiw	r30, 0x01	; 1
    2ab8:	08 c0       	rjmp	.+16     	; 0x2aca <vDisplayUpdateTask+0x118>
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    2aba:	11 93       	st	Z+, r17
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    2abc:	e8 17       	cp	r30, r24
    2abe:	f9 07       	cpc	r31, r25
    2ac0:	e1 f7       	brne	.-8      	; 0x2aba <vDisplayUpdateTask+0x108>
    2ac2:	fc 01       	movw	r30, r24
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    2ac4:	8a 15       	cp	r24, r10
    2ac6:	9b 05       	cpc	r25, r11
    2ac8:	a1 f1       	breq	.+104    	; 0x2b32 <vDisplayUpdateTask+0x180>
    2aca:	cf 01       	movw	r24, r30
    2acc:	44 96       	adiw	r24, 0x14	; 20
    2ace:	f5 cf       	rjmp	.-22     	; 0x2aba <vDisplayUpdateTask+0x108>
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    2ad0:	2f ef       	ldi	r18, 0xFF	; 255
    2ad2:	3f ef       	ldi	r19, 0xFF	; 255
    2ad4:	a9 01       	movw	r20, r18
    2ad6:	65 2d       	mov	r22, r5
    2ad8:	70 2f       	mov	r23, r16
    2ada:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <displayLineQueue>
    2ade:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <displayLineQueue+0x1>
    2ae2:	0e 94 36 09 	call	0x126c	; 0x126c <xQueueReceive>
    2ae6:	88 23       	and	r24, r24
    2ae8:	21 f1       	breq	.+72     	; 0x2b32 <vDisplayUpdateTask+0x180>
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    2aea:	f6 01       	movw	r30, r12
    2aec:	21 81       	ldd	r18, Z+1	; 0x01
    2aee:	82 2f       	mov	r24, r18
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	44 97       	sbiw	r24, 0x14	; 20
    2af4:	f4 f4       	brge	.+60     	; 0x2b32 <vDisplayUpdateTask+0x180>
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	88 23       	and	r24, r24
    2afa:	d9 f0       	breq	.+54     	; 0x2b32 <vDisplayUpdateTask+0x180>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    2afc:	90 81       	ld	r25, Z
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	d9 01       	movw	r26, r18
    2b02:	49 9e       	mul	r4, r25
    2b04:	a0 0d       	add	r26, r0
    2b06:	b1 1d       	adc	r27, r1
    2b08:	11 24       	eor	r1, r1
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	4c 0f       	add	r20, r28
    2b10:	5d 1f       	adc	r21, r29
    2b12:	a4 0f       	add	r26, r20
    2b14:	b5 1f       	adc	r27, r21
    2b16:	33 96       	adiw	r30, 0x03	; 3
    2b18:	a4 01       	movw	r20, r8
    2b1a:	42 1b       	sub	r20, r18
    2b1c:	53 0b       	sbc	r21, r19
    2b1e:	9a 01       	movw	r18, r20
    2b20:	2c 0d       	add	r18, r12
    2b22:	3d 1d       	adc	r19, r13
    2b24:	8d 93       	st	X+, r24
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    2b26:	e2 17       	cp	r30, r18
    2b28:	f3 07       	cpc	r31, r19
    2b2a:	19 f0       	breq	.+6      	; 0x2b32 <vDisplayUpdateTask+0x180>
    2b2c:	81 91       	ld	r24, Z+
    2b2e:	81 11       	cpse	r24, r1
    2b30:	f9 cf       	rjmp	.-14     	; 0x2b24 <vDisplayUpdateTask+0x172>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    2b32:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <displayLineQueue>
    2b36:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <displayLineQueue+0x1>
    2b3a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <uxQueueMessagesWaiting>
    2b3e:	81 11       	cpse	r24, r1
    2b40:	c7 cf       	rjmp	.-114    	; 0x2ad0 <vDisplayUpdateTask+0x11e>
    2b42:	ce 01       	movw	r24, r28
    2b44:	01 96       	adiw	r24, 0x01	; 1
    2b46:	7c 01       	movw	r14, r24
    2b48:	61 2c       	mov	r6, r1
    2b4a:	71 2c       	mov	r7, r1
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    2b4c:	a7 01       	movw	r20, r14
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	70 e0       	ldi	r23, 0x00	; 0
    2b52:	c3 01       	movw	r24, r6
    2b54:	0e 94 ce 14 	call	0x299c	; 0x299c <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    2b58:	9f ef       	ldi	r25, 0xFF	; 255
    2b5a:	69 1a       	sub	r6, r25
    2b5c:	79 0a       	sbc	r7, r25
    2b5e:	e4 e1       	ldi	r30, 0x14	; 20
    2b60:	ee 0e       	add	r14, r30
    2b62:	f1 1c       	adc	r15, r1
    2b64:	f4 e0       	ldi	r31, 0x04	; 4
    2b66:	6f 16       	cp	r6, r31
    2b68:	71 04       	cpc	r7, r1
    2b6a:	81 f7       	brne	.-32     	; 0x2b4c <vDisplayUpdateTask+0x19a>
    2b6c:	85 cf       	rjmp	.-246    	; 0x2a78 <vDisplayUpdateTask+0xc6>

00002b6e <vDisplayClear>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2b6e:	42 e0       	ldi	r20, 0x02	; 2
    2b70:	50 e0       	ldi	r21, 0x00	; 0
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	80 91 e7 2c 	lds	r24, 0x2CE7	; 0x802ce7 <egDisplayTiming>
    2b7a:	90 91 e8 2c 	lds	r25, 0x2CE8	; 0x802ce8 <egDisplayTiming+0x1>
    2b7e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <xEventGroupSetBits>
    2b82:	08 95       	ret

00002b84 <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    2b84:	2f 92       	push	r2
    2b86:	3f 92       	push	r3
    2b88:	4f 92       	push	r4
    2b8a:	5f 92       	push	r5
    2b8c:	6f 92       	push	r6
    2b8e:	7f 92       	push	r7
    2b90:	8f 92       	push	r8
    2b92:	9f 92       	push	r9
    2b94:	af 92       	push	r10
    2b96:	bf 92       	push	r11
    2b98:	cf 92       	push	r12
    2b9a:	df 92       	push	r13
    2b9c:	ef 92       	push	r14
    2b9e:	ff 92       	push	r15
    2ba0:	0f 93       	push	r16
    2ba2:	1f 93       	push	r17
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	6d 97       	sbiw	r28, 0x1d	; 29
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	2b a9       	ldd	r18, Y+51	; 0x33
    2bb4:	2b 8f       	std	Y+27, r18	; 0x1b
    2bb6:	af a9       	ldd	r26, Y+55	; 0x37
    2bb8:	b8 ad       	ldd	r27, Y+56	; 0x38
	va_list arg;	
	va_start(arg, fmt);
    2bba:	7e 01       	movw	r14, r28
    2bbc:	39 e3       	ldi	r19, 0x39	; 57
    2bbe:	e3 0e       	add	r14, r19
    2bc0:	f1 1c       	adc	r15, r1
    2bc2:	2e ed       	ldi	r18, 0xDE	; 222
    2bc4:	3c e2       	ldi	r19, 0x2C	; 44
	display_vprintf(line, pos, fmt, arg);
    2bc6:	ea ec       	ldi	r30, 0xCA	; 202
    2bc8:	fc e2       	ldi	r31, 0x2C	; 44
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
    2bca:	11 92       	st	Z+, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    2bcc:	e2 17       	cp	r30, r18
    2bce:	f3 07       	cpc	r31, r19
    2bd0:	e1 f7       	brne	.-8      	; 0x2bca <vDisplayWriteStringAtPos+0x46>
    2bd2:	0f 2e       	mov	r0, r31
    2bd4:	f6 eb       	ldi	r31, 0xB6	; 182
    2bd6:	af 2e       	mov	r10, r31
    2bd8:	fc e2       	ldi	r31, 0x2C	; 44
    2bda:	bf 2e       	mov	r11, r31
    2bdc:	f0 2d       	mov	r31, r0
    2bde:	2a ec       	ldi	r18, 0xCA	; 202
    2be0:	3c e2       	ldi	r19, 0x2C	; 44
    2be2:	f5 01       	movw	r30, r10
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
    2be4:	11 92       	st	Z+, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    2be6:	e2 17       	cp	r30, r18
    2be8:	f3 07       	cpc	r31, r19
    2bea:	e1 f7       	brne	.-8      	; 0x2be4 <vDisplayWriteStringAtPos+0x60>
    2bec:	81 2c       	mov	r8, r1
    2bee:	91 2c       	mov	r9, r1
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    2bf0:	0f 2e       	mov	r0, r31
    2bf2:	fa ec       	ldi	r31, 0xCA	; 202
    2bf4:	cf 2e       	mov	r12, r31
    2bf6:	fc e2       	ldi	r31, 0x2C	; 44
    2bf8:	df 2e       	mov	r13, r31
    2bfa:	f0 2d       	mov	r31, r0
    2bfc:	fc c2       	rjmp	.+1528   	; 0x31f6 <vDisplayWriteStringAtPos+0x672>
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
    2bfe:	85 32       	cpi	r24, 0x25	; 37
    2c00:	09 f0       	breq	.+2      	; 0x2c04 <vDisplayWriteStringAtPos+0x80>
    2c02:	e8 c2       	rjmp	.+1488   	; 0x31d4 <vDisplayWriteStringAtPos+0x650>
			switch (ch = *fmt++) {
    2c04:	2d 01       	movw	r4, r26
    2c06:	82 e0       	ldi	r24, 0x02	; 2
    2c08:	48 0e       	add	r4, r24
    2c0a:	51 1c       	adc	r5, r1
    2c0c:	11 96       	adiw	r26, 0x01	; 1
    2c0e:	8c 91       	ld	r24, X
    2c10:	85 36       	cpi	r24, 0x65	; 101
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <vDisplayWriteStringAtPos+0x92>
    2c14:	db c1       	rjmp	.+950    	; 0x2fcc <vDisplayWriteStringAtPos+0x448>
    2c16:	38 f4       	brcc	.+14     	; 0x2c26 <vDisplayWriteStringAtPos+0xa2>
    2c18:	83 36       	cpi	r24, 0x63	; 99
    2c1a:	c1 f0       	breq	.+48     	; 0x2c4c <vDisplayWriteStringAtPos+0xc8>
    2c1c:	08 f0       	brcs	.+2      	; 0x2c20 <vDisplayWriteStringAtPos+0x9c>
    2c1e:	48 c0       	rjmp	.+144    	; 0x2cb0 <vDisplayWriteStringAtPos+0x12c>
    2c20:	85 32       	cpi	r24, 0x25	; 37
    2c22:	51 f0       	breq	.+20     	; 0x2c38 <vDisplayWriteStringAtPos+0xb4>
    2c24:	e7 c2       	rjmp	.+1486   	; 0x31f4 <vDisplayWriteStringAtPos+0x670>
    2c26:	83 37       	cpi	r24, 0x73	; 115
    2c28:	f9 f0       	breq	.+62     	; 0x2c68 <vDisplayWriteStringAtPos+0xe4>
    2c2a:	88 37       	cpi	r24, 0x78	; 120
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <vDisplayWriteStringAtPos+0xac>
    2c2e:	68 c0       	rjmp	.+208    	; 0x2d00 <vDisplayWriteStringAtPos+0x17c>
    2c30:	86 36       	cpi	r24, 0x66	; 102
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <vDisplayWriteStringAtPos+0xb2>
    2c34:	df c2       	rjmp	.+1470   	; 0x31f4 <vDisplayWriteStringAtPos+0x670>
    2c36:	8c c0       	rjmp	.+280    	; 0x2d50 <vDisplayWriteStringAtPos+0x1cc>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    2c38:	f4 01       	movw	r30, r8
    2c3a:	ea 54       	subi	r30, 0x4A	; 74
    2c3c:	f3 4d       	sbci	r31, 0xD3	; 211
    2c3e:	95 e2       	ldi	r25, 0x25	; 37
    2c40:	90 83       	st	Z, r25
				length++;
    2c42:	af ef       	ldi	r26, 0xFF	; 255
    2c44:	8a 1a       	sub	r8, r26
    2c46:	9a 0a       	sbc	r9, r26
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2c48:	d2 01       	movw	r26, r4
    2c4a:	d5 c2       	rjmp	.+1450   	; 0x31f6 <vDisplayWriteStringAtPos+0x672>
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
				str[length] = char_temp;
    2c4c:	f4 01       	movw	r30, r8
    2c4e:	ea 54       	subi	r30, 0x4A	; 74
    2c50:	f3 4d       	sbci	r31, 0xD3	; 211
    2c52:	d7 01       	movw	r26, r14
    2c54:	8c 91       	ld	r24, X
    2c56:	80 83       	st	Z, r24
				length++;
    2c58:	bf ef       	ldi	r27, 0xFF	; 255
    2c5a:	8b 1a       	sub	r8, r27
    2c5c:	9b 0a       	sbc	r9, r27
				length++;
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    2c5e:	f7 01       	movw	r30, r14
    2c60:	32 96       	adiw	r30, 0x02	; 2
    2c62:	7f 01       	movw	r14, r30
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2c64:	d2 01       	movw	r26, r4
    2c66:	c7 c2       	rjmp	.+1422   	; 0x31f6 <vDisplayWriteStringAtPos+0x672>
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    2c68:	a7 01       	movw	r20, r14
    2c6a:	4e 5f       	subi	r20, 0xFE	; 254
    2c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6e:	d7 01       	movw	r26, r14
    2c70:	8d 91       	ld	r24, X+
    2c72:	9c 91       	ld	r25, X
    2c74:	9c 01       	movw	r18, r24
    2c76:	b4 01       	movw	r22, r8
    2c78:	f4 01       	movw	r30, r8
    2c7a:	ea 54       	subi	r30, 0x4A	; 74
    2c7c:	f3 4d       	sbci	r31, 0xD3	; 211
				for(int i = 0; i < strlen(string_temp);i++) {
    2c7e:	00 e0       	ldi	r16, 0x00	; 0
    2c80:	10 e0       	ldi	r17, 0x00	; 0
    2c82:	06 c0       	rjmp	.+12     	; 0x2c90 <vDisplayWriteStringAtPos+0x10c>
					str[length+i] = string_temp[i];
    2c84:	d9 01       	movw	r26, r18
    2c86:	fd 90       	ld	r15, X+
    2c88:	9d 01       	movw	r18, r26
    2c8a:	f1 92       	st	Z+, r15
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    2c8c:	0f 5f       	subi	r16, 0xFF	; 255
    2c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c90:	dc 01       	movw	r26, r24
    2c92:	0d 90       	ld	r0, X+
    2c94:	00 20       	and	r0, r0
    2c96:	e9 f7       	brne	.-6      	; 0x2c92 <vDisplayWriteStringAtPos+0x10e>
    2c98:	11 97       	sbiw	r26, 0x01	; 1
    2c9a:	a8 1b       	sub	r26, r24
    2c9c:	b9 0b       	sbc	r27, r25
    2c9e:	0a 17       	cp	r16, r26
    2ca0:	1b 07       	cpc	r17, r27
    2ca2:	80 f3       	brcs	.-32     	; 0x2c84 <vDisplayWriteStringAtPos+0x100>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    2ca4:	4d 01       	movw	r8, r26
    2ca6:	86 0e       	add	r8, r22
    2ca8:	97 1e       	adc	r9, r23
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    2caa:	7a 01       	movw	r14, r20
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2cac:	d2 01       	movw	r26, r4
    2cae:	a3 c2       	rjmp	.+1350   	; 0x31f6 <vDisplayWriteStringAtPos+0x672>
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    2cb0:	87 01       	movw	r16, r14
    2cb2:	0e 5f       	subi	r16, 0xFE	; 254
    2cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2cb6:	4a e0       	ldi	r20, 0x0A	; 10
    2cb8:	b6 01       	movw	r22, r12
    2cba:	f7 01       	movw	r30, r14
    2cbc:	80 81       	ld	r24, Z
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	0e 94 49 20 	call	0x4092	; 0x4092 <__itoa_ncheck>
    2cc4:	94 01       	movw	r18, r8
    2cc6:	d4 01       	movw	r26, r8
    2cc8:	aa 54       	subi	r26, 0x4A	; 74
    2cca:	b3 4d       	sbci	r27, 0xD3	; 211
    2ccc:	4a ec       	ldi	r20, 0xCA	; 202
    2cce:	5c e2       	ldi	r21, 0x2C	; 44
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	05 c0       	rjmp	.+10     	; 0x2ce0 <vDisplayWriteStringAtPos+0x15c>
					str[length+i] = buffer[i];
    2cd6:	fa 01       	movw	r30, r20
    2cd8:	61 91       	ld	r22, Z+
    2cda:	af 01       	movw	r20, r30
    2cdc:	6d 93       	st	X+, r22

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    2cde:	01 96       	adiw	r24, 0x01	; 1
    2ce0:	f6 01       	movw	r30, r12
    2ce2:	01 90       	ld	r0, Z+
    2ce4:	00 20       	and	r0, r0
    2ce6:	e9 f7       	brne	.-6      	; 0x2ce2 <vDisplayWriteStringAtPos+0x15e>
    2ce8:	31 97       	sbiw	r30, 0x01	; 1
    2cea:	ea 5c       	subi	r30, 0xCA	; 202
    2cec:	fc 42       	sbci	r31, 0x2C	; 44
    2cee:	8e 17       	cp	r24, r30
    2cf0:	9f 07       	cpc	r25, r31
    2cf2:	88 f3       	brcs	.-30     	; 0x2cd6 <vDisplayWriteStringAtPos+0x152>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2cf4:	4f 01       	movw	r8, r30
    2cf6:	82 0e       	add	r8, r18
    2cf8:	93 1e       	adc	r9, r19
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    2cfa:	78 01       	movw	r14, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2cfc:	d2 01       	movw	r26, r4
    2cfe:	7b c2       	rjmp	.+1270   	; 0x31f6 <vDisplayWriteStringAtPos+0x672>
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2d00:	87 01       	movw	r16, r14
    2d02:	0e 5f       	subi	r16, 0xFE	; 254
    2d04:	1f 4f       	sbci	r17, 0xFF	; 255
    2d06:	40 e1       	ldi	r20, 0x10	; 16
    2d08:	b6 01       	movw	r22, r12
    2d0a:	d7 01       	movw	r26, r14
    2d0c:	8d 91       	ld	r24, X+
    2d0e:	9c 91       	ld	r25, X
    2d10:	0e 94 49 20 	call	0x4092	; 0x4092 <__itoa_ncheck>
    2d14:	94 01       	movw	r18, r8
    2d16:	f4 01       	movw	r30, r8
    2d18:	ea 54       	subi	r30, 0x4A	; 74
    2d1a:	f3 4d       	sbci	r31, 0xD3	; 211
    2d1c:	4a ec       	ldi	r20, 0xCA	; 202
    2d1e:	5c e2       	ldi	r21, 0x2C	; 44
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	05 c0       	rjmp	.+10     	; 0x2d30 <vDisplayWriteStringAtPos+0x1ac>
					str[length+i] = buffer[i];
    2d26:	da 01       	movw	r26, r20
    2d28:	6d 91       	ld	r22, X+
    2d2a:	ad 01       	movw	r20, r26
    2d2c:	61 93       	st	Z+, r22

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    2d2e:	01 96       	adiw	r24, 0x01	; 1
    2d30:	d6 01       	movw	r26, r12
    2d32:	0d 90       	ld	r0, X+
    2d34:	00 20       	and	r0, r0
    2d36:	e9 f7       	brne	.-6      	; 0x2d32 <vDisplayWriteStringAtPos+0x1ae>
    2d38:	11 97       	sbiw	r26, 0x01	; 1
    2d3a:	aa 5c       	subi	r26, 0xCA	; 202
    2d3c:	bc 42       	sbci	r27, 0x2C	; 44
    2d3e:	8a 17       	cp	r24, r26
    2d40:	9b 07       	cpc	r25, r27
    2d42:	88 f3       	brcs	.-30     	; 0x2d26 <vDisplayWriteStringAtPos+0x1a2>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2d44:	4d 01       	movw	r8, r26
    2d46:	82 0e       	add	r8, r18
    2d48:	93 1e       	adc	r9, r19
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2d4a:	78 01       	movw	r14, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2d4c:	d2 01       	movw	r26, r4
    2d4e:	53 c2       	rjmp	.+1190   	; 0x31f6 <vDisplayWriteStringAtPos+0x672>
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    2d50:	17 01       	movw	r2, r14
    2d52:	b4 e0       	ldi	r27, 0x04	; 4
    2d54:	2b 0e       	add	r2, r27
    2d56:	31 1c       	adc	r3, r1
    2d58:	d7 01       	movw	r26, r14
    2d5a:	8d 91       	ld	r24, X+
    2d5c:	9d 91       	ld	r25, X+
    2d5e:	0d 90       	ld	r0, X+
    2d60:	bc 91       	ld	r27, X
    2d62:	a0 2d       	mov	r26, r0
    2d64:	8f 8b       	std	Y+23, r24	; 0x17
    2d66:	98 8f       	std	Y+24, r25	; 0x18
    2d68:	a9 8f       	std	Y+25, r26	; 0x19
    2d6a:	ba 8f       	std	Y+26, r27	; 0x1a

    int exponent = 0;
    int places = 0;
    static const int width = 4;

    if (value == 0.0) {
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	a9 01       	movw	r20, r18
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__cmpsf2>
    2d7a:	81 11       	cpse	r24, r1
    2d7c:	05 c0       	rjmp	.+10     	; 0x2d88 <vDisplayWriteStringAtPos+0x204>
        buffer[0] = '0';
    2d7e:	20 e3       	ldi	r18, 0x30	; 48
    2d80:	f6 01       	movw	r30, r12
    2d82:	20 83       	st	Z, r18
        buffer[1] = '\0';
    2d84:	11 82       	std	Z+1, r1	; 0x01
    2d86:	04 c1       	rjmp	.+520    	; 0x2f90 <vDisplayWriteStringAtPos+0x40c>
        return;
    }         

    if (value < 0.0) {
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	a9 01       	movw	r20, r18
    2d8e:	6f 89       	ldd	r22, Y+23	; 0x17
    2d90:	78 8d       	ldd	r23, Y+24	; 0x18
    2d92:	89 8d       	ldd	r24, Y+25	; 0x19
    2d94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d96:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__cmpsf2>
    2d9a:	88 23       	and	r24, r24
    2d9c:	9c f4       	brge	.+38     	; 0x2dc4 <vDisplayWriteStringAtPos+0x240>
        *buffer++ = '-';
    2d9e:	ed e2       	ldi	r30, 0x2D	; 45
    2da0:	d6 01       	movw	r26, r12
    2da2:	ec 93       	st	X, r30
        value = -value;
    2da4:	8f 89       	ldd	r24, Y+23	; 0x17
    2da6:	98 8d       	ldd	r25, Y+24	; 0x18
    2da8:	a9 8d       	ldd	r26, Y+25	; 0x19
    2daa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2dac:	b0 58       	subi	r27, 0x80	; 128
    2dae:	8f 8b       	std	Y+23, r24	; 0x17
    2db0:	98 8f       	std	Y+24, r25	; 0x18
    2db2:	a9 8f       	std	Y+25, r26	; 0x19
    2db4:	ba 8f       	std	Y+26, r27	; 0x1a
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
        *buffer++ = '-';
    2db6:	0f 2e       	mov	r0, r31
    2db8:	fb ec       	ldi	r31, 0xCB	; 203
    2dba:	6f 2e       	mov	r6, r31
    2dbc:	fc e2       	ldi	r31, 0x2C	; 44
    2dbe:	7f 2e       	mov	r7, r31
    2dc0:	f0 2d       	mov	r31, r0
    2dc2:	01 c0       	rjmp	.+2      	; 0x2dc6 <vDisplayWriteStringAtPos+0x242>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
    2dc4:	36 01       	movw	r6, r12

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e8       	ldi	r20, 0x80	; 128
    2dcc:	5f e3       	ldi	r21, 0x3F	; 63
    2dce:	6f 89       	ldd	r22, Y+23	; 0x17
    2dd0:	78 8d       	ldd	r23, Y+24	; 0x18
    2dd2:	89 8d       	ldd	r24, Y+25	; 0x19
    2dd4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2dd6:	0e 94 31 1b 	call	0x3662	; 0x3662 <__gesf2>
    2dda:	88 23       	and	r24, r24
    2ddc:	0c f4       	brge	.+2      	; 0x2de0 <vDisplayWriteStringAtPos+0x25c>
    2dde:	44 c2       	rjmp	.+1160   	; 0x3268 <vDisplayWriteStringAtPos+0x6e4>
    2de0:	00 e0       	ldi	r16, 0x00	; 0
    2de2:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e2       	ldi	r20, 0x20	; 32
    2dea:	51 e4       	ldi	r21, 0x41	; 65
    2dec:	6f 89       	ldd	r22, Y+23	; 0x17
    2dee:	78 8d       	ldd	r23, Y+24	; 0x18
    2df0:	89 8d       	ldd	r24, Y+25	; 0x19
    2df2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2df4:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__divsf3>
    2df8:	6f 8b       	std	Y+23, r22	; 0x17
    2dfa:	78 8f       	std	Y+24, r23	; 0x18
    2dfc:	89 8f       	std	Y+25, r24	; 0x19
    2dfe:	9a 8f       	std	Y+26, r25	; 0x1a
        ++exponent;
    2e00:	0f 5f       	subi	r16, 0xFF	; 255
    2e02:	1f 4f       	sbci	r17, 0xFF	; 255

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e8       	ldi	r20, 0x80	; 128
    2e0a:	5f e3       	ldi	r21, 0x3F	; 63
    2e0c:	0e 94 31 1b 	call	0x3662	; 0x3662 <__gesf2>
    2e10:	88 23       	and	r24, r24
    2e12:	44 f7       	brge	.-48     	; 0x2de4 <vDisplayWriteStringAtPos+0x260>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2e14:	2d ec       	ldi	r18, 0xCD	; 205
    2e16:	3c ec       	ldi	r19, 0xCC	; 204
    2e18:	4c ec       	ldi	r20, 0xCC	; 204
    2e1a:	5d e3       	ldi	r21, 0x3D	; 61
    2e1c:	6f 89       	ldd	r22, Y+23	; 0x17
    2e1e:	78 8d       	ldd	r23, Y+24	; 0x18
    2e20:	89 8d       	ldd	r24, Y+25	; 0x19
    2e22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e24:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__cmpsf2>
    2e28:	88 23       	and	r24, r24
    2e2a:	1c f0       	brlt	.+6      	; 0x2e32 <vDisplayWriteStringAtPos+0x2ae>
    2e2c:	1a c0       	rjmp	.+52     	; 0x2e62 <vDisplayWriteStringAtPos+0x2de>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    2e2e:	00 e0       	ldi	r16, 0x00	; 0
    2e30:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
        value *= 10.0;
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e2       	ldi	r20, 0x20	; 32
    2e38:	51 e4       	ldi	r21, 0x41	; 65
    2e3a:	6f 89       	ldd	r22, Y+23	; 0x17
    2e3c:	78 8d       	ldd	r23, Y+24	; 0x18
    2e3e:	89 8d       	ldd	r24, Y+25	; 0x19
    2e40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e42:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    2e46:	6f 8b       	std	Y+23, r22	; 0x17
    2e48:	78 8f       	std	Y+24, r23	; 0x18
    2e4a:	89 8f       	std	Y+25, r24	; 0x19
    2e4c:	9a 8f       	std	Y+26, r25	; 0x1a
        --exponent;
    2e4e:	01 50       	subi	r16, 0x01	; 1
    2e50:	11 09       	sbc	r17, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2e52:	2d ec       	ldi	r18, 0xCD	; 205
    2e54:	3c ec       	ldi	r19, 0xCC	; 204
    2e56:	4c ec       	ldi	r20, 0xCC	; 204
    2e58:	5d e3       	ldi	r21, 0x3D	; 61
    2e5a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__cmpsf2>
    2e5e:	88 23       	and	r24, r24
    2e60:	44 f3       	brlt	.-48     	; 0x2e32 <vDisplayWriteStringAtPos+0x2ae>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2e62:	10 16       	cp	r1, r16
    2e64:	11 06       	cpc	r1, r17
    2e66:	ac f5       	brge	.+106    	; 0x2ed2 <vDisplayWriteStringAtPos+0x34e>
    2e68:	73 01       	movw	r14, r6
    2e6a:	d3 01       	movw	r26, r6
    2e6c:	a0 0f       	add	r26, r16
    2e6e:	b1 1f       	adc	r27, r17
    2e70:	ac 8f       	std	Y+28, r26	; 0x1c
    2e72:	bd 8f       	std	Y+29, r27	; 0x1d
    2e74:	3d 01       	movw	r6, r26
    2e76:	6f 89       	ldd	r22, Y+23	; 0x17
    2e78:	78 8d       	ldd	r23, Y+24	; 0x18
    2e7a:	89 8d       	ldd	r24, Y+25	; 0x19
    2e7c:	9a 8d       	ldd	r25, Y+26	; 0x1a
        int digit = value * 10;
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    2e8a:	6f 8b       	std	Y+23, r22	; 0x17
    2e8c:	78 8f       	std	Y+24, r23	; 0x18
    2e8e:	89 8f       	std	Y+25, r24	; 0x19
    2e90:	9a 8f       	std	Y+26, r25	; 0x1a
    2e92:	0e 94 49 1a 	call	0x3492	; 0x3492 <__fixsfsi>
        *buffer++ = digit + '0';
    2e96:	20 e3       	ldi	r18, 0x30	; 48
    2e98:	26 0f       	add	r18, r22
    2e9a:	f7 01       	movw	r30, r14
    2e9c:	21 93       	st	Z+, r18
    2e9e:	7f 01       	movw	r14, r30
        value = value * 10 - digit;
    2ea0:	07 2e       	mov	r0, r23
    2ea2:	00 0c       	add	r0, r0
    2ea4:	88 0b       	sbc	r24, r24
    2ea6:	99 0b       	sbc	r25, r25
    2ea8:	0e 94 81 1a 	call	0x3502	; 0x3502 <__floatsisf>
    2eac:	9b 01       	movw	r18, r22
    2eae:	ac 01       	movw	r20, r24
    2eb0:	6f 89       	ldd	r22, Y+23	; 0x17
    2eb2:	78 8d       	ldd	r23, Y+24	; 0x18
    2eb4:	89 8d       	ldd	r24, Y+25	; 0x19
    2eb6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2eb8:	0e 94 65 19 	call	0x32ca	; 0x32ca <__subsf3>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2ebc:	e6 14       	cp	r14, r6
    2ebe:	f7 04       	cpc	r15, r7
    2ec0:	f1 f6       	brne	.-68     	; 0x2e7e <vDisplayWriteStringAtPos+0x2fa>
    2ec2:	6f 8b       	std	Y+23, r22	; 0x17
    2ec4:	78 8f       	std	Y+24, r23	; 0x18
    2ec6:	89 8f       	std	Y+25, r24	; 0x19
    2ec8:	9a 8f       	std	Y+26, r25	; 0x1a
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    2eca:	01 15       	cp	r16, r1
    2ecc:	11 05       	cpc	r17, r1
    2ece:	89 f4       	brne	.+34     	; 0x2ef2 <vDisplayWriteStringAtPos+0x36e>
    2ed0:	db c1       	rjmp	.+950    	; 0x3288 <vDisplayWriteStringAtPos+0x704>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2ed2:	c8 01       	movw	r24, r16
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    2ed4:	e0 e3       	ldi	r30, 0x30	; 48
    2ed6:	d3 01       	movw	r26, r6
    2ed8:	ec 93       	st	X, r30

    *buffer++ = '.';
    2eda:	73 01       	movw	r14, r6
    2edc:	f2 e0       	ldi	r31, 0x02	; 2
    2ede:	ef 0e       	add	r14, r31
    2ee0:	f1 1c       	adc	r15, r1
    2ee2:	2e e2       	ldi	r18, 0x2E	; 46
    2ee4:	11 96       	adiw	r26, 0x01	; 1
    2ee6:	2c 93       	st	X, r18

    while (exponent < 0 && places < width) {
    2ee8:	99 23       	and	r25, r25
    2eea:	6c f0       	brlt	.+26     	; 0x2f06 <vDisplayWriteStringAtPos+0x382>
    2eec:	00 e0       	ldi	r16, 0x00	; 0
    2eee:	10 e0       	ldi	r17, 0x00	; 0
    2ef0:	1f c0       	rjmp	.+62     	; 0x2f30 <vDisplayWriteStringAtPos+0x3ac>
    }

    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';
    2ef2:	ec 8c       	ldd	r14, Y+28	; 0x1c
    2ef4:	fd 8c       	ldd	r15, Y+29	; 0x1d
    2ef6:	3f ef       	ldi	r19, 0xFF	; 255
    2ef8:	e3 1a       	sub	r14, r19
    2efa:	f3 0a       	sbc	r15, r19
    2efc:	ee e2       	ldi	r30, 0x2E	; 46
    2efe:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2f00:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2f02:	ec 93       	st	X, r30
    2f04:	12 c0       	rjmp	.+36     	; 0x2f2a <vDisplayWriteStringAtPos+0x3a6>

    while (exponent < 0 && places < width) {
    2f06:	00 e0       	ldi	r16, 0x00	; 0
    2f08:	10 e0       	ldi	r17, 0x00	; 0
        *buffer++ = '0';
    2f0a:	ff ef       	ldi	r31, 0xFF	; 255
    2f0c:	ef 1a       	sub	r14, r31
    2f0e:	ff 0a       	sbc	r15, r31
    2f10:	f7 01       	movw	r30, r14
    2f12:	31 97       	sbiw	r30, 0x01	; 1
    2f14:	20 e3       	ldi	r18, 0x30	; 48
    2f16:	20 83       	st	Z, r18
        --exponent;
    2f18:	01 97       	sbiw	r24, 0x01	; 1
        ++places;
    2f1a:	0f 5f       	subi	r16, 0xFF	; 255
    2f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    2f1e:	99 23       	and	r25, r25
    2f20:	24 f4       	brge	.+8      	; 0x2f2a <vDisplayWriteStringAtPos+0x3a6>
    2f22:	04 30       	cpi	r16, 0x04	; 4
    2f24:	11 05       	cpc	r17, r1
    2f26:	8c f3       	brlt	.-30     	; 0x2f0a <vDisplayWriteStringAtPos+0x386>
    2f28:	31 c0       	rjmp	.+98     	; 0x2f8c <vDisplayWriteStringAtPos+0x408>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    2f2a:	04 30       	cpi	r16, 0x04	; 4
    2f2c:	11 05       	cpc	r17, r1
    2f2e:	74 f5       	brge	.+92     	; 0x2f8c <vDisplayWriteStringAtPos+0x408>
    2f30:	37 01       	movw	r6, r14
    2f32:	84 e0       	ldi	r24, 0x04	; 4
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	80 1b       	sub	r24, r16
    2f38:	91 0b       	sbc	r25, r17
    2f3a:	e8 0e       	add	r14, r24
    2f3c:	f9 1e       	adc	r15, r25
    2f3e:	87 01       	movw	r16, r14
    2f40:	6f 89       	ldd	r22, Y+23	; 0x17
    2f42:	78 8d       	ldd	r23, Y+24	; 0x18
    2f44:	89 8d       	ldd	r24, Y+25	; 0x19
    2f46:	9a 8d       	ldd	r25, Y+26	; 0x1a
        int digit = value * 10.0;
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e2       	ldi	r20, 0x20	; 32
    2f4e:	51 e4       	ldi	r21, 0x41	; 65
    2f50:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    2f54:	6f 8b       	std	Y+23, r22	; 0x17
    2f56:	78 8f       	std	Y+24, r23	; 0x18
    2f58:	89 8f       	std	Y+25, r24	; 0x19
    2f5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2f5c:	0e 94 49 1a 	call	0x3492	; 0x3492 <__fixsfsi>
        *buffer++ = digit + '0';
    2f60:	20 e3       	ldi	r18, 0x30	; 48
    2f62:	26 0f       	add	r18, r22
    2f64:	d3 01       	movw	r26, r6
    2f66:	2d 93       	st	X+, r18
    2f68:	3d 01       	movw	r6, r26
        value = value * 10.0 - digit;
    2f6a:	07 2e       	mov	r0, r23
    2f6c:	00 0c       	add	r0, r0
    2f6e:	88 0b       	sbc	r24, r24
    2f70:	99 0b       	sbc	r25, r25
    2f72:	0e 94 81 1a 	call	0x3502	; 0x3502 <__floatsisf>
    2f76:	9b 01       	movw	r18, r22
    2f78:	ac 01       	movw	r20, r24
    2f7a:	6f 89       	ldd	r22, Y+23	; 0x17
    2f7c:	78 8d       	ldd	r23, Y+24	; 0x18
    2f7e:	89 8d       	ldd	r24, Y+25	; 0x19
    2f80:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f82:	0e 94 65 19 	call	0x32ca	; 0x32ca <__subsf3>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    2f86:	60 16       	cp	r6, r16
    2f88:	71 06       	cpc	r7, r17
    2f8a:	f1 f6       	brne	.-68     	; 0x2f48 <vDisplayWriteStringAtPos+0x3c4>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    2f8c:	f7 01       	movw	r30, r14
    2f8e:	10 82       	st	Z, r1
    2f90:	94 01       	movw	r18, r8
    2f92:	f4 01       	movw	r30, r8
    2f94:	ea 54       	subi	r30, 0x4A	; 74
    2f96:	f3 4d       	sbci	r31, 0xD3	; 211
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    2f98:	4a ec       	ldi	r20, 0xCA	; 202
    2f9a:	5c e2       	ldi	r21, 0x2C	; 44
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	05 c0       	rjmp	.+10     	; 0x2fac <vDisplayWriteStringAtPos+0x428>

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    2fa2:	da 01       	movw	r26, r20
    2fa4:	6d 91       	ld	r22, X+
    2fa6:	ad 01       	movw	r20, r26
    2fa8:	61 93       	st	Z+, r22
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    2faa:	01 96       	adiw	r24, 0x01	; 1
    2fac:	d6 01       	movw	r26, r12
    2fae:	0d 90       	ld	r0, X+
    2fb0:	00 20       	and	r0, r0
    2fb2:	e9 f7       	brne	.-6      	; 0x2fae <vDisplayWriteStringAtPos+0x42a>
    2fb4:	11 97       	sbiw	r26, 0x01	; 1
    2fb6:	aa 5c       	subi	r26, 0xCA	; 202
    2fb8:	bc 42       	sbci	r27, 0x2C	; 44
    2fba:	8a 17       	cp	r24, r26
    2fbc:	9b 07       	cpc	r25, r27
    2fbe:	88 f3       	brcs	.-30     	; 0x2fa2 <vDisplayWriteStringAtPos+0x41e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2fc0:	4d 01       	movw	r8, r26
    2fc2:	82 0e       	add	r8, r18
    2fc4:	93 1e       	adc	r9, r19
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    2fc6:	71 01       	movw	r14, r2
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2fc8:	d2 01       	movw	r26, r4
    2fca:	15 c1       	rjmp	.+554    	; 0x31f6 <vDisplayWriteStringAtPos+0x672>
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    2fcc:	17 01       	movw	r2, r14
    2fce:	b4 e0       	ldi	r27, 0x04	; 4
    2fd0:	2b 0e       	add	r2, r27
    2fd2:	31 1c       	adc	r3, r1
    2fd4:	d7 01       	movw	r26, r14
    2fd6:	8d 91       	ld	r24, X+
    2fd8:	9d 91       	ld	r25, X+
    2fda:	0d 90       	ld	r0, X+
    2fdc:	bc 91       	ld	r27, X
    2fde:	a0 2d       	mov	r26, r0
    2fe0:	8f 8b       	std	Y+23, r24	; 0x17
    2fe2:	98 8f       	std	Y+24, r25	; 0x18
    2fe4:	a9 8f       	std	Y+25, r26	; 0x19
    2fe6:	ba 8f       	std	Y+26, r27	; 0x1a

void ftoa_sci(char *buffer, double value) {
    int exponent = 0;    
    static const int width = 4;

    if (value == 0.0) {
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	a9 01       	movw	r20, r18
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__cmpsf2>
    2ff6:	81 11       	cpse	r24, r1
    2ff8:	05 c0       	rjmp	.+10     	; 0x3004 <vDisplayWriteStringAtPos+0x480>
        buffer[0] = '0';
    2ffa:	20 e3       	ldi	r18, 0x30	; 48
    2ffc:	f6 01       	movw	r30, r12
    2ffe:	20 83       	st	Z, r18
        buffer[1] = '\0';
    3000:	11 82       	std	Z+1, r1	; 0x01
    3002:	ca c0       	rjmp	.+404    	; 0x3198 <vDisplayWriteStringAtPos+0x614>
        return;
    }

    if (value < 0.0) {
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	a9 01       	movw	r20, r18
    300a:	6f 89       	ldd	r22, Y+23	; 0x17
    300c:	78 8d       	ldd	r23, Y+24	; 0x18
    300e:	89 8d       	ldd	r24, Y+25	; 0x19
    3010:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3012:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__cmpsf2>
    3016:	88 23       	and	r24, r24
    3018:	9c f4       	brge	.+38     	; 0x3040 <vDisplayWriteStringAtPos+0x4bc>
        *buffer++ = '-';
    301a:	ed e2       	ldi	r30, 0x2D	; 45
    301c:	d6 01       	movw	r26, r12
    301e:	ec 93       	st	X, r30
        value = -value;
    3020:	8f 89       	ldd	r24, Y+23	; 0x17
    3022:	98 8d       	ldd	r25, Y+24	; 0x18
    3024:	a9 8d       	ldd	r26, Y+25	; 0x19
    3026:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3028:	b0 58       	subi	r27, 0x80	; 128
    302a:	8f 8b       	std	Y+23, r24	; 0x17
    302c:	98 8f       	std	Y+24, r25	; 0x18
    302e:	a9 8f       	std	Y+25, r26	; 0x19
    3030:	ba 8f       	std	Y+26, r27	; 0x1a
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
        *buffer++ = '-';
    3032:	0f 2e       	mov	r0, r31
    3034:	fb ec       	ldi	r31, 0xCB	; 203
    3036:	6f 2e       	mov	r6, r31
    3038:	fc e2       	ldi	r31, 0x2C	; 44
    303a:	7f 2e       	mov	r7, r31
    303c:	f0 2d       	mov	r31, r0
    303e:	01 c0       	rjmp	.+2      	; 0x3042 <vDisplayWriteStringAtPos+0x4be>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
    3040:	36 01       	movw	r6, r12

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e8       	ldi	r20, 0x80	; 128
    3048:	5f e3       	ldi	r21, 0x3F	; 63
    304a:	6f 89       	ldd	r22, Y+23	; 0x17
    304c:	78 8d       	ldd	r23, Y+24	; 0x18
    304e:	89 8d       	ldd	r24, Y+25	; 0x19
    3050:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3052:	0e 94 31 1b 	call	0x3662	; 0x3662 <__gesf2>
    3056:	88 23       	and	r24, r24
    3058:	dc f0       	brlt	.+54     	; 0x3090 <vDisplayWriteStringAtPos+0x50c>
    305a:	00 e0       	ldi	r16, 0x00	; 0
    305c:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e2       	ldi	r20, 0x20	; 32
    3064:	51 e4       	ldi	r21, 0x41	; 65
    3066:	6f 89       	ldd	r22, Y+23	; 0x17
    3068:	78 8d       	ldd	r23, Y+24	; 0x18
    306a:	89 8d       	ldd	r24, Y+25	; 0x19
    306c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    306e:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__divsf3>
    3072:	6f 8b       	std	Y+23, r22	; 0x17
    3074:	78 8f       	std	Y+24, r23	; 0x18
    3076:	89 8f       	std	Y+25, r24	; 0x19
    3078:	9a 8f       	std	Y+26, r25	; 0x1a
        ++exponent;
    307a:	0f 5f       	subi	r16, 0xFF	; 255
    307c:	1f 4f       	sbci	r17, 0xFF	; 255

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	5f e3       	ldi	r21, 0x3F	; 63
    3086:	0e 94 31 1b 	call	0x3662	; 0x3662 <__gesf2>
    308a:	88 23       	and	r24, r24
    308c:	44 f7       	brge	.-48     	; 0x305e <vDisplayWriteStringAtPos+0x4da>
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <vDisplayWriteStringAtPos+0x510>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    3090:	00 e0       	ldi	r16, 0x00	; 0
    3092:	10 e0       	ldi	r17, 0x00	; 0
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    3094:	2d ec       	ldi	r18, 0xCD	; 205
    3096:	3c ec       	ldi	r19, 0xCC	; 204
    3098:	4c ec       	ldi	r20, 0xCC	; 204
    309a:	5d e3       	ldi	r21, 0x3D	; 61
    309c:	6f 89       	ldd	r22, Y+23	; 0x17
    309e:	78 8d       	ldd	r23, Y+24	; 0x18
    30a0:	89 8d       	ldd	r24, Y+25	; 0x19
    30a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30a4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__cmpsf2>
    30a8:	88 23       	and	r24, r24
    30aa:	c4 f4       	brge	.+48     	; 0x30dc <vDisplayWriteStringAtPos+0x558>
        value *= 10.0;
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	40 e2       	ldi	r20, 0x20	; 32
    30b2:	51 e4       	ldi	r21, 0x41	; 65
    30b4:	6f 89       	ldd	r22, Y+23	; 0x17
    30b6:	78 8d       	ldd	r23, Y+24	; 0x18
    30b8:	89 8d       	ldd	r24, Y+25	; 0x19
    30ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30bc:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    30c0:	6f 8b       	std	Y+23, r22	; 0x17
    30c2:	78 8f       	std	Y+24, r23	; 0x18
    30c4:	89 8f       	std	Y+25, r24	; 0x19
    30c6:	9a 8f       	std	Y+26, r25	; 0x1a
        --exponent;
    30c8:	01 50       	subi	r16, 0x01	; 1
    30ca:	11 09       	sbc	r17, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    30cc:	2d ec       	ldi	r18, 0xCD	; 205
    30ce:	3c ec       	ldi	r19, 0xCC	; 204
    30d0:	4c ec       	ldi	r20, 0xCC	; 204
    30d2:	5d e3       	ldi	r21, 0x3D	; 61
    30d4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__cmpsf2>
    30d8:	88 23       	and	r24, r24
    30da:	44 f3       	brlt	.-48     	; 0x30ac <vDisplayWriteStringAtPos+0x528>
        value = -value;
    }

    exponent = normalize(&value);

    int digit = value * 10.0;
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e2       	ldi	r20, 0x20	; 32
    30e2:	51 e4       	ldi	r21, 0x41	; 65
    30e4:	6f 89       	ldd	r22, Y+23	; 0x17
    30e6:	78 8d       	ldd	r23, Y+24	; 0x18
    30e8:	89 8d       	ldd	r24, Y+25	; 0x19
    30ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30ec:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    30f0:	6f 8b       	std	Y+23, r22	; 0x17
    30f2:	78 8f       	std	Y+24, r23	; 0x18
    30f4:	89 8f       	std	Y+25, r24	; 0x19
    30f6:	9a 8f       	std	Y+26, r25	; 0x1a
    30f8:	0e 94 49 1a 	call	0x3492	; 0x3492 <__fixsfsi>
    *buffer++ = digit + '0';
    30fc:	20 e3       	ldi	r18, 0x30	; 48
    30fe:	26 0f       	add	r18, r22
    3100:	d3 01       	movw	r26, r6
    3102:	2c 93       	st	X, r18
    value = value * 10.0 - digit;
    3104:	07 2e       	mov	r0, r23
    3106:	00 0c       	add	r0, r0
    3108:	88 0b       	sbc	r24, r24
    310a:	99 0b       	sbc	r25, r25
    310c:	0e 94 81 1a 	call	0x3502	; 0x3502 <__floatsisf>
    3110:	9b 01       	movw	r18, r22
    3112:	ac 01       	movw	r20, r24
    3114:	6f 89       	ldd	r22, Y+23	; 0x17
    3116:	78 8d       	ldd	r23, Y+24	; 0x18
    3118:	89 8d       	ldd	r24, Y+25	; 0x19
    311a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    311c:	0e 94 65 19 	call	0x32ca	; 0x32ca <__subsf3>
    --exponent;
    3120:	f8 01       	movw	r30, r16
    3122:	31 97       	sbiw	r30, 0x01	; 1
    3124:	ec 8f       	std	Y+28, r30	; 0x1c
    3126:	fd 8f       	std	Y+29, r31	; 0x1d

    *buffer++ = '.';
    3128:	ee e2       	ldi	r30, 0x2E	; 46
    312a:	d3 01       	movw	r26, r6
    312c:	11 96       	adiw	r26, 0x01	; 1
    312e:	ec 93       	st	X, r30
    3130:	83 01       	movw	r16, r6
    3132:	0e 5f       	subi	r16, 0xFE	; 254
    3134:	1f 4f       	sbci	r17, 0xFF	; 255
    3136:	73 01       	movw	r14, r6
    3138:	f6 e0       	ldi	r31, 0x06	; 6
    313a:	ef 0e       	add	r14, r31
    313c:	f1 1c       	adc	r15, r1

    for (int i = 0; i < width; i++) {
        int digit = value * 10.0;
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e2       	ldi	r20, 0x20	; 32
    3144:	51 e4       	ldi	r21, 0x41	; 65
    3146:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    314a:	6f 8b       	std	Y+23, r22	; 0x17
    314c:	78 8f       	std	Y+24, r23	; 0x18
    314e:	89 8f       	std	Y+25, r24	; 0x19
    3150:	9a 8f       	std	Y+26, r25	; 0x1a
    3152:	0e 94 49 1a 	call	0x3492	; 0x3492 <__fixsfsi>
        *buffer++ = digit + '0';
    3156:	20 e3       	ldi	r18, 0x30	; 48
    3158:	26 0f       	add	r18, r22
    315a:	d8 01       	movw	r26, r16
    315c:	2d 93       	st	X+, r18
    315e:	8d 01       	movw	r16, r26
        value = value * 10.0 - digit;
    3160:	07 2e       	mov	r0, r23
    3162:	00 0c       	add	r0, r0
    3164:	88 0b       	sbc	r24, r24
    3166:	99 0b       	sbc	r25, r25
    3168:	0e 94 81 1a 	call	0x3502	; 0x3502 <__floatsisf>
    316c:	9b 01       	movw	r18, r22
    316e:	ac 01       	movw	r20, r24
    3170:	6f 89       	ldd	r22, Y+23	; 0x17
    3172:	78 8d       	ldd	r23, Y+24	; 0x18
    3174:	89 8d       	ldd	r24, Y+25	; 0x19
    3176:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3178:	0e 94 65 19 	call	0x32ca	; 0x32ca <__subsf3>
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    317c:	0e 15       	cp	r16, r14
    317e:	1f 05       	cpc	r17, r15
    3180:	f1 f6       	brne	.-68     	; 0x313e <vDisplayWriteStringAtPos+0x5ba>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    3182:	25 e6       	ldi	r18, 0x65	; 101
    3184:	f3 01       	movw	r30, r6
    3186:	26 83       	std	Z+6, r18	; 0x06
    3188:	b3 01       	movw	r22, r6
    318a:	69 5f       	subi	r22, 0xF9	; 249
    318c:	7f 4f       	sbci	r23, 0xFF	; 255
    318e:	4a e0       	ldi	r20, 0x0A	; 10
    3190:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3192:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3194:	0e 94 49 20 	call	0x4092	; 0x4092 <__itoa_ncheck>
    3198:	94 01       	movw	r18, r8
    319a:	f4 01       	movw	r30, r8
    319c:	ea 54       	subi	r30, 0x4A	; 74
    319e:	f3 4d       	sbci	r31, 0xD3	; 211
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    31a0:	4a ec       	ldi	r20, 0xCA	; 202
    31a2:	5c e2       	ldi	r21, 0x2C	; 44
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	05 c0       	rjmp	.+10     	; 0x31b4 <vDisplayWriteStringAtPos+0x630>

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    31aa:	da 01       	movw	r26, r20
    31ac:	6d 91       	ld	r22, X+
    31ae:	ad 01       	movw	r20, r26
    31b0:	61 93       	st	Z+, r22
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    31b2:	01 96       	adiw	r24, 0x01	; 1
    31b4:	d6 01       	movw	r26, r12
    31b6:	0d 90       	ld	r0, X+
    31b8:	00 20       	and	r0, r0
    31ba:	e9 f7       	brne	.-6      	; 0x31b6 <vDisplayWriteStringAtPos+0x632>
    31bc:	11 97       	sbiw	r26, 0x01	; 1
    31be:	aa 5c       	subi	r26, 0xCA	; 202
    31c0:	bc 42       	sbci	r27, 0x2C	; 44
    31c2:	8a 17       	cp	r24, r26
    31c4:	9b 07       	cpc	r25, r27
    31c6:	88 f3       	brcs	.-30     	; 0x31aa <vDisplayWriteStringAtPos+0x626>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    31c8:	4d 01       	movw	r8, r26
    31ca:	82 0e       	add	r8, r18
    31cc:	93 1e       	adc	r9, r19
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    31ce:	71 01       	movw	r14, r2
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    31d0:	d2 01       	movw	r26, r4
    31d2:	11 c0       	rjmp	.+34     	; 0x31f6 <vDisplayWriteStringAtPos+0x672>
				break;
			}
		}
		else {
			str[length] = ch;
			if(str[length] == '\n') {
    31d4:	8a 30       	cpi	r24, 0x0A	; 10
    31d6:	29 f0       	breq	.+10     	; 0x31e2 <vDisplayWriteStringAtPos+0x65e>
				length += strlen(buffer);
				break;
			}
		}
		else {
			str[length] = ch;
    31d8:	f4 01       	movw	r30, r8
    31da:	ea 54       	subi	r30, 0x4A	; 74
    31dc:	f3 4d       	sbci	r31, 0xD3	; 211
    31de:	80 83       	st	Z, r24
    31e0:	04 c0       	rjmp	.+8      	; 0x31ea <vDisplayWriteStringAtPos+0x666>
			if(str[length] == '\n') {
				str[length] = '\0';				
    31e2:	f4 01       	movw	r30, r8
    31e4:	ea 54       	subi	r30, 0x4A	; 74
    31e6:	f3 4d       	sbci	r31, 0xD3	; 211
    31e8:	10 82       	st	Z, r1
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    31ea:	11 96       	adiw	r26, 0x01	; 1
		else {
			str[length] = ch;
			if(str[length] == '\n') {
				str[length] = '\0';				
			}
			length++;
    31ec:	ef ef       	ldi	r30, 0xFF	; 255
    31ee:	8e 1a       	sub	r8, r30
    31f0:	9e 0a       	sbc	r9, r30
    31f2:	01 c0       	rjmp	.+2      	; 0x31f6 <vDisplayWriteStringAtPos+0x672>
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    31f4:	d2 01       	movw	r26, r4
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    31f6:	8c 91       	ld	r24, X
    31f8:	81 11       	cpse	r24, r1
    31fa:	01 cd       	rjmp	.-1534   	; 0x2bfe <vDisplayWriteStringAtPos+0x7a>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    31fc:	8d a9       	ldd	r24, Y+53	; 0x35
    31fe:	9e a9       	ldd	r25, Y+54	; 0x36
    3200:	88 0d       	add	r24, r8
    3202:	99 1d       	adc	r25, r9
    3204:	44 97       	sbiw	r24, 0x14	; 20
    3206:	3c f0       	brlt	.+14     	; 0x3216 <vDisplayWriteStringAtPos+0x692>
		length = 20-pos;
    3208:	84 e1       	ldi	r24, 0x14	; 20
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	4c 01       	movw	r8, r24
    320e:	2d a9       	ldd	r18, Y+53	; 0x35
    3210:	3e a9       	ldd	r19, Y+54	; 0x36
    3212:	82 1a       	sub	r8, r18
    3214:	93 0a       	sbc	r9, r19
    3216:	fe 01       	movw	r30, r28
    3218:	33 96       	adiw	r30, 0x03	; 3
    321a:	ce 01       	movw	r24, r28
    321c:	47 96       	adiw	r24, 0x17	; 23
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    321e:	df 01       	movw	r26, r30
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
    3220:	1d 92       	st	X+, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    3222:	a8 17       	cp	r26, r24
    3224:	b9 07       	cpc	r27, r25
    3226:	e1 f7       	brne	.-8      	; 0x3220 <vDisplayWriteStringAtPos+0x69c>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    3228:	3b 8d       	ldd	r19, Y+27	; 0x1b
    322a:	39 83       	std	Y+1, r19	; 0x01
	newLine.displayPos = pos;
    322c:	8d a9       	ldd	r24, Y+53	; 0x35
    322e:	8a 83       	std	Y+2, r24	; 0x02
	for(int i = 0; i < length;i++) {
    3230:	18 14       	cp	r1, r8
    3232:	19 04       	cpc	r1, r9
    3234:	5c f4       	brge	.+22     	; 0x324c <vDisplayWriteStringAtPos+0x6c8>
    3236:	ce 01       	movw	r24, r28
    3238:	88 0d       	add	r24, r8
    323a:	99 1d       	adc	r25, r9
    323c:	03 96       	adiw	r24, 0x03	; 3
		newLine.displayBuffer[i] = str[i];
    323e:	d5 01       	movw	r26, r10
    3240:	2d 91       	ld	r18, X+
    3242:	5d 01       	movw	r10, r26
    3244:	21 93       	st	Z+, r18
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    3246:	8e 17       	cp	r24, r30
    3248:	9f 07       	cpc	r25, r31
    324a:	c9 f7       	brne	.-14     	; 0x323e <vDisplayWriteStringAtPos+0x6ba>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    324c:	00 e0       	ldi	r16, 0x00	; 0
    324e:	2f ef       	ldi	r18, 0xFF	; 255
    3250:	3f ef       	ldi	r19, 0xFF	; 255
    3252:	a9 01       	movw	r20, r18
    3254:	be 01       	movw	r22, r28
    3256:	6f 5f       	subi	r22, 0xFF	; 255
    3258:	7f 4f       	sbci	r23, 0xFF	; 255
    325a:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <displayLineQueue>
    325e:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <displayLineQueue+0x1>
    3262:	0e 94 4b 08 	call	0x1096	; 0x1096 <xQueueGenericSend>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    3266:	1b c0       	rjmp	.+54     	; 0x329e <vDisplayWriteStringAtPos+0x71a>
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    3268:	2d ec       	ldi	r18, 0xCD	; 205
    326a:	3c ec       	ldi	r19, 0xCC	; 204
    326c:	4c ec       	ldi	r20, 0xCC	; 204
    326e:	5d e3       	ldi	r21, 0x3D	; 61
    3270:	6f 89       	ldd	r22, Y+23	; 0x17
    3272:	78 8d       	ldd	r23, Y+24	; 0x18
    3274:	89 8d       	ldd	r24, Y+25	; 0x19
    3276:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3278:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__cmpsf2>
    327c:	88 23       	and	r24, r24
    327e:	0c f4       	brge	.+2      	; 0x3282 <vDisplayWriteStringAtPos+0x6fe>
    3280:	d6 cd       	rjmp	.-1108   	; 0x2e2e <vDisplayWriteStringAtPos+0x2aa>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	26 ce       	rjmp	.-948    	; 0x2ed4 <vDisplayWriteStringAtPos+0x350>
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    3288:	20 e3       	ldi	r18, 0x30	; 48
    328a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    328c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    328e:	20 83       	st	Z, r18

    *buffer++ = '.';
    3290:	7f 01       	movw	r14, r30
    3292:	32 e0       	ldi	r19, 0x02	; 2
    3294:	e3 0e       	add	r14, r19
    3296:	f1 1c       	adc	r15, r1
    3298:	8e e2       	ldi	r24, 0x2E	; 46
    329a:	81 83       	std	Z+1, r24	; 0x01
    329c:	46 ce       	rjmp	.-884    	; 0x2f2a <vDisplayWriteStringAtPos+0x3a6>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    329e:	6d 96       	adiw	r28, 0x1d	; 29
    32a0:	cd bf       	out	0x3d, r28	; 61
    32a2:	de bf       	out	0x3e, r29	; 62
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	1f 91       	pop	r17
    32aa:	0f 91       	pop	r16
    32ac:	ff 90       	pop	r15
    32ae:	ef 90       	pop	r14
    32b0:	df 90       	pop	r13
    32b2:	cf 90       	pop	r12
    32b4:	bf 90       	pop	r11
    32b6:	af 90       	pop	r10
    32b8:	9f 90       	pop	r9
    32ba:	8f 90       	pop	r8
    32bc:	7f 90       	pop	r7
    32be:	6f 90       	pop	r6
    32c0:	5f 90       	pop	r5
    32c2:	4f 90       	pop	r4
    32c4:	3f 90       	pop	r3
    32c6:	2f 90       	pop	r2
    32c8:	08 95       	ret

000032ca <__subsf3>:
    32ca:	50 58       	subi	r21, 0x80	; 128

000032cc <__addsf3>:
    32cc:	bb 27       	eor	r27, r27
    32ce:	aa 27       	eor	r26, r26
    32d0:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__addsf3x>
    32d4:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__fp_round>
    32d8:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fp_pscA>
    32dc:	38 f0       	brcs	.+14     	; 0x32ec <__addsf3+0x20>
    32de:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__fp_pscB>
    32e2:	20 f0       	brcs	.+8      	; 0x32ec <__addsf3+0x20>
    32e4:	39 f4       	brne	.+14     	; 0x32f4 <__addsf3+0x28>
    32e6:	9f 3f       	cpi	r25, 0xFF	; 255
    32e8:	19 f4       	brne	.+6      	; 0x32f0 <__addsf3+0x24>
    32ea:	26 f4       	brtc	.+8      	; 0x32f4 <__addsf3+0x28>
    32ec:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__fp_nan>
    32f0:	0e f4       	brtc	.+2      	; 0x32f4 <__addsf3+0x28>
    32f2:	e0 95       	com	r30
    32f4:	e7 fb       	bst	r30, 7
    32f6:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__fp_inf>

000032fa <__addsf3x>:
    32fa:	e9 2f       	mov	r30, r25
    32fc:	0e 94 08 1b 	call	0x3610	; 0x3610 <__fp_split3>
    3300:	58 f3       	brcs	.-42     	; 0x32d8 <__addsf3+0xc>
    3302:	ba 17       	cp	r27, r26
    3304:	62 07       	cpc	r22, r18
    3306:	73 07       	cpc	r23, r19
    3308:	84 07       	cpc	r24, r20
    330a:	95 07       	cpc	r25, r21
    330c:	20 f0       	brcs	.+8      	; 0x3316 <__addsf3x+0x1c>
    330e:	79 f4       	brne	.+30     	; 0x332e <__addsf3x+0x34>
    3310:	a6 f5       	brtc	.+104    	; 0x337a <__addsf3x+0x80>
    3312:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__fp_zero>
    3316:	0e f4       	brtc	.+2      	; 0x331a <__addsf3x+0x20>
    3318:	e0 95       	com	r30
    331a:	0b 2e       	mov	r0, r27
    331c:	ba 2f       	mov	r27, r26
    331e:	a0 2d       	mov	r26, r0
    3320:	0b 01       	movw	r0, r22
    3322:	b9 01       	movw	r22, r18
    3324:	90 01       	movw	r18, r0
    3326:	0c 01       	movw	r0, r24
    3328:	ca 01       	movw	r24, r20
    332a:	a0 01       	movw	r20, r0
    332c:	11 24       	eor	r1, r1
    332e:	ff 27       	eor	r31, r31
    3330:	59 1b       	sub	r21, r25
    3332:	99 f0       	breq	.+38     	; 0x335a <__addsf3x+0x60>
    3334:	59 3f       	cpi	r21, 0xF9	; 249
    3336:	50 f4       	brcc	.+20     	; 0x334c <__addsf3x+0x52>
    3338:	50 3e       	cpi	r21, 0xE0	; 224
    333a:	68 f1       	brcs	.+90     	; 0x3396 <__addsf3x+0x9c>
    333c:	1a 16       	cp	r1, r26
    333e:	f0 40       	sbci	r31, 0x00	; 0
    3340:	a2 2f       	mov	r26, r18
    3342:	23 2f       	mov	r18, r19
    3344:	34 2f       	mov	r19, r20
    3346:	44 27       	eor	r20, r20
    3348:	58 5f       	subi	r21, 0xF8	; 248
    334a:	f3 cf       	rjmp	.-26     	; 0x3332 <__addsf3x+0x38>
    334c:	46 95       	lsr	r20
    334e:	37 95       	ror	r19
    3350:	27 95       	ror	r18
    3352:	a7 95       	ror	r26
    3354:	f0 40       	sbci	r31, 0x00	; 0
    3356:	53 95       	inc	r21
    3358:	c9 f7       	brne	.-14     	; 0x334c <__addsf3x+0x52>
    335a:	7e f4       	brtc	.+30     	; 0x337a <__addsf3x+0x80>
    335c:	1f 16       	cp	r1, r31
    335e:	ba 0b       	sbc	r27, r26
    3360:	62 0b       	sbc	r22, r18
    3362:	73 0b       	sbc	r23, r19
    3364:	84 0b       	sbc	r24, r20
    3366:	ba f0       	brmi	.+46     	; 0x3396 <__addsf3x+0x9c>
    3368:	91 50       	subi	r25, 0x01	; 1
    336a:	a1 f0       	breq	.+40     	; 0x3394 <__addsf3x+0x9a>
    336c:	ff 0f       	add	r31, r31
    336e:	bb 1f       	adc	r27, r27
    3370:	66 1f       	adc	r22, r22
    3372:	77 1f       	adc	r23, r23
    3374:	88 1f       	adc	r24, r24
    3376:	c2 f7       	brpl	.-16     	; 0x3368 <__addsf3x+0x6e>
    3378:	0e c0       	rjmp	.+28     	; 0x3396 <__addsf3x+0x9c>
    337a:	ba 0f       	add	r27, r26
    337c:	62 1f       	adc	r22, r18
    337e:	73 1f       	adc	r23, r19
    3380:	84 1f       	adc	r24, r20
    3382:	48 f4       	brcc	.+18     	; 0x3396 <__addsf3x+0x9c>
    3384:	87 95       	ror	r24
    3386:	77 95       	ror	r23
    3388:	67 95       	ror	r22
    338a:	b7 95       	ror	r27
    338c:	f7 95       	ror	r31
    338e:	9e 3f       	cpi	r25, 0xFE	; 254
    3390:	08 f0       	brcs	.+2      	; 0x3394 <__addsf3x+0x9a>
    3392:	b0 cf       	rjmp	.-160    	; 0x32f4 <__addsf3+0x28>
    3394:	93 95       	inc	r25
    3396:	88 0f       	add	r24, r24
    3398:	08 f0       	brcs	.+2      	; 0x339c <__addsf3x+0xa2>
    339a:	99 27       	eor	r25, r25
    339c:	ee 0f       	add	r30, r30
    339e:	97 95       	ror	r25
    33a0:	87 95       	ror	r24
    33a2:	08 95       	ret

000033a4 <__cmpsf2>:
    33a4:	0e 94 bc 1a 	call	0x3578	; 0x3578 <__fp_cmp>
    33a8:	08 f4       	brcc	.+2      	; 0x33ac <__cmpsf2+0x8>
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	08 95       	ret

000033ae <__divsf3>:
    33ae:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__divsf3x>
    33b2:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__fp_round>
    33b6:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__fp_pscB>
    33ba:	58 f0       	brcs	.+22     	; 0x33d2 <__divsf3+0x24>
    33bc:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fp_pscA>
    33c0:	40 f0       	brcs	.+16     	; 0x33d2 <__divsf3+0x24>
    33c2:	29 f4       	brne	.+10     	; 0x33ce <__divsf3+0x20>
    33c4:	5f 3f       	cpi	r21, 0xFF	; 255
    33c6:	29 f0       	breq	.+10     	; 0x33d2 <__divsf3+0x24>
    33c8:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__fp_inf>
    33cc:	51 11       	cpse	r21, r1
    33ce:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__fp_szero>
    33d2:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__fp_nan>

000033d6 <__divsf3x>:
    33d6:	0e 94 08 1b 	call	0x3610	; 0x3610 <__fp_split3>
    33da:	68 f3       	brcs	.-38     	; 0x33b6 <__divsf3+0x8>

000033dc <__divsf3_pse>:
    33dc:	99 23       	and	r25, r25
    33de:	b1 f3       	breq	.-20     	; 0x33cc <__divsf3+0x1e>
    33e0:	55 23       	and	r21, r21
    33e2:	91 f3       	breq	.-28     	; 0x33c8 <__divsf3+0x1a>
    33e4:	95 1b       	sub	r25, r21
    33e6:	55 0b       	sbc	r21, r21
    33e8:	bb 27       	eor	r27, r27
    33ea:	aa 27       	eor	r26, r26
    33ec:	62 17       	cp	r22, r18
    33ee:	73 07       	cpc	r23, r19
    33f0:	84 07       	cpc	r24, r20
    33f2:	38 f0       	brcs	.+14     	; 0x3402 <__divsf3_pse+0x26>
    33f4:	9f 5f       	subi	r25, 0xFF	; 255
    33f6:	5f 4f       	sbci	r21, 0xFF	; 255
    33f8:	22 0f       	add	r18, r18
    33fa:	33 1f       	adc	r19, r19
    33fc:	44 1f       	adc	r20, r20
    33fe:	aa 1f       	adc	r26, r26
    3400:	a9 f3       	breq	.-22     	; 0x33ec <__divsf3_pse+0x10>
    3402:	35 d0       	rcall	.+106    	; 0x346e <__divsf3_pse+0x92>
    3404:	0e 2e       	mov	r0, r30
    3406:	3a f0       	brmi	.+14     	; 0x3416 <__divsf3_pse+0x3a>
    3408:	e0 e8       	ldi	r30, 0x80	; 128
    340a:	32 d0       	rcall	.+100    	; 0x3470 <__divsf3_pse+0x94>
    340c:	91 50       	subi	r25, 0x01	; 1
    340e:	50 40       	sbci	r21, 0x00	; 0
    3410:	e6 95       	lsr	r30
    3412:	00 1c       	adc	r0, r0
    3414:	ca f7       	brpl	.-14     	; 0x3408 <__divsf3_pse+0x2c>
    3416:	2b d0       	rcall	.+86     	; 0x346e <__divsf3_pse+0x92>
    3418:	fe 2f       	mov	r31, r30
    341a:	29 d0       	rcall	.+82     	; 0x346e <__divsf3_pse+0x92>
    341c:	66 0f       	add	r22, r22
    341e:	77 1f       	adc	r23, r23
    3420:	88 1f       	adc	r24, r24
    3422:	bb 1f       	adc	r27, r27
    3424:	26 17       	cp	r18, r22
    3426:	37 07       	cpc	r19, r23
    3428:	48 07       	cpc	r20, r24
    342a:	ab 07       	cpc	r26, r27
    342c:	b0 e8       	ldi	r27, 0x80	; 128
    342e:	09 f0       	breq	.+2      	; 0x3432 <__divsf3_pse+0x56>
    3430:	bb 0b       	sbc	r27, r27
    3432:	80 2d       	mov	r24, r0
    3434:	bf 01       	movw	r22, r30
    3436:	ff 27       	eor	r31, r31
    3438:	93 58       	subi	r25, 0x83	; 131
    343a:	5f 4f       	sbci	r21, 0xFF	; 255
    343c:	3a f0       	brmi	.+14     	; 0x344c <__divsf3_pse+0x70>
    343e:	9e 3f       	cpi	r25, 0xFE	; 254
    3440:	51 05       	cpc	r21, r1
    3442:	78 f0       	brcs	.+30     	; 0x3462 <__divsf3_pse+0x86>
    3444:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__fp_inf>
    3448:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__fp_szero>
    344c:	5f 3f       	cpi	r21, 0xFF	; 255
    344e:	e4 f3       	brlt	.-8      	; 0x3448 <__divsf3_pse+0x6c>
    3450:	98 3e       	cpi	r25, 0xE8	; 232
    3452:	d4 f3       	brlt	.-12     	; 0x3448 <__divsf3_pse+0x6c>
    3454:	86 95       	lsr	r24
    3456:	77 95       	ror	r23
    3458:	67 95       	ror	r22
    345a:	b7 95       	ror	r27
    345c:	f7 95       	ror	r31
    345e:	9f 5f       	subi	r25, 0xFF	; 255
    3460:	c9 f7       	brne	.-14     	; 0x3454 <__divsf3_pse+0x78>
    3462:	88 0f       	add	r24, r24
    3464:	91 1d       	adc	r25, r1
    3466:	96 95       	lsr	r25
    3468:	87 95       	ror	r24
    346a:	97 f9       	bld	r25, 7
    346c:	08 95       	ret
    346e:	e1 e0       	ldi	r30, 0x01	; 1
    3470:	66 0f       	add	r22, r22
    3472:	77 1f       	adc	r23, r23
    3474:	88 1f       	adc	r24, r24
    3476:	bb 1f       	adc	r27, r27
    3478:	62 17       	cp	r22, r18
    347a:	73 07       	cpc	r23, r19
    347c:	84 07       	cpc	r24, r20
    347e:	ba 07       	cpc	r27, r26
    3480:	20 f0       	brcs	.+8      	; 0x348a <__divsf3_pse+0xae>
    3482:	62 1b       	sub	r22, r18
    3484:	73 0b       	sbc	r23, r19
    3486:	84 0b       	sbc	r24, r20
    3488:	ba 0b       	sbc	r27, r26
    348a:	ee 1f       	adc	r30, r30
    348c:	88 f7       	brcc	.-30     	; 0x3470 <__divsf3_pse+0x94>
    348e:	e0 95       	com	r30
    3490:	08 95       	ret

00003492 <__fixsfsi>:
    3492:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__fixunssfsi>
    3496:	68 94       	set
    3498:	b1 11       	cpse	r27, r1
    349a:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__fp_szero>
    349e:	08 95       	ret

000034a0 <__fixunssfsi>:
    34a0:	0e 94 10 1b 	call	0x3620	; 0x3620 <__fp_splitA>
    34a4:	88 f0       	brcs	.+34     	; 0x34c8 <__fixunssfsi+0x28>
    34a6:	9f 57       	subi	r25, 0x7F	; 127
    34a8:	98 f0       	brcs	.+38     	; 0x34d0 <__fixunssfsi+0x30>
    34aa:	b9 2f       	mov	r27, r25
    34ac:	99 27       	eor	r25, r25
    34ae:	b7 51       	subi	r27, 0x17	; 23
    34b0:	b0 f0       	brcs	.+44     	; 0x34de <__fixunssfsi+0x3e>
    34b2:	e1 f0       	breq	.+56     	; 0x34ec <__fixunssfsi+0x4c>
    34b4:	66 0f       	add	r22, r22
    34b6:	77 1f       	adc	r23, r23
    34b8:	88 1f       	adc	r24, r24
    34ba:	99 1f       	adc	r25, r25
    34bc:	1a f0       	brmi	.+6      	; 0x34c4 <__fixunssfsi+0x24>
    34be:	ba 95       	dec	r27
    34c0:	c9 f7       	brne	.-14     	; 0x34b4 <__fixunssfsi+0x14>
    34c2:	14 c0       	rjmp	.+40     	; 0x34ec <__fixunssfsi+0x4c>
    34c4:	b1 30       	cpi	r27, 0x01	; 1
    34c6:	91 f0       	breq	.+36     	; 0x34ec <__fixunssfsi+0x4c>
    34c8:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__fp_zero>
    34cc:	b1 e0       	ldi	r27, 0x01	; 1
    34ce:	08 95       	ret
    34d0:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__fp_zero>
    34d4:	67 2f       	mov	r22, r23
    34d6:	78 2f       	mov	r23, r24
    34d8:	88 27       	eor	r24, r24
    34da:	b8 5f       	subi	r27, 0xF8	; 248
    34dc:	39 f0       	breq	.+14     	; 0x34ec <__fixunssfsi+0x4c>
    34de:	b9 3f       	cpi	r27, 0xF9	; 249
    34e0:	cc f3       	brlt	.-14     	; 0x34d4 <__fixunssfsi+0x34>
    34e2:	86 95       	lsr	r24
    34e4:	77 95       	ror	r23
    34e6:	67 95       	ror	r22
    34e8:	b3 95       	inc	r27
    34ea:	d9 f7       	brne	.-10     	; 0x34e2 <__fixunssfsi+0x42>
    34ec:	3e f4       	brtc	.+14     	; 0x34fc <__fixunssfsi+0x5c>
    34ee:	90 95       	com	r25
    34f0:	80 95       	com	r24
    34f2:	70 95       	com	r23
    34f4:	61 95       	neg	r22
    34f6:	7f 4f       	sbci	r23, 0xFF	; 255
    34f8:	8f 4f       	sbci	r24, 0xFF	; 255
    34fa:	9f 4f       	sbci	r25, 0xFF	; 255
    34fc:	08 95       	ret

000034fe <__floatunsisf>:
    34fe:	e8 94       	clt
    3500:	09 c0       	rjmp	.+18     	; 0x3514 <__floatsisf+0x12>

00003502 <__floatsisf>:
    3502:	97 fb       	bst	r25, 7
    3504:	3e f4       	brtc	.+14     	; 0x3514 <__floatsisf+0x12>
    3506:	90 95       	com	r25
    3508:	80 95       	com	r24
    350a:	70 95       	com	r23
    350c:	61 95       	neg	r22
    350e:	7f 4f       	sbci	r23, 0xFF	; 255
    3510:	8f 4f       	sbci	r24, 0xFF	; 255
    3512:	9f 4f       	sbci	r25, 0xFF	; 255
    3514:	99 23       	and	r25, r25
    3516:	a9 f0       	breq	.+42     	; 0x3542 <__floatsisf+0x40>
    3518:	f9 2f       	mov	r31, r25
    351a:	96 e9       	ldi	r25, 0x96	; 150
    351c:	bb 27       	eor	r27, r27
    351e:	93 95       	inc	r25
    3520:	f6 95       	lsr	r31
    3522:	87 95       	ror	r24
    3524:	77 95       	ror	r23
    3526:	67 95       	ror	r22
    3528:	b7 95       	ror	r27
    352a:	f1 11       	cpse	r31, r1
    352c:	f8 cf       	rjmp	.-16     	; 0x351e <__floatsisf+0x1c>
    352e:	fa f4       	brpl	.+62     	; 0x356e <__floatsisf+0x6c>
    3530:	bb 0f       	add	r27, r27
    3532:	11 f4       	brne	.+4      	; 0x3538 <__floatsisf+0x36>
    3534:	60 ff       	sbrs	r22, 0
    3536:	1b c0       	rjmp	.+54     	; 0x356e <__floatsisf+0x6c>
    3538:	6f 5f       	subi	r22, 0xFF	; 255
    353a:	7f 4f       	sbci	r23, 0xFF	; 255
    353c:	8f 4f       	sbci	r24, 0xFF	; 255
    353e:	9f 4f       	sbci	r25, 0xFF	; 255
    3540:	16 c0       	rjmp	.+44     	; 0x356e <__floatsisf+0x6c>
    3542:	88 23       	and	r24, r24
    3544:	11 f0       	breq	.+4      	; 0x354a <__floatsisf+0x48>
    3546:	96 e9       	ldi	r25, 0x96	; 150
    3548:	11 c0       	rjmp	.+34     	; 0x356c <__floatsisf+0x6a>
    354a:	77 23       	and	r23, r23
    354c:	21 f0       	breq	.+8      	; 0x3556 <__floatsisf+0x54>
    354e:	9e e8       	ldi	r25, 0x8E	; 142
    3550:	87 2f       	mov	r24, r23
    3552:	76 2f       	mov	r23, r22
    3554:	05 c0       	rjmp	.+10     	; 0x3560 <__floatsisf+0x5e>
    3556:	66 23       	and	r22, r22
    3558:	71 f0       	breq	.+28     	; 0x3576 <__floatsisf+0x74>
    355a:	96 e8       	ldi	r25, 0x86	; 134
    355c:	86 2f       	mov	r24, r22
    355e:	70 e0       	ldi	r23, 0x00	; 0
    3560:	60 e0       	ldi	r22, 0x00	; 0
    3562:	2a f0       	brmi	.+10     	; 0x356e <__floatsisf+0x6c>
    3564:	9a 95       	dec	r25
    3566:	66 0f       	add	r22, r22
    3568:	77 1f       	adc	r23, r23
    356a:	88 1f       	adc	r24, r24
    356c:	da f7       	brpl	.-10     	; 0x3564 <__floatsisf+0x62>
    356e:	88 0f       	add	r24, r24
    3570:	96 95       	lsr	r25
    3572:	87 95       	ror	r24
    3574:	97 f9       	bld	r25, 7
    3576:	08 95       	ret

00003578 <__fp_cmp>:
    3578:	99 0f       	add	r25, r25
    357a:	00 08       	sbc	r0, r0
    357c:	55 0f       	add	r21, r21
    357e:	aa 0b       	sbc	r26, r26
    3580:	e0 e8       	ldi	r30, 0x80	; 128
    3582:	fe ef       	ldi	r31, 0xFE	; 254
    3584:	16 16       	cp	r1, r22
    3586:	17 06       	cpc	r1, r23
    3588:	e8 07       	cpc	r30, r24
    358a:	f9 07       	cpc	r31, r25
    358c:	c0 f0       	brcs	.+48     	; 0x35be <__fp_cmp+0x46>
    358e:	12 16       	cp	r1, r18
    3590:	13 06       	cpc	r1, r19
    3592:	e4 07       	cpc	r30, r20
    3594:	f5 07       	cpc	r31, r21
    3596:	98 f0       	brcs	.+38     	; 0x35be <__fp_cmp+0x46>
    3598:	62 1b       	sub	r22, r18
    359a:	73 0b       	sbc	r23, r19
    359c:	84 0b       	sbc	r24, r20
    359e:	95 0b       	sbc	r25, r21
    35a0:	39 f4       	brne	.+14     	; 0x35b0 <__fp_cmp+0x38>
    35a2:	0a 26       	eor	r0, r26
    35a4:	61 f0       	breq	.+24     	; 0x35be <__fp_cmp+0x46>
    35a6:	23 2b       	or	r18, r19
    35a8:	24 2b       	or	r18, r20
    35aa:	25 2b       	or	r18, r21
    35ac:	21 f4       	brne	.+8      	; 0x35b6 <__fp_cmp+0x3e>
    35ae:	08 95       	ret
    35b0:	0a 26       	eor	r0, r26
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <__fp_cmp+0x3e>
    35b4:	a1 40       	sbci	r26, 0x01	; 1
    35b6:	a6 95       	lsr	r26
    35b8:	8f ef       	ldi	r24, 0xFF	; 255
    35ba:	81 1d       	adc	r24, r1
    35bc:	81 1d       	adc	r24, r1
    35be:	08 95       	ret

000035c0 <__fp_inf>:
    35c0:	97 f9       	bld	r25, 7
    35c2:	9f 67       	ori	r25, 0x7F	; 127
    35c4:	80 e8       	ldi	r24, 0x80	; 128
    35c6:	70 e0       	ldi	r23, 0x00	; 0
    35c8:	60 e0       	ldi	r22, 0x00	; 0
    35ca:	08 95       	ret

000035cc <__fp_nan>:
    35cc:	9f ef       	ldi	r25, 0xFF	; 255
    35ce:	80 ec       	ldi	r24, 0xC0	; 192
    35d0:	08 95       	ret

000035d2 <__fp_pscA>:
    35d2:	00 24       	eor	r0, r0
    35d4:	0a 94       	dec	r0
    35d6:	16 16       	cp	r1, r22
    35d8:	17 06       	cpc	r1, r23
    35da:	18 06       	cpc	r1, r24
    35dc:	09 06       	cpc	r0, r25
    35de:	08 95       	ret

000035e0 <__fp_pscB>:
    35e0:	00 24       	eor	r0, r0
    35e2:	0a 94       	dec	r0
    35e4:	12 16       	cp	r1, r18
    35e6:	13 06       	cpc	r1, r19
    35e8:	14 06       	cpc	r1, r20
    35ea:	05 06       	cpc	r0, r21
    35ec:	08 95       	ret

000035ee <__fp_round>:
    35ee:	09 2e       	mov	r0, r25
    35f0:	03 94       	inc	r0
    35f2:	00 0c       	add	r0, r0
    35f4:	11 f4       	brne	.+4      	; 0x35fa <__fp_round+0xc>
    35f6:	88 23       	and	r24, r24
    35f8:	52 f0       	brmi	.+20     	; 0x360e <__fp_round+0x20>
    35fa:	bb 0f       	add	r27, r27
    35fc:	40 f4       	brcc	.+16     	; 0x360e <__fp_round+0x20>
    35fe:	bf 2b       	or	r27, r31
    3600:	11 f4       	brne	.+4      	; 0x3606 <__fp_round+0x18>
    3602:	60 ff       	sbrs	r22, 0
    3604:	04 c0       	rjmp	.+8      	; 0x360e <__fp_round+0x20>
    3606:	6f 5f       	subi	r22, 0xFF	; 255
    3608:	7f 4f       	sbci	r23, 0xFF	; 255
    360a:	8f 4f       	sbci	r24, 0xFF	; 255
    360c:	9f 4f       	sbci	r25, 0xFF	; 255
    360e:	08 95       	ret

00003610 <__fp_split3>:
    3610:	57 fd       	sbrc	r21, 7
    3612:	90 58       	subi	r25, 0x80	; 128
    3614:	44 0f       	add	r20, r20
    3616:	55 1f       	adc	r21, r21
    3618:	59 f0       	breq	.+22     	; 0x3630 <__fp_splitA+0x10>
    361a:	5f 3f       	cpi	r21, 0xFF	; 255
    361c:	71 f0       	breq	.+28     	; 0x363a <__fp_splitA+0x1a>
    361e:	47 95       	ror	r20

00003620 <__fp_splitA>:
    3620:	88 0f       	add	r24, r24
    3622:	97 fb       	bst	r25, 7
    3624:	99 1f       	adc	r25, r25
    3626:	61 f0       	breq	.+24     	; 0x3640 <__fp_splitA+0x20>
    3628:	9f 3f       	cpi	r25, 0xFF	; 255
    362a:	79 f0       	breq	.+30     	; 0x364a <__fp_splitA+0x2a>
    362c:	87 95       	ror	r24
    362e:	08 95       	ret
    3630:	12 16       	cp	r1, r18
    3632:	13 06       	cpc	r1, r19
    3634:	14 06       	cpc	r1, r20
    3636:	55 1f       	adc	r21, r21
    3638:	f2 cf       	rjmp	.-28     	; 0x361e <__fp_split3+0xe>
    363a:	46 95       	lsr	r20
    363c:	f1 df       	rcall	.-30     	; 0x3620 <__fp_splitA>
    363e:	08 c0       	rjmp	.+16     	; 0x3650 <__fp_splitA+0x30>
    3640:	16 16       	cp	r1, r22
    3642:	17 06       	cpc	r1, r23
    3644:	18 06       	cpc	r1, r24
    3646:	99 1f       	adc	r25, r25
    3648:	f1 cf       	rjmp	.-30     	; 0x362c <__fp_splitA+0xc>
    364a:	86 95       	lsr	r24
    364c:	71 05       	cpc	r23, r1
    364e:	61 05       	cpc	r22, r1
    3650:	08 94       	sec
    3652:	08 95       	ret

00003654 <__fp_zero>:
    3654:	e8 94       	clt

00003656 <__fp_szero>:
    3656:	bb 27       	eor	r27, r27
    3658:	66 27       	eor	r22, r22
    365a:	77 27       	eor	r23, r23
    365c:	cb 01       	movw	r24, r22
    365e:	97 f9       	bld	r25, 7
    3660:	08 95       	ret

00003662 <__gesf2>:
    3662:	0e 94 bc 1a 	call	0x3578	; 0x3578 <__fp_cmp>
    3666:	08 f4       	brcc	.+2      	; 0x366a <__gesf2+0x8>
    3668:	8f ef       	ldi	r24, 0xFF	; 255
    366a:	08 95       	ret

0000366c <__mulsf3>:
    366c:	0e 94 49 1b 	call	0x3692	; 0x3692 <__mulsf3x>
    3670:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__fp_round>
    3674:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fp_pscA>
    3678:	38 f0       	brcs	.+14     	; 0x3688 <__mulsf3+0x1c>
    367a:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__fp_pscB>
    367e:	20 f0       	brcs	.+8      	; 0x3688 <__mulsf3+0x1c>
    3680:	95 23       	and	r25, r21
    3682:	11 f0       	breq	.+4      	; 0x3688 <__mulsf3+0x1c>
    3684:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__fp_inf>
    3688:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__fp_nan>
    368c:	11 24       	eor	r1, r1
    368e:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__fp_szero>

00003692 <__mulsf3x>:
    3692:	0e 94 08 1b 	call	0x3610	; 0x3610 <__fp_split3>
    3696:	70 f3       	brcs	.-36     	; 0x3674 <__mulsf3+0x8>

00003698 <__mulsf3_pse>:
    3698:	95 9f       	mul	r25, r21
    369a:	c1 f3       	breq	.-16     	; 0x368c <__mulsf3+0x20>
    369c:	95 0f       	add	r25, r21
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	55 1f       	adc	r21, r21
    36a2:	62 9f       	mul	r22, r18
    36a4:	f0 01       	movw	r30, r0
    36a6:	72 9f       	mul	r23, r18
    36a8:	bb 27       	eor	r27, r27
    36aa:	f0 0d       	add	r31, r0
    36ac:	b1 1d       	adc	r27, r1
    36ae:	63 9f       	mul	r22, r19
    36b0:	aa 27       	eor	r26, r26
    36b2:	f0 0d       	add	r31, r0
    36b4:	b1 1d       	adc	r27, r1
    36b6:	aa 1f       	adc	r26, r26
    36b8:	64 9f       	mul	r22, r20
    36ba:	66 27       	eor	r22, r22
    36bc:	b0 0d       	add	r27, r0
    36be:	a1 1d       	adc	r26, r1
    36c0:	66 1f       	adc	r22, r22
    36c2:	82 9f       	mul	r24, r18
    36c4:	22 27       	eor	r18, r18
    36c6:	b0 0d       	add	r27, r0
    36c8:	a1 1d       	adc	r26, r1
    36ca:	62 1f       	adc	r22, r18
    36cc:	73 9f       	mul	r23, r19
    36ce:	b0 0d       	add	r27, r0
    36d0:	a1 1d       	adc	r26, r1
    36d2:	62 1f       	adc	r22, r18
    36d4:	83 9f       	mul	r24, r19
    36d6:	a0 0d       	add	r26, r0
    36d8:	61 1d       	adc	r22, r1
    36da:	22 1f       	adc	r18, r18
    36dc:	74 9f       	mul	r23, r20
    36de:	33 27       	eor	r19, r19
    36e0:	a0 0d       	add	r26, r0
    36e2:	61 1d       	adc	r22, r1
    36e4:	23 1f       	adc	r18, r19
    36e6:	84 9f       	mul	r24, r20
    36e8:	60 0d       	add	r22, r0
    36ea:	21 1d       	adc	r18, r1
    36ec:	82 2f       	mov	r24, r18
    36ee:	76 2f       	mov	r23, r22
    36f0:	6a 2f       	mov	r22, r26
    36f2:	11 24       	eor	r1, r1
    36f4:	9f 57       	subi	r25, 0x7F	; 127
    36f6:	50 40       	sbci	r21, 0x00	; 0
    36f8:	9a f0       	brmi	.+38     	; 0x3720 <__mulsf3_pse+0x88>
    36fa:	f1 f0       	breq	.+60     	; 0x3738 <__mulsf3_pse+0xa0>
    36fc:	88 23       	and	r24, r24
    36fe:	4a f0       	brmi	.+18     	; 0x3712 <__mulsf3_pse+0x7a>
    3700:	ee 0f       	add	r30, r30
    3702:	ff 1f       	adc	r31, r31
    3704:	bb 1f       	adc	r27, r27
    3706:	66 1f       	adc	r22, r22
    3708:	77 1f       	adc	r23, r23
    370a:	88 1f       	adc	r24, r24
    370c:	91 50       	subi	r25, 0x01	; 1
    370e:	50 40       	sbci	r21, 0x00	; 0
    3710:	a9 f7       	brne	.-22     	; 0x36fc <__mulsf3_pse+0x64>
    3712:	9e 3f       	cpi	r25, 0xFE	; 254
    3714:	51 05       	cpc	r21, r1
    3716:	80 f0       	brcs	.+32     	; 0x3738 <__mulsf3_pse+0xa0>
    3718:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__fp_inf>
    371c:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__fp_szero>
    3720:	5f 3f       	cpi	r21, 0xFF	; 255
    3722:	e4 f3       	brlt	.-8      	; 0x371c <__mulsf3_pse+0x84>
    3724:	98 3e       	cpi	r25, 0xE8	; 232
    3726:	d4 f3       	brlt	.-12     	; 0x371c <__mulsf3_pse+0x84>
    3728:	86 95       	lsr	r24
    372a:	77 95       	ror	r23
    372c:	67 95       	ror	r22
    372e:	b7 95       	ror	r27
    3730:	f7 95       	ror	r31
    3732:	e7 95       	ror	r30
    3734:	9f 5f       	subi	r25, 0xFF	; 255
    3736:	c1 f7       	brne	.-16     	; 0x3728 <__mulsf3_pse+0x90>
    3738:	fe 2b       	or	r31, r30
    373a:	88 0f       	add	r24, r24
    373c:	91 1d       	adc	r25, r1
    373e:	96 95       	lsr	r25
    3740:	87 95       	ror	r24
    3742:	97 f9       	bld	r25, 7
    3744:	08 95       	ret

00003746 <vfprintf>:
    3746:	2f 92       	push	r2
    3748:	3f 92       	push	r3
    374a:	4f 92       	push	r4
    374c:	5f 92       	push	r5
    374e:	6f 92       	push	r6
    3750:	7f 92       	push	r7
    3752:	8f 92       	push	r8
    3754:	9f 92       	push	r9
    3756:	af 92       	push	r10
    3758:	bf 92       	push	r11
    375a:	cf 92       	push	r12
    375c:	df 92       	push	r13
    375e:	ef 92       	push	r14
    3760:	ff 92       	push	r15
    3762:	0f 93       	push	r16
    3764:	1f 93       	push	r17
    3766:	cf 93       	push	r28
    3768:	df 93       	push	r29
    376a:	cd b7       	in	r28, 0x3d	; 61
    376c:	de b7       	in	r29, 0x3e	; 62
    376e:	60 97       	sbiw	r28, 0x10	; 16
    3770:	cd bf       	out	0x3d, r28	; 61
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	7c 01       	movw	r14, r24
    3776:	1b 01       	movw	r2, r22
    3778:	6a 01       	movw	r12, r20
    377a:	fc 01       	movw	r30, r24
    377c:	16 82       	std	Z+6, r1	; 0x06
    377e:	17 82       	std	Z+7, r1	; 0x07
    3780:	83 81       	ldd	r24, Z+3	; 0x03
    3782:	81 ff       	sbrs	r24, 1
    3784:	44 c3       	rjmp	.+1672   	; 0x3e0e <vfprintf+0x6c8>
    3786:	9e 01       	movw	r18, r28
    3788:	2f 5f       	subi	r18, 0xFF	; 255
    378a:	3f 4f       	sbci	r19, 0xFF	; 255
    378c:	39 01       	movw	r6, r18
    378e:	f7 01       	movw	r30, r14
    3790:	93 81       	ldd	r25, Z+3	; 0x03
    3792:	f1 01       	movw	r30, r2
    3794:	93 fd       	sbrc	r25, 3
    3796:	85 91       	lpm	r24, Z+
    3798:	93 ff       	sbrs	r25, 3
    379a:	81 91       	ld	r24, Z+
    379c:	1f 01       	movw	r2, r30
    379e:	88 23       	and	r24, r24
    37a0:	09 f4       	brne	.+2      	; 0x37a4 <vfprintf+0x5e>
    37a2:	31 c3       	rjmp	.+1634   	; 0x3e06 <vfprintf+0x6c0>
    37a4:	85 32       	cpi	r24, 0x25	; 37
    37a6:	39 f4       	brne	.+14     	; 0x37b6 <vfprintf+0x70>
    37a8:	93 fd       	sbrc	r25, 3
    37aa:	85 91       	lpm	r24, Z+
    37ac:	93 ff       	sbrs	r25, 3
    37ae:	81 91       	ld	r24, Z+
    37b0:	1f 01       	movw	r2, r30
    37b2:	85 32       	cpi	r24, 0x25	; 37
    37b4:	39 f4       	brne	.+14     	; 0x37c4 <vfprintf+0x7e>
    37b6:	b7 01       	movw	r22, r14
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    37be:	56 01       	movw	r10, r12
    37c0:	65 01       	movw	r12, r10
    37c2:	e5 cf       	rjmp	.-54     	; 0x378e <vfprintf+0x48>
    37c4:	10 e0       	ldi	r17, 0x00	; 0
    37c6:	51 2c       	mov	r5, r1
    37c8:	91 2c       	mov	r9, r1
    37ca:	ff e1       	ldi	r31, 0x1F	; 31
    37cc:	f9 15       	cp	r31, r9
    37ce:	d8 f0       	brcs	.+54     	; 0x3806 <vfprintf+0xc0>
    37d0:	8b 32       	cpi	r24, 0x2B	; 43
    37d2:	79 f0       	breq	.+30     	; 0x37f2 <vfprintf+0xac>
    37d4:	38 f4       	brcc	.+14     	; 0x37e4 <vfprintf+0x9e>
    37d6:	80 32       	cpi	r24, 0x20	; 32
    37d8:	79 f0       	breq	.+30     	; 0x37f8 <vfprintf+0xb2>
    37da:	83 32       	cpi	r24, 0x23	; 35
    37dc:	a1 f4       	brne	.+40     	; 0x3806 <vfprintf+0xc0>
    37de:	f9 2d       	mov	r31, r9
    37e0:	f0 61       	ori	r31, 0x10	; 16
    37e2:	2e c0       	rjmp	.+92     	; 0x3840 <vfprintf+0xfa>
    37e4:	8d 32       	cpi	r24, 0x2D	; 45
    37e6:	61 f0       	breq	.+24     	; 0x3800 <vfprintf+0xba>
    37e8:	80 33       	cpi	r24, 0x30	; 48
    37ea:	69 f4       	brne	.+26     	; 0x3806 <vfprintf+0xc0>
    37ec:	29 2d       	mov	r18, r9
    37ee:	21 60       	ori	r18, 0x01	; 1
    37f0:	2d c0       	rjmp	.+90     	; 0x384c <vfprintf+0x106>
    37f2:	39 2d       	mov	r19, r9
    37f4:	32 60       	ori	r19, 0x02	; 2
    37f6:	93 2e       	mov	r9, r19
    37f8:	89 2d       	mov	r24, r9
    37fa:	84 60       	ori	r24, 0x04	; 4
    37fc:	98 2e       	mov	r9, r24
    37fe:	2a c0       	rjmp	.+84     	; 0x3854 <vfprintf+0x10e>
    3800:	e9 2d       	mov	r30, r9
    3802:	e8 60       	ori	r30, 0x08	; 8
    3804:	15 c0       	rjmp	.+42     	; 0x3830 <vfprintf+0xea>
    3806:	97 fc       	sbrc	r9, 7
    3808:	2d c0       	rjmp	.+90     	; 0x3864 <vfprintf+0x11e>
    380a:	20 ed       	ldi	r18, 0xD0	; 208
    380c:	28 0f       	add	r18, r24
    380e:	2a 30       	cpi	r18, 0x0A	; 10
    3810:	88 f4       	brcc	.+34     	; 0x3834 <vfprintf+0xee>
    3812:	96 fe       	sbrs	r9, 6
    3814:	06 c0       	rjmp	.+12     	; 0x3822 <vfprintf+0xdc>
    3816:	3a e0       	ldi	r19, 0x0A	; 10
    3818:	13 9f       	mul	r17, r19
    381a:	20 0d       	add	r18, r0
    381c:	11 24       	eor	r1, r1
    381e:	12 2f       	mov	r17, r18
    3820:	19 c0       	rjmp	.+50     	; 0x3854 <vfprintf+0x10e>
    3822:	8a e0       	ldi	r24, 0x0A	; 10
    3824:	58 9e       	mul	r5, r24
    3826:	20 0d       	add	r18, r0
    3828:	11 24       	eor	r1, r1
    382a:	52 2e       	mov	r5, r18
    382c:	e9 2d       	mov	r30, r9
    382e:	e0 62       	ori	r30, 0x20	; 32
    3830:	9e 2e       	mov	r9, r30
    3832:	10 c0       	rjmp	.+32     	; 0x3854 <vfprintf+0x10e>
    3834:	8e 32       	cpi	r24, 0x2E	; 46
    3836:	31 f4       	brne	.+12     	; 0x3844 <vfprintf+0xfe>
    3838:	96 fc       	sbrc	r9, 6
    383a:	e5 c2       	rjmp	.+1482   	; 0x3e06 <vfprintf+0x6c0>
    383c:	f9 2d       	mov	r31, r9
    383e:	f0 64       	ori	r31, 0x40	; 64
    3840:	9f 2e       	mov	r9, r31
    3842:	08 c0       	rjmp	.+16     	; 0x3854 <vfprintf+0x10e>
    3844:	8c 36       	cpi	r24, 0x6C	; 108
    3846:	21 f4       	brne	.+8      	; 0x3850 <vfprintf+0x10a>
    3848:	29 2d       	mov	r18, r9
    384a:	20 68       	ori	r18, 0x80	; 128
    384c:	92 2e       	mov	r9, r18
    384e:	02 c0       	rjmp	.+4      	; 0x3854 <vfprintf+0x10e>
    3850:	88 36       	cpi	r24, 0x68	; 104
    3852:	41 f4       	brne	.+16     	; 0x3864 <vfprintf+0x11e>
    3854:	f1 01       	movw	r30, r2
    3856:	93 fd       	sbrc	r25, 3
    3858:	85 91       	lpm	r24, Z+
    385a:	93 ff       	sbrs	r25, 3
    385c:	81 91       	ld	r24, Z+
    385e:	1f 01       	movw	r2, r30
    3860:	81 11       	cpse	r24, r1
    3862:	b3 cf       	rjmp	.-154    	; 0x37ca <vfprintf+0x84>
    3864:	9b eb       	ldi	r25, 0xBB	; 187
    3866:	98 0f       	add	r25, r24
    3868:	93 30       	cpi	r25, 0x03	; 3
    386a:	20 f4       	brcc	.+8      	; 0x3874 <vfprintf+0x12e>
    386c:	99 2d       	mov	r25, r9
    386e:	90 61       	ori	r25, 0x10	; 16
    3870:	80 5e       	subi	r24, 0xE0	; 224
    3872:	07 c0       	rjmp	.+14     	; 0x3882 <vfprintf+0x13c>
    3874:	9b e9       	ldi	r25, 0x9B	; 155
    3876:	98 0f       	add	r25, r24
    3878:	93 30       	cpi	r25, 0x03	; 3
    387a:	08 f0       	brcs	.+2      	; 0x387e <vfprintf+0x138>
    387c:	66 c1       	rjmp	.+716    	; 0x3b4a <vfprintf+0x404>
    387e:	99 2d       	mov	r25, r9
    3880:	9f 7e       	andi	r25, 0xEF	; 239
    3882:	96 ff       	sbrs	r25, 6
    3884:	16 e0       	ldi	r17, 0x06	; 6
    3886:	9f 73       	andi	r25, 0x3F	; 63
    3888:	99 2e       	mov	r9, r25
    388a:	85 36       	cpi	r24, 0x65	; 101
    388c:	19 f4       	brne	.+6      	; 0x3894 <vfprintf+0x14e>
    388e:	90 64       	ori	r25, 0x40	; 64
    3890:	99 2e       	mov	r9, r25
    3892:	08 c0       	rjmp	.+16     	; 0x38a4 <vfprintf+0x15e>
    3894:	86 36       	cpi	r24, 0x66	; 102
    3896:	21 f4       	brne	.+8      	; 0x38a0 <vfprintf+0x15a>
    3898:	39 2f       	mov	r19, r25
    389a:	30 68       	ori	r19, 0x80	; 128
    389c:	93 2e       	mov	r9, r19
    389e:	02 c0       	rjmp	.+4      	; 0x38a4 <vfprintf+0x15e>
    38a0:	11 11       	cpse	r17, r1
    38a2:	11 50       	subi	r17, 0x01	; 1
    38a4:	97 fe       	sbrs	r9, 7
    38a6:	07 c0       	rjmp	.+14     	; 0x38b6 <vfprintf+0x170>
    38a8:	1c 33       	cpi	r17, 0x3C	; 60
    38aa:	50 f4       	brcc	.+20     	; 0x38c0 <vfprintf+0x17a>
    38ac:	44 24       	eor	r4, r4
    38ae:	43 94       	inc	r4
    38b0:	41 0e       	add	r4, r17
    38b2:	27 e0       	ldi	r18, 0x07	; 7
    38b4:	0b c0       	rjmp	.+22     	; 0x38cc <vfprintf+0x186>
    38b6:	18 30       	cpi	r17, 0x08	; 8
    38b8:	38 f0       	brcs	.+14     	; 0x38c8 <vfprintf+0x182>
    38ba:	27 e0       	ldi	r18, 0x07	; 7
    38bc:	17 e0       	ldi	r17, 0x07	; 7
    38be:	05 c0       	rjmp	.+10     	; 0x38ca <vfprintf+0x184>
    38c0:	27 e0       	ldi	r18, 0x07	; 7
    38c2:	9c e3       	ldi	r25, 0x3C	; 60
    38c4:	49 2e       	mov	r4, r25
    38c6:	02 c0       	rjmp	.+4      	; 0x38cc <vfprintf+0x186>
    38c8:	21 2f       	mov	r18, r17
    38ca:	41 2c       	mov	r4, r1
    38cc:	56 01       	movw	r10, r12
    38ce:	84 e0       	ldi	r24, 0x04	; 4
    38d0:	a8 0e       	add	r10, r24
    38d2:	b1 1c       	adc	r11, r1
    38d4:	f6 01       	movw	r30, r12
    38d6:	60 81       	ld	r22, Z
    38d8:	71 81       	ldd	r23, Z+1	; 0x01
    38da:	82 81       	ldd	r24, Z+2	; 0x02
    38dc:	93 81       	ldd	r25, Z+3	; 0x03
    38de:	04 2d       	mov	r16, r4
    38e0:	a3 01       	movw	r20, r6
    38e2:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <__ftoa_engine>
    38e6:	6c 01       	movw	r12, r24
    38e8:	f9 81       	ldd	r31, Y+1	; 0x01
    38ea:	fc 87       	std	Y+12, r31	; 0x0c
    38ec:	f0 ff       	sbrs	r31, 0
    38ee:	02 c0       	rjmp	.+4      	; 0x38f4 <vfprintf+0x1ae>
    38f0:	f3 ff       	sbrs	r31, 3
    38f2:	06 c0       	rjmp	.+12     	; 0x3900 <vfprintf+0x1ba>
    38f4:	91 fc       	sbrc	r9, 1
    38f6:	06 c0       	rjmp	.+12     	; 0x3904 <vfprintf+0x1be>
    38f8:	92 fe       	sbrs	r9, 2
    38fa:	06 c0       	rjmp	.+12     	; 0x3908 <vfprintf+0x1c2>
    38fc:	00 e2       	ldi	r16, 0x20	; 32
    38fe:	05 c0       	rjmp	.+10     	; 0x390a <vfprintf+0x1c4>
    3900:	0d e2       	ldi	r16, 0x2D	; 45
    3902:	03 c0       	rjmp	.+6      	; 0x390a <vfprintf+0x1c4>
    3904:	0b e2       	ldi	r16, 0x2B	; 43
    3906:	01 c0       	rjmp	.+2      	; 0x390a <vfprintf+0x1c4>
    3908:	00 e0       	ldi	r16, 0x00	; 0
    390a:	8c 85       	ldd	r24, Y+12	; 0x0c
    390c:	8c 70       	andi	r24, 0x0C	; 12
    390e:	19 f0       	breq	.+6      	; 0x3916 <vfprintf+0x1d0>
    3910:	01 11       	cpse	r16, r1
    3912:	5a c2       	rjmp	.+1204   	; 0x3dc8 <vfprintf+0x682>
    3914:	9b c2       	rjmp	.+1334   	; 0x3e4c <vfprintf+0x706>
    3916:	97 fe       	sbrs	r9, 7
    3918:	10 c0       	rjmp	.+32     	; 0x393a <vfprintf+0x1f4>
    391a:	4c 0c       	add	r4, r12
    391c:	fc 85       	ldd	r31, Y+12	; 0x0c
    391e:	f4 ff       	sbrs	r31, 4
    3920:	04 c0       	rjmp	.+8      	; 0x392a <vfprintf+0x1e4>
    3922:	8a 81       	ldd	r24, Y+2	; 0x02
    3924:	81 33       	cpi	r24, 0x31	; 49
    3926:	09 f4       	brne	.+2      	; 0x392a <vfprintf+0x1e4>
    3928:	4a 94       	dec	r4
    392a:	14 14       	cp	r1, r4
    392c:	74 f5       	brge	.+92     	; 0x398a <vfprintf+0x244>
    392e:	28 e0       	ldi	r18, 0x08	; 8
    3930:	24 15       	cp	r18, r4
    3932:	78 f5       	brcc	.+94     	; 0x3992 <vfprintf+0x24c>
    3934:	88 e0       	ldi	r24, 0x08	; 8
    3936:	48 2e       	mov	r4, r24
    3938:	2c c0       	rjmp	.+88     	; 0x3992 <vfprintf+0x24c>
    393a:	96 fc       	sbrc	r9, 6
    393c:	2a c0       	rjmp	.+84     	; 0x3992 <vfprintf+0x24c>
    393e:	81 2f       	mov	r24, r17
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	8c 15       	cp	r24, r12
    3944:	9d 05       	cpc	r25, r13
    3946:	9c f0       	brlt	.+38     	; 0x396e <vfprintf+0x228>
    3948:	3c ef       	ldi	r19, 0xFC	; 252
    394a:	c3 16       	cp	r12, r19
    394c:	3f ef       	ldi	r19, 0xFF	; 255
    394e:	d3 06       	cpc	r13, r19
    3950:	74 f0       	brlt	.+28     	; 0x396e <vfprintf+0x228>
    3952:	89 2d       	mov	r24, r9
    3954:	80 68       	ori	r24, 0x80	; 128
    3956:	98 2e       	mov	r9, r24
    3958:	0a c0       	rjmp	.+20     	; 0x396e <vfprintf+0x228>
    395a:	e2 e0       	ldi	r30, 0x02	; 2
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	ec 0f       	add	r30, r28
    3960:	fd 1f       	adc	r31, r29
    3962:	e1 0f       	add	r30, r17
    3964:	f1 1d       	adc	r31, r1
    3966:	80 81       	ld	r24, Z
    3968:	80 33       	cpi	r24, 0x30	; 48
    396a:	19 f4       	brne	.+6      	; 0x3972 <vfprintf+0x22c>
    396c:	11 50       	subi	r17, 0x01	; 1
    396e:	11 11       	cpse	r17, r1
    3970:	f4 cf       	rjmp	.-24     	; 0x395a <vfprintf+0x214>
    3972:	97 fe       	sbrs	r9, 7
    3974:	0e c0       	rjmp	.+28     	; 0x3992 <vfprintf+0x24c>
    3976:	44 24       	eor	r4, r4
    3978:	43 94       	inc	r4
    397a:	41 0e       	add	r4, r17
    397c:	81 2f       	mov	r24, r17
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	c8 16       	cp	r12, r24
    3982:	d9 06       	cpc	r13, r25
    3984:	2c f4       	brge	.+10     	; 0x3990 <vfprintf+0x24a>
    3986:	1c 19       	sub	r17, r12
    3988:	04 c0       	rjmp	.+8      	; 0x3992 <vfprintf+0x24c>
    398a:	44 24       	eor	r4, r4
    398c:	43 94       	inc	r4
    398e:	01 c0       	rjmp	.+2      	; 0x3992 <vfprintf+0x24c>
    3990:	10 e0       	ldi	r17, 0x00	; 0
    3992:	97 fe       	sbrs	r9, 7
    3994:	06 c0       	rjmp	.+12     	; 0x39a2 <vfprintf+0x25c>
    3996:	1c 14       	cp	r1, r12
    3998:	1d 04       	cpc	r1, r13
    399a:	34 f4       	brge	.+12     	; 0x39a8 <vfprintf+0x262>
    399c:	c6 01       	movw	r24, r12
    399e:	01 96       	adiw	r24, 0x01	; 1
    39a0:	05 c0       	rjmp	.+10     	; 0x39ac <vfprintf+0x266>
    39a2:	85 e0       	ldi	r24, 0x05	; 5
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	02 c0       	rjmp	.+4      	; 0x39ac <vfprintf+0x266>
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	01 11       	cpse	r16, r1
    39ae:	01 96       	adiw	r24, 0x01	; 1
    39b0:	11 23       	and	r17, r17
    39b2:	31 f0       	breq	.+12     	; 0x39c0 <vfprintf+0x27a>
    39b4:	21 2f       	mov	r18, r17
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	2f 5f       	subi	r18, 0xFF	; 255
    39ba:	3f 4f       	sbci	r19, 0xFF	; 255
    39bc:	82 0f       	add	r24, r18
    39be:	93 1f       	adc	r25, r19
    39c0:	25 2d       	mov	r18, r5
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	82 17       	cp	r24, r18
    39c6:	93 07       	cpc	r25, r19
    39c8:	14 f4       	brge	.+4      	; 0x39ce <vfprintf+0x288>
    39ca:	58 1a       	sub	r5, r24
    39cc:	01 c0       	rjmp	.+2      	; 0x39d0 <vfprintf+0x28a>
    39ce:	51 2c       	mov	r5, r1
    39d0:	89 2d       	mov	r24, r9
    39d2:	89 70       	andi	r24, 0x09	; 9
    39d4:	49 f4       	brne	.+18     	; 0x39e8 <vfprintf+0x2a2>
    39d6:	55 20       	and	r5, r5
    39d8:	39 f0       	breq	.+14     	; 0x39e8 <vfprintf+0x2a2>
    39da:	b7 01       	movw	r22, r14
    39dc:	80 e2       	ldi	r24, 0x20	; 32
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    39e4:	5a 94       	dec	r5
    39e6:	f7 cf       	rjmp	.-18     	; 0x39d6 <vfprintf+0x290>
    39e8:	00 23       	and	r16, r16
    39ea:	29 f0       	breq	.+10     	; 0x39f6 <vfprintf+0x2b0>
    39ec:	b7 01       	movw	r22, r14
    39ee:	80 2f       	mov	r24, r16
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    39f6:	93 fc       	sbrc	r9, 3
    39f8:	09 c0       	rjmp	.+18     	; 0x3a0c <vfprintf+0x2c6>
    39fa:	55 20       	and	r5, r5
    39fc:	39 f0       	breq	.+14     	; 0x3a0c <vfprintf+0x2c6>
    39fe:	b7 01       	movw	r22, r14
    3a00:	80 e3       	ldi	r24, 0x30	; 48
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3a08:	5a 94       	dec	r5
    3a0a:	f7 cf       	rjmp	.-18     	; 0x39fa <vfprintf+0x2b4>
    3a0c:	97 fe       	sbrs	r9, 7
    3a0e:	4c c0       	rjmp	.+152    	; 0x3aa8 <vfprintf+0x362>
    3a10:	46 01       	movw	r8, r12
    3a12:	d7 fe       	sbrs	r13, 7
    3a14:	02 c0       	rjmp	.+4      	; 0x3a1a <vfprintf+0x2d4>
    3a16:	81 2c       	mov	r8, r1
    3a18:	91 2c       	mov	r9, r1
    3a1a:	c6 01       	movw	r24, r12
    3a1c:	88 19       	sub	r24, r8
    3a1e:	99 09       	sbc	r25, r9
    3a20:	f3 01       	movw	r30, r6
    3a22:	e8 0f       	add	r30, r24
    3a24:	f9 1f       	adc	r31, r25
    3a26:	ed 87       	std	Y+13, r30	; 0x0d
    3a28:	fe 87       	std	Y+14, r31	; 0x0e
    3a2a:	96 01       	movw	r18, r12
    3a2c:	24 19       	sub	r18, r4
    3a2e:	31 09       	sbc	r19, r1
    3a30:	2f 87       	std	Y+15, r18	; 0x0f
    3a32:	38 8b       	std	Y+16, r19	; 0x10
    3a34:	01 2f       	mov	r16, r17
    3a36:	10 e0       	ldi	r17, 0x00	; 0
    3a38:	11 95       	neg	r17
    3a3a:	01 95       	neg	r16
    3a3c:	11 09       	sbc	r17, r1
    3a3e:	3f ef       	ldi	r19, 0xFF	; 255
    3a40:	83 16       	cp	r8, r19
    3a42:	93 06       	cpc	r9, r19
    3a44:	29 f4       	brne	.+10     	; 0x3a50 <vfprintf+0x30a>
    3a46:	b7 01       	movw	r22, r14
    3a48:	8e e2       	ldi	r24, 0x2E	; 46
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3a50:	c8 14       	cp	r12, r8
    3a52:	d9 04       	cpc	r13, r9
    3a54:	4c f0       	brlt	.+18     	; 0x3a68 <vfprintf+0x322>
    3a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a58:	98 89       	ldd	r25, Y+16	; 0x10
    3a5a:	88 15       	cp	r24, r8
    3a5c:	99 05       	cpc	r25, r9
    3a5e:	24 f4       	brge	.+8      	; 0x3a68 <vfprintf+0x322>
    3a60:	ed 85       	ldd	r30, Y+13	; 0x0d
    3a62:	fe 85       	ldd	r31, Y+14	; 0x0e
    3a64:	81 81       	ldd	r24, Z+1	; 0x01
    3a66:	01 c0       	rjmp	.+2      	; 0x3a6a <vfprintf+0x324>
    3a68:	80 e3       	ldi	r24, 0x30	; 48
    3a6a:	f1 e0       	ldi	r31, 0x01	; 1
    3a6c:	8f 1a       	sub	r8, r31
    3a6e:	91 08       	sbc	r9, r1
    3a70:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a72:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a74:	2f 5f       	subi	r18, 0xFF	; 255
    3a76:	3f 4f       	sbci	r19, 0xFF	; 255
    3a78:	2d 87       	std	Y+13, r18	; 0x0d
    3a7a:	3e 87       	std	Y+14, r19	; 0x0e
    3a7c:	80 16       	cp	r8, r16
    3a7e:	91 06       	cpc	r9, r17
    3a80:	2c f0       	brlt	.+10     	; 0x3a8c <vfprintf+0x346>
    3a82:	b7 01       	movw	r22, r14
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3a8a:	d9 cf       	rjmp	.-78     	; 0x3a3e <vfprintf+0x2f8>
    3a8c:	c8 14       	cp	r12, r8
    3a8e:	d9 04       	cpc	r13, r9
    3a90:	41 f4       	brne	.+16     	; 0x3aa2 <vfprintf+0x35c>
    3a92:	9a 81       	ldd	r25, Y+2	; 0x02
    3a94:	96 33       	cpi	r25, 0x36	; 54
    3a96:	20 f4       	brcc	.+8      	; 0x3aa0 <vfprintf+0x35a>
    3a98:	95 33       	cpi	r25, 0x35	; 53
    3a9a:	19 f4       	brne	.+6      	; 0x3aa2 <vfprintf+0x35c>
    3a9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a9e:	34 ff       	sbrs	r19, 4
    3aa0:	81 e3       	ldi	r24, 0x31	; 49
    3aa2:	b7 01       	movw	r22, r14
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	4e c0       	rjmp	.+156    	; 0x3b44 <vfprintf+0x3fe>
    3aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aaa:	81 33       	cpi	r24, 0x31	; 49
    3aac:	19 f0       	breq	.+6      	; 0x3ab4 <vfprintf+0x36e>
    3aae:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ab0:	9f 7e       	andi	r25, 0xEF	; 239
    3ab2:	9c 87       	std	Y+12, r25	; 0x0c
    3ab4:	b7 01       	movw	r22, r14
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3abc:	11 11       	cpse	r17, r1
    3abe:	05 c0       	rjmp	.+10     	; 0x3aca <vfprintf+0x384>
    3ac0:	94 fc       	sbrc	r9, 4
    3ac2:	18 c0       	rjmp	.+48     	; 0x3af4 <vfprintf+0x3ae>
    3ac4:	85 e6       	ldi	r24, 0x65	; 101
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	17 c0       	rjmp	.+46     	; 0x3af8 <vfprintf+0x3b2>
    3aca:	b7 01       	movw	r22, r14
    3acc:	8e e2       	ldi	r24, 0x2E	; 46
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3ad4:	1e 5f       	subi	r17, 0xFE	; 254
    3ad6:	82 e0       	ldi	r24, 0x02	; 2
    3ad8:	01 e0       	ldi	r16, 0x01	; 1
    3ada:	08 0f       	add	r16, r24
    3adc:	f3 01       	movw	r30, r6
    3ade:	e8 0f       	add	r30, r24
    3ae0:	f1 1d       	adc	r31, r1
    3ae2:	80 81       	ld	r24, Z
    3ae4:	b7 01       	movw	r22, r14
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3aec:	80 2f       	mov	r24, r16
    3aee:	01 13       	cpse	r16, r17
    3af0:	f3 cf       	rjmp	.-26     	; 0x3ad8 <vfprintf+0x392>
    3af2:	e6 cf       	rjmp	.-52     	; 0x3ac0 <vfprintf+0x37a>
    3af4:	85 e4       	ldi	r24, 0x45	; 69
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	b7 01       	movw	r22, r14
    3afa:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3afe:	d7 fc       	sbrc	r13, 7
    3b00:	06 c0       	rjmp	.+12     	; 0x3b0e <vfprintf+0x3c8>
    3b02:	c1 14       	cp	r12, r1
    3b04:	d1 04       	cpc	r13, r1
    3b06:	41 f4       	brne	.+16     	; 0x3b18 <vfprintf+0x3d2>
    3b08:	ec 85       	ldd	r30, Y+12	; 0x0c
    3b0a:	e4 ff       	sbrs	r30, 4
    3b0c:	05 c0       	rjmp	.+10     	; 0x3b18 <vfprintf+0x3d2>
    3b0e:	d1 94       	neg	r13
    3b10:	c1 94       	neg	r12
    3b12:	d1 08       	sbc	r13, r1
    3b14:	8d e2       	ldi	r24, 0x2D	; 45
    3b16:	01 c0       	rjmp	.+2      	; 0x3b1a <vfprintf+0x3d4>
    3b18:	8b e2       	ldi	r24, 0x2B	; 43
    3b1a:	b7 01       	movw	r22, r14
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3b22:	80 e3       	ldi	r24, 0x30	; 48
    3b24:	2a e0       	ldi	r18, 0x0A	; 10
    3b26:	c2 16       	cp	r12, r18
    3b28:	d1 04       	cpc	r13, r1
    3b2a:	2c f0       	brlt	.+10     	; 0x3b36 <vfprintf+0x3f0>
    3b2c:	8f 5f       	subi	r24, 0xFF	; 255
    3b2e:	fa e0       	ldi	r31, 0x0A	; 10
    3b30:	cf 1a       	sub	r12, r31
    3b32:	d1 08       	sbc	r13, r1
    3b34:	f7 cf       	rjmp	.-18     	; 0x3b24 <vfprintf+0x3de>
    3b36:	b7 01       	movw	r22, r14
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3b3e:	b7 01       	movw	r22, r14
    3b40:	c6 01       	movw	r24, r12
    3b42:	c0 96       	adiw	r24, 0x30	; 48
    3b44:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3b48:	54 c1       	rjmp	.+680    	; 0x3df2 <vfprintf+0x6ac>
    3b4a:	83 36       	cpi	r24, 0x63	; 99
    3b4c:	31 f0       	breq	.+12     	; 0x3b5a <vfprintf+0x414>
    3b4e:	83 37       	cpi	r24, 0x73	; 115
    3b50:	79 f0       	breq	.+30     	; 0x3b70 <vfprintf+0x42a>
    3b52:	83 35       	cpi	r24, 0x53	; 83
    3b54:	09 f0       	breq	.+2      	; 0x3b58 <vfprintf+0x412>
    3b56:	56 c0       	rjmp	.+172    	; 0x3c04 <vfprintf+0x4be>
    3b58:	20 c0       	rjmp	.+64     	; 0x3b9a <vfprintf+0x454>
    3b5a:	56 01       	movw	r10, r12
    3b5c:	32 e0       	ldi	r19, 0x02	; 2
    3b5e:	a3 0e       	add	r10, r19
    3b60:	b1 1c       	adc	r11, r1
    3b62:	f6 01       	movw	r30, r12
    3b64:	80 81       	ld	r24, Z
    3b66:	89 83       	std	Y+1, r24	; 0x01
    3b68:	01 e0       	ldi	r16, 0x01	; 1
    3b6a:	10 e0       	ldi	r17, 0x00	; 0
    3b6c:	63 01       	movw	r12, r6
    3b6e:	12 c0       	rjmp	.+36     	; 0x3b94 <vfprintf+0x44e>
    3b70:	56 01       	movw	r10, r12
    3b72:	f2 e0       	ldi	r31, 0x02	; 2
    3b74:	af 0e       	add	r10, r31
    3b76:	b1 1c       	adc	r11, r1
    3b78:	f6 01       	movw	r30, r12
    3b7a:	c0 80       	ld	r12, Z
    3b7c:	d1 80       	ldd	r13, Z+1	; 0x01
    3b7e:	96 fe       	sbrs	r9, 6
    3b80:	03 c0       	rjmp	.+6      	; 0x3b88 <vfprintf+0x442>
    3b82:	61 2f       	mov	r22, r17
    3b84:	70 e0       	ldi	r23, 0x00	; 0
    3b86:	02 c0       	rjmp	.+4      	; 0x3b8c <vfprintf+0x446>
    3b88:	6f ef       	ldi	r22, 0xFF	; 255
    3b8a:	7f ef       	ldi	r23, 0xFF	; 255
    3b8c:	c6 01       	movw	r24, r12
    3b8e:	0e 94 3e 20 	call	0x407c	; 0x407c <strnlen>
    3b92:	8c 01       	movw	r16, r24
    3b94:	f9 2d       	mov	r31, r9
    3b96:	ff 77       	andi	r31, 0x7F	; 127
    3b98:	14 c0       	rjmp	.+40     	; 0x3bc2 <vfprintf+0x47c>
    3b9a:	56 01       	movw	r10, r12
    3b9c:	22 e0       	ldi	r18, 0x02	; 2
    3b9e:	a2 0e       	add	r10, r18
    3ba0:	b1 1c       	adc	r11, r1
    3ba2:	f6 01       	movw	r30, r12
    3ba4:	c0 80       	ld	r12, Z
    3ba6:	d1 80       	ldd	r13, Z+1	; 0x01
    3ba8:	96 fe       	sbrs	r9, 6
    3baa:	03 c0       	rjmp	.+6      	; 0x3bb2 <vfprintf+0x46c>
    3bac:	61 2f       	mov	r22, r17
    3bae:	70 e0       	ldi	r23, 0x00	; 0
    3bb0:	02 c0       	rjmp	.+4      	; 0x3bb6 <vfprintf+0x470>
    3bb2:	6f ef       	ldi	r22, 0xFF	; 255
    3bb4:	7f ef       	ldi	r23, 0xFF	; 255
    3bb6:	c6 01       	movw	r24, r12
    3bb8:	0e 94 23 20 	call	0x4046	; 0x4046 <strnlen_P>
    3bbc:	8c 01       	movw	r16, r24
    3bbe:	f9 2d       	mov	r31, r9
    3bc0:	f0 68       	ori	r31, 0x80	; 128
    3bc2:	9f 2e       	mov	r9, r31
    3bc4:	f3 fd       	sbrc	r31, 3
    3bc6:	1a c0       	rjmp	.+52     	; 0x3bfc <vfprintf+0x4b6>
    3bc8:	85 2d       	mov	r24, r5
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	08 17       	cp	r16, r24
    3bce:	19 07       	cpc	r17, r25
    3bd0:	a8 f4       	brcc	.+42     	; 0x3bfc <vfprintf+0x4b6>
    3bd2:	b7 01       	movw	r22, r14
    3bd4:	80 e2       	ldi	r24, 0x20	; 32
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3bdc:	5a 94       	dec	r5
    3bde:	f4 cf       	rjmp	.-24     	; 0x3bc8 <vfprintf+0x482>
    3be0:	f6 01       	movw	r30, r12
    3be2:	97 fc       	sbrc	r9, 7
    3be4:	85 91       	lpm	r24, Z+
    3be6:	97 fe       	sbrs	r9, 7
    3be8:	81 91       	ld	r24, Z+
    3bea:	6f 01       	movw	r12, r30
    3bec:	b7 01       	movw	r22, r14
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3bf4:	51 10       	cpse	r5, r1
    3bf6:	5a 94       	dec	r5
    3bf8:	01 50       	subi	r16, 0x01	; 1
    3bfa:	11 09       	sbc	r17, r1
    3bfc:	01 15       	cp	r16, r1
    3bfe:	11 05       	cpc	r17, r1
    3c00:	79 f7       	brne	.-34     	; 0x3be0 <vfprintf+0x49a>
    3c02:	f7 c0       	rjmp	.+494    	; 0x3df2 <vfprintf+0x6ac>
    3c04:	84 36       	cpi	r24, 0x64	; 100
    3c06:	11 f0       	breq	.+4      	; 0x3c0c <vfprintf+0x4c6>
    3c08:	89 36       	cpi	r24, 0x69	; 105
    3c0a:	61 f5       	brne	.+88     	; 0x3c64 <vfprintf+0x51e>
    3c0c:	56 01       	movw	r10, r12
    3c0e:	97 fe       	sbrs	r9, 7
    3c10:	09 c0       	rjmp	.+18     	; 0x3c24 <vfprintf+0x4de>
    3c12:	24 e0       	ldi	r18, 0x04	; 4
    3c14:	a2 0e       	add	r10, r18
    3c16:	b1 1c       	adc	r11, r1
    3c18:	f6 01       	movw	r30, r12
    3c1a:	60 81       	ld	r22, Z
    3c1c:	71 81       	ldd	r23, Z+1	; 0x01
    3c1e:	82 81       	ldd	r24, Z+2	; 0x02
    3c20:	93 81       	ldd	r25, Z+3	; 0x03
    3c22:	0a c0       	rjmp	.+20     	; 0x3c38 <vfprintf+0x4f2>
    3c24:	f2 e0       	ldi	r31, 0x02	; 2
    3c26:	af 0e       	add	r10, r31
    3c28:	b1 1c       	adc	r11, r1
    3c2a:	f6 01       	movw	r30, r12
    3c2c:	60 81       	ld	r22, Z
    3c2e:	71 81       	ldd	r23, Z+1	; 0x01
    3c30:	07 2e       	mov	r0, r23
    3c32:	00 0c       	add	r0, r0
    3c34:	88 0b       	sbc	r24, r24
    3c36:	99 0b       	sbc	r25, r25
    3c38:	f9 2d       	mov	r31, r9
    3c3a:	ff 76       	andi	r31, 0x6F	; 111
    3c3c:	9f 2e       	mov	r9, r31
    3c3e:	97 ff       	sbrs	r25, 7
    3c40:	09 c0       	rjmp	.+18     	; 0x3c54 <vfprintf+0x50e>
    3c42:	90 95       	com	r25
    3c44:	80 95       	com	r24
    3c46:	70 95       	com	r23
    3c48:	61 95       	neg	r22
    3c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c50:	f0 68       	ori	r31, 0x80	; 128
    3c52:	9f 2e       	mov	r9, r31
    3c54:	2a e0       	ldi	r18, 0x0A	; 10
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	a3 01       	movw	r20, r6
    3c5a:	0e 94 aa 20 	call	0x4154	; 0x4154 <__ultoa_invert>
    3c5e:	c8 2e       	mov	r12, r24
    3c60:	c6 18       	sub	r12, r6
    3c62:	3f c0       	rjmp	.+126    	; 0x3ce2 <vfprintf+0x59c>
    3c64:	09 2d       	mov	r16, r9
    3c66:	85 37       	cpi	r24, 0x75	; 117
    3c68:	21 f4       	brne	.+8      	; 0x3c72 <vfprintf+0x52c>
    3c6a:	0f 7e       	andi	r16, 0xEF	; 239
    3c6c:	2a e0       	ldi	r18, 0x0A	; 10
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	1d c0       	rjmp	.+58     	; 0x3cac <vfprintf+0x566>
    3c72:	09 7f       	andi	r16, 0xF9	; 249
    3c74:	8f 36       	cpi	r24, 0x6F	; 111
    3c76:	91 f0       	breq	.+36     	; 0x3c9c <vfprintf+0x556>
    3c78:	18 f4       	brcc	.+6      	; 0x3c80 <vfprintf+0x53a>
    3c7a:	88 35       	cpi	r24, 0x58	; 88
    3c7c:	59 f0       	breq	.+22     	; 0x3c94 <vfprintf+0x54e>
    3c7e:	c3 c0       	rjmp	.+390    	; 0x3e06 <vfprintf+0x6c0>
    3c80:	80 37       	cpi	r24, 0x70	; 112
    3c82:	19 f0       	breq	.+6      	; 0x3c8a <vfprintf+0x544>
    3c84:	88 37       	cpi	r24, 0x78	; 120
    3c86:	11 f0       	breq	.+4      	; 0x3c8c <vfprintf+0x546>
    3c88:	be c0       	rjmp	.+380    	; 0x3e06 <vfprintf+0x6c0>
    3c8a:	00 61       	ori	r16, 0x10	; 16
    3c8c:	04 ff       	sbrs	r16, 4
    3c8e:	09 c0       	rjmp	.+18     	; 0x3ca2 <vfprintf+0x55c>
    3c90:	04 60       	ori	r16, 0x04	; 4
    3c92:	07 c0       	rjmp	.+14     	; 0x3ca2 <vfprintf+0x55c>
    3c94:	94 fe       	sbrs	r9, 4
    3c96:	08 c0       	rjmp	.+16     	; 0x3ca8 <vfprintf+0x562>
    3c98:	06 60       	ori	r16, 0x06	; 6
    3c9a:	06 c0       	rjmp	.+12     	; 0x3ca8 <vfprintf+0x562>
    3c9c:	28 e0       	ldi	r18, 0x08	; 8
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	05 c0       	rjmp	.+10     	; 0x3cac <vfprintf+0x566>
    3ca2:	20 e1       	ldi	r18, 0x10	; 16
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	02 c0       	rjmp	.+4      	; 0x3cac <vfprintf+0x566>
    3ca8:	20 e1       	ldi	r18, 0x10	; 16
    3caa:	32 e0       	ldi	r19, 0x02	; 2
    3cac:	56 01       	movw	r10, r12
    3cae:	07 ff       	sbrs	r16, 7
    3cb0:	09 c0       	rjmp	.+18     	; 0x3cc4 <vfprintf+0x57e>
    3cb2:	84 e0       	ldi	r24, 0x04	; 4
    3cb4:	a8 0e       	add	r10, r24
    3cb6:	b1 1c       	adc	r11, r1
    3cb8:	f6 01       	movw	r30, r12
    3cba:	60 81       	ld	r22, Z
    3cbc:	71 81       	ldd	r23, Z+1	; 0x01
    3cbe:	82 81       	ldd	r24, Z+2	; 0x02
    3cc0:	93 81       	ldd	r25, Z+3	; 0x03
    3cc2:	08 c0       	rjmp	.+16     	; 0x3cd4 <vfprintf+0x58e>
    3cc4:	f2 e0       	ldi	r31, 0x02	; 2
    3cc6:	af 0e       	add	r10, r31
    3cc8:	b1 1c       	adc	r11, r1
    3cca:	f6 01       	movw	r30, r12
    3ccc:	60 81       	ld	r22, Z
    3cce:	71 81       	ldd	r23, Z+1	; 0x01
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	a3 01       	movw	r20, r6
    3cd6:	0e 94 aa 20 	call	0x4154	; 0x4154 <__ultoa_invert>
    3cda:	c8 2e       	mov	r12, r24
    3cdc:	c6 18       	sub	r12, r6
    3cde:	0f 77       	andi	r16, 0x7F	; 127
    3ce0:	90 2e       	mov	r9, r16
    3ce2:	96 fe       	sbrs	r9, 6
    3ce4:	0b c0       	rjmp	.+22     	; 0x3cfc <vfprintf+0x5b6>
    3ce6:	09 2d       	mov	r16, r9
    3ce8:	0e 7f       	andi	r16, 0xFE	; 254
    3cea:	c1 16       	cp	r12, r17
    3cec:	50 f4       	brcc	.+20     	; 0x3d02 <vfprintf+0x5bc>
    3cee:	94 fe       	sbrs	r9, 4
    3cf0:	0a c0       	rjmp	.+20     	; 0x3d06 <vfprintf+0x5c0>
    3cf2:	92 fc       	sbrc	r9, 2
    3cf4:	08 c0       	rjmp	.+16     	; 0x3d06 <vfprintf+0x5c0>
    3cf6:	09 2d       	mov	r16, r9
    3cf8:	0e 7e       	andi	r16, 0xEE	; 238
    3cfa:	05 c0       	rjmp	.+10     	; 0x3d06 <vfprintf+0x5c0>
    3cfc:	dc 2c       	mov	r13, r12
    3cfe:	09 2d       	mov	r16, r9
    3d00:	03 c0       	rjmp	.+6      	; 0x3d08 <vfprintf+0x5c2>
    3d02:	dc 2c       	mov	r13, r12
    3d04:	01 c0       	rjmp	.+2      	; 0x3d08 <vfprintf+0x5c2>
    3d06:	d1 2e       	mov	r13, r17
    3d08:	04 ff       	sbrs	r16, 4
    3d0a:	0d c0       	rjmp	.+26     	; 0x3d26 <vfprintf+0x5e0>
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	ec 0d       	add	r30, r12
    3d10:	f1 1d       	adc	r31, r1
    3d12:	80 81       	ld	r24, Z
    3d14:	80 33       	cpi	r24, 0x30	; 48
    3d16:	11 f4       	brne	.+4      	; 0x3d1c <vfprintf+0x5d6>
    3d18:	09 7e       	andi	r16, 0xE9	; 233
    3d1a:	09 c0       	rjmp	.+18     	; 0x3d2e <vfprintf+0x5e8>
    3d1c:	02 ff       	sbrs	r16, 2
    3d1e:	06 c0       	rjmp	.+12     	; 0x3d2c <vfprintf+0x5e6>
    3d20:	d3 94       	inc	r13
    3d22:	d3 94       	inc	r13
    3d24:	04 c0       	rjmp	.+8      	; 0x3d2e <vfprintf+0x5e8>
    3d26:	80 2f       	mov	r24, r16
    3d28:	86 78       	andi	r24, 0x86	; 134
    3d2a:	09 f0       	breq	.+2      	; 0x3d2e <vfprintf+0x5e8>
    3d2c:	d3 94       	inc	r13
    3d2e:	03 fd       	sbrc	r16, 3
    3d30:	11 c0       	rjmp	.+34     	; 0x3d54 <vfprintf+0x60e>
    3d32:	00 ff       	sbrs	r16, 0
    3d34:	06 c0       	rjmp	.+12     	; 0x3d42 <vfprintf+0x5fc>
    3d36:	1c 2d       	mov	r17, r12
    3d38:	d5 14       	cp	r13, r5
    3d3a:	80 f4       	brcc	.+32     	; 0x3d5c <vfprintf+0x616>
    3d3c:	15 0d       	add	r17, r5
    3d3e:	1d 19       	sub	r17, r13
    3d40:	0d c0       	rjmp	.+26     	; 0x3d5c <vfprintf+0x616>
    3d42:	d5 14       	cp	r13, r5
    3d44:	58 f4       	brcc	.+22     	; 0x3d5c <vfprintf+0x616>
    3d46:	b7 01       	movw	r22, r14
    3d48:	80 e2       	ldi	r24, 0x20	; 32
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3d50:	d3 94       	inc	r13
    3d52:	f7 cf       	rjmp	.-18     	; 0x3d42 <vfprintf+0x5fc>
    3d54:	d5 14       	cp	r13, r5
    3d56:	10 f4       	brcc	.+4      	; 0x3d5c <vfprintf+0x616>
    3d58:	5d 18       	sub	r5, r13
    3d5a:	01 c0       	rjmp	.+2      	; 0x3d5e <vfprintf+0x618>
    3d5c:	51 2c       	mov	r5, r1
    3d5e:	04 ff       	sbrs	r16, 4
    3d60:	10 c0       	rjmp	.+32     	; 0x3d82 <vfprintf+0x63c>
    3d62:	b7 01       	movw	r22, r14
    3d64:	80 e3       	ldi	r24, 0x30	; 48
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3d6c:	02 ff       	sbrs	r16, 2
    3d6e:	17 c0       	rjmp	.+46     	; 0x3d9e <vfprintf+0x658>
    3d70:	01 fd       	sbrc	r16, 1
    3d72:	03 c0       	rjmp	.+6      	; 0x3d7a <vfprintf+0x634>
    3d74:	88 e7       	ldi	r24, 0x78	; 120
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	02 c0       	rjmp	.+4      	; 0x3d7e <vfprintf+0x638>
    3d7a:	88 e5       	ldi	r24, 0x58	; 88
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	b7 01       	movw	r22, r14
    3d80:	0c c0       	rjmp	.+24     	; 0x3d9a <vfprintf+0x654>
    3d82:	80 2f       	mov	r24, r16
    3d84:	86 78       	andi	r24, 0x86	; 134
    3d86:	59 f0       	breq	.+22     	; 0x3d9e <vfprintf+0x658>
    3d88:	01 ff       	sbrs	r16, 1
    3d8a:	02 c0       	rjmp	.+4      	; 0x3d90 <vfprintf+0x64a>
    3d8c:	8b e2       	ldi	r24, 0x2B	; 43
    3d8e:	01 c0       	rjmp	.+2      	; 0x3d92 <vfprintf+0x64c>
    3d90:	80 e2       	ldi	r24, 0x20	; 32
    3d92:	07 fd       	sbrc	r16, 7
    3d94:	8d e2       	ldi	r24, 0x2D	; 45
    3d96:	b7 01       	movw	r22, r14
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3d9e:	c1 16       	cp	r12, r17
    3da0:	38 f4       	brcc	.+14     	; 0x3db0 <vfprintf+0x66a>
    3da2:	b7 01       	movw	r22, r14
    3da4:	80 e3       	ldi	r24, 0x30	; 48
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3dac:	11 50       	subi	r17, 0x01	; 1
    3dae:	f7 cf       	rjmp	.-18     	; 0x3d9e <vfprintf+0x658>
    3db0:	ca 94       	dec	r12
    3db2:	f3 01       	movw	r30, r6
    3db4:	ec 0d       	add	r30, r12
    3db6:	f1 1d       	adc	r31, r1
    3db8:	80 81       	ld	r24, Z
    3dba:	b7 01       	movw	r22, r14
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3dc2:	c1 10       	cpse	r12, r1
    3dc4:	f5 cf       	rjmp	.-22     	; 0x3db0 <vfprintf+0x66a>
    3dc6:	15 c0       	rjmp	.+42     	; 0x3df2 <vfprintf+0x6ac>
    3dc8:	f4 e0       	ldi	r31, 0x04	; 4
    3dca:	f5 15       	cp	r31, r5
    3dcc:	60 f5       	brcc	.+88     	; 0x3e26 <vfprintf+0x6e0>
    3dce:	84 e0       	ldi	r24, 0x04	; 4
    3dd0:	58 1a       	sub	r5, r24
    3dd2:	93 fe       	sbrs	r9, 3
    3dd4:	1f c0       	rjmp	.+62     	; 0x3e14 <vfprintf+0x6ce>
    3dd6:	01 11       	cpse	r16, r1
    3dd8:	27 c0       	rjmp	.+78     	; 0x3e28 <vfprintf+0x6e2>
    3dda:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ddc:	23 ff       	sbrs	r18, 3
    3dde:	2a c0       	rjmp	.+84     	; 0x3e34 <vfprintf+0x6ee>
    3de0:	08 e3       	ldi	r16, 0x38	; 56
    3de2:	12 e0       	ldi	r17, 0x02	; 2
    3de4:	39 2d       	mov	r19, r9
    3de6:	30 71       	andi	r19, 0x10	; 16
    3de8:	93 2e       	mov	r9, r19
    3dea:	f8 01       	movw	r30, r16
    3dec:	84 91       	lpm	r24, Z
    3dee:	81 11       	cpse	r24, r1
    3df0:	24 c0       	rjmp	.+72     	; 0x3e3a <vfprintf+0x6f4>
    3df2:	55 20       	and	r5, r5
    3df4:	09 f4       	brne	.+2      	; 0x3df8 <vfprintf+0x6b2>
    3df6:	e4 cc       	rjmp	.-1592   	; 0x37c0 <vfprintf+0x7a>
    3df8:	b7 01       	movw	r22, r14
    3dfa:	80 e2       	ldi	r24, 0x20	; 32
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3e02:	5a 94       	dec	r5
    3e04:	f6 cf       	rjmp	.-20     	; 0x3df2 <vfprintf+0x6ac>
    3e06:	f7 01       	movw	r30, r14
    3e08:	86 81       	ldd	r24, Z+6	; 0x06
    3e0a:	97 81       	ldd	r25, Z+7	; 0x07
    3e0c:	26 c0       	rjmp	.+76     	; 0x3e5a <vfprintf+0x714>
    3e0e:	8f ef       	ldi	r24, 0xFF	; 255
    3e10:	9f ef       	ldi	r25, 0xFF	; 255
    3e12:	23 c0       	rjmp	.+70     	; 0x3e5a <vfprintf+0x714>
    3e14:	b7 01       	movw	r22, r14
    3e16:	80 e2       	ldi	r24, 0x20	; 32
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3e1e:	5a 94       	dec	r5
    3e20:	51 10       	cpse	r5, r1
    3e22:	f8 cf       	rjmp	.-16     	; 0x3e14 <vfprintf+0x6ce>
    3e24:	d8 cf       	rjmp	.-80     	; 0x3dd6 <vfprintf+0x690>
    3e26:	51 2c       	mov	r5, r1
    3e28:	b7 01       	movw	r22, r14
    3e2a:	80 2f       	mov	r24, r16
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3e32:	d3 cf       	rjmp	.-90     	; 0x3dda <vfprintf+0x694>
    3e34:	0c e3       	ldi	r16, 0x3C	; 60
    3e36:	12 e0       	ldi	r17, 0x02	; 2
    3e38:	d5 cf       	rjmp	.-86     	; 0x3de4 <vfprintf+0x69e>
    3e3a:	91 10       	cpse	r9, r1
    3e3c:	80 52       	subi	r24, 0x20	; 32
    3e3e:	b7 01       	movw	r22, r14
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fputc>
    3e46:	0f 5f       	subi	r16, 0xFF	; 255
    3e48:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4a:	cf cf       	rjmp	.-98     	; 0x3dea <vfprintf+0x6a4>
    3e4c:	23 e0       	ldi	r18, 0x03	; 3
    3e4e:	25 15       	cp	r18, r5
    3e50:	10 f4       	brcc	.+4      	; 0x3e56 <vfprintf+0x710>
    3e52:	83 e0       	ldi	r24, 0x03	; 3
    3e54:	bd cf       	rjmp	.-134    	; 0x3dd0 <vfprintf+0x68a>
    3e56:	51 2c       	mov	r5, r1
    3e58:	c0 cf       	rjmp	.-128    	; 0x3dda <vfprintf+0x694>
    3e5a:	60 96       	adiw	r28, 0x10	; 16
    3e5c:	cd bf       	out	0x3d, r28	; 61
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	df 91       	pop	r29
    3e62:	cf 91       	pop	r28
    3e64:	1f 91       	pop	r17
    3e66:	0f 91       	pop	r16
    3e68:	ff 90       	pop	r15
    3e6a:	ef 90       	pop	r14
    3e6c:	df 90       	pop	r13
    3e6e:	cf 90       	pop	r12
    3e70:	bf 90       	pop	r11
    3e72:	af 90       	pop	r10
    3e74:	9f 90       	pop	r9
    3e76:	8f 90       	pop	r8
    3e78:	7f 90       	pop	r7
    3e7a:	6f 90       	pop	r6
    3e7c:	5f 90       	pop	r5
    3e7e:	4f 90       	pop	r4
    3e80:	3f 90       	pop	r3
    3e82:	2f 90       	pop	r2
    3e84:	08 95       	ret

00003e86 <__tablejump2__>:
    3e86:	ee 0f       	add	r30, r30
    3e88:	ff 1f       	adc	r31, r31
    3e8a:	88 1f       	adc	r24, r24
    3e8c:	8b bf       	out	0x3b, r24	; 59
    3e8e:	07 90       	elpm	r0, Z+
    3e90:	f6 91       	elpm	r31, Z
    3e92:	e0 2d       	mov	r30, r0
    3e94:	19 94       	eijmp

00003e96 <__ftoa_engine>:
    3e96:	28 30       	cpi	r18, 0x08	; 8
    3e98:	08 f0       	brcs	.+2      	; 0x3e9c <__ftoa_engine+0x6>
    3e9a:	27 e0       	ldi	r18, 0x07	; 7
    3e9c:	33 27       	eor	r19, r19
    3e9e:	da 01       	movw	r26, r20
    3ea0:	99 0f       	add	r25, r25
    3ea2:	31 1d       	adc	r19, r1
    3ea4:	87 fd       	sbrc	r24, 7
    3ea6:	91 60       	ori	r25, 0x01	; 1
    3ea8:	00 96       	adiw	r24, 0x00	; 0
    3eaa:	61 05       	cpc	r22, r1
    3eac:	71 05       	cpc	r23, r1
    3eae:	39 f4       	brne	.+14     	; 0x3ebe <__ftoa_engine+0x28>
    3eb0:	32 60       	ori	r19, 0x02	; 2
    3eb2:	2e 5f       	subi	r18, 0xFE	; 254
    3eb4:	3d 93       	st	X+, r19
    3eb6:	30 e3       	ldi	r19, 0x30	; 48
    3eb8:	2a 95       	dec	r18
    3eba:	e1 f7       	brne	.-8      	; 0x3eb4 <__ftoa_engine+0x1e>
    3ebc:	08 95       	ret
    3ebe:	9f 3f       	cpi	r25, 0xFF	; 255
    3ec0:	30 f0       	brcs	.+12     	; 0x3ece <__ftoa_engine+0x38>
    3ec2:	80 38       	cpi	r24, 0x80	; 128
    3ec4:	71 05       	cpc	r23, r1
    3ec6:	61 05       	cpc	r22, r1
    3ec8:	09 f0       	breq	.+2      	; 0x3ecc <__ftoa_engine+0x36>
    3eca:	3c 5f       	subi	r19, 0xFC	; 252
    3ecc:	3c 5f       	subi	r19, 0xFC	; 252
    3ece:	3d 93       	st	X+, r19
    3ed0:	91 30       	cpi	r25, 0x01	; 1
    3ed2:	08 f0       	brcs	.+2      	; 0x3ed6 <__ftoa_engine+0x40>
    3ed4:	80 68       	ori	r24, 0x80	; 128
    3ed6:	91 1d       	adc	r25, r1
    3ed8:	df 93       	push	r29
    3eda:	cf 93       	push	r28
    3edc:	1f 93       	push	r17
    3ede:	0f 93       	push	r16
    3ee0:	ff 92       	push	r15
    3ee2:	ef 92       	push	r14
    3ee4:	19 2f       	mov	r17, r25
    3ee6:	98 7f       	andi	r25, 0xF8	; 248
    3ee8:	96 95       	lsr	r25
    3eea:	e9 2f       	mov	r30, r25
    3eec:	96 95       	lsr	r25
    3eee:	96 95       	lsr	r25
    3ef0:	e9 0f       	add	r30, r25
    3ef2:	ff 27       	eor	r31, r31
    3ef4:	e6 56       	subi	r30, 0x66	; 102
    3ef6:	fd 4f       	sbci	r31, 0xFD	; 253
    3ef8:	99 27       	eor	r25, r25
    3efa:	33 27       	eor	r19, r19
    3efc:	ee 24       	eor	r14, r14
    3efe:	ff 24       	eor	r15, r15
    3f00:	a7 01       	movw	r20, r14
    3f02:	e7 01       	movw	r28, r14
    3f04:	05 90       	lpm	r0, Z+
    3f06:	08 94       	sec
    3f08:	07 94       	ror	r0
    3f0a:	28 f4       	brcc	.+10     	; 0x3f16 <__ftoa_engine+0x80>
    3f0c:	36 0f       	add	r19, r22
    3f0e:	e7 1e       	adc	r14, r23
    3f10:	f8 1e       	adc	r15, r24
    3f12:	49 1f       	adc	r20, r25
    3f14:	51 1d       	adc	r21, r1
    3f16:	66 0f       	add	r22, r22
    3f18:	77 1f       	adc	r23, r23
    3f1a:	88 1f       	adc	r24, r24
    3f1c:	99 1f       	adc	r25, r25
    3f1e:	06 94       	lsr	r0
    3f20:	a1 f7       	brne	.-24     	; 0x3f0a <__ftoa_engine+0x74>
    3f22:	05 90       	lpm	r0, Z+
    3f24:	07 94       	ror	r0
    3f26:	28 f4       	brcc	.+10     	; 0x3f32 <__ftoa_engine+0x9c>
    3f28:	e7 0e       	add	r14, r23
    3f2a:	f8 1e       	adc	r15, r24
    3f2c:	49 1f       	adc	r20, r25
    3f2e:	56 1f       	adc	r21, r22
    3f30:	c1 1d       	adc	r28, r1
    3f32:	77 0f       	add	r23, r23
    3f34:	88 1f       	adc	r24, r24
    3f36:	99 1f       	adc	r25, r25
    3f38:	66 1f       	adc	r22, r22
    3f3a:	06 94       	lsr	r0
    3f3c:	a1 f7       	brne	.-24     	; 0x3f26 <__ftoa_engine+0x90>
    3f3e:	05 90       	lpm	r0, Z+
    3f40:	07 94       	ror	r0
    3f42:	28 f4       	brcc	.+10     	; 0x3f4e <__ftoa_engine+0xb8>
    3f44:	f8 0e       	add	r15, r24
    3f46:	49 1f       	adc	r20, r25
    3f48:	56 1f       	adc	r21, r22
    3f4a:	c7 1f       	adc	r28, r23
    3f4c:	d1 1d       	adc	r29, r1
    3f4e:	88 0f       	add	r24, r24
    3f50:	99 1f       	adc	r25, r25
    3f52:	66 1f       	adc	r22, r22
    3f54:	77 1f       	adc	r23, r23
    3f56:	06 94       	lsr	r0
    3f58:	a1 f7       	brne	.-24     	; 0x3f42 <__ftoa_engine+0xac>
    3f5a:	05 90       	lpm	r0, Z+
    3f5c:	07 94       	ror	r0
    3f5e:	20 f4       	brcc	.+8      	; 0x3f68 <__ftoa_engine+0xd2>
    3f60:	49 0f       	add	r20, r25
    3f62:	56 1f       	adc	r21, r22
    3f64:	c7 1f       	adc	r28, r23
    3f66:	d8 1f       	adc	r29, r24
    3f68:	99 0f       	add	r25, r25
    3f6a:	66 1f       	adc	r22, r22
    3f6c:	77 1f       	adc	r23, r23
    3f6e:	88 1f       	adc	r24, r24
    3f70:	06 94       	lsr	r0
    3f72:	a9 f7       	brne	.-22     	; 0x3f5e <__ftoa_engine+0xc8>
    3f74:	84 91       	lpm	r24, Z
    3f76:	10 95       	com	r17
    3f78:	17 70       	andi	r17, 0x07	; 7
    3f7a:	41 f0       	breq	.+16     	; 0x3f8c <__ftoa_engine+0xf6>
    3f7c:	d6 95       	lsr	r29
    3f7e:	c7 95       	ror	r28
    3f80:	57 95       	ror	r21
    3f82:	47 95       	ror	r20
    3f84:	f7 94       	ror	r15
    3f86:	e7 94       	ror	r14
    3f88:	1a 95       	dec	r17
    3f8a:	c1 f7       	brne	.-16     	; 0x3f7c <__ftoa_engine+0xe6>
    3f8c:	e0 e4       	ldi	r30, 0x40	; 64
    3f8e:	f2 e0       	ldi	r31, 0x02	; 2
    3f90:	68 94       	set
    3f92:	15 90       	lpm	r1, Z+
    3f94:	15 91       	lpm	r17, Z+
    3f96:	35 91       	lpm	r19, Z+
    3f98:	65 91       	lpm	r22, Z+
    3f9a:	95 91       	lpm	r25, Z+
    3f9c:	05 90       	lpm	r0, Z+
    3f9e:	7f e2       	ldi	r23, 0x2F	; 47
    3fa0:	73 95       	inc	r23
    3fa2:	e1 18       	sub	r14, r1
    3fa4:	f1 0a       	sbc	r15, r17
    3fa6:	43 0b       	sbc	r20, r19
    3fa8:	56 0b       	sbc	r21, r22
    3faa:	c9 0b       	sbc	r28, r25
    3fac:	d0 09       	sbc	r29, r0
    3fae:	c0 f7       	brcc	.-16     	; 0x3fa0 <__ftoa_engine+0x10a>
    3fb0:	e1 0c       	add	r14, r1
    3fb2:	f1 1e       	adc	r15, r17
    3fb4:	43 1f       	adc	r20, r19
    3fb6:	56 1f       	adc	r21, r22
    3fb8:	c9 1f       	adc	r28, r25
    3fba:	d0 1d       	adc	r29, r0
    3fbc:	7e f4       	brtc	.+30     	; 0x3fdc <__ftoa_engine+0x146>
    3fbe:	70 33       	cpi	r23, 0x30	; 48
    3fc0:	11 f4       	brne	.+4      	; 0x3fc6 <__ftoa_engine+0x130>
    3fc2:	8a 95       	dec	r24
    3fc4:	e6 cf       	rjmp	.-52     	; 0x3f92 <__ftoa_engine+0xfc>
    3fc6:	e8 94       	clt
    3fc8:	01 50       	subi	r16, 0x01	; 1
    3fca:	30 f0       	brcs	.+12     	; 0x3fd8 <__ftoa_engine+0x142>
    3fcc:	08 0f       	add	r16, r24
    3fce:	0a f4       	brpl	.+2      	; 0x3fd2 <__ftoa_engine+0x13c>
    3fd0:	00 27       	eor	r16, r16
    3fd2:	02 17       	cp	r16, r18
    3fd4:	08 f4       	brcc	.+2      	; 0x3fd8 <__ftoa_engine+0x142>
    3fd6:	20 2f       	mov	r18, r16
    3fd8:	23 95       	inc	r18
    3fda:	02 2f       	mov	r16, r18
    3fdc:	7a 33       	cpi	r23, 0x3A	; 58
    3fde:	28 f0       	brcs	.+10     	; 0x3fea <__ftoa_engine+0x154>
    3fe0:	79 e3       	ldi	r23, 0x39	; 57
    3fe2:	7d 93       	st	X+, r23
    3fe4:	2a 95       	dec	r18
    3fe6:	e9 f7       	brne	.-6      	; 0x3fe2 <__ftoa_engine+0x14c>
    3fe8:	10 c0       	rjmp	.+32     	; 0x400a <__stack+0xb>
    3fea:	7d 93       	st	X+, r23
    3fec:	2a 95       	dec	r18
    3fee:	89 f6       	brne	.-94     	; 0x3f92 <__ftoa_engine+0xfc>
    3ff0:	06 94       	lsr	r0
    3ff2:	97 95       	ror	r25
    3ff4:	67 95       	ror	r22
    3ff6:	37 95       	ror	r19
    3ff8:	17 95       	ror	r17
    3ffa:	17 94       	ror	r1
    3ffc:	e1 18       	sub	r14, r1
    3ffe:	f1 0a       	sbc	r15, r17
    4000:	43 0b       	sbc	r20, r19
    4002:	56 0b       	sbc	r21, r22
    4004:	c9 0b       	sbc	r28, r25
    4006:	d0 09       	sbc	r29, r0
    4008:	98 f0       	brcs	.+38     	; 0x4030 <__stack+0x31>
    400a:	23 95       	inc	r18
    400c:	7e 91       	ld	r23, -X
    400e:	73 95       	inc	r23
    4010:	7a 33       	cpi	r23, 0x3A	; 58
    4012:	08 f0       	brcs	.+2      	; 0x4016 <__stack+0x17>
    4014:	70 e3       	ldi	r23, 0x30	; 48
    4016:	7c 93       	st	X, r23
    4018:	20 13       	cpse	r18, r16
    401a:	b8 f7       	brcc	.-18     	; 0x400a <__stack+0xb>
    401c:	7e 91       	ld	r23, -X
    401e:	70 61       	ori	r23, 0x10	; 16
    4020:	7d 93       	st	X+, r23
    4022:	30 f0       	brcs	.+12     	; 0x4030 <__stack+0x31>
    4024:	83 95       	inc	r24
    4026:	71 e3       	ldi	r23, 0x31	; 49
    4028:	7d 93       	st	X+, r23
    402a:	70 e3       	ldi	r23, 0x30	; 48
    402c:	2a 95       	dec	r18
    402e:	e1 f7       	brne	.-8      	; 0x4028 <__stack+0x29>
    4030:	11 24       	eor	r1, r1
    4032:	ef 90       	pop	r14
    4034:	ff 90       	pop	r15
    4036:	0f 91       	pop	r16
    4038:	1f 91       	pop	r17
    403a:	cf 91       	pop	r28
    403c:	df 91       	pop	r29
    403e:	99 27       	eor	r25, r25
    4040:	87 fd       	sbrc	r24, 7
    4042:	90 95       	com	r25
    4044:	08 95       	ret

00004046 <strnlen_P>:
    4046:	fc 01       	movw	r30, r24
    4048:	05 90       	lpm	r0, Z+
    404a:	61 50       	subi	r22, 0x01	; 1
    404c:	70 40       	sbci	r23, 0x00	; 0
    404e:	01 10       	cpse	r0, r1
    4050:	d8 f7       	brcc	.-10     	; 0x4048 <strnlen_P+0x2>
    4052:	80 95       	com	r24
    4054:	90 95       	com	r25
    4056:	8e 0f       	add	r24, r30
    4058:	9f 1f       	adc	r25, r31
    405a:	08 95       	ret

0000405c <memcpy>:
    405c:	fb 01       	movw	r30, r22
    405e:	dc 01       	movw	r26, r24
    4060:	02 c0       	rjmp	.+4      	; 0x4066 <memcpy+0xa>
    4062:	01 90       	ld	r0, Z+
    4064:	0d 92       	st	X+, r0
    4066:	41 50       	subi	r20, 0x01	; 1
    4068:	50 40       	sbci	r21, 0x00	; 0
    406a:	d8 f7       	brcc	.-10     	; 0x4062 <memcpy+0x6>
    406c:	08 95       	ret

0000406e <memset>:
    406e:	dc 01       	movw	r26, r24
    4070:	01 c0       	rjmp	.+2      	; 0x4074 <memset+0x6>
    4072:	6d 93       	st	X+, r22
    4074:	41 50       	subi	r20, 0x01	; 1
    4076:	50 40       	sbci	r21, 0x00	; 0
    4078:	e0 f7       	brcc	.-8      	; 0x4072 <memset+0x4>
    407a:	08 95       	ret

0000407c <strnlen>:
    407c:	fc 01       	movw	r30, r24
    407e:	61 50       	subi	r22, 0x01	; 1
    4080:	70 40       	sbci	r23, 0x00	; 0
    4082:	01 90       	ld	r0, Z+
    4084:	01 10       	cpse	r0, r1
    4086:	d8 f7       	brcc	.-10     	; 0x407e <strnlen+0x2>
    4088:	80 95       	com	r24
    408a:	90 95       	com	r25
    408c:	8e 0f       	add	r24, r30
    408e:	9f 1f       	adc	r25, r31
    4090:	08 95       	ret

00004092 <__itoa_ncheck>:
    4092:	bb 27       	eor	r27, r27
    4094:	4a 30       	cpi	r20, 0x0A	; 10
    4096:	31 f4       	brne	.+12     	; 0x40a4 <__itoa_ncheck+0x12>
    4098:	99 23       	and	r25, r25
    409a:	22 f4       	brpl	.+8      	; 0x40a4 <__itoa_ncheck+0x12>
    409c:	bd e2       	ldi	r27, 0x2D	; 45
    409e:	90 95       	com	r25
    40a0:	81 95       	neg	r24
    40a2:	9f 4f       	sbci	r25, 0xFF	; 255
    40a4:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <__utoa_common>

000040a8 <__utoa_ncheck>:
    40a8:	bb 27       	eor	r27, r27

000040aa <__utoa_common>:
    40aa:	fb 01       	movw	r30, r22
    40ac:	55 27       	eor	r21, r21
    40ae:	aa 27       	eor	r26, r26
    40b0:	88 0f       	add	r24, r24
    40b2:	99 1f       	adc	r25, r25
    40b4:	aa 1f       	adc	r26, r26
    40b6:	a4 17       	cp	r26, r20
    40b8:	10 f0       	brcs	.+4      	; 0x40be <__utoa_common+0x14>
    40ba:	a4 1b       	sub	r26, r20
    40bc:	83 95       	inc	r24
    40be:	50 51       	subi	r21, 0x10	; 16
    40c0:	b9 f7       	brne	.-18     	; 0x40b0 <__utoa_common+0x6>
    40c2:	a0 5d       	subi	r26, 0xD0	; 208
    40c4:	aa 33       	cpi	r26, 0x3A	; 58
    40c6:	08 f0       	brcs	.+2      	; 0x40ca <__utoa_common+0x20>
    40c8:	a9 5d       	subi	r26, 0xD9	; 217
    40ca:	a1 93       	st	Z+, r26
    40cc:	00 97       	sbiw	r24, 0x00	; 0
    40ce:	79 f7       	brne	.-34     	; 0x40ae <__utoa_common+0x4>
    40d0:	b1 11       	cpse	r27, r1
    40d2:	b1 93       	st	Z+, r27
    40d4:	11 92       	st	Z+, r1
    40d6:	cb 01       	movw	r24, r22
    40d8:	0c 94 08 21 	jmp	0x4210	; 0x4210 <strrev>

000040dc <fputc>:
    40dc:	0f 93       	push	r16
    40de:	1f 93       	push	r17
    40e0:	cf 93       	push	r28
    40e2:	df 93       	push	r29
    40e4:	fb 01       	movw	r30, r22
    40e6:	23 81       	ldd	r18, Z+3	; 0x03
    40e8:	21 fd       	sbrc	r18, 1
    40ea:	03 c0       	rjmp	.+6      	; 0x40f2 <fputc+0x16>
    40ec:	8f ef       	ldi	r24, 0xFF	; 255
    40ee:	9f ef       	ldi	r25, 0xFF	; 255
    40f0:	2c c0       	rjmp	.+88     	; 0x414a <fputc+0x6e>
    40f2:	22 ff       	sbrs	r18, 2
    40f4:	16 c0       	rjmp	.+44     	; 0x4122 <fputc+0x46>
    40f6:	46 81       	ldd	r20, Z+6	; 0x06
    40f8:	57 81       	ldd	r21, Z+7	; 0x07
    40fa:	24 81       	ldd	r18, Z+4	; 0x04
    40fc:	35 81       	ldd	r19, Z+5	; 0x05
    40fe:	42 17       	cp	r20, r18
    4100:	53 07       	cpc	r21, r19
    4102:	44 f4       	brge	.+16     	; 0x4114 <fputc+0x38>
    4104:	a0 81       	ld	r26, Z
    4106:	b1 81       	ldd	r27, Z+1	; 0x01
    4108:	9d 01       	movw	r18, r26
    410a:	2f 5f       	subi	r18, 0xFF	; 255
    410c:	3f 4f       	sbci	r19, 0xFF	; 255
    410e:	20 83       	st	Z, r18
    4110:	31 83       	std	Z+1, r19	; 0x01
    4112:	8c 93       	st	X, r24
    4114:	26 81       	ldd	r18, Z+6	; 0x06
    4116:	37 81       	ldd	r19, Z+7	; 0x07
    4118:	2f 5f       	subi	r18, 0xFF	; 255
    411a:	3f 4f       	sbci	r19, 0xFF	; 255
    411c:	26 83       	std	Z+6, r18	; 0x06
    411e:	37 83       	std	Z+7, r19	; 0x07
    4120:	14 c0       	rjmp	.+40     	; 0x414a <fputc+0x6e>
    4122:	8b 01       	movw	r16, r22
    4124:	ec 01       	movw	r28, r24
    4126:	fb 01       	movw	r30, r22
    4128:	00 84       	ldd	r0, Z+8	; 0x08
    412a:	f1 85       	ldd	r31, Z+9	; 0x09
    412c:	e0 2d       	mov	r30, r0
    412e:	19 95       	eicall
    4130:	89 2b       	or	r24, r25
    4132:	e1 f6       	brne	.-72     	; 0x40ec <fputc+0x10>
    4134:	d8 01       	movw	r26, r16
    4136:	16 96       	adiw	r26, 0x06	; 6
    4138:	8d 91       	ld	r24, X+
    413a:	9c 91       	ld	r25, X
    413c:	17 97       	sbiw	r26, 0x07	; 7
    413e:	01 96       	adiw	r24, 0x01	; 1
    4140:	16 96       	adiw	r26, 0x06	; 6
    4142:	8d 93       	st	X+, r24
    4144:	9c 93       	st	X, r25
    4146:	17 97       	sbiw	r26, 0x07	; 7
    4148:	ce 01       	movw	r24, r28
    414a:	df 91       	pop	r29
    414c:	cf 91       	pop	r28
    414e:	1f 91       	pop	r17
    4150:	0f 91       	pop	r16
    4152:	08 95       	ret

00004154 <__ultoa_invert>:
    4154:	fa 01       	movw	r30, r20
    4156:	aa 27       	eor	r26, r26
    4158:	28 30       	cpi	r18, 0x08	; 8
    415a:	51 f1       	breq	.+84     	; 0x41b0 <__ultoa_invert+0x5c>
    415c:	20 31       	cpi	r18, 0x10	; 16
    415e:	81 f1       	breq	.+96     	; 0x41c0 <__ultoa_invert+0x6c>
    4160:	e8 94       	clt
    4162:	6f 93       	push	r22
    4164:	6e 7f       	andi	r22, 0xFE	; 254
    4166:	6e 5f       	subi	r22, 0xFE	; 254
    4168:	7f 4f       	sbci	r23, 0xFF	; 255
    416a:	8f 4f       	sbci	r24, 0xFF	; 255
    416c:	9f 4f       	sbci	r25, 0xFF	; 255
    416e:	af 4f       	sbci	r26, 0xFF	; 255
    4170:	b1 e0       	ldi	r27, 0x01	; 1
    4172:	3e d0       	rcall	.+124    	; 0x41f0 <__ultoa_invert+0x9c>
    4174:	b4 e0       	ldi	r27, 0x04	; 4
    4176:	3c d0       	rcall	.+120    	; 0x41f0 <__ultoa_invert+0x9c>
    4178:	67 0f       	add	r22, r23
    417a:	78 1f       	adc	r23, r24
    417c:	89 1f       	adc	r24, r25
    417e:	9a 1f       	adc	r25, r26
    4180:	a1 1d       	adc	r26, r1
    4182:	68 0f       	add	r22, r24
    4184:	79 1f       	adc	r23, r25
    4186:	8a 1f       	adc	r24, r26
    4188:	91 1d       	adc	r25, r1
    418a:	a1 1d       	adc	r26, r1
    418c:	6a 0f       	add	r22, r26
    418e:	71 1d       	adc	r23, r1
    4190:	81 1d       	adc	r24, r1
    4192:	91 1d       	adc	r25, r1
    4194:	a1 1d       	adc	r26, r1
    4196:	20 d0       	rcall	.+64     	; 0x41d8 <__ultoa_invert+0x84>
    4198:	09 f4       	brne	.+2      	; 0x419c <__ultoa_invert+0x48>
    419a:	68 94       	set
    419c:	3f 91       	pop	r19
    419e:	2a e0       	ldi	r18, 0x0A	; 10
    41a0:	26 9f       	mul	r18, r22
    41a2:	11 24       	eor	r1, r1
    41a4:	30 19       	sub	r19, r0
    41a6:	30 5d       	subi	r19, 0xD0	; 208
    41a8:	31 93       	st	Z+, r19
    41aa:	de f6       	brtc	.-74     	; 0x4162 <__ultoa_invert+0xe>
    41ac:	cf 01       	movw	r24, r30
    41ae:	08 95       	ret
    41b0:	46 2f       	mov	r20, r22
    41b2:	47 70       	andi	r20, 0x07	; 7
    41b4:	40 5d       	subi	r20, 0xD0	; 208
    41b6:	41 93       	st	Z+, r20
    41b8:	b3 e0       	ldi	r27, 0x03	; 3
    41ba:	0f d0       	rcall	.+30     	; 0x41da <__ultoa_invert+0x86>
    41bc:	c9 f7       	brne	.-14     	; 0x41b0 <__ultoa_invert+0x5c>
    41be:	f6 cf       	rjmp	.-20     	; 0x41ac <__ultoa_invert+0x58>
    41c0:	46 2f       	mov	r20, r22
    41c2:	4f 70       	andi	r20, 0x0F	; 15
    41c4:	40 5d       	subi	r20, 0xD0	; 208
    41c6:	4a 33       	cpi	r20, 0x3A	; 58
    41c8:	18 f0       	brcs	.+6      	; 0x41d0 <__ultoa_invert+0x7c>
    41ca:	49 5d       	subi	r20, 0xD9	; 217
    41cc:	31 fd       	sbrc	r19, 1
    41ce:	40 52       	subi	r20, 0x20	; 32
    41d0:	41 93       	st	Z+, r20
    41d2:	02 d0       	rcall	.+4      	; 0x41d8 <__ultoa_invert+0x84>
    41d4:	a9 f7       	brne	.-22     	; 0x41c0 <__ultoa_invert+0x6c>
    41d6:	ea cf       	rjmp	.-44     	; 0x41ac <__ultoa_invert+0x58>
    41d8:	b4 e0       	ldi	r27, 0x04	; 4
    41da:	a6 95       	lsr	r26
    41dc:	97 95       	ror	r25
    41de:	87 95       	ror	r24
    41e0:	77 95       	ror	r23
    41e2:	67 95       	ror	r22
    41e4:	ba 95       	dec	r27
    41e6:	c9 f7       	brne	.-14     	; 0x41da <__ultoa_invert+0x86>
    41e8:	00 97       	sbiw	r24, 0x00	; 0
    41ea:	61 05       	cpc	r22, r1
    41ec:	71 05       	cpc	r23, r1
    41ee:	08 95       	ret
    41f0:	9b 01       	movw	r18, r22
    41f2:	ac 01       	movw	r20, r24
    41f4:	0a 2e       	mov	r0, r26
    41f6:	06 94       	lsr	r0
    41f8:	57 95       	ror	r21
    41fa:	47 95       	ror	r20
    41fc:	37 95       	ror	r19
    41fe:	27 95       	ror	r18
    4200:	ba 95       	dec	r27
    4202:	c9 f7       	brne	.-14     	; 0x41f6 <__ultoa_invert+0xa2>
    4204:	62 0f       	add	r22, r18
    4206:	73 1f       	adc	r23, r19
    4208:	84 1f       	adc	r24, r20
    420a:	95 1f       	adc	r25, r21
    420c:	a0 1d       	adc	r26, r0
    420e:	08 95       	ret

00004210 <strrev>:
    4210:	dc 01       	movw	r26, r24
    4212:	fc 01       	movw	r30, r24
    4214:	67 2f       	mov	r22, r23
    4216:	71 91       	ld	r23, Z+
    4218:	77 23       	and	r23, r23
    421a:	e1 f7       	brne	.-8      	; 0x4214 <strrev+0x4>
    421c:	32 97       	sbiw	r30, 0x02	; 2
    421e:	04 c0       	rjmp	.+8      	; 0x4228 <strrev+0x18>
    4220:	7c 91       	ld	r23, X
    4222:	6d 93       	st	X+, r22
    4224:	70 83       	st	Z, r23
    4226:	62 91       	ld	r22, -Z
    4228:	ae 17       	cp	r26, r30
    422a:	bf 07       	cpc	r27, r31
    422c:	c8 f3       	brcs	.-14     	; 0x4220 <strrev+0x10>
    422e:	08 95       	ret

00004230 <_exit>:
    4230:	f8 94       	cli

00004232 <__stop_program>:
    4232:	ff cf       	rjmp	.-2      	; 0x4232 <__stop_program>
