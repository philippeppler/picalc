
picalc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006662  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00802000  00006662  000066f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c8f  0080205e  0080205e  00006754  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000067b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  000067f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b11a  00000000  00000000  00006fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004656  00000000  00000000  000120f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000055ab  00000000  00000000  00016748  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e8c  00000000  00000000  0001bcf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000054f8  00000000  00000000  0001db80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040bb  00000000  00000000  00023078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  00027133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
       8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
       c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      10:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      14:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      18:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      1c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      20:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      24:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      28:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      2c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      30:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      34:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      38:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__vector_14>
      3c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      40:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      44:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      48:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      4c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      50:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      54:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      58:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      5c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      60:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      64:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      68:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      6c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      70:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      74:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      78:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      7c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      80:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      84:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      88:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      8c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      90:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      94:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      98:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      9c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      ac:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      bc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      cc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      dc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      ec:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      fc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     100:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     104:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     108:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     10c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     110:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     114:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     118:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     11c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     120:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     124:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     128:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     12c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     130:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     134:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     138:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     13c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     140:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     144:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     148:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     14c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     150:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     154:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     158:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     15c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     160:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     164:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     168:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     16c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     170:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     174:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     178:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     17c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     180:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     184:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     188:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     18c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     190:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     194:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     198:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     19c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1ac:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1b0:	0c 94 f4 21 	jmp	0x43e8	; 0x43e8 <__vector_108>
     1b4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1b8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1bc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1cc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1dc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1ec:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1fc:	e0 1d       	adc	r30, r0
     1fe:	e0 1d       	adc	r30, r0
     200:	e0 1d       	adc	r30, r0
     202:	67 1e       	adc	r6, r23
     204:	33 1e       	adc	r3, r19
     206:	61 1e       	adc	r6, r17
     208:	e0 1d       	adc	r30, r0
     20a:	e0 1d       	adc	r30, r0
     20c:	67 1e       	adc	r6, r23
     20e:	33 1e       	adc	r3, r19

00000210 <__trampolines_start>:
     210:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <prvProcessReceivedCommands+0x1d0>
     214:	0c 94 52 20 	jmp	0x40a4	; 0x40a4 <vGUI>
     218:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <prvIdleTask>
     21c:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <prvProcessReceivedCommands+0x1dc>
     220:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <vCalc>
     224:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <prvTimerTask>
     228:	0c 94 08 07 	jmp	0xe10	; 0xe10 <vEventGroupSetBitsCallback>
     22c:	0c 94 87 24 	jmp	0x490e	; 0x490e <vDisplayUpdateTask>
     230:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <prvProcessReceivedCommands+0x174>
     234:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <vButton>
     238:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <prvProcessReceivedCommands+0xce>

0000023c <__trampolines_end>:
     23c:	6e 61       	ori	r22, 0x1E	; 30
     23e:	6e 00       	.word	0x006e	; ????

00000240 <__c.2332>:
     240:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     250:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     260:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     270:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     280:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     290:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     300:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     310:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     320:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     330:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	cf ef       	ldi	r28, 0xFF	; 255
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df e3       	ldi	r29, 0x3F	; 63
     348:	de bf       	out	0x3e, r29	; 62
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	0c bf       	out	0x3c, r16	; 60

0000034e <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     34e:	ed ee       	ldi	r30, 0xED	; 237
     350:	fc e2       	ldi	r31, 0x2C	; 44
     352:	8a ea       	ldi	r24, 0xAA	; 170
     354:	90 e4       	ldi	r25, 0x40	; 64
     356:	81 93       	st	Z+, r24
     358:	e0 30       	cpi	r30, 0x00	; 0
     35a:	f9 07       	cpc	r31, r25
     35c:	e0 f3       	brcs	.-8      	; 0x356 <init_mem+0x8>
	...

00000360 <__do_copy_data>:
     360:	10 e2       	ldi	r17, 0x20	; 32
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b0 e2       	ldi	r27, 0x20	; 32
     366:	e2 e6       	ldi	r30, 0x62	; 98
     368:	f6 e6       	ldi	r31, 0x66	; 102
     36a:	00 e0       	ldi	r16, 0x00	; 0
     36c:	0b bf       	out	0x3b, r16	; 59
     36e:	02 c0       	rjmp	.+4      	; 0x374 <__do_copy_data+0x14>
     370:	07 90       	elpm	r0, Z+
     372:	0d 92       	st	X+, r0
     374:	ae 35       	cpi	r26, 0x5E	; 94
     376:	b1 07       	cpc	r27, r17
     378:	d9 f7       	brne	.-10     	; 0x370 <__do_copy_data+0x10>

0000037a <__do_clear_bss>:
     37a:	2c e2       	ldi	r18, 0x2C	; 44
     37c:	ae e5       	ldi	r26, 0x5E	; 94
     37e:	b0 e2       	ldi	r27, 0x20	; 32
     380:	01 c0       	rjmp	.+2      	; 0x384 <.do_clear_bss_start>

00000382 <.do_clear_bss_loop>:
     382:	1d 92       	st	X+, r1

00000384 <.do_clear_bss_start>:
     384:	ad 3e       	cpi	r26, 0xED	; 237
     386:	b2 07       	cpc	r27, r18
     388:	e1 f7       	brne	.-8      	; 0x382 <.do_clear_bss_loop>
     38a:	0e 94 12 20 	call	0x4024	; 0x4024 <main>
     38e:	0c 94 2f 33 	jmp	0x665e	; 0x665e <_exit>

00000392 <__bad_interrupt>:
     392:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000396 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     39e:	80 ea       	ldi	r24, 0xA0	; 160
     3a0:	96 e0       	ldi	r25, 0x06	; 6
     3a2:	20 e1       	ldi	r18, 0x10	; 16
     3a4:	fc 01       	movw	r30, r24
     3a6:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     3a8:	80 ea       	ldi	r24, 0xA0	; 160
     3aa:	96 e0       	ldi	r25, 0x06	; 6
     3ac:	20 e2       	ldi	r18, 0x20	; 32
     3ae:	fc 01       	movw	r30, r24
     3b0:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     3b2:	80 ea       	ldi	r24, 0xA0	; 160
     3b4:	96 e0       	ldi	r25, 0x06	; 6
     3b6:	20 e4       	ldi	r18, 0x40	; 64
     3b8:	fc 01       	movw	r30, r24
     3ba:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3bc:	80 ea       	ldi	r24, 0xA0	; 160
     3be:	96 e0       	ldi	r25, 0x06	; 6
     3c0:	20 e8       	ldi	r18, 0x80	; 128
     3c2:	fc 01       	movw	r30, r24
     3c4:	22 83       	std	Z+2, r18	; 0x02
 }
     3c6:	00 00       	nop
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3d6:	80 ea       	ldi	r24, 0xA0	; 160
     3d8:	96 e0       	ldi	r25, 0x06	; 6
     3da:	fc 01       	movw	r30, r24
     3dc:	80 85       	ldd	r24, Z+8	; 0x08
     3de:	88 2f       	mov	r24, r24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	80 71       	andi	r24, 0x10	; 16
     3e4:	99 27       	eor	r25, r25
     3e6:	95 95       	asr	r25
     3e8:	87 95       	ror	r24
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	95 95       	asr	r25
     3f0:	87 95       	ror	r24
     3f2:	95 95       	asr	r25
     3f4:	87 95       	ror	r24
     3f6:	89 2b       	or	r24, r25
     3f8:	89 f4       	brne	.+34     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		if(b1Count < 60000) {
     3fa:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     3fe:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     402:	80 36       	cpi	r24, 0x60	; 96
     404:	9a 4e       	sbci	r25, 0xEA	; 234
     406:	20 f5       	brcc	.+72     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			b1Count++;
     408:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     40c:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	80 93 5e 20 	sts	0x205E, r24	; 0x80205e <__data_end>
     416:	90 93 5f 20 	sts	0x205F, r25	; 0x80205f <__data_end+0x1>
     41a:	1a c0       	rjmp	.+52     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     41c:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     420:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     424:	0b 97       	sbiw	r24, 0x0b	; 11
     426:	68 f0       	brcs	.+26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     428:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     42c:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     430:	c3 97       	sbiw	r24, 0x33	; 51
     432:	18 f0       	brcs	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     434:	10 92 da 2c 	sts	0x2CDA, r1	; 0x802cda <b1Status>
     438:	07 c0       	rjmp	.+14     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	80 93 da 2c 	sts	0x2CDA, r24	; 0x802cda <b1Status>
     440:	03 c0       	rjmp	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			}
		} else {
			b1Status = NOT_PRESSED;
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	80 93 da 2c 	sts	0x2CDA, r24	; 0x802cda <b1Status>
		}
		b1Count = 0;
     448:	10 92 5e 20 	sts	0x205E, r1	; 0x80205e <__data_end>
     44c:	10 92 5f 20 	sts	0x205F, r1	; 0x80205f <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     450:	80 ea       	ldi	r24, 0xA0	; 160
     452:	96 e0       	ldi	r25, 0x06	; 6
     454:	fc 01       	movw	r30, r24
     456:	80 85       	ldd	r24, Z+8	; 0x08
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	80 72       	andi	r24, 0x20	; 32
     45e:	99 27       	eor	r25, r25
     460:	95 95       	asr	r25
     462:	87 95       	ror	r24
     464:	95 95       	asr	r25
     466:	87 95       	ror	r24
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	95 95       	asr	r25
     46e:	87 95       	ror	r24
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	89 2b       	or	r24, r25
     476:	89 f4       	brne	.+34     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		if(b2Count < 60000) {
     478:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     47c:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     480:	80 36       	cpi	r24, 0x60	; 96
     482:	9a 4e       	sbci	r25, 0xEA	; 234
     484:	20 f5       	brcc	.+72     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			b2Count++;
     486:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     48a:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <b2Count.3830>
     494:	90 93 61 20 	sts	0x2061, r25	; 0x802061 <b2Count.3830+0x1>
     498:	1a c0       	rjmp	.+52     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     49a:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     49e:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     4a2:	0b 97       	sbiw	r24, 0x0b	; 11
     4a4:	68 f0       	brcs	.+26     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4a6:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     4aa:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     4ae:	c3 97       	sbiw	r24, 0x33	; 51
     4b0:	18 f0       	brcs	.+6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     4b2:	10 92 db 2c 	sts	0x2CDB, r1	; 0x802cdb <b2Status>
     4b6:	07 c0       	rjmp	.+14     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	80 93 db 2c 	sts	0x2CDB, r24	; 0x802cdb <b2Status>
     4be:	03 c0       	rjmp	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			}
		} else {
			b2Status = NOT_PRESSED;			
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	80 93 db 2c 	sts	0x2CDB, r24	; 0x802cdb <b2Status>
		}
		b2Count = 0;
     4c6:	10 92 60 20 	sts	0x2060, r1	; 0x802060 <b2Count.3830>
     4ca:	10 92 61 20 	sts	0x2061, r1	; 0x802061 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     4ce:	80 ea       	ldi	r24, 0xA0	; 160
     4d0:	96 e0       	ldi	r25, 0x06	; 6
     4d2:	fc 01       	movw	r30, r24
     4d4:	80 85       	ldd	r24, Z+8	; 0x08
     4d6:	88 2f       	mov	r24, r24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	80 74       	andi	r24, 0x40	; 64
     4dc:	99 27       	eor	r25, r25
     4de:	08 2e       	mov	r0, r24
     4e0:	89 2f       	mov	r24, r25
     4e2:	00 0c       	add	r0, r0
     4e4:	88 1f       	adc	r24, r24
     4e6:	99 0b       	sbc	r25, r25
     4e8:	00 0c       	add	r0, r0
     4ea:	88 1f       	adc	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	89 2b       	or	r24, r25
     4f0:	89 f4       	brne	.+34     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		if(b3Count < 60000) {
     4f2:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     4f6:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     4fa:	80 36       	cpi	r24, 0x60	; 96
     4fc:	9a 4e       	sbci	r25, 0xEA	; 234
     4fe:	20 f5       	brcc	.+72     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
			b3Count++;
     500:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     504:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <b3Count.3831>
     50e:	90 93 63 20 	sts	0x2063, r25	; 0x802063 <b3Count.3831+0x1>
     512:	1a c0       	rjmp	.+52     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     514:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     518:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     51c:	0b 97       	sbiw	r24, 0x0b	; 11
     51e:	68 f0       	brcs	.+26     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     520:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     524:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     528:	c3 97       	sbiw	r24, 0x33	; 51
     52a:	18 f0       	brcs	.+6      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     52c:	10 92 dc 2c 	sts	0x2CDC, r1	; 0x802cdc <b3Status>
     530:	07 c0       	rjmp	.+14     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	80 93 dc 2c 	sts	0x2CDC, r24	; 0x802cdc <b3Status>
     538:	03 c0       	rjmp	.+6      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
			}
		} else {
			b3Status = NOT_PRESSED;
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	80 93 dc 2c 	sts	0x2CDC, r24	; 0x802cdc <b3Status>
		}
		b3Count = 0;
     540:	10 92 62 20 	sts	0x2062, r1	; 0x802062 <b3Count.3831>
     544:	10 92 63 20 	sts	0x2063, r1	; 0x802063 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     548:	80 ea       	ldi	r24, 0xA0	; 160
     54a:	96 e0       	ldi	r25, 0x06	; 6
     54c:	fc 01       	movw	r30, r24
     54e:	80 85       	ldd	r24, Z+8	; 0x08
     550:	88 23       	and	r24, r24
     552:	8c f0       	brlt	.+34     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
		if(b4Count < 60000) {
     554:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     558:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     55c:	80 36       	cpi	r24, 0x60	; 96
     55e:	9a 4e       	sbci	r25, 0xEA	; 234
     560:	20 f5       	brcc	.+72     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
			b4Count++;
     562:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     566:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	80 93 64 20 	sts	0x2064, r24	; 0x802064 <b4Count.3832>
     570:	90 93 65 20 	sts	0x2065, r25	; 0x802065 <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     574:	1a c0       	rjmp	.+52     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     576:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     57a:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     57e:	0b 97       	sbiw	r24, 0x0b	; 11
     580:	68 f0       	brcs	.+26     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     582:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     586:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     58a:	c3 97       	sbiw	r24, 0x33	; 51
     58c:	18 f0       	brcs	.+6      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     58e:	10 92 dd 2c 	sts	0x2CDD, r1	; 0x802cdd <b4Status>
     592:	07 c0       	rjmp	.+14     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 dd 2c 	sts	0x2CDD, r24	; 0x802cdd <b4Status>
     59a:	03 c0       	rjmp	.+6      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
			}
		} else {
			b4Status = NOT_PRESSED;
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	80 93 dd 2c 	sts	0x2CDD, r24	; 0x802cdd <b4Status>
		}
		b4Count = 0;
     5a2:	10 92 64 20 	sts	0x2064, r1	; 0x802064 <b4Count.3832>
     5a6:	10 92 65 20 	sts	0x2065, r1	; 0x802065 <b4Count.3832+0x1>
	}
 }
     5aa:	00 00       	nop
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	1f 92       	push	r1
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	88 2f       	mov	r24, r24
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	91 05       	cpc	r25, r1
     5c8:	79 f0       	breq	.+30     	; 0x5e8 <getButtonPress+0x36>
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	91 05       	cpc	r25, r1
     5ce:	1c f4       	brge	.+6      	; 0x5d6 <getButtonPress+0x24>
     5d0:	89 2b       	or	r24, r25
     5d2:	39 f0       	breq	.+14     	; 0x5e2 <getButtonPress+0x30>
     5d4:	12 c0       	rjmp	.+36     	; 0x5fa <getButtonPress+0x48>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	91 05       	cpc	r25, r1
     5da:	49 f0       	breq	.+18     	; 0x5ee <getButtonPress+0x3c>
     5dc:	03 97       	sbiw	r24, 0x03	; 3
     5de:	51 f0       	breq	.+20     	; 0x5f4 <getButtonPress+0x42>
     5e0:	0c c0       	rjmp	.+24     	; 0x5fa <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     5e2:	80 91 da 2c 	lds	r24, 0x2CDA	; 0x802cda <b1Status>
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     5e8:	80 91 db 2c 	lds	r24, 0x2CDB	; 0x802cdb <b2Status>
     5ec:	07 c0       	rjmp	.+14     	; 0x5fc <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     5ee:	80 91 dc 2c 	lds	r24, 0x2CDC	; 0x802cdc <b3Status>
     5f2:	04 c0       	rjmp	.+8      	; 0x5fc <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     5f4:	80 91 dd 2c 	lds	r24, 0x2CDD	; 0x802cdd <b4Status>
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	0f 90       	pop	r0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     604:	0f 93       	push	r16
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	00 d0       	rcall	.+0      	; 0x60c <CCPWrite+0x8>
     60c:	00 d0       	rcall	.+0      	; 0x60e <CCPWrite+0xa>
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	8c 83       	std	Y+4, r24	; 0x04
     614:	9d 83       	std	Y+5, r25	; 0x05
     616:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     618:	8f e3       	ldi	r24, 0x3F	; 63
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	fc 01       	movw	r30, r24
     61e:	80 81       	ld	r24, Z
     620:	8b 83       	std	Y+3, r24	; 0x03
     622:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	9d 81       	ldd	r25, Y+5	; 0x05
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     62c:	8b e3       	ldi	r24, 0x3B	; 59
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	fc 01       	movw	r30, r24
     632:	10 82       	st	Z, r1
#endif
	asm volatile(
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	2e 81       	ldd	r18, Y+6	; 0x06
     63a:	fc 01       	movw	r30, r24
     63c:	08 ed       	ldi	r16, 0xD8	; 216
     63e:	04 bf       	out	0x34, r16	; 52
     640:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     642:	8f e3       	ldi	r24, 0x3F	; 63
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	2b 81       	ldd	r18, Y+3	; 0x03
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
#endif
}
     64c:	00 00       	nop
     64e:	26 96       	adiw	r28, 0x06	; 6
     650:	cd bf       	out	0x3d, r28	; 61
     652:	de bf       	out	0x3e, r29	; 62
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	0f 91       	pop	r16
     65a:	08 95       	ret

0000065c <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	00 d0       	rcall	.+0      	; 0x662 <CLKSYS_XOSC_Config+0x6>
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	6a 83       	std	Y+2, r22	; 0x02
     66a:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     66c:	80 e5       	ldi	r24, 0x50	; 80
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	2a 81       	ldd	r18, Y+2	; 0x02
     672:	22 23       	and	r18, r18
     674:	11 f0       	breq	.+4      	; 0x67a <CLKSYS_XOSC_Config+0x1e>
     676:	20 e2       	ldi	r18, 0x20	; 32
     678:	01 c0       	rjmp	.+2      	; 0x67c <CLKSYS_XOSC_Config+0x20>
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	39 81       	ldd	r19, Y+1	; 0x01
     67e:	32 2b       	or	r19, r18
     680:	2b 81       	ldd	r18, Y+3	; 0x03
     682:	23 2b       	or	r18, r19
     684:	fc 01       	movw	r30, r24
     686:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     688:	00 00       	nop
     68a:	23 96       	adiw	r28, 0x03	; 3
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	de bf       	out	0x3e, r29	; 62
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	1f 92       	push	r1
     69c:	1f 92       	push	r1
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	89 83       	std	Y+1, r24	; 0x01
     6a4:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	8f 71       	andi	r24, 0x1F	; 31
     6aa:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     6ac:	80 e5       	ldi	r24, 0x50	; 80
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	39 81       	ldd	r19, Y+1	; 0x01
     6b2:	2a 81       	ldd	r18, Y+2	; 0x02
     6b4:	23 2b       	or	r18, r19
     6b6:	fc 01       	movw	r30, r24
     6b8:	25 83       	std	Z+5, r18	; 0x05
}
     6ba:	00 00       	nop
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	1f 92       	push	r1
     6cc:	1f 92       	push	r1
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     6d4:	80 e5       	ldi	r24, 0x50	; 80
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	20 e5       	ldi	r18, 0x50	; 80
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	32 2f       	mov	r19, r18
     6e2:	2a 81       	ldd	r18, Y+2	; 0x02
     6e4:	20 95       	com	r18
     6e6:	23 23       	and	r18, r19
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     6ec:	80 e5       	ldi	r24, 0x50	; 80
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	fc 01       	movw	r30, r24
     6f2:	90 81       	ld	r25, Z
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	89 23       	and	r24, r25
     6f8:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	00 d0       	rcall	.+0      	; 0x70c <CLKSYS_Prescalers_Config+0x6>
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	8a 83       	std	Y+2, r24	; 0x02
     712:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     714:	9a 81       	ldd	r25, Y+2	; 0x02
     716:	8b 81       	ldd	r24, Y+3	; 0x03
     718:	89 2b       	or	r24, r25
     71a:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     71c:	69 81       	ldd	r22, Y+1	; 0x01
     71e:	81 e4       	ldi	r24, 0x41	; 65
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 02 03 	call	0x604	; 0x604 <CCPWrite>
}
     726:	00 00       	nop
     728:	23 96       	adiw	r28, 0x03	; 3
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     742:	80 e4       	ldi	r24, 0x40	; 64
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	fc 01       	movw	r30, r24
     748:	80 81       	ld	r24, Z
     74a:	98 2f       	mov	r25, r24
     74c:	98 7f       	andi	r25, 0xF8	; 248
     74e:	8a 81       	ldd	r24, Y+2	; 0x02
     750:	89 2b       	or	r24, r25
     752:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     754:	69 81       	ldd	r22, Y+1	; 0x01
     756:	80 e4       	ldi	r24, 0x40	; 64
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 02 03 	call	0x604	; 0x604 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     75e:	80 e4       	ldi	r24, 0x40	; 64
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	fc 01       	movw	r30, r24
     764:	90 81       	ld	r25, Z
     766:	8a 81       	ldd	r24, Y+2	; 0x02
     768:	89 23       	and	r24, r25
     76a:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     76c:	89 81       	ldd	r24, Y+1	; 0x01
}
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	00 d0       	rcall	.+0      	; 0x77e <TC0_ConfigClockSource+0x6>
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	89 83       	std	Y+1, r24	; 0x01
     784:	9a 83       	std	Y+2, r25	; 0x02
     786:	6b 83       	std	Y+3, r22	; 0x03
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	9a 81       	ldd	r25, Y+2	; 0x02
     78c:	fc 01       	movw	r30, r24
     78e:	80 81       	ld	r24, Z
     790:	98 2f       	mov	r25, r24
     792:	90 7f       	andi	r25, 0xF0	; 240
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	89 2b       	or	r24, r25
     798:	28 2f       	mov	r18, r24
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
     7a2:	00 00       	nop
     7a4:	23 96       	adiw	r28, 0x03	; 3
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <TC0_ConfigWGM>:
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <TC0_ConfigWGM+0x6>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	6b 83       	std	Y+3, r22	; 0x03
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	9a 81       	ldd	r25, Y+2	; 0x02
     7c4:	fc 01       	movw	r30, r24
     7c6:	81 81       	ldd	r24, Z+1	; 0x01
     7c8:	98 2f       	mov	r25, r24
     7ca:	98 7f       	andi	r25, 0xF8	; 248
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	89 2b       	or	r24, r25
     7d0:	28 2f       	mov	r18, r24
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	fc 01       	movw	r30, r24
     7d8:	21 83       	std	Z+1, r18	; 0x01
     7da:	00 00       	nop
     7dc:	23 96       	adiw	r28, 0x03	; 3
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <TC0_SetOverflowIntLevel+0x6>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	9a 83       	std	Y+2, r25	; 0x02
     7f6:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	fc 01       	movw	r30, r24
     7fe:	86 81       	ldd	r24, Z+6	; 0x06
     800:	98 2f       	mov	r25, r24
     802:	9c 7f       	andi	r25, 0xFC	; 252
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	89 2b       	or	r24, r25
     808:	28 2f       	mov	r18, r24
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	fc 01       	movw	r30, r24
     810:	26 83       	std	Z+6, r18	; 0x06
}
     812:	00 00       	nop
     814:	23 96       	adiw	r28, 0x03	; 3
     816:	cd bf       	out	0x3d, r28	; 61
     818:	de bf       	out	0x3e, r29	; 62
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <vApplicationStackOverflowHook+0x6>
     826:	1f 92       	push	r1
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	89 83       	std	Y+1, r24	; 0x01
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	6b 83       	std	Y+3, r22	; 0x03
     832:	7c 83       	std	Y+4, r23	; 0x04
     834:	8b e2       	ldi	r24, 0x2B	; 43
     836:	0e 94 24 04 	call	0x848	; 0x848 <error>
     83a:	00 00       	nop
     83c:	24 96       	adiw	r28, 0x04	; 4
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	de bf       	out	0x3e, r29	; 62
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	1f 92       	push	r1
     84e:	1f 92       	push	r1
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	8b 32       	cpi	r24, 0x2B	; 43
     85a:	19 f4       	brne	.+6      	; 0x862 <error+0x1a>
	 a = 1;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	0e c0       	rjmp	.+28     	; 0x87e <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	8c 32       	cpi	r24, 0x2C	; 44
     866:	19 f4       	brne	.+6      	; 0x86e <error+0x26>
	 a = 2;
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	08 c0       	rjmp	.+16     	; 0x87e <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	8f 32       	cpi	r24, 0x2F	; 47
     872:	19 f4       	brne	.+6      	; 0x87a <error+0x32>
	 a = 3;
     874:	83 e0       	ldi	r24, 0x03	; 3
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	02 c0       	rjmp	.+4      	; 0x87e <error+0x36>
	 else
	 a = 4;
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     87e:	0e 94 47 04 	call	0x88e	; 0x88e <software_reset>
 }
     882:	00 00       	nop
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     896:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     898:	84 e3       	ldi	r24, 0x34	; 52
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	28 ed       	ldi	r18, 0xD8	; 216
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     8a2:	88 e7       	ldi	r24, 0x78	; 120
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	fc 01       	movw	r30, r24
     8aa:	21 83       	std	Z+1, r18	; 0x01
     8ac:	00 00       	nop
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	1f 92       	push	r1
     8ba:	1f 92       	push	r1
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	80 e1       	ldi	r24, 0x10	; 16
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	89 2b       	or	r24, r25
     8d2:	61 f0       	breq	.+24     	; 0x8ec <xEventGroupCreate+0x38>
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	fc 01       	movw	r30, r24
     8da:	10 82       	st	Z, r1
     8dc:	11 82       	std	Z+1, r1	; 0x01
     8de:	12 82       	std	Z+2, r1	; 0x02
     8e0:	13 82       	std	Z+3, r1	; 0x03
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	9a 81       	ldd	r25, Y+2	; 0x02
     8e6:	04 96       	adiw	r24, 0x04	; 4
     8e8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <xEventGroupWaitBits>:
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	6d 97       	sbiw	r28, 0x1d	; 29
     910:	cd bf       	out	0x3d, r28	; 61
     912:	de bf       	out	0x3e, r29	; 62
     914:	8a 8b       	std	Y+18, r24	; 0x12
     916:	9b 8b       	std	Y+19, r25	; 0x13
     918:	4c 8b       	std	Y+20, r20	; 0x14
     91a:	5d 8b       	std	Y+21, r21	; 0x15
     91c:	6e 8b       	std	Y+22, r22	; 0x16
     91e:	7f 8b       	std	Y+23, r23	; 0x17
     920:	28 8f       	std	Y+24, r18	; 0x18
     922:	09 8f       	std	Y+25, r16	; 0x19
     924:	ca 8e       	std	Y+26, r12	; 0x1a
     926:	db 8e       	std	Y+27, r13	; 0x1b
     928:	ec 8e       	std	Y+28, r14	; 0x1c
     92a:	fd 8e       	std	Y+29, r15	; 0x1d
     92c:	8a 89       	ldd	r24, Y+18	; 0x12
     92e:	9b 89       	ldd	r25, Y+19	; 0x13
     930:	89 87       	std	Y+9, r24	; 0x09
     932:	9a 87       	std	Y+10, r25	; 0x0a
     934:	1d 82       	std	Y+5, r1	; 0x05
     936:	1e 82       	std	Y+6, r1	; 0x06
     938:	1f 82       	std	Y+7, r1	; 0x07
     93a:	18 86       	std	Y+8, r1	; 0x08
     93c:	1b 86       	std	Y+11, r1	; 0x0b
     93e:	0e 94 34 14 	call	0x2868	; 0x2868 <vTaskSuspendAll>
     942:	89 85       	ldd	r24, Y+9	; 0x09
     944:	9a 85       	ldd	r25, Y+10	; 0x0a
     946:	fc 01       	movw	r30, r24
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	a2 81       	ldd	r26, Z+2	; 0x02
     94e:	b3 81       	ldd	r27, Z+3	; 0x03
     950:	8c 87       	std	Y+12, r24	; 0x0c
     952:	9d 87       	std	Y+13, r25	; 0x0d
     954:	ae 87       	std	Y+14, r26	; 0x0e
     956:	bf 87       	std	Y+15, r27	; 0x0f
     958:	2c 89       	ldd	r18, Y+20	; 0x14
     95a:	3d 89       	ldd	r19, Y+21	; 0x15
     95c:	4e 89       	ldd	r20, Y+22	; 0x16
     95e:	5f 89       	ldd	r21, Y+23	; 0x17
     960:	8c 85       	ldd	r24, Y+12	; 0x0c
     962:	9d 85       	ldd	r25, Y+13	; 0x0d
     964:	ae 85       	ldd	r26, Y+14	; 0x0e
     966:	bf 85       	ldd	r27, Y+15	; 0x0f
     968:	09 8d       	ldd	r16, Y+25	; 0x19
     96a:	bc 01       	movw	r22, r24
     96c:	cd 01       	movw	r24, r26
     96e:	0e 94 26 07 	call	0xe4c	; 0xe4c <prvTestWaitCondition>
     972:	88 8b       	std	Y+16, r24	; 0x10
     974:	88 89       	ldd	r24, Y+16	; 0x10
     976:	88 23       	and	r24, r24
     978:	59 f1       	breq	.+86     	; 0x9d0 <xEventGroupWaitBits+0xd6>
     97a:	8c 85       	ldd	r24, Y+12	; 0x0c
     97c:	9d 85       	ldd	r25, Y+13	; 0x0d
     97e:	ae 85       	ldd	r26, Y+14	; 0x0e
     980:	bf 85       	ldd	r27, Y+15	; 0x0f
     982:	89 83       	std	Y+1, r24	; 0x01
     984:	9a 83       	std	Y+2, r25	; 0x02
     986:	ab 83       	std	Y+3, r26	; 0x03
     988:	bc 83       	std	Y+4, r27	; 0x04
     98a:	1a 8e       	std	Y+26, r1	; 0x1a
     98c:	1b 8e       	std	Y+27, r1	; 0x1b
     98e:	1c 8e       	std	Y+28, r1	; 0x1c
     990:	1d 8e       	std	Y+29, r1	; 0x1d
     992:	88 8d       	ldd	r24, Y+24	; 0x18
     994:	88 23       	and	r24, r24
     996:	09 f4       	brne	.+2      	; 0x99a <xEventGroupWaitBits+0xa0>
     998:	65 c0       	rjmp	.+202    	; 0xa64 <xEventGroupWaitBits+0x16a>
     99a:	89 85       	ldd	r24, Y+9	; 0x09
     99c:	9a 85       	ldd	r25, Y+10	; 0x0a
     99e:	fc 01       	movw	r30, r24
     9a0:	20 81       	ld	r18, Z
     9a2:	31 81       	ldd	r19, Z+1	; 0x01
     9a4:	42 81       	ldd	r20, Z+2	; 0x02
     9a6:	53 81       	ldd	r21, Z+3	; 0x03
     9a8:	8c 89       	ldd	r24, Y+20	; 0x14
     9aa:	9d 89       	ldd	r25, Y+21	; 0x15
     9ac:	ae 89       	ldd	r26, Y+22	; 0x16
     9ae:	bf 89       	ldd	r27, Y+23	; 0x17
     9b0:	80 95       	com	r24
     9b2:	90 95       	com	r25
     9b4:	a0 95       	com	r26
     9b6:	b0 95       	com	r27
     9b8:	82 23       	and	r24, r18
     9ba:	93 23       	and	r25, r19
     9bc:	a4 23       	and	r26, r20
     9be:	b5 23       	and	r27, r21
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	f9 01       	movw	r30, r18
     9c6:	80 83       	st	Z, r24
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	a2 83       	std	Z+2, r26	; 0x02
     9cc:	b3 83       	std	Z+3, r27	; 0x03
     9ce:	4a c0       	rjmp	.+148    	; 0xa64 <xEventGroupWaitBits+0x16a>
     9d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9d4:	ac 8d       	ldd	r26, Y+28	; 0x1c
     9d6:	bd 8d       	ldd	r27, Y+29	; 0x1d
     9d8:	89 2b       	or	r24, r25
     9da:	8a 2b       	or	r24, r26
     9dc:	8b 2b       	or	r24, r27
     9de:	59 f4       	brne	.+22     	; 0x9f6 <xEventGroupWaitBits+0xfc>
     9e0:	8c 85       	ldd	r24, Y+12	; 0x0c
     9e2:	9d 85       	ldd	r25, Y+13	; 0x0d
     9e4:	ae 85       	ldd	r26, Y+14	; 0x0e
     9e6:	bf 85       	ldd	r27, Y+15	; 0x0f
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	9a 83       	std	Y+2, r25	; 0x02
     9ec:	ab 83       	std	Y+3, r26	; 0x03
     9ee:	bc 83       	std	Y+4, r27	; 0x04
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	8b 87       	std	Y+11, r24	; 0x0b
     9f4:	37 c0       	rjmp	.+110    	; 0xa64 <xEventGroupWaitBits+0x16a>
     9f6:	88 8d       	ldd	r24, Y+24	; 0x18
     9f8:	88 23       	and	r24, r24
     9fa:	49 f0       	breq	.+18     	; 0xa0e <xEventGroupWaitBits+0x114>
     9fc:	8d 81       	ldd	r24, Y+5	; 0x05
     9fe:	9e 81       	ldd	r25, Y+6	; 0x06
     a00:	af 81       	ldd	r26, Y+7	; 0x07
     a02:	b8 85       	ldd	r27, Y+8	; 0x08
     a04:	b1 60       	ori	r27, 0x01	; 1
     a06:	8d 83       	std	Y+5, r24	; 0x05
     a08:	9e 83       	std	Y+6, r25	; 0x06
     a0a:	af 83       	std	Y+7, r26	; 0x07
     a0c:	b8 87       	std	Y+8, r27	; 0x08
     a0e:	89 8d       	ldd	r24, Y+25	; 0x19
     a10:	88 23       	and	r24, r24
     a12:	49 f0       	breq	.+18     	; 0xa26 <xEventGroupWaitBits+0x12c>
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	9e 81       	ldd	r25, Y+6	; 0x06
     a18:	af 81       	ldd	r26, Y+7	; 0x07
     a1a:	b8 85       	ldd	r27, Y+8	; 0x08
     a1c:	b4 60       	ori	r27, 0x04	; 4
     a1e:	8d 83       	std	Y+5, r24	; 0x05
     a20:	9e 83       	std	Y+6, r25	; 0x06
     a22:	af 83       	std	Y+7, r26	; 0x07
     a24:	b8 87       	std	Y+8, r27	; 0x08
     a26:	2c 89       	ldd	r18, Y+20	; 0x14
     a28:	3d 89       	ldd	r19, Y+21	; 0x15
     a2a:	4e 89       	ldd	r20, Y+22	; 0x16
     a2c:	5f 89       	ldd	r21, Y+23	; 0x17
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	9e 81       	ldd	r25, Y+6	; 0x06
     a32:	af 81       	ldd	r26, Y+7	; 0x07
     a34:	b8 85       	ldd	r27, Y+8	; 0x08
     a36:	82 2b       	or	r24, r18
     a38:	93 2b       	or	r25, r19
     a3a:	a4 2b       	or	r26, r20
     a3c:	b5 2b       	or	r27, r21
     a3e:	29 85       	ldd	r18, Y+9	; 0x09
     a40:	3a 85       	ldd	r19, Y+10	; 0x0a
     a42:	f9 01       	movw	r30, r18
     a44:	34 96       	adiw	r30, 0x04	; 4
     a46:	2a 8d       	ldd	r18, Y+26	; 0x1a
     a48:	3b 8d       	ldd	r19, Y+27	; 0x1b
     a4a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a4c:	5d 8d       	ldd	r21, Y+29	; 0x1d
     a4e:	89 01       	movw	r16, r18
     a50:	9a 01       	movw	r18, r20
     a52:	ac 01       	movw	r20, r24
     a54:	bd 01       	movw	r22, r26
     a56:	cf 01       	movw	r24, r30
     a58:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <vTaskPlaceOnUnorderedEventList>
     a5c:	19 82       	std	Y+1, r1	; 0x01
     a5e:	1a 82       	std	Y+2, r1	; 0x02
     a60:	1b 82       	std	Y+3, r1	; 0x03
     a62:	1c 82       	std	Y+4, r1	; 0x04
     a64:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
     a68:	89 8b       	std	Y+17, r24	; 0x11
     a6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a6e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a70:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a72:	89 2b       	or	r24, r25
     a74:	8a 2b       	or	r24, r26
     a76:	8b 2b       	or	r24, r27
     a78:	09 f4       	brne	.+2      	; 0xa7c <xEventGroupWaitBits+0x182>
     a7a:	65 c0       	rjmp	.+202    	; 0xb46 <xEventGroupWaitBits+0x24c>
     a7c:	89 89       	ldd	r24, Y+17	; 0x11
     a7e:	88 23       	and	r24, r24
     a80:	11 f4       	brne	.+4      	; 0xa86 <xEventGroupWaitBits+0x18c>
     a82:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
     a86:	0e 94 c5 19 	call	0x338a	; 0x338a <uxTaskResetEventItemValue>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	89 83       	std	Y+1, r24	; 0x01
     a90:	9a 83       	std	Y+2, r25	; 0x02
     a92:	ab 83       	std	Y+3, r26	; 0x03
     a94:	bc 83       	std	Y+4, r27	; 0x04
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	ab 81       	ldd	r26, Y+3	; 0x03
     a9c:	bc 81       	ldd	r27, Y+4	; 0x04
     a9e:	88 27       	eor	r24, r24
     aa0:	99 27       	eor	r25, r25
     aa2:	aa 27       	eor	r26, r26
     aa4:	b2 70       	andi	r27, 0x02	; 2
     aa6:	89 2b       	or	r24, r25
     aa8:	8a 2b       	or	r24, r26
     aaa:	8b 2b       	or	r24, r27
     aac:	09 f0       	breq	.+2      	; 0xab0 <xEventGroupWaitBits+0x1b6>
     aae:	42 c0       	rjmp	.+132    	; 0xb34 <xEventGroupWaitBits+0x23a>
     ab0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ab4:	ff 93       	push	r31
     ab6:	f8 7f       	andi	r31, 0xF8	; 248
     ab8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     abc:	89 85       	ldd	r24, Y+9	; 0x09
     abe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac0:	fc 01       	movw	r30, r24
     ac2:	80 81       	ld	r24, Z
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	a2 81       	ldd	r26, Z+2	; 0x02
     ac8:	b3 81       	ldd	r27, Z+3	; 0x03
     aca:	89 83       	std	Y+1, r24	; 0x01
     acc:	9a 83       	std	Y+2, r25	; 0x02
     ace:	ab 83       	std	Y+3, r26	; 0x03
     ad0:	bc 83       	std	Y+4, r27	; 0x04
     ad2:	2c 89       	ldd	r18, Y+20	; 0x14
     ad4:	3d 89       	ldd	r19, Y+21	; 0x15
     ad6:	4e 89       	ldd	r20, Y+22	; 0x16
     ad8:	5f 89       	ldd	r21, Y+23	; 0x17
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	ab 81       	ldd	r26, Y+3	; 0x03
     ae0:	bc 81       	ldd	r27, Y+4	; 0x04
     ae2:	09 8d       	ldd	r16, Y+25	; 0x19
     ae4:	bc 01       	movw	r22, r24
     ae6:	cd 01       	movw	r24, r26
     ae8:	0e 94 26 07 	call	0xe4c	; 0xe4c <prvTestWaitCondition>
     aec:	88 23       	and	r24, r24
     aee:	e9 f0       	breq	.+58     	; 0xb2a <xEventGroupWaitBits+0x230>
     af0:	88 8d       	ldd	r24, Y+24	; 0x18
     af2:	88 23       	and	r24, r24
     af4:	d1 f0       	breq	.+52     	; 0xb2a <xEventGroupWaitBits+0x230>
     af6:	89 85       	ldd	r24, Y+9	; 0x09
     af8:	9a 85       	ldd	r25, Y+10	; 0x0a
     afa:	fc 01       	movw	r30, r24
     afc:	20 81       	ld	r18, Z
     afe:	31 81       	ldd	r19, Z+1	; 0x01
     b00:	42 81       	ldd	r20, Z+2	; 0x02
     b02:	53 81       	ldd	r21, Z+3	; 0x03
     b04:	8c 89       	ldd	r24, Y+20	; 0x14
     b06:	9d 89       	ldd	r25, Y+21	; 0x15
     b08:	ae 89       	ldd	r26, Y+22	; 0x16
     b0a:	bf 89       	ldd	r27, Y+23	; 0x17
     b0c:	80 95       	com	r24
     b0e:	90 95       	com	r25
     b10:	a0 95       	com	r26
     b12:	b0 95       	com	r27
     b14:	82 23       	and	r24, r18
     b16:	93 23       	and	r25, r19
     b18:	a4 23       	and	r26, r20
     b1a:	b5 23       	and	r27, r21
     b1c:	29 85       	ldd	r18, Y+9	; 0x09
     b1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     b20:	f9 01       	movw	r30, r18
     b22:	80 83       	st	Z, r24
     b24:	91 83       	std	Z+1, r25	; 0x01
     b26:	a2 83       	std	Z+2, r26	; 0x02
     b28:	b3 83       	std	Z+3, r27	; 0x03
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	8b 87       	std	Y+11, r24	; 0x0b
     b2e:	ff 91       	pop	r31
     b30:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	ab 81       	ldd	r26, Y+3	; 0x03
     b3a:	bc 81       	ldd	r27, Y+4	; 0x04
     b3c:	bb 27       	eor	r27, r27
     b3e:	89 83       	std	Y+1, r24	; 0x01
     b40:	9a 83       	std	Y+2, r25	; 0x02
     b42:	ab 83       	std	Y+3, r26	; 0x03
     b44:	bc 83       	std	Y+4, r27	; 0x04
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	ab 81       	ldd	r26, Y+3	; 0x03
     b4c:	bc 81       	ldd	r27, Y+4	; 0x04
     b4e:	bc 01       	movw	r22, r24
     b50:	cd 01       	movw	r24, r26
     b52:	6d 96       	adiw	r28, 0x1d	; 29
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	08 95       	ret

00000b6a <xEventGroupClearBits>:
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	2c 97       	sbiw	r28, 0x0c	; 12
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	8f 83       	std	Y+7, r24	; 0x07
     b7a:	98 87       	std	Y+8, r25	; 0x08
     b7c:	49 87       	std	Y+9, r20	; 0x09
     b7e:	5a 87       	std	Y+10, r21	; 0x0a
     b80:	6b 87       	std	Y+11, r22	; 0x0b
     b82:	7c 87       	std	Y+12, r23	; 0x0c
     b84:	8f 81       	ldd	r24, Y+7	; 0x07
     b86:	98 85       	ldd	r25, Y+8	; 0x08
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	9a 83       	std	Y+2, r25	; 0x02
     b8c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b90:	ff 93       	push	r31
     b92:	f8 7f       	andi	r31, 0xF8	; 248
     b94:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	fc 01       	movw	r30, r24
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	a2 81       	ldd	r26, Z+2	; 0x02
     ba4:	b3 81       	ldd	r27, Z+3	; 0x03
     ba6:	8b 83       	std	Y+3, r24	; 0x03
     ba8:	9c 83       	std	Y+4, r25	; 0x04
     baa:	ad 83       	std	Y+5, r26	; 0x05
     bac:	be 83       	std	Y+6, r27	; 0x06
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	9a 81       	ldd	r25, Y+2	; 0x02
     bb2:	fc 01       	movw	r30, r24
     bb4:	20 81       	ld	r18, Z
     bb6:	31 81       	ldd	r19, Z+1	; 0x01
     bb8:	42 81       	ldd	r20, Z+2	; 0x02
     bba:	53 81       	ldd	r21, Z+3	; 0x03
     bbc:	89 85       	ldd	r24, Y+9	; 0x09
     bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc0:	ab 85       	ldd	r26, Y+11	; 0x0b
     bc2:	bc 85       	ldd	r27, Y+12	; 0x0c
     bc4:	80 95       	com	r24
     bc6:	90 95       	com	r25
     bc8:	a0 95       	com	r26
     bca:	b0 95       	com	r27
     bcc:	82 23       	and	r24, r18
     bce:	93 23       	and	r25, r19
     bd0:	a4 23       	and	r26, r20
     bd2:	b5 23       	and	r27, r21
     bd4:	29 81       	ldd	r18, Y+1	; 0x01
     bd6:	3a 81       	ldd	r19, Y+2	; 0x02
     bd8:	f9 01       	movw	r30, r18
     bda:	80 83       	st	Z, r24
     bdc:	91 83       	std	Z+1, r25	; 0x01
     bde:	a2 83       	std	Z+2, r26	; 0x02
     be0:	b3 83       	std	Z+3, r27	; 0x03
     be2:	ff 91       	pop	r31
     be4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	ad 81       	ldd	r26, Y+5	; 0x05
     bee:	be 81       	ldd	r27, Y+6	; 0x06
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	2c 96       	adiw	r28, 0x0c	; 12
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <xEventGroupSetBits>:
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	6d 97       	sbiw	r28, 0x1d	; 29
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	88 8f       	std	Y+24, r24	; 0x18
     c10:	99 8f       	std	Y+25, r25	; 0x19
     c12:	4a 8f       	std	Y+26, r20	; 0x1a
     c14:	5b 8f       	std	Y+27, r21	; 0x1b
     c16:	6c 8f       	std	Y+28, r22	; 0x1c
     c18:	7d 8f       	std	Y+29, r23	; 0x1d
     c1a:	1b 82       	std	Y+3, r1	; 0x03
     c1c:	1c 82       	std	Y+4, r1	; 0x04
     c1e:	1d 82       	std	Y+5, r1	; 0x05
     c20:	1e 82       	std	Y+6, r1	; 0x06
     c22:	88 8d       	ldd	r24, Y+24	; 0x18
     c24:	99 8d       	ldd	r25, Y+25	; 0x19
     c26:	88 87       	std	Y+8, r24	; 0x08
     c28:	99 87       	std	Y+9, r25	; 0x09
     c2a:	1f 82       	std	Y+7, r1	; 0x07
     c2c:	88 85       	ldd	r24, Y+8	; 0x08
     c2e:	99 85       	ldd	r25, Y+9	; 0x09
     c30:	04 96       	adiw	r24, 0x04	; 4
     c32:	8a 87       	std	Y+10, r24	; 0x0a
     c34:	9b 87       	std	Y+11, r25	; 0x0b
     c36:	8a 85       	ldd	r24, Y+10	; 0x0a
     c38:	9b 85       	ldd	r25, Y+11	; 0x0b
     c3a:	03 96       	adiw	r24, 0x03	; 3
     c3c:	8c 87       	std	Y+12, r24	; 0x0c
     c3e:	9d 87       	std	Y+13, r25	; 0x0d
     c40:	0e 94 34 14 	call	0x2868	; 0x2868 <vTaskSuspendAll>
     c44:	8a 85       	ldd	r24, Y+10	; 0x0a
     c46:	9b 85       	ldd	r25, Y+11	; 0x0b
     c48:	fc 01       	movw	r30, r24
     c4a:	87 81       	ldd	r24, Z+7	; 0x07
     c4c:	90 85       	ldd	r25, Z+8	; 0x08
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	88 85       	ldd	r24, Y+8	; 0x08
     c54:	99 85       	ldd	r25, Y+9	; 0x09
     c56:	fc 01       	movw	r30, r24
     c58:	20 81       	ld	r18, Z
     c5a:	31 81       	ldd	r19, Z+1	; 0x01
     c5c:	42 81       	ldd	r20, Z+2	; 0x02
     c5e:	53 81       	ldd	r21, Z+3	; 0x03
     c60:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c62:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c64:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c66:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c68:	82 2b       	or	r24, r18
     c6a:	93 2b       	or	r25, r19
     c6c:	a4 2b       	or	r26, r20
     c6e:	b5 2b       	or	r27, r21
     c70:	28 85       	ldd	r18, Y+8	; 0x08
     c72:	39 85       	ldd	r19, Y+9	; 0x09
     c74:	f9 01       	movw	r30, r18
     c76:	80 83       	st	Z, r24
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	a2 83       	std	Z+2, r26	; 0x02
     c7c:	b3 83       	std	Z+3, r27	; 0x03
     c7e:	95 c0       	rjmp	.+298    	; 0xdaa <xEventGroupSetBits+0x1aa>
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	fc 01       	movw	r30, r24
     c86:	84 81       	ldd	r24, Z+4	; 0x04
     c88:	95 81       	ldd	r25, Z+5	; 0x05
     c8a:	8e 87       	std	Y+14, r24	; 0x0e
     c8c:	9f 87       	std	Y+15, r25	; 0x0f
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	a2 81       	ldd	r26, Z+2	; 0x02
     c9a:	b3 81       	ldd	r27, Z+3	; 0x03
     c9c:	88 8b       	std	Y+16, r24	; 0x10
     c9e:	99 8b       	std	Y+17, r25	; 0x11
     ca0:	aa 8b       	std	Y+18, r26	; 0x12
     ca2:	bb 8b       	std	Y+19, r27	; 0x13
     ca4:	1f 82       	std	Y+7, r1	; 0x07
     ca6:	88 89       	ldd	r24, Y+16	; 0x10
     ca8:	99 89       	ldd	r25, Y+17	; 0x11
     caa:	aa 89       	ldd	r26, Y+18	; 0x12
     cac:	bb 89       	ldd	r27, Y+19	; 0x13
     cae:	88 27       	eor	r24, r24
     cb0:	99 27       	eor	r25, r25
     cb2:	aa 27       	eor	r26, r26
     cb4:	8c 8b       	std	Y+20, r24	; 0x14
     cb6:	9d 8b       	std	Y+21, r25	; 0x15
     cb8:	ae 8b       	std	Y+22, r26	; 0x16
     cba:	bf 8b       	std	Y+23, r27	; 0x17
     cbc:	88 89       	ldd	r24, Y+16	; 0x10
     cbe:	99 89       	ldd	r25, Y+17	; 0x11
     cc0:	aa 89       	ldd	r26, Y+18	; 0x12
     cc2:	bb 89       	ldd	r27, Y+19	; 0x13
     cc4:	bb 27       	eor	r27, r27
     cc6:	88 8b       	std	Y+16, r24	; 0x10
     cc8:	99 8b       	std	Y+17, r25	; 0x11
     cca:	aa 8b       	std	Y+18, r26	; 0x12
     ccc:	bb 8b       	std	Y+19, r27	; 0x13
     cce:	8c 89       	ldd	r24, Y+20	; 0x14
     cd0:	9d 89       	ldd	r25, Y+21	; 0x15
     cd2:	ae 89       	ldd	r26, Y+22	; 0x16
     cd4:	bf 89       	ldd	r27, Y+23	; 0x17
     cd6:	88 27       	eor	r24, r24
     cd8:	99 27       	eor	r25, r25
     cda:	aa 27       	eor	r26, r26
     cdc:	b4 70       	andi	r27, 0x04	; 4
     cde:	89 2b       	or	r24, r25
     ce0:	8a 2b       	or	r24, r26
     ce2:	8b 2b       	or	r24, r27
     ce4:	b1 f4       	brne	.+44     	; 0xd12 <xEventGroupSetBits+0x112>
     ce6:	88 85       	ldd	r24, Y+8	; 0x08
     ce8:	99 85       	ldd	r25, Y+9	; 0x09
     cea:	fc 01       	movw	r30, r24
     cec:	20 81       	ld	r18, Z
     cee:	31 81       	ldd	r19, Z+1	; 0x01
     cf0:	42 81       	ldd	r20, Z+2	; 0x02
     cf2:	53 81       	ldd	r21, Z+3	; 0x03
     cf4:	88 89       	ldd	r24, Y+16	; 0x10
     cf6:	99 89       	ldd	r25, Y+17	; 0x11
     cf8:	aa 89       	ldd	r26, Y+18	; 0x12
     cfa:	bb 89       	ldd	r27, Y+19	; 0x13
     cfc:	82 23       	and	r24, r18
     cfe:	93 23       	and	r25, r19
     d00:	a4 23       	and	r26, r20
     d02:	b5 23       	and	r27, r21
     d04:	89 2b       	or	r24, r25
     d06:	8a 2b       	or	r24, r26
     d08:	8b 2b       	or	r24, r27
     d0a:	e9 f0       	breq	.+58     	; 0xd46 <xEventGroupSetBits+0x146>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	8f 83       	std	Y+7, r24	; 0x07
     d10:	1a c0       	rjmp	.+52     	; 0xd46 <xEventGroupSetBits+0x146>
     d12:	88 85       	ldd	r24, Y+8	; 0x08
     d14:	99 85       	ldd	r25, Y+9	; 0x09
     d16:	fc 01       	movw	r30, r24
     d18:	20 81       	ld	r18, Z
     d1a:	31 81       	ldd	r19, Z+1	; 0x01
     d1c:	42 81       	ldd	r20, Z+2	; 0x02
     d1e:	53 81       	ldd	r21, Z+3	; 0x03
     d20:	88 89       	ldd	r24, Y+16	; 0x10
     d22:	99 89       	ldd	r25, Y+17	; 0x11
     d24:	aa 89       	ldd	r26, Y+18	; 0x12
     d26:	bb 89       	ldd	r27, Y+19	; 0x13
     d28:	28 23       	and	r18, r24
     d2a:	39 23       	and	r19, r25
     d2c:	4a 23       	and	r20, r26
     d2e:	5b 23       	and	r21, r27
     d30:	88 89       	ldd	r24, Y+16	; 0x10
     d32:	99 89       	ldd	r25, Y+17	; 0x11
     d34:	aa 89       	ldd	r26, Y+18	; 0x12
     d36:	bb 89       	ldd	r27, Y+19	; 0x13
     d38:	28 17       	cp	r18, r24
     d3a:	39 07       	cpc	r19, r25
     d3c:	4a 07       	cpc	r20, r26
     d3e:	5b 07       	cpc	r21, r27
     d40:	11 f4       	brne	.+4      	; 0xd46 <xEventGroupSetBits+0x146>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	8f 83       	std	Y+7, r24	; 0x07
     d46:	8f 81       	ldd	r24, Y+7	; 0x07
     d48:	88 23       	and	r24, r24
     d4a:	59 f1       	breq	.+86     	; 0xda2 <xEventGroupSetBits+0x1a2>
     d4c:	8c 89       	ldd	r24, Y+20	; 0x14
     d4e:	9d 89       	ldd	r25, Y+21	; 0x15
     d50:	ae 89       	ldd	r26, Y+22	; 0x16
     d52:	bf 89       	ldd	r27, Y+23	; 0x17
     d54:	88 27       	eor	r24, r24
     d56:	99 27       	eor	r25, r25
     d58:	aa 27       	eor	r26, r26
     d5a:	b1 70       	andi	r27, 0x01	; 1
     d5c:	89 2b       	or	r24, r25
     d5e:	8a 2b       	or	r24, r26
     d60:	8b 2b       	or	r24, r27
     d62:	81 f0       	breq	.+32     	; 0xd84 <xEventGroupSetBits+0x184>
     d64:	2b 81       	ldd	r18, Y+3	; 0x03
     d66:	3c 81       	ldd	r19, Y+4	; 0x04
     d68:	4d 81       	ldd	r20, Y+5	; 0x05
     d6a:	5e 81       	ldd	r21, Y+6	; 0x06
     d6c:	88 89       	ldd	r24, Y+16	; 0x10
     d6e:	99 89       	ldd	r25, Y+17	; 0x11
     d70:	aa 89       	ldd	r26, Y+18	; 0x12
     d72:	bb 89       	ldd	r27, Y+19	; 0x13
     d74:	82 2b       	or	r24, r18
     d76:	93 2b       	or	r25, r19
     d78:	a4 2b       	or	r26, r20
     d7a:	b5 2b       	or	r27, r21
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	ad 83       	std	Y+5, r26	; 0x05
     d82:	be 83       	std	Y+6, r27	; 0x06
     d84:	88 85       	ldd	r24, Y+8	; 0x08
     d86:	99 85       	ldd	r25, Y+9	; 0x09
     d88:	fc 01       	movw	r30, r24
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	a2 81       	ldd	r26, Z+2	; 0x02
     d90:	b3 81       	ldd	r27, Z+3	; 0x03
     d92:	b2 60       	ori	r27, 0x02	; 2
     d94:	29 81       	ldd	r18, Y+1	; 0x01
     d96:	3a 81       	ldd	r19, Y+2	; 0x02
     d98:	ac 01       	movw	r20, r24
     d9a:	bd 01       	movw	r22, r26
     d9c:	c9 01       	movw	r24, r18
     d9e:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <vTaskRemoveFromUnorderedEventList>
     da2:	8e 85       	ldd	r24, Y+14	; 0x0e
     da4:	9f 85       	ldd	r25, Y+15	; 0x0f
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	29 81       	ldd	r18, Y+1	; 0x01
     dac:	3a 81       	ldd	r19, Y+2	; 0x02
     dae:	8c 85       	ldd	r24, Y+12	; 0x0c
     db0:	9d 85       	ldd	r25, Y+13	; 0x0d
     db2:	28 17       	cp	r18, r24
     db4:	39 07       	cpc	r19, r25
     db6:	09 f0       	breq	.+2      	; 0xdba <xEventGroupSetBits+0x1ba>
     db8:	63 cf       	rjmp	.-314    	; 0xc80 <xEventGroupSetBits+0x80>
     dba:	88 85       	ldd	r24, Y+8	; 0x08
     dbc:	99 85       	ldd	r25, Y+9	; 0x09
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 81       	ld	r18, Z
     dc2:	31 81       	ldd	r19, Z+1	; 0x01
     dc4:	42 81       	ldd	r20, Z+2	; 0x02
     dc6:	53 81       	ldd	r21, Z+3	; 0x03
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	9c 81       	ldd	r25, Y+4	; 0x04
     dcc:	ad 81       	ldd	r26, Y+5	; 0x05
     dce:	be 81       	ldd	r27, Y+6	; 0x06
     dd0:	80 95       	com	r24
     dd2:	90 95       	com	r25
     dd4:	a0 95       	com	r26
     dd6:	b0 95       	com	r27
     dd8:	82 23       	and	r24, r18
     dda:	93 23       	and	r25, r19
     ddc:	a4 23       	and	r26, r20
     dde:	b5 23       	and	r27, r21
     de0:	28 85       	ldd	r18, Y+8	; 0x08
     de2:	39 85       	ldd	r19, Y+9	; 0x09
     de4:	f9 01       	movw	r30, r18
     de6:	80 83       	st	Z, r24
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	a2 83       	std	Z+2, r26	; 0x02
     dec:	b3 83       	std	Z+3, r27	; 0x03
     dee:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
     df2:	88 85       	ldd	r24, Y+8	; 0x08
     df4:	99 85       	ldd	r25, Y+9	; 0x09
     df6:	fc 01       	movw	r30, r24
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	a2 81       	ldd	r26, Z+2	; 0x02
     dfe:	b3 81       	ldd	r27, Z+3	; 0x03
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	6d 96       	adiw	r28, 0x1d	; 29
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <vEventGroupSetBitsCallback>:
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	00 d0       	rcall	.+0      	; 0xe16 <vEventGroupSetBitsCallback+0x6>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <vEventGroupSetBitsCallback+0x8>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	4b 83       	std	Y+3, r20	; 0x03
     e22:	5c 83       	std	Y+4, r21	; 0x04
     e24:	6d 83       	std	Y+5, r22	; 0x05
     e26:	7e 83       	std	Y+6, r23	; 0x06
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	ad 81       	ldd	r26, Y+5	; 0x05
     e2e:	be 81       	ldd	r27, Y+6	; 0x06
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	ac 01       	movw	r20, r24
     e36:	bd 01       	movw	r22, r26
     e38:	c9 01       	movw	r24, r18
     e3a:	0e 94 00 06 	call	0xc00	; 0xc00 <xEventGroupSetBits>
     e3e:	00 00       	nop
     e40:	26 96       	adiw	r28, 0x06	; 6
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

00000e4c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     e4c:	0f 93       	push	r16
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	2a 97       	sbiw	r28, 0x0a	; 10
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	6a 83       	std	Y+2, r22	; 0x02
     e5e:	7b 83       	std	Y+3, r23	; 0x03
     e60:	8c 83       	std	Y+4, r24	; 0x04
     e62:	9d 83       	std	Y+5, r25	; 0x05
     e64:	2e 83       	std	Y+6, r18	; 0x06
     e66:	3f 83       	std	Y+7, r19	; 0x07
     e68:	48 87       	std	Y+8, r20	; 0x08
     e6a:	59 87       	std	Y+9, r21	; 0x09
     e6c:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     e6e:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     e70:	8a 85       	ldd	r24, Y+10	; 0x0a
     e72:	88 23       	and	r24, r24
     e74:	99 f4       	brne	.+38     	; 0xe9c <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     e76:	2a 81       	ldd	r18, Y+2	; 0x02
     e78:	3b 81       	ldd	r19, Y+3	; 0x03
     e7a:	4c 81       	ldd	r20, Y+4	; 0x04
     e7c:	5d 81       	ldd	r21, Y+5	; 0x05
     e7e:	8e 81       	ldd	r24, Y+6	; 0x06
     e80:	9f 81       	ldd	r25, Y+7	; 0x07
     e82:	a8 85       	ldd	r26, Y+8	; 0x08
     e84:	b9 85       	ldd	r27, Y+9	; 0x09
     e86:	82 23       	and	r24, r18
     e88:	93 23       	and	r25, r19
     e8a:	a4 23       	and	r26, r20
     e8c:	b5 23       	and	r27, r21
     e8e:	89 2b       	or	r24, r25
     e90:	8a 2b       	or	r24, r26
     e92:	8b 2b       	or	r24, r27
     e94:	d1 f0       	breq	.+52     	; 0xeca <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	17 c0       	rjmp	.+46     	; 0xeca <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     e9c:	2a 81       	ldd	r18, Y+2	; 0x02
     e9e:	3b 81       	ldd	r19, Y+3	; 0x03
     ea0:	4c 81       	ldd	r20, Y+4	; 0x04
     ea2:	5d 81       	ldd	r21, Y+5	; 0x05
     ea4:	8e 81       	ldd	r24, Y+6	; 0x06
     ea6:	9f 81       	ldd	r25, Y+7	; 0x07
     ea8:	a8 85       	ldd	r26, Y+8	; 0x08
     eaa:	b9 85       	ldd	r27, Y+9	; 0x09
     eac:	28 23       	and	r18, r24
     eae:	39 23       	and	r19, r25
     eb0:	4a 23       	and	r20, r26
     eb2:	5b 23       	and	r21, r27
     eb4:	8e 81       	ldd	r24, Y+6	; 0x06
     eb6:	9f 81       	ldd	r25, Y+7	; 0x07
     eb8:	a8 85       	ldd	r26, Y+8	; 0x08
     eba:	b9 85       	ldd	r27, Y+9	; 0x09
     ebc:	28 17       	cp	r18, r24
     ebe:	39 07       	cpc	r19, r25
     ec0:	4a 07       	cpc	r20, r26
     ec2:	5b 07       	cpc	r21, r27
     ec4:	11 f4       	brne	.+4      	; 0xeca <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
}
     ecc:	2a 96       	adiw	r28, 0x0a	; 10
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	0f 91       	pop	r16
     ed8:	08 95       	ret

00000eda <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	29 97       	sbiw	r28, 0x09	; 9
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	8a 83       	std	Y+2, r24	; 0x02
     eee:	9b 83       	std	Y+3, r25	; 0x03
     ef0:	4c 83       	std	Y+4, r20	; 0x04
     ef2:	5d 83       	std	Y+5, r21	; 0x05
     ef4:	6e 83       	std	Y+6, r22	; 0x06
     ef6:	7f 83       	std	Y+7, r23	; 0x07
     ef8:	28 87       	std	Y+8, r18	; 0x08
     efa:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     efc:	28 85       	ldd	r18, Y+8	; 0x08
     efe:	39 85       	ldd	r19, Y+9	; 0x09
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	9d 81       	ldd	r25, Y+5	; 0x05
     f04:	ae 81       	ldd	r26, Y+6	; 0x06
     f06:	bf 81       	ldd	r27, Y+7	; 0x07
     f08:	6a 81       	ldd	r22, Y+2	; 0x02
     f0a:	7b 81       	ldd	r23, Y+3	; 0x03
     f0c:	89 01       	movw	r16, r18
     f0e:	9c 01       	movw	r18, r24
     f10:	ad 01       	movw	r20, r26
     f12:	88 e0       	ldi	r24, 0x08	; 8
     f14:	97 e0       	ldi	r25, 0x07	; 7
     f16:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <xTimerPendFunctionCallFromISR>
     f1a:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
	}
     f1e:	29 96       	adiw	r28, 0x09	; 9
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	08 95       	ret

00000f2e <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	00 d0       	rcall	.+0      	; 0xf34 <pvPortMalloc+0x6>
     f34:	1f 92       	push	r1
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	8b 83       	std	Y+3, r24	; 0x03
     f3c:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     f3e:	19 82       	std	Y+1, r1	; 0x01
     f40:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     f42:	0e 94 34 14 	call	0x2868	; 0x2868 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f46:	20 91 1e 2c 	lds	r18, 0x2C1E	; 0x802c1e <xNextFreeByte>
     f4a:	30 91 1f 2c 	lds	r19, 0x2C1F	; 0x802c1f <xNextFreeByte+0x1>
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	88 3b       	cpi	r24, 0xB8	; 184
     f58:	9b 40       	sbci	r25, 0x0B	; 11
     f5a:	18 f5       	brcc	.+70     	; 0xfa2 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     f5c:	20 91 1e 2c 	lds	r18, 0x2C1E	; 0x802c1e <xNextFreeByte>
     f60:	30 91 1f 2c 	lds	r19, 0x2C1F	; 0x802c1f <xNextFreeByte+0x1>
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	28 0f       	add	r18, r24
     f6a:	39 1f       	adc	r19, r25
     f6c:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <xNextFreeByte>
     f70:	90 91 1f 2c 	lds	r25, 0x2C1F	; 0x802c1f <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f74:	82 17       	cp	r24, r18
     f76:	93 07       	cpc	r25, r19
     f78:	a0 f4       	brcc	.+40     	; 0xfa2 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     f7a:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <xNextFreeByte>
     f7e:	90 91 1f 2c 	lds	r25, 0x2C1F	; 0x802c1f <xNextFreeByte+0x1>
     f82:	8a 59       	subi	r24, 0x9A	; 154
     f84:	9f 4d       	sbci	r25, 0xDF	; 223
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
     f8a:	20 91 1e 2c 	lds	r18, 0x2C1E	; 0x802c1e <xNextFreeByte>
     f8e:	30 91 1f 2c 	lds	r19, 0x2C1F	; 0x802c1f <xNextFreeByte+0x1>
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	82 0f       	add	r24, r18
     f98:	93 1f       	adc	r25, r19
     f9a:	80 93 1e 2c 	sts	0x2C1E, r24	; 0x802c1e <xNextFreeByte>
     f9e:	90 93 1f 2c 	sts	0x2C1F, r25	; 0x802c1f <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
     fa2:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     faa:	24 96       	adiw	r28, 0x04	; 4
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	1f 92       	push	r1
     fbc:	1f 92       	push	r1
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     fc6:	00 00       	nop
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	1f 92       	push	r1
     fd8:	1f 92       	push	r1
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	9c 01       	movw	r18, r24
     fe8:	2d 5f       	subi	r18, 0xFD	; 253
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	fc 01       	movw	r30, r24
     ff2:	21 83       	std	Z+1, r18	; 0x01
     ff4:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     ff6:	29 81       	ldd	r18, Y+1	; 0x01
     ff8:	3a 81       	ldd	r19, Y+2	; 0x02
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	dc 01       	movw	r26, r24
    1000:	f9 01       	movw	r30, r18
    1002:	83 83       	std	Z+3, r24	; 0x03
    1004:	94 83       	std	Z+4, r25	; 0x04
    1006:	a5 83       	std	Z+5, r26	; 0x05
    1008:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	9c 01       	movw	r18, r24
    1010:	2d 5f       	subi	r18, 0xFD	; 253
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	fc 01       	movw	r30, r24
    101a:	27 83       	std	Z+7, r18	; 0x07
    101c:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	9c 01       	movw	r18, r24
    1024:	2d 5f       	subi	r18, 0xFD	; 253
    1026:	3f 4f       	sbci	r19, 0xFF	; 255
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	9a 81       	ldd	r25, Y+2	; 0x02
    102c:	fc 01       	movw	r30, r24
    102e:	21 87       	std	Z+9, r18	; 0x09
    1030:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	fc 01       	movw	r30, r24
    1038:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    103a:	00 00       	nop
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	1f 92       	push	r1
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	fc 01       	movw	r30, r24
    105c:	12 86       	std	Z+10, r1	; 0x0a
    105e:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1060:	00 00       	nop
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	00 d0       	rcall	.+0      	; 0x1072 <vListInsertEnd+0x6>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <vListInsertEnd+0x8>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	8b 83       	std	Y+3, r24	; 0x03
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	6d 83       	std	Y+5, r22	; 0x05
    107e:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	fc 01       	movw	r30, r24
    1086:	81 81       	ldd	r24, Z+1	; 0x01
    1088:	92 81       	ldd	r25, Z+2	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	29 81       	ldd	r18, Y+1	; 0x01
    1094:	3a 81       	ldd	r19, Y+2	; 0x02
    1096:	fc 01       	movw	r30, r24
    1098:	24 83       	std	Z+4, r18	; 0x04
    109a:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	fc 01       	movw	r30, r24
    10a2:	26 81       	ldd	r18, Z+6	; 0x06
    10a4:	37 81       	ldd	r19, Z+7	; 0x07
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
    10a8:	9e 81       	ldd	r25, Y+6	; 0x06
    10aa:	fc 01       	movw	r30, r24
    10ac:	26 83       	std	Z+6, r18	; 0x06
    10ae:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	fc 01       	movw	r30, r24
    10b6:	86 81       	ldd	r24, Z+6	; 0x06
    10b8:	97 81       	ldd	r25, Z+7	; 0x07
    10ba:	2d 81       	ldd	r18, Y+5	; 0x05
    10bc:	3e 81       	ldd	r19, Y+6	; 0x06
    10be:	fc 01       	movw	r30, r24
    10c0:	24 83       	std	Z+4, r18	; 0x04
    10c2:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ca:	3e 81       	ldd	r19, Y+6	; 0x06
    10cc:	fc 01       	movw	r30, r24
    10ce:	26 83       	std	Z+6, r18	; 0x06
    10d0:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	9e 81       	ldd	r25, Y+6	; 0x06
    10d6:	2b 81       	ldd	r18, Y+3	; 0x03
    10d8:	3c 81       	ldd	r19, Y+4	; 0x04
    10da:	fc 01       	movw	r30, r24
    10dc:	22 87       	std	Z+10, r18	; 0x0a
    10de:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	fc 01       	movw	r30, r24
    10e6:	80 81       	ld	r24, Z
    10e8:	21 e0       	ldi	r18, 0x01	; 1
    10ea:	28 0f       	add	r18, r24
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 83       	st	Z, r18
}
    10f4:	00 00       	nop
    10f6:	26 96       	adiw	r28, 0x06	; 6
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	2a 97       	sbiw	r28, 0x0a	; 10
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	8f 83       	std	Y+7, r24	; 0x07
    1112:	98 87       	std	Y+8, r25	; 0x08
    1114:	69 87       	std	Y+9, r22	; 0x09
    1116:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	fc 01       	movw	r30, r24
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	a2 81       	ldd	r26, Z+2	; 0x02
    1124:	b3 81       	ldd	r27, Z+3	; 0x03
    1126:	8b 83       	std	Y+3, r24	; 0x03
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	ad 83       	std	Y+5, r26	; 0x05
    112c:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	ad 81       	ldd	r26, Y+5	; 0x05
    1134:	be 81       	ldd	r27, Y+6	; 0x06
    1136:	8f 3f       	cpi	r24, 0xFF	; 255
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	af 4f       	sbci	r26, 0xFF	; 255
    113c:	bf 4f       	sbci	r27, 0xFF	; 255
    113e:	41 f4       	brne	.+16     	; 0x1150 <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1140:	8f 81       	ldd	r24, Y+7	; 0x07
    1142:	98 85       	ldd	r25, Y+8	; 0x08
    1144:	fc 01       	movw	r30, r24
    1146:	81 85       	ldd	r24, Z+9	; 0x09
    1148:	92 85       	ldd	r25, Z+10	; 0x0a
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	20 c0       	rjmp	.+64     	; 0x1190 <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1150:	8f 81       	ldd	r24, Y+7	; 0x07
    1152:	98 85       	ldd	r25, Y+8	; 0x08
    1154:	03 96       	adiw	r24, 0x03	; 3
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	07 c0       	rjmp	.+14     	; 0x116a <vListInsert+0x68>
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	fc 01       	movw	r30, r24
    1162:	84 81       	ldd	r24, Z+4	; 0x04
    1164:	95 81       	ldd	r25, Z+5	; 0x05
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	fc 01       	movw	r30, r24
    1170:	84 81       	ldd	r24, Z+4	; 0x04
    1172:	95 81       	ldd	r25, Z+5	; 0x05
    1174:	fc 01       	movw	r30, r24
    1176:	20 81       	ld	r18, Z
    1178:	31 81       	ldd	r19, Z+1	; 0x01
    117a:	42 81       	ldd	r20, Z+2	; 0x02
    117c:	53 81       	ldd	r21, Z+3	; 0x03
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	ad 81       	ldd	r26, Y+5	; 0x05
    1184:	be 81       	ldd	r27, Y+6	; 0x06
    1186:	82 17       	cp	r24, r18
    1188:	93 07       	cpc	r25, r19
    118a:	a4 07       	cpc	r26, r20
    118c:	b5 07       	cpc	r27, r21
    118e:	30 f7       	brcc	.-52     	; 0x115c <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	fc 01       	movw	r30, r24
    1196:	24 81       	ldd	r18, Z+4	; 0x04
    1198:	35 81       	ldd	r19, Z+5	; 0x05
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	fc 01       	movw	r30, r24
    11a0:	24 83       	std	Z+4, r18	; 0x04
    11a2:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    11a4:	89 85       	ldd	r24, Y+9	; 0x09
    11a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a8:	fc 01       	movw	r30, r24
    11aa:	84 81       	ldd	r24, Z+4	; 0x04
    11ac:	95 81       	ldd	r25, Z+5	; 0x05
    11ae:	29 85       	ldd	r18, Y+9	; 0x09
    11b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11b2:	fc 01       	movw	r30, r24
    11b4:	26 83       	std	Z+6, r18	; 0x06
    11b6:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    11bc:	29 81       	ldd	r18, Y+1	; 0x01
    11be:	3a 81       	ldd	r19, Y+2	; 0x02
    11c0:	fc 01       	movw	r30, r24
    11c2:	26 83       	std	Z+6, r18	; 0x06
    11c4:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	29 85       	ldd	r18, Y+9	; 0x09
    11cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    11ce:	fc 01       	movw	r30, r24
    11d0:	24 83       	std	Z+4, r18	; 0x04
    11d2:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d8:	2f 81       	ldd	r18, Y+7	; 0x07
    11da:	38 85       	ldd	r19, Y+8	; 0x08
    11dc:	fc 01       	movw	r30, r24
    11de:	22 87       	std	Z+10, r18	; 0x0a
    11e0:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    11e2:	8f 81       	ldd	r24, Y+7	; 0x07
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	fc 01       	movw	r30, r24
    11e8:	80 81       	ld	r24, Z
    11ea:	21 e0       	ldi	r18, 0x01	; 1
    11ec:	28 0f       	add	r18, r24
    11ee:	8f 81       	ldd	r24, Y+7	; 0x07
    11f0:	98 85       	ldd	r25, Y+8	; 0x08
    11f2:	fc 01       	movw	r30, r24
    11f4:	20 83       	st	Z, r18
}
    11f6:	00 00       	nop
    11f8:	2a 96       	adiw	r28, 0x0a	; 10
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	00 d0       	rcall	.+0      	; 0x120a <uxListRemove+0x6>
    120a:	1f 92       	push	r1
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	8b 83       	std	Y+3, r24	; 0x03
    1212:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	fc 01       	movw	r30, r24
    121a:	82 85       	ldd	r24, Z+10	; 0x0a
    121c:	93 85       	ldd	r25, Z+11	; 0x0b
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	fc 01       	movw	r30, r24
    1228:	84 81       	ldd	r24, Z+4	; 0x04
    122a:	95 81       	ldd	r25, Z+5	; 0x05
    122c:	2b 81       	ldd	r18, Y+3	; 0x03
    122e:	3c 81       	ldd	r19, Y+4	; 0x04
    1230:	f9 01       	movw	r30, r18
    1232:	26 81       	ldd	r18, Z+6	; 0x06
    1234:	37 81       	ldd	r19, Z+7	; 0x07
    1236:	fc 01       	movw	r30, r24
    1238:	26 83       	std	Z+6, r18	; 0x06
    123a:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	fc 01       	movw	r30, r24
    1242:	86 81       	ldd	r24, Z+6	; 0x06
    1244:	97 81       	ldd	r25, Z+7	; 0x07
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	f9 01       	movw	r30, r18
    124c:	24 81       	ldd	r18, Z+4	; 0x04
    124e:	35 81       	ldd	r19, Z+5	; 0x05
    1250:	fc 01       	movw	r30, r24
    1252:	24 83       	std	Z+4, r18	; 0x04
    1254:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	fc 01       	movw	r30, r24
    125c:	21 81       	ldd	r18, Z+1	; 0x01
    125e:	32 81       	ldd	r19, Z+2	; 0x02
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	28 17       	cp	r18, r24
    1266:	39 07       	cpc	r19, r25
    1268:	51 f4       	brne	.+20     	; 0x127e <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	fc 01       	movw	r30, r24
    1270:	26 81       	ldd	r18, Z+6	; 0x06
    1272:	37 81       	ldd	r19, Z+7	; 0x07
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	fc 01       	movw	r30, r24
    127a:	21 83       	std	Z+1, r18	; 0x01
    127c:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	fc 01       	movw	r30, r24
    1284:	12 86       	std	Z+10, r1	; 0x0a
    1286:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	2f ef       	ldi	r18, 0xFF	; 255
    1292:	28 0f       	add	r18, r24
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	fc 01       	movw	r30, r24
    129a:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	fc 01       	movw	r30, r24
    12a2:	80 81       	ld	r24, Z
}
    12a4:	24 96       	adiw	r28, 0x04	; 4
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	80 ea       	ldi	r24, 0xA0	; 160
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	fc 01       	movw	r30, r24
    12c0:	12 81       	ldd	r17, Z+2	; 0x02
    12c2:	80 ea       	ldi	r24, 0xA0	; 160
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	20 ea       	ldi	r18, 0xA0	; 160
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	f9 01       	movw	r30, r18
    12cc:	22 81       	ldd	r18, Z+2	; 0x02
    12ce:	28 7f       	andi	r18, 0xF8	; 248
    12d0:	fc 01       	movw	r30, r24
    12d2:	22 83       	std	Z+2, r18	; 0x02
    12d4:	81 2f       	mov	r24, r17
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	08 95       	ret

000012de <pxPortInitialiseStack>:
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	2a 97       	sbiw	r28, 0x0a	; 10
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	6f 83       	std	Y+7, r22	; 0x07
    12f2:	78 87       	std	Y+8, r23	; 0x08
    12f4:	49 87       	std	Y+9, r20	; 0x09
    12f6:	5a 87       	std	Y+10, r21	; 0x0a
    12f8:	8d 81       	ldd	r24, Y+5	; 0x05
    12fa:	9e 81       	ldd	r25, Y+6	; 0x06
    12fc:	21 e1       	ldi	r18, 0x11	; 17
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	22 e2       	ldi	r18, 0x22	; 34
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	23 e3       	ldi	r18, 0x33	; 51
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	8d 83       	std	Y+5, r24	; 0x05
    1332:	9e 83       	std	Y+6, r25	; 0x06
    1334:	8f 81       	ldd	r24, Y+7	; 0x07
    1336:	98 85       	ldd	r25, Y+8	; 0x08
    1338:	cc 01       	movw	r24, r24
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	ab 83       	std	Y+3, r26	; 0x03
    1344:	bc 83       	std	Y+4, r27	; 0x04
    1346:	29 81       	ldd	r18, Y+1	; 0x01
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	fc 01       	movw	r30, r24
    134e:	20 83       	st	Z, r18
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	ab 81       	ldd	r26, Y+3	; 0x03
    1360:	bc 81       	ldd	r27, Y+4	; 0x04
    1362:	89 2f       	mov	r24, r25
    1364:	9a 2f       	mov	r25, r26
    1366:	ab 2f       	mov	r26, r27
    1368:	bb 27       	eor	r27, r27
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	ab 83       	std	Y+3, r26	; 0x03
    1370:	bc 83       	std	Y+4, r27	; 0x04
    1372:	29 81       	ldd	r18, Y+1	; 0x01
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	8d 83       	std	Y+5, r24	; 0x05
    1384:	9e 83       	std	Y+6, r25	; 0x06
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	ab 81       	ldd	r26, Y+3	; 0x03
    138c:	bc 81       	ldd	r27, Y+4	; 0x04
    138e:	89 2f       	mov	r24, r25
    1390:	9a 2f       	mov	r25, r26
    1392:	ab 2f       	mov	r26, r27
    1394:	bb 27       	eor	r27, r27
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	ab 83       	std	Y+3, r26	; 0x03
    139c:	bc 83       	std	Y+4, r27	; 0x04
    139e:	29 81       	ldd	r18, Y+1	; 0x01
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	8d 83       	std	Y+5, r24	; 0x05
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	21 e3       	ldi	r18, 0x31	; 49
    13b8:	fc 01       	movw	r30, r24
    13ba:	20 83       	st	Z, r18
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	20 e8       	ldi	r18, 0x80	; 128
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 83       	st	Z, r18
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	27 e8       	ldi	r18, 0x87	; 135
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	8d 83       	std	Y+5, r24	; 0x05
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	fc 01       	movw	r30, r24
    13f4:	10 82       	st	Z, r1
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	8d 83       	std	Y+5, r24	; 0x05
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	fc 01       	movw	r30, r24
    1406:	10 82       	st	Z, r1
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	22 e0       	ldi	r18, 0x02	; 2
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	8d 83       	std	Y+5, r24	; 0x05
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	23 e0       	ldi	r18, 0x03	; 3
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18
    1430:	8d 81       	ldd	r24, Y+5	; 0x05
    1432:	9e 81       	ldd	r25, Y+6	; 0x06
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	9e 81       	ldd	r25, Y+6	; 0x06
    143e:	24 e0       	ldi	r18, 0x04	; 4
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	25 e0       	ldi	r18, 0x05	; 5
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	9e 83       	std	Y+6, r25	; 0x06
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	26 e0       	ldi	r18, 0x06	; 6
    1468:	fc 01       	movw	r30, r24
    146a:	20 83       	st	Z, r18
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	8d 83       	std	Y+5, r24	; 0x05
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	27 e0       	ldi	r18, 0x07	; 7
    147c:	fc 01       	movw	r30, r24
    147e:	20 83       	st	Z, r18
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	28 e0       	ldi	r18, 0x08	; 8
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	8d 83       	std	Y+5, r24	; 0x05
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	29 e0       	ldi	r18, 0x09	; 9
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	8d 83       	std	Y+5, r24	; 0x05
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	20 e1       	ldi	r18, 0x10	; 16
    14b8:	fc 01       	movw	r30, r24
    14ba:	20 83       	st	Z, r18
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	8d 83       	std	Y+5, r24	; 0x05
    14c4:	9e 83       	std	Y+6, r25	; 0x06
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ca:	21 e1       	ldi	r18, 0x11	; 17
    14cc:	fc 01       	movw	r30, r24
    14ce:	20 83       	st	Z, r18
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	8d 83       	std	Y+5, r24	; 0x05
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	22 e1       	ldi	r18, 0x12	; 18
    14e0:	fc 01       	movw	r30, r24
    14e2:	20 83       	st	Z, r18
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	23 e1       	ldi	r18, 0x13	; 19
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	24 e1       	ldi	r18, 0x14	; 20
    1508:	fc 01       	movw	r30, r24
    150a:	20 83       	st	Z, r18
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	25 e1       	ldi	r18, 0x15	; 21
    151c:	fc 01       	movw	r30, r24
    151e:	20 83       	st	Z, r18
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	8d 83       	std	Y+5, r24	; 0x05
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	26 e1       	ldi	r18, 0x16	; 22
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	27 e1       	ldi	r18, 0x17	; 23
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	9e 83       	std	Y+6, r25	; 0x06
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	28 e1       	ldi	r18, 0x18	; 24
    1558:	fc 01       	movw	r30, r24
    155a:	20 83       	st	Z, r18
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	29 e1       	ldi	r18, 0x19	; 25
    156c:	fc 01       	movw	r30, r24
    156e:	20 83       	st	Z, r18
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	20 e2       	ldi	r18, 0x20	; 32
    1580:	fc 01       	movw	r30, r24
    1582:	20 83       	st	Z, r18
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	8d 83       	std	Y+5, r24	; 0x05
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	9e 81       	ldd	r25, Y+6	; 0x06
    1592:	21 e2       	ldi	r18, 0x21	; 33
    1594:	fc 01       	movw	r30, r24
    1596:	20 83       	st	Z, r18
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	9e 81       	ldd	r25, Y+6	; 0x06
    15a6:	22 e2       	ldi	r18, 0x22	; 34
    15a8:	fc 01       	movw	r30, r24
    15aa:	20 83       	st	Z, r18
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	9e 81       	ldd	r25, Y+6	; 0x06
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	8d 83       	std	Y+5, r24	; 0x05
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	23 e2       	ldi	r18, 0x23	; 35
    15bc:	fc 01       	movw	r30, r24
    15be:	20 83       	st	Z, r18
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	cc 01       	movw	r24, r24
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	ab 83       	std	Y+3, r26	; 0x03
    15da:	bc 83       	std	Y+4, r27	; 0x04
    15dc:	29 81       	ldd	r18, Y+1	; 0x01
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	fc 01       	movw	r30, r24
    15e4:	20 83       	st	Z, r18
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	ab 81       	ldd	r26, Y+3	; 0x03
    15f6:	bc 81       	ldd	r27, Y+4	; 0x04
    15f8:	89 2f       	mov	r24, r25
    15fa:	9a 2f       	mov	r25, r26
    15fc:	ab 2f       	mov	r26, r27
    15fe:	bb 27       	eor	r27, r27
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	ab 83       	std	Y+3, r26	; 0x03
    1606:	bc 83       	std	Y+4, r27	; 0x04
    1608:	29 81       	ldd	r18, Y+1	; 0x01
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	fc 01       	movw	r30, r24
    1610:	20 83       	st	Z, r18
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	26 e2       	ldi	r18, 0x26	; 38
    1622:	fc 01       	movw	r30, r24
    1624:	20 83       	st	Z, r18
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	8d 83       	std	Y+5, r24	; 0x05
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	27 e2       	ldi	r18, 0x27	; 39
    1636:	fc 01       	movw	r30, r24
    1638:	20 83       	st	Z, r18
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	9e 83       	std	Y+6, r25	; 0x06
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	28 e2       	ldi	r18, 0x28	; 40
    164a:	fc 01       	movw	r30, r24
    164c:	20 83       	st	Z, r18
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	9e 81       	ldd	r25, Y+6	; 0x06
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	8d 81       	ldd	r24, Y+5	; 0x05
    165a:	9e 81       	ldd	r25, Y+6	; 0x06
    165c:	29 e2       	ldi	r18, 0x29	; 41
    165e:	fc 01       	movw	r30, r24
    1660:	20 83       	st	Z, r18
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	8d 83       	std	Y+5, r24	; 0x05
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	20 e3       	ldi	r18, 0x30	; 48
    1672:	fc 01       	movw	r30, r24
    1674:	20 83       	st	Z, r18
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	8d 83       	std	Y+5, r24	; 0x05
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	2a 96       	adiw	r28, 0x0a	; 10
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <xPortStartScheduler>:
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	0e 94 8f 0c 	call	0x191e	; 0x191e <prvSetupTimerInterrupt>
    169c:	a0 91 20 2c 	lds	r26, 0x2C20	; 0x802c20 <pxCurrentTCB>
    16a0:	b0 91 21 2c 	lds	r27, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    16a4:	0d 90       	ld	r0, X+
    16a6:	0d be       	out	0x3d, r0	; 61
    16a8:	0d 90       	ld	r0, X+
    16aa:	0e be       	out	0x3e, r0	; 62
    16ac:	ef 91       	pop	r30
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	bf 91       	pop	r27
    16b4:	af 91       	pop	r26
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	7f 91       	pop	r23
    16bc:	6f 91       	pop	r22
    16be:	5f 91       	pop	r21
    16c0:	4f 91       	pop	r20
    16c2:	3f 91       	pop	r19
    16c4:	2f 91       	pop	r18
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	df 90       	pop	r13
    16d0:	cf 90       	pop	r12
    16d2:	bf 90       	pop	r11
    16d4:	af 90       	pop	r10
    16d6:	9f 90       	pop	r9
    16d8:	8f 90       	pop	r8
    16da:	7f 90       	pop	r7
    16dc:	6f 90       	pop	r6
    16de:	5f 90       	pop	r5
    16e0:	4f 90       	pop	r4
    16e2:	3f 90       	pop	r3
    16e4:	2f 90       	pop	r2
    16e6:	1f 90       	pop	r1
    16e8:	0f 90       	pop	r0
    16ea:	ff 91       	pop	r31
    16ec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16f0:	ff 91       	pop	r31
    16f2:	ff bf       	out	0x3f, r31	; 63
    16f4:	ff 91       	pop	r31
    16f6:	08 95       	ret
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1700:	ff 93       	push	r31
    1702:	ff b7       	in	r31, 0x3f	; 63
    1704:	ff 93       	push	r31
    1706:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    170a:	ff 93       	push	r31
    170c:	f8 7f       	andi	r31, 0xF8	; 248
    170e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1712:	0f 92       	push	r0
    1714:	1f 92       	push	r1
    1716:	11 24       	eor	r1, r1
    1718:	2f 92       	push	r2
    171a:	3f 92       	push	r3
    171c:	4f 92       	push	r4
    171e:	5f 92       	push	r5
    1720:	6f 92       	push	r6
    1722:	7f 92       	push	r7
    1724:	8f 92       	push	r8
    1726:	9f 92       	push	r9
    1728:	af 92       	push	r10
    172a:	bf 92       	push	r11
    172c:	cf 92       	push	r12
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	2f 93       	push	r18
    173a:	3f 93       	push	r19
    173c:	4f 93       	push	r20
    173e:	5f 93       	push	r21
    1740:	6f 93       	push	r22
    1742:	7f 93       	push	r23
    1744:	8f 93       	push	r24
    1746:	9f 93       	push	r25
    1748:	af 93       	push	r26
    174a:	bf 93       	push	r27
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ef 93       	push	r30
    1752:	a0 91 20 2c 	lds	r26, 0x2C20	; 0x802c20 <pxCurrentTCB>
    1756:	b0 91 21 2c 	lds	r27, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    175a:	0d b6       	in	r0, 0x3d	; 61
    175c:	0d 92       	st	X+, r0
    175e:	0e b6       	in	r0, 0x3e	; 62
    1760:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1762:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1766:	a0 91 20 2c 	lds	r26, 0x2C20	; 0x802c20 <pxCurrentTCB>
    176a:	b0 91 21 2c 	lds	r27, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    176e:	0d 90       	ld	r0, X+
    1770:	0d be       	out	0x3d, r0	; 61
    1772:	0d 90       	ld	r0, X+
    1774:	0e be       	out	0x3e, r0	; 62
    1776:	ef 91       	pop	r30
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	af 90       	pop	r10
    17a0:	9f 90       	pop	r9
    17a2:	8f 90       	pop	r8
    17a4:	7f 90       	pop	r7
    17a6:	6f 90       	pop	r6
    17a8:	5f 90       	pop	r5
    17aa:	4f 90       	pop	r4
    17ac:	3f 90       	pop	r3
    17ae:	2f 90       	pop	r2
    17b0:	1f 90       	pop	r1
    17b2:	0f 90       	pop	r0
    17b4:	ff 91       	pop	r31
    17b6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    17ba:	ff 91       	pop	r31
    17bc:	ff bf       	out	0x3f, r31	; 63
    17be:	ff 91       	pop	r31
	asm volatile ( "ret" );
    17c0:	08 95       	ret
	...

000017c4 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	1f 92       	push	r1
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    17d2:	80 91 de 2c 	lds	r24, 0x2CDE	; 0x802cde <intTaskSwitchPending>
    17d6:	98 2f       	mov	r25, r24
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	89 2b       	or	r24, r25
    17dc:	80 93 de 2c 	sts	0x2CDE, r24	; 0x802cde <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    17e0:	80 ea       	ldi	r24, 0xA0	; 160
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	fc 01       	movw	r30, r24
    17e6:	80 81       	ld	r24, Z
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	61 f0       	breq	.+24     	; 0x1804 <portTaskSwitchContext+0x40>
    17ec:	80 ea       	ldi	r24, 0xA0	; 160
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	fc 01       	movw	r30, r24
    17f2:	80 81       	ld	r24, Z
    17f4:	82 30       	cpi	r24, 0x02	; 2
    17f6:	31 f0       	breq	.+12     	; 0x1804 <portTaskSwitchContext+0x40>
    17f8:	80 ea       	ldi	r24, 0xA0	; 160
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	fc 01       	movw	r30, r24
    17fe:	80 81       	ld	r24, Z
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	79 f4       	brne	.+30     	; 0x1822 <portTaskSwitchContext+0x5e>
    1804:	80 91 de 2c 	lds	r24, 0x2CDE	; 0x802cde <intTaskSwitchPending>
    1808:	88 23       	and	r24, r24
    180a:	59 f0       	breq	.+22     	; 0x1822 <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    180c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_portSetInterruptMaskFromIsr>
    1810:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    1812:	10 92 de 2c 	sts	0x2CDE, r1	; 0x802cde <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    1816:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    181a:	80 ea       	ldi	r24, 0xA0	; 160
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	fc 01       	movw	r30, r24
    1820:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    1822:	00 00       	nop
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	08 95       	ret

0000182e <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    1838:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_portSetInterruptMaskFromIsr>
    183c:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    183e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    1842:	80 ea       	ldi	r24, 0xA0	; 160
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	fc 01       	movw	r30, r24
    1848:	12 83       	std	Z+2, r17	; 0x02
	}
    184a:	00 00       	nop
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	08 95       	ret

00001854 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    1854:	ff 93       	push	r31
    1856:	ff b7       	in	r31, 0x3f	; 63
    1858:	ff 93       	push	r31
    185a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    185e:	ff 93       	push	r31
    1860:	f8 7f       	andi	r31, 0xF8	; 248
    1862:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1866:	0f 92       	push	r0
    1868:	1f 92       	push	r1
    186a:	11 24       	eor	r1, r1
    186c:	2f 92       	push	r2
    186e:	3f 92       	push	r3
    1870:	4f 92       	push	r4
    1872:	5f 92       	push	r5
    1874:	6f 92       	push	r6
    1876:	7f 92       	push	r7
    1878:	8f 92       	push	r8
    187a:	9f 92       	push	r9
    187c:	af 92       	push	r10
    187e:	bf 92       	push	r11
    1880:	cf 92       	push	r12
    1882:	df 92       	push	r13
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	2f 93       	push	r18
    188e:	3f 93       	push	r19
    1890:	4f 93       	push	r20
    1892:	5f 93       	push	r21
    1894:	6f 93       	push	r22
    1896:	7f 93       	push	r23
    1898:	8f 93       	push	r24
    189a:	9f 93       	push	r25
    189c:	af 93       	push	r26
    189e:	bf 93       	push	r27
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	ef 93       	push	r30
    18a6:	a0 91 20 2c 	lds	r26, 0x2C20	; 0x802c20 <pxCurrentTCB>
    18aa:	b0 91 21 2c 	lds	r27, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    18ae:	0d b6       	in	r0, 0x3d	; 61
    18b0:	0d 92       	st	X+, r0
    18b2:	0e b6       	in	r0, 0x3e	; 62
    18b4:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    18b6:	0e 94 17 0c 	call	0x182e	; 0x182e <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <portTaskSwitchContext>
    18c0:	a0 91 20 2c 	lds	r26, 0x2C20	; 0x802c20 <pxCurrentTCB>
    18c4:	b0 91 21 2c 	lds	r27, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    18c8:	0d 90       	ld	r0, X+
    18ca:	0d be       	out	0x3d, r0	; 61
    18cc:	0d 90       	ld	r0, X+
    18ce:	0e be       	out	0x3e, r0	; 62
    18d0:	ef 91       	pop	r30
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	bf 91       	pop	r27
    18d8:	af 91       	pop	r26
    18da:	9f 91       	pop	r25
    18dc:	8f 91       	pop	r24
    18de:	7f 91       	pop	r23
    18e0:	6f 91       	pop	r22
    18e2:	5f 91       	pop	r21
    18e4:	4f 91       	pop	r20
    18e6:	3f 91       	pop	r19
    18e8:	2f 91       	pop	r18
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	bf 90       	pop	r11
    18f8:	af 90       	pop	r10
    18fa:	9f 90       	pop	r9
    18fc:	8f 90       	pop	r8
    18fe:	7f 90       	pop	r7
    1900:	6f 90       	pop	r6
    1902:	5f 90       	pop	r5
    1904:	4f 90       	pop	r4
    1906:	3f 90       	pop	r3
    1908:	2f 90       	pop	r2
    190a:	1f 90       	pop	r1
    190c:	0f 90       	pop	r0
    190e:	ff 91       	pop	r31
    1910:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1914:	ff 91       	pop	r31
    1916:	ff bf       	out	0x3f, r31	; 63
    1918:	ff 91       	pop	r31
    191a:	18 95       	reti
	...

0000191e <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	00 d0       	rcall	.+0      	; 0x1924 <prvSetupTimerInterrupt+0x6>
    1924:	1f 92       	push	r1
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	9d e7       	ldi	r25, 0x7D	; 125
    192e:	a0 e0       	ldi	r26, 0x00	; 0
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	ab 83       	std	Y+3, r26	; 0x03
    1938:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	ab 81       	ldd	r26, Y+3	; 0x03
    1940:	bc 81       	ldd	r27, Y+4	; 0x04
    1942:	68 94       	set
    1944:	15 f8       	bld	r1, 5
    1946:	b6 95       	lsr	r27
    1948:	a7 95       	ror	r26
    194a:	97 95       	ror	r25
    194c:	87 95       	ror	r24
    194e:	16 94       	lsr	r1
    1950:	d1 f7       	brne	.-12     	; 0x1946 <prvSetupTimerInterrupt+0x28>
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	ab 83       	std	Y+3, r26	; 0x03
    1958:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	ab 81       	ldd	r26, Y+3	; 0x03
    1960:	bc 81       	ldd	r27, Y+4	; 0x04
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	a1 09       	sbc	r26, r1
    1966:	b1 09       	sbc	r27, r1
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	ab 83       	std	Y+3, r26	; 0x03
    196e:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	98 e0       	ldi	r25, 0x08	; 8
    1974:	29 81       	ldd	r18, Y+1	; 0x01
    1976:	3a 81       	ldd	r19, Y+2	; 0x02
    1978:	fc 01       	movw	r30, r24
    197a:	26 a3       	std	Z+38, r18	; 0x26
    197c:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    197e:	65 e0       	ldi	r22, 0x05	; 5
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	98 e0       	ldi	r25, 0x08	; 8
    1984:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	98 e0       	ldi	r25, 0x08	; 8
    198e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    1992:	00 00       	nop
    1994:	24 96       	adiw	r28, 0x04	; 4
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	25 97       	sbiw	r28, 0x05	; 5
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	8b 83       	std	Y+3, r24	; 0x03
    19b0:	9c 83       	std	Y+4, r25	; 0x04
    19b2:	6d 83       	std	Y+5, r22	; 0x05
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19c0:	ff 93       	push	r31
    19c2:	f8 7f       	andi	r31, 0xF8	; 248
    19c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	fc 01       	movw	r30, r24
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	29 81       	ldd	r18, Y+1	; 0x01
    19d4:	3a 81       	ldd	r19, Y+2	; 0x02
    19d6:	f9 01       	movw	r30, r18
    19d8:	27 8d       	ldd	r18, Z+31	; 0x1f
    19da:	42 2f       	mov	r20, r18
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	29 81       	ldd	r18, Y+1	; 0x01
    19e0:	3a 81       	ldd	r19, Y+2	; 0x02
    19e2:	f9 01       	movw	r30, r18
    19e4:	20 a1       	ldd	r18, Z+32	; 0x20
    19e6:	22 2f       	mov	r18, r18
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	42 9f       	mul	r20, r18
    19ec:	b0 01       	movw	r22, r0
    19ee:	43 9f       	mul	r20, r19
    19f0:	70 0d       	add	r23, r0
    19f2:	52 9f       	mul	r21, r18
    19f4:	70 0d       	add	r23, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	9b 01       	movw	r18, r22
    19fa:	28 0f       	add	r18, r24
    19fc:	39 1f       	adc	r19, r25
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	fc 01       	movw	r30, r24
    1a04:	22 83       	std	Z+2, r18	; 0x02
    1a06:	33 83       	std	Z+3, r19	; 0x03
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	16 8e       	std	Z+30, r1	; 0x1e
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 81       	ld	r18, Z
    1a18:	31 81       	ldd	r19, Z+1	; 0x01
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	fc 01       	movw	r30, r24
    1a20:	24 83       	std	Z+4, r18	; 0x04
    1a22:	35 83       	std	Z+5, r19	; 0x05
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	fc 01       	movw	r30, r24
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	29 81       	ldd	r18, Y+1	; 0x01
    1a30:	3a 81       	ldd	r19, Y+2	; 0x02
    1a32:	f9 01       	movw	r30, r18
    1a34:	27 8d       	ldd	r18, Z+31	; 0x1f
    1a36:	22 2f       	mov	r18, r18
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	a9 01       	movw	r20, r18
    1a3c:	41 50       	subi	r20, 0x01	; 1
    1a3e:	51 09       	sbc	r21, r1
    1a40:	29 81       	ldd	r18, Y+1	; 0x01
    1a42:	3a 81       	ldd	r19, Y+2	; 0x02
    1a44:	f9 01       	movw	r30, r18
    1a46:	20 a1       	ldd	r18, Z+32	; 0x20
    1a48:	22 2f       	mov	r18, r18
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	42 9f       	mul	r20, r18
    1a4e:	b0 01       	movw	r22, r0
    1a50:	43 9f       	mul	r20, r19
    1a52:	70 0d       	add	r23, r0
    1a54:	52 9f       	mul	r21, r18
    1a56:	70 0d       	add	r23, r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	9b 01       	movw	r18, r22
    1a5c:	28 0f       	add	r18, r24
    1a5e:	39 1f       	adc	r19, r25
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	fc 01       	movw	r30, r24
    1a66:	26 83       	std	Z+6, r18	; 0x06
    1a68:	37 83       	std	Z+7, r19	; 0x07
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	2f ef       	ldi	r18, 0xFF	; 255
    1a70:	fc 01       	movw	r30, r24
    1a72:	21 a3       	std	Z+33, r18	; 0x21
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	2f ef       	ldi	r18, 0xFF	; 255
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	22 a3       	std	Z+34, r18	; 0x22
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	88 23       	and	r24, r24
    1a82:	81 f4       	brne	.+32     	; 0x1aa4 <xQueueGenericReset+0x104>
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	fc 01       	movw	r30, r24
    1a8a:	80 85       	ldd	r24, Z+8	; 0x08
    1a8c:	88 23       	and	r24, r24
    1a8e:	a1 f0       	breq	.+40     	; 0x1ab8 <xQueueGenericReset+0x118>
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	08 96       	adiw	r24, 0x08	; 8
    1a96:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <xTaskRemoveFromEventList>
    1a9a:	88 23       	and	r24, r24
    1a9c:	69 f0       	breq	.+26     	; 0x1ab8 <xQueueGenericReset+0x118>
    1a9e:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1aa2:	0a c0       	rjmp	.+20     	; 0x1ab8 <xQueueGenericReset+0x118>
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa8:	08 96       	adiw	r24, 0x08	; 8
    1aaa:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	43 96       	adiw	r24, 0x13	; 19
    1ab4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    1ab8:	ff 91       	pop	r31
    1aba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	25 96       	adiw	r28, 0x05	; 5
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	08 95       	ret

00001acc <xQueueGenericCreate>:
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	29 97       	sbiw	r28, 0x09	; 9
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	8f 83       	std	Y+7, r24	; 0x07
    1ae0:	68 87       	std	Y+8, r22	; 0x08
    1ae2:	49 87       	std	Y+9, r20	; 0x09
    1ae4:	88 85       	ldd	r24, Y+8	; 0x08
    1ae6:	88 23       	and	r24, r24
    1ae8:	19 f4       	brne	.+6      	; 0x1af0 <xQueueGenericCreate+0x24>
    1aea:	19 82       	std	Y+1, r1	; 0x01
    1aec:	1a 82       	std	Y+2, r1	; 0x02
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <xQueueGenericCreate+0x42>
    1af0:	8f 81       	ldd	r24, Y+7	; 0x07
    1af2:	48 2f       	mov	r20, r24
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	88 85       	ldd	r24, Y+8	; 0x08
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	42 9f       	mul	r20, r18
    1afe:	c0 01       	movw	r24, r0
    1b00:	43 9f       	mul	r20, r19
    1b02:	90 0d       	add	r25, r0
    1b04:	52 9f       	mul	r21, r18
    1b06:	90 0d       	add	r25, r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	85 96       	adiw	r24, 0x25	; 37
    1b14:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	89 2b       	or	r24, r25
    1b22:	81 f0       	breq	.+32     	; 0x1b44 <xQueueGenericCreate+0x78>
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	85 96       	adiw	r24, 0x25	; 37
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	89 01       	movw	r16, r18
    1b38:	29 85       	ldd	r18, Y+9	; 0x09
    1b3a:	ac 01       	movw	r20, r24
    1b3c:	68 85       	ldd	r22, Y+8	; 0x08
    1b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b40:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <prvInitialiseNewQueue>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	29 96       	adiw	r28, 0x09	; 9
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	08 95       	ret

00001b58 <prvInitialiseNewQueue>:
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	27 97       	sbiw	r28, 0x07	; 7
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	6a 83       	std	Y+2, r22	; 0x02
    1b6e:	4b 83       	std	Y+3, r20	; 0x03
    1b70:	5c 83       	std	Y+4, r21	; 0x04
    1b72:	2d 83       	std	Y+5, r18	; 0x05
    1b74:	0e 83       	std	Y+6, r16	; 0x06
    1b76:	1f 83       	std	Y+7, r17	; 0x07
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	88 23       	and	r24, r24
    1b7c:	41 f4       	brne	.+16     	; 0x1b8e <prvInitialiseNewQueue+0x36>
    1b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b80:	9f 81       	ldd	r25, Y+7	; 0x07
    1b82:	2e 81       	ldd	r18, Y+6	; 0x06
    1b84:	3f 81       	ldd	r19, Y+7	; 0x07
    1b86:	fc 01       	movw	r30, r24
    1b88:	20 83       	st	Z, r18
    1b8a:	31 83       	std	Z+1, r19	; 0x01
    1b8c:	07 c0       	rjmp	.+14     	; 0x1b9c <prvInitialiseNewQueue+0x44>
    1b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b90:	9f 81       	ldd	r25, Y+7	; 0x07
    1b92:	2b 81       	ldd	r18, Y+3	; 0x03
    1b94:	3c 81       	ldd	r19, Y+4	; 0x04
    1b96:	fc 01       	movw	r30, r24
    1b98:	20 83       	st	Z, r18
    1b9a:	31 83       	std	Z+1, r19	; 0x01
    1b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba0:	29 81       	ldd	r18, Y+1	; 0x01
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	27 8f       	std	Z+31, r18	; 0x1f
    1ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba8:	9f 81       	ldd	r25, Y+7	; 0x07
    1baa:	2a 81       	ldd	r18, Y+2	; 0x02
    1bac:	fc 01       	movw	r30, r24
    1bae:	20 a3       	std	Z+32, r18	; 0x20
    1bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <xQueueGenericReset>
    1bba:	8e 81       	ldd	r24, Y+6	; 0x06
    1bbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bbe:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	24 a3       	std	Z+36, r18	; 0x24
    1bc4:	00 00       	nop
    1bc6:	27 96       	adiw	r28, 0x07	; 7
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	08 95       	ret

00001bd6 <xQueueGenericSend>:
    1bd6:	0f 93       	push	r16
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	62 97       	sbiw	r28, 0x12	; 18
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	8a 87       	std	Y+10, r24	; 0x0a
    1be8:	9b 87       	std	Y+11, r25	; 0x0b
    1bea:	6c 87       	std	Y+12, r22	; 0x0c
    1bec:	7d 87       	std	Y+13, r23	; 0x0d
    1bee:	2e 87       	std	Y+14, r18	; 0x0e
    1bf0:	3f 87       	std	Y+15, r19	; 0x0f
    1bf2:	48 8b       	std	Y+16, r20	; 0x10
    1bf4:	59 8b       	std	Y+17, r21	; 0x11
    1bf6:	0a 8b       	std	Y+18, r16	; 0x12
    1bf8:	19 82       	std	Y+1, r1	; 0x01
    1bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bfc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
    1c00:	9b 83       	std	Y+3, r25	; 0x03
    1c02:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c06:	ff 93       	push	r31
    1c08:	f8 7f       	andi	r31, 0xF8	; 248
    1c0a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	9b 81       	ldd	r25, Y+3	; 0x03
    1c12:	fc 01       	movw	r30, r24
    1c14:	26 8d       	ldd	r18, Z+30	; 0x1e
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1c1e:	28 17       	cp	r18, r24
    1c20:	18 f0       	brcs	.+6      	; 0x1c28 <xQueueGenericSend+0x52>
    1c22:	8a 89       	ldd	r24, Y+18	; 0x12
    1c24:	82 30       	cpi	r24, 0x02	; 2
    1c26:	19 f5       	brne	.+70     	; 0x1c6e <xQueueGenericSend+0x98>
    1c28:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c2a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c30:	4a 89       	ldd	r20, Y+18	; 0x12
    1c32:	b9 01       	movw	r22, r18
    1c34:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <prvCopyDataToQueue>
    1c38:	8c 83       	std	Y+4, r24	; 0x04
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3e:	fc 01       	movw	r30, r24
    1c40:	83 89       	ldd	r24, Z+19	; 0x13
    1c42:	88 23       	and	r24, r24
    1c44:	51 f0       	breq	.+20     	; 0x1c5a <xQueueGenericSend+0x84>
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	43 96       	adiw	r24, 0x13	; 19
    1c4c:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <xTaskRemoveFromEventList>
    1c50:	88 23       	and	r24, r24
    1c52:	41 f0       	breq	.+16     	; 0x1c64 <xQueueGenericSend+0x8e>
    1c54:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <xQueueGenericSend+0x8e>
    1c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5c:	88 23       	and	r24, r24
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <xQueueGenericSend+0x8e>
    1c60:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1c64:	ff 91       	pop	r31
    1c66:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	6f c0       	rjmp	.+222    	; 0x1d4c <xQueueGenericSend+0x176>
    1c6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c70:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c72:	a8 89       	ldd	r26, Y+16	; 0x10
    1c74:	b9 89       	ldd	r27, Y+17	; 0x11
    1c76:	89 2b       	or	r24, r25
    1c78:	8a 2b       	or	r24, r26
    1c7a:	8b 2b       	or	r24, r27
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <xQueueGenericSend+0xb2>
    1c7e:	ff 91       	pop	r31
    1c80:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	62 c0       	rjmp	.+196    	; 0x1d4c <xQueueGenericSend+0x176>
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	88 23       	and	r24, r24
    1c8c:	31 f4       	brne	.+12     	; 0x1c9a <xQueueGenericSend+0xc4>
    1c8e:	ce 01       	movw	r24, r28
    1c90:	05 96       	adiw	r24, 0x05	; 5
    1c92:	0e 94 45 18 	call	0x308a	; 0x308a <vTaskInternalSetTimeOutState>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	ff 91       	pop	r31
    1c9c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ca0:	0e 94 34 14 	call	0x2868	; 0x2868 <vTaskSuspendAll>
    1ca4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ca8:	ff 93       	push	r31
    1caa:	f8 7f       	andi	r31, 0xF8	; 248
    1cac:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	81 a1       	ldd	r24, Z+33	; 0x21
    1cb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cba:	21 f4       	brne	.+8      	; 0x1cc4 <xQueueGenericSend+0xee>
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	11 a2       	std	Z+33, r1	; 0x21
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc8:	fc 01       	movw	r30, r24
    1cca:	82 a1       	ldd	r24, Z+34	; 0x22
    1ccc:	8f 3f       	cpi	r24, 0xFF	; 255
    1cce:	21 f4       	brne	.+8      	; 0x1cd8 <xQueueGenericSend+0x102>
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	12 a2       	std	Z+34, r1	; 0x22
    1cd8:	ff 91       	pop	r31
    1cda:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1cde:	9e 01       	movw	r18, r28
    1ce0:	22 5f       	subi	r18, 0xF2	; 242
    1ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	05 96       	adiw	r24, 0x05	; 5
    1ce8:	b9 01       	movw	r22, r18
    1cea:	0e 94 68 18 	call	0x30d0	; 0x30d0 <xTaskCheckForTimeOut>
    1cee:	88 23       	and	r24, r24
    1cf0:	31 f5       	brne	.+76     	; 0x1d3e <xQueueGenericSend+0x168>
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <prvIsQueueFull>
    1cfa:	88 23       	and	r24, r24
    1cfc:	c9 f0       	breq	.+50     	; 0x1d30 <xQueueGenericSend+0x15a>
    1cfe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d00:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d02:	a8 89       	ldd	r26, Y+16	; 0x10
    1d04:	b9 89       	ldd	r27, Y+17	; 0x11
    1d06:	2a 81       	ldd	r18, Y+2	; 0x02
    1d08:	3b 81       	ldd	r19, Y+3	; 0x03
    1d0a:	28 5f       	subi	r18, 0xF8	; 248
    1d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0e:	ac 01       	movw	r20, r24
    1d10:	bd 01       	movw	r22, r26
    1d12:	c9 01       	movw	r24, r18
    1d14:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <vTaskPlaceOnEventList>
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1d20:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
    1d24:	88 23       	and	r24, r24
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <xQueueGenericSend+0x154>
    1d28:	6c cf       	rjmp	.-296    	; 0x1c02 <xQueueGenericSend+0x2c>
    1d2a:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1d2e:	69 cf       	rjmp	.-302    	; 0x1c02 <xQueueGenericSend+0x2c>
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1d38:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
    1d3c:	62 cf       	rjmp	.-316    	; 0x1c02 <xQueueGenericSend+0x2c>
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	9b 81       	ldd	r25, Y+3	; 0x03
    1d42:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1d46:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	62 96       	adiw	r28, 0x12	; 18
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	0f 91       	pop	r16
    1d58:	08 95       	ret

00001d5a <xQueueGenericSendFromISR>:
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	2c 97       	sbiw	r28, 0x0c	; 12
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	8e 83       	std	Y+6, r24	; 0x06
    1d6a:	9f 83       	std	Y+7, r25	; 0x07
    1d6c:	68 87       	std	Y+8, r22	; 0x08
    1d6e:	79 87       	std	Y+9, r23	; 0x09
    1d70:	4a 87       	std	Y+10, r20	; 0x0a
    1d72:	5b 87       	std	Y+11, r21	; 0x0b
    1d74:	2c 87       	std	Y+12, r18	; 0x0c
    1d76:	8e 81       	ldd	r24, Y+6	; 0x06
    1d78:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7a:	8a 83       	std	Y+2, r24	; 0x02
    1d7c:	9b 83       	std	Y+3, r25	; 0x03
    1d7e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_portSetInterruptMaskFromIsr>
    1d82:	8c 83       	std	Y+4, r24	; 0x04
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	9b 81       	ldd	r25, Y+3	; 0x03
    1d88:	fc 01       	movw	r30, r24
    1d8a:	26 8d       	ldd	r18, Z+30	; 0x1e
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d90:	fc 01       	movw	r30, r24
    1d92:	87 8d       	ldd	r24, Z+31	; 0x1f
    1d94:	28 17       	cp	r18, r24
    1d96:	18 f0       	brcs	.+6      	; 0x1d9e <xQueueGenericSendFromISR+0x44>
    1d98:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	89 f5       	brne	.+98     	; 0x1e00 <xQueueGenericSendFromISR+0xa6>
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	9b 81       	ldd	r25, Y+3	; 0x03
    1da2:	fc 01       	movw	r30, r24
    1da4:	82 a1       	ldd	r24, Z+34	; 0x22
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	28 85       	ldd	r18, Y+8	; 0x08
    1daa:	39 85       	ldd	r19, Y+9	; 0x09
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	9b 81       	ldd	r25, Y+3	; 0x03
    1db0:	4c 85       	ldd	r20, Y+12	; 0x0c
    1db2:	b9 01       	movw	r22, r18
    1db4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <prvCopyDataToQueue>
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	8f 3f       	cpi	r24, 0xFF	; 255
    1dbc:	b9 f4       	brne	.+46     	; 0x1dec <xQueueGenericSendFromISR+0x92>
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	83 89       	ldd	r24, Z+19	; 0x13
    1dc6:	88 23       	and	r24, r24
    1dc8:	c1 f0       	breq	.+48     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	43 96       	adiw	r24, 0x13	; 19
    1dd0:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <xTaskRemoveFromEventList>
    1dd4:	88 23       	and	r24, r24
    1dd6:	89 f0       	breq	.+34     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1dd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ddc:	89 2b       	or	r24, r25
    1dde:	69 f0       	breq	.+26     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1de0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de4:	21 e0       	ldi	r18, 0x01	; 1
    1de6:	fc 01       	movw	r30, r24
    1de8:	20 83       	st	Z, r18
    1dea:	07 c0       	rjmp	.+14     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	8f 5f       	subi	r24, 0xFF	; 255
    1df0:	28 2f       	mov	r18, r24
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	fc 01       	movw	r30, r24
    1df8:	22 a3       	std	Z+34, r18	; 0x22
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <xQueueGenericSendFromISR+0xa8>
    1e00:	19 82       	std	Y+1, r1	; 0x01
    1e02:	80 ea       	ldi	r24, 0xA0	; 160
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	2c 81       	ldd	r18, Y+4	; 0x04
    1e08:	fc 01       	movw	r30, r24
    1e0a:	22 83       	std	Z+2, r18	; 0x02
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	2c 96       	adiw	r28, 0x0c	; 12
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	08 95       	ret

00001e1a <xQueueReceive>:
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	61 97       	sbiw	r28, 0x11	; 17
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	8a 87       	std	Y+10, r24	; 0x0a
    1e2a:	9b 87       	std	Y+11, r25	; 0x0b
    1e2c:	6c 87       	std	Y+12, r22	; 0x0c
    1e2e:	7d 87       	std	Y+13, r23	; 0x0d
    1e30:	2e 87       	std	Y+14, r18	; 0x0e
    1e32:	3f 87       	std	Y+15, r19	; 0x0f
    1e34:	48 8b       	std	Y+16, r20	; 0x10
    1e36:	59 8b       	std	Y+17, r21	; 0x11
    1e38:	19 82       	std	Y+1, r1	; 0x01
    1e3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e3e:	8a 83       	std	Y+2, r24	; 0x02
    1e40:	9b 83       	std	Y+3, r25	; 0x03
    1e42:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e46:	ff 93       	push	r31
    1e48:	f8 7f       	andi	r31, 0xF8	; 248
    1e4a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	9b 81       	ldd	r25, Y+3	; 0x03
    1e52:	fc 01       	movw	r30, r24
    1e54:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e56:	8c 83       	std	Y+4, r24	; 0x04
    1e58:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5a:	88 23       	and	r24, r24
    1e5c:	11 f1       	breq	.+68     	; 0x1ea2 <xQueueReceive+0x88>
    1e5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e60:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	b9 01       	movw	r22, r18
    1e68:	0e 94 9e 10 	call	0x213c	; 0x213c <prvCopyDataFromQueue>
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	2f ef       	ldi	r18, 0xFF	; 255
    1e70:	28 0f       	add	r18, r24
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	9b 81       	ldd	r25, Y+3	; 0x03
    1e76:	fc 01       	movw	r30, r24
    1e78:	26 8f       	std	Z+30, r18	; 0x1e
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	fc 01       	movw	r30, r24
    1e80:	80 85       	ldd	r24, Z+8	; 0x08
    1e82:	88 23       	and	r24, r24
    1e84:	49 f0       	breq	.+18     	; 0x1e98 <xQueueReceive+0x7e>
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	08 96       	adiw	r24, 0x08	; 8
    1e8c:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <xTaskRemoveFromEventList>
    1e90:	88 23       	and	r24, r24
    1e92:	11 f0       	breq	.+4      	; 0x1e98 <xQueueReceive+0x7e>
    1e94:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1e98:	ff 91       	pop	r31
    1e9a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	76 c0       	rjmp	.+236    	; 0x1f8e <xQueueReceive+0x174>
    1ea2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ea6:	a8 89       	ldd	r26, Y+16	; 0x10
    1ea8:	b9 89       	ldd	r27, Y+17	; 0x11
    1eaa:	89 2b       	or	r24, r25
    1eac:	8a 2b       	or	r24, r26
    1eae:	8b 2b       	or	r24, r27
    1eb0:	29 f4       	brne	.+10     	; 0x1ebc <xQueueReceive+0xa2>
    1eb2:	ff 91       	pop	r31
    1eb4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	69 c0       	rjmp	.+210    	; 0x1f8e <xQueueReceive+0x174>
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	88 23       	and	r24, r24
    1ec0:	31 f4       	brne	.+12     	; 0x1ece <xQueueReceive+0xb4>
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	05 96       	adiw	r24, 0x05	; 5
    1ec6:	0e 94 45 18 	call	0x308a	; 0x308a <vTaskInternalSetTimeOutState>
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	ff 91       	pop	r31
    1ed0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ed4:	0e 94 34 14 	call	0x2868	; 0x2868 <vTaskSuspendAll>
    1ed8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1edc:	ff 93       	push	r31
    1ede:	f8 7f       	andi	r31, 0xF8	; 248
    1ee0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	fc 01       	movw	r30, r24
    1eea:	81 a1       	ldd	r24, Z+33	; 0x21
    1eec:	8f 3f       	cpi	r24, 0xFF	; 255
    1eee:	21 f4       	brne	.+8      	; 0x1ef8 <xQueueReceive+0xde>
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	11 a2       	std	Z+33, r1	; 0x21
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	9b 81       	ldd	r25, Y+3	; 0x03
    1efc:	fc 01       	movw	r30, r24
    1efe:	82 a1       	ldd	r24, Z+34	; 0x22
    1f00:	8f 3f       	cpi	r24, 0xFF	; 255
    1f02:	21 f4       	brne	.+8      	; 0x1f0c <xQueueReceive+0xf2>
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	fc 01       	movw	r30, r24
    1f0a:	12 a2       	std	Z+34, r1	; 0x22
    1f0c:	ff 91       	pop	r31
    1f0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f12:	9e 01       	movw	r18, r28
    1f14:	22 5f       	subi	r18, 0xF2	; 242
    1f16:	3f 4f       	sbci	r19, 0xFF	; 255
    1f18:	ce 01       	movw	r24, r28
    1f1a:	05 96       	adiw	r24, 0x05	; 5
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <xTaskCheckForTimeOut>
    1f22:	88 23       	and	r24, r24
    1f24:	31 f5       	brne	.+76     	; 0x1f72 <xQueueReceive+0x158>
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <prvIsQueueEmpty>
    1f2e:	88 23       	and	r24, r24
    1f30:	c9 f0       	breq	.+50     	; 0x1f64 <xQueueReceive+0x14a>
    1f32:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f34:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f36:	a8 89       	ldd	r26, Y+16	; 0x10
    1f38:	b9 89       	ldd	r27, Y+17	; 0x11
    1f3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f3c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f3e:	2d 5e       	subi	r18, 0xED	; 237
    1f40:	3f 4f       	sbci	r19, 0xFF	; 255
    1f42:	ac 01       	movw	r20, r24
    1f44:	bd 01       	movw	r22, r26
    1f46:	c9 01       	movw	r24, r18
    1f48:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <vTaskPlaceOnEventList>
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f50:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1f54:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
    1f58:	88 23       	and	r24, r24
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <xQueueReceive+0x144>
    1f5c:	72 cf       	rjmp	.-284    	; 0x1e42 <xQueueReceive+0x28>
    1f5e:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1f62:	6f cf       	rjmp	.-290    	; 0x1e42 <xQueueReceive+0x28>
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1f6c:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
    1f70:	68 cf       	rjmp	.-304    	; 0x1e42 <xQueueReceive+0x28>
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1f7a:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	0e 94 53 11 	call	0x22a6	; 0x22a6 <prvIsQueueEmpty>
    1f86:	88 23       	and	r24, r24
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <xQueueReceive+0x172>
    1f8a:	5b cf       	rjmp	.-330    	; 0x1e42 <xQueueReceive+0x28>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	61 96       	adiw	r28, 0x11	; 17
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	08 95       	ret

00001f9a <uxQueueMessagesWaiting>:
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <uxQueueMessagesWaiting+0x6>
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	8a 83       	std	Y+2, r24	; 0x02
    1fa6:	9b 83       	std	Y+3, r25	; 0x03
    1fa8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fac:	ff 93       	push	r31
    1fae:	f8 7f       	andi	r31, 0xF8	; 248
    1fb0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	fc 01       	movw	r30, r24
    1fba:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	ff 91       	pop	r31
    1fc0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	23 96       	adiw	r28, 0x03	; 3
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <prvCopyDataToQueue>:
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	27 97       	sbiw	r28, 0x07	; 7
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	6d 83       	std	Y+5, r22	; 0x05
    1fe6:	7e 83       	std	Y+6, r23	; 0x06
    1fe8:	4f 83       	std	Y+7, r20	; 0x07
    1fea:	1a 82       	std	Y+2, r1	; 0x02
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	80 a1       	ldd	r24, Z+32	; 0x20
    1ffe:	88 23       	and	r24, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <prvCopyDataToQueue+0x32>
    2002:	8e c0       	rjmp	.+284    	; 0x2120 <prvCopyDataToQueue+0x14e>
    2004:	8f 81       	ldd	r24, Y+7	; 0x07
    2006:	88 23       	and	r24, r24
    2008:	d9 f5       	brne	.+118    	; 0x2080 <prvCopyDataToQueue+0xae>
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	fc 01       	movw	r30, r24
    2010:	80 a1       	ldd	r24, Z+32	; 0x20
    2012:	48 2f       	mov	r20, r24
    2014:	50 e0       	ldi	r21, 0x00	; 0
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	fc 01       	movw	r30, r24
    201c:	84 81       	ldd	r24, Z+4	; 0x04
    201e:	95 81       	ldd	r25, Z+5	; 0x05
    2020:	2d 81       	ldd	r18, Y+5	; 0x05
    2022:	3e 81       	ldd	r19, Y+6	; 0x06
    2024:	b9 01       	movw	r22, r18
    2026:	0e 94 08 32 	call	0x6410	; 0x6410 <memcpy>
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	fc 01       	movw	r30, r24
    2030:	24 81       	ldd	r18, Z+4	; 0x04
    2032:	35 81       	ldd	r19, Z+5	; 0x05
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	fc 01       	movw	r30, r24
    203a:	80 a1       	ldd	r24, Z+32	; 0x20
    203c:	88 2f       	mov	r24, r24
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	28 0f       	add	r18, r24
    2042:	39 1f       	adc	r19, r25
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	fc 01       	movw	r30, r24
    204a:	24 83       	std	Z+4, r18	; 0x04
    204c:	35 83       	std	Z+5, r19	; 0x05
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	9c 81       	ldd	r25, Y+4	; 0x04
    2052:	fc 01       	movw	r30, r24
    2054:	24 81       	ldd	r18, Z+4	; 0x04
    2056:	35 81       	ldd	r19, Z+5	; 0x05
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	fc 01       	movw	r30, r24
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	28 17       	cp	r18, r24
    2064:	39 07       	cpc	r19, r25
    2066:	08 f4       	brcc	.+2      	; 0x206a <prvCopyDataToQueue+0x98>
    2068:	5b c0       	rjmp	.+182    	; 0x2120 <prvCopyDataToQueue+0x14e>
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	fc 01       	movw	r30, r24
    2070:	20 81       	ld	r18, Z
    2072:	31 81       	ldd	r19, Z+1	; 0x01
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	fc 01       	movw	r30, r24
    207a:	24 83       	std	Z+4, r18	; 0x04
    207c:	35 83       	std	Z+5, r19	; 0x05
    207e:	50 c0       	rjmp	.+160    	; 0x2120 <prvCopyDataToQueue+0x14e>
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	fc 01       	movw	r30, r24
    2086:	80 a1       	ldd	r24, Z+32	; 0x20
    2088:	48 2f       	mov	r20, r24
    208a:	50 e0       	ldi	r21, 0x00	; 0
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	fc 01       	movw	r30, r24
    2092:	86 81       	ldd	r24, Z+6	; 0x06
    2094:	97 81       	ldd	r25, Z+7	; 0x07
    2096:	2d 81       	ldd	r18, Y+5	; 0x05
    2098:	3e 81       	ldd	r19, Y+6	; 0x06
    209a:	b9 01       	movw	r22, r18
    209c:	0e 94 08 32 	call	0x6410	; 0x6410 <memcpy>
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	fc 01       	movw	r30, r24
    20a6:	26 81       	ldd	r18, Z+6	; 0x06
    20a8:	37 81       	ldd	r19, Z+7	; 0x07
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	fc 01       	movw	r30, r24
    20b0:	80 a1       	ldd	r24, Z+32	; 0x20
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	91 95       	neg	r25
    20b8:	81 95       	neg	r24
    20ba:	91 09       	sbc	r25, r1
    20bc:	28 0f       	add	r18, r24
    20be:	39 1f       	adc	r19, r25
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	fc 01       	movw	r30, r24
    20c6:	26 83       	std	Z+6, r18	; 0x06
    20c8:	37 83       	std	Z+7, r19	; 0x07
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	fc 01       	movw	r30, r24
    20d0:	26 81       	ldd	r18, Z+6	; 0x06
    20d2:	37 81       	ldd	r19, Z+7	; 0x07
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	fc 01       	movw	r30, r24
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	28 17       	cp	r18, r24
    20e0:	39 07       	cpc	r19, r25
    20e2:	a8 f4       	brcc	.+42     	; 0x210e <prvCopyDataToQueue+0x13c>
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	fc 01       	movw	r30, r24
    20ea:	22 81       	ldd	r18, Z+2	; 0x02
    20ec:	33 81       	ldd	r19, Z+3	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	fc 01       	movw	r30, r24
    20f4:	80 a1       	ldd	r24, Z+32	; 0x20
    20f6:	88 2f       	mov	r24, r24
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	91 95       	neg	r25
    20fc:	81 95       	neg	r24
    20fe:	91 09       	sbc	r25, r1
    2100:	28 0f       	add	r18, r24
    2102:	39 1f       	adc	r19, r25
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	fc 01       	movw	r30, r24
    210a:	26 83       	std	Z+6, r18	; 0x06
    210c:	37 83       	std	Z+7, r19	; 0x07
    210e:	8f 81       	ldd	r24, Y+7	; 0x07
    2110:	82 30       	cpi	r24, 0x02	; 2
    2112:	31 f4       	brne	.+12     	; 0x2120 <prvCopyDataToQueue+0x14e>
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	88 23       	and	r24, r24
    2118:	19 f0       	breq	.+6      	; 0x2120 <prvCopyDataToQueue+0x14e>
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	81 50       	subi	r24, 0x01	; 1
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	21 e0       	ldi	r18, 0x01	; 1
    2124:	28 0f       	add	r18, r24
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	fc 01       	movw	r30, r24
    212c:	26 8f       	std	Z+30, r18	; 0x1e
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	27 96       	adiw	r28, 0x07	; 7
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	08 95       	ret

0000213c <prvCopyDataFromQueue>:
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	00 d0       	rcall	.+0      	; 0x2142 <prvCopyDataFromQueue+0x6>
    2142:	1f 92       	push	r1
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	6b 83       	std	Y+3, r22	; 0x03
    214e:	7c 83       	std	Y+4, r23	; 0x04
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	fc 01       	movw	r30, r24
    2156:	80 a1       	ldd	r24, Z+32	; 0x20
    2158:	88 23       	and	r24, r24
    215a:	c9 f1       	breq	.+114    	; 0x21ce <prvCopyDataFromQueue+0x92>
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	fc 01       	movw	r30, r24
    2162:	26 81       	ldd	r18, Z+6	; 0x06
    2164:	37 81       	ldd	r19, Z+7	; 0x07
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
    216a:	fc 01       	movw	r30, r24
    216c:	80 a1       	ldd	r24, Z+32	; 0x20
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	28 0f       	add	r18, r24
    2174:	39 1f       	adc	r19, r25
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	fc 01       	movw	r30, r24
    217c:	26 83       	std	Z+6, r18	; 0x06
    217e:	37 83       	std	Z+7, r19	; 0x07
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	fc 01       	movw	r30, r24
    2186:	26 81       	ldd	r18, Z+6	; 0x06
    2188:	37 81       	ldd	r19, Z+7	; 0x07
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	fc 01       	movw	r30, r24
    2190:	82 81       	ldd	r24, Z+2	; 0x02
    2192:	93 81       	ldd	r25, Z+3	; 0x03
    2194:	28 17       	cp	r18, r24
    2196:	39 07       	cpc	r19, r25
    2198:	50 f0       	brcs	.+20     	; 0x21ae <prvCopyDataFromQueue+0x72>
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	fc 01       	movw	r30, r24
    21a0:	20 81       	ld	r18, Z
    21a2:	31 81       	ldd	r19, Z+1	; 0x01
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	fc 01       	movw	r30, r24
    21aa:	26 83       	std	Z+6, r18	; 0x06
    21ac:	37 83       	std	Z+7, r19	; 0x07
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	9a 81       	ldd	r25, Y+2	; 0x02
    21b2:	fc 01       	movw	r30, r24
    21b4:	80 a1       	ldd	r24, Z+32	; 0x20
    21b6:	48 2f       	mov	r20, r24
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	fc 01       	movw	r30, r24
    21c0:	26 81       	ldd	r18, Z+6	; 0x06
    21c2:	37 81       	ldd	r19, Z+7	; 0x07
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	b9 01       	movw	r22, r18
    21ca:	0e 94 08 32 	call	0x6410	; 0x6410 <memcpy>
    21ce:	00 00       	nop
    21d0:	24 96       	adiw	r28, 0x04	; 4
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	08 95       	ret

000021dc <prvUnlockQueue>:
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <prvUnlockQueue+0x6>
    21e2:	1f 92       	push	r1
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	8b 83       	std	Y+3, r24	; 0x03
    21ea:	9c 83       	std	Y+4, r25	; 0x04
    21ec:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    21f0:	ff 93       	push	r31
    21f2:	f8 7f       	andi	r31, 0xF8	; 248
    21f4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	fc 01       	movw	r30, r24
    21fe:	82 a1       	ldd	r24, Z+34	; 0x22
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	12 c0       	rjmp	.+36     	; 0x2228 <prvUnlockQueue+0x4c>
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	fc 01       	movw	r30, r24
    220a:	83 89       	ldd	r24, Z+19	; 0x13
    220c:	88 23       	and	r24, r24
    220e:	81 f0       	breq	.+32     	; 0x2230 <prvUnlockQueue+0x54>
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	43 96       	adiw	r24, 0x13	; 19
    2216:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <xTaskRemoveFromEventList>
    221a:	88 23       	and	r24, r24
    221c:	11 f0       	breq	.+4      	; 0x2222 <prvUnlockQueue+0x46>
    221e:	0e 94 10 19 	call	0x3220	; 0x3220 <vTaskMissedYield>
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	81 50       	subi	r24, 0x01	; 1
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	18 16       	cp	r1, r24
    222c:	5c f3       	brlt	.-42     	; 0x2204 <prvUnlockQueue+0x28>
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <prvUnlockQueue+0x56>
    2230:	00 00       	nop
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	2f ef       	ldi	r18, 0xFF	; 255
    2238:	fc 01       	movw	r30, r24
    223a:	22 a3       	std	Z+34, r18	; 0x22
    223c:	ff 91       	pop	r31
    223e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2242:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2246:	ff 93       	push	r31
    2248:	f8 7f       	andi	r31, 0xF8	; 248
    224a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	fc 01       	movw	r30, r24
    2254:	81 a1       	ldd	r24, Z+33	; 0x21
    2256:	8a 83       	std	Y+2, r24	; 0x02
    2258:	12 c0       	rjmp	.+36     	; 0x227e <prvUnlockQueue+0xa2>
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	fc 01       	movw	r30, r24
    2260:	80 85       	ldd	r24, Z+8	; 0x08
    2262:	88 23       	and	r24, r24
    2264:	81 f0       	breq	.+32     	; 0x2286 <prvUnlockQueue+0xaa>
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	08 96       	adiw	r24, 0x08	; 8
    226c:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <xTaskRemoveFromEventList>
    2270:	88 23       	and	r24, r24
    2272:	11 f0       	breq	.+4      	; 0x2278 <prvUnlockQueue+0x9c>
    2274:	0e 94 10 19 	call	0x3220	; 0x3220 <vTaskMissedYield>
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	81 50       	subi	r24, 0x01	; 1
    227c:	8a 83       	std	Y+2, r24	; 0x02
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	18 16       	cp	r1, r24
    2282:	5c f3       	brlt	.-42     	; 0x225a <prvUnlockQueue+0x7e>
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <prvUnlockQueue+0xac>
    2286:	00 00       	nop
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	2f ef       	ldi	r18, 0xFF	; 255
    228e:	fc 01       	movw	r30, r24
    2290:	21 a3       	std	Z+33, r18	; 0x21
    2292:	ff 91       	pop	r31
    2294:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2298:	00 00       	nop
    229a:	24 96       	adiw	r28, 0x04	; 4
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <prvIsQueueEmpty>:
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <prvIsQueueEmpty+0x6>
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	8a 83       	std	Y+2, r24	; 0x02
    22b2:	9b 83       	std	Y+3, r25	; 0x03
    22b4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22b8:	ff 93       	push	r31
    22ba:	f8 7f       	andi	r31, 0xF8	; 248
    22bc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	9b 81       	ldd	r25, Y+3	; 0x03
    22c4:	fc 01       	movw	r30, r24
    22c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    22c8:	88 23       	and	r24, r24
    22ca:	19 f4       	brne	.+6      	; 0x22d2 <prvIsQueueEmpty+0x2c>
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	01 c0       	rjmp	.+2      	; 0x22d4 <prvIsQueueEmpty+0x2e>
    22d2:	19 82       	std	Y+1, r1	; 0x01
    22d4:	ff 91       	pop	r31
    22d6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	23 96       	adiw	r28, 0x03	; 3
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	08 95       	ret

000022e8 <prvIsQueueFull>:
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <prvIsQueueFull+0x6>
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	8a 83       	std	Y+2, r24	; 0x02
    22f4:	9b 83       	std	Y+3, r25	; 0x03
    22f6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22fa:	ff 93       	push	r31
    22fc:	f8 7f       	andi	r31, 0xF8	; 248
    22fe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	fc 01       	movw	r30, r24
    2308:	26 8d       	ldd	r18, Z+30	; 0x1e
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	9b 81       	ldd	r25, Y+3	; 0x03
    230e:	fc 01       	movw	r30, r24
    2310:	87 8d       	ldd	r24, Z+31	; 0x1f
    2312:	28 17       	cp	r18, r24
    2314:	19 f4       	brne	.+6      	; 0x231c <prvIsQueueFull+0x34>
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	01 c0       	rjmp	.+2      	; 0x231e <prvIsQueueFull+0x36>
    231c:	19 82       	std	Y+1, r1	; 0x01
    231e:	ff 91       	pop	r31
    2320:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	23 96       	adiw	r28, 0x03	; 3
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	08 95       	ret

00002332 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	29 97       	sbiw	r28, 0x09	; 9
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	8b 83       	std	Y+3, r24	; 0x03
    2342:	9c 83       	std	Y+4, r25	; 0x04
    2344:	4d 83       	std	Y+5, r20	; 0x05
    2346:	5e 83       	std	Y+6, r21	; 0x06
    2348:	6f 83       	std	Y+7, r22	; 0x07
    234a:	78 87       	std	Y+8, r23	; 0x08
    234c:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2356:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    235a:	ff 93       	push	r31
    235c:	f8 7f       	andi	r31, 0xF8	; 248
    235e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	fc 01       	movw	r30, r24
    2368:	81 a1       	ldd	r24, Z+33	; 0x21
    236a:	8f 3f       	cpi	r24, 0xFF	; 255
    236c:	21 f4       	brne	.+8      	; 0x2376 <vQueueWaitForMessageRestricted+0x44>
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	fc 01       	movw	r30, r24
    2374:	11 a2       	std	Z+33, r1	; 0x21
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	fc 01       	movw	r30, r24
    237c:	82 a1       	ldd	r24, Z+34	; 0x22
    237e:	8f 3f       	cpi	r24, 0xFF	; 255
    2380:	21 f4       	brne	.+8      	; 0x238a <vQueueWaitForMessageRestricted+0x58>
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	fc 01       	movw	r30, r24
    2388:	12 a2       	std	Z+34, r1	; 0x22
    238a:	ff 91       	pop	r31
    238c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
    2394:	fc 01       	movw	r30, r24
    2396:	86 8d       	ldd	r24, Z+30	; 0x1e
    2398:	88 23       	and	r24, r24
    239a:	71 f4       	brne	.+28     	; 0x23b8 <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	fc 01       	movw	r30, r24
    23a2:	73 96       	adiw	r30, 0x13	; 19
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	af 81       	ldd	r26, Y+7	; 0x07
    23aa:	b8 85       	ldd	r27, Y+8	; 0x08
    23ac:	29 85       	ldd	r18, Y+9	; 0x09
    23ae:	ac 01       	movw	r20, r24
    23b0:	bd 01       	movw	r22, r26
    23b2:	cf 01       	movw	r24, r30
    23b4:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
	}
    23c0:	00 00       	nop
    23c2:	29 96       	adiw	r28, 0x09	; 9
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	08 95       	ret

000023ce <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    23ce:	8f 92       	push	r8
    23d0:	9f 92       	push	r9
    23d2:	af 92       	push	r10
    23d4:	bf 92       	push	r11
    23d6:	cf 92       	push	r12
    23d8:	df 92       	push	r13
    23da:	ef 92       	push	r14
    23dc:	ff 92       	push	r15
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	60 97       	sbiw	r28, 0x10	; 16
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	8e 83       	std	Y+6, r24	; 0x06
    23f2:	9f 83       	std	Y+7, r25	; 0x07
    23f4:	68 87       	std	Y+8, r22	; 0x08
    23f6:	79 87       	std	Y+9, r23	; 0x09
    23f8:	4a 87       	std	Y+10, r20	; 0x0a
    23fa:	5b 87       	std	Y+11, r21	; 0x0b
    23fc:	2c 87       	std	Y+12, r18	; 0x0c
    23fe:	3d 87       	std	Y+13, r19	; 0x0d
    2400:	0e 87       	std	Y+14, r16	; 0x0e
    2402:	ef 86       	std	Y+15, r14	; 0x0f
    2404:	f8 8a       	std	Y+16, r15	; 0x10
    2406:	8a 85       	ldd	r24, Y+10	; 0x0a
    2408:	9b 85       	ldd	r25, Y+11	; 0x0b
    240a:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
    240e:	8c 83       	std	Y+4, r24	; 0x04
    2410:	9d 83       	std	Y+5, r25	; 0x05
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	9d 81       	ldd	r25, Y+5	; 0x05
    2416:	89 2b       	or	r24, r25
    2418:	b9 f0       	breq	.+46     	; 0x2448 <xTaskCreate+0x7a>
    241a:	8c e2       	ldi	r24, 0x2C	; 44
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	89 2b       	or	r24, r25
    242c:	41 f0       	breq	.+16     	; 0x243e <xTaskCreate+0x70>
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	9a 81       	ldd	r25, Y+2	; 0x02
    2432:	2c 81       	ldd	r18, Y+4	; 0x04
    2434:	3d 81       	ldd	r19, Y+5	; 0x05
    2436:	fc 01       	movw	r30, r24
    2438:	23 8f       	std	Z+27, r18	; 0x1b
    243a:	34 8f       	std	Z+28, r19	; 0x1c
    243c:	07 c0       	rjmp	.+14     	; 0x244c <xTaskCreate+0x7e>
    243e:	8c 81       	ldd	r24, Y+4	; 0x04
    2440:	9d 81       	ldd	r25, Y+5	; 0x05
    2442:	0e 94 db 07 	call	0xfb6	; 0xfb6 <vPortFree>
    2446:	02 c0       	rjmp	.+4      	; 0x244c <xTaskCreate+0x7e>
    2448:	19 82       	std	Y+1, r1	; 0x01
    244a:	1a 82       	std	Y+2, r1	; 0x02
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	89 2b       	or	r24, r25
    2452:	09 f1       	breq	.+66     	; 0x2496 <xTaskCreate+0xc8>
    2454:	8a 85       	ldd	r24, Y+10	; 0x0a
    2456:	9b 85       	ldd	r25, Y+11	; 0x0b
    2458:	cc 01       	movw	r24, r24
    245a:	a0 e0       	ldi	r26, 0x00	; 0
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	09 81       	ldd	r16, Y+1	; 0x01
    2460:	1a 81       	ldd	r17, Y+2	; 0x02
    2462:	4f 85       	ldd	r20, Y+15	; 0x0f
    2464:	58 89       	ldd	r21, Y+16	; 0x10
    2466:	2c 85       	ldd	r18, Y+12	; 0x0c
    2468:	3d 85       	ldd	r19, Y+13	; 0x0d
    246a:	68 85       	ldd	r22, Y+8	; 0x08
    246c:	79 85       	ldd	r23, Y+9	; 0x09
    246e:	ee 81       	ldd	r30, Y+6	; 0x06
    2470:	ff 81       	ldd	r31, Y+7	; 0x07
    2472:	81 2c       	mov	r8, r1
    2474:	91 2c       	mov	r9, r1
    2476:	58 01       	movw	r10, r16
    2478:	6a 01       	movw	r12, r20
    247a:	ee 84       	ldd	r14, Y+14	; 0x0e
    247c:	89 01       	movw	r16, r18
    247e:	9c 01       	movw	r18, r24
    2480:	ad 01       	movw	r20, r26
    2482:	cf 01       	movw	r24, r30
    2484:	0e 94 5e 12 	call	0x24bc	; 0x24bc <prvInitialiseNewTask>
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	0e 94 34 13 	call	0x2668	; 0x2668 <prvAddNewTaskToReadyList>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	8b 83       	std	Y+3, r24	; 0x03
    2494:	02 c0       	rjmp	.+4      	; 0x249a <xTaskCreate+0xcc>
    2496:	8f ef       	ldi	r24, 0xFF	; 255
    2498:	8b 83       	std	Y+3, r24	; 0x03
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	60 96       	adiw	r28, 0x10	; 16
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	cf 90       	pop	r12
    24b2:	bf 90       	pop	r11
    24b4:	af 90       	pop	r10
    24b6:	9f 90       	pop	r9
    24b8:	8f 90       	pop	r8
    24ba:	08 95       	ret

000024bc <prvInitialiseNewTask>:
    24bc:	8f 92       	push	r8
    24be:	9f 92       	push	r9
    24c0:	af 92       	push	r10
    24c2:	bf 92       	push	r11
    24c4:	cf 92       	push	r12
    24c6:	df 92       	push	r13
    24c8:	ef 92       	push	r14
    24ca:	ff 92       	push	r15
    24cc:	0f 93       	push	r16
    24ce:	1f 93       	push	r17
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	64 97       	sbiw	r28, 0x14	; 20
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	8c 83       	std	Y+4, r24	; 0x04
    24e0:	9d 83       	std	Y+5, r25	; 0x05
    24e2:	6e 83       	std	Y+6, r22	; 0x06
    24e4:	7f 83       	std	Y+7, r23	; 0x07
    24e6:	28 87       	std	Y+8, r18	; 0x08
    24e8:	39 87       	std	Y+9, r19	; 0x09
    24ea:	4a 87       	std	Y+10, r20	; 0x0a
    24ec:	5b 87       	std	Y+11, r21	; 0x0b
    24ee:	0c 87       	std	Y+12, r16	; 0x0c
    24f0:	1d 87       	std	Y+13, r17	; 0x0d
    24f2:	ee 86       	std	Y+14, r14	; 0x0e
    24f4:	cf 86       	std	Y+15, r12	; 0x0f
    24f6:	d8 8a       	std	Y+16, r13	; 0x10
    24f8:	a9 8a       	std	Y+17, r10	; 0x11
    24fa:	ba 8a       	std	Y+18, r11	; 0x12
    24fc:	8b 8a       	std	Y+19, r8	; 0x13
    24fe:	9c 8a       	std	Y+20, r9	; 0x14
    2500:	28 85       	ldd	r18, Y+8	; 0x08
    2502:	39 85       	ldd	r19, Y+9	; 0x09
    2504:	89 89       	ldd	r24, Y+17	; 0x11
    2506:	9a 89       	ldd	r25, Y+18	; 0x12
    2508:	fc 01       	movw	r30, r24
    250a:	83 8d       	ldd	r24, Z+27	; 0x1b
    250c:	94 8d       	ldd	r25, Z+28	; 0x1c
    250e:	a9 01       	movw	r20, r18
    2510:	65 ea       	ldi	r22, 0xA5	; 165
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	0e 94 11 32 	call	0x6422	; 0x6422 <memset>
    2518:	89 89       	ldd	r24, Y+17	; 0x11
    251a:	9a 89       	ldd	r25, Y+18	; 0x12
    251c:	fc 01       	movw	r30, r24
    251e:	23 8d       	ldd	r18, Z+27	; 0x1b
    2520:	34 8d       	ldd	r19, Z+28	; 0x1c
    2522:	88 85       	ldd	r24, Y+8	; 0x08
    2524:	99 85       	ldd	r25, Y+9	; 0x09
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	82 0f       	add	r24, r18
    252a:	93 1f       	adc	r25, r19
    252c:	8a 83       	std	Y+2, r24	; 0x02
    252e:	9b 83       	std	Y+3, r25	; 0x03
    2530:	19 82       	std	Y+1, r1	; 0x01
    2532:	21 c0       	rjmp	.+66     	; 0x2576 <prvInitialiseNewTask+0xba>
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	88 2f       	mov	r24, r24
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	29 81       	ldd	r18, Y+1	; 0x01
    253c:	22 2f       	mov	r18, r18
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4e 81       	ldd	r20, Y+6	; 0x06
    2542:	5f 81       	ldd	r21, Y+7	; 0x07
    2544:	24 0f       	add	r18, r20
    2546:	35 1f       	adc	r19, r21
    2548:	f9 01       	movw	r30, r18
    254a:	40 81       	ld	r20, Z
    254c:	29 89       	ldd	r18, Y+17	; 0x11
    254e:	3a 89       	ldd	r19, Y+18	; 0x12
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	4d 96       	adiw	r24, 0x1d	; 29
    2556:	fc 01       	movw	r30, r24
    2558:	40 83       	st	Z, r20
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	2e 81       	ldd	r18, Y+6	; 0x06
    2562:	3f 81       	ldd	r19, Y+7	; 0x07
    2564:	82 0f       	add	r24, r18
    2566:	93 1f       	adc	r25, r19
    2568:	fc 01       	movw	r30, r24
    256a:	80 81       	ld	r24, Z
    256c:	88 23       	and	r24, r24
    256e:	39 f0       	breq	.+14     	; 0x257e <prvInitialiseNewTask+0xc2>
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	88 30       	cpi	r24, 0x08	; 8
    257a:	e0 f2       	brcs	.-72     	; 0x2534 <prvInitialiseNewTask+0x78>
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <prvInitialiseNewTask+0xc4>
    257e:	00 00       	nop
    2580:	89 89       	ldd	r24, Y+17	; 0x11
    2582:	9a 89       	ldd	r25, Y+18	; 0x12
    2584:	fc 01       	movw	r30, r24
    2586:	14 a2       	std	Z+36, r1	; 0x24
    2588:	8e 85       	ldd	r24, Y+14	; 0x0e
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	10 f0       	brcs	.+4      	; 0x2592 <prvInitialiseNewTask+0xd6>
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	8e 87       	std	Y+14, r24	; 0x0e
    2592:	89 89       	ldd	r24, Y+17	; 0x11
    2594:	9a 89       	ldd	r25, Y+18	; 0x12
    2596:	2e 85       	ldd	r18, Y+14	; 0x0e
    2598:	fc 01       	movw	r30, r24
    259a:	22 8f       	std	Z+26, r18	; 0x1a
    259c:	89 89       	ldd	r24, Y+17	; 0x11
    259e:	9a 89       	ldd	r25, Y+18	; 0x12
    25a0:	02 96       	adiw	r24, 0x02	; 2
    25a2:	0e 94 23 08 	call	0x1046	; 0x1046 <vListInitialiseItem>
    25a6:	89 89       	ldd	r24, Y+17	; 0x11
    25a8:	9a 89       	ldd	r25, Y+18	; 0x12
    25aa:	0e 96       	adiw	r24, 0x0e	; 14
    25ac:	0e 94 23 08 	call	0x1046	; 0x1046 <vListInitialiseItem>
    25b0:	89 89       	ldd	r24, Y+17	; 0x11
    25b2:	9a 89       	ldd	r25, Y+18	; 0x12
    25b4:	29 89       	ldd	r18, Y+17	; 0x11
    25b6:	3a 89       	ldd	r19, Y+18	; 0x12
    25b8:	fc 01       	movw	r30, r24
    25ba:	22 87       	std	Z+10, r18	; 0x0a
    25bc:	33 87       	std	Z+11, r19	; 0x0b
    25be:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	a0 e0       	ldi	r26, 0x00	; 0
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	24 e0       	ldi	r18, 0x04	; 4
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	79 01       	movw	r14, r18
    25d2:	8a 01       	movw	r16, r20
    25d4:	e8 1a       	sub	r14, r24
    25d6:	f9 0a       	sbc	r15, r25
    25d8:	0a 0b       	sbc	r16, r26
    25da:	1b 0b       	sbc	r17, r27
    25dc:	d8 01       	movw	r26, r16
    25de:	c7 01       	movw	r24, r14
    25e0:	29 89       	ldd	r18, Y+17	; 0x11
    25e2:	3a 89       	ldd	r19, Y+18	; 0x12
    25e4:	f9 01       	movw	r30, r18
    25e6:	86 87       	std	Z+14, r24	; 0x0e
    25e8:	97 87       	std	Z+15, r25	; 0x0f
    25ea:	a0 8b       	std	Z+16, r26	; 0x10
    25ec:	b1 8b       	std	Z+17, r27	; 0x11
    25ee:	89 89       	ldd	r24, Y+17	; 0x11
    25f0:	9a 89       	ldd	r25, Y+18	; 0x12
    25f2:	29 89       	ldd	r18, Y+17	; 0x11
    25f4:	3a 89       	ldd	r19, Y+18	; 0x12
    25f6:	fc 01       	movw	r30, r24
    25f8:	26 8b       	std	Z+22, r18	; 0x16
    25fa:	37 8b       	std	Z+23, r19	; 0x17
    25fc:	89 89       	ldd	r24, Y+17	; 0x11
    25fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2600:	fc 01       	movw	r30, r24
    2602:	17 a2       	std	Z+39, r1	; 0x27
    2604:	10 a6       	std	Z+40, r1	; 0x28
    2606:	11 a6       	std	Z+41, r1	; 0x29
    2608:	12 a6       	std	Z+42, r1	; 0x2a
    260a:	89 89       	ldd	r24, Y+17	; 0x11
    260c:	9a 89       	ldd	r25, Y+18	; 0x12
    260e:	fc 01       	movw	r30, r24
    2610:	13 a6       	std	Z+43, r1	; 0x2b
    2612:	4c 85       	ldd	r20, Y+12	; 0x0c
    2614:	5d 85       	ldd	r21, Y+13	; 0x0d
    2616:	2c 81       	ldd	r18, Y+4	; 0x04
    2618:	3d 81       	ldd	r19, Y+5	; 0x05
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	9b 81       	ldd	r25, Y+3	; 0x03
    261e:	b9 01       	movw	r22, r18
    2620:	0e 94 6f 09 	call	0x12de	; 0x12de <pxPortInitialiseStack>
    2624:	9c 01       	movw	r18, r24
    2626:	89 89       	ldd	r24, Y+17	; 0x11
    2628:	9a 89       	ldd	r25, Y+18	; 0x12
    262a:	fc 01       	movw	r30, r24
    262c:	20 83       	st	Z, r18
    262e:	31 83       	std	Z+1, r19	; 0x01
    2630:	8f 85       	ldd	r24, Y+15	; 0x0f
    2632:	98 89       	ldd	r25, Y+16	; 0x10
    2634:	89 2b       	or	r24, r25
    2636:	39 f0       	breq	.+14     	; 0x2646 <prvInitialiseNewTask+0x18a>
    2638:	8f 85       	ldd	r24, Y+15	; 0x0f
    263a:	98 89       	ldd	r25, Y+16	; 0x10
    263c:	29 89       	ldd	r18, Y+17	; 0x11
    263e:	3a 89       	ldd	r19, Y+18	; 0x12
    2640:	fc 01       	movw	r30, r24
    2642:	20 83       	st	Z, r18
    2644:	31 83       	std	Z+1, r19	; 0x01
    2646:	00 00       	nop
    2648:	64 96       	adiw	r28, 0x14	; 20
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	1f 91       	pop	r17
    2654:	0f 91       	pop	r16
    2656:	ff 90       	pop	r15
    2658:	ef 90       	pop	r14
    265a:	df 90       	pop	r13
    265c:	cf 90       	pop	r12
    265e:	bf 90       	pop	r11
    2660:	af 90       	pop	r10
    2662:	9f 90       	pop	r9
    2664:	8f 90       	pop	r8
    2666:	08 95       	ret

00002668 <prvAddNewTaskToReadyList>:
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	1f 92       	push	r1
    266e:	1f 92       	push	r1
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    267c:	ff 93       	push	r31
    267e:	f8 7f       	andi	r31, 0xF8	; 248
    2680:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2684:	80 91 7e 2c 	lds	r24, 0x2C7E	; 0x802c7e <uxCurrentNumberOfTasks>
    2688:	8f 5f       	subi	r24, 0xFF	; 255
    268a:	80 93 7e 2c 	sts	0x2C7E, r24	; 0x802c7e <uxCurrentNumberOfTasks>
    268e:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2692:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2696:	89 2b       	or	r24, r25
    2698:	69 f4       	brne	.+26     	; 0x26b4 <prvAddNewTaskToReadyList+0x4c>
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <pxCurrentTCB>
    26a2:	90 93 21 2c 	sts	0x2C21, r25	; 0x802c21 <pxCurrentTCB+0x1>
    26a6:	80 91 7e 2c 	lds	r24, 0x2C7E	; 0x802c7e <uxCurrentNumberOfTasks>
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	c9 f4       	brne	.+50     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26ae:	0e 94 2e 19 	call	0x325c	; 0x325c <prvInitialiseTaskLists>
    26b2:	16 c0       	rjmp	.+44     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26b4:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <xSchedulerRunning>
    26b8:	88 23       	and	r24, r24
    26ba:	91 f4       	brne	.+36     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26bc:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    26c0:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    26c4:	fc 01       	movw	r30, r24
    26c6:	22 8d       	ldd	r18, Z+26	; 0x1a
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	fc 01       	movw	r30, r24
    26ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    26d0:	82 17       	cp	r24, r18
    26d2:	30 f0       	brcs	.+12     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <pxCurrentTCB>
    26dc:	90 93 21 2c 	sts	0x2C21, r25	; 0x802c21 <pxCurrentTCB+0x1>
    26e0:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <uxTaskNumber>
    26e4:	8f 5f       	subi	r24, 0xFF	; 255
    26e6:	80 93 88 2c 	sts	0x2C88, r24	; 0x802c88 <uxTaskNumber>
    26ea:	20 91 88 2c 	lds	r18, 0x2C88	; 0x802c88 <uxTaskNumber>
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	fc 01       	movw	r30, r24
    26f4:	25 a3       	std	Z+37, r18	; 0x25
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	9a 81       	ldd	r25, Y+2	; 0x02
    26fa:	fc 01       	movw	r30, r24
    26fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    26fe:	80 91 83 2c 	lds	r24, 0x2C83	; 0x802c83 <uxTopReadyPriority>
    2702:	89 17       	cp	r24, r25
    2704:	30 f4       	brcc	.+12     	; 0x2712 <prvAddNewTaskToReadyList+0xaa>
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	fc 01       	movw	r30, r24
    270c:	82 8d       	ldd	r24, Z+26	; 0x1a
    270e:	80 93 83 2c 	sts	0x2C83, r24	; 0x802c83 <uxTopReadyPriority>
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	9a 81       	ldd	r25, Y+2	; 0x02
    2716:	ac 01       	movw	r20, r24
    2718:	4e 5f       	subi	r20, 0xFE	; 254
    271a:	5f 4f       	sbci	r21, 0xFF	; 255
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	fc 01       	movw	r30, r24
    2722:	82 8d       	ldd	r24, Z+26	; 0x1a
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	6b e0       	ldi	r22, 0x0B	; 11
    272a:	62 9f       	mul	r22, r18
    272c:	c0 01       	movw	r24, r0
    272e:	63 9f       	mul	r22, r19
    2730:	90 0d       	add	r25, r0
    2732:	11 24       	eor	r1, r1
    2734:	8e 5d       	subi	r24, 0xDE	; 222
    2736:	93 4d       	sbci	r25, 0xD3	; 211
    2738:	ba 01       	movw	r22, r20
    273a:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    273e:	ff 91       	pop	r31
    2740:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2744:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <xSchedulerRunning>
    2748:	88 23       	and	r24, r24
    274a:	71 f0       	breq	.+28     	; 0x2768 <prvAddNewTaskToReadyList+0x100>
    274c:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2750:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2754:	fc 01       	movw	r30, r24
    2756:	22 8d       	ldd	r18, Z+26	; 0x1a
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	fc 01       	movw	r30, r24
    275e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2760:	28 17       	cp	r18, r24
    2762:	10 f4       	brcc	.+4      	; 0x2768 <prvAddNewTaskToReadyList+0x100>
    2764:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    2768:	00 00       	nop
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	08 95       	ret

00002774 <vTaskDelay>:
    2774:	cf 93       	push	r28
    2776:	df 93       	push	r29
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	25 97       	sbiw	r28, 0x05	; 5
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	6a 83       	std	Y+2, r22	; 0x02
    2784:	7b 83       	std	Y+3, r23	; 0x03
    2786:	8c 83       	std	Y+4, r24	; 0x04
    2788:	9d 83       	std	Y+5, r25	; 0x05
    278a:	19 82       	std	Y+1, r1	; 0x01
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	9b 81       	ldd	r25, Y+3	; 0x03
    2790:	ac 81       	ldd	r26, Y+4	; 0x04
    2792:	bd 81       	ldd	r27, Y+5	; 0x05
    2794:	89 2b       	or	r24, r25
    2796:	8a 2b       	or	r24, r26
    2798:	8b 2b       	or	r24, r27
    279a:	71 f0       	breq	.+28     	; 0x27b8 <vTaskDelay+0x44>
    279c:	0e 94 34 14 	call	0x2868	; 0x2868 <vTaskSuspendAll>
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	9b 81       	ldd	r25, Y+3	; 0x03
    27a4:	ac 81       	ldd	r26, Y+4	; 0x04
    27a6:	bd 81       	ldd	r27, Y+5	; 0x05
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 0b 1a 	call	0x3416	; 0x3416 <prvAddCurrentTaskToDelayedList>
    27b2:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	88 23       	and	r24, r24
    27bc:	11 f4       	brne	.+4      	; 0x27c2 <vTaskDelay+0x4e>
    27be:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    27c2:	00 00       	nop
    27c4:	25 96       	adiw	r28, 0x05	; 5
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	08 95       	ret

000027d0 <vTaskStartScheduler>:
    27d0:	ef 92       	push	r14
    27d2:	ff 92       	push	r15
    27d4:	0f 93       	push	r16
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	1f 92       	push	r1
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	0f 2e       	mov	r0, r31
    27e2:	fd e8       	ldi	r31, 0x8D	; 141
    27e4:	ef 2e       	mov	r14, r31
    27e6:	fc e2       	ldi	r31, 0x2C	; 44
    27e8:	ff 2e       	mov	r15, r31
    27ea:	f0 2d       	mov	r31, r0
    27ec:	00 e0       	ldi	r16, 0x00	; 0
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	48 ec       	ldi	r20, 0xC8	; 200
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	60 e0       	ldi	r22, 0x00	; 0
    27f8:	70 e2       	ldi	r23, 0x20	; 32
    27fa:	8b e1       	ldi	r24, 0x1B	; 27
    27fc:	99 e1       	ldi	r25, 0x19	; 25
    27fe:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	19 f4       	brne	.+6      	; 0x2810 <vTaskStartScheduler+0x40>
    280a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <xTimerCreateTimerTask>
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	09 f5       	brne	.+66     	; 0x2858 <vTaskStartScheduler+0x88>
    2816:	80 ea       	ldi	r24, 0xA0	; 160
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	20 ea       	ldi	r18, 0xA0	; 160
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	f9 01       	movw	r30, r18
    2820:	22 81       	ldd	r18, Z+2	; 0x02
    2822:	28 7f       	andi	r18, 0xF8	; 248
    2824:	fc 01       	movw	r30, r24
    2826:	22 83       	std	Z+2, r18	; 0x02
    2828:	8f ef       	ldi	r24, 0xFF	; 255
    282a:	9f ef       	ldi	r25, 0xFF	; 255
    282c:	dc 01       	movw	r26, r24
    282e:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <xNextTaskUnblockTime>
    2832:	90 93 8a 2c 	sts	0x2C8A, r25	; 0x802c8a <xNextTaskUnblockTime+0x1>
    2836:	a0 93 8b 2c 	sts	0x2C8B, r26	; 0x802c8b <xNextTaskUnblockTime+0x2>
    283a:	b0 93 8c 2c 	sts	0x2C8C, r27	; 0x802c8c <xNextTaskUnblockTime+0x3>
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	80 93 84 2c 	sts	0x2C84, r24	; 0x802c84 <xSchedulerRunning>
    2844:	10 92 7f 2c 	sts	0x2C7F, r1	; 0x802c7f <xTickCount>
    2848:	10 92 80 2c 	sts	0x2C80, r1	; 0x802c80 <xTickCount+0x1>
    284c:	10 92 81 2c 	sts	0x2C81, r1	; 0x802c81 <xTickCount+0x2>
    2850:	10 92 82 2c 	sts	0x2C82, r1	; 0x802c82 <xTickCount+0x3>
    2854:	0e 94 48 0b 	call	0x1690	; 0x1690 <xPortStartScheduler>
    2858:	00 00       	nop
    285a:	0f 90       	pop	r0
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	0f 91       	pop	r16
    2862:	ff 90       	pop	r15
    2864:	ef 90       	pop	r14
    2866:	08 95       	ret

00002868 <vTaskSuspendAll>:
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	80 91 8f 2c 	lds	r24, 0x2C8F	; 0x802c8f <uxSchedulerSuspended>
    2874:	8f 5f       	subi	r24, 0xFF	; 255
    2876:	80 93 8f 2c 	sts	0x2C8F, r24	; 0x802c8f <uxSchedulerSuspended>
    287a:	00 00       	nop
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	08 95       	ret

00002882 <xTaskResumeAll>:
    2882:	cf 93       	push	r28
    2884:	df 93       	push	r29
    2886:	00 d0       	rcall	.+0      	; 0x2888 <xTaskResumeAll+0x6>
    2888:	1f 92       	push	r1
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	19 82       	std	Y+1, r1	; 0x01
    2890:	1a 82       	std	Y+2, r1	; 0x02
    2892:	1b 82       	std	Y+3, r1	; 0x03
    2894:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2898:	ff 93       	push	r31
    289a:	f8 7f       	andi	r31, 0xF8	; 248
    289c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    28a0:	80 91 8f 2c 	lds	r24, 0x2C8F	; 0x802c8f <uxSchedulerSuspended>
    28a4:	81 50       	subi	r24, 0x01	; 1
    28a6:	80 93 8f 2c 	sts	0x2C8F, r24	; 0x802c8f <uxSchedulerSuspended>
    28aa:	80 91 8f 2c 	lds	r24, 0x2C8F	; 0x802c8f <uxSchedulerSuspended>
    28ae:	88 23       	and	r24, r24
    28b0:	09 f0       	breq	.+2      	; 0x28b4 <xTaskResumeAll+0x32>
    28b2:	74 c0       	rjmp	.+232    	; 0x299c <xTaskResumeAll+0x11a>
    28b4:	80 91 7e 2c 	lds	r24, 0x2C7E	; 0x802c7e <uxCurrentNumberOfTasks>
    28b8:	88 23       	and	r24, r24
    28ba:	09 f4       	brne	.+2      	; 0x28be <xTaskResumeAll+0x3c>
    28bc:	6f c0       	rjmp	.+222    	; 0x299c <xTaskResumeAll+0x11a>
    28be:	46 c0       	rjmp	.+140    	; 0x294c <xTaskResumeAll+0xca>
    28c0:	80 91 6f 2c 	lds	r24, 0x2C6F	; 0x802c6f <xPendingReadyList+0x7>
    28c4:	90 91 70 2c 	lds	r25, 0x2C70	; 0x802c70 <xPendingReadyList+0x8>
    28c8:	fc 01       	movw	r30, r24
    28ca:	80 85       	ldd	r24, Z+8	; 0x08
    28cc:	91 85       	ldd	r25, Z+9	; 0x09
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	9a 83       	std	Y+2, r25	; 0x02
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	9a 81       	ldd	r25, Y+2	; 0x02
    28d6:	0e 96       	adiw	r24, 0x0e	; 14
    28d8:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	02 96       	adiw	r24, 0x02	; 2
    28e2:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ea:	fc 01       	movw	r30, r24
    28ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    28ee:	80 91 83 2c 	lds	r24, 0x2C83	; 0x802c83 <uxTopReadyPriority>
    28f2:	89 17       	cp	r24, r25
    28f4:	30 f4       	brcc	.+12     	; 0x2902 <xTaskResumeAll+0x80>
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	9a 81       	ldd	r25, Y+2	; 0x02
    28fa:	fc 01       	movw	r30, r24
    28fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    28fe:	80 93 83 2c 	sts	0x2C83, r24	; 0x802c83 <uxTopReadyPriority>
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	9a 81       	ldd	r25, Y+2	; 0x02
    2906:	ac 01       	movw	r20, r24
    2908:	4e 5f       	subi	r20, 0xFE	; 254
    290a:	5f 4f       	sbci	r21, 0xFF	; 255
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	9a 81       	ldd	r25, Y+2	; 0x02
    2910:	fc 01       	movw	r30, r24
    2912:	82 8d       	ldd	r24, Z+26	; 0x1a
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	6b e0       	ldi	r22, 0x0B	; 11
    291a:	62 9f       	mul	r22, r18
    291c:	c0 01       	movw	r24, r0
    291e:	63 9f       	mul	r22, r19
    2920:	90 0d       	add	r25, r0
    2922:	11 24       	eor	r1, r1
    2924:	8e 5d       	subi	r24, 0xDE	; 222
    2926:	93 4d       	sbci	r25, 0xD3	; 211
    2928:	ba 01       	movw	r22, r20
    292a:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	9a 81       	ldd	r25, Y+2	; 0x02
    2932:	fc 01       	movw	r30, r24
    2934:	22 8d       	ldd	r18, Z+26	; 0x1a
    2936:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    293a:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    293e:	fc 01       	movw	r30, r24
    2940:	82 8d       	ldd	r24, Z+26	; 0x1a
    2942:	28 17       	cp	r18, r24
    2944:	18 f0       	brcs	.+6      	; 0x294c <xTaskResumeAll+0xca>
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	80 93 86 2c 	sts	0x2C86, r24	; 0x802c86 <xYieldPending>
    294c:	80 91 68 2c 	lds	r24, 0x2C68	; 0x802c68 <xPendingReadyList>
    2950:	88 23       	and	r24, r24
    2952:	09 f0       	breq	.+2      	; 0x2956 <xTaskResumeAll+0xd4>
    2954:	b5 cf       	rjmp	.-150    	; 0x28c0 <xTaskResumeAll+0x3e>
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	89 2b       	or	r24, r25
    295c:	11 f0       	breq	.+4      	; 0x2962 <xTaskResumeAll+0xe0>
    295e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <prvResetNextTaskUnblockTime>
    2962:	80 91 85 2c 	lds	r24, 0x2C85	; 0x802c85 <uxPendedTicks>
    2966:	8c 83       	std	Y+4, r24	; 0x04
    2968:	8c 81       	ldd	r24, Y+4	; 0x04
    296a:	88 23       	and	r24, r24
    296c:	79 f0       	breq	.+30     	; 0x298c <xTaskResumeAll+0x10a>
    296e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskIncrementTick>
    2972:	88 23       	and	r24, r24
    2974:	19 f0       	breq	.+6      	; 0x297c <xTaskResumeAll+0xfa>
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	80 93 86 2c 	sts	0x2C86, r24	; 0x802c86 <xYieldPending>
    297c:	8c 81       	ldd	r24, Y+4	; 0x04
    297e:	81 50       	subi	r24, 0x01	; 1
    2980:	8c 83       	std	Y+4, r24	; 0x04
    2982:	8c 81       	ldd	r24, Y+4	; 0x04
    2984:	88 23       	and	r24, r24
    2986:	99 f7       	brne	.-26     	; 0x296e <xTaskResumeAll+0xec>
    2988:	10 92 85 2c 	sts	0x2C85, r1	; 0x802c85 <uxPendedTicks>
    298c:	80 91 86 2c 	lds	r24, 0x2C86	; 0x802c86 <xYieldPending>
    2990:	88 23       	and	r24, r24
    2992:	21 f0       	breq	.+8      	; 0x299c <xTaskResumeAll+0x11a>
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	8b 83       	std	Y+3, r24	; 0x03
    2998:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    299c:	ff 91       	pop	r31
    299e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	24 96       	adiw	r28, 0x04	; 4
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	08 95       	ret

000029b0 <xTaskGetTickCount>:
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <xTaskGetTickCount+0x6>
    29b6:	1f 92       	push	r1
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    29c0:	ff 93       	push	r31
    29c2:	f8 7f       	andi	r31, 0xF8	; 248
    29c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    29c8:	80 91 7f 2c 	lds	r24, 0x2C7F	; 0x802c7f <xTickCount>
    29cc:	90 91 80 2c 	lds	r25, 0x2C80	; 0x802c80 <xTickCount+0x1>
    29d0:	a0 91 81 2c 	lds	r26, 0x2C81	; 0x802c81 <xTickCount+0x2>
    29d4:	b0 91 82 2c 	lds	r27, 0x2C82	; 0x802c82 <xTickCount+0x3>
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	9a 83       	std	Y+2, r25	; 0x02
    29dc:	ab 83       	std	Y+3, r26	; 0x03
    29de:	bc 83       	std	Y+4, r27	; 0x04
    29e0:	ff 91       	pop	r31
    29e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ea:	ab 81       	ldd	r26, Y+3	; 0x03
    29ec:	bc 81       	ldd	r27, Y+4	; 0x04
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	24 96       	adiw	r28, 0x04	; 4
    29f4:	cd bf       	out	0x3d, r28	; 61
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	df 91       	pop	r29
    29fa:	cf 91       	pop	r28
    29fc:	08 95       	ret

000029fe <xTaskIncrementTick>:
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	2d 97       	sbiw	r28, 0x0d	; 13
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	19 82       	std	Y+1, r1	; 0x01
    2a0e:	80 91 8f 2c 	lds	r24, 0x2C8F	; 0x802c8f <uxSchedulerSuspended>
    2a12:	88 23       	and	r24, r24
    2a14:	09 f0       	breq	.+2      	; 0x2a18 <xTaskIncrementTick+0x1a>
    2a16:	f1 c0       	rjmp	.+482    	; 0x2bfa <xTaskIncrementTick+0x1fc>
    2a18:	80 91 7f 2c 	lds	r24, 0x2C7F	; 0x802c7f <xTickCount>
    2a1c:	90 91 80 2c 	lds	r25, 0x2C80	; 0x802c80 <xTickCount+0x1>
    2a20:	a0 91 81 2c 	lds	r26, 0x2C81	; 0x802c81 <xTickCount+0x2>
    2a24:	b0 91 82 2c 	lds	r27, 0x2C82	; 0x802c82 <xTickCount+0x3>
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	a1 1d       	adc	r26, r1
    2a2c:	b1 1d       	adc	r27, r1
    2a2e:	8a 83       	std	Y+2, r24	; 0x02
    2a30:	9b 83       	std	Y+3, r25	; 0x03
    2a32:	ac 83       	std	Y+4, r26	; 0x04
    2a34:	bd 83       	std	Y+5, r27	; 0x05
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3a:	ac 81       	ldd	r26, Y+4	; 0x04
    2a3c:	bd 81       	ldd	r27, Y+5	; 0x05
    2a3e:	80 93 7f 2c 	sts	0x2C7F, r24	; 0x802c7f <xTickCount>
    2a42:	90 93 80 2c 	sts	0x2C80, r25	; 0x802c80 <xTickCount+0x1>
    2a46:	a0 93 81 2c 	sts	0x2C81, r26	; 0x802c81 <xTickCount+0x2>
    2a4a:	b0 93 82 2c 	sts	0x2C82, r27	; 0x802c82 <xTickCount+0x3>
    2a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a50:	9b 81       	ldd	r25, Y+3	; 0x03
    2a52:	ac 81       	ldd	r26, Y+4	; 0x04
    2a54:	bd 81       	ldd	r27, Y+5	; 0x05
    2a56:	89 2b       	or	r24, r25
    2a58:	8a 2b       	or	r24, r26
    2a5a:	8b 2b       	or	r24, r27
    2a5c:	d9 f4       	brne	.+54     	; 0x2a94 <xTaskIncrementTick+0x96>
    2a5e:	80 91 64 2c 	lds	r24, 0x2C64	; 0x802c64 <pxDelayedTaskList>
    2a62:	90 91 65 2c 	lds	r25, 0x2C65	; 0x802c65 <pxDelayedTaskList+0x1>
    2a66:	8e 83       	std	Y+6, r24	; 0x06
    2a68:	9f 83       	std	Y+7, r25	; 0x07
    2a6a:	80 91 66 2c 	lds	r24, 0x2C66	; 0x802c66 <pxOverflowDelayedTaskList>
    2a6e:	90 91 67 2c 	lds	r25, 0x2C67	; 0x802c67 <pxOverflowDelayedTaskList+0x1>
    2a72:	80 93 64 2c 	sts	0x2C64, r24	; 0x802c64 <pxDelayedTaskList>
    2a76:	90 93 65 2c 	sts	0x2C65, r25	; 0x802c65 <pxDelayedTaskList+0x1>
    2a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a7c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a7e:	80 93 66 2c 	sts	0x2C66, r24	; 0x802c66 <pxOverflowDelayedTaskList>
    2a82:	90 93 67 2c 	sts	0x2C67, r25	; 0x802c67 <pxOverflowDelayedTaskList+0x1>
    2a86:	80 91 87 2c 	lds	r24, 0x2C87	; 0x802c87 <xNumOfOverflows>
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	80 93 87 2c 	sts	0x2C87, r24	; 0x802c87 <xNumOfOverflows>
    2a90:	0e 94 71 19 	call	0x32e2	; 0x32e2 <prvResetNextTaskUnblockTime>
    2a94:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <xNextTaskUnblockTime>
    2a98:	90 91 8a 2c 	lds	r25, 0x2C8A	; 0x802c8a <xNextTaskUnblockTime+0x1>
    2a9c:	a0 91 8b 2c 	lds	r26, 0x2C8B	; 0x802c8b <xNextTaskUnblockTime+0x2>
    2aa0:	b0 91 8c 2c 	lds	r27, 0x2C8C	; 0x802c8c <xNextTaskUnblockTime+0x3>
    2aa4:	2a 81       	ldd	r18, Y+2	; 0x02
    2aa6:	3b 81       	ldd	r19, Y+3	; 0x03
    2aa8:	4c 81       	ldd	r20, Y+4	; 0x04
    2aaa:	5d 81       	ldd	r21, Y+5	; 0x05
    2aac:	28 17       	cp	r18, r24
    2aae:	39 07       	cpc	r19, r25
    2ab0:	4a 07       	cpc	r20, r26
    2ab2:	5b 07       	cpc	r21, r27
    2ab4:	08 f4       	brcc	.+2      	; 0x2ab8 <xTaskIncrementTick+0xba>
    2ab6:	8a c0       	rjmp	.+276    	; 0x2bcc <xTaskIncrementTick+0x1ce>
    2ab8:	80 91 64 2c 	lds	r24, 0x2C64	; 0x802c64 <pxDelayedTaskList>
    2abc:	90 91 65 2c 	lds	r25, 0x2C65	; 0x802c65 <pxDelayedTaskList+0x1>
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	80 81       	ld	r24, Z
    2ac4:	88 23       	and	r24, r24
    2ac6:	61 f4       	brne	.+24     	; 0x2ae0 <xTaskIncrementTick+0xe2>
    2ac8:	8f ef       	ldi	r24, 0xFF	; 255
    2aca:	9f ef       	ldi	r25, 0xFF	; 255
    2acc:	dc 01       	movw	r26, r24
    2ace:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <xNextTaskUnblockTime>
    2ad2:	90 93 8a 2c 	sts	0x2C8A, r25	; 0x802c8a <xNextTaskUnblockTime+0x1>
    2ad6:	a0 93 8b 2c 	sts	0x2C8B, r26	; 0x802c8b <xNextTaskUnblockTime+0x2>
    2ada:	b0 93 8c 2c 	sts	0x2C8C, r27	; 0x802c8c <xNextTaskUnblockTime+0x3>
    2ade:	76 c0       	rjmp	.+236    	; 0x2bcc <xTaskIncrementTick+0x1ce>
    2ae0:	80 91 64 2c 	lds	r24, 0x2C64	; 0x802c64 <pxDelayedTaskList>
    2ae4:	90 91 65 2c 	lds	r25, 0x2C65	; 0x802c65 <pxDelayedTaskList+0x1>
    2ae8:	fc 01       	movw	r30, r24
    2aea:	87 81       	ldd	r24, Z+7	; 0x07
    2aec:	90 85       	ldd	r25, Z+8	; 0x08
    2aee:	fc 01       	movw	r30, r24
    2af0:	80 85       	ldd	r24, Z+8	; 0x08
    2af2:	91 85       	ldd	r25, Z+9	; 0x09
    2af4:	88 87       	std	Y+8, r24	; 0x08
    2af6:	99 87       	std	Y+9, r25	; 0x09
    2af8:	88 85       	ldd	r24, Y+8	; 0x08
    2afa:	99 85       	ldd	r25, Y+9	; 0x09
    2afc:	fc 01       	movw	r30, r24
    2afe:	82 81       	ldd	r24, Z+2	; 0x02
    2b00:	93 81       	ldd	r25, Z+3	; 0x03
    2b02:	a4 81       	ldd	r26, Z+4	; 0x04
    2b04:	b5 81       	ldd	r27, Z+5	; 0x05
    2b06:	8a 87       	std	Y+10, r24	; 0x0a
    2b08:	9b 87       	std	Y+11, r25	; 0x0b
    2b0a:	ac 87       	std	Y+12, r26	; 0x0c
    2b0c:	bd 87       	std	Y+13, r27	; 0x0d
    2b0e:	2a 81       	ldd	r18, Y+2	; 0x02
    2b10:	3b 81       	ldd	r19, Y+3	; 0x03
    2b12:	4c 81       	ldd	r20, Y+4	; 0x04
    2b14:	5d 81       	ldd	r21, Y+5	; 0x05
    2b16:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b18:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b1a:	ac 85       	ldd	r26, Y+12	; 0x0c
    2b1c:	bd 85       	ldd	r27, Y+13	; 0x0d
    2b1e:	28 17       	cp	r18, r24
    2b20:	39 07       	cpc	r19, r25
    2b22:	4a 07       	cpc	r20, r26
    2b24:	5b 07       	cpc	r21, r27
    2b26:	68 f4       	brcc	.+26     	; 0x2b42 <xTaskIncrementTick+0x144>
    2b28:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b2c:	ac 85       	ldd	r26, Y+12	; 0x0c
    2b2e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2b30:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <xNextTaskUnblockTime>
    2b34:	90 93 8a 2c 	sts	0x2C8A, r25	; 0x802c8a <xNextTaskUnblockTime+0x1>
    2b38:	a0 93 8b 2c 	sts	0x2C8B, r26	; 0x802c8b <xNextTaskUnblockTime+0x2>
    2b3c:	b0 93 8c 2c 	sts	0x2C8C, r27	; 0x802c8c <xNextTaskUnblockTime+0x3>
    2b40:	45 c0       	rjmp	.+138    	; 0x2bcc <xTaskIncrementTick+0x1ce>
    2b42:	88 85       	ldd	r24, Y+8	; 0x08
    2b44:	99 85       	ldd	r25, Y+9	; 0x09
    2b46:	02 96       	adiw	r24, 0x02	; 2
    2b48:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2b4c:	88 85       	ldd	r24, Y+8	; 0x08
    2b4e:	99 85       	ldd	r25, Y+9	; 0x09
    2b50:	fc 01       	movw	r30, r24
    2b52:	80 8d       	ldd	r24, Z+24	; 0x18
    2b54:	91 8d       	ldd	r25, Z+25	; 0x19
    2b56:	89 2b       	or	r24, r25
    2b58:	29 f0       	breq	.+10     	; 0x2b64 <xTaskIncrementTick+0x166>
    2b5a:	88 85       	ldd	r24, Y+8	; 0x08
    2b5c:	99 85       	ldd	r25, Y+9	; 0x09
    2b5e:	0e 96       	adiw	r24, 0x0e	; 14
    2b60:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2b64:	88 85       	ldd	r24, Y+8	; 0x08
    2b66:	99 85       	ldd	r25, Y+9	; 0x09
    2b68:	fc 01       	movw	r30, r24
    2b6a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b6c:	80 91 83 2c 	lds	r24, 0x2C83	; 0x802c83 <uxTopReadyPriority>
    2b70:	89 17       	cp	r24, r25
    2b72:	30 f4       	brcc	.+12     	; 0x2b80 <xTaskIncrementTick+0x182>
    2b74:	88 85       	ldd	r24, Y+8	; 0x08
    2b76:	99 85       	ldd	r25, Y+9	; 0x09
    2b78:	fc 01       	movw	r30, r24
    2b7a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b7c:	80 93 83 2c 	sts	0x2C83, r24	; 0x802c83 <uxTopReadyPriority>
    2b80:	88 85       	ldd	r24, Y+8	; 0x08
    2b82:	99 85       	ldd	r25, Y+9	; 0x09
    2b84:	ac 01       	movw	r20, r24
    2b86:	4e 5f       	subi	r20, 0xFE	; 254
    2b88:	5f 4f       	sbci	r21, 0xFF	; 255
    2b8a:	88 85       	ldd	r24, Y+8	; 0x08
    2b8c:	99 85       	ldd	r25, Y+9	; 0x09
    2b8e:	fc 01       	movw	r30, r24
    2b90:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b92:	28 2f       	mov	r18, r24
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	6b e0       	ldi	r22, 0x0B	; 11
    2b98:	62 9f       	mul	r22, r18
    2b9a:	c0 01       	movw	r24, r0
    2b9c:	63 9f       	mul	r22, r19
    2b9e:	90 0d       	add	r25, r0
    2ba0:	11 24       	eor	r1, r1
    2ba2:	8e 5d       	subi	r24, 0xDE	; 222
    2ba4:	93 4d       	sbci	r25, 0xD3	; 211
    2ba6:	ba 01       	movw	r22, r20
    2ba8:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    2bac:	88 85       	ldd	r24, Y+8	; 0x08
    2bae:	99 85       	ldd	r25, Y+9	; 0x09
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	22 8d       	ldd	r18, Z+26	; 0x1a
    2bb4:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2bb8:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bc0:	28 17       	cp	r18, r24
    2bc2:	08 f4       	brcc	.+2      	; 0x2bc6 <xTaskIncrementTick+0x1c8>
    2bc4:	79 cf       	rjmp	.-270    	; 0x2ab8 <xTaskIncrementTick+0xba>
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	76 cf       	rjmp	.-276    	; 0x2ab8 <xTaskIncrementTick+0xba>
    2bcc:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2bd0:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bd8:	28 2f       	mov	r18, r24
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	4b e0       	ldi	r20, 0x0B	; 11
    2bde:	42 9f       	mul	r20, r18
    2be0:	c0 01       	movw	r24, r0
    2be2:	43 9f       	mul	r20, r19
    2be4:	90 0d       	add	r25, r0
    2be6:	11 24       	eor	r1, r1
    2be8:	8e 5d       	subi	r24, 0xDE	; 222
    2bea:	93 4d       	sbci	r25, 0xD3	; 211
    2bec:	fc 01       	movw	r30, r24
    2bee:	80 81       	ld	r24, Z
    2bf0:	82 30       	cpi	r24, 0x02	; 2
    2bf2:	40 f0       	brcs	.+16     	; 0x2c04 <xTaskIncrementTick+0x206>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	89 83       	std	Y+1, r24	; 0x01
    2bf8:	05 c0       	rjmp	.+10     	; 0x2c04 <xTaskIncrementTick+0x206>
    2bfa:	80 91 85 2c 	lds	r24, 0x2C85	; 0x802c85 <uxPendedTicks>
    2bfe:	8f 5f       	subi	r24, 0xFF	; 255
    2c00:	80 93 85 2c 	sts	0x2C85, r24	; 0x802c85 <uxPendedTicks>
    2c04:	80 91 86 2c 	lds	r24, 0x2C86	; 0x802c86 <xYieldPending>
    2c08:	88 23       	and	r24, r24
    2c0a:	11 f0       	breq	.+4      	; 0x2c10 <xTaskIncrementTick+0x212>
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	2d 96       	adiw	r28, 0x0d	; 13
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	df 91       	pop	r29
    2c1a:	cf 91       	pop	r28
    2c1c:	08 95       	ret

00002c1e <vTaskSwitchContext>:
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	29 97       	sbiw	r28, 0x09	; 9
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	80 91 8f 2c 	lds	r24, 0x2C8F	; 0x802c8f <uxSchedulerSuspended>
    2c30:	88 23       	and	r24, r24
    2c32:	21 f0       	breq	.+8      	; 0x2c3c <vTaskSwitchContext+0x1e>
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	80 93 86 2c 	sts	0x2C86, r24	; 0x802c86 <xYieldPending>
    2c3a:	ba c0       	rjmp	.+372    	; 0x2db0 <vTaskSwitchContext+0x192>
    2c3c:	10 92 86 2c 	sts	0x2C86, r1	; 0x802c86 <xYieldPending>
    2c40:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2c44:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2c48:	fc 01       	movw	r30, r24
    2c4a:	83 8d       	ldd	r24, Z+27	; 0x1b
    2c4c:	94 8d       	ldd	r25, Z+28	; 0x1c
    2c4e:	8a 83       	std	Y+2, r24	; 0x02
    2c50:	9b 83       	std	Y+3, r25	; 0x03
    2c52:	85 ea       	ldi	r24, 0xA5	; 165
    2c54:	95 ea       	ldi	r25, 0xA5	; 165
    2c56:	dc 01       	movw	r26, r24
    2c58:	8c 83       	std	Y+4, r24	; 0x04
    2c5a:	9d 83       	std	Y+5, r25	; 0x05
    2c5c:	ae 83       	std	Y+6, r26	; 0x06
    2c5e:	bf 83       	std	Y+7, r27	; 0x07
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	9b 81       	ldd	r25, Y+3	; 0x03
    2c64:	fc 01       	movw	r30, r24
    2c66:	20 81       	ld	r18, Z
    2c68:	31 81       	ldd	r19, Z+1	; 0x01
    2c6a:	42 81       	ldd	r20, Z+2	; 0x02
    2c6c:	53 81       	ldd	r21, Z+3	; 0x03
    2c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c70:	9d 81       	ldd	r25, Y+5	; 0x05
    2c72:	ae 81       	ldd	r26, Y+6	; 0x06
    2c74:	bf 81       	ldd	r27, Y+7	; 0x07
    2c76:	28 17       	cp	r18, r24
    2c78:	39 07       	cpc	r19, r25
    2c7a:	4a 07       	cpc	r20, r26
    2c7c:	5b 07       	cpc	r21, r27
    2c7e:	99 f5       	brne	.+102    	; 0x2ce6 <vTaskSwitchContext+0xc8>
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	9b 81       	ldd	r25, Y+3	; 0x03
    2c84:	04 96       	adiw	r24, 0x04	; 4
    2c86:	fc 01       	movw	r30, r24
    2c88:	20 81       	ld	r18, Z
    2c8a:	31 81       	ldd	r19, Z+1	; 0x01
    2c8c:	42 81       	ldd	r20, Z+2	; 0x02
    2c8e:	53 81       	ldd	r21, Z+3	; 0x03
    2c90:	8c 81       	ldd	r24, Y+4	; 0x04
    2c92:	9d 81       	ldd	r25, Y+5	; 0x05
    2c94:	ae 81       	ldd	r26, Y+6	; 0x06
    2c96:	bf 81       	ldd	r27, Y+7	; 0x07
    2c98:	28 17       	cp	r18, r24
    2c9a:	39 07       	cpc	r19, r25
    2c9c:	4a 07       	cpc	r20, r26
    2c9e:	5b 07       	cpc	r21, r27
    2ca0:	11 f5       	brne	.+68     	; 0x2ce6 <vTaskSwitchContext+0xc8>
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	08 96       	adiw	r24, 0x08	; 8
    2ca8:	fc 01       	movw	r30, r24
    2caa:	20 81       	ld	r18, Z
    2cac:	31 81       	ldd	r19, Z+1	; 0x01
    2cae:	42 81       	ldd	r20, Z+2	; 0x02
    2cb0:	53 81       	ldd	r21, Z+3	; 0x03
    2cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb6:	ae 81       	ldd	r26, Y+6	; 0x06
    2cb8:	bf 81       	ldd	r27, Y+7	; 0x07
    2cba:	28 17       	cp	r18, r24
    2cbc:	39 07       	cpc	r19, r25
    2cbe:	4a 07       	cpc	r20, r26
    2cc0:	5b 07       	cpc	r21, r27
    2cc2:	89 f4       	brne	.+34     	; 0x2ce6 <vTaskSwitchContext+0xc8>
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc8:	0c 96       	adiw	r24, 0x0c	; 12
    2cca:	fc 01       	movw	r30, r24
    2ccc:	20 81       	ld	r18, Z
    2cce:	31 81       	ldd	r19, Z+1	; 0x01
    2cd0:	42 81       	ldd	r20, Z+2	; 0x02
    2cd2:	53 81       	ldd	r21, Z+3	; 0x03
    2cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd8:	ae 81       	ldd	r26, Y+6	; 0x06
    2cda:	bf 81       	ldd	r27, Y+7	; 0x07
    2cdc:	28 17       	cp	r18, r24
    2cde:	39 07       	cpc	r19, r25
    2ce0:	4a 07       	cpc	r20, r26
    2ce2:	5b 07       	cpc	r21, r27
    2ce4:	71 f0       	breq	.+28     	; 0x2d02 <vTaskSwitchContext+0xe4>
    2ce6:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2cea:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2cee:	9c 01       	movw	r18, r24
    2cf0:	23 5e       	subi	r18, 0xE3	; 227
    2cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf4:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2cf8:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2cfc:	b9 01       	movw	r22, r18
    2cfe:	0e 94 10 04 	call	0x820	; 0x820 <vApplicationStackOverflowHook>
    2d02:	80 91 83 2c 	lds	r24, 0x2C83	; 0x802c83 <uxTopReadyPriority>
    2d06:	89 83       	std	Y+1, r24	; 0x01
    2d08:	03 c0       	rjmp	.+6      	; 0x2d10 <vTaskSwitchContext+0xf2>
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	81 50       	subi	r24, 0x01	; 1
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	28 2f       	mov	r18, r24
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	4b e0       	ldi	r20, 0x0B	; 11
    2d18:	42 9f       	mul	r20, r18
    2d1a:	c0 01       	movw	r24, r0
    2d1c:	43 9f       	mul	r20, r19
    2d1e:	90 0d       	add	r25, r0
    2d20:	11 24       	eor	r1, r1
    2d22:	8e 5d       	subi	r24, 0xDE	; 222
    2d24:	93 4d       	sbci	r25, 0xD3	; 211
    2d26:	fc 01       	movw	r30, r24
    2d28:	80 81       	ld	r24, Z
    2d2a:	88 23       	and	r24, r24
    2d2c:	71 f3       	breq	.-36     	; 0x2d0a <vTaskSwitchContext+0xec>
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	4b e0       	ldi	r20, 0x0B	; 11
    2d36:	42 9f       	mul	r20, r18
    2d38:	c0 01       	movw	r24, r0
    2d3a:	43 9f       	mul	r20, r19
    2d3c:	90 0d       	add	r25, r0
    2d3e:	11 24       	eor	r1, r1
    2d40:	8e 5d       	subi	r24, 0xDE	; 222
    2d42:	93 4d       	sbci	r25, 0xD3	; 211
    2d44:	88 87       	std	Y+8, r24	; 0x08
    2d46:	99 87       	std	Y+9, r25	; 0x09
    2d48:	88 85       	ldd	r24, Y+8	; 0x08
    2d4a:	99 85       	ldd	r25, Y+9	; 0x09
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	81 81       	ldd	r24, Z+1	; 0x01
    2d50:	92 81       	ldd	r25, Z+2	; 0x02
    2d52:	fc 01       	movw	r30, r24
    2d54:	24 81       	ldd	r18, Z+4	; 0x04
    2d56:	35 81       	ldd	r19, Z+5	; 0x05
    2d58:	88 85       	ldd	r24, Y+8	; 0x08
    2d5a:	99 85       	ldd	r25, Y+9	; 0x09
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	21 83       	std	Z+1, r18	; 0x01
    2d60:	32 83       	std	Z+2, r19	; 0x02
    2d62:	88 85       	ldd	r24, Y+8	; 0x08
    2d64:	99 85       	ldd	r25, Y+9	; 0x09
    2d66:	fc 01       	movw	r30, r24
    2d68:	21 81       	ldd	r18, Z+1	; 0x01
    2d6a:	32 81       	ldd	r19, Z+2	; 0x02
    2d6c:	88 85       	ldd	r24, Y+8	; 0x08
    2d6e:	99 85       	ldd	r25, Y+9	; 0x09
    2d70:	03 96       	adiw	r24, 0x03	; 3
    2d72:	28 17       	cp	r18, r24
    2d74:	39 07       	cpc	r19, r25
    2d76:	69 f4       	brne	.+26     	; 0x2d92 <vTaskSwitchContext+0x174>
    2d78:	88 85       	ldd	r24, Y+8	; 0x08
    2d7a:	99 85       	ldd	r25, Y+9	; 0x09
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	81 81       	ldd	r24, Z+1	; 0x01
    2d80:	92 81       	ldd	r25, Z+2	; 0x02
    2d82:	fc 01       	movw	r30, r24
    2d84:	24 81       	ldd	r18, Z+4	; 0x04
    2d86:	35 81       	ldd	r19, Z+5	; 0x05
    2d88:	88 85       	ldd	r24, Y+8	; 0x08
    2d8a:	99 85       	ldd	r25, Y+9	; 0x09
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	21 83       	std	Z+1, r18	; 0x01
    2d90:	32 83       	std	Z+2, r19	; 0x02
    2d92:	88 85       	ldd	r24, Y+8	; 0x08
    2d94:	99 85       	ldd	r25, Y+9	; 0x09
    2d96:	fc 01       	movw	r30, r24
    2d98:	81 81       	ldd	r24, Z+1	; 0x01
    2d9a:	92 81       	ldd	r25, Z+2	; 0x02
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	80 85       	ldd	r24, Z+8	; 0x08
    2da0:	91 85       	ldd	r25, Z+9	; 0x09
    2da2:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <pxCurrentTCB>
    2da6:	90 93 21 2c 	sts	0x2C21, r25	; 0x802c21 <pxCurrentTCB+0x1>
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	80 93 83 2c 	sts	0x2C83, r24	; 0x802c83 <uxTopReadyPriority>
    2db0:	00 00       	nop
    2db2:	29 96       	adiw	r28, 0x09	; 9
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	df 91       	pop	r29
    2dba:	cf 91       	pop	r28
    2dbc:	08 95       	ret

00002dbe <vTaskPlaceOnEventList>:
    2dbe:	cf 93       	push	r28
    2dc0:	df 93       	push	r29
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <vTaskPlaceOnEventList+0x6>
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <vTaskPlaceOnEventList+0x8>
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	9a 83       	std	Y+2, r25	; 0x02
    2dce:	4b 83       	std	Y+3, r20	; 0x03
    2dd0:	5c 83       	std	Y+4, r21	; 0x04
    2dd2:	6d 83       	std	Y+5, r22	; 0x05
    2dd4:	7e 83       	std	Y+6, r23	; 0x06
    2dd6:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2dda:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2dde:	9c 01       	movw	r18, r24
    2de0:	22 5f       	subi	r18, 0xF2	; 242
    2de2:	3f 4f       	sbci	r19, 0xFF	; 255
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	b9 01       	movw	r22, r18
    2dea:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	9c 81       	ldd	r25, Y+4	; 0x04
    2df2:	ad 81       	ldd	r26, Y+5	; 0x05
    2df4:	be 81       	ldd	r27, Y+6	; 0x06
    2df6:	41 e0       	ldi	r20, 0x01	; 1
    2df8:	bc 01       	movw	r22, r24
    2dfa:	cd 01       	movw	r24, r26
    2dfc:	0e 94 0b 1a 	call	0x3416	; 0x3416 <prvAddCurrentTaskToDelayedList>
    2e00:	00 00       	nop
    2e02:	26 96       	adiw	r28, 0x06	; 6
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	08 95       	ret

00002e0e <vTaskPlaceOnUnorderedEventList>:
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	2a 97       	sbiw	r28, 0x0a	; 10
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	9a 83       	std	Y+2, r25	; 0x02
    2e24:	4b 83       	std	Y+3, r20	; 0x03
    2e26:	5c 83       	std	Y+4, r21	; 0x04
    2e28:	6d 83       	std	Y+5, r22	; 0x05
    2e2a:	7e 83       	std	Y+6, r23	; 0x06
    2e2c:	0f 83       	std	Y+7, r16	; 0x07
    2e2e:	18 87       	std	Y+8, r17	; 0x08
    2e30:	29 87       	std	Y+9, r18	; 0x09
    2e32:	3a 87       	std	Y+10, r19	; 0x0a
    2e34:	20 91 20 2c 	lds	r18, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2e38:	30 91 21 2c 	lds	r19, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e40:	ad 81       	ldd	r26, Y+5	; 0x05
    2e42:	be 81       	ldd	r27, Y+6	; 0x06
    2e44:	b0 68       	ori	r27, 0x80	; 128
    2e46:	f9 01       	movw	r30, r18
    2e48:	86 87       	std	Z+14, r24	; 0x0e
    2e4a:	97 87       	std	Z+15, r25	; 0x0f
    2e4c:	a0 8b       	std	Z+16, r26	; 0x10
    2e4e:	b1 8b       	std	Z+17, r27	; 0x11
    2e50:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2e54:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2e58:	9c 01       	movw	r18, r24
    2e5a:	22 5f       	subi	r18, 0xF2	; 242
    2e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	9a 81       	ldd	r25, Y+2	; 0x02
    2e62:	b9 01       	movw	r22, r18
    2e64:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    2e68:	8f 81       	ldd	r24, Y+7	; 0x07
    2e6a:	98 85       	ldd	r25, Y+8	; 0x08
    2e6c:	a9 85       	ldd	r26, Y+9	; 0x09
    2e6e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2e70:	41 e0       	ldi	r20, 0x01	; 1
    2e72:	bc 01       	movw	r22, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	0e 94 0b 1a 	call	0x3416	; 0x3416 <prvAddCurrentTaskToDelayedList>
    2e7a:	00 00       	nop
    2e7c:	2a 96       	adiw	r28, 0x0a	; 10
    2e7e:	cd bf       	out	0x3d, r28	; 61
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	df 91       	pop	r29
    2e84:	cf 91       	pop	r28
    2e86:	1f 91       	pop	r17
    2e88:	0f 91       	pop	r16
    2e8a:	08 95       	ret

00002e8c <vTaskPlaceOnEventListRestricted>:
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	27 97       	sbiw	r28, 0x07	; 7
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	9a 83       	std	Y+2, r25	; 0x02
    2e9e:	4b 83       	std	Y+3, r20	; 0x03
    2ea0:	5c 83       	std	Y+4, r21	; 0x04
    2ea2:	6d 83       	std	Y+5, r22	; 0x05
    2ea4:	7e 83       	std	Y+6, r23	; 0x06
    2ea6:	2f 83       	std	Y+7, r18	; 0x07
    2ea8:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2eac:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2eb0:	9c 01       	movw	r18, r24
    2eb2:	22 5f       	subi	r18, 0xF2	; 242
    2eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eba:	b9 01       	movw	r22, r18
    2ebc:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    2ec0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ec2:	88 23       	and	r24, r24
    2ec4:	39 f0       	breq	.+14     	; 0x2ed4 <vTaskPlaceOnEventListRestricted+0x48>
    2ec6:	8f ef       	ldi	r24, 0xFF	; 255
    2ec8:	9f ef       	ldi	r25, 0xFF	; 255
    2eca:	dc 01       	movw	r26, r24
    2ecc:	8b 83       	std	Y+3, r24	; 0x03
    2ece:	9c 83       	std	Y+4, r25	; 0x04
    2ed0:	ad 83       	std	Y+5, r26	; 0x05
    2ed2:	be 83       	std	Y+6, r27	; 0x06
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed8:	ad 81       	ldd	r26, Y+5	; 0x05
    2eda:	be 81       	ldd	r27, Y+6	; 0x06
    2edc:	4f 81       	ldd	r20, Y+7	; 0x07
    2ede:	bc 01       	movw	r22, r24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	0e 94 0b 1a 	call	0x3416	; 0x3416 <prvAddCurrentTaskToDelayedList>
    2ee6:	00 00       	nop
    2ee8:	27 96       	adiw	r28, 0x07	; 7
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	08 95       	ret

00002ef4 <xTaskRemoveFromEventList>:
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	25 97       	sbiw	r28, 0x05	; 5
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	8c 83       	std	Y+4, r24	; 0x04
    2f04:	9d 83       	std	Y+5, r25	; 0x05
    2f06:	8c 81       	ldd	r24, Y+4	; 0x04
    2f08:	9d 81       	ldd	r25, Y+5	; 0x05
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	87 81       	ldd	r24, Z+7	; 0x07
    2f0e:	90 85       	ldd	r25, Z+8	; 0x08
    2f10:	fc 01       	movw	r30, r24
    2f12:	80 85       	ldd	r24, Z+8	; 0x08
    2f14:	91 85       	ldd	r25, Z+9	; 0x09
    2f16:	8a 83       	std	Y+2, r24	; 0x02
    2f18:	9b 83       	std	Y+3, r25	; 0x03
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f1e:	0e 96       	adiw	r24, 0x0e	; 14
    2f20:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2f24:	80 91 8f 2c 	lds	r24, 0x2C8F	; 0x802c8f <uxSchedulerSuspended>
    2f28:	88 23       	and	r24, r24
    2f2a:	51 f5       	brne	.+84     	; 0x2f80 <xTaskRemoveFromEventList+0x8c>
    2f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f30:	02 96       	adiw	r24, 0x02	; 2
    2f32:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f3e:	80 91 83 2c 	lds	r24, 0x2C83	; 0x802c83 <uxTopReadyPriority>
    2f42:	89 17       	cp	r24, r25
    2f44:	30 f4       	brcc	.+12     	; 0x2f52 <xTaskRemoveFromEventList+0x5e>
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f4e:	80 93 83 2c 	sts	0x2C83, r24	; 0x802c83 <uxTopReadyPriority>
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	9b 81       	ldd	r25, Y+3	; 0x03
    2f56:	ac 01       	movw	r20, r24
    2f58:	4e 5f       	subi	r20, 0xFE	; 254
    2f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f60:	fc 01       	movw	r30, r24
    2f62:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f64:	28 2f       	mov	r18, r24
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	6b e0       	ldi	r22, 0x0B	; 11
    2f6a:	62 9f       	mul	r22, r18
    2f6c:	c0 01       	movw	r24, r0
    2f6e:	63 9f       	mul	r22, r19
    2f70:	90 0d       	add	r25, r0
    2f72:	11 24       	eor	r1, r1
    2f74:	8e 5d       	subi	r24, 0xDE	; 222
    2f76:	93 4d       	sbci	r25, 0xD3	; 211
    2f78:	ba 01       	movw	r22, r20
    2f7a:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    2f7e:	08 c0       	rjmp	.+16     	; 0x2f90 <xTaskRemoveFromEventList+0x9c>
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	9b 81       	ldd	r25, Y+3	; 0x03
    2f84:	0e 96       	adiw	r24, 0x0e	; 14
    2f86:	bc 01       	movw	r22, r24
    2f88:	88 e6       	ldi	r24, 0x68	; 104
    2f8a:	9c e2       	ldi	r25, 0x2C	; 44
    2f8c:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	9b 81       	ldd	r25, Y+3	; 0x03
    2f94:	fc 01       	movw	r30, r24
    2f96:	22 8d       	ldd	r18, Z+26	; 0x1a
    2f98:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    2f9c:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fa4:	82 17       	cp	r24, r18
    2fa6:	30 f4       	brcc	.+12     	; 0x2fb4 <xTaskRemoveFromEventList+0xc0>
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	89 83       	std	Y+1, r24	; 0x01
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	80 93 86 2c 	sts	0x2C86, r24	; 0x802c86 <xYieldPending>
    2fb2:	01 c0       	rjmp	.+2      	; 0x2fb6 <xTaskRemoveFromEventList+0xc2>
    2fb4:	19 82       	std	Y+1, r1	; 0x01
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	25 96       	adiw	r28, 0x05	; 5
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	08 95       	ret

00002fc4 <vTaskRemoveFromUnorderedEventList>:
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	28 97       	sbiw	r28, 0x08	; 8
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
    2fd4:	9c 83       	std	Y+4, r25	; 0x04
    2fd6:	4d 83       	std	Y+5, r20	; 0x05
    2fd8:	5e 83       	std	Y+6, r21	; 0x06
    2fda:	6f 83       	std	Y+7, r22	; 0x07
    2fdc:	78 87       	std	Y+8, r23	; 0x08
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	af 81       	ldd	r26, Y+7	; 0x07
    2fe4:	b8 85       	ldd	r27, Y+8	; 0x08
    2fe6:	b0 68       	ori	r27, 0x80	; 128
    2fe8:	2b 81       	ldd	r18, Y+3	; 0x03
    2fea:	3c 81       	ldd	r19, Y+4	; 0x04
    2fec:	f9 01       	movw	r30, r18
    2fee:	80 83       	st	Z, r24
    2ff0:	91 83       	std	Z+1, r25	; 0x01
    2ff2:	a2 83       	std	Z+2, r26	; 0x02
    2ff4:	b3 83       	std	Z+3, r27	; 0x03
    2ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	80 85       	ldd	r24, Z+8	; 0x08
    2ffe:	91 85       	ldd	r25, Z+9	; 0x09
    3000:	89 83       	std	Y+1, r24	; 0x01
    3002:	9a 83       	std	Y+2, r25	; 0x02
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	9c 81       	ldd	r25, Y+4	; 0x04
    3008:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	02 96       	adiw	r24, 0x02	; 2
    3012:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	9a 81       	ldd	r25, Y+2	; 0x02
    301a:	fc 01       	movw	r30, r24
    301c:	92 8d       	ldd	r25, Z+26	; 0x1a
    301e:	80 91 83 2c 	lds	r24, 0x2C83	; 0x802c83 <uxTopReadyPriority>
    3022:	89 17       	cp	r24, r25
    3024:	30 f4       	brcc	.+12     	; 0x3032 <vTaskRemoveFromUnorderedEventList+0x6e>
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	fc 01       	movw	r30, r24
    302c:	82 8d       	ldd	r24, Z+26	; 0x1a
    302e:	80 93 83 2c 	sts	0x2C83, r24	; 0x802c83 <uxTopReadyPriority>
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	ac 01       	movw	r20, r24
    3038:	4e 5f       	subi	r20, 0xFE	; 254
    303a:	5f 4f       	sbci	r21, 0xFF	; 255
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	9a 81       	ldd	r25, Y+2	; 0x02
    3040:	fc 01       	movw	r30, r24
    3042:	82 8d       	ldd	r24, Z+26	; 0x1a
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	6b e0       	ldi	r22, 0x0B	; 11
    304a:	62 9f       	mul	r22, r18
    304c:	c0 01       	movw	r24, r0
    304e:	63 9f       	mul	r22, r19
    3050:	90 0d       	add	r25, r0
    3052:	11 24       	eor	r1, r1
    3054:	8e 5d       	subi	r24, 0xDE	; 222
    3056:	93 4d       	sbci	r25, 0xD3	; 211
    3058:	ba 01       	movw	r22, r20
    305a:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	9a 81       	ldd	r25, Y+2	; 0x02
    3062:	fc 01       	movw	r30, r24
    3064:	22 8d       	ldd	r18, Z+26	; 0x1a
    3066:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    306a:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    306e:	fc 01       	movw	r30, r24
    3070:	82 8d       	ldd	r24, Z+26	; 0x1a
    3072:	82 17       	cp	r24, r18
    3074:	18 f4       	brcc	.+6      	; 0x307c <vTaskRemoveFromUnorderedEventList+0xb8>
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	80 93 86 2c 	sts	0x2C86, r24	; 0x802c86 <xYieldPending>
    307c:	00 00       	nop
    307e:	28 96       	adiw	r28, 0x08	; 8
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	df 91       	pop	r29
    3086:	cf 91       	pop	r28
    3088:	08 95       	ret

0000308a <vTaskInternalSetTimeOutState>:
    308a:	cf 93       	push	r28
    308c:	df 93       	push	r29
    308e:	1f 92       	push	r1
    3090:	1f 92       	push	r1
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
    3096:	89 83       	std	Y+1, r24	; 0x01
    3098:	9a 83       	std	Y+2, r25	; 0x02
    309a:	20 91 87 2c 	lds	r18, 0x2C87	; 0x802c87 <xNumOfOverflows>
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	9a 81       	ldd	r25, Y+2	; 0x02
    30a2:	fc 01       	movw	r30, r24
    30a4:	20 83       	st	Z, r18
    30a6:	80 91 7f 2c 	lds	r24, 0x2C7F	; 0x802c7f <xTickCount>
    30aa:	90 91 80 2c 	lds	r25, 0x2C80	; 0x802c80 <xTickCount+0x1>
    30ae:	a0 91 81 2c 	lds	r26, 0x2C81	; 0x802c81 <xTickCount+0x2>
    30b2:	b0 91 82 2c 	lds	r27, 0x2C82	; 0x802c82 <xTickCount+0x3>
    30b6:	29 81       	ldd	r18, Y+1	; 0x01
    30b8:	3a 81       	ldd	r19, Y+2	; 0x02
    30ba:	f9 01       	movw	r30, r18
    30bc:	81 83       	std	Z+1, r24	; 0x01
    30be:	92 83       	std	Z+2, r25	; 0x02
    30c0:	a3 83       	std	Z+3, r26	; 0x03
    30c2:	b4 83       	std	Z+4, r27	; 0x04
    30c4:	00 00       	nop
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	08 95       	ret

000030d0 <xTaskCheckForTimeOut>:
    30d0:	ef 92       	push	r14
    30d2:	ff 92       	push	r15
    30d4:	0f 93       	push	r16
    30d6:	1f 93       	push	r17
    30d8:	cf 93       	push	r28
    30da:	df 93       	push	r29
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
    30e0:	2d 97       	sbiw	r28, 0x0d	; 13
    30e2:	cd bf       	out	0x3d, r28	; 61
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	8a 87       	std	Y+10, r24	; 0x0a
    30e8:	9b 87       	std	Y+11, r25	; 0x0b
    30ea:	6c 87       	std	Y+12, r22	; 0x0c
    30ec:	7d 87       	std	Y+13, r23	; 0x0d
    30ee:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    30f2:	ff 93       	push	r31
    30f4:	f8 7f       	andi	r31, 0xF8	; 248
    30f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    30fa:	80 91 7f 2c 	lds	r24, 0x2C7F	; 0x802c7f <xTickCount>
    30fe:	90 91 80 2c 	lds	r25, 0x2C80	; 0x802c80 <xTickCount+0x1>
    3102:	a0 91 81 2c 	lds	r26, 0x2C81	; 0x802c81 <xTickCount+0x2>
    3106:	b0 91 82 2c 	lds	r27, 0x2C82	; 0x802c82 <xTickCount+0x3>
    310a:	8a 83       	std	Y+2, r24	; 0x02
    310c:	9b 83       	std	Y+3, r25	; 0x03
    310e:	ac 83       	std	Y+4, r26	; 0x04
    3110:	bd 83       	std	Y+5, r27	; 0x05
    3112:	8a 85       	ldd	r24, Y+10	; 0x0a
    3114:	9b 85       	ldd	r25, Y+11	; 0x0b
    3116:	fc 01       	movw	r30, r24
    3118:	81 81       	ldd	r24, Z+1	; 0x01
    311a:	92 81       	ldd	r25, Z+2	; 0x02
    311c:	a3 81       	ldd	r26, Z+3	; 0x03
    311e:	b4 81       	ldd	r27, Z+4	; 0x04
    3120:	2a 81       	ldd	r18, Y+2	; 0x02
    3122:	3b 81       	ldd	r19, Y+3	; 0x03
    3124:	4c 81       	ldd	r20, Y+4	; 0x04
    3126:	5d 81       	ldd	r21, Y+5	; 0x05
    3128:	79 01       	movw	r14, r18
    312a:	8a 01       	movw	r16, r20
    312c:	e8 1a       	sub	r14, r24
    312e:	f9 0a       	sbc	r15, r25
    3130:	0a 0b       	sbc	r16, r26
    3132:	1b 0b       	sbc	r17, r27
    3134:	d8 01       	movw	r26, r16
    3136:	c7 01       	movw	r24, r14
    3138:	8e 83       	std	Y+6, r24	; 0x06
    313a:	9f 83       	std	Y+7, r25	; 0x07
    313c:	a8 87       	std	Y+8, r26	; 0x08
    313e:	b9 87       	std	Y+9, r27	; 0x09
    3140:	8c 85       	ldd	r24, Y+12	; 0x0c
    3142:	9d 85       	ldd	r25, Y+13	; 0x0d
    3144:	fc 01       	movw	r30, r24
    3146:	80 81       	ld	r24, Z
    3148:	91 81       	ldd	r25, Z+1	; 0x01
    314a:	a2 81       	ldd	r26, Z+2	; 0x02
    314c:	b3 81       	ldd	r27, Z+3	; 0x03
    314e:	8f 3f       	cpi	r24, 0xFF	; 255
    3150:	9f 4f       	sbci	r25, 0xFF	; 255
    3152:	af 4f       	sbci	r26, 0xFF	; 255
    3154:	bf 4f       	sbci	r27, 0xFF	; 255
    3156:	11 f4       	brne	.+4      	; 0x315c <xTaskCheckForTimeOut+0x8c>
    3158:	19 82       	std	Y+1, r1	; 0x01
    315a:	54 c0       	rjmp	.+168    	; 0x3204 <xTaskCheckForTimeOut+0x134>
    315c:	8a 85       	ldd	r24, Y+10	; 0x0a
    315e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3160:	fc 01       	movw	r30, r24
    3162:	90 81       	ld	r25, Z
    3164:	80 91 87 2c 	lds	r24, 0x2C87	; 0x802c87 <xNumOfOverflows>
    3168:	98 17       	cp	r25, r24
    316a:	99 f0       	breq	.+38     	; 0x3192 <xTaskCheckForTimeOut+0xc2>
    316c:	8a 85       	ldd	r24, Y+10	; 0x0a
    316e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3170:	fc 01       	movw	r30, r24
    3172:	21 81       	ldd	r18, Z+1	; 0x01
    3174:	32 81       	ldd	r19, Z+2	; 0x02
    3176:	43 81       	ldd	r20, Z+3	; 0x03
    3178:	54 81       	ldd	r21, Z+4	; 0x04
    317a:	8a 81       	ldd	r24, Y+2	; 0x02
    317c:	9b 81       	ldd	r25, Y+3	; 0x03
    317e:	ac 81       	ldd	r26, Y+4	; 0x04
    3180:	bd 81       	ldd	r27, Y+5	; 0x05
    3182:	82 17       	cp	r24, r18
    3184:	93 07       	cpc	r25, r19
    3186:	a4 07       	cpc	r26, r20
    3188:	b5 07       	cpc	r27, r21
    318a:	18 f0       	brcs	.+6      	; 0x3192 <xTaskCheckForTimeOut+0xc2>
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	39 c0       	rjmp	.+114    	; 0x3204 <xTaskCheckForTimeOut+0x134>
    3192:	8c 85       	ldd	r24, Y+12	; 0x0c
    3194:	9d 85       	ldd	r25, Y+13	; 0x0d
    3196:	fc 01       	movw	r30, r24
    3198:	20 81       	ld	r18, Z
    319a:	31 81       	ldd	r19, Z+1	; 0x01
    319c:	42 81       	ldd	r20, Z+2	; 0x02
    319e:	53 81       	ldd	r21, Z+3	; 0x03
    31a0:	8e 81       	ldd	r24, Y+6	; 0x06
    31a2:	9f 81       	ldd	r25, Y+7	; 0x07
    31a4:	a8 85       	ldd	r26, Y+8	; 0x08
    31a6:	b9 85       	ldd	r27, Y+9	; 0x09
    31a8:	82 17       	cp	r24, r18
    31aa:	93 07       	cpc	r25, r19
    31ac:	a4 07       	cpc	r26, r20
    31ae:	b5 07       	cpc	r27, r21
    31b0:	00 f5       	brcc	.+64     	; 0x31f2 <xTaskCheckForTimeOut+0x122>
    31b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    31b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    31b6:	fc 01       	movw	r30, r24
    31b8:	20 81       	ld	r18, Z
    31ba:	31 81       	ldd	r19, Z+1	; 0x01
    31bc:	42 81       	ldd	r20, Z+2	; 0x02
    31be:	53 81       	ldd	r21, Z+3	; 0x03
    31c0:	8e 81       	ldd	r24, Y+6	; 0x06
    31c2:	9f 81       	ldd	r25, Y+7	; 0x07
    31c4:	a8 85       	ldd	r26, Y+8	; 0x08
    31c6:	b9 85       	ldd	r27, Y+9	; 0x09
    31c8:	79 01       	movw	r14, r18
    31ca:	8a 01       	movw	r16, r20
    31cc:	e8 1a       	sub	r14, r24
    31ce:	f9 0a       	sbc	r15, r25
    31d0:	0a 0b       	sbc	r16, r26
    31d2:	1b 0b       	sbc	r17, r27
    31d4:	d8 01       	movw	r26, r16
    31d6:	c7 01       	movw	r24, r14
    31d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    31da:	3d 85       	ldd	r19, Y+13	; 0x0d
    31dc:	f9 01       	movw	r30, r18
    31de:	80 83       	st	Z, r24
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	a2 83       	std	Z+2, r26	; 0x02
    31e4:	b3 83       	std	Z+3, r27	; 0x03
    31e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ea:	0e 94 45 18 	call	0x308a	; 0x308a <vTaskInternalSetTimeOutState>
    31ee:	19 82       	std	Y+1, r1	; 0x01
    31f0:	09 c0       	rjmp	.+18     	; 0x3204 <xTaskCheckForTimeOut+0x134>
    31f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    31f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    31f6:	fc 01       	movw	r30, r24
    31f8:	10 82       	st	Z, r1
    31fa:	11 82       	std	Z+1, r1	; 0x01
    31fc:	12 82       	std	Z+2, r1	; 0x02
    31fe:	13 82       	std	Z+3, r1	; 0x03
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	ff 91       	pop	r31
    3206:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	2d 96       	adiw	r28, 0x0d	; 13
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	de bf       	out	0x3e, r29	; 62
    3212:	df 91       	pop	r29
    3214:	cf 91       	pop	r28
    3216:	1f 91       	pop	r17
    3218:	0f 91       	pop	r16
    321a:	ff 90       	pop	r15
    321c:	ef 90       	pop	r14
    321e:	08 95       	ret

00003220 <vTaskMissedYield>:
    3220:	cf 93       	push	r28
    3222:	df 93       	push	r29
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	80 93 86 2c 	sts	0x2C86, r24	; 0x802c86 <xYieldPending>
    322e:	00 00       	nop
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	08 95       	ret

00003236 <prvIdleTask>:
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	1f 92       	push	r1
    323c:	1f 92       	push	r1
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	9a 83       	std	Y+2, r25	; 0x02
    3246:	0e 94 69 19 	call	0x32d2	; 0x32d2 <prvCheckTasksWaitingTermination>
    324a:	80 91 22 2c 	lds	r24, 0x2C22	; 0x802c22 <pxReadyTasksLists>
    324e:	82 30       	cpi	r24, 0x02	; 2
    3250:	10 f0       	brcs	.+4      	; 0x3256 <prvIdleTask+0x20>
    3252:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    3256:	0e 94 0a 20 	call	0x4014	; 0x4014 <vApplicationIdleHook>
    325a:	f5 cf       	rjmp	.-22     	; 0x3246 <prvIdleTask+0x10>

0000325c <prvInitialiseTaskLists>:
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
    3260:	1f 92       	push	r1
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
    3266:	19 82       	std	Y+1, r1	; 0x01
    3268:	10 c0       	rjmp	.+32     	; 0x328a <prvInitialiseTaskLists+0x2e>
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	28 2f       	mov	r18, r24
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	4b e0       	ldi	r20, 0x0B	; 11
    3272:	42 9f       	mul	r20, r18
    3274:	c0 01       	movw	r24, r0
    3276:	43 9f       	mul	r20, r19
    3278:	90 0d       	add	r25, r0
    327a:	11 24       	eor	r1, r1
    327c:	8e 5d       	subi	r24, 0xDE	; 222
    327e:	93 4d       	sbci	r25, 0xD3	; 211
    3280:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	8f 5f       	subi	r24, 0xFF	; 255
    3288:	89 83       	std	Y+1, r24	; 0x01
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	84 30       	cpi	r24, 0x04	; 4
    328e:	68 f3       	brcs	.-38     	; 0x326a <prvInitialiseTaskLists+0xe>
    3290:	8e e4       	ldi	r24, 0x4E	; 78
    3292:	9c e2       	ldi	r25, 0x2C	; 44
    3294:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    3298:	89 e5       	ldi	r24, 0x59	; 89
    329a:	9c e2       	ldi	r25, 0x2C	; 44
    329c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    32a0:	88 e6       	ldi	r24, 0x68	; 104
    32a2:	9c e2       	ldi	r25, 0x2C	; 44
    32a4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    32a8:	83 e7       	ldi	r24, 0x73	; 115
    32aa:	9c e2       	ldi	r25, 0x2C	; 44
    32ac:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    32b0:	8e e4       	ldi	r24, 0x4E	; 78
    32b2:	9c e2       	ldi	r25, 0x2C	; 44
    32b4:	80 93 64 2c 	sts	0x2C64, r24	; 0x802c64 <pxDelayedTaskList>
    32b8:	90 93 65 2c 	sts	0x2C65, r25	; 0x802c65 <pxDelayedTaskList+0x1>
    32bc:	89 e5       	ldi	r24, 0x59	; 89
    32be:	9c e2       	ldi	r25, 0x2C	; 44
    32c0:	80 93 66 2c 	sts	0x2C66, r24	; 0x802c66 <pxOverflowDelayedTaskList>
    32c4:	90 93 67 2c 	sts	0x2C67, r25	; 0x802c67 <pxOverflowDelayedTaskList+0x1>
    32c8:	00 00       	nop
    32ca:	0f 90       	pop	r0
    32cc:	df 91       	pop	r29
    32ce:	cf 91       	pop	r28
    32d0:	08 95       	ret

000032d2 <prvCheckTasksWaitingTermination>:
    32d2:	cf 93       	push	r28
    32d4:	df 93       	push	r29
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	00 00       	nop
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	08 95       	ret

000032e2 <prvResetNextTaskUnblockTime>:
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	1f 92       	push	r1
    32e8:	1f 92       	push	r1
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	80 91 64 2c 	lds	r24, 0x2C64	; 0x802c64 <pxDelayedTaskList>
    32f2:	90 91 65 2c 	lds	r25, 0x2C65	; 0x802c65 <pxDelayedTaskList+0x1>
    32f6:	fc 01       	movw	r30, r24
    32f8:	80 81       	ld	r24, Z
    32fa:	88 23       	and	r24, r24
    32fc:	61 f4       	brne	.+24     	; 0x3316 <prvResetNextTaskUnblockTime+0x34>
    32fe:	8f ef       	ldi	r24, 0xFF	; 255
    3300:	9f ef       	ldi	r25, 0xFF	; 255
    3302:	dc 01       	movw	r26, r24
    3304:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <xNextTaskUnblockTime>
    3308:	90 93 8a 2c 	sts	0x2C8A, r25	; 0x802c8a <xNextTaskUnblockTime+0x1>
    330c:	a0 93 8b 2c 	sts	0x2C8B, r26	; 0x802c8b <xNextTaskUnblockTime+0x2>
    3310:	b0 93 8c 2c 	sts	0x2C8C, r27	; 0x802c8c <xNextTaskUnblockTime+0x3>
    3314:	1b c0       	rjmp	.+54     	; 0x334c <prvResetNextTaskUnblockTime+0x6a>
    3316:	80 91 64 2c 	lds	r24, 0x2C64	; 0x802c64 <pxDelayedTaskList>
    331a:	90 91 65 2c 	lds	r25, 0x2C65	; 0x802c65 <pxDelayedTaskList+0x1>
    331e:	fc 01       	movw	r30, r24
    3320:	87 81       	ldd	r24, Z+7	; 0x07
    3322:	90 85       	ldd	r25, Z+8	; 0x08
    3324:	fc 01       	movw	r30, r24
    3326:	80 85       	ldd	r24, Z+8	; 0x08
    3328:	91 85       	ldd	r25, Z+9	; 0x09
    332a:	89 83       	std	Y+1, r24	; 0x01
    332c:	9a 83       	std	Y+2, r25	; 0x02
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	9a 81       	ldd	r25, Y+2	; 0x02
    3332:	fc 01       	movw	r30, r24
    3334:	82 81       	ldd	r24, Z+2	; 0x02
    3336:	93 81       	ldd	r25, Z+3	; 0x03
    3338:	a4 81       	ldd	r26, Z+4	; 0x04
    333a:	b5 81       	ldd	r27, Z+5	; 0x05
    333c:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <xNextTaskUnblockTime>
    3340:	90 93 8a 2c 	sts	0x2C8A, r25	; 0x802c8a <xNextTaskUnblockTime+0x1>
    3344:	a0 93 8b 2c 	sts	0x2C8B, r26	; 0x802c8b <xNextTaskUnblockTime+0x2>
    3348:	b0 93 8c 2c 	sts	0x2C8C, r27	; 0x802c8c <xNextTaskUnblockTime+0x3>
    334c:	00 00       	nop
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	df 91       	pop	r29
    3354:	cf 91       	pop	r28
    3356:	08 95       	ret

00003358 <xTaskGetSchedulerState>:
    3358:	cf 93       	push	r28
    335a:	df 93       	push	r29
    335c:	1f 92       	push	r1
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <xSchedulerRunning>
    3366:	88 23       	and	r24, r24
    3368:	19 f4       	brne	.+6      	; 0x3370 <xTaskGetSchedulerState+0x18>
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	89 83       	std	Y+1, r24	; 0x01
    336e:	08 c0       	rjmp	.+16     	; 0x3380 <xTaskGetSchedulerState+0x28>
    3370:	80 91 8f 2c 	lds	r24, 0x2C8F	; 0x802c8f <uxSchedulerSuspended>
    3374:	88 23       	and	r24, r24
    3376:	19 f4       	brne	.+6      	; 0x337e <xTaskGetSchedulerState+0x26>
    3378:	82 e0       	ldi	r24, 0x02	; 2
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	01 c0       	rjmp	.+2      	; 0x3380 <xTaskGetSchedulerState+0x28>
    337e:	19 82       	std	Y+1, r1	; 0x01
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	0f 90       	pop	r0
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	08 95       	ret

0000338a <uxTaskResetEventItemValue>:
    338a:	ef 92       	push	r14
    338c:	ff 92       	push	r15
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	00 d0       	rcall	.+0      	; 0x3398 <uxTaskResetEventItemValue+0xe>
    3398:	1f 92       	push	r1
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    33a2:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    33a6:	fc 01       	movw	r30, r24
    33a8:	86 85       	ldd	r24, Z+14	; 0x0e
    33aa:	97 85       	ldd	r25, Z+15	; 0x0f
    33ac:	a0 89       	ldd	r26, Z+16	; 0x10
    33ae:	b1 89       	ldd	r27, Z+17	; 0x11
    33b0:	89 83       	std	Y+1, r24	; 0x01
    33b2:	9a 83       	std	Y+2, r25	; 0x02
    33b4:	ab 83       	std	Y+3, r26	; 0x03
    33b6:	bc 83       	std	Y+4, r27	; 0x04
    33b8:	60 91 20 2c 	lds	r22, 0x2C20	; 0x802c20 <pxCurrentTCB>
    33bc:	70 91 21 2c 	lds	r23, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    33c0:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    33c4:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    33c8:	fc 01       	movw	r30, r24
    33ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    33cc:	88 2f       	mov	r24, r24
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	a0 e0       	ldi	r26, 0x00	; 0
    33d2:	b0 e0       	ldi	r27, 0x00	; 0
    33d4:	24 e0       	ldi	r18, 0x04	; 4
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	50 e0       	ldi	r21, 0x00	; 0
    33dc:	79 01       	movw	r14, r18
    33de:	8a 01       	movw	r16, r20
    33e0:	e8 1a       	sub	r14, r24
    33e2:	f9 0a       	sbc	r15, r25
    33e4:	0a 0b       	sbc	r16, r26
    33e6:	1b 0b       	sbc	r17, r27
    33e8:	d8 01       	movw	r26, r16
    33ea:	c7 01       	movw	r24, r14
    33ec:	fb 01       	movw	r30, r22
    33ee:	86 87       	std	Z+14, r24	; 0x0e
    33f0:	97 87       	std	Z+15, r25	; 0x0f
    33f2:	a0 8b       	std	Z+16, r26	; 0x10
    33f4:	b1 8b       	std	Z+17, r27	; 0x11
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	9a 81       	ldd	r25, Y+2	; 0x02
    33fa:	ab 81       	ldd	r26, Y+3	; 0x03
    33fc:	bc 81       	ldd	r27, Y+4	; 0x04
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	24 96       	adiw	r28, 0x04	; 4
    3404:	cd bf       	out	0x3d, r28	; 61
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	df 91       	pop	r29
    340a:	cf 91       	pop	r28
    340c:	1f 91       	pop	r17
    340e:	0f 91       	pop	r16
    3410:	ff 90       	pop	r15
    3412:	ef 90       	pop	r14
    3414:	08 95       	ret

00003416 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	2d 97       	sbiw	r28, 0x0d	; 13
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	69 87       	std	Y+9, r22	; 0x09
    3426:	7a 87       	std	Y+10, r23	; 0x0a
    3428:	8b 87       	std	Y+11, r24	; 0x0b
    342a:	9c 87       	std	Y+12, r25	; 0x0c
    342c:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    342e:	80 91 7f 2c 	lds	r24, 0x2C7F	; 0x802c7f <xTickCount>
    3432:	90 91 80 2c 	lds	r25, 0x2C80	; 0x802c80 <xTickCount+0x1>
    3436:	a0 91 81 2c 	lds	r26, 0x2C81	; 0x802c81 <xTickCount+0x2>
    343a:	b0 91 82 2c 	lds	r27, 0x2C82	; 0x802c82 <xTickCount+0x3>
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	9a 83       	std	Y+2, r25	; 0x02
    3442:	ab 83       	std	Y+3, r26	; 0x03
    3444:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3446:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    344a:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    344e:	02 96       	adiw	r24, 0x02	; 2
    3450:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    3454:	89 85       	ldd	r24, Y+9	; 0x09
    3456:	9a 85       	ldd	r25, Y+10	; 0x0a
    3458:	ab 85       	ldd	r26, Y+11	; 0x0b
    345a:	bc 85       	ldd	r27, Y+12	; 0x0c
    345c:	8f 3f       	cpi	r24, 0xFF	; 255
    345e:	9f 4f       	sbci	r25, 0xFF	; 255
    3460:	af 4f       	sbci	r26, 0xFF	; 255
    3462:	bf 4f       	sbci	r27, 0xFF	; 255
    3464:	71 f4       	brne	.+28     	; 0x3482 <prvAddCurrentTaskToDelayedList+0x6c>
    3466:	8d 85       	ldd	r24, Y+13	; 0x0d
    3468:	88 23       	and	r24, r24
    346a:	59 f0       	breq	.+22     	; 0x3482 <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    346c:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    3470:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    3474:	02 96       	adiw	r24, 0x02	; 2
    3476:	bc 01       	movw	r22, r24
    3478:	83 e7       	ldi	r24, 0x73	; 115
    347a:	9c e2       	ldi	r25, 0x2C	; 44
    347c:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3480:	64 c0       	rjmp	.+200    	; 0x354a <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    3482:	29 81       	ldd	r18, Y+1	; 0x01
    3484:	3a 81       	ldd	r19, Y+2	; 0x02
    3486:	4b 81       	ldd	r20, Y+3	; 0x03
    3488:	5c 81       	ldd	r21, Y+4	; 0x04
    348a:	89 85       	ldd	r24, Y+9	; 0x09
    348c:	9a 85       	ldd	r25, Y+10	; 0x0a
    348e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3490:	bc 85       	ldd	r27, Y+12	; 0x0c
    3492:	82 0f       	add	r24, r18
    3494:	93 1f       	adc	r25, r19
    3496:	a4 1f       	adc	r26, r20
    3498:	b5 1f       	adc	r27, r21
    349a:	8d 83       	std	Y+5, r24	; 0x05
    349c:	9e 83       	std	Y+6, r25	; 0x06
    349e:	af 83       	std	Y+7, r26	; 0x07
    34a0:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    34a2:	20 91 20 2c 	lds	r18, 0x2C20	; 0x802c20 <pxCurrentTCB>
    34a6:	30 91 21 2c 	lds	r19, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    34aa:	8d 81       	ldd	r24, Y+5	; 0x05
    34ac:	9e 81       	ldd	r25, Y+6	; 0x06
    34ae:	af 81       	ldd	r26, Y+7	; 0x07
    34b0:	b8 85       	ldd	r27, Y+8	; 0x08
    34b2:	f9 01       	movw	r30, r18
    34b4:	82 83       	std	Z+2, r24	; 0x02
    34b6:	93 83       	std	Z+3, r25	; 0x03
    34b8:	a4 83       	std	Z+4, r26	; 0x04
    34ba:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    34bc:	2d 81       	ldd	r18, Y+5	; 0x05
    34be:	3e 81       	ldd	r19, Y+6	; 0x06
    34c0:	4f 81       	ldd	r20, Y+7	; 0x07
    34c2:	58 85       	ldd	r21, Y+8	; 0x08
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
    34c6:	9a 81       	ldd	r25, Y+2	; 0x02
    34c8:	ab 81       	ldd	r26, Y+3	; 0x03
    34ca:	bc 81       	ldd	r27, Y+4	; 0x04
    34cc:	28 17       	cp	r18, r24
    34ce:	39 07       	cpc	r19, r25
    34d0:	4a 07       	cpc	r20, r26
    34d2:	5b 07       	cpc	r21, r27
    34d4:	78 f4       	brcc	.+30     	; 0x34f4 <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    34d6:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    34da:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    34de:	9c 01       	movw	r18, r24
    34e0:	2e 5f       	subi	r18, 0xFE	; 254
    34e2:	3f 4f       	sbci	r19, 0xFF	; 255
    34e4:	80 91 66 2c 	lds	r24, 0x2C66	; 0x802c66 <pxOverflowDelayedTaskList>
    34e8:	90 91 67 2c 	lds	r25, 0x2C67	; 0x802c67 <pxOverflowDelayedTaskList+0x1>
    34ec:	b9 01       	movw	r22, r18
    34ee:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    34f2:	2b c0       	rjmp	.+86     	; 0x354a <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    34f4:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <pxCurrentTCB>
    34f8:	90 91 21 2c 	lds	r25, 0x2C21	; 0x802c21 <pxCurrentTCB+0x1>
    34fc:	9c 01       	movw	r18, r24
    34fe:	2e 5f       	subi	r18, 0xFE	; 254
    3500:	3f 4f       	sbci	r19, 0xFF	; 255
    3502:	80 91 64 2c 	lds	r24, 0x2C64	; 0x802c64 <pxDelayedTaskList>
    3506:	90 91 65 2c 	lds	r25, 0x2C65	; 0x802c65 <pxDelayedTaskList+0x1>
    350a:	b9 01       	movw	r22, r18
    350c:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    3510:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <xNextTaskUnblockTime>
    3514:	90 91 8a 2c 	lds	r25, 0x2C8A	; 0x802c8a <xNextTaskUnblockTime+0x1>
    3518:	a0 91 8b 2c 	lds	r26, 0x2C8B	; 0x802c8b <xNextTaskUnblockTime+0x2>
    351c:	b0 91 8c 2c 	lds	r27, 0x2C8C	; 0x802c8c <xNextTaskUnblockTime+0x3>
    3520:	2d 81       	ldd	r18, Y+5	; 0x05
    3522:	3e 81       	ldd	r19, Y+6	; 0x06
    3524:	4f 81       	ldd	r20, Y+7	; 0x07
    3526:	58 85       	ldd	r21, Y+8	; 0x08
    3528:	28 17       	cp	r18, r24
    352a:	39 07       	cpc	r19, r25
    352c:	4a 07       	cpc	r20, r26
    352e:	5b 07       	cpc	r21, r27
    3530:	60 f4       	brcc	.+24     	; 0x354a <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    3532:	8d 81       	ldd	r24, Y+5	; 0x05
    3534:	9e 81       	ldd	r25, Y+6	; 0x06
    3536:	af 81       	ldd	r26, Y+7	; 0x07
    3538:	b8 85       	ldd	r27, Y+8	; 0x08
    353a:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <xNextTaskUnblockTime>
    353e:	90 93 8a 2c 	sts	0x2C8A, r25	; 0x802c8a <xNextTaskUnblockTime+0x1>
    3542:	a0 93 8b 2c 	sts	0x2C8B, r26	; 0x802c8b <xNextTaskUnblockTime+0x2>
    3546:	b0 93 8c 2c 	sts	0x2C8C, r27	; 0x802c8c <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    354a:	00 00       	nop
    354c:	2d 96       	adiw	r28, 0x0d	; 13
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	de bf       	out	0x3e, r29	; 62
    3552:	df 91       	pop	r29
    3554:	cf 91       	pop	r28
    3556:	08 95       	ret

00003558 <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    3558:	ef 92       	push	r14
    355a:	ff 92       	push	r15
    355c:	0f 93       	push	r16
    355e:	cf 93       	push	r28
    3560:	df 93       	push	r29
    3562:	1f 92       	push	r1
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
    3568:	19 82       	std	Y+1, r1	; 0x01
    356a:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <prvCheckForValidListAndQueue>
    356e:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <xTimerQueue>
    3572:	90 91 ab 2c 	lds	r25, 0x2CAB	; 0x802cab <xTimerQueue+0x1>
    3576:	89 2b       	or	r24, r25
    3578:	91 f0       	breq	.+36     	; 0x359e <xTimerCreateTimerTask+0x46>
    357a:	0f 2e       	mov	r0, r31
    357c:	fc ea       	ldi	r31, 0xAC	; 172
    357e:	ef 2e       	mov	r14, r31
    3580:	fc e2       	ldi	r31, 0x2C	; 44
    3582:	ff 2e       	mov	r15, r31
    3584:	f0 2d       	mov	r31, r0
    3586:	03 e0       	ldi	r16, 0x03	; 3
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	48 ec       	ldi	r20, 0xC8	; 200
    358e:	50 e0       	ldi	r21, 0x00	; 0
    3590:	65 e0       	ldi	r22, 0x05	; 5
    3592:	70 e2       	ldi	r23, 0x20	; 32
    3594:	82 ec       	ldi	r24, 0xC2	; 194
    3596:	9b e1       	ldi	r25, 0x1B	; 27
    3598:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
    359c:	89 83       	std	Y+1, r24	; 0x01
    359e:	89 81       	ldd	r24, Y+1	; 0x01
    35a0:	0f 90       	pop	r0
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	0f 91       	pop	r16
    35a8:	ff 90       	pop	r15
    35aa:	ef 90       	pop	r14
    35ac:	08 95       	ret

000035ae <xTimerGenericCommand>:
    35ae:	cf 92       	push	r12
    35b0:	df 92       	push	r13
    35b2:	ef 92       	push	r14
    35b4:	ff 92       	push	r15
    35b6:	0f 93       	push	r16
    35b8:	1f 93       	push	r17
    35ba:	cf 93       	push	r28
    35bc:	df 93       	push	r29
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	67 97       	sbiw	r28, 0x17	; 23
    35c4:	cd bf       	out	0x3d, r28	; 61
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	8b 87       	std	Y+11, r24	; 0x0b
    35ca:	9c 87       	std	Y+12, r25	; 0x0c
    35cc:	6d 87       	std	Y+13, r22	; 0x0d
    35ce:	2e 87       	std	Y+14, r18	; 0x0e
    35d0:	3f 87       	std	Y+15, r19	; 0x0f
    35d2:	48 8b       	std	Y+16, r20	; 0x10
    35d4:	59 8b       	std	Y+17, r21	; 0x11
    35d6:	0a 8b       	std	Y+18, r16	; 0x12
    35d8:	1b 8b       	std	Y+19, r17	; 0x13
    35da:	cc 8a       	std	Y+20, r12	; 0x14
    35dc:	dd 8a       	std	Y+21, r13	; 0x15
    35de:	ee 8a       	std	Y+22, r14	; 0x16
    35e0:	ff 8a       	std	Y+23, r15	; 0x17
    35e2:	19 82       	std	Y+1, r1	; 0x01
    35e4:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <xTimerQueue>
    35e8:	90 91 ab 2c 	lds	r25, 0x2CAB	; 0x802cab <xTimerQueue+0x1>
    35ec:	89 2b       	or	r24, r25
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <xTimerGenericCommand+0x44>
    35f0:	44 c0       	rjmp	.+136    	; 0x367a <xTimerGenericCommand+0xcc>
    35f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f4:	8a 83       	std	Y+2, r24	; 0x02
    35f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    35f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    35fa:	a8 89       	ldd	r26, Y+16	; 0x10
    35fc:	b9 89       	ldd	r27, Y+17	; 0x11
    35fe:	8b 83       	std	Y+3, r24	; 0x03
    3600:	9c 83       	std	Y+4, r25	; 0x04
    3602:	ad 83       	std	Y+5, r26	; 0x05
    3604:	be 83       	std	Y+6, r27	; 0x06
    3606:	8b 85       	ldd	r24, Y+11	; 0x0b
    3608:	9c 85       	ldd	r25, Y+12	; 0x0c
    360a:	8f 83       	std	Y+7, r24	; 0x07
    360c:	98 87       	std	Y+8, r25	; 0x08
    360e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3610:	86 30       	cpi	r24, 0x06	; 6
    3612:	34 f5       	brge	.+76     	; 0x3660 <xTimerGenericCommand+0xb2>
    3614:	0e 94 ac 19 	call	0x3358	; 0x3358 <xTaskGetSchedulerState>
    3618:	82 30       	cpi	r24, 0x02	; 2
    361a:	99 f4       	brne	.+38     	; 0x3642 <xTimerGenericCommand+0x94>
    361c:	e0 91 aa 2c 	lds	r30, 0x2CAA	; 0x802caa <xTimerQueue>
    3620:	f0 91 ab 2c 	lds	r31, 0x2CAB	; 0x802cab <xTimerQueue+0x1>
    3624:	8c 89       	ldd	r24, Y+20	; 0x14
    3626:	9d 89       	ldd	r25, Y+21	; 0x15
    3628:	ae 89       	ldd	r26, Y+22	; 0x16
    362a:	bf 89       	ldd	r27, Y+23	; 0x17
    362c:	be 01       	movw	r22, r28
    362e:	6e 5f       	subi	r22, 0xFE	; 254
    3630:	7f 4f       	sbci	r23, 0xFF	; 255
    3632:	00 e0       	ldi	r16, 0x00	; 0
    3634:	9c 01       	movw	r18, r24
    3636:	ad 01       	movw	r20, r26
    3638:	cf 01       	movw	r24, r30
    363a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
    363e:	89 83       	std	Y+1, r24	; 0x01
    3640:	1c c0       	rjmp	.+56     	; 0x367a <xTimerGenericCommand+0xcc>
    3642:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <xTimerQueue>
    3646:	90 91 ab 2c 	lds	r25, 0x2CAB	; 0x802cab <xTimerQueue+0x1>
    364a:	be 01       	movw	r22, r28
    364c:	6e 5f       	subi	r22, 0xFE	; 254
    364e:	7f 4f       	sbci	r23, 0xFF	; 255
    3650:	00 e0       	ldi	r16, 0x00	; 0
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	a9 01       	movw	r20, r18
    3658:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
    365c:	89 83       	std	Y+1, r24	; 0x01
    365e:	0d c0       	rjmp	.+26     	; 0x367a <xTimerGenericCommand+0xcc>
    3660:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <xTimerQueue>
    3664:	90 91 ab 2c 	lds	r25, 0x2CAB	; 0x802cab <xTimerQueue+0x1>
    3668:	4a 89       	ldd	r20, Y+18	; 0x12
    366a:	5b 89       	ldd	r21, Y+19	; 0x13
    366c:	be 01       	movw	r22, r28
    366e:	6e 5f       	subi	r22, 0xFE	; 254
    3670:	7f 4f       	sbci	r23, 0xFF	; 255
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <xQueueGenericSendFromISR>
    3678:	89 83       	std	Y+1, r24	; 0x01
    367a:	89 81       	ldd	r24, Y+1	; 0x01
    367c:	67 96       	adiw	r28, 0x17	; 23
    367e:	cd bf       	out	0x3d, r28	; 61
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	1f 91       	pop	r17
    3688:	0f 91       	pop	r16
    368a:	ff 90       	pop	r15
    368c:	ef 90       	pop	r14
    368e:	df 90       	pop	r13
    3690:	cf 90       	pop	r12
    3692:	08 95       	ret

00003694 <prvProcessExpiredTimer>:
    3694:	cf 92       	push	r12
    3696:	df 92       	push	r13
    3698:	ef 92       	push	r14
    369a:	ff 92       	push	r15
    369c:	0f 93       	push	r16
    369e:	1f 93       	push	r17
    36a0:	cf 93       	push	r28
    36a2:	df 93       	push	r29
    36a4:	cd b7       	in	r28, 0x3d	; 61
    36a6:	de b7       	in	r29, 0x3e	; 62
    36a8:	2b 97       	sbiw	r28, 0x0b	; 11
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	6c 83       	std	Y+4, r22	; 0x04
    36b0:	7d 83       	std	Y+5, r23	; 0x05
    36b2:	8e 83       	std	Y+6, r24	; 0x06
    36b4:	9f 83       	std	Y+7, r25	; 0x07
    36b6:	28 87       	std	Y+8, r18	; 0x08
    36b8:	39 87       	std	Y+9, r19	; 0x09
    36ba:	4a 87       	std	Y+10, r20	; 0x0a
    36bc:	5b 87       	std	Y+11, r21	; 0x0b
    36be:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTimerList>
    36c2:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTimerList+0x1>
    36c6:	fc 01       	movw	r30, r24
    36c8:	87 81       	ldd	r24, Z+7	; 0x07
    36ca:	90 85       	ldd	r25, Z+8	; 0x08
    36cc:	fc 01       	movw	r30, r24
    36ce:	80 85       	ldd	r24, Z+8	; 0x08
    36d0:	91 85       	ldd	r25, Z+9	; 0x09
    36d2:	89 83       	std	Y+1, r24	; 0x01
    36d4:	9a 83       	std	Y+2, r25	; 0x02
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	9a 81       	ldd	r25, Y+2	; 0x02
    36da:	02 96       	adiw	r24, 0x02	; 2
    36dc:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	9a 81       	ldd	r25, Y+2	; 0x02
    36e4:	fc 01       	movw	r30, r24
    36e6:	82 89       	ldd	r24, Z+18	; 0x12
    36e8:	81 30       	cpi	r24, 0x01	; 1
    36ea:	b1 f5       	brne	.+108    	; 0x3758 <prvProcessExpiredTimer+0xc4>
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	9a 81       	ldd	r25, Y+2	; 0x02
    36f0:	fc 01       	movw	r30, r24
    36f2:	26 85       	ldd	r18, Z+14	; 0x0e
    36f4:	37 85       	ldd	r19, Z+15	; 0x0f
    36f6:	40 89       	ldd	r20, Z+16	; 0x10
    36f8:	51 89       	ldd	r21, Z+17	; 0x11
    36fa:	8c 81       	ldd	r24, Y+4	; 0x04
    36fc:	9d 81       	ldd	r25, Y+5	; 0x05
    36fe:	ae 81       	ldd	r26, Y+6	; 0x06
    3700:	bf 81       	ldd	r27, Y+7	; 0x07
    3702:	82 0f       	add	r24, r18
    3704:	93 1f       	adc	r25, r19
    3706:	a4 1f       	adc	r26, r20
    3708:	b5 1f       	adc	r27, r21
    370a:	ec 80       	ldd	r14, Y+4	; 0x04
    370c:	fd 80       	ldd	r15, Y+5	; 0x05
    370e:	0e 81       	ldd	r16, Y+6	; 0x06
    3710:	1f 81       	ldd	r17, Y+7	; 0x07
    3712:	28 85       	ldd	r18, Y+8	; 0x08
    3714:	39 85       	ldd	r19, Y+9	; 0x09
    3716:	4a 85       	ldd	r20, Y+10	; 0x0a
    3718:	5b 85       	ldd	r21, Y+11	; 0x0b
    371a:	e9 81       	ldd	r30, Y+1	; 0x01
    371c:	fa 81       	ldd	r31, Y+2	; 0x02
    371e:	67 01       	movw	r12, r14
    3720:	78 01       	movw	r14, r16
    3722:	89 01       	movw	r16, r18
    3724:	9a 01       	movw	r18, r20
    3726:	ac 01       	movw	r20, r24
    3728:	bd 01       	movw	r22, r26
    372a:	cf 01       	movw	r24, r30
    372c:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <prvInsertTimerInActiveList>
    3730:	88 23       	and	r24, r24
    3732:	91 f0       	breq	.+36     	; 0x3758 <prvProcessExpiredTimer+0xc4>
    3734:	8c 81       	ldd	r24, Y+4	; 0x04
    3736:	9d 81       	ldd	r25, Y+5	; 0x05
    3738:	ae 81       	ldd	r26, Y+6	; 0x06
    373a:	bf 81       	ldd	r27, Y+7	; 0x07
    373c:	e9 81       	ldd	r30, Y+1	; 0x01
    373e:	fa 81       	ldd	r31, Y+2	; 0x02
    3740:	c1 2c       	mov	r12, r1
    3742:	d1 2c       	mov	r13, r1
    3744:	76 01       	movw	r14, r12
    3746:	00 e0       	ldi	r16, 0x00	; 0
    3748:	10 e0       	ldi	r17, 0x00	; 0
    374a:	9c 01       	movw	r18, r24
    374c:	ad 01       	movw	r20, r26
    374e:	60 e0       	ldi	r22, 0x00	; 0
    3750:	cf 01       	movw	r24, r30
    3752:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <xTimerGenericCommand>
    3756:	8b 83       	std	Y+3, r24	; 0x03
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	9a 81       	ldd	r25, Y+2	; 0x02
    375c:	fc 01       	movw	r30, r24
    375e:	25 89       	ldd	r18, Z+21	; 0x15
    3760:	36 89       	ldd	r19, Z+22	; 0x16
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	9a 81       	ldd	r25, Y+2	; 0x02
    3766:	f9 01       	movw	r30, r18
    3768:	19 95       	eicall
    376a:	00 00       	nop
    376c:	2b 96       	adiw	r28, 0x0b	; 11
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	df 91       	pop	r29
    3774:	cf 91       	pop	r28
    3776:	1f 91       	pop	r17
    3778:	0f 91       	pop	r16
    377a:	ff 90       	pop	r15
    377c:	ef 90       	pop	r14
    377e:	df 90       	pop	r13
    3780:	cf 90       	pop	r12
    3782:	08 95       	ret

00003784 <prvTimerTask>:
    3784:	cf 93       	push	r28
    3786:	df 93       	push	r29
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	27 97       	sbiw	r28, 0x07	; 7
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	8e 83       	std	Y+6, r24	; 0x06
    3794:	9f 83       	std	Y+7, r25	; 0x07
    3796:	ce 01       	movw	r24, r28
    3798:	05 96       	adiw	r24, 0x05	; 5
    379a:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <prvGetNextExpireTime>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	9a 83       	std	Y+2, r25	; 0x02
    37a6:	ab 83       	std	Y+3, r26	; 0x03
    37a8:	bc 83       	std	Y+4, r27	; 0x04
    37aa:	2d 81       	ldd	r18, Y+5	; 0x05
    37ac:	89 81       	ldd	r24, Y+1	; 0x01
    37ae:	9a 81       	ldd	r25, Y+2	; 0x02
    37b0:	ab 81       	ldd	r26, Y+3	; 0x03
    37b2:	bc 81       	ldd	r27, Y+4	; 0x04
    37b4:	42 2f       	mov	r20, r18
    37b6:	bc 01       	movw	r22, r24
    37b8:	cd 01       	movw	r24, r26
    37ba:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <prvProcessTimerOrBlockTask>
    37be:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <prvProcessReceivedCommands>
    37c2:	e9 cf       	rjmp	.-46     	; 0x3796 <prvTimerTask+0x12>

000037c4 <prvProcessTimerOrBlockTask>:
    37c4:	ef 92       	push	r14
    37c6:	ff 92       	push	r15
    37c8:	0f 93       	push	r16
    37ca:	1f 93       	push	r17
    37cc:	cf 93       	push	r28
    37ce:	df 93       	push	r29
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	2a 97       	sbiw	r28, 0x0a	; 10
    37d6:	cd bf       	out	0x3d, r28	; 61
    37d8:	de bf       	out	0x3e, r29	; 62
    37da:	6e 83       	std	Y+6, r22	; 0x06
    37dc:	7f 83       	std	Y+7, r23	; 0x07
    37de:	88 87       	std	Y+8, r24	; 0x08
    37e0:	99 87       	std	Y+9, r25	; 0x09
    37e2:	4a 87       	std	Y+10, r20	; 0x0a
    37e4:	0e 94 34 14 	call	0x2868	; 0x2868 <vTaskSuspendAll>
    37e8:	ce 01       	movw	r24, r28
    37ea:	05 96       	adiw	r24, 0x05	; 5
    37ec:	0e 94 9b 1c 	call	0x3936	; 0x3936 <prvSampleTimeNow>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	89 83       	std	Y+1, r24	; 0x01
    37f6:	9a 83       	std	Y+2, r25	; 0x02
    37f8:	ab 83       	std	Y+3, r26	; 0x03
    37fa:	bc 83       	std	Y+4, r27	; 0x04
    37fc:	8d 81       	ldd	r24, Y+5	; 0x05
    37fe:	88 23       	and	r24, r24
    3800:	09 f0       	breq	.+2      	; 0x3804 <prvProcessTimerOrBlockTask+0x40>
    3802:	4e c0       	rjmp	.+156    	; 0x38a0 <prvProcessTimerOrBlockTask+0xdc>
    3804:	8a 85       	ldd	r24, Y+10	; 0x0a
    3806:	88 23       	and	r24, r24
    3808:	e1 f4       	brne	.+56     	; 0x3842 <prvProcessTimerOrBlockTask+0x7e>
    380a:	2e 81       	ldd	r18, Y+6	; 0x06
    380c:	3f 81       	ldd	r19, Y+7	; 0x07
    380e:	48 85       	ldd	r20, Y+8	; 0x08
    3810:	59 85       	ldd	r21, Y+9	; 0x09
    3812:	89 81       	ldd	r24, Y+1	; 0x01
    3814:	9a 81       	ldd	r25, Y+2	; 0x02
    3816:	ab 81       	ldd	r26, Y+3	; 0x03
    3818:	bc 81       	ldd	r27, Y+4	; 0x04
    381a:	82 17       	cp	r24, r18
    381c:	93 07       	cpc	r25, r19
    381e:	a4 07       	cpc	r26, r20
    3820:	b5 07       	cpc	r27, r21
    3822:	78 f0       	brcs	.+30     	; 0x3842 <prvProcessTimerOrBlockTask+0x7e>
    3824:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
    3828:	29 81       	ldd	r18, Y+1	; 0x01
    382a:	3a 81       	ldd	r19, Y+2	; 0x02
    382c:	4b 81       	ldd	r20, Y+3	; 0x03
    382e:	5c 81       	ldd	r21, Y+4	; 0x04
    3830:	8e 81       	ldd	r24, Y+6	; 0x06
    3832:	9f 81       	ldd	r25, Y+7	; 0x07
    3834:	a8 85       	ldd	r26, Y+8	; 0x08
    3836:	b9 85       	ldd	r27, Y+9	; 0x09
    3838:	bc 01       	movw	r22, r24
    383a:	cd 01       	movw	r24, r26
    383c:	0e 94 4a 1b 	call	0x3694	; 0x3694 <prvProcessExpiredTimer>
    3840:	31 c0       	rjmp	.+98     	; 0x38a4 <prvProcessTimerOrBlockTask+0xe0>
    3842:	8a 85       	ldd	r24, Y+10	; 0x0a
    3844:	88 23       	and	r24, r24
    3846:	59 f0       	breq	.+22     	; 0x385e <prvProcessTimerOrBlockTask+0x9a>
    3848:	80 91 a8 2c 	lds	r24, 0x2CA8	; 0x802ca8 <pxOverflowTimerList>
    384c:	90 91 a9 2c 	lds	r25, 0x2CA9	; 0x802ca9 <pxOverflowTimerList+0x1>
    3850:	fc 01       	movw	r30, r24
    3852:	90 81       	ld	r25, Z
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	99 23       	and	r25, r25
    3858:	09 f0       	breq	.+2      	; 0x385c <prvProcessTimerOrBlockTask+0x98>
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	8a 87       	std	Y+10, r24	; 0x0a
    385e:	2e 81       	ldd	r18, Y+6	; 0x06
    3860:	3f 81       	ldd	r19, Y+7	; 0x07
    3862:	48 85       	ldd	r20, Y+8	; 0x08
    3864:	59 85       	ldd	r21, Y+9	; 0x09
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	9a 81       	ldd	r25, Y+2	; 0x02
    386a:	ab 81       	ldd	r26, Y+3	; 0x03
    386c:	bc 81       	ldd	r27, Y+4	; 0x04
    386e:	79 01       	movw	r14, r18
    3870:	8a 01       	movw	r16, r20
    3872:	e8 1a       	sub	r14, r24
    3874:	f9 0a       	sbc	r15, r25
    3876:	0a 0b       	sbc	r16, r26
    3878:	1b 0b       	sbc	r17, r27
    387a:	d8 01       	movw	r26, r16
    387c:	c7 01       	movw	r24, r14
    387e:	e0 91 aa 2c 	lds	r30, 0x2CAA	; 0x802caa <xTimerQueue>
    3882:	f0 91 ab 2c 	lds	r31, 0x2CAB	; 0x802cab <xTimerQueue+0x1>
    3886:	2a 85       	ldd	r18, Y+10	; 0x0a
    3888:	ac 01       	movw	r20, r24
    388a:	bd 01       	movw	r22, r26
    388c:	cf 01       	movw	r24, r30
    388e:	0e 94 99 11 	call	0x2332	; 0x2332 <vQueueWaitForMessageRestricted>
    3892:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
    3896:	88 23       	and	r24, r24
    3898:	29 f4       	brne	.+10     	; 0x38a4 <prvProcessTimerOrBlockTask+0xe0>
    389a:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    389e:	02 c0       	rjmp	.+4      	; 0x38a4 <prvProcessTimerOrBlockTask+0xe0>
    38a0:	0e 94 41 14 	call	0x2882	; 0x2882 <xTaskResumeAll>
    38a4:	00 00       	nop
    38a6:	2a 96       	adiw	r28, 0x0a	; 10
    38a8:	cd bf       	out	0x3d, r28	; 61
    38aa:	de bf       	out	0x3e, r29	; 62
    38ac:	df 91       	pop	r29
    38ae:	cf 91       	pop	r28
    38b0:	1f 91       	pop	r17
    38b2:	0f 91       	pop	r16
    38b4:	ff 90       	pop	r15
    38b6:	ef 90       	pop	r14
    38b8:	08 95       	ret

000038ba <prvGetNextExpireTime>:
    38ba:	cf 93       	push	r28
    38bc:	df 93       	push	r29
    38be:	00 d0       	rcall	.+0      	; 0x38c0 <prvGetNextExpireTime+0x6>
    38c0:	00 d0       	rcall	.+0      	; 0x38c2 <prvGetNextExpireTime+0x8>
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
    38c6:	8d 83       	std	Y+5, r24	; 0x05
    38c8:	9e 83       	std	Y+6, r25	; 0x06
    38ca:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTimerList>
    38ce:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTimerList+0x1>
    38d2:	fc 01       	movw	r30, r24
    38d4:	90 81       	ld	r25, Z
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	99 23       	and	r25, r25
    38da:	09 f0       	breq	.+2      	; 0x38de <prvGetNextExpireTime+0x24>
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	28 2f       	mov	r18, r24
    38e0:	8d 81       	ldd	r24, Y+5	; 0x05
    38e2:	9e 81       	ldd	r25, Y+6	; 0x06
    38e4:	fc 01       	movw	r30, r24
    38e6:	20 83       	st	Z, r18
    38e8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ea:	9e 81       	ldd	r25, Y+6	; 0x06
    38ec:	fc 01       	movw	r30, r24
    38ee:	80 81       	ld	r24, Z
    38f0:	88 23       	and	r24, r24
    38f2:	89 f4       	brne	.+34     	; 0x3916 <prvGetNextExpireTime+0x5c>
    38f4:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTimerList>
    38f8:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTimerList+0x1>
    38fc:	fc 01       	movw	r30, r24
    38fe:	87 81       	ldd	r24, Z+7	; 0x07
    3900:	90 85       	ldd	r25, Z+8	; 0x08
    3902:	fc 01       	movw	r30, r24
    3904:	80 81       	ld	r24, Z
    3906:	91 81       	ldd	r25, Z+1	; 0x01
    3908:	a2 81       	ldd	r26, Z+2	; 0x02
    390a:	b3 81       	ldd	r27, Z+3	; 0x03
    390c:	89 83       	std	Y+1, r24	; 0x01
    390e:	9a 83       	std	Y+2, r25	; 0x02
    3910:	ab 83       	std	Y+3, r26	; 0x03
    3912:	bc 83       	std	Y+4, r27	; 0x04
    3914:	04 c0       	rjmp	.+8      	; 0x391e <prvGetNextExpireTime+0x64>
    3916:	19 82       	std	Y+1, r1	; 0x01
    3918:	1a 82       	std	Y+2, r1	; 0x02
    391a:	1b 82       	std	Y+3, r1	; 0x03
    391c:	1c 82       	std	Y+4, r1	; 0x04
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	9a 81       	ldd	r25, Y+2	; 0x02
    3922:	ab 81       	ldd	r26, Y+3	; 0x03
    3924:	bc 81       	ldd	r27, Y+4	; 0x04
    3926:	bc 01       	movw	r22, r24
    3928:	cd 01       	movw	r24, r26
    392a:	26 96       	adiw	r28, 0x06	; 6
    392c:	cd bf       	out	0x3d, r28	; 61
    392e:	de bf       	out	0x3e, r29	; 62
    3930:	df 91       	pop	r29
    3932:	cf 91       	pop	r28
    3934:	08 95       	ret

00003936 <prvSampleTimeNow>:
    3936:	cf 93       	push	r28
    3938:	df 93       	push	r29
    393a:	00 d0       	rcall	.+0      	; 0x393c <prvSampleTimeNow+0x6>
    393c:	00 d0       	rcall	.+0      	; 0x393e <prvSampleTimeNow+0x8>
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	8d 83       	std	Y+5, r24	; 0x05
    3944:	9e 83       	std	Y+6, r25	; 0x06
    3946:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <xTaskGetTickCount>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	89 83       	std	Y+1, r24	; 0x01
    3950:	9a 83       	std	Y+2, r25	; 0x02
    3952:	ab 83       	std	Y+3, r26	; 0x03
    3954:	bc 83       	std	Y+4, r27	; 0x04
    3956:	80 91 ae 2c 	lds	r24, 0x2CAE	; 0x802cae <xLastTime.4745>
    395a:	90 91 af 2c 	lds	r25, 0x2CAF	; 0x802caf <xLastTime.4745+0x1>
    395e:	a0 91 b0 2c 	lds	r26, 0x2CB0	; 0x802cb0 <xLastTime.4745+0x2>
    3962:	b0 91 b1 2c 	lds	r27, 0x2CB1	; 0x802cb1 <xLastTime.4745+0x3>
    3966:	29 81       	ldd	r18, Y+1	; 0x01
    3968:	3a 81       	ldd	r19, Y+2	; 0x02
    396a:	4b 81       	ldd	r20, Y+3	; 0x03
    396c:	5c 81       	ldd	r21, Y+4	; 0x04
    396e:	28 17       	cp	r18, r24
    3970:	39 07       	cpc	r19, r25
    3972:	4a 07       	cpc	r20, r26
    3974:	5b 07       	cpc	r21, r27
    3976:	40 f4       	brcc	.+16     	; 0x3988 <prvSampleTimeNow+0x52>
    3978:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <prvSwitchTimerLists>
    397c:	8d 81       	ldd	r24, Y+5	; 0x05
    397e:	9e 81       	ldd	r25, Y+6	; 0x06
    3980:	21 e0       	ldi	r18, 0x01	; 1
    3982:	fc 01       	movw	r30, r24
    3984:	20 83       	st	Z, r18
    3986:	04 c0       	rjmp	.+8      	; 0x3990 <prvSampleTimeNow+0x5a>
    3988:	8d 81       	ldd	r24, Y+5	; 0x05
    398a:	9e 81       	ldd	r25, Y+6	; 0x06
    398c:	fc 01       	movw	r30, r24
    398e:	10 82       	st	Z, r1
    3990:	89 81       	ldd	r24, Y+1	; 0x01
    3992:	9a 81       	ldd	r25, Y+2	; 0x02
    3994:	ab 81       	ldd	r26, Y+3	; 0x03
    3996:	bc 81       	ldd	r27, Y+4	; 0x04
    3998:	80 93 ae 2c 	sts	0x2CAE, r24	; 0x802cae <xLastTime.4745>
    399c:	90 93 af 2c 	sts	0x2CAF, r25	; 0x802caf <xLastTime.4745+0x1>
    39a0:	a0 93 b0 2c 	sts	0x2CB0, r26	; 0x802cb0 <xLastTime.4745+0x2>
    39a4:	b0 93 b1 2c 	sts	0x2CB1, r27	; 0x802cb1 <xLastTime.4745+0x3>
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	9a 81       	ldd	r25, Y+2	; 0x02
    39ac:	ab 81       	ldd	r26, Y+3	; 0x03
    39ae:	bc 81       	ldd	r27, Y+4	; 0x04
    39b0:	bc 01       	movw	r22, r24
    39b2:	cd 01       	movw	r24, r26
    39b4:	26 96       	adiw	r28, 0x06	; 6
    39b6:	cd bf       	out	0x3d, r28	; 61
    39b8:	de bf       	out	0x3e, r29	; 62
    39ba:	df 91       	pop	r29
    39bc:	cf 91       	pop	r28
    39be:	08 95       	ret

000039c0 <prvInsertTimerInActiveList>:
    39c0:	cf 92       	push	r12
    39c2:	df 92       	push	r13
    39c4:	ef 92       	push	r14
    39c6:	ff 92       	push	r15
    39c8:	0f 93       	push	r16
    39ca:	1f 93       	push	r17
    39cc:	cf 93       	push	r28
    39ce:	df 93       	push	r29
    39d0:	cd b7       	in	r28, 0x3d	; 61
    39d2:	de b7       	in	r29, 0x3e	; 62
    39d4:	2f 97       	sbiw	r28, 0x0f	; 15
    39d6:	cd bf       	out	0x3d, r28	; 61
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	8a 83       	std	Y+2, r24	; 0x02
    39dc:	9b 83       	std	Y+3, r25	; 0x03
    39de:	4c 83       	std	Y+4, r20	; 0x04
    39e0:	5d 83       	std	Y+5, r21	; 0x05
    39e2:	6e 83       	std	Y+6, r22	; 0x06
    39e4:	7f 83       	std	Y+7, r23	; 0x07
    39e6:	08 87       	std	Y+8, r16	; 0x08
    39e8:	19 87       	std	Y+9, r17	; 0x09
    39ea:	2a 87       	std	Y+10, r18	; 0x0a
    39ec:	3b 87       	std	Y+11, r19	; 0x0b
    39ee:	cc 86       	std	Y+12, r12	; 0x0c
    39f0:	dd 86       	std	Y+13, r13	; 0x0d
    39f2:	ee 86       	std	Y+14, r14	; 0x0e
    39f4:	ff 86       	std	Y+15, r15	; 0x0f
    39f6:	19 82       	std	Y+1, r1	; 0x01
    39f8:	2a 81       	ldd	r18, Y+2	; 0x02
    39fa:	3b 81       	ldd	r19, Y+3	; 0x03
    39fc:	8c 81       	ldd	r24, Y+4	; 0x04
    39fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3a00:	ae 81       	ldd	r26, Y+6	; 0x06
    3a02:	bf 81       	ldd	r27, Y+7	; 0x07
    3a04:	f9 01       	movw	r30, r18
    3a06:	82 83       	std	Z+2, r24	; 0x02
    3a08:	93 83       	std	Z+3, r25	; 0x03
    3a0a:	a4 83       	std	Z+4, r26	; 0x04
    3a0c:	b5 83       	std	Z+5, r27	; 0x05
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	9b 81       	ldd	r25, Y+3	; 0x03
    3a12:	2a 81       	ldd	r18, Y+2	; 0x02
    3a14:	3b 81       	ldd	r19, Y+3	; 0x03
    3a16:	fc 01       	movw	r30, r24
    3a18:	22 87       	std	Z+10, r18	; 0x0a
    3a1a:	33 87       	std	Z+11, r19	; 0x0b
    3a1c:	2c 81       	ldd	r18, Y+4	; 0x04
    3a1e:	3d 81       	ldd	r19, Y+5	; 0x05
    3a20:	4e 81       	ldd	r20, Y+6	; 0x06
    3a22:	5f 81       	ldd	r21, Y+7	; 0x07
    3a24:	88 85       	ldd	r24, Y+8	; 0x08
    3a26:	99 85       	ldd	r25, Y+9	; 0x09
    3a28:	aa 85       	ldd	r26, Y+10	; 0x0a
    3a2a:	bb 85       	ldd	r27, Y+11	; 0x0b
    3a2c:	82 17       	cp	r24, r18
    3a2e:	93 07       	cpc	r25, r19
    3a30:	a4 07       	cpc	r26, r20
    3a32:	b5 07       	cpc	r27, r21
    3a34:	40 f1       	brcs	.+80     	; 0x3a86 <prvInsertTimerInActiveList+0xc6>
    3a36:	28 85       	ldd	r18, Y+8	; 0x08
    3a38:	39 85       	ldd	r19, Y+9	; 0x09
    3a3a:	4a 85       	ldd	r20, Y+10	; 0x0a
    3a3c:	5b 85       	ldd	r21, Y+11	; 0x0b
    3a3e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a40:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a42:	ae 85       	ldd	r26, Y+14	; 0x0e
    3a44:	bf 85       	ldd	r27, Y+15	; 0x0f
    3a46:	28 1b       	sub	r18, r24
    3a48:	39 0b       	sbc	r19, r25
    3a4a:	4a 0b       	sbc	r20, r26
    3a4c:	5b 0b       	sbc	r21, r27
    3a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a50:	9b 81       	ldd	r25, Y+3	; 0x03
    3a52:	fc 01       	movw	r30, r24
    3a54:	86 85       	ldd	r24, Z+14	; 0x0e
    3a56:	97 85       	ldd	r25, Z+15	; 0x0f
    3a58:	a0 89       	ldd	r26, Z+16	; 0x10
    3a5a:	b1 89       	ldd	r27, Z+17	; 0x11
    3a5c:	28 17       	cp	r18, r24
    3a5e:	39 07       	cpc	r19, r25
    3a60:	4a 07       	cpc	r20, r26
    3a62:	5b 07       	cpc	r21, r27
    3a64:	18 f0       	brcs	.+6      	; 0x3a6c <prvInsertTimerInActiveList+0xac>
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	89 83       	std	Y+1, r24	; 0x01
    3a6a:	36 c0       	rjmp	.+108    	; 0x3ad8 <prvInsertTimerInActiveList+0x118>
    3a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a70:	9c 01       	movw	r18, r24
    3a72:	2e 5f       	subi	r18, 0xFE	; 254
    3a74:	3f 4f       	sbci	r19, 0xFF	; 255
    3a76:	80 91 a8 2c 	lds	r24, 0x2CA8	; 0x802ca8 <pxOverflowTimerList>
    3a7a:	90 91 a9 2c 	lds	r25, 0x2CA9	; 0x802ca9 <pxOverflowTimerList+0x1>
    3a7e:	b9 01       	movw	r22, r18
    3a80:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    3a84:	29 c0       	rjmp	.+82     	; 0x3ad8 <prvInsertTimerInActiveList+0x118>
    3a86:	28 85       	ldd	r18, Y+8	; 0x08
    3a88:	39 85       	ldd	r19, Y+9	; 0x09
    3a8a:	4a 85       	ldd	r20, Y+10	; 0x0a
    3a8c:	5b 85       	ldd	r21, Y+11	; 0x0b
    3a8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a90:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a92:	ae 85       	ldd	r26, Y+14	; 0x0e
    3a94:	bf 85       	ldd	r27, Y+15	; 0x0f
    3a96:	28 17       	cp	r18, r24
    3a98:	39 07       	cpc	r19, r25
    3a9a:	4a 07       	cpc	r20, r26
    3a9c:	5b 07       	cpc	r21, r27
    3a9e:	80 f4       	brcc	.+32     	; 0x3ac0 <prvInsertTimerInActiveList+0x100>
    3aa0:	2c 81       	ldd	r18, Y+4	; 0x04
    3aa2:	3d 81       	ldd	r19, Y+5	; 0x05
    3aa4:	4e 81       	ldd	r20, Y+6	; 0x06
    3aa6:	5f 81       	ldd	r21, Y+7	; 0x07
    3aa8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aaa:	9d 85       	ldd	r25, Y+13	; 0x0d
    3aac:	ae 85       	ldd	r26, Y+14	; 0x0e
    3aae:	bf 85       	ldd	r27, Y+15	; 0x0f
    3ab0:	28 17       	cp	r18, r24
    3ab2:	39 07       	cpc	r19, r25
    3ab4:	4a 07       	cpc	r20, r26
    3ab6:	5b 07       	cpc	r21, r27
    3ab8:	18 f0       	brcs	.+6      	; 0x3ac0 <prvInsertTimerInActiveList+0x100>
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	89 83       	std	Y+1, r24	; 0x01
    3abe:	0c c0       	rjmp	.+24     	; 0x3ad8 <prvInsertTimerInActiveList+0x118>
    3ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac4:	9c 01       	movw	r18, r24
    3ac6:	2e 5f       	subi	r18, 0xFE	; 254
    3ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aca:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTimerList>
    3ace:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTimerList+0x1>
    3ad2:	b9 01       	movw	r22, r18
    3ad4:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    3ad8:	89 81       	ldd	r24, Y+1	; 0x01
    3ada:	2f 96       	adiw	r28, 0x0f	; 15
    3adc:	cd bf       	out	0x3d, r28	; 61
    3ade:	de bf       	out	0x3e, r29	; 62
    3ae0:	df 91       	pop	r29
    3ae2:	cf 91       	pop	r28
    3ae4:	1f 91       	pop	r17
    3ae6:	0f 91       	pop	r16
    3ae8:	ff 90       	pop	r15
    3aea:	ef 90       	pop	r14
    3aec:	df 90       	pop	r13
    3aee:	cf 90       	pop	r12
    3af0:	08 95       	ret

00003af2 <prvProcessReceivedCommands>:
    3af2:	cf 92       	push	r12
    3af4:	df 92       	push	r13
    3af6:	ef 92       	push	r14
    3af8:	ff 92       	push	r15
    3afa:	0f 93       	push	r16
    3afc:	1f 93       	push	r17
    3afe:	cf 93       	push	r28
    3b00:	df 93       	push	r29
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	65 97       	sbiw	r28, 0x15	; 21
    3b08:	cd bf       	out	0x3d, r28	; 61
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	e0 c0       	rjmp	.+448    	; 0x3cce <prvProcessReceivedCommands+0x1dc>
    3b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b10:	88 23       	and	r24, r24
    3b12:	fc f4       	brge	.+62     	; 0x3b52 <prvProcessReceivedCommands+0x60>
    3b14:	ce 01       	movw	r24, r28
    3b16:	0a 96       	adiw	r24, 0x0a	; 10
    3b18:	01 96       	adiw	r24, 0x01	; 1
    3b1a:	89 83       	std	Y+1, r24	; 0x01
    3b1c:	9a 83       	std	Y+2, r25	; 0x02
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	9a 81       	ldd	r25, Y+2	; 0x02
    3b22:	fc 01       	movw	r30, r24
    3b24:	20 81       	ld	r18, Z
    3b26:	31 81       	ldd	r19, Z+1	; 0x01
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
    3b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	84 81       	ldd	r24, Z+4	; 0x04
    3b30:	95 81       	ldd	r25, Z+5	; 0x05
    3b32:	a6 81       	ldd	r26, Z+6	; 0x06
    3b34:	b7 81       	ldd	r27, Z+7	; 0x07
    3b36:	49 81       	ldd	r20, Y+1	; 0x01
    3b38:	5a 81       	ldd	r21, Y+2	; 0x02
    3b3a:	fa 01       	movw	r30, r20
    3b3c:	02 80       	ldd	r0, Z+2	; 0x02
    3b3e:	f3 81       	ldd	r31, Z+3	; 0x03
    3b40:	e0 2d       	mov	r30, r0
    3b42:	ec 8b       	std	Y+20, r30	; 0x14
    3b44:	fd 8b       	std	Y+21, r31	; 0x15
    3b46:	ac 01       	movw	r20, r24
    3b48:	bd 01       	movw	r22, r26
    3b4a:	8c 89       	ldd	r24, Y+20	; 0x14
    3b4c:	9d 89       	ldd	r25, Y+21	; 0x15
    3b4e:	f9 01       	movw	r30, r18
    3b50:	19 95       	eicall
    3b52:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b54:	88 23       	and	r24, r24
    3b56:	0c f4       	brge	.+2      	; 0x3b5a <prvProcessReceivedCommands+0x68>
    3b58:	ba c0       	rjmp	.+372    	; 0x3cce <prvProcessReceivedCommands+0x1dc>
    3b5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b5c:	98 89       	ldd	r25, Y+16	; 0x10
    3b5e:	8b 83       	std	Y+3, r24	; 0x03
    3b60:	9c 83       	std	Y+4, r25	; 0x04
    3b62:	8b 81       	ldd	r24, Y+3	; 0x03
    3b64:	9c 81       	ldd	r25, Y+4	; 0x04
    3b66:	fc 01       	movw	r30, r24
    3b68:	84 85       	ldd	r24, Z+12	; 0x0c
    3b6a:	95 85       	ldd	r25, Z+13	; 0x0d
    3b6c:	89 2b       	or	r24, r25
    3b6e:	29 f0       	breq	.+10     	; 0x3b7a <prvProcessReceivedCommands+0x88>
    3b70:	8b 81       	ldd	r24, Y+3	; 0x03
    3b72:	9c 81       	ldd	r25, Y+4	; 0x04
    3b74:	02 96       	adiw	r24, 0x02	; 2
    3b76:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3b7a:	ce 01       	movw	r24, r28
    3b7c:	43 96       	adiw	r24, 0x13	; 19
    3b7e:	0e 94 9b 1c 	call	0x3936	; 0x3936 <prvSampleTimeNow>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	8d 83       	std	Y+5, r24	; 0x05
    3b88:	9e 83       	std	Y+6, r25	; 0x06
    3b8a:	af 83       	std	Y+7, r26	; 0x07
    3b8c:	b8 87       	std	Y+8, r27	; 0x08
    3b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b90:	08 2e       	mov	r0, r24
    3b92:	00 0c       	add	r0, r0
    3b94:	99 0b       	sbc	r25, r25
    3b96:	09 2e       	mov	r0, r25
    3b98:	00 0c       	add	r0, r0
    3b9a:	aa 0b       	sbc	r26, r26
    3b9c:	bb 0b       	sbc	r27, r27
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	50 e0       	ldi	r21, 0x00	; 0
    3ba2:	29 e0       	ldi	r18, 0x09	; 9
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	84 1b       	sub	r24, r20
    3ba8:	95 0b       	sbc	r25, r21
    3baa:	28 17       	cp	r18, r24
    3bac:	39 07       	cpc	r19, r25
    3bae:	08 f4       	brcc	.+2      	; 0x3bb2 <prvProcessReceivedCommands+0xc0>
    3bb0:	8d c0       	rjmp	.+282    	; 0x3ccc <prvProcessReceivedCommands+0x1da>
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	88 27       	eor	r24, r24
    3bb6:	e2 50       	subi	r30, 0x02	; 2
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	8f 4f       	sbci	r24, 0xFF	; 255
    3bbc:	0c 94 1d 31 	jmp	0x623a	; 0x623a <__tablejump2__>
    3bc0:	eb 84       	ldd	r14, Y+11	; 0x0b
    3bc2:	fc 84       	ldd	r15, Y+12	; 0x0c
    3bc4:	0d 85       	ldd	r16, Y+13	; 0x0d
    3bc6:	1e 85       	ldd	r17, Y+14	; 0x0e
    3bc8:	2b 85       	ldd	r18, Y+11	; 0x0b
    3bca:	3c 85       	ldd	r19, Y+12	; 0x0c
    3bcc:	4d 85       	ldd	r20, Y+13	; 0x0d
    3bce:	5e 85       	ldd	r21, Y+14	; 0x0e
    3bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	86 85       	ldd	r24, Z+14	; 0x0e
    3bd8:	97 85       	ldd	r25, Z+15	; 0x0f
    3bda:	a0 89       	ldd	r26, Z+16	; 0x10
    3bdc:	b1 89       	ldd	r27, Z+17	; 0x11
    3bde:	82 0f       	add	r24, r18
    3be0:	93 1f       	adc	r25, r19
    3be2:	a4 1f       	adc	r26, r20
    3be4:	b5 1f       	adc	r27, r21
    3be6:	2d 81       	ldd	r18, Y+5	; 0x05
    3be8:	3e 81       	ldd	r19, Y+6	; 0x06
    3bea:	4f 81       	ldd	r20, Y+7	; 0x07
    3bec:	58 85       	ldd	r21, Y+8	; 0x08
    3bee:	eb 81       	ldd	r30, Y+3	; 0x03
    3bf0:	fc 81       	ldd	r31, Y+4	; 0x04
    3bf2:	67 01       	movw	r12, r14
    3bf4:	78 01       	movw	r14, r16
    3bf6:	89 01       	movw	r16, r18
    3bf8:	9a 01       	movw	r18, r20
    3bfa:	ac 01       	movw	r20, r24
    3bfc:	bd 01       	movw	r22, r26
    3bfe:	cf 01       	movw	r24, r30
    3c00:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <prvInsertTimerInActiveList>
    3c04:	88 23       	and	r24, r24
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <prvProcessReceivedCommands+0x118>
    3c08:	62 c0       	rjmp	.+196    	; 0x3cce <prvProcessReceivedCommands+0x1dc>
    3c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c0e:	fc 01       	movw	r30, r24
    3c10:	25 89       	ldd	r18, Z+21	; 0x15
    3c12:	36 89       	ldd	r19, Z+22	; 0x16
    3c14:	8b 81       	ldd	r24, Y+3	; 0x03
    3c16:	9c 81       	ldd	r25, Y+4	; 0x04
    3c18:	f9 01       	movw	r30, r18
    3c1a:	19 95       	eicall
    3c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c20:	fc 01       	movw	r30, r24
    3c22:	82 89       	ldd	r24, Z+18	; 0x12
    3c24:	81 30       	cpi	r24, 0x01	; 1
    3c26:	09 f0       	breq	.+2      	; 0x3c2a <prvProcessReceivedCommands+0x138>
    3c28:	52 c0       	rjmp	.+164    	; 0x3cce <prvProcessReceivedCommands+0x1dc>
    3c2a:	2b 85       	ldd	r18, Y+11	; 0x0b
    3c2c:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c2e:	4d 85       	ldd	r20, Y+13	; 0x0d
    3c30:	5e 85       	ldd	r21, Y+14	; 0x0e
    3c32:	8b 81       	ldd	r24, Y+3	; 0x03
    3c34:	9c 81       	ldd	r25, Y+4	; 0x04
    3c36:	fc 01       	movw	r30, r24
    3c38:	86 85       	ldd	r24, Z+14	; 0x0e
    3c3a:	97 85       	ldd	r25, Z+15	; 0x0f
    3c3c:	a0 89       	ldd	r26, Z+16	; 0x10
    3c3e:	b1 89       	ldd	r27, Z+17	; 0x11
    3c40:	82 0f       	add	r24, r18
    3c42:	93 1f       	adc	r25, r19
    3c44:	a4 1f       	adc	r26, r20
    3c46:	b5 1f       	adc	r27, r21
    3c48:	eb 81       	ldd	r30, Y+3	; 0x03
    3c4a:	fc 81       	ldd	r31, Y+4	; 0x04
    3c4c:	c1 2c       	mov	r12, r1
    3c4e:	d1 2c       	mov	r13, r1
    3c50:	76 01       	movw	r14, r12
    3c52:	00 e0       	ldi	r16, 0x00	; 0
    3c54:	10 e0       	ldi	r17, 0x00	; 0
    3c56:	9c 01       	movw	r18, r24
    3c58:	ad 01       	movw	r20, r26
    3c5a:	60 e0       	ldi	r22, 0x00	; 0
    3c5c:	cf 01       	movw	r24, r30
    3c5e:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <xTimerGenericCommand>
    3c62:	89 87       	std	Y+9, r24	; 0x09
    3c64:	34 c0       	rjmp	.+104    	; 0x3cce <prvProcessReceivedCommands+0x1dc>
    3c66:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c68:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c6a:	ad 85       	ldd	r26, Y+13	; 0x0d
    3c6c:	be 85       	ldd	r27, Y+14	; 0x0e
    3c6e:	2b 81       	ldd	r18, Y+3	; 0x03
    3c70:	3c 81       	ldd	r19, Y+4	; 0x04
    3c72:	f9 01       	movw	r30, r18
    3c74:	86 87       	std	Z+14, r24	; 0x0e
    3c76:	97 87       	std	Z+15, r25	; 0x0f
    3c78:	a0 8b       	std	Z+16, r26	; 0x10
    3c7a:	b1 8b       	std	Z+17, r27	; 0x11
    3c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c80:	fc 01       	movw	r30, r24
    3c82:	26 85       	ldd	r18, Z+14	; 0x0e
    3c84:	37 85       	ldd	r19, Z+15	; 0x0f
    3c86:	40 89       	ldd	r20, Z+16	; 0x10
    3c88:	51 89       	ldd	r21, Z+17	; 0x11
    3c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c8e:	af 81       	ldd	r26, Y+7	; 0x07
    3c90:	b8 85       	ldd	r27, Y+8	; 0x08
    3c92:	82 0f       	add	r24, r18
    3c94:	93 1f       	adc	r25, r19
    3c96:	a4 1f       	adc	r26, r20
    3c98:	b5 1f       	adc	r27, r21
    3c9a:	ed 80       	ldd	r14, Y+5	; 0x05
    3c9c:	fe 80       	ldd	r15, Y+6	; 0x06
    3c9e:	0f 81       	ldd	r16, Y+7	; 0x07
    3ca0:	18 85       	ldd	r17, Y+8	; 0x08
    3ca2:	2d 81       	ldd	r18, Y+5	; 0x05
    3ca4:	3e 81       	ldd	r19, Y+6	; 0x06
    3ca6:	4f 81       	ldd	r20, Y+7	; 0x07
    3ca8:	58 85       	ldd	r21, Y+8	; 0x08
    3caa:	eb 81       	ldd	r30, Y+3	; 0x03
    3cac:	fc 81       	ldd	r31, Y+4	; 0x04
    3cae:	67 01       	movw	r12, r14
    3cb0:	78 01       	movw	r14, r16
    3cb2:	89 01       	movw	r16, r18
    3cb4:	9a 01       	movw	r18, r20
    3cb6:	ac 01       	movw	r20, r24
    3cb8:	bd 01       	movw	r22, r26
    3cba:	cf 01       	movw	r24, r30
    3cbc:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <prvInsertTimerInActiveList>
    3cc0:	06 c0       	rjmp	.+12     	; 0x3cce <prvProcessReceivedCommands+0x1dc>
    3cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <vPortFree>
    3cca:	01 c0       	rjmp	.+2      	; 0x3cce <prvProcessReceivedCommands+0x1dc>
    3ccc:	00 00       	nop
    3cce:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <xTimerQueue>
    3cd2:	90 91 ab 2c 	lds	r25, 0x2CAB	; 0x802cab <xTimerQueue+0x1>
    3cd6:	be 01       	movw	r22, r28
    3cd8:	66 5f       	subi	r22, 0xF6	; 246
    3cda:	7f 4f       	sbci	r23, 0xFF	; 255
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	a9 01       	movw	r20, r18
    3ce2:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <xQueueReceive>
    3ce6:	88 23       	and	r24, r24
    3ce8:	09 f0       	breq	.+2      	; 0x3cec <prvProcessReceivedCommands+0x1fa>
    3cea:	11 cf       	rjmp	.-478    	; 0x3b0e <prvProcessReceivedCommands+0x1c>
    3cec:	00 00       	nop
    3cee:	65 96       	adiw	r28, 0x15	; 21
    3cf0:	cd bf       	out	0x3d, r28	; 61
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	df 91       	pop	r29
    3cf6:	cf 91       	pop	r28
    3cf8:	1f 91       	pop	r17
    3cfa:	0f 91       	pop	r16
    3cfc:	ff 90       	pop	r15
    3cfe:	ef 90       	pop	r14
    3d00:	df 90       	pop	r13
    3d02:	cf 90       	pop	r12
    3d04:	08 95       	ret

00003d06 <prvSwitchTimerLists>:
    3d06:	cf 92       	push	r12
    3d08:	df 92       	push	r13
    3d0a:	ef 92       	push	r14
    3d0c:	ff 92       	push	r15
    3d0e:	0f 93       	push	r16
    3d10:	1f 93       	push	r17
    3d12:	cf 93       	push	r28
    3d14:	df 93       	push	r29
    3d16:	cd b7       	in	r28, 0x3d	; 61
    3d18:	de b7       	in	r29, 0x3e	; 62
    3d1a:	2d 97       	sbiw	r28, 0x0d	; 13
    3d1c:	cd bf       	out	0x3d, r28	; 61
    3d1e:	de bf       	out	0x3e, r29	; 62
    3d20:	82 c0       	rjmp	.+260    	; 0x3e26 <prvSwitchTimerLists+0x120>
    3d22:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTimerList>
    3d26:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTimerList+0x1>
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	87 81       	ldd	r24, Z+7	; 0x07
    3d2e:	90 85       	ldd	r25, Z+8	; 0x08
    3d30:	fc 01       	movw	r30, r24
    3d32:	80 81       	ld	r24, Z
    3d34:	91 81       	ldd	r25, Z+1	; 0x01
    3d36:	a2 81       	ldd	r26, Z+2	; 0x02
    3d38:	b3 81       	ldd	r27, Z+3	; 0x03
    3d3a:	89 83       	std	Y+1, r24	; 0x01
    3d3c:	9a 83       	std	Y+2, r25	; 0x02
    3d3e:	ab 83       	std	Y+3, r26	; 0x03
    3d40:	bc 83       	std	Y+4, r27	; 0x04
    3d42:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTimerList>
    3d46:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTimerList+0x1>
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	87 81       	ldd	r24, Z+7	; 0x07
    3d4e:	90 85       	ldd	r25, Z+8	; 0x08
    3d50:	fc 01       	movw	r30, r24
    3d52:	80 85       	ldd	r24, Z+8	; 0x08
    3d54:	91 85       	ldd	r25, Z+9	; 0x09
    3d56:	8d 83       	std	Y+5, r24	; 0x05
    3d58:	9e 83       	std	Y+6, r25	; 0x06
    3d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5e:	02 96       	adiw	r24, 0x02	; 2
    3d60:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3d64:	8d 81       	ldd	r24, Y+5	; 0x05
    3d66:	9e 81       	ldd	r25, Y+6	; 0x06
    3d68:	fc 01       	movw	r30, r24
    3d6a:	25 89       	ldd	r18, Z+21	; 0x15
    3d6c:	36 89       	ldd	r19, Z+22	; 0x16
    3d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d70:	9e 81       	ldd	r25, Y+6	; 0x06
    3d72:	f9 01       	movw	r30, r18
    3d74:	19 95       	eicall
    3d76:	8d 81       	ldd	r24, Y+5	; 0x05
    3d78:	9e 81       	ldd	r25, Y+6	; 0x06
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	82 89       	ldd	r24, Z+18	; 0x12
    3d7e:	81 30       	cpi	r24, 0x01	; 1
    3d80:	09 f0       	breq	.+2      	; 0x3d84 <prvSwitchTimerLists+0x7e>
    3d82:	51 c0       	rjmp	.+162    	; 0x3e26 <prvSwitchTimerLists+0x120>
    3d84:	8d 81       	ldd	r24, Y+5	; 0x05
    3d86:	9e 81       	ldd	r25, Y+6	; 0x06
    3d88:	fc 01       	movw	r30, r24
    3d8a:	26 85       	ldd	r18, Z+14	; 0x0e
    3d8c:	37 85       	ldd	r19, Z+15	; 0x0f
    3d8e:	40 89       	ldd	r20, Z+16	; 0x10
    3d90:	51 89       	ldd	r21, Z+17	; 0x11
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	9a 81       	ldd	r25, Y+2	; 0x02
    3d96:	ab 81       	ldd	r26, Y+3	; 0x03
    3d98:	bc 81       	ldd	r27, Y+4	; 0x04
    3d9a:	82 0f       	add	r24, r18
    3d9c:	93 1f       	adc	r25, r19
    3d9e:	a4 1f       	adc	r26, r20
    3da0:	b5 1f       	adc	r27, r21
    3da2:	8f 83       	std	Y+7, r24	; 0x07
    3da4:	98 87       	std	Y+8, r25	; 0x08
    3da6:	a9 87       	std	Y+9, r26	; 0x09
    3da8:	ba 87       	std	Y+10, r27	; 0x0a
    3daa:	2f 81       	ldd	r18, Y+7	; 0x07
    3dac:	38 85       	ldd	r19, Y+8	; 0x08
    3dae:	49 85       	ldd	r20, Y+9	; 0x09
    3db0:	5a 85       	ldd	r21, Y+10	; 0x0a
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	9a 81       	ldd	r25, Y+2	; 0x02
    3db6:	ab 81       	ldd	r26, Y+3	; 0x03
    3db8:	bc 81       	ldd	r27, Y+4	; 0x04
    3dba:	82 17       	cp	r24, r18
    3dbc:	93 07       	cpc	r25, r19
    3dbe:	a4 07       	cpc	r26, r20
    3dc0:	b5 07       	cpc	r27, r21
    3dc2:	f8 f4       	brcc	.+62     	; 0x3e02 <prvSwitchTimerLists+0xfc>
    3dc4:	2d 81       	ldd	r18, Y+5	; 0x05
    3dc6:	3e 81       	ldd	r19, Y+6	; 0x06
    3dc8:	8f 81       	ldd	r24, Y+7	; 0x07
    3dca:	98 85       	ldd	r25, Y+8	; 0x08
    3dcc:	a9 85       	ldd	r26, Y+9	; 0x09
    3dce:	ba 85       	ldd	r27, Y+10	; 0x0a
    3dd0:	f9 01       	movw	r30, r18
    3dd2:	82 83       	std	Z+2, r24	; 0x02
    3dd4:	93 83       	std	Z+3, r25	; 0x03
    3dd6:	a4 83       	std	Z+4, r26	; 0x04
    3dd8:	b5 83       	std	Z+5, r27	; 0x05
    3dda:	8d 81       	ldd	r24, Y+5	; 0x05
    3ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dde:	2d 81       	ldd	r18, Y+5	; 0x05
    3de0:	3e 81       	ldd	r19, Y+6	; 0x06
    3de2:	fc 01       	movw	r30, r24
    3de4:	22 87       	std	Z+10, r18	; 0x0a
    3de6:	33 87       	std	Z+11, r19	; 0x0b
    3de8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dea:	9e 81       	ldd	r25, Y+6	; 0x06
    3dec:	9c 01       	movw	r18, r24
    3dee:	2e 5f       	subi	r18, 0xFE	; 254
    3df0:	3f 4f       	sbci	r19, 0xFF	; 255
    3df2:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTimerList>
    3df6:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTimerList+0x1>
    3dfa:	b9 01       	movw	r22, r18
    3dfc:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    3e00:	12 c0       	rjmp	.+36     	; 0x3e26 <prvSwitchTimerLists+0x120>
    3e02:	89 81       	ldd	r24, Y+1	; 0x01
    3e04:	9a 81       	ldd	r25, Y+2	; 0x02
    3e06:	ab 81       	ldd	r26, Y+3	; 0x03
    3e08:	bc 81       	ldd	r27, Y+4	; 0x04
    3e0a:	ed 81       	ldd	r30, Y+5	; 0x05
    3e0c:	fe 81       	ldd	r31, Y+6	; 0x06
    3e0e:	c1 2c       	mov	r12, r1
    3e10:	d1 2c       	mov	r13, r1
    3e12:	76 01       	movw	r14, r12
    3e14:	00 e0       	ldi	r16, 0x00	; 0
    3e16:	10 e0       	ldi	r17, 0x00	; 0
    3e18:	9c 01       	movw	r18, r24
    3e1a:	ad 01       	movw	r20, r26
    3e1c:	60 e0       	ldi	r22, 0x00	; 0
    3e1e:	cf 01       	movw	r24, r30
    3e20:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <xTimerGenericCommand>
    3e24:	8b 87       	std	Y+11, r24	; 0x0b
    3e26:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTimerList>
    3e2a:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTimerList+0x1>
    3e2e:	fc 01       	movw	r30, r24
    3e30:	80 81       	ld	r24, Z
    3e32:	88 23       	and	r24, r24
    3e34:	09 f0       	breq	.+2      	; 0x3e38 <prvSwitchTimerLists+0x132>
    3e36:	75 cf       	rjmp	.-278    	; 0x3d22 <prvSwitchTimerLists+0x1c>
    3e38:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTimerList>
    3e3c:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTimerList+0x1>
    3e40:	8c 87       	std	Y+12, r24	; 0x0c
    3e42:	9d 87       	std	Y+13, r25	; 0x0d
    3e44:	80 91 a8 2c 	lds	r24, 0x2CA8	; 0x802ca8 <pxOverflowTimerList>
    3e48:	90 91 a9 2c 	lds	r25, 0x2CA9	; 0x802ca9 <pxOverflowTimerList+0x1>
    3e4c:	80 93 a6 2c 	sts	0x2CA6, r24	; 0x802ca6 <pxCurrentTimerList>
    3e50:	90 93 a7 2c 	sts	0x2CA7, r25	; 0x802ca7 <pxCurrentTimerList+0x1>
    3e54:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e56:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e58:	80 93 a8 2c 	sts	0x2CA8, r24	; 0x802ca8 <pxOverflowTimerList>
    3e5c:	90 93 a9 2c 	sts	0x2CA9, r25	; 0x802ca9 <pxOverflowTimerList+0x1>
    3e60:	00 00       	nop
    3e62:	2d 96       	adiw	r28, 0x0d	; 13
    3e64:	cd bf       	out	0x3d, r28	; 61
    3e66:	de bf       	out	0x3e, r29	; 62
    3e68:	df 91       	pop	r29
    3e6a:	cf 91       	pop	r28
    3e6c:	1f 91       	pop	r17
    3e6e:	0f 91       	pop	r16
    3e70:	ff 90       	pop	r15
    3e72:	ef 90       	pop	r14
    3e74:	df 90       	pop	r13
    3e76:	cf 90       	pop	r12
    3e78:	08 95       	ret

00003e7a <prvCheckForValidListAndQueue>:
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
    3e7e:	cd b7       	in	r28, 0x3d	; 61
    3e80:	de b7       	in	r29, 0x3e	; 62
    3e82:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3e86:	ff 93       	push	r31
    3e88:	f8 7f       	andi	r31, 0xF8	; 248
    3e8a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3e8e:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <xTimerQueue>
    3e92:	90 91 ab 2c 	lds	r25, 0x2CAB	; 0x802cab <xTimerQueue+0x1>
    3e96:	89 2b       	or	r24, r25
    3e98:	e9 f4       	brne	.+58     	; 0x3ed4 <prvCheckForValidListAndQueue+0x5a>
    3e9a:	80 e9       	ldi	r24, 0x90	; 144
    3e9c:	9c e2       	ldi	r25, 0x2C	; 44
    3e9e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    3ea2:	8b e9       	ldi	r24, 0x9B	; 155
    3ea4:	9c e2       	ldi	r25, 0x2C	; 44
    3ea6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    3eaa:	80 e9       	ldi	r24, 0x90	; 144
    3eac:	9c e2       	ldi	r25, 0x2C	; 44
    3eae:	80 93 a6 2c 	sts	0x2CA6, r24	; 0x802ca6 <pxCurrentTimerList>
    3eb2:	90 93 a7 2c 	sts	0x2CA7, r25	; 0x802ca7 <pxCurrentTimerList+0x1>
    3eb6:	8b e9       	ldi	r24, 0x9B	; 155
    3eb8:	9c e2       	ldi	r25, 0x2C	; 44
    3eba:	80 93 a8 2c 	sts	0x2CA8, r24	; 0x802ca8 <pxOverflowTimerList>
    3ebe:	90 93 a9 2c 	sts	0x2CA9, r25	; 0x802ca9 <pxOverflowTimerList+0x1>
    3ec2:	40 e0       	ldi	r20, 0x00	; 0
    3ec4:	69 e0       	ldi	r22, 0x09	; 9
    3ec6:	85 e0       	ldi	r24, 0x05	; 5
    3ec8:	0e 94 66 0d 	call	0x1acc	; 0x1acc <xQueueGenericCreate>
    3ecc:	80 93 aa 2c 	sts	0x2CAA, r24	; 0x802caa <xTimerQueue>
    3ed0:	90 93 ab 2c 	sts	0x2CAB, r25	; 0x802cab <xTimerQueue+0x1>
    3ed4:	ff 91       	pop	r31
    3ed6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3eda:	00 00       	nop
    3edc:	df 91       	pop	r29
    3ede:	cf 91       	pop	r28
    3ee0:	08 95       	ret

00003ee2 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    3ee2:	0f 93       	push	r16
    3ee4:	1f 93       	push	r17
    3ee6:	cf 93       	push	r28
    3ee8:	df 93       	push	r29
    3eea:	cd b7       	in	r28, 0x3d	; 61
    3eec:	de b7       	in	r29, 0x3e	; 62
    3eee:	64 97       	sbiw	r28, 0x14	; 20
    3ef0:	cd bf       	out	0x3d, r28	; 61
    3ef2:	de bf       	out	0x3e, r29	; 62
    3ef4:	8b 87       	std	Y+11, r24	; 0x0b
    3ef6:	9c 87       	std	Y+12, r25	; 0x0c
    3ef8:	6d 87       	std	Y+13, r22	; 0x0d
    3efa:	7e 87       	std	Y+14, r23	; 0x0e
    3efc:	2f 87       	std	Y+15, r18	; 0x0f
    3efe:	38 8b       	std	Y+16, r19	; 0x10
    3f00:	49 8b       	std	Y+17, r20	; 0x11
    3f02:	5a 8b       	std	Y+18, r21	; 0x12
    3f04:	0b 8b       	std	Y+19, r16	; 0x13
    3f06:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    3f08:	8e ef       	ldi	r24, 0xFE	; 254
    3f0a:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    3f0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f10:	8b 83       	std	Y+3, r24	; 0x03
    3f12:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    3f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f18:	8d 83       	std	Y+5, r24	; 0x05
    3f1a:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    3f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f1e:	98 89       	ldd	r25, Y+16	; 0x10
    3f20:	a9 89       	ldd	r26, Y+17	; 0x11
    3f22:	ba 89       	ldd	r27, Y+18	; 0x12
    3f24:	8f 83       	std	Y+7, r24	; 0x07
    3f26:	98 87       	std	Y+8, r25	; 0x08
    3f28:	a9 87       	std	Y+9, r26	; 0x09
    3f2a:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3f2c:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <xTimerQueue>
    3f30:	90 91 ab 2c 	lds	r25, 0x2CAB	; 0x802cab <xTimerQueue+0x1>
    3f34:	4b 89       	ldd	r20, Y+19	; 0x13
    3f36:	5c 89       	ldd	r21, Y+20	; 0x14
    3f38:	be 01       	movw	r22, r28
    3f3a:	6e 5f       	subi	r22, 0xFE	; 254
    3f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <xQueueGenericSendFromISR>
    3f44:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    3f46:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3f48:	64 96       	adiw	r28, 0x14	; 20
    3f4a:	cd bf       	out	0x3d, r28	; 61
    3f4c:	de bf       	out	0x3e, r29	; 62
    3f4e:	df 91       	pop	r29
    3f50:	cf 91       	pop	r28
    3f52:	1f 91       	pop	r17
    3f54:	0f 91       	pop	r16
    3f56:	08 95       	ret

00003f58 <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    3f58:	cf 93       	push	r28
    3f5a:	df 93       	push	r29
    3f5c:	cd b7       	in	r28, 0x3d	; 61
    3f5e:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    3f60:	80 e5       	ldi	r24, 0x50	; 80
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	20 e5       	ldi	r18, 0x50	; 80
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	f9 01       	movw	r30, r18
    3f6a:	20 81       	ld	r18, Z
    3f6c:	21 60       	ori	r18, 0x01	; 1
    3f6e:	fc 01       	movw	r30, r24
    3f70:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    3f72:	80 e5       	ldi	r24, 0x50	; 80
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	fc 01       	movw	r30, r24
    3f78:	81 81       	ldd	r24, Z+1	; 0x01
    3f7a:	88 2f       	mov	r24, r24
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	81 70       	andi	r24, 0x01	; 1
    3f80:	99 27       	eor	r25, r25
    3f82:	89 2b       	or	r24, r25
    3f84:	b1 f3       	breq	.-20     	; 0x3f72 <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    3f86:	80 e0       	ldi	r24, 0x00	; 0
    3f88:	0e 94 9a 03 	call	0x734	; 0x734 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    3f8c:	8e e1       	ldi	r24, 0x1E	; 30
    3f8e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    3f92:	60 e0       	ldi	r22, 0x00	; 0
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	0e 94 83 03 	call	0x706	; 0x706 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    3f9a:	43 e0       	ldi	r20, 0x03	; 3
    3f9c:	60 e0       	ldi	r22, 0x00	; 0
    3f9e:	80 e4       	ldi	r24, 0x40	; 64
    3fa0:	0e 94 2e 03 	call	0x65c	; 0x65c <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    3fa4:	80 e5       	ldi	r24, 0x50	; 80
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	20 e5       	ldi	r18, 0x50	; 80
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	f9 01       	movw	r30, r18
    3fae:	20 81       	ld	r18, Z
    3fb0:	28 60       	ori	r18, 0x08	; 8
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    3fb6:	80 e5       	ldi	r24, 0x50	; 80
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	fc 01       	movw	r30, r24
    3fbc:	81 81       	ldd	r24, Z+1	; 0x01
    3fbe:	88 2f       	mov	r24, r24
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	88 70       	andi	r24, 0x08	; 8
    3fc4:	99 27       	eor	r25, r25
    3fc6:	89 2b       	or	r24, r25
    3fc8:	b1 f3       	breq	.-20     	; 0x3fb6 <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    3fca:	64 e0       	ldi	r22, 0x04	; 4
    3fcc:	80 ec       	ldi	r24, 0xC0	; 192
    3fce:	0e 94 4b 03 	call	0x696	; 0x696 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    3fd2:	80 e5       	ldi	r24, 0x50	; 80
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	20 e5       	ldi	r18, 0x50	; 80
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	f9 01       	movw	r30, r18
    3fdc:	20 81       	ld	r18, Z
    3fde:	20 61       	ori	r18, 0x10	; 16
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    3fe4:	60 e0       	ldi	r22, 0x00	; 0
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	0e 94 83 03 	call	0x706	; 0x706 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    3fec:	80 e5       	ldi	r24, 0x50	; 80
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	81 81       	ldd	r24, Z+1	; 0x01
    3ff4:	88 2f       	mov	r24, r24
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	80 71       	andi	r24, 0x10	; 16
    3ffa:	99 27       	eor	r25, r25
    3ffc:	89 2b       	or	r24, r25
    3ffe:	b1 f3       	breq	.-20     	; 0x3fec <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    4000:	84 e0       	ldi	r24, 0x04	; 4
    4002:	0e 94 9a 03 	call	0x734	; 0x734 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    4006:	87 e0       	ldi	r24, 0x07	; 7
    4008:	0e 94 63 03 	call	0x6c6	; 0x6c6 <CLKSYS_Disable>
    400c:	00 00       	nop
    400e:	df 91       	pop	r29
    4010:	cf 91       	pop	r28
    4012:	08 95       	ret

00004014 <vApplicationIdleHook>:
double dPi4; 
long i;


void vApplicationIdleHook( void )
{	
    4014:	cf 93       	push	r28
    4016:	df 93       	push	r29
    4018:	cd b7       	in	r28, 0x3d	; 61
    401a:	de b7       	in	r29, 0x3e	; 62
	
}
    401c:	00 00       	nop
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	08 95       	ret

00004024 <main>:

int main(void)
{
    4024:	ef 92       	push	r14
    4026:	ff 92       	push	r15
    4028:	0f 93       	push	r16
    402a:	cf 93       	push	r28
    402c:	df 93       	push	r29
    402e:	cd b7       	in	r28, 0x3d	; 61
    4030:	de b7       	in	r29, 0x3e	; 62
	vInitClock();
    4032:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <vInitClock>
	vInitDisplay();
    4036:	0e 94 89 23 	call	0x4712	; 0x4712 <vInitDisplay>
	
	xTaskCreate( vButton, (const char *) "Button", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    403a:	e1 2c       	mov	r14, r1
    403c:	f1 2c       	mov	r15, r1
    403e:	03 e0       	ldi	r16, 0x03	; 3
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	48 ec       	ldi	r20, 0xC8	; 200
    4046:	50 e0       	ldi	r21, 0x00	; 0
    4048:	6d e0       	ldi	r22, 0x0D	; 13
    404a:	70 e2       	ldi	r23, 0x20	; 32
    404c:	8b e1       	ldi	r24, 0x1B	; 27
    404e:	91 e2       	ldi	r25, 0x21	; 33
    4050:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
	xTaskCreate( vGUI, (const char *) "GUITask", configMINIMAL_STACK_SIZE, NULL, 2, &GUITask);
    4054:	0f 2e       	mov	r0, r31
    4056:	f7 ee       	ldi	r31, 0xE7	; 231
    4058:	ef 2e       	mov	r14, r31
    405a:	fc e2       	ldi	r31, 0x2C	; 44
    405c:	ff 2e       	mov	r15, r31
    405e:	f0 2d       	mov	r31, r0
    4060:	02 e0       	ldi	r16, 0x02	; 2
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	48 ec       	ldi	r20, 0xC8	; 200
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	64 e1       	ldi	r22, 0x14	; 20
    406c:	70 e2       	ldi	r23, 0x20	; 32
    406e:	82 e5       	ldi	r24, 0x52	; 82
    4070:	90 e2       	ldi	r25, 0x20	; 32
    4072:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
	xTaskCreate( vCalc, (const char *) "Calc", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    4076:	e1 2c       	mov	r14, r1
    4078:	f1 2c       	mov	r15, r1
    407a:	01 e0       	ldi	r16, 0x01	; 1
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	48 ec       	ldi	r20, 0xC8	; 200
    4082:	50 e0       	ldi	r21, 0x00	; 0
    4084:	6c e1       	ldi	r22, 0x1C	; 28
    4086:	70 e2       	ldi	r23, 0x20	; 32
    4088:	8a e3       	ldi	r24, 0x3A	; 58
    408a:	91 e2       	ldi	r25, 0x21	; 33
    408c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>

	vTaskStartScheduler();
    4090:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <vTaskStartScheduler>
	return 0;
    4094:	80 e0       	ldi	r24, 0x00	; 0
    4096:	90 e0       	ldi	r25, 0x00	; 0
}
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	0f 91       	pop	r16
    409e:	ff 90       	pop	r15
    40a0:	ef 90       	pop	r14
    40a2:	08 95       	ret

000040a4 <vGUI>:

void vGUI(void *pvParameters) {
    40a4:	cf 93       	push	r28
    40a6:	df 93       	push	r29
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
    40ac:	6b 97       	sbiw	r28, 0x1b	; 27
    40ae:	cd bf       	out	0x3d, r28	; 61
    40b0:	de bf       	out	0x3e, r29	; 62
    40b2:	8a 8f       	std	Y+26, r24	; 0x1a
    40b4:	9b 8f       	std	Y+27, r25	; 0x1b
	char Pi[10] = "";			
    40b6:	19 82       	std	Y+1, r1	; 0x01
    40b8:	1a 82       	std	Y+2, r1	; 0x02
    40ba:	28 e0       	ldi	r18, 0x08	; 8
    40bc:	ce 01       	movw	r24, r28
    40be:	03 96       	adiw	r24, 0x03	; 3
    40c0:	fc 01       	movw	r30, r24
    40c2:	32 2f       	mov	r19, r18
    40c4:	11 92       	st	Z+, r1
    40c6:	3a 95       	dec	r19
    40c8:	e9 f7       	brne	.-6      	; 0x40c4 <vGUI+0x20>
	char Iter[15] = "";
    40ca:	1b 86       	std	Y+11, r1	; 0x0b
    40cc:	1c 86       	std	Y+12, r1	; 0x0c
    40ce:	2d e0       	ldi	r18, 0x0D	; 13
    40d0:	ce 01       	movw	r24, r28
    40d2:	0d 96       	adiw	r24, 0x0d	; 13
    40d4:	fc 01       	movw	r30, r24
    40d6:	32 2f       	mov	r19, r18
    40d8:	11 92       	st	Z+, r1
    40da:	3a 95       	dec	r19
    40dc:	e9 f7       	brne	.-6      	; 0x40d8 <vGUI+0x34>
	for(;;) {

		sprintf(Pi, "%f", 4*dPi4);
    40de:	80 91 df 2c 	lds	r24, 0x2CDF	; 0x802cdf <dPi4>
    40e2:	90 91 e0 2c 	lds	r25, 0x2CE0	; 0x802ce0 <dPi4+0x1>
    40e6:	a0 91 e1 2c 	lds	r26, 0x2CE1	; 0x802ce1 <dPi4+0x2>
    40ea:	b0 91 e2 2c 	lds	r27, 0x2CE2	; 0x802ce2 <dPi4+0x3>
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	40 e8       	ldi	r20, 0x80	; 128
    40f4:	50 e4       	ldi	r21, 0x40	; 64
    40f6:	bc 01       	movw	r22, r24
    40f8:	cd 01       	movw	r24, r26
    40fa:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsf3>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	2b 2f       	mov	r18, r27
    4104:	2f 93       	push	r18
    4106:	2a 2f       	mov	r18, r26
    4108:	2f 93       	push	r18
    410a:	29 2f       	mov	r18, r25
    410c:	2f 93       	push	r18
    410e:	8f 93       	push	r24
    4110:	81 e2       	ldi	r24, 0x21	; 33
    4112:	90 e2       	ldi	r25, 0x20	; 32
    4114:	89 2f       	mov	r24, r25
    4116:	8f 93       	push	r24
    4118:	81 e2       	ldi	r24, 0x21	; 33
    411a:	90 e2       	ldi	r25, 0x20	; 32
    411c:	8f 93       	push	r24
    411e:	ce 01       	movw	r24, r28
    4120:	01 96       	adiw	r24, 0x01	; 1
    4122:	9f 93       	push	r25
    4124:	8f 93       	push	r24
    4126:	0e 94 98 32 	call	0x6530	; 0x6530 <sprintf>
    412a:	8d b7       	in	r24, 0x3d	; 61
    412c:	9e b7       	in	r25, 0x3e	; 62
    412e:	08 96       	adiw	r24, 0x08	; 8
    4130:	cd bf       	out	0x3d, r28	; 61
    4132:	de bf       	out	0x3e, r29	; 62
		sprintf(Iter, "%ld", i);
    4134:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <i>
    4138:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <i+0x1>
    413c:	a0 91 e5 2c 	lds	r26, 0x2CE5	; 0x802ce5 <i+0x2>
    4140:	b0 91 e6 2c 	lds	r27, 0x2CE6	; 0x802ce6 <i+0x3>
    4144:	2b 2f       	mov	r18, r27
    4146:	2f 93       	push	r18
    4148:	2a 2f       	mov	r18, r26
    414a:	2f 93       	push	r18
    414c:	29 2f       	mov	r18, r25
    414e:	2f 93       	push	r18
    4150:	8f 93       	push	r24
    4152:	84 e2       	ldi	r24, 0x24	; 36
    4154:	90 e2       	ldi	r25, 0x20	; 32
    4156:	89 2f       	mov	r24, r25
    4158:	8f 93       	push	r24
    415a:	84 e2       	ldi	r24, 0x24	; 36
    415c:	90 e2       	ldi	r25, 0x20	; 32
    415e:	8f 93       	push	r24
    4160:	ce 01       	movw	r24, r28
    4162:	0b 96       	adiw	r24, 0x0b	; 11
    4164:	29 2f       	mov	r18, r25
    4166:	2f 93       	push	r18
    4168:	8f 93       	push	r24
    416a:	0e 94 98 32 	call	0x6530	; 0x6530 <sprintf>
    416e:	ed b7       	in	r30, 0x3d	; 61
    4170:	fe b7       	in	r31, 0x3e	; 62
    4172:	38 96       	adiw	r30, 0x08	; 8
    4174:	cd bf       	out	0x3d, r28	; 61
    4176:	de bf       	out	0x3e, r29	; 62
		
		vDisplayClear();
    4178:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <vDisplayClear>
		vDisplayWriteStringAtPos(0,0,"PI Calculator");
    417c:	88 e2       	ldi	r24, 0x28	; 40
    417e:	90 e2       	ldi	r25, 0x20	; 32
    4180:	89 2f       	mov	r24, r25
    4182:	8f 93       	push	r24
    4184:	88 e2       	ldi	r24, 0x28	; 40
    4186:	90 e2       	ldi	r25, 0x20	; 32
    4188:	8f 93       	push	r24
    418a:	1f 92       	push	r1
    418c:	1f 92       	push	r1
    418e:	1f 92       	push	r1
    4190:	1f 92       	push	r1
    4192:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <vDisplayWriteStringAtPos>
    4196:	0f 90       	pop	r0
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	0f 90       	pop	r0
    419e:	0f 90       	pop	r0
    41a0:	0f 90       	pop	r0
		vDisplayWriteStringAtPos(1,0,"%s", Iter);
    41a2:	ce 01       	movw	r24, r28
    41a4:	0b 96       	adiw	r24, 0x0b	; 11
    41a6:	29 2f       	mov	r18, r25
    41a8:	2f 93       	push	r18
    41aa:	8f 93       	push	r24
    41ac:	86 e3       	ldi	r24, 0x36	; 54
    41ae:	90 e2       	ldi	r25, 0x20	; 32
    41b0:	89 2f       	mov	r24, r25
    41b2:	8f 93       	push	r24
    41b4:	86 e3       	ldi	r24, 0x36	; 54
    41b6:	90 e2       	ldi	r25, 0x20	; 32
    41b8:	8f 93       	push	r24
    41ba:	1f 92       	push	r1
    41bc:	1f 92       	push	r1
    41be:	1f 92       	push	r1
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	8f 93       	push	r24
    41c4:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <vDisplayWriteStringAtPos>
    41c8:	8d b7       	in	r24, 0x3d	; 61
    41ca:	9e b7       	in	r25, 0x3e	; 62
    41cc:	08 96       	adiw	r24, 0x08	; 8
    41ce:	cd bf       	out	0x3d, r28	; 61
    41d0:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(2,0,"Pi: %s", Pi);
    41d2:	ce 01       	movw	r24, r28
    41d4:	01 96       	adiw	r24, 0x01	; 1
    41d6:	9f 93       	push	r25
    41d8:	8f 93       	push	r24
    41da:	89 e3       	ldi	r24, 0x39	; 57
    41dc:	90 e2       	ldi	r25, 0x20	; 32
    41de:	89 2f       	mov	r24, r25
    41e0:	8f 93       	push	r24
    41e2:	89 e3       	ldi	r24, 0x39	; 57
    41e4:	90 e2       	ldi	r25, 0x20	; 32
    41e6:	8f 93       	push	r24
    41e8:	1f 92       	push	r1
    41ea:	1f 92       	push	r1
    41ec:	1f 92       	push	r1
    41ee:	82 e0       	ldi	r24, 0x02	; 2
    41f0:	8f 93       	push	r24
    41f2:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <vDisplayWriteStringAtPos>
    41f6:	ed b7       	in	r30, 0x3d	; 61
    41f8:	fe b7       	in	r31, 0x3e	; 62
    41fa:	38 96       	adiw	r30, 0x08	; 8
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(3,0,"Zeit: xxxxxxms");
    4200:	80 e4       	ldi	r24, 0x40	; 64
    4202:	90 e2       	ldi	r25, 0x20	; 32
    4204:	89 2f       	mov	r24, r25
    4206:	8f 93       	push	r24
    4208:	80 e4       	ldi	r24, 0x40	; 64
    420a:	90 e2       	ldi	r25, 0x20	; 32
    420c:	8f 93       	push	r24
    420e:	1f 92       	push	r1
    4210:	1f 92       	push	r1
    4212:	1f 92       	push	r1
    4214:	83 e0       	ldi	r24, 0x03	; 3
    4216:	8f 93       	push	r24
    4218:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <vDisplayWriteStringAtPos>
    421c:	0f 90       	pop	r0
    421e:	0f 90       	pop	r0
    4220:	0f 90       	pop	r0
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	0f 90       	pop	r0
		

		vTaskDelay(500 / portTICK_RATE_MS);
    4228:	64 ef       	ldi	r22, 0xF4	; 244
    422a:	71 e0       	ldi	r23, 0x01	; 1
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	0e 94 ba 13 	call	0x2774	; 0x2774 <vTaskDelay>
	}
    4234:	54 cf       	rjmp	.-344    	; 0x40de <vGUI+0x3a>

00004236 <vButton>:
}

void vButton(void *pvParameters) {
    4236:	cf 93       	push	r28
    4238:	df 93       	push	r29
    423a:	1f 92       	push	r1
    423c:	1f 92       	push	r1
    423e:	cd b7       	in	r28, 0x3d	; 61
    4240:	de b7       	in	r29, 0x3e	; 62
    4242:	89 83       	std	Y+1, r24	; 0x01
    4244:	9a 83       	std	Y+2, r25	; 0x02
	initButtons();
    4246:	0e 94 cb 01 	call	0x396	; 0x396 <initButtons>
	
	while (1) {
		updateButtons();
    424a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <updateButtons>
		if (getButtonPress(BUTTON1) == SHORT_PRESSED) {
    424e:	80 e0       	ldi	r24, 0x00	; 0
    4250:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <getButtonPress>

		}

		if (getButtonPress(BUTTON2) == SHORT_PRESSED) {
    4254:	81 e0       	ldi	r24, 0x01	; 1
    4256:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <getButtonPress>

		}
		
		if (getButtonPress(BUTTON3) == SHORT_PRESSED) {
    425a:	82 e0       	ldi	r24, 0x02	; 2
    425c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <getButtonPress>

		}		

		if (getButtonPress(BUTTON4) == SHORT_PRESSED) {
    4260:	83 e0       	ldi	r24, 0x03	; 3
    4262:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <getButtonPress>

		}

		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    4266:	6a e0       	ldi	r22, 0x0A	; 10
    4268:	70 e0       	ldi	r23, 0x00	; 0
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	0e 94 ba 13 	call	0x2774	; 0x2774 <vTaskDelay>
	}
    4272:	eb cf       	rjmp	.-42     	; 0x424a <vButton+0x14>

00004274 <vCalc>:
}

void vCalc(void *pvParameters) {
    4274:	cf 92       	push	r12
    4276:	df 92       	push	r13
    4278:	ef 92       	push	r14
    427a:	ff 92       	push	r15
    427c:	cf 93       	push	r28
    427e:	df 93       	push	r29
    4280:	1f 92       	push	r1
    4282:	1f 92       	push	r1
    4284:	cd b7       	in	r28, 0x3d	; 61
    4286:	de b7       	in	r29, 0x3e	; 62
    4288:	89 83       	std	Y+1, r24	; 0x01
    428a:	9a 83       	std	Y+2, r25	; 0x02
	dPi4 = 1;
    428c:	80 e0       	ldi	r24, 0x00	; 0
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	a0 e8       	ldi	r26, 0x80	; 128
    4292:	bf e3       	ldi	r27, 0x3F	; 63
    4294:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <dPi4>
    4298:	90 93 e0 2c 	sts	0x2CE0, r25	; 0x802ce0 <dPi4+0x1>
    429c:	a0 93 e1 2c 	sts	0x2CE1, r26	; 0x802ce1 <dPi4+0x2>
    42a0:	b0 93 e2 2c 	sts	0x2CE2, r27	; 0x802ce2 <dPi4+0x3>
	
	for(i = 0;i<ITERATIONS;i++) {
    42a4:	10 92 e3 2c 	sts	0x2CE3, r1	; 0x802ce3 <i>
    42a8:	10 92 e4 2c 	sts	0x2CE4, r1	; 0x802ce4 <i+0x1>
    42ac:	10 92 e5 2c 	sts	0x2CE5, r1	; 0x802ce5 <i+0x2>
    42b0:	10 92 e6 2c 	sts	0x2CE6, r1	; 0x802ce6 <i+0x3>
    42b4:	81 c0       	rjmp	.+258    	; 0x43b8 <vCalc+0x144>
		dPi4 = dPi4 - (1.0/(3+4*i)) + (1.0/(5+4*i));
    42b6:	c0 90 df 2c 	lds	r12, 0x2CDF	; 0x802cdf <dPi4>
    42ba:	d0 90 e0 2c 	lds	r13, 0x2CE0	; 0x802ce0 <dPi4+0x1>
    42be:	e0 90 e1 2c 	lds	r14, 0x2CE1	; 0x802ce1 <dPi4+0x2>
    42c2:	f0 90 e2 2c 	lds	r15, 0x2CE2	; 0x802ce2 <dPi4+0x3>
    42c6:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <i>
    42ca:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <i+0x1>
    42ce:	a0 91 e5 2c 	lds	r26, 0x2CE5	; 0x802ce5 <i+0x2>
    42d2:	b0 91 e6 2c 	lds	r27, 0x2CE6	; 0x802ce6 <i+0x3>
    42d6:	88 0f       	add	r24, r24
    42d8:	99 1f       	adc	r25, r25
    42da:	aa 1f       	adc	r26, r26
    42dc:	bb 1f       	adc	r27, r27
    42de:	88 0f       	add	r24, r24
    42e0:	99 1f       	adc	r25, r25
    42e2:	aa 1f       	adc	r26, r26
    42e4:	bb 1f       	adc	r27, r27
    42e6:	03 96       	adiw	r24, 0x03	; 3
    42e8:	a1 1d       	adc	r26, r1
    42ea:	b1 1d       	adc	r27, r1
    42ec:	bc 01       	movw	r22, r24
    42ee:	cd 01       	movw	r24, r26
    42f0:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__floatsisf>
    42f4:	dc 01       	movw	r26, r24
    42f6:	cb 01       	movw	r24, r22
    42f8:	9c 01       	movw	r18, r24
    42fa:	ad 01       	movw	r20, r26
    42fc:	60 e0       	ldi	r22, 0x00	; 0
    42fe:	70 e0       	ldi	r23, 0x00	; 0
    4300:	80 e8       	ldi	r24, 0x80	; 128
    4302:	9f e3       	ldi	r25, 0x3F	; 63
    4304:	0e 94 b1 2b 	call	0x5762	; 0x5762 <__divsf3>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	9c 01       	movw	r18, r24
    430e:	ad 01       	movw	r20, r26
    4310:	c7 01       	movw	r24, r14
    4312:	b6 01       	movw	r22, r12
    4314:	0e 94 3f 2b 	call	0x567e	; 0x567e <__subsf3>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	6c 01       	movw	r12, r24
    431e:	7d 01       	movw	r14, r26
    4320:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <i>
    4324:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <i+0x1>
    4328:	a0 91 e5 2c 	lds	r26, 0x2CE5	; 0x802ce5 <i+0x2>
    432c:	b0 91 e6 2c 	lds	r27, 0x2CE6	; 0x802ce6 <i+0x3>
    4330:	88 0f       	add	r24, r24
    4332:	99 1f       	adc	r25, r25
    4334:	aa 1f       	adc	r26, r26
    4336:	bb 1f       	adc	r27, r27
    4338:	88 0f       	add	r24, r24
    433a:	99 1f       	adc	r25, r25
    433c:	aa 1f       	adc	r26, r26
    433e:	bb 1f       	adc	r27, r27
    4340:	05 96       	adiw	r24, 0x05	; 5
    4342:	a1 1d       	adc	r26, r1
    4344:	b1 1d       	adc	r27, r1
    4346:	bc 01       	movw	r22, r24
    4348:	cd 01       	movw	r24, r26
    434a:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__floatsisf>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	9c 01       	movw	r18, r24
    4354:	ad 01       	movw	r20, r26
    4356:	60 e0       	ldi	r22, 0x00	; 0
    4358:	70 e0       	ldi	r23, 0x00	; 0
    435a:	80 e8       	ldi	r24, 0x80	; 128
    435c:	9f e3       	ldi	r25, 0x3F	; 63
    435e:	0e 94 b1 2b 	call	0x5762	; 0x5762 <__divsf3>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	9c 01       	movw	r18, r24
    4368:	ad 01       	movw	r20, r26
    436a:	c7 01       	movw	r24, r14
    436c:	b6 01       	movw	r22, r12
    436e:	0e 94 40 2b 	call	0x5680	; 0x5680 <__addsf3>
    4372:	dc 01       	movw	r26, r24
    4374:	cb 01       	movw	r24, r22
    4376:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <dPi4>
    437a:	90 93 e0 2c 	sts	0x2CE0, r25	; 0x802ce0 <dPi4+0x1>
    437e:	a0 93 e1 2c 	sts	0x2CE1, r26	; 0x802ce1 <dPi4+0x2>
    4382:	b0 93 e2 2c 	sts	0x2CE2, r27	; 0x802ce2 <dPi4+0x3>
		vTaskDelay(1/portTICK_RATE_MS);
    4386:	61 e0       	ldi	r22, 0x01	; 1
    4388:	70 e0       	ldi	r23, 0x00	; 0
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	0e 94 ba 13 	call	0x2774	; 0x2774 <vTaskDelay>
}

void vCalc(void *pvParameters) {
	dPi4 = 1;
	
	for(i = 0;i<ITERATIONS;i++) {
    4392:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <i>
    4396:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <i+0x1>
    439a:	a0 91 e5 2c 	lds	r26, 0x2CE5	; 0x802ce5 <i+0x2>
    439e:	b0 91 e6 2c 	lds	r27, 0x2CE6	; 0x802ce6 <i+0x3>
    43a2:	01 96       	adiw	r24, 0x01	; 1
    43a4:	a1 1d       	adc	r26, r1
    43a6:	b1 1d       	adc	r27, r1
    43a8:	80 93 e3 2c 	sts	0x2CE3, r24	; 0x802ce3 <i>
    43ac:	90 93 e4 2c 	sts	0x2CE4, r25	; 0x802ce4 <i+0x1>
    43b0:	a0 93 e5 2c 	sts	0x2CE5, r26	; 0x802ce5 <i+0x2>
    43b4:	b0 93 e6 2c 	sts	0x2CE6, r27	; 0x802ce6 <i+0x3>
    43b8:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <i>
    43bc:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <i+0x1>
    43c0:	a0 91 e5 2c 	lds	r26, 0x2CE5	; 0x802ce5 <i+0x2>
    43c4:	b0 91 e6 2c 	lds	r27, 0x2CE6	; 0x802ce6 <i+0x3>
    43c8:	80 3a       	cpi	r24, 0xA0	; 160
    43ca:	96 48       	sbci	r25, 0x86	; 134
    43cc:	a1 40       	sbci	r26, 0x01	; 1
    43ce:	b1 05       	cpc	r27, r1
    43d0:	0c f4       	brge	.+2      	; 0x43d4 <vCalc+0x160>
    43d2:	71 cf       	rjmp	.-286    	; 0x42b6 <vCalc+0x42>
		dPi4 = dPi4 - (1.0/(3+4*i)) + (1.0/(5+4*i));
		vTaskDelay(1/portTICK_RATE_MS);
	}
	
}
    43d4:	00 00       	nop
    43d6:	0f 90       	pop	r0
    43d8:	0f 90       	pop	r0
    43da:	df 91       	pop	r29
    43dc:	cf 91       	pop	r28
    43de:	ff 90       	pop	r15
    43e0:	ef 90       	pop	r14
    43e2:	df 90       	pop	r13
    43e4:	cf 90       	pop	r12
    43e6:	08 95       	ret

000043e8 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    43e8:	1f 92       	push	r1
    43ea:	0f 92       	push	r0
    43ec:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    43f0:	0f 92       	push	r0
    43f2:	11 24       	eor	r1, r1
    43f4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    43f8:	0f 92       	push	r0
    43fa:	2f 93       	push	r18
    43fc:	3f 93       	push	r19
    43fe:	4f 93       	push	r20
    4400:	5f 93       	push	r21
    4402:	6f 93       	push	r22
    4404:	7f 93       	push	r23
    4406:	8f 93       	push	r24
    4408:	9f 93       	push	r25
    440a:	af 93       	push	r26
    440c:	bf 93       	push	r27
    440e:	ef 93       	push	r30
    4410:	ff 93       	push	r31
    4412:	cf 93       	push	r28
    4414:	df 93       	push	r29
    4416:	1f 92       	push	r1
    4418:	cd b7       	in	r28, 0x3d	; 61
    441a:	de b7       	in	r29, 0x3e	; 62
    441c:	19 82       	std	Y+1, r1	; 0x01
    441e:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <egDisplayTiming>
    4422:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <egDisplayTiming+0x1>
    4426:	9e 01       	movw	r18, r28
    4428:	2f 5f       	subi	r18, 0xFF	; 255
    442a:	3f 4f       	sbci	r19, 0xFF	; 255
    442c:	41 e0       	ldi	r20, 0x01	; 1
    442e:	50 e0       	ldi	r21, 0x00	; 0
    4430:	60 e0       	ldi	r22, 0x00	; 0
    4432:	70 e0       	ldi	r23, 0x00	; 0
    4434:	0e 94 6d 07 	call	0xeda	; 0xeda <xEventGroupSetBitsFromISR>
    4438:	60 e0       	ldi	r22, 0x00	; 0
    443a:	80 e0       	ldi	r24, 0x00	; 0
    443c:	9b e0       	ldi	r25, 0x0B	; 11
    443e:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>
    4442:	80 e0       	ldi	r24, 0x00	; 0
    4444:	9b e0       	ldi	r25, 0x0B	; 11
    4446:	fc 01       	movw	r30, r24
    4448:	16 82       	std	Z+6, r1	; 0x06
    444a:	00 00       	nop
    444c:	0f 90       	pop	r0
    444e:	df 91       	pop	r29
    4450:	cf 91       	pop	r28
    4452:	ff 91       	pop	r31
    4454:	ef 91       	pop	r30
    4456:	bf 91       	pop	r27
    4458:	af 91       	pop	r26
    445a:	9f 91       	pop	r25
    445c:	8f 91       	pop	r24
    445e:	7f 91       	pop	r23
    4460:	6f 91       	pop	r22
    4462:	5f 91       	pop	r21
    4464:	4f 91       	pop	r20
    4466:	3f 91       	pop	r19
    4468:	2f 91       	pop	r18
    446a:	0f 90       	pop	r0
    446c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4470:	0f 90       	pop	r0
    4472:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4476:	0f 90       	pop	r0
    4478:	1f 90       	pop	r1
    447a:	18 95       	reti

0000447c <delayUS>:
    447c:	cf 92       	push	r12
    447e:	df 92       	push	r13
    4480:	ef 92       	push	r14
    4482:	ff 92       	push	r15
    4484:	0f 93       	push	r16
    4486:	cf 93       	push	r28
    4488:	df 93       	push	r29
    448a:	00 d0       	rcall	.+0      	; 0x448c <delayUS+0x10>
    448c:	1f 92       	push	r1
    448e:	cd b7       	in	r28, 0x3d	; 61
    4490:	de b7       	in	r29, 0x3e	; 62
    4492:	69 83       	std	Y+1, r22	; 0x01
    4494:	7a 83       	std	Y+2, r23	; 0x02
    4496:	8b 83       	std	Y+3, r24	; 0x03
    4498:	9c 83       	std	Y+4, r25	; 0x04
    449a:	89 81       	ldd	r24, Y+1	; 0x01
    449c:	9a 81       	ldd	r25, Y+2	; 0x02
    449e:	ab 81       	ldd	r26, Y+3	; 0x03
    44a0:	bc 81       	ldd	r27, Y+4	; 0x04
    44a2:	02 97       	sbiw	r24, 0x02	; 2
    44a4:	a1 05       	cpc	r26, r1
    44a6:	b1 05       	cpc	r27, r1
    44a8:	40 f4       	brcc	.+16     	; 0x44ba <delayUS+0x3e>
    44aa:	82 e0       	ldi	r24, 0x02	; 2
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	a0 e0       	ldi	r26, 0x00	; 0
    44b0:	b0 e0       	ldi	r27, 0x00	; 0
    44b2:	89 83       	std	Y+1, r24	; 0x01
    44b4:	9a 83       	std	Y+2, r25	; 0x02
    44b6:	ab 83       	std	Y+3, r26	; 0x03
    44b8:	bc 83       	std	Y+4, r27	; 0x04
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	9b e0       	ldi	r25, 0x0B	; 11
    44be:	21 e0       	ldi	r18, 0x01	; 1
    44c0:	fc 01       	movw	r30, r24
    44c2:	26 83       	std	Z+6, r18	; 0x06
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	9b e0       	ldi	r25, 0x0B	; 11
    44c8:	fc 01       	movw	r30, r24
    44ca:	10 a2       	std	Z+32, r1	; 0x20
    44cc:	11 a2       	std	Z+33, r1	; 0x21
    44ce:	60 e0       	ldi	r22, 0x00	; 0
    44d0:	80 e0       	ldi	r24, 0x00	; 0
    44d2:	9b e0       	ldi	r25, 0x0B	; 11
    44d4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <TC0_ConfigWGM>
    44d8:	89 81       	ldd	r24, Y+1	; 0x01
    44da:	9a 81       	ldd	r25, Y+2	; 0x02
    44dc:	ab 81       	ldd	r26, Y+3	; 0x03
    44de:	bc 81       	ldd	r27, Y+4	; 0x04
    44e0:	8e 3f       	cpi	r24, 0xFE	; 254
    44e2:	9f 4f       	sbci	r25, 0xFF	; 255
    44e4:	a1 05       	cpc	r26, r1
    44e6:	b1 05       	cpc	r27, r1
    44e8:	98 f4       	brcc	.+38     	; 0x4510 <delayUS+0x94>
    44ea:	20 e0       	ldi	r18, 0x00	; 0
    44ec:	3b e0       	ldi	r19, 0x0B	; 11
    44ee:	89 81       	ldd	r24, Y+1	; 0x01
    44f0:	9a 81       	ldd	r25, Y+2	; 0x02
    44f2:	ab 81       	ldd	r26, Y+3	; 0x03
    44f4:	bc 81       	ldd	r27, Y+4	; 0x04
    44f6:	b6 95       	lsr	r27
    44f8:	a7 95       	ror	r26
    44fa:	97 95       	ror	r25
    44fc:	87 95       	ror	r24
    44fe:	f9 01       	movw	r30, r18
    4500:	86 a3       	std	Z+38, r24	; 0x26
    4502:	97 a3       	std	Z+39, r25	; 0x27
    4504:	65 e0       	ldi	r22, 0x05	; 5
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	9b e0       	ldi	r25, 0x0B	; 11
    450a:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>
    450e:	1f c0       	rjmp	.+62     	; 0x454e <delayUS+0xd2>
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	9a 81       	ldd	r25, Y+2	; 0x02
    4514:	ab 81       	ldd	r26, Y+3	; 0x03
    4516:	bc 81       	ldd	r27, Y+4	; 0x04
    4518:	80 34       	cpi	r24, 0x40	; 64
    451a:	92 44       	sbci	r25, 0x42	; 66
    451c:	af 40       	sbci	r26, 0x0F	; 15
    451e:	b1 05       	cpc	r27, r1
    4520:	b0 f4       	brcc	.+44     	; 0x454e <delayUS+0xd2>
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	3b e0       	ldi	r19, 0x0B	; 11
    4526:	89 81       	ldd	r24, Y+1	; 0x01
    4528:	9a 81       	ldd	r25, Y+2	; 0x02
    452a:	ab 81       	ldd	r26, Y+3	; 0x03
    452c:	bc 81       	ldd	r27, Y+4	; 0x04
    452e:	68 94       	set
    4530:	14 f8       	bld	r1, 4
    4532:	b6 95       	lsr	r27
    4534:	a7 95       	ror	r26
    4536:	97 95       	ror	r25
    4538:	87 95       	ror	r24
    453a:	16 94       	lsr	r1
    453c:	d1 f7       	brne	.-12     	; 0x4532 <delayUS+0xb6>
    453e:	f9 01       	movw	r30, r18
    4540:	86 a3       	std	Z+38, r24	; 0x26
    4542:	97 a3       	std	Z+39, r25	; 0x27
    4544:	67 e0       	ldi	r22, 0x07	; 7
    4546:	80 e0       	ldi	r24, 0x00	; 0
    4548:	9b e0       	ldi	r25, 0x0B	; 11
    454a:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>
    454e:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <egDisplayTiming>
    4552:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <egDisplayTiming+0x1>
    4556:	0f 2e       	mov	r0, r31
    4558:	f4 ef       	ldi	r31, 0xF4	; 244
    455a:	cf 2e       	mov	r12, r31
    455c:	dd 24       	eor	r13, r13
    455e:	d3 94       	inc	r13
    4560:	e1 2c       	mov	r14, r1
    4562:	f1 2c       	mov	r15, r1
    4564:	f0 2d       	mov	r31, r0
    4566:	00 e0       	ldi	r16, 0x00	; 0
    4568:	21 e0       	ldi	r18, 0x01	; 1
    456a:	41 e0       	ldi	r20, 0x01	; 1
    456c:	50 e0       	ldi	r21, 0x00	; 0
    456e:	60 e0       	ldi	r22, 0x00	; 0
    4570:	70 e0       	ldi	r23, 0x00	; 0
    4572:	0e 94 7d 04 	call	0x8fa	; 0x8fa <xEventGroupWaitBits>
    4576:	00 00       	nop
    4578:	24 96       	adiw	r28, 0x04	; 4
    457a:	cd bf       	out	0x3d, r28	; 61
    457c:	de bf       	out	0x3e, r29	; 62
    457e:	df 91       	pop	r29
    4580:	cf 91       	pop	r28
    4582:	0f 91       	pop	r16
    4584:	ff 90       	pop	r15
    4586:	ef 90       	pop	r14
    4588:	df 90       	pop	r13
    458a:	cf 90       	pop	r12
    458c:	08 95       	ret

0000458e <setPort>:
    458e:	cf 93       	push	r28
    4590:	df 93       	push	r29
    4592:	1f 92       	push	r1
    4594:	cd b7       	in	r28, 0x3d	; 61
    4596:	de b7       	in	r29, 0x3e	; 62
    4598:	89 83       	std	Y+1, r24	; 0x01
    459a:	89 81       	ldd	r24, Y+1	; 0x01
    459c:	8f 70       	andi	r24, 0x0F	; 15
    459e:	89 83       	std	Y+1, r24	; 0x01
    45a0:	89 81       	ldd	r24, Y+1	; 0x01
    45a2:	82 95       	swap	r24
    45a4:	80 7f       	andi	r24, 0xF0	; 240
    45a6:	89 83       	std	Y+1, r24	; 0x01
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	96 e0       	ldi	r25, 0x06	; 6
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	36 e0       	ldi	r19, 0x06	; 6
    45b0:	f9 01       	movw	r30, r18
    45b2:	34 81       	ldd	r19, Z+4	; 0x04
    45b4:	29 81       	ldd	r18, Y+1	; 0x01
    45b6:	2f 60       	ori	r18, 0x0F	; 15
    45b8:	23 23       	and	r18, r19
    45ba:	fc 01       	movw	r30, r24
    45bc:	24 83       	std	Z+4, r18	; 0x04
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	96 e0       	ldi	r25, 0x06	; 6
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	36 e0       	ldi	r19, 0x06	; 6
    45c6:	f9 01       	movw	r30, r18
    45c8:	34 81       	ldd	r19, Z+4	; 0x04
    45ca:	29 81       	ldd	r18, Y+1	; 0x01
    45cc:	23 2b       	or	r18, r19
    45ce:	fc 01       	movw	r30, r24
    45d0:	24 83       	std	Z+4, r18	; 0x04
    45d2:	00 00       	nop
    45d4:	0f 90       	pop	r0
    45d6:	df 91       	pop	r29
    45d8:	cf 91       	pop	r28
    45da:	08 95       	ret

000045dc <setRS>:
    45dc:	cf 93       	push	r28
    45de:	df 93       	push	r29
    45e0:	1f 92       	push	r1
    45e2:	cd b7       	in	r28, 0x3d	; 61
    45e4:	de b7       	in	r29, 0x3e	; 62
    45e6:	89 83       	std	Y+1, r24	; 0x01
    45e8:	89 81       	ldd	r24, Y+1	; 0x01
    45ea:	88 23       	and	r24, r24
    45ec:	31 f0       	breq	.+12     	; 0x45fa <setRS+0x1e>
    45ee:	80 e6       	ldi	r24, 0x60	; 96
    45f0:	96 e0       	ldi	r25, 0x06	; 6
    45f2:	21 e0       	ldi	r18, 0x01	; 1
    45f4:	fc 01       	movw	r30, r24
    45f6:	25 83       	std	Z+5, r18	; 0x05
    45f8:	05 c0       	rjmp	.+10     	; 0x4604 <setRS+0x28>
    45fa:	80 e6       	ldi	r24, 0x60	; 96
    45fc:	96 e0       	ldi	r25, 0x06	; 6
    45fe:	21 e0       	ldi	r18, 0x01	; 1
    4600:	fc 01       	movw	r30, r24
    4602:	26 83       	std	Z+6, r18	; 0x06
    4604:	00 00       	nop
    4606:	0f 90       	pop	r0
    4608:	df 91       	pop	r29
    460a:	cf 91       	pop	r28
    460c:	08 95       	ret

0000460e <setRW>:
    460e:	cf 93       	push	r28
    4610:	df 93       	push	r29
    4612:	1f 92       	push	r1
    4614:	cd b7       	in	r28, 0x3d	; 61
    4616:	de b7       	in	r29, 0x3e	; 62
    4618:	89 83       	std	Y+1, r24	; 0x01
    461a:	89 81       	ldd	r24, Y+1	; 0x01
    461c:	88 23       	and	r24, r24
    461e:	31 f0       	breq	.+12     	; 0x462c <setRW+0x1e>
    4620:	80 e6       	ldi	r24, 0x60	; 96
    4622:	96 e0       	ldi	r25, 0x06	; 6
    4624:	22 e0       	ldi	r18, 0x02	; 2
    4626:	fc 01       	movw	r30, r24
    4628:	25 83       	std	Z+5, r18	; 0x05
    462a:	05 c0       	rjmp	.+10     	; 0x4636 <setRW+0x28>
    462c:	80 e6       	ldi	r24, 0x60	; 96
    462e:	96 e0       	ldi	r25, 0x06	; 6
    4630:	22 e0       	ldi	r18, 0x02	; 2
    4632:	fc 01       	movw	r30, r24
    4634:	26 83       	std	Z+6, r18	; 0x06
    4636:	00 00       	nop
    4638:	0f 90       	pop	r0
    463a:	df 91       	pop	r29
    463c:	cf 91       	pop	r28
    463e:	08 95       	ret

00004640 <setE>:
    4640:	cf 93       	push	r28
    4642:	df 93       	push	r29
    4644:	1f 92       	push	r1
    4646:	cd b7       	in	r28, 0x3d	; 61
    4648:	de b7       	in	r29, 0x3e	; 62
    464a:	89 83       	std	Y+1, r24	; 0x01
    464c:	89 81       	ldd	r24, Y+1	; 0x01
    464e:	88 23       	and	r24, r24
    4650:	31 f0       	breq	.+12     	; 0x465e <setE+0x1e>
    4652:	80 e6       	ldi	r24, 0x60	; 96
    4654:	96 e0       	ldi	r25, 0x06	; 6
    4656:	24 e0       	ldi	r18, 0x04	; 4
    4658:	fc 01       	movw	r30, r24
    465a:	25 83       	std	Z+5, r18	; 0x05
    465c:	05 c0       	rjmp	.+10     	; 0x4668 <setE+0x28>
    465e:	80 e6       	ldi	r24, 0x60	; 96
    4660:	96 e0       	ldi	r25, 0x06	; 6
    4662:	24 e0       	ldi	r18, 0x04	; 4
    4664:	fc 01       	movw	r30, r24
    4666:	26 83       	std	Z+6, r18	; 0x06
    4668:	00 00       	nop
    466a:	0f 90       	pop	r0
    466c:	df 91       	pop	r29
    466e:	cf 91       	pop	r28
    4670:	08 95       	ret

00004672 <Nybble>:
    4672:	cf 93       	push	r28
    4674:	df 93       	push	r29
    4676:	cd b7       	in	r28, 0x3d	; 61
    4678:	de b7       	in	r29, 0x3e	; 62
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	0e 94 20 23 	call	0x4640	; 0x4640 <setE>
    4680:	61 e0       	ldi	r22, 0x01	; 1
    4682:	70 e0       	ldi	r23, 0x00	; 0
    4684:	80 e0       	ldi	r24, 0x00	; 0
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	0e 94 3e 22 	call	0x447c	; 0x447c <delayUS>
    468c:	80 e0       	ldi	r24, 0x00	; 0
    468e:	0e 94 20 23 	call	0x4640	; 0x4640 <setE>
    4692:	00 00       	nop
    4694:	df 91       	pop	r29
    4696:	cf 91       	pop	r28
    4698:	08 95       	ret

0000469a <command>:
    469a:	cf 93       	push	r28
    469c:	df 93       	push	r29
    469e:	1f 92       	push	r1
    46a0:	cd b7       	in	r28, 0x3d	; 61
    46a2:	de b7       	in	r29, 0x3e	; 62
    46a4:	89 83       	std	Y+1, r24	; 0x01
    46a6:	89 81       	ldd	r24, Y+1	; 0x01
    46a8:	82 95       	swap	r24
    46aa:	8f 70       	andi	r24, 0x0F	; 15
    46ac:	0e 94 c7 22 	call	0x458e	; 0x458e <setPort>
    46b0:	80 e0       	ldi	r24, 0x00	; 0
    46b2:	0e 94 ee 22 	call	0x45dc	; 0x45dc <setRS>
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	0e 94 07 23 	call	0x460e	; 0x460e <setRW>
    46bc:	0e 94 39 23 	call	0x4672	; 0x4672 <Nybble>
    46c0:	89 81       	ldd	r24, Y+1	; 0x01
    46c2:	8f 70       	andi	r24, 0x0F	; 15
    46c4:	0e 94 c7 22 	call	0x458e	; 0x458e <setPort>
    46c8:	0e 94 39 23 	call	0x4672	; 0x4672 <Nybble>
    46cc:	00 00       	nop
    46ce:	0f 90       	pop	r0
    46d0:	df 91       	pop	r29
    46d2:	cf 91       	pop	r28
    46d4:	08 95       	ret

000046d6 <write>:
    46d6:	cf 93       	push	r28
    46d8:	df 93       	push	r29
    46da:	1f 92       	push	r1
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    46e0:	89 83       	std	Y+1, r24	; 0x01
    46e2:	89 81       	ldd	r24, Y+1	; 0x01
    46e4:	82 95       	swap	r24
    46e6:	8f 70       	andi	r24, 0x0F	; 15
    46e8:	0e 94 c7 22 	call	0x458e	; 0x458e <setPort>
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	0e 94 ee 22 	call	0x45dc	; 0x45dc <setRS>
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	0e 94 07 23 	call	0x460e	; 0x460e <setRW>
    46f8:	0e 94 39 23 	call	0x4672	; 0x4672 <Nybble>
    46fc:	89 81       	ldd	r24, Y+1	; 0x01
    46fe:	8f 70       	andi	r24, 0x0F	; 15
    4700:	0e 94 c7 22 	call	0x458e	; 0x458e <setPort>
    4704:	0e 94 39 23 	call	0x4672	; 0x4672 <Nybble>
    4708:	00 00       	nop
    470a:	0f 90       	pop	r0
    470c:	df 91       	pop	r29
    470e:	cf 91       	pop	r28
    4710:	08 95       	ret

00004712 <vInitDisplay>:
 
 void vInitDisplay() {
    4712:	ef 92       	push	r14
    4714:	ff 92       	push	r15
    4716:	0f 93       	push	r16
    4718:	cf 93       	push	r28
    471a:	df 93       	push	r29
    471c:	cd b7       	in	r28, 0x3d	; 61
    471e:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    4720:	80 e0       	ldi	r24, 0x00	; 0
    4722:	96 e0       	ldi	r25, 0x06	; 6
    4724:	20 e1       	ldi	r18, 0x10	; 16
    4726:	fc 01       	movw	r30, r24
    4728:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	96 e0       	ldi	r25, 0x06	; 6
    472e:	20 e2       	ldi	r18, 0x20	; 32
    4730:	fc 01       	movw	r30, r24
    4732:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	96 e0       	ldi	r25, 0x06	; 6
    4738:	20 e4       	ldi	r18, 0x40	; 64
    473a:	fc 01       	movw	r30, r24
    473c:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	96 e0       	ldi	r25, 0x06	; 6
    4742:	20 e8       	ldi	r18, 0x80	; 128
    4744:	fc 01       	movw	r30, r24
    4746:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    4748:	80 e6       	ldi	r24, 0x60	; 96
    474a:	96 e0       	ldi	r25, 0x06	; 6
    474c:	21 e0       	ldi	r18, 0x01	; 1
    474e:	fc 01       	movw	r30, r24
    4750:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    4752:	80 e6       	ldi	r24, 0x60	; 96
    4754:	96 e0       	ldi	r25, 0x06	; 6
    4756:	22 e0       	ldi	r18, 0x02	; 2
    4758:	fc 01       	movw	r30, r24
    475a:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    475c:	80 e6       	ldi	r24, 0x60	; 96
    475e:	96 e0       	ldi	r25, 0x06	; 6
    4760:	24 e0       	ldi	r18, 0x04	; 4
    4762:	fc 01       	movw	r30, r24
    4764:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	96 e0       	ldi	r25, 0x06	; 6
    476a:	20 e0       	ldi	r18, 0x00	; 0
    476c:	36 e0       	ldi	r19, 0x06	; 6
    476e:	f9 01       	movw	r30, r18
    4770:	24 81       	ldd	r18, Z+4	; 0x04
    4772:	2f 70       	andi	r18, 0x0F	; 15
    4774:	fc 01       	movw	r30, r24
    4776:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    4778:	80 e6       	ldi	r24, 0x60	; 96
    477a:	96 e0       	ldi	r25, 0x06	; 6
    477c:	20 e6       	ldi	r18, 0x60	; 96
    477e:	36 e0       	ldi	r19, 0x06	; 6
    4780:	f9 01       	movw	r30, r18
    4782:	24 81       	ldd	r18, Z+4	; 0x04
    4784:	28 7f       	andi	r18, 0xF8	; 248
    4786:	fc 01       	movw	r30, r24
    4788:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    478a:	40 e0       	ldi	r20, 0x00	; 0
    478c:	66 e1       	ldi	r22, 0x16	; 22
    478e:	88 e0       	ldi	r24, 0x08	; 8
    4790:	0e 94 66 0d 	call	0x1acc	; 0x1acc <xQueueGenericCreate>
    4794:	80 93 e9 2c 	sts	0x2CE9, r24	; 0x802ce9 <displayLineQueue>
    4798:	90 93 ea 2c 	sts	0x2CEA, r25	; 0x802cea <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    479c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <xEventGroupCreate>
    47a0:	80 93 eb 2c 	sts	0x2CEB, r24	; 0x802ceb <egDisplayTiming>
    47a4:	90 93 ec 2c 	sts	0x2CEC, r25	; 0x802cec <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);	//von Hand auf Prio 2 gestellt
    47a8:	e1 2c       	mov	r14, r1
    47aa:	f1 2c       	mov	r15, r1
    47ac:	02 e0       	ldi	r16, 0x02	; 2
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	4e e5       	ldi	r20, 0x5E	; 94
    47b4:	51 e0       	ldi	r21, 0x01	; 1
    47b6:	6f e4       	ldi	r22, 0x4F	; 79
    47b8:	70 e2       	ldi	r23, 0x20	; 32
    47ba:	87 e8       	ldi	r24, 0x87	; 135
    47bc:	94 e2       	ldi	r25, 0x24	; 36
    47be:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
 }
    47c2:	00 00       	nop
    47c4:	df 91       	pop	r29
    47c6:	cf 91       	pop	r28
    47c8:	0f 91       	pop	r16
    47ca:	ff 90       	pop	r15
    47cc:	ef 90       	pop	r14
    47ce:	08 95       	ret

000047d0 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    47d0:	cf 93       	push	r28
    47d2:	df 93       	push	r29
    47d4:	00 d0       	rcall	.+0      	; 0x47d6 <_displaySetPos+0x6>
    47d6:	1f 92       	push	r1
    47d8:	cd b7       	in	r28, 0x3d	; 61
    47da:	de b7       	in	r29, 0x3e	; 62
    47dc:	89 83       	std	Y+1, r24	; 0x01
    47de:	9a 83       	std	Y+2, r25	; 0x02
    47e0:	6b 83       	std	Y+3, r22	; 0x03
    47e2:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    47e4:	89 81       	ldd	r24, Y+1	; 0x01
    47e6:	9a 81       	ldd	r25, Y+2	; 0x02
    47e8:	81 30       	cpi	r24, 0x01	; 1
    47ea:	91 05       	cpc	r25, r1
    47ec:	89 f0       	breq	.+34     	; 0x4810 <_displaySetPos+0x40>
    47ee:	82 30       	cpi	r24, 0x02	; 2
    47f0:	91 05       	cpc	r25, r1
    47f2:	1c f4       	brge	.+6      	; 0x47fa <_displaySetPos+0x2a>
    47f4:	89 2b       	or	r24, r25
    47f6:	39 f0       	breq	.+14     	; 0x4806 <_displaySetPos+0x36>
    47f8:	1a c0       	rjmp	.+52     	; 0x482e <_displaySetPos+0x5e>
    47fa:	82 30       	cpi	r24, 0x02	; 2
    47fc:	91 05       	cpc	r25, r1
    47fe:	69 f0       	breq	.+26     	; 0x481a <_displaySetPos+0x4a>
    4800:	03 97       	sbiw	r24, 0x03	; 3
    4802:	81 f0       	breq	.+32     	; 0x4824 <_displaySetPos+0x54>
    4804:	14 c0       	rjmp	.+40     	; 0x482e <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    4806:	8b 81       	ldd	r24, Y+3	; 0x03
    4808:	80 58       	subi	r24, 0x80	; 128
    480a:	0e 94 4d 23 	call	0x469a	; 0x469a <command>
		 break;
    480e:	0f c0       	rjmp	.+30     	; 0x482e <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    4810:	8b 81       	ldd	r24, Y+3	; 0x03
    4812:	80 54       	subi	r24, 0x40	; 64
    4814:	0e 94 4d 23 	call	0x469a	; 0x469a <command>
		 break;
    4818:	0a c0       	rjmp	.+20     	; 0x482e <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    481a:	8b 81       	ldd	r24, Y+3	; 0x03
    481c:	8c 56       	subi	r24, 0x6C	; 108
    481e:	0e 94 4d 23 	call	0x469a	; 0x469a <command>
		 break;
    4822:	05 c0       	rjmp	.+10     	; 0x482e <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    4824:	8b 81       	ldd	r24, Y+3	; 0x03
    4826:	8c 52       	subi	r24, 0x2C	; 44
    4828:	0e 94 4d 23 	call	0x469a	; 0x469a <command>
		 break;
    482c:	00 00       	nop
	 }
	 delayUS(39);
    482e:	67 e2       	ldi	r22, 0x27	; 39
    4830:	70 e0       	ldi	r23, 0x00	; 0
    4832:	80 e0       	ldi	r24, 0x00	; 0
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	0e 94 3e 22 	call	0x447c	; 0x447c <delayUS>
 }
    483a:	00 00       	nop
    483c:	24 96       	adiw	r28, 0x04	; 4
    483e:	cd bf       	out	0x3d, r28	; 61
    4840:	de bf       	out	0x3e, r29	; 62
    4842:	df 91       	pop	r29
    4844:	cf 91       	pop	r28
    4846:	08 95       	ret

00004848 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    4848:	cf 93       	push	r28
    484a:	df 93       	push	r29
    484c:	1f 92       	push	r1
    484e:	cd b7       	in	r28, 0x3d	; 61
    4850:	de b7       	in	r29, 0x3e	; 62
    4852:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    4854:	89 81       	ldd	r24, Y+1	; 0x01
    4856:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <write>
	 delayUS(43);
    485a:	6b e2       	ldi	r22, 0x2B	; 43
    485c:	70 e0       	ldi	r23, 0x00	; 0
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	0e 94 3e 22 	call	0x447c	; 0x447c <delayUS>
 }
    4866:	00 00       	nop
    4868:	0f 90       	pop	r0
    486a:	df 91       	pop	r29
    486c:	cf 91       	pop	r28
    486e:	08 95       	ret

00004870 <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    4870:	cf 93       	push	r28
    4872:	df 93       	push	r29
    4874:	00 d0       	rcall	.+0      	; 0x4876 <_displayWriteString+0x6>
    4876:	1f 92       	push	r1
    4878:	cd b7       	in	r28, 0x3d	; 61
    487a:	de b7       	in	r29, 0x3e	; 62
    487c:	8b 83       	std	Y+3, r24	; 0x03
    487e:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    4880:	19 82       	std	Y+1, r1	; 0x01
    4882:	1a 82       	std	Y+2, r1	; 0x02
    4884:	19 c0       	rjmp	.+50     	; 0x48b8 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    4886:	89 81       	ldd	r24, Y+1	; 0x01
    4888:	9a 81       	ldd	r25, Y+2	; 0x02
    488a:	2b 81       	ldd	r18, Y+3	; 0x03
    488c:	3c 81       	ldd	r19, Y+4	; 0x04
    488e:	82 0f       	add	r24, r18
    4890:	93 1f       	adc	r25, r19
    4892:	fc 01       	movw	r30, r24
    4894:	80 81       	ld	r24, Z
    4896:	88 23       	and	r24, r24
    4898:	a1 f0       	breq	.+40     	; 0x48c2 <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    489a:	89 81       	ldd	r24, Y+1	; 0x01
    489c:	9a 81       	ldd	r25, Y+2	; 0x02
    489e:	2b 81       	ldd	r18, Y+3	; 0x03
    48a0:	3c 81       	ldd	r19, Y+4	; 0x04
    48a2:	82 0f       	add	r24, r18
    48a4:	93 1f       	adc	r25, r19
    48a6:	fc 01       	movw	r30, r24
    48a8:	80 81       	ld	r24, Z
    48aa:	0e 94 24 24 	call	0x4848	; 0x4848 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    48ae:	89 81       	ldd	r24, Y+1	; 0x01
    48b0:	9a 81       	ldd	r25, Y+2	; 0x02
    48b2:	01 96       	adiw	r24, 0x01	; 1
    48b4:	89 83       	std	Y+1, r24	; 0x01
    48b6:	9a 83       	std	Y+2, r25	; 0x02
    48b8:	89 81       	ldd	r24, Y+1	; 0x01
    48ba:	9a 81       	ldd	r25, Y+2	; 0x02
    48bc:	44 97       	sbiw	r24, 0x14	; 20
    48be:	1c f3       	brlt	.-58     	; 0x4886 <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    48c0:	01 c0       	rjmp	.+2      	; 0x48c4 <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    48c2:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    48c4:	00 00       	nop
    48c6:	24 96       	adiw	r28, 0x04	; 4
    48c8:	cd bf       	out	0x3d, r28	; 61
    48ca:	de bf       	out	0x3e, r29	; 62
    48cc:	df 91       	pop	r29
    48ce:	cf 91       	pop	r28
    48d0:	08 95       	ret

000048d2 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    48d2:	cf 93       	push	r28
    48d4:	df 93       	push	r29
    48d6:	00 d0       	rcall	.+0      	; 0x48d8 <_displayWriteStringAtPos+0x6>
    48d8:	00 d0       	rcall	.+0      	; 0x48da <_displayWriteStringAtPos+0x8>
    48da:	cd b7       	in	r28, 0x3d	; 61
    48dc:	de b7       	in	r29, 0x3e	; 62
    48de:	89 83       	std	Y+1, r24	; 0x01
    48e0:	9a 83       	std	Y+2, r25	; 0x02
    48e2:	6b 83       	std	Y+3, r22	; 0x03
    48e4:	7c 83       	std	Y+4, r23	; 0x04
    48e6:	4d 83       	std	Y+5, r20	; 0x05
    48e8:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    48ea:	2b 81       	ldd	r18, Y+3	; 0x03
    48ec:	3c 81       	ldd	r19, Y+4	; 0x04
    48ee:	89 81       	ldd	r24, Y+1	; 0x01
    48f0:	9a 81       	ldd	r25, Y+2	; 0x02
    48f2:	b9 01       	movw	r22, r18
    48f4:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <_displaySetPos>
	 _displayWriteString(s);
    48f8:	8d 81       	ldd	r24, Y+5	; 0x05
    48fa:	9e 81       	ldd	r25, Y+6	; 0x06
    48fc:	0e 94 38 24 	call	0x4870	; 0x4870 <_displayWriteString>
 }
    4900:	00 00       	nop
    4902:	26 96       	adiw	r28, 0x06	; 6
    4904:	cd bf       	out	0x3d, r28	; 61
    4906:	de bf       	out	0x3e, r29	; 62
    4908:	df 91       	pop	r29
    490a:	cf 91       	pop	r28
    490c:	08 95       	ret

0000490e <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    490e:	cf 93       	push	r28
    4910:	df 93       	push	r29
    4912:	cd b7       	in	r28, 0x3d	; 61
    4914:	de b7       	in	r29, 0x3e	; 62
    4916:	c0 57       	subi	r28, 0x70	; 112
    4918:	d1 09       	sbc	r29, r1
    491a:	cd bf       	out	0x3d, r28	; 61
    491c:	de bf       	out	0x3e, r29	; 62
    491e:	9e 01       	movw	r18, r28
    4920:	21 59       	subi	r18, 0x91	; 145
    4922:	3f 4f       	sbci	r19, 0xFF	; 255
    4924:	f9 01       	movw	r30, r18
    4926:	80 83       	st	Z, r24
    4928:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    492a:	19 82       	std	Y+1, r1	; 0x01
    492c:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    492e:	1b 82       	std	Y+3, r1	; 0x03
    4930:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    4932:	1d 82       	std	Y+5, r1	; 0x05
    4934:	1e 82       	std	Y+6, r1	; 0x06
    4936:	26 c0       	rjmp	.+76     	; 0x4984 <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    4938:	1f 82       	std	Y+7, r1	; 0x07
    493a:	18 86       	std	Y+8, r1	; 0x08
    493c:	1a c0       	rjmp	.+52     	; 0x4972 <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    493e:	2d 81       	ldd	r18, Y+5	; 0x05
    4940:	3e 81       	ldd	r19, Y+6	; 0x06
    4942:	44 e1       	ldi	r20, 0x14	; 20
    4944:	42 9f       	mul	r20, r18
    4946:	c0 01       	movw	r24, r0
    4948:	43 9f       	mul	r20, r19
    494a:	90 0d       	add	r25, r0
    494c:	11 24       	eor	r1, r1
    494e:	9e 01       	movw	r18, r28
    4950:	2f 5f       	subi	r18, 0xFF	; 255
    4952:	3f 4f       	sbci	r19, 0xFF	; 255
    4954:	28 0f       	add	r18, r24
    4956:	39 1f       	adc	r19, r25
    4958:	8f 81       	ldd	r24, Y+7	; 0x07
    495a:	98 85       	ldd	r25, Y+8	; 0x08
    495c:	82 0f       	add	r24, r18
    495e:	93 1f       	adc	r25, r19
    4960:	08 96       	adiw	r24, 0x08	; 8
    4962:	20 e2       	ldi	r18, 0x20	; 32
    4964:	fc 01       	movw	r30, r24
    4966:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    4968:	8f 81       	ldd	r24, Y+7	; 0x07
    496a:	98 85       	ldd	r25, Y+8	; 0x08
    496c:	01 96       	adiw	r24, 0x01	; 1
    496e:	8f 83       	std	Y+7, r24	; 0x07
    4970:	98 87       	std	Y+8, r25	; 0x08
    4972:	8f 81       	ldd	r24, Y+7	; 0x07
    4974:	98 85       	ldd	r25, Y+8	; 0x08
    4976:	44 97       	sbiw	r24, 0x14	; 20
    4978:	14 f3       	brlt	.-60     	; 0x493e <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    497a:	8d 81       	ldd	r24, Y+5	; 0x05
    497c:	9e 81       	ldd	r25, Y+6	; 0x06
    497e:	01 96       	adiw	r24, 0x01	; 1
    4980:	8d 83       	std	Y+5, r24	; 0x05
    4982:	9e 83       	std	Y+6, r25	; 0x06
    4984:	8d 81       	ldd	r24, Y+5	; 0x05
    4986:	9e 81       	ldd	r25, Y+6	; 0x06
    4988:	04 97       	sbiw	r24, 0x04	; 4
    498a:	b4 f2       	brlt	.-84     	; 0x4938 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    498c:	60 e4       	ldi	r22, 0x40	; 64
    498e:	7c e9       	ldi	r23, 0x9C	; 156
    4990:	80 e0       	ldi	r24, 0x00	; 0
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	0e 94 3e 22 	call	0x447c	; 0x447c <delayUS>
	 setPort(0x03);
    4998:	83 e0       	ldi	r24, 0x03	; 3
    499a:	0e 94 c7 22 	call	0x458e	; 0x458e <setPort>
	 delayUS(5000);
    499e:	68 e8       	ldi	r22, 0x88	; 136
    49a0:	73 e1       	ldi	r23, 0x13	; 19
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	0e 94 3e 22 	call	0x447c	; 0x447c <delayUS>
	 Nybble();
    49aa:	0e 94 39 23 	call	0x4672	; 0x4672 <Nybble>
	 delayUS(160);
    49ae:	60 ea       	ldi	r22, 0xA0	; 160
    49b0:	70 e0       	ldi	r23, 0x00	; 0
    49b2:	80 e0       	ldi	r24, 0x00	; 0
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	0e 94 3e 22 	call	0x447c	; 0x447c <delayUS>
	 Nybble();
    49ba:	0e 94 39 23 	call	0x4672	; 0x4672 <Nybble>
	 delayUS(160);
    49be:	60 ea       	ldi	r22, 0xA0	; 160
    49c0:	70 e0       	ldi	r23, 0x00	; 0
    49c2:	80 e0       	ldi	r24, 0x00	; 0
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	0e 94 3e 22 	call	0x447c	; 0x447c <delayUS>
	 Nybble();
    49ca:	0e 94 39 23 	call	0x4672	; 0x4672 <Nybble>
	 delayUS(160);
    49ce:	60 ea       	ldi	r22, 0xA0	; 160
    49d0:	70 e0       	ldi	r23, 0x00	; 0
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	0e 94 3e 22 	call	0x447c	; 0x447c <delayUS>
	 setPort(0x02);
    49da:	82 e0       	ldi	r24, 0x02	; 2
    49dc:	0e 94 c7 22 	call	0x458e	; 0x458e <setPort>
	 Nybble();
    49e0:	0e 94 39 23 	call	0x4672	; 0x4672 <Nybble>
	 command(0x28);
    49e4:	88 e2       	ldi	r24, 0x28	; 40
    49e6:	0e 94 4d 23 	call	0x469a	; 0x469a <command>
	 command(0x10);
    49ea:	80 e1       	ldi	r24, 0x10	; 16
    49ec:	0e 94 4d 23 	call	0x469a	; 0x469a <command>
	 command(0x0C); //Cursor and Blinking off
    49f0:	8c e0       	ldi	r24, 0x0C	; 12
    49f2:	0e 94 4d 23 	call	0x469a	; 0x469a <command>
	 command(0x06);
    49f6:	86 e0       	ldi	r24, 0x06	; 6
    49f8:	0e 94 4d 23 	call	0x469a	; 0x469a <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    49fc:	68 ec       	ldi	r22, 0xC8	; 200
    49fe:	70 e0       	ldi	r23, 0x00	; 0
    4a00:	80 e0       	ldi	r24, 0x00	; 0
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	0e 94 ba 13 	call	0x2774	; 0x2774 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    4a08:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <egDisplayTiming>
    4a0c:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <egDisplayTiming+0x1>
    4a10:	40 e0       	ldi	r20, 0x00	; 0
    4a12:	50 e0       	ldi	r21, 0x00	; 0
    4a14:	ba 01       	movw	r22, r20
    4a16:	0e 94 b5 05 	call	0xb6a	; 0xb6a <xEventGroupClearBits>
    4a1a:	dc 01       	movw	r26, r24
    4a1c:	cb 01       	movw	r24, r22
    4a1e:	89 2b       	or	r24, r25
    4a20:	8a 2b       	or	r24, r26
    4a22:	8b 2b       	or	r24, r27
    4a24:	09 f4       	brne	.+2      	; 0x4a28 <vDisplayUpdateTask+0x11a>
    4a26:	96 c0       	rjmp	.+300    	; 0x4b54 <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    4a28:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <egDisplayTiming>
    4a2c:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <egDisplayTiming+0x1>
    4a30:	42 e0       	ldi	r20, 0x02	; 2
    4a32:	50 e0       	ldi	r21, 0x00	; 0
    4a34:	60 e0       	ldi	r22, 0x00	; 0
    4a36:	70 e0       	ldi	r23, 0x00	; 0
    4a38:	0e 94 b5 05 	call	0xb6a	; 0xb6a <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    4a3c:	19 82       	std	Y+1, r1	; 0x01
    4a3e:	1a 82       	std	Y+2, r1	; 0x02
    4a40:	26 c0       	rjmp	.+76     	; 0x4a8e <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    4a42:	1b 82       	std	Y+3, r1	; 0x03
    4a44:	1c 82       	std	Y+4, r1	; 0x04
    4a46:	1a c0       	rjmp	.+52     	; 0x4a7c <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    4a48:	29 81       	ldd	r18, Y+1	; 0x01
    4a4a:	3a 81       	ldd	r19, Y+2	; 0x02
    4a4c:	44 e1       	ldi	r20, 0x14	; 20
    4a4e:	42 9f       	mul	r20, r18
    4a50:	c0 01       	movw	r24, r0
    4a52:	43 9f       	mul	r20, r19
    4a54:	90 0d       	add	r25, r0
    4a56:	11 24       	eor	r1, r1
    4a58:	9e 01       	movw	r18, r28
    4a5a:	2f 5f       	subi	r18, 0xFF	; 255
    4a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a5e:	28 0f       	add	r18, r24
    4a60:	39 1f       	adc	r19, r25
    4a62:	8b 81       	ldd	r24, Y+3	; 0x03
    4a64:	9c 81       	ldd	r25, Y+4	; 0x04
    4a66:	82 0f       	add	r24, r18
    4a68:	93 1f       	adc	r25, r19
    4a6a:	08 96       	adiw	r24, 0x08	; 8
    4a6c:	20 e2       	ldi	r18, 0x20	; 32
    4a6e:	fc 01       	movw	r30, r24
    4a70:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    4a72:	8b 81       	ldd	r24, Y+3	; 0x03
    4a74:	9c 81       	ldd	r25, Y+4	; 0x04
    4a76:	01 96       	adiw	r24, 0x01	; 1
    4a78:	8b 83       	std	Y+3, r24	; 0x03
    4a7a:	9c 83       	std	Y+4, r25	; 0x04
    4a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a80:	44 97       	sbiw	r24, 0x14	; 20
    4a82:	14 f3       	brlt	.-60     	; 0x4a48 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    4a84:	89 81       	ldd	r24, Y+1	; 0x01
    4a86:	9a 81       	ldd	r25, Y+2	; 0x02
    4a88:	01 96       	adiw	r24, 0x01	; 1
    4a8a:	89 83       	std	Y+1, r24	; 0x01
    4a8c:	9a 83       	std	Y+2, r25	; 0x02
    4a8e:	89 81       	ldd	r24, Y+1	; 0x01
    4a90:	9a 81       	ldd	r25, Y+2	; 0x02
    4a92:	04 97       	sbiw	r24, 0x04	; 4
    4a94:	b4 f2       	brlt	.-84     	; 0x4a42 <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    4a96:	5e c0       	rjmp	.+188    	; 0x4b54 <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    4a98:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <displayLineQueue>
    4a9c:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <displayLineQueue+0x1>
    4aa0:	be 01       	movw	r22, r28
    4aa2:	67 5a       	subi	r22, 0xA7	; 167
    4aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa6:	2f ef       	ldi	r18, 0xFF	; 255
    4aa8:	3f ef       	ldi	r19, 0xFF	; 255
    4aaa:	a9 01       	movw	r20, r18
    4aac:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <xQueueReceive>
    4ab0:	88 23       	and	r24, r24
    4ab2:	09 f4       	brne	.+2      	; 0x4ab6 <vDisplayUpdateTask+0x1a8>
    4ab4:	4f c0       	rjmp	.+158    	; 0x4b54 <vDisplayUpdateTask+0x246>
				i=0;			
    4ab6:	19 82       	std	Y+1, r1	; 0x01
    4ab8:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    4aba:	32 c0       	rjmp	.+100    	; 0x4b20 <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    4abc:	ce 01       	movw	r24, r28
    4abe:	87 5a       	subi	r24, 0xA7	; 167
    4ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac2:	fc 01       	movw	r30, r24
    4ac4:	80 81       	ld	r24, Z
    4ac6:	48 2f       	mov	r20, r24
    4ac8:	50 e0       	ldi	r21, 0x00	; 0
    4aca:	ce 01       	movw	r24, r28
    4acc:	87 5a       	subi	r24, 0xA7	; 167
    4ace:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad0:	fc 01       	movw	r30, r24
    4ad2:	81 81       	ldd	r24, Z+1	; 0x01
    4ad4:	28 2f       	mov	r18, r24
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	89 81       	ldd	r24, Y+1	; 0x01
    4ada:	9a 81       	ldd	r25, Y+2	; 0x02
    4adc:	82 0f       	add	r24, r18
    4ade:	93 1f       	adc	r25, r19
    4ae0:	be 01       	movw	r22, r28
    4ae2:	67 5a       	subi	r22, 0xA7	; 167
    4ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae6:	29 81       	ldd	r18, Y+1	; 0x01
    4ae8:	3a 81       	ldd	r19, Y+2	; 0x02
    4aea:	26 0f       	add	r18, r22
    4aec:	37 1f       	adc	r19, r23
    4aee:	2e 5f       	subi	r18, 0xFE	; 254
    4af0:	3f 4f       	sbci	r19, 0xFF	; 255
    4af2:	f9 01       	movw	r30, r18
    4af4:	60 81       	ld	r22, Z
    4af6:	74 e1       	ldi	r23, 0x14	; 20
    4af8:	74 9f       	mul	r23, r20
    4afa:	90 01       	movw	r18, r0
    4afc:	75 9f       	mul	r23, r21
    4afe:	30 0d       	add	r19, r0
    4b00:	11 24       	eor	r1, r1
    4b02:	ae 01       	movw	r20, r28
    4b04:	4f 5f       	subi	r20, 0xFF	; 255
    4b06:	5f 4f       	sbci	r21, 0xFF	; 255
    4b08:	24 0f       	add	r18, r20
    4b0a:	35 1f       	adc	r19, r21
    4b0c:	82 0f       	add	r24, r18
    4b0e:	93 1f       	adc	r25, r19
    4b10:	08 96       	adiw	r24, 0x08	; 8
    4b12:	fc 01       	movw	r30, r24
    4b14:	60 83       	st	Z, r22
					i++;
    4b16:	89 81       	ldd	r24, Y+1	; 0x01
    4b18:	9a 81       	ldd	r25, Y+2	; 0x02
    4b1a:	01 96       	adiw	r24, 0x01	; 1
    4b1c:	89 83       	std	Y+1, r24	; 0x01
    4b1e:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    4b20:	ce 01       	movw	r24, r28
    4b22:	87 5a       	subi	r24, 0xA7	; 167
    4b24:	9f 4f       	sbci	r25, 0xFF	; 255
    4b26:	fc 01       	movw	r30, r24
    4b28:	81 81       	ldd	r24, Z+1	; 0x01
    4b2a:	28 2f       	mov	r18, r24
    4b2c:	30 e0       	ldi	r19, 0x00	; 0
    4b2e:	89 81       	ldd	r24, Y+1	; 0x01
    4b30:	9a 81       	ldd	r25, Y+2	; 0x02
    4b32:	82 0f       	add	r24, r18
    4b34:	93 1f       	adc	r25, r19
    4b36:	44 97       	sbiw	r24, 0x14	; 20
    4b38:	6c f4       	brge	.+26     	; 0x4b54 <vDisplayUpdateTask+0x246>
    4b3a:	9e 01       	movw	r18, r28
    4b3c:	27 5a       	subi	r18, 0xA7	; 167
    4b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b40:	89 81       	ldd	r24, Y+1	; 0x01
    4b42:	9a 81       	ldd	r25, Y+2	; 0x02
    4b44:	82 0f       	add	r24, r18
    4b46:	93 1f       	adc	r25, r19
    4b48:	02 96       	adiw	r24, 0x02	; 2
    4b4a:	fc 01       	movw	r30, r24
    4b4c:	80 81       	ld	r24, Z
    4b4e:	88 23       	and	r24, r24
    4b50:	09 f0       	breq	.+2      	; 0x4b54 <vDisplayUpdateTask+0x246>
    4b52:	b4 cf       	rjmp	.-152    	; 0x4abc <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    4b54:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <displayLineQueue>
    4b58:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <displayLineQueue+0x1>
    4b5c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <uxQueueMessagesWaiting>
    4b60:	88 23       	and	r24, r24
    4b62:	09 f0       	breq	.+2      	; 0x4b66 <vDisplayUpdateTask+0x258>
    4b64:	99 cf       	rjmp	.-206    	; 0x4a98 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    4b66:	19 82       	std	Y+1, r1	; 0x01
    4b68:	1a 82       	std	Y+2, r1	; 0x02
    4b6a:	19 c0       	rjmp	.+50     	; 0x4b9e <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    4b6c:	9e 01       	movw	r18, r28
    4b6e:	27 5f       	subi	r18, 0xF7	; 247
    4b70:	3f 4f       	sbci	r19, 0xFF	; 255
    4b72:	49 81       	ldd	r20, Y+1	; 0x01
    4b74:	5a 81       	ldd	r21, Y+2	; 0x02
    4b76:	64 e1       	ldi	r22, 0x14	; 20
    4b78:	64 9f       	mul	r22, r20
    4b7a:	c0 01       	movw	r24, r0
    4b7c:	65 9f       	mul	r22, r21
    4b7e:	90 0d       	add	r25, r0
    4b80:	11 24       	eor	r1, r1
    4b82:	28 0f       	add	r18, r24
    4b84:	39 1f       	adc	r19, r25
    4b86:	89 81       	ldd	r24, Y+1	; 0x01
    4b88:	9a 81       	ldd	r25, Y+2	; 0x02
    4b8a:	a9 01       	movw	r20, r18
    4b8c:	60 e0       	ldi	r22, 0x00	; 0
    4b8e:	70 e0       	ldi	r23, 0x00	; 0
    4b90:	0e 94 69 24 	call	0x48d2	; 0x48d2 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    4b94:	89 81       	ldd	r24, Y+1	; 0x01
    4b96:	9a 81       	ldd	r25, Y+2	; 0x02
    4b98:	01 96       	adiw	r24, 0x01	; 1
    4b9a:	89 83       	std	Y+1, r24	; 0x01
    4b9c:	9a 83       	std	Y+2, r25	; 0x02
    4b9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba2:	04 97       	sbiw	r24, 0x04	; 4
    4ba4:	1c f3       	brlt	.-58     	; 0x4b6c <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    4ba6:	2a cf       	rjmp	.-428    	; 0x49fc <vDisplayUpdateTask+0xee>

00004ba8 <vDisplayClear>:
 }
 

void vDisplayClear() {
    4ba8:	cf 93       	push	r28
    4baa:	df 93       	push	r29
    4bac:	cd b7       	in	r28, 0x3d	; 61
    4bae:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    4bb0:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <egDisplayTiming>
    4bb4:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <egDisplayTiming+0x1>
    4bb8:	42 e0       	ldi	r20, 0x02	; 2
    4bba:	50 e0       	ldi	r21, 0x00	; 0
    4bbc:	60 e0       	ldi	r22, 0x00	; 0
    4bbe:	70 e0       	ldi	r23, 0x00	; 0
    4bc0:	0e 94 00 06 	call	0xc00	; 0xc00 <xEventGroupSetBits>
}
    4bc4:	00 00       	nop
    4bc6:	df 91       	pop	r29
    4bc8:	cf 91       	pop	r28
    4bca:	08 95       	ret

00004bcc <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    4bcc:	cf 93       	push	r28
    4bce:	df 93       	push	r29
    4bd0:	1f 92       	push	r1
    4bd2:	1f 92       	push	r1
    4bd4:	cd b7       	in	r28, 0x3d	; 61
    4bd6:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    4bd8:	ce 01       	movw	r24, r28
    4bda:	0e 96       	adiw	r24, 0x0e	; 14
    4bdc:	89 83       	std	Y+1, r24	; 0x01
    4bde:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    4be0:	29 81       	ldd	r18, Y+1	; 0x01
    4be2:	3a 81       	ldd	r19, Y+2	; 0x02
    4be4:	4c 85       	ldd	r20, Y+12	; 0x0c
    4be6:	5d 85       	ldd	r21, Y+13	; 0x0d
    4be8:	6a 85       	ldd	r22, Y+10	; 0x0a
    4bea:	7b 85       	ldd	r23, Y+11	; 0x0b
    4bec:	88 85       	ldd	r24, Y+8	; 0x08
    4bee:	99 85       	ldd	r25, Y+9	; 0x09
    4bf0:	0e 94 00 26 	call	0x4c00	; 0x4c00 <display_vprintf>
	va_end(arg);	
}
    4bf4:	00 00       	nop
    4bf6:	0f 90       	pop	r0
    4bf8:	0f 90       	pop	r0
    4bfa:	df 91       	pop	r29
    4bfc:	cf 91       	pop	r28
    4bfe:	08 95       	ret

00004c00 <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    4c00:	0f 93       	push	r16
    4c02:	cf 93       	push	r28
    4c04:	df 93       	push	r29
    4c06:	cd b7       	in	r28, 0x3d	; 61
    4c08:	de b7       	in	r29, 0x3e	; 62
    4c0a:	ec 97       	sbiw	r28, 0x3c	; 60
    4c0c:	cd bf       	out	0x3d, r28	; 61
    4c0e:	de bf       	out	0x3e, r29	; 62
    4c10:	8d ab       	std	Y+53, r24	; 0x35
    4c12:	9e ab       	std	Y+54, r25	; 0x36
    4c14:	6f ab       	std	Y+55, r22	; 0x37
    4c16:	78 af       	std	Y+56, r23	; 0x38
    4c18:	49 af       	std	Y+57, r20	; 0x39
    4c1a:	5a af       	std	Y+58, r21	; 0x3a
    4c1c:	2b af       	std	Y+59, r18	; 0x3b
    4c1e:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    4c20:	19 82       	std	Y+1, r1	; 0x01
    4c22:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    4c24:	1b 82       	std	Y+3, r1	; 0x03
    4c26:	1c 82       	std	Y+4, r1	; 0x04
    4c28:	0b c0       	rjmp	.+22     	; 0x4c40 <display_vprintf+0x40>
		buffer[i] = 0x00;
    4c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c2e:	8e 54       	subi	r24, 0x4E	; 78
    4c30:	93 4d       	sbci	r25, 0xD3	; 211
    4c32:	fc 01       	movw	r30, r24
    4c34:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    4c36:	8b 81       	ldd	r24, Y+3	; 0x03
    4c38:	9c 81       	ldd	r25, Y+4	; 0x04
    4c3a:	01 96       	adiw	r24, 0x01	; 1
    4c3c:	8b 83       	std	Y+3, r24	; 0x03
    4c3e:	9c 83       	std	Y+4, r25	; 0x04
    4c40:	8b 81       	ldd	r24, Y+3	; 0x03
    4c42:	9c 81       	ldd	r25, Y+4	; 0x04
    4c44:	44 97       	sbiw	r24, 0x14	; 20
    4c46:	8c f3       	brlt	.-30     	; 0x4c2a <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    4c48:	1d 82       	std	Y+5, r1	; 0x05
    4c4a:	1e 82       	std	Y+6, r1	; 0x06
    4c4c:	0b c0       	rjmp	.+22     	; 0x4c64 <display_vprintf+0x64>
		str[i] = 0x00;
    4c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c50:	9e 81       	ldd	r25, Y+6	; 0x06
    4c52:	8a 53       	subi	r24, 0x3A	; 58
    4c54:	93 4d       	sbci	r25, 0xD3	; 211
    4c56:	fc 01       	movw	r30, r24
    4c58:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    4c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c5e:	01 96       	adiw	r24, 0x01	; 1
    4c60:	8d 83       	std	Y+5, r24	; 0x05
    4c62:	9e 83       	std	Y+6, r25	; 0x06
    4c64:	8d 81       	ldd	r24, Y+5	; 0x05
    4c66:	9e 81       	ldd	r25, Y+6	; 0x06
    4c68:	44 97       	sbiw	r24, 0x14	; 20
    4c6a:	8c f3       	brlt	.-30     	; 0x4c4e <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    4c6c:	be c1       	rjmp	.+892    	; 0x4fea <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    4c6e:	8d 89       	ldd	r24, Y+21	; 0x15
    4c70:	85 32       	cpi	r24, 0x25	; 37
    4c72:	09 f0       	breq	.+2      	; 0x4c76 <display_vprintf+0x76>
    4c74:	a0 c1       	rjmp	.+832    	; 0x4fb6 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    4c76:	89 ad       	ldd	r24, Y+57	; 0x39
    4c78:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c7a:	9c 01       	movw	r18, r24
    4c7c:	2f 5f       	subi	r18, 0xFF	; 255
    4c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c80:	29 af       	std	Y+57, r18	; 0x39
    4c82:	3a af       	std	Y+58, r19	; 0x3a
    4c84:	fc 01       	movw	r30, r24
    4c86:	80 81       	ld	r24, Z
    4c88:	8d 8b       	std	Y+21, r24	; 0x15
    4c8a:	8d 89       	ldd	r24, Y+21	; 0x15
    4c8c:	88 2f       	mov	r24, r24
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	85 36       	cpi	r24, 0x65	; 101
    4c92:	91 05       	cpc	r25, r1
    4c94:	09 f4       	brne	.+2      	; 0x4c98 <display_vprintf+0x98>
    4c96:	46 c1       	rjmp	.+652    	; 0x4f24 <display_vprintf+0x324>
    4c98:	86 36       	cpi	r24, 0x66	; 102
    4c9a:	91 05       	cpc	r25, r1
    4c9c:	54 f4       	brge	.+20     	; 0x4cb2 <display_vprintf+0xb2>
    4c9e:	83 36       	cpi	r24, 0x63	; 99
    4ca0:	91 05       	cpc	r25, r1
    4ca2:	01 f1       	breq	.+64     	; 0x4ce4 <display_vprintf+0xe4>
    4ca4:	84 36       	cpi	r24, 0x64	; 100
    4ca6:	91 05       	cpc	r25, r1
    4ca8:	0c f0       	brlt	.+2      	; 0x4cac <display_vprintf+0xac>
    4caa:	70 c0       	rjmp	.+224    	; 0x4d8c <display_vprintf+0x18c>
    4cac:	85 97       	sbiw	r24, 0x25	; 37
    4cae:	69 f0       	breq	.+26     	; 0x4cca <display_vprintf+0xca>
    4cb0:	9c c1       	rjmp	.+824    	; 0x4fea <display_vprintf+0x3ea>
    4cb2:	83 37       	cpi	r24, 0x73	; 115
    4cb4:	91 05       	cpc	r25, r1
    4cb6:	71 f1       	breq	.+92     	; 0x4d14 <display_vprintf+0x114>
    4cb8:	88 37       	cpi	r24, 0x78	; 120
    4cba:	91 05       	cpc	r25, r1
    4cbc:	09 f4       	brne	.+2      	; 0x4cc0 <display_vprintf+0xc0>
    4cbe:	a8 c0       	rjmp	.+336    	; 0x4e10 <display_vprintf+0x210>
    4cc0:	86 36       	cpi	r24, 0x66	; 102
    4cc2:	91 05       	cpc	r25, r1
    4cc4:	09 f4       	brne	.+2      	; 0x4cc8 <display_vprintf+0xc8>
    4cc6:	e6 c0       	rjmp	.+460    	; 0x4e94 <display_vprintf+0x294>
    4cc8:	90 c1       	rjmp	.+800    	; 0x4fea <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    4cca:	89 81       	ldd	r24, Y+1	; 0x01
    4ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cce:	8a 53       	subi	r24, 0x3A	; 58
    4cd0:	93 4d       	sbci	r25, 0xD3	; 211
    4cd2:	25 e2       	ldi	r18, 0x25	; 37
    4cd4:	fc 01       	movw	r30, r24
    4cd6:	20 83       	st	Z, r18
				length++;
    4cd8:	89 81       	ldd	r24, Y+1	; 0x01
    4cda:	9a 81       	ldd	r25, Y+2	; 0x02
    4cdc:	01 96       	adiw	r24, 0x01	; 1
    4cde:	89 83       	std	Y+1, r24	; 0x01
    4ce0:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4ce2:	83 c1       	rjmp	.+774    	; 0x4fea <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    4ce4:	8b ad       	ldd	r24, Y+59	; 0x3b
    4ce6:	9c ad       	ldd	r25, Y+60	; 0x3c
    4ce8:	9c 01       	movw	r18, r24
    4cea:	2e 5f       	subi	r18, 0xFE	; 254
    4cec:	3f 4f       	sbci	r19, 0xFF	; 255
    4cee:	2b af       	std	Y+59, r18	; 0x3b
    4cf0:	3c af       	std	Y+60, r19	; 0x3c
    4cf2:	fc 01       	movw	r30, r24
    4cf4:	80 81       	ld	r24, Z
    4cf6:	91 81       	ldd	r25, Z+1	; 0x01
    4cf8:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    4cfa:	89 81       	ldd	r24, Y+1	; 0x01
    4cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cfe:	8a 53       	subi	r24, 0x3A	; 58
    4d00:	93 4d       	sbci	r25, 0xD3	; 211
    4d02:	2e 89       	ldd	r18, Y+22	; 0x16
    4d04:	fc 01       	movw	r30, r24
    4d06:	20 83       	st	Z, r18
				length++;
    4d08:	89 81       	ldd	r24, Y+1	; 0x01
    4d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d0c:	01 96       	adiw	r24, 0x01	; 1
    4d0e:	89 83       	std	Y+1, r24	; 0x01
    4d10:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4d12:	6b c1       	rjmp	.+726    	; 0x4fea <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    4d14:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d16:	9c ad       	ldd	r25, Y+60	; 0x3c
    4d18:	9c 01       	movw	r18, r24
    4d1a:	2e 5f       	subi	r18, 0xFE	; 254
    4d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d1e:	2b af       	std	Y+59, r18	; 0x3b
    4d20:	3c af       	std	Y+60, r19	; 0x3c
    4d22:	fc 01       	movw	r30, r24
    4d24:	80 81       	ld	r24, Z
    4d26:	91 81       	ldd	r25, Z+1	; 0x01
    4d28:	8f 8b       	std	Y+23, r24	; 0x17
    4d2a:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    4d2c:	1f 82       	std	Y+7, r1	; 0x07
    4d2e:	18 86       	std	Y+8, r1	; 0x08
    4d30:	17 c0       	rjmp	.+46     	; 0x4d60 <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    4d32:	29 81       	ldd	r18, Y+1	; 0x01
    4d34:	3a 81       	ldd	r19, Y+2	; 0x02
    4d36:	8f 81       	ldd	r24, Y+7	; 0x07
    4d38:	98 85       	ldd	r25, Y+8	; 0x08
    4d3a:	82 0f       	add	r24, r18
    4d3c:	93 1f       	adc	r25, r19
    4d3e:	2f 81       	ldd	r18, Y+7	; 0x07
    4d40:	38 85       	ldd	r19, Y+8	; 0x08
    4d42:	4f 89       	ldd	r20, Y+23	; 0x17
    4d44:	58 8d       	ldd	r21, Y+24	; 0x18
    4d46:	24 0f       	add	r18, r20
    4d48:	35 1f       	adc	r19, r21
    4d4a:	f9 01       	movw	r30, r18
    4d4c:	20 81       	ld	r18, Z
    4d4e:	8a 53       	subi	r24, 0x3A	; 58
    4d50:	93 4d       	sbci	r25, 0xD3	; 211
    4d52:	fc 01       	movw	r30, r24
    4d54:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    4d56:	8f 81       	ldd	r24, Y+7	; 0x07
    4d58:	98 85       	ldd	r25, Y+8	; 0x08
    4d5a:	01 96       	adiw	r24, 0x01	; 1
    4d5c:	8f 83       	std	Y+7, r24	; 0x07
    4d5e:	98 87       	std	Y+8, r25	; 0x08
    4d60:	8f 89       	ldd	r24, Y+23	; 0x17
    4d62:	98 8d       	ldd	r25, Y+24	; 0x18
    4d64:	0e 94 18 32 	call	0x6430	; 0x6430 <strlen>
    4d68:	9c 01       	movw	r18, r24
    4d6a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d6c:	98 85       	ldd	r25, Y+8	; 0x08
    4d6e:	82 17       	cp	r24, r18
    4d70:	93 07       	cpc	r25, r19
    4d72:	f8 f2       	brcs	.-66     	; 0x4d32 <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    4d74:	8f 89       	ldd	r24, Y+23	; 0x17
    4d76:	98 8d       	ldd	r25, Y+24	; 0x18
    4d78:	0e 94 18 32 	call	0x6430	; 0x6430 <strlen>
    4d7c:	9c 01       	movw	r18, r24
    4d7e:	89 81       	ldd	r24, Y+1	; 0x01
    4d80:	9a 81       	ldd	r25, Y+2	; 0x02
    4d82:	82 0f       	add	r24, r18
    4d84:	93 1f       	adc	r25, r19
    4d86:	89 83       	std	Y+1, r24	; 0x01
    4d88:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4d8a:	2f c1       	rjmp	.+606    	; 0x4fea <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    4d8c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d8e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4d90:	9c 01       	movw	r18, r24
    4d92:	2e 5f       	subi	r18, 0xFE	; 254
    4d94:	3f 4f       	sbci	r19, 0xFF	; 255
    4d96:	2b af       	std	Y+59, r18	; 0x3b
    4d98:	3c af       	std	Y+60, r19	; 0x3c
    4d9a:	fc 01       	movw	r30, r24
    4d9c:	80 81       	ld	r24, Z
    4d9e:	91 81       	ldd	r25, Z+1	; 0x01
    4da0:	89 8f       	std	Y+25, r24	; 0x19
    4da2:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    4da4:	89 8d       	ldd	r24, Y+25	; 0x19
    4da6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4da8:	4a e0       	ldi	r20, 0x0A	; 10
    4daa:	50 e0       	ldi	r21, 0x00	; 0
    4dac:	62 eb       	ldi	r22, 0xB2	; 178
    4dae:	7c e2       	ldi	r23, 0x2C	; 44
    4db0:	0e 94 2c 32 	call	0x6458	; 0x6458 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    4db4:	19 86       	std	Y+9, r1	; 0x09
    4db6:	1a 86       	std	Y+10, r1	; 0x0a
    4db8:	15 c0       	rjmp	.+42     	; 0x4de4 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    4dba:	29 81       	ldd	r18, Y+1	; 0x01
    4dbc:	3a 81       	ldd	r19, Y+2	; 0x02
    4dbe:	89 85       	ldd	r24, Y+9	; 0x09
    4dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dc2:	82 0f       	add	r24, r18
    4dc4:	93 1f       	adc	r25, r19
    4dc6:	29 85       	ldd	r18, Y+9	; 0x09
    4dc8:	3a 85       	ldd	r19, Y+10	; 0x0a
    4dca:	2e 54       	subi	r18, 0x4E	; 78
    4dcc:	33 4d       	sbci	r19, 0xD3	; 211
    4dce:	f9 01       	movw	r30, r18
    4dd0:	20 81       	ld	r18, Z
    4dd2:	8a 53       	subi	r24, 0x3A	; 58
    4dd4:	93 4d       	sbci	r25, 0xD3	; 211
    4dd6:	fc 01       	movw	r30, r24
    4dd8:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    4dda:	89 85       	ldd	r24, Y+9	; 0x09
    4ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dde:	01 96       	adiw	r24, 0x01	; 1
    4de0:	89 87       	std	Y+9, r24	; 0x09
    4de2:	9a 87       	std	Y+10, r25	; 0x0a
    4de4:	82 eb       	ldi	r24, 0xB2	; 178
    4de6:	9c e2       	ldi	r25, 0x2C	; 44
    4de8:	0e 94 18 32 	call	0x6430	; 0x6430 <strlen>
    4dec:	9c 01       	movw	r18, r24
    4dee:	89 85       	ldd	r24, Y+9	; 0x09
    4df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4df2:	82 17       	cp	r24, r18
    4df4:	93 07       	cpc	r25, r19
    4df6:	08 f3       	brcs	.-62     	; 0x4dba <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    4df8:	82 eb       	ldi	r24, 0xB2	; 178
    4dfa:	9c e2       	ldi	r25, 0x2C	; 44
    4dfc:	0e 94 18 32 	call	0x6430	; 0x6430 <strlen>
    4e00:	9c 01       	movw	r18, r24
    4e02:	89 81       	ldd	r24, Y+1	; 0x01
    4e04:	9a 81       	ldd	r25, Y+2	; 0x02
    4e06:	82 0f       	add	r24, r18
    4e08:	93 1f       	adc	r25, r19
    4e0a:	89 83       	std	Y+1, r24	; 0x01
    4e0c:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4e0e:	ed c0       	rjmp	.+474    	; 0x4fea <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    4e10:	8b ad       	ldd	r24, Y+59	; 0x3b
    4e12:	9c ad       	ldd	r25, Y+60	; 0x3c
    4e14:	9c 01       	movw	r18, r24
    4e16:	2e 5f       	subi	r18, 0xFE	; 254
    4e18:	3f 4f       	sbci	r19, 0xFF	; 255
    4e1a:	2b af       	std	Y+59, r18	; 0x3b
    4e1c:	3c af       	std	Y+60, r19	; 0x3c
    4e1e:	fc 01       	movw	r30, r24
    4e20:	80 81       	ld	r24, Z
    4e22:	91 81       	ldd	r25, Z+1	; 0x01
    4e24:	89 8f       	std	Y+25, r24	; 0x19
    4e26:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    4e28:	89 8d       	ldd	r24, Y+25	; 0x19
    4e2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4e2c:	40 e1       	ldi	r20, 0x10	; 16
    4e2e:	50 e0       	ldi	r21, 0x00	; 0
    4e30:	62 eb       	ldi	r22, 0xB2	; 178
    4e32:	7c e2       	ldi	r23, 0x2C	; 44
    4e34:	0e 94 2c 32 	call	0x6458	; 0x6458 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    4e38:	1b 86       	std	Y+11, r1	; 0x0b
    4e3a:	1c 86       	std	Y+12, r1	; 0x0c
    4e3c:	15 c0       	rjmp	.+42     	; 0x4e68 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    4e3e:	29 81       	ldd	r18, Y+1	; 0x01
    4e40:	3a 81       	ldd	r19, Y+2	; 0x02
    4e42:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e44:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e46:	82 0f       	add	r24, r18
    4e48:	93 1f       	adc	r25, r19
    4e4a:	2b 85       	ldd	r18, Y+11	; 0x0b
    4e4c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4e4e:	2e 54       	subi	r18, 0x4E	; 78
    4e50:	33 4d       	sbci	r19, 0xD3	; 211
    4e52:	f9 01       	movw	r30, r18
    4e54:	20 81       	ld	r18, Z
    4e56:	8a 53       	subi	r24, 0x3A	; 58
    4e58:	93 4d       	sbci	r25, 0xD3	; 211
    4e5a:	fc 01       	movw	r30, r24
    4e5c:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    4e5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e60:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e62:	01 96       	adiw	r24, 0x01	; 1
    4e64:	8b 87       	std	Y+11, r24	; 0x0b
    4e66:	9c 87       	std	Y+12, r25	; 0x0c
    4e68:	82 eb       	ldi	r24, 0xB2	; 178
    4e6a:	9c e2       	ldi	r25, 0x2C	; 44
    4e6c:	0e 94 18 32 	call	0x6430	; 0x6430 <strlen>
    4e70:	9c 01       	movw	r18, r24
    4e72:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e74:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e76:	82 17       	cp	r24, r18
    4e78:	93 07       	cpc	r25, r19
    4e7a:	08 f3       	brcs	.-62     	; 0x4e3e <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    4e7c:	82 eb       	ldi	r24, 0xB2	; 178
    4e7e:	9c e2       	ldi	r25, 0x2C	; 44
    4e80:	0e 94 18 32 	call	0x6430	; 0x6430 <strlen>
    4e84:	9c 01       	movw	r18, r24
    4e86:	89 81       	ldd	r24, Y+1	; 0x01
    4e88:	9a 81       	ldd	r25, Y+2	; 0x02
    4e8a:	82 0f       	add	r24, r18
    4e8c:	93 1f       	adc	r25, r19
    4e8e:	89 83       	std	Y+1, r24	; 0x01
    4e90:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4e92:	ab c0       	rjmp	.+342    	; 0x4fea <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    4e94:	8b ad       	ldd	r24, Y+59	; 0x3b
    4e96:	9c ad       	ldd	r25, Y+60	; 0x3c
    4e98:	9c 01       	movw	r18, r24
    4e9a:	2c 5f       	subi	r18, 0xFC	; 252
    4e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e9e:	2b af       	std	Y+59, r18	; 0x3b
    4ea0:	3c af       	std	Y+60, r19	; 0x3c
    4ea2:	fc 01       	movw	r30, r24
    4ea4:	80 81       	ld	r24, Z
    4ea6:	91 81       	ldd	r25, Z+1	; 0x01
    4ea8:	a2 81       	ldd	r26, Z+2	; 0x02
    4eaa:	b3 81       	ldd	r27, Z+3	; 0x03
    4eac:	8b 8f       	std	Y+27, r24	; 0x1b
    4eae:	9c 8f       	std	Y+28, r25	; 0x1c
    4eb0:	ad 8f       	std	Y+29, r26	; 0x1d
    4eb2:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    4eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4eb8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4eba:	be 8d       	ldd	r27, Y+30	; 0x1e
    4ebc:	ac 01       	movw	r20, r24
    4ebe:	bd 01       	movw	r22, r26
    4ec0:	82 eb       	ldi	r24, 0xB2	; 178
    4ec2:	9c e2       	ldi	r25, 0x2C	; 44
    4ec4:	0e 94 cf 28 	call	0x519e	; 0x519e <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    4ec8:	1d 86       	std	Y+13, r1	; 0x0d
    4eca:	1e 86       	std	Y+14, r1	; 0x0e
    4ecc:	15 c0       	rjmp	.+42     	; 0x4ef8 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    4ece:	29 81       	ldd	r18, Y+1	; 0x01
    4ed0:	3a 81       	ldd	r19, Y+2	; 0x02
    4ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ed6:	82 0f       	add	r24, r18
    4ed8:	93 1f       	adc	r25, r19
    4eda:	2d 85       	ldd	r18, Y+13	; 0x0d
    4edc:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ede:	2e 54       	subi	r18, 0x4E	; 78
    4ee0:	33 4d       	sbci	r19, 0xD3	; 211
    4ee2:	f9 01       	movw	r30, r18
    4ee4:	20 81       	ld	r18, Z
    4ee6:	8a 53       	subi	r24, 0x3A	; 58
    4ee8:	93 4d       	sbci	r25, 0xD3	; 211
    4eea:	fc 01       	movw	r30, r24
    4eec:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    4eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ef2:	01 96       	adiw	r24, 0x01	; 1
    4ef4:	8d 87       	std	Y+13, r24	; 0x0d
    4ef6:	9e 87       	std	Y+14, r25	; 0x0e
    4ef8:	82 eb       	ldi	r24, 0xB2	; 178
    4efa:	9c e2       	ldi	r25, 0x2C	; 44
    4efc:	0e 94 18 32 	call	0x6430	; 0x6430 <strlen>
    4f00:	9c 01       	movw	r18, r24
    4f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f06:	82 17       	cp	r24, r18
    4f08:	93 07       	cpc	r25, r19
    4f0a:	08 f3       	brcs	.-62     	; 0x4ece <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    4f0c:	82 eb       	ldi	r24, 0xB2	; 178
    4f0e:	9c e2       	ldi	r25, 0x2C	; 44
    4f10:	0e 94 18 32 	call	0x6430	; 0x6430 <strlen>
    4f14:	9c 01       	movw	r18, r24
    4f16:	89 81       	ldd	r24, Y+1	; 0x01
    4f18:	9a 81       	ldd	r25, Y+2	; 0x02
    4f1a:	82 0f       	add	r24, r18
    4f1c:	93 1f       	adc	r25, r19
    4f1e:	89 83       	std	Y+1, r24	; 0x01
    4f20:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4f22:	63 c0       	rjmp	.+198    	; 0x4fea <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    4f24:	8b ad       	ldd	r24, Y+59	; 0x3b
    4f26:	9c ad       	ldd	r25, Y+60	; 0x3c
    4f28:	9c 01       	movw	r18, r24
    4f2a:	2c 5f       	subi	r18, 0xFC	; 252
    4f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f2e:	2b af       	std	Y+59, r18	; 0x3b
    4f30:	3c af       	std	Y+60, r19	; 0x3c
    4f32:	fc 01       	movw	r30, r24
    4f34:	80 81       	ld	r24, Z
    4f36:	91 81       	ldd	r25, Z+1	; 0x01
    4f38:	a2 81       	ldd	r26, Z+2	; 0x02
    4f3a:	b3 81       	ldd	r27, Z+3	; 0x03
    4f3c:	8b 8f       	std	Y+27, r24	; 0x1b
    4f3e:	9c 8f       	std	Y+28, r25	; 0x1c
    4f40:	ad 8f       	std	Y+29, r26	; 0x1d
    4f42:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    4f44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f48:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4f4a:	be 8d       	ldd	r27, Y+30	; 0x1e
    4f4c:	ac 01       	movw	r20, r24
    4f4e:	bd 01       	movw	r22, r26
    4f50:	82 eb       	ldi	r24, 0xB2	; 178
    4f52:	9c e2       	ldi	r25, 0x2C	; 44
    4f54:	0e 94 1e 2a 	call	0x543c	; 0x543c <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    4f58:	1f 86       	std	Y+15, r1	; 0x0f
    4f5a:	18 8a       	std	Y+16, r1	; 0x10
    4f5c:	15 c0       	rjmp	.+42     	; 0x4f88 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    4f5e:	29 81       	ldd	r18, Y+1	; 0x01
    4f60:	3a 81       	ldd	r19, Y+2	; 0x02
    4f62:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f64:	98 89       	ldd	r25, Y+16	; 0x10
    4f66:	82 0f       	add	r24, r18
    4f68:	93 1f       	adc	r25, r19
    4f6a:	2f 85       	ldd	r18, Y+15	; 0x0f
    4f6c:	38 89       	ldd	r19, Y+16	; 0x10
    4f6e:	2e 54       	subi	r18, 0x4E	; 78
    4f70:	33 4d       	sbci	r19, 0xD3	; 211
    4f72:	f9 01       	movw	r30, r18
    4f74:	20 81       	ld	r18, Z
    4f76:	8a 53       	subi	r24, 0x3A	; 58
    4f78:	93 4d       	sbci	r25, 0xD3	; 211
    4f7a:	fc 01       	movw	r30, r24
    4f7c:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    4f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f80:	98 89       	ldd	r25, Y+16	; 0x10
    4f82:	01 96       	adiw	r24, 0x01	; 1
    4f84:	8f 87       	std	Y+15, r24	; 0x0f
    4f86:	98 8b       	std	Y+16, r25	; 0x10
    4f88:	82 eb       	ldi	r24, 0xB2	; 178
    4f8a:	9c e2       	ldi	r25, 0x2C	; 44
    4f8c:	0e 94 18 32 	call	0x6430	; 0x6430 <strlen>
    4f90:	9c 01       	movw	r18, r24
    4f92:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f94:	98 89       	ldd	r25, Y+16	; 0x10
    4f96:	82 17       	cp	r24, r18
    4f98:	93 07       	cpc	r25, r19
    4f9a:	08 f3       	brcs	.-62     	; 0x4f5e <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    4f9c:	82 eb       	ldi	r24, 0xB2	; 178
    4f9e:	9c e2       	ldi	r25, 0x2C	; 44
    4fa0:	0e 94 18 32 	call	0x6430	; 0x6430 <strlen>
    4fa4:	9c 01       	movw	r18, r24
    4fa6:	89 81       	ldd	r24, Y+1	; 0x01
    4fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    4faa:	82 0f       	add	r24, r18
    4fac:	93 1f       	adc	r25, r19
    4fae:	89 83       	std	Y+1, r24	; 0x01
    4fb0:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4fb2:	00 00       	nop
    4fb4:	1a c0       	rjmp	.+52     	; 0x4fea <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    4fb6:	89 81       	ldd	r24, Y+1	; 0x01
    4fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fba:	8a 53       	subi	r24, 0x3A	; 58
    4fbc:	93 4d       	sbci	r25, 0xD3	; 211
    4fbe:	2d 89       	ldd	r18, Y+21	; 0x15
    4fc0:	fc 01       	movw	r30, r24
    4fc2:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    4fc4:	89 81       	ldd	r24, Y+1	; 0x01
    4fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fc8:	8a 53       	subi	r24, 0x3A	; 58
    4fca:	93 4d       	sbci	r25, 0xD3	; 211
    4fcc:	fc 01       	movw	r30, r24
    4fce:	80 81       	ld	r24, Z
    4fd0:	8a 30       	cpi	r24, 0x0A	; 10
    4fd2:	31 f4       	brne	.+12     	; 0x4fe0 <display_vprintf+0x3e0>
				str[length] = '\0';				
    4fd4:	89 81       	ldd	r24, Y+1	; 0x01
    4fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fd8:	8a 53       	subi	r24, 0x3A	; 58
    4fda:	93 4d       	sbci	r25, 0xD3	; 211
    4fdc:	fc 01       	movw	r30, r24
    4fde:	10 82       	st	Z, r1
			}
			length++;
    4fe0:	89 81       	ldd	r24, Y+1	; 0x01
    4fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe4:	01 96       	adiw	r24, 0x01	; 1
    4fe6:	89 83       	std	Y+1, r24	; 0x01
    4fe8:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    4fea:	89 ad       	ldd	r24, Y+57	; 0x39
    4fec:	9a ad       	ldd	r25, Y+58	; 0x3a
    4fee:	9c 01       	movw	r18, r24
    4ff0:	2f 5f       	subi	r18, 0xFF	; 255
    4ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff4:	29 af       	std	Y+57, r18	; 0x39
    4ff6:	3a af       	std	Y+58, r19	; 0x3a
    4ff8:	fc 01       	movw	r30, r24
    4ffa:	80 81       	ld	r24, Z
    4ffc:	8d 8b       	std	Y+21, r24	; 0x15
    4ffe:	8d 89       	ldd	r24, Y+21	; 0x15
    5000:	88 23       	and	r24, r24
    5002:	09 f0       	breq	.+2      	; 0x5006 <display_vprintf+0x406>
    5004:	34 ce       	rjmp	.-920    	; 0x4c6e <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    5006:	29 81       	ldd	r18, Y+1	; 0x01
    5008:	3a 81       	ldd	r19, Y+2	; 0x02
    500a:	8f a9       	ldd	r24, Y+55	; 0x37
    500c:	98 ad       	ldd	r25, Y+56	; 0x38
    500e:	82 0f       	add	r24, r18
    5010:	93 1f       	adc	r25, r19
    5012:	44 97       	sbiw	r24, 0x14	; 20
    5014:	54 f0       	brlt	.+20     	; 0x502a <display_vprintf+0x42a>
		length = 20-pos;
    5016:	24 e1       	ldi	r18, 0x14	; 20
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	8f a9       	ldd	r24, Y+55	; 0x37
    501c:	98 ad       	ldd	r25, Y+56	; 0x38
    501e:	a9 01       	movw	r20, r18
    5020:	48 1b       	sub	r20, r24
    5022:	59 0b       	sbc	r21, r25
    5024:	ca 01       	movw	r24, r20
    5026:	89 83       	std	Y+1, r24	; 0x01
    5028:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    502a:	19 8a       	std	Y+17, r1	; 0x11
    502c:	1a 8a       	std	Y+18, r1	; 0x12
    502e:	0e c0       	rjmp	.+28     	; 0x504c <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    5030:	9e 01       	movw	r18, r28
    5032:	2f 5d       	subi	r18, 0xDF	; 223
    5034:	3f 4f       	sbci	r19, 0xFF	; 255
    5036:	89 89       	ldd	r24, Y+17	; 0x11
    5038:	9a 89       	ldd	r25, Y+18	; 0x12
    503a:	82 0f       	add	r24, r18
    503c:	93 1f       	adc	r25, r19
    503e:	fc 01       	movw	r30, r24
    5040:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    5042:	89 89       	ldd	r24, Y+17	; 0x11
    5044:	9a 89       	ldd	r25, Y+18	; 0x12
    5046:	01 96       	adiw	r24, 0x01	; 1
    5048:	89 8b       	std	Y+17, r24	; 0x11
    504a:	9a 8b       	std	Y+18, r25	; 0x12
    504c:	89 89       	ldd	r24, Y+17	; 0x11
    504e:	9a 89       	ldd	r25, Y+18	; 0x12
    5050:	44 97       	sbiw	r24, 0x14	; 20
    5052:	74 f3       	brlt	.-36     	; 0x5030 <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    5054:	8d a9       	ldd	r24, Y+53	; 0x35
    5056:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    5058:	8f a9       	ldd	r24, Y+55	; 0x37
    505a:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    505c:	1b 8a       	std	Y+19, r1	; 0x13
    505e:	1c 8a       	std	Y+20, r1	; 0x14
    5060:	14 c0       	rjmp	.+40     	; 0x508a <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    5062:	8b 89       	ldd	r24, Y+19	; 0x13
    5064:	9c 89       	ldd	r25, Y+20	; 0x14
    5066:	8a 53       	subi	r24, 0x3A	; 58
    5068:	93 4d       	sbci	r25, 0xD3	; 211
    506a:	fc 01       	movw	r30, r24
    506c:	40 81       	ld	r20, Z
    506e:	9e 01       	movw	r18, r28
    5070:	2f 5d       	subi	r18, 0xDF	; 223
    5072:	3f 4f       	sbci	r19, 0xFF	; 255
    5074:	8b 89       	ldd	r24, Y+19	; 0x13
    5076:	9c 89       	ldd	r25, Y+20	; 0x14
    5078:	82 0f       	add	r24, r18
    507a:	93 1f       	adc	r25, r19
    507c:	fc 01       	movw	r30, r24
    507e:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    5080:	8b 89       	ldd	r24, Y+19	; 0x13
    5082:	9c 89       	ldd	r25, Y+20	; 0x14
    5084:	01 96       	adiw	r24, 0x01	; 1
    5086:	8b 8b       	std	Y+19, r24	; 0x13
    5088:	9c 8b       	std	Y+20, r25	; 0x14
    508a:	2b 89       	ldd	r18, Y+19	; 0x13
    508c:	3c 89       	ldd	r19, Y+20	; 0x14
    508e:	89 81       	ldd	r24, Y+1	; 0x01
    5090:	9a 81       	ldd	r25, Y+2	; 0x02
    5092:	28 17       	cp	r18, r24
    5094:	39 07       	cpc	r19, r25
    5096:	2c f3       	brlt	.-54     	; 0x5062 <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    5098:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <displayLineQueue>
    509c:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <displayLineQueue+0x1>
    50a0:	be 01       	movw	r22, r28
    50a2:	61 5e       	subi	r22, 0xE1	; 225
    50a4:	7f 4f       	sbci	r23, 0xFF	; 255
    50a6:	00 e0       	ldi	r16, 0x00	; 0
    50a8:	2f ef       	ldi	r18, 0xFF	; 255
    50aa:	3f ef       	ldi	r19, 0xFF	; 255
    50ac:	a9 01       	movw	r20, r18
    50ae:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
	
	
	return length;
    50b2:	89 81       	ldd	r24, Y+1	; 0x01
    50b4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    50b6:	ec 96       	adiw	r28, 0x3c	; 60
    50b8:	cd bf       	out	0x3d, r28	; 61
    50ba:	de bf       	out	0x3e, r29	; 62
    50bc:	df 91       	pop	r29
    50be:	cf 91       	pop	r28
    50c0:	0f 91       	pop	r16
    50c2:	08 95       	ret

000050c4 <normalize>:

static int normalize(double *val) {
    50c4:	cf 93       	push	r28
    50c6:	df 93       	push	r29
    50c8:	cd b7       	in	r28, 0x3d	; 61
    50ca:	de b7       	in	r29, 0x3e	; 62
    50cc:	28 97       	sbiw	r28, 0x08	; 8
    50ce:	cd bf       	out	0x3d, r28	; 61
    50d0:	de bf       	out	0x3e, r29	; 62
    50d2:	8f 83       	std	Y+7, r24	; 0x07
    50d4:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    50d6:	19 82       	std	Y+1, r1	; 0x01
    50d8:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    50da:	8f 81       	ldd	r24, Y+7	; 0x07
    50dc:	98 85       	ldd	r25, Y+8	; 0x08
    50de:	fc 01       	movw	r30, r24
    50e0:	80 81       	ld	r24, Z
    50e2:	91 81       	ldd	r25, Z+1	; 0x01
    50e4:	a2 81       	ldd	r26, Z+2	; 0x02
    50e6:	b3 81       	ldd	r27, Z+3	; 0x03
    50e8:	8b 83       	std	Y+3, r24	; 0x03
    50ea:	9c 83       	std	Y+4, r25	; 0x04
    50ec:	ad 83       	std	Y+5, r26	; 0x05
    50ee:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    50f0:	15 c0       	rjmp	.+42     	; 0x511c <normalize+0x58>
        value /= 10.0;
    50f2:	20 e0       	ldi	r18, 0x00	; 0
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	40 e2       	ldi	r20, 0x20	; 32
    50f8:	51 e4       	ldi	r21, 0x41	; 65
    50fa:	6b 81       	ldd	r22, Y+3	; 0x03
    50fc:	7c 81       	ldd	r23, Y+4	; 0x04
    50fe:	8d 81       	ldd	r24, Y+5	; 0x05
    5100:	9e 81       	ldd	r25, Y+6	; 0x06
    5102:	0e 94 b1 2b 	call	0x5762	; 0x5762 <__divsf3>
    5106:	dc 01       	movw	r26, r24
    5108:	cb 01       	movw	r24, r22
    510a:	8b 83       	std	Y+3, r24	; 0x03
    510c:	9c 83       	std	Y+4, r25	; 0x04
    510e:	ad 83       	std	Y+5, r26	; 0x05
    5110:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    5112:	89 81       	ldd	r24, Y+1	; 0x01
    5114:	9a 81       	ldd	r25, Y+2	; 0x02
    5116:	01 96       	adiw	r24, 0x01	; 1
    5118:	89 83       	std	Y+1, r24	; 0x01
    511a:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    511c:	20 e0       	ldi	r18, 0x00	; 0
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	40 e8       	ldi	r20, 0x80	; 128
    5122:	5f e3       	ldi	r21, 0x3F	; 63
    5124:	6b 81       	ldd	r22, Y+3	; 0x03
    5126:	7c 81       	ldd	r23, Y+4	; 0x04
    5128:	8d 81       	ldd	r24, Y+5	; 0x05
    512a:	9e 81       	ldd	r25, Y+6	; 0x06
    512c:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <__gesf2>
    5130:	88 23       	and	r24, r24
    5132:	fc f6       	brge	.-66     	; 0x50f2 <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    5134:	15 c0       	rjmp	.+42     	; 0x5160 <normalize+0x9c>
        value *= 10.0;
    5136:	20 e0       	ldi	r18, 0x00	; 0
    5138:	30 e0       	ldi	r19, 0x00	; 0
    513a:	40 e2       	ldi	r20, 0x20	; 32
    513c:	51 e4       	ldi	r21, 0x41	; 65
    513e:	6b 81       	ldd	r22, Y+3	; 0x03
    5140:	7c 81       	ldd	r23, Y+4	; 0x04
    5142:	8d 81       	ldd	r24, Y+5	; 0x05
    5144:	9e 81       	ldd	r25, Y+6	; 0x06
    5146:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsf3>
    514a:	dc 01       	movw	r26, r24
    514c:	cb 01       	movw	r24, r22
    514e:	8b 83       	std	Y+3, r24	; 0x03
    5150:	9c 83       	std	Y+4, r25	; 0x04
    5152:	ad 83       	std	Y+5, r26	; 0x05
    5154:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    5156:	89 81       	ldd	r24, Y+1	; 0x01
    5158:	9a 81       	ldd	r25, Y+2	; 0x02
    515a:	01 97       	sbiw	r24, 0x01	; 1
    515c:	89 83       	std	Y+1, r24	; 0x01
    515e:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    5160:	2d ec       	ldi	r18, 0xCD	; 205
    5162:	3c ec       	ldi	r19, 0xCC	; 204
    5164:	4c ec       	ldi	r20, 0xCC	; 204
    5166:	5d e3       	ldi	r21, 0x3D	; 61
    5168:	6b 81       	ldd	r22, Y+3	; 0x03
    516a:	7c 81       	ldd	r23, Y+4	; 0x04
    516c:	8d 81       	ldd	r24, Y+5	; 0x05
    516e:	9e 81       	ldd	r25, Y+6	; 0x06
    5170:	0e 94 ac 2b 	call	0x5758	; 0x5758 <__cmpsf2>
    5174:	88 23       	and	r24, r24
    5176:	fc f2       	brlt	.-66     	; 0x5136 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    5178:	2f 81       	ldd	r18, Y+7	; 0x07
    517a:	38 85       	ldd	r19, Y+8	; 0x08
    517c:	8b 81       	ldd	r24, Y+3	; 0x03
    517e:	9c 81       	ldd	r25, Y+4	; 0x04
    5180:	ad 81       	ldd	r26, Y+5	; 0x05
    5182:	be 81       	ldd	r27, Y+6	; 0x06
    5184:	f9 01       	movw	r30, r18
    5186:	80 83       	st	Z, r24
    5188:	91 83       	std	Z+1, r25	; 0x01
    518a:	a2 83       	std	Z+2, r26	; 0x02
    518c:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    518e:	89 81       	ldd	r24, Y+1	; 0x01
    5190:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5192:	28 96       	adiw	r28, 0x08	; 8
    5194:	cd bf       	out	0x3d, r28	; 61
    5196:	de bf       	out	0x3e, r29	; 62
    5198:	df 91       	pop	r29
    519a:	cf 91       	pop	r28
    519c:	08 95       	ret

0000519e <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    519e:	cf 92       	push	r12
    51a0:	df 92       	push	r13
    51a2:	ef 92       	push	r14
    51a4:	ff 92       	push	r15
    51a6:	cf 93       	push	r28
    51a8:	df 93       	push	r29
    51aa:	cd b7       	in	r28, 0x3d	; 61
    51ac:	de b7       	in	r29, 0x3e	; 62
    51ae:	2e 97       	sbiw	r28, 0x0e	; 14
    51b0:	cd bf       	out	0x3d, r28	; 61
    51b2:	de bf       	out	0x3e, r29	; 62
    51b4:	89 87       	std	Y+9, r24	; 0x09
    51b6:	9a 87       	std	Y+10, r25	; 0x0a
    51b8:	4b 87       	std	Y+11, r20	; 0x0b
    51ba:	5c 87       	std	Y+12, r21	; 0x0c
    51bc:	6d 87       	std	Y+13, r22	; 0x0d
    51be:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    51c0:	19 82       	std	Y+1, r1	; 0x01
    51c2:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    51c4:	1b 82       	std	Y+3, r1	; 0x03
    51c6:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    51c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    51ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    51cc:	ad 85       	ldd	r26, Y+13	; 0x0d
    51ce:	be 85       	ldd	r27, Y+14	; 0x0e
    51d0:	20 e0       	ldi	r18, 0x00	; 0
    51d2:	30 e0       	ldi	r19, 0x00	; 0
    51d4:	a9 01       	movw	r20, r18
    51d6:	bc 01       	movw	r22, r24
    51d8:	cd 01       	movw	r24, r26
    51da:	0e 94 ac 2b 	call	0x5758	; 0x5758 <__cmpsf2>
    51de:	88 23       	and	r24, r24
    51e0:	59 f4       	brne	.+22     	; 0x51f8 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    51e2:	89 85       	ldd	r24, Y+9	; 0x09
    51e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    51e6:	20 e3       	ldi	r18, 0x30	; 48
    51e8:	fc 01       	movw	r30, r24
    51ea:	20 83       	st	Z, r18
        buffer[1] = '\0';
    51ec:	89 85       	ldd	r24, Y+9	; 0x09
    51ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    51f0:	01 96       	adiw	r24, 0x01	; 1
    51f2:	fc 01       	movw	r30, r24
    51f4:	10 82       	st	Z, r1
        return;
    51f6:	18 c1       	rjmp	.+560    	; 0x5428 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    51f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    51fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    51fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    51fe:	be 85       	ldd	r27, Y+14	; 0x0e
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	a9 01       	movw	r20, r18
    5206:	bc 01       	movw	r22, r24
    5208:	cd 01       	movw	r24, r26
    520a:	0e 94 ac 2b 	call	0x5758	; 0x5758 <__cmpsf2>
    520e:	88 23       	and	r24, r24
    5210:	9c f4       	brge	.+38     	; 0x5238 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    5212:	89 85       	ldd	r24, Y+9	; 0x09
    5214:	9a 85       	ldd	r25, Y+10	; 0x0a
    5216:	9c 01       	movw	r18, r24
    5218:	2f 5f       	subi	r18, 0xFF	; 255
    521a:	3f 4f       	sbci	r19, 0xFF	; 255
    521c:	29 87       	std	Y+9, r18	; 0x09
    521e:	3a 87       	std	Y+10, r19	; 0x0a
    5220:	2d e2       	ldi	r18, 0x2D	; 45
    5222:	fc 01       	movw	r30, r24
    5224:	20 83       	st	Z, r18
        value = -value;
    5226:	8b 85       	ldd	r24, Y+11	; 0x0b
    5228:	9c 85       	ldd	r25, Y+12	; 0x0c
    522a:	ad 85       	ldd	r26, Y+13	; 0x0d
    522c:	be 85       	ldd	r27, Y+14	; 0x0e
    522e:	b0 58       	subi	r27, 0x80	; 128
    5230:	8b 87       	std	Y+11, r24	; 0x0b
    5232:	9c 87       	std	Y+12, r25	; 0x0c
    5234:	ad 87       	std	Y+13, r26	; 0x0d
    5236:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    5238:	ce 01       	movw	r24, r28
    523a:	0b 96       	adiw	r24, 0x0b	; 11
    523c:	0e 94 62 28 	call	0x50c4	; 0x50c4 <normalize>
    5240:	89 83       	std	Y+1, r24	; 0x01
    5242:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    5244:	53 c0       	rjmp	.+166    	; 0x52ec <ftoa_fixed+0x14e>
        int digit = value * 10;
    5246:	8b 85       	ldd	r24, Y+11	; 0x0b
    5248:	9c 85       	ldd	r25, Y+12	; 0x0c
    524a:	ad 85       	ldd	r26, Y+13	; 0x0d
    524c:	be 85       	ldd	r27, Y+14	; 0x0e
    524e:	20 e0       	ldi	r18, 0x00	; 0
    5250:	30 e0       	ldi	r19, 0x00	; 0
    5252:	40 e2       	ldi	r20, 0x20	; 32
    5254:	51 e4       	ldi	r21, 0x41	; 65
    5256:	bc 01       	movw	r22, r24
    5258:	cd 01       	movw	r24, r26
    525a:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsf3>
    525e:	dc 01       	movw	r26, r24
    5260:	cb 01       	movw	r24, r22
    5262:	bc 01       	movw	r22, r24
    5264:	cd 01       	movw	r24, r26
    5266:	0e 94 23 2c 	call	0x5846	; 0x5846 <__fixsfsi>
    526a:	dc 01       	movw	r26, r24
    526c:	cb 01       	movw	r24, r22
    526e:	8d 83       	std	Y+5, r24	; 0x05
    5270:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    5272:	89 85       	ldd	r24, Y+9	; 0x09
    5274:	9a 85       	ldd	r25, Y+10	; 0x0a
    5276:	9c 01       	movw	r18, r24
    5278:	2f 5f       	subi	r18, 0xFF	; 255
    527a:	3f 4f       	sbci	r19, 0xFF	; 255
    527c:	29 87       	std	Y+9, r18	; 0x09
    527e:	3a 87       	std	Y+10, r19	; 0x0a
    5280:	2d 81       	ldd	r18, Y+5	; 0x05
    5282:	20 5d       	subi	r18, 0xD0	; 208
    5284:	fc 01       	movw	r30, r24
    5286:	20 83       	st	Z, r18
        value = value * 10 - digit;
    5288:	8b 85       	ldd	r24, Y+11	; 0x0b
    528a:	9c 85       	ldd	r25, Y+12	; 0x0c
    528c:	ad 85       	ldd	r26, Y+13	; 0x0d
    528e:	be 85       	ldd	r27, Y+14	; 0x0e
    5290:	20 e0       	ldi	r18, 0x00	; 0
    5292:	30 e0       	ldi	r19, 0x00	; 0
    5294:	40 e2       	ldi	r20, 0x20	; 32
    5296:	51 e4       	ldi	r21, 0x41	; 65
    5298:	bc 01       	movw	r22, r24
    529a:	cd 01       	movw	r24, r26
    529c:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsf3>
    52a0:	dc 01       	movw	r26, r24
    52a2:	cb 01       	movw	r24, r22
    52a4:	6c 01       	movw	r12, r24
    52a6:	7d 01       	movw	r14, r26
    52a8:	8d 81       	ldd	r24, Y+5	; 0x05
    52aa:	9e 81       	ldd	r25, Y+6	; 0x06
    52ac:	09 2e       	mov	r0, r25
    52ae:	00 0c       	add	r0, r0
    52b0:	aa 0b       	sbc	r26, r26
    52b2:	bb 0b       	sbc	r27, r27
    52b4:	bc 01       	movw	r22, r24
    52b6:	cd 01       	movw	r24, r26
    52b8:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__floatsisf>
    52bc:	dc 01       	movw	r26, r24
    52be:	cb 01       	movw	r24, r22
    52c0:	9c 01       	movw	r18, r24
    52c2:	ad 01       	movw	r20, r26
    52c4:	c7 01       	movw	r24, r14
    52c6:	b6 01       	movw	r22, r12
    52c8:	0e 94 3f 2b 	call	0x567e	; 0x567e <__subsf3>
    52cc:	dc 01       	movw	r26, r24
    52ce:	cb 01       	movw	r24, r22
    52d0:	8b 87       	std	Y+11, r24	; 0x0b
    52d2:	9c 87       	std	Y+12, r25	; 0x0c
    52d4:	ad 87       	std	Y+13, r26	; 0x0d
    52d6:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    52d8:	8b 81       	ldd	r24, Y+3	; 0x03
    52da:	9c 81       	ldd	r25, Y+4	; 0x04
    52dc:	01 96       	adiw	r24, 0x01	; 1
    52de:	8b 83       	std	Y+3, r24	; 0x03
    52e0:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    52e2:	89 81       	ldd	r24, Y+1	; 0x01
    52e4:	9a 81       	ldd	r25, Y+2	; 0x02
    52e6:	01 97       	sbiw	r24, 0x01	; 1
    52e8:	89 83       	std	Y+1, r24	; 0x01
    52ea:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    52ec:	89 81       	ldd	r24, Y+1	; 0x01
    52ee:	9a 81       	ldd	r25, Y+2	; 0x02
    52f0:	18 16       	cp	r1, r24
    52f2:	19 06       	cpc	r1, r25
    52f4:	0c f4       	brge	.+2      	; 0x52f8 <ftoa_fixed+0x15a>
    52f6:	a7 cf       	rjmp	.-178    	; 0x5246 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    52f8:	8b 81       	ldd	r24, Y+3	; 0x03
    52fa:	9c 81       	ldd	r25, Y+4	; 0x04
    52fc:	89 2b       	or	r24, r25
    52fe:	51 f4       	brne	.+20     	; 0x5314 <ftoa_fixed+0x176>
        *buffer++ = '0';
    5300:	89 85       	ldd	r24, Y+9	; 0x09
    5302:	9a 85       	ldd	r25, Y+10	; 0x0a
    5304:	9c 01       	movw	r18, r24
    5306:	2f 5f       	subi	r18, 0xFF	; 255
    5308:	3f 4f       	sbci	r19, 0xFF	; 255
    530a:	29 87       	std	Y+9, r18	; 0x09
    530c:	3a 87       	std	Y+10, r19	; 0x0a
    530e:	20 e3       	ldi	r18, 0x30	; 48
    5310:	fc 01       	movw	r30, r24
    5312:	20 83       	st	Z, r18

    *buffer++ = '.';
    5314:	89 85       	ldd	r24, Y+9	; 0x09
    5316:	9a 85       	ldd	r25, Y+10	; 0x0a
    5318:	9c 01       	movw	r18, r24
    531a:	2f 5f       	subi	r18, 0xFF	; 255
    531c:	3f 4f       	sbci	r19, 0xFF	; 255
    531e:	29 87       	std	Y+9, r18	; 0x09
    5320:	3a 87       	std	Y+10, r19	; 0x0a
    5322:	2e e2       	ldi	r18, 0x2E	; 46
    5324:	fc 01       	movw	r30, r24
    5326:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    5328:	14 c0       	rjmp	.+40     	; 0x5352 <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    532a:	89 85       	ldd	r24, Y+9	; 0x09
    532c:	9a 85       	ldd	r25, Y+10	; 0x0a
    532e:	9c 01       	movw	r18, r24
    5330:	2f 5f       	subi	r18, 0xFF	; 255
    5332:	3f 4f       	sbci	r19, 0xFF	; 255
    5334:	29 87       	std	Y+9, r18	; 0x09
    5336:	3a 87       	std	Y+10, r19	; 0x0a
    5338:	20 e3       	ldi	r18, 0x30	; 48
    533a:	fc 01       	movw	r30, r24
    533c:	20 83       	st	Z, r18
        --exponent;
    533e:	89 81       	ldd	r24, Y+1	; 0x01
    5340:	9a 81       	ldd	r25, Y+2	; 0x02
    5342:	01 97       	sbiw	r24, 0x01	; 1
    5344:	89 83       	std	Y+1, r24	; 0x01
    5346:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    5348:	8b 81       	ldd	r24, Y+3	; 0x03
    534a:	9c 81       	ldd	r25, Y+4	; 0x04
    534c:	01 96       	adiw	r24, 0x01	; 1
    534e:	8b 83       	std	Y+3, r24	; 0x03
    5350:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    5352:	89 81       	ldd	r24, Y+1	; 0x01
    5354:	9a 81       	ldd	r25, Y+2	; 0x02
    5356:	99 23       	and	r25, r25
    5358:	0c f0       	brlt	.+2      	; 0x535c <ftoa_fixed+0x1be>
    535a:	58 c0       	rjmp	.+176    	; 0x540c <ftoa_fixed+0x26e>
    535c:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <width.5062>
    5360:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <width.5062+0x1>
    5364:	2b 81       	ldd	r18, Y+3	; 0x03
    5366:	3c 81       	ldd	r19, Y+4	; 0x04
    5368:	28 17       	cp	r18, r24
    536a:	39 07       	cpc	r19, r25
    536c:	f4 f2       	brlt	.-68     	; 0x532a <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    536e:	4e c0       	rjmp	.+156    	; 0x540c <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    5370:	8b 85       	ldd	r24, Y+11	; 0x0b
    5372:	9c 85       	ldd	r25, Y+12	; 0x0c
    5374:	ad 85       	ldd	r26, Y+13	; 0x0d
    5376:	be 85       	ldd	r27, Y+14	; 0x0e
    5378:	20 e0       	ldi	r18, 0x00	; 0
    537a:	30 e0       	ldi	r19, 0x00	; 0
    537c:	40 e2       	ldi	r20, 0x20	; 32
    537e:	51 e4       	ldi	r21, 0x41	; 65
    5380:	bc 01       	movw	r22, r24
    5382:	cd 01       	movw	r24, r26
    5384:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsf3>
    5388:	dc 01       	movw	r26, r24
    538a:	cb 01       	movw	r24, r22
    538c:	bc 01       	movw	r22, r24
    538e:	cd 01       	movw	r24, r26
    5390:	0e 94 23 2c 	call	0x5846	; 0x5846 <__fixsfsi>
    5394:	dc 01       	movw	r26, r24
    5396:	cb 01       	movw	r24, r22
    5398:	8f 83       	std	Y+7, r24	; 0x07
    539a:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    539c:	89 85       	ldd	r24, Y+9	; 0x09
    539e:	9a 85       	ldd	r25, Y+10	; 0x0a
    53a0:	9c 01       	movw	r18, r24
    53a2:	2f 5f       	subi	r18, 0xFF	; 255
    53a4:	3f 4f       	sbci	r19, 0xFF	; 255
    53a6:	29 87       	std	Y+9, r18	; 0x09
    53a8:	3a 87       	std	Y+10, r19	; 0x0a
    53aa:	2f 81       	ldd	r18, Y+7	; 0x07
    53ac:	20 5d       	subi	r18, 0xD0	; 208
    53ae:	fc 01       	movw	r30, r24
    53b0:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    53b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    53b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    53b6:	ad 85       	ldd	r26, Y+13	; 0x0d
    53b8:	be 85       	ldd	r27, Y+14	; 0x0e
    53ba:	20 e0       	ldi	r18, 0x00	; 0
    53bc:	30 e0       	ldi	r19, 0x00	; 0
    53be:	40 e2       	ldi	r20, 0x20	; 32
    53c0:	51 e4       	ldi	r21, 0x41	; 65
    53c2:	bc 01       	movw	r22, r24
    53c4:	cd 01       	movw	r24, r26
    53c6:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsf3>
    53ca:	dc 01       	movw	r26, r24
    53cc:	cb 01       	movw	r24, r22
    53ce:	6c 01       	movw	r12, r24
    53d0:	7d 01       	movw	r14, r26
    53d2:	8f 81       	ldd	r24, Y+7	; 0x07
    53d4:	98 85       	ldd	r25, Y+8	; 0x08
    53d6:	09 2e       	mov	r0, r25
    53d8:	00 0c       	add	r0, r0
    53da:	aa 0b       	sbc	r26, r26
    53dc:	bb 0b       	sbc	r27, r27
    53de:	bc 01       	movw	r22, r24
    53e0:	cd 01       	movw	r24, r26
    53e2:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__floatsisf>
    53e6:	dc 01       	movw	r26, r24
    53e8:	cb 01       	movw	r24, r22
    53ea:	9c 01       	movw	r18, r24
    53ec:	ad 01       	movw	r20, r26
    53ee:	c7 01       	movw	r24, r14
    53f0:	b6 01       	movw	r22, r12
    53f2:	0e 94 3f 2b 	call	0x567e	; 0x567e <__subsf3>
    53f6:	dc 01       	movw	r26, r24
    53f8:	cb 01       	movw	r24, r22
    53fa:	8b 87       	std	Y+11, r24	; 0x0b
    53fc:	9c 87       	std	Y+12, r25	; 0x0c
    53fe:	ad 87       	std	Y+13, r26	; 0x0d
    5400:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    5402:	8b 81       	ldd	r24, Y+3	; 0x03
    5404:	9c 81       	ldd	r25, Y+4	; 0x04
    5406:	01 96       	adiw	r24, 0x01	; 1
    5408:	8b 83       	std	Y+3, r24	; 0x03
    540a:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    540c:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <width.5062>
    5410:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <width.5062+0x1>
    5414:	2b 81       	ldd	r18, Y+3	; 0x03
    5416:	3c 81       	ldd	r19, Y+4	; 0x04
    5418:	28 17       	cp	r18, r24
    541a:	39 07       	cpc	r19, r25
    541c:	0c f4       	brge	.+2      	; 0x5420 <ftoa_fixed+0x282>
    541e:	a8 cf       	rjmp	.-176    	; 0x5370 <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    5420:	89 85       	ldd	r24, Y+9	; 0x09
    5422:	9a 85       	ldd	r25, Y+10	; 0x0a
    5424:	fc 01       	movw	r30, r24
    5426:	10 82       	st	Z, r1
}
    5428:	2e 96       	adiw	r28, 0x0e	; 14
    542a:	cd bf       	out	0x3d, r28	; 61
    542c:	de bf       	out	0x3e, r29	; 62
    542e:	df 91       	pop	r29
    5430:	cf 91       	pop	r28
    5432:	ff 90       	pop	r15
    5434:	ef 90       	pop	r14
    5436:	df 90       	pop	r13
    5438:	cf 90       	pop	r12
    543a:	08 95       	ret

0000543c <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    543c:	cf 92       	push	r12
    543e:	df 92       	push	r13
    5440:	ef 92       	push	r14
    5442:	ff 92       	push	r15
    5444:	cf 93       	push	r28
    5446:	df 93       	push	r29
    5448:	cd b7       	in	r28, 0x3d	; 61
    544a:	de b7       	in	r29, 0x3e	; 62
    544c:	2e 97       	sbiw	r28, 0x0e	; 14
    544e:	cd bf       	out	0x3d, r28	; 61
    5450:	de bf       	out	0x3e, r29	; 62
    5452:	89 87       	std	Y+9, r24	; 0x09
    5454:	9a 87       	std	Y+10, r25	; 0x0a
    5456:	4b 87       	std	Y+11, r20	; 0x0b
    5458:	5c 87       	std	Y+12, r21	; 0x0c
    545a:	6d 87       	std	Y+13, r22	; 0x0d
    545c:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    545e:	1b 82       	std	Y+3, r1	; 0x03
    5460:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    5462:	8b 85       	ldd	r24, Y+11	; 0x0b
    5464:	9c 85       	ldd	r25, Y+12	; 0x0c
    5466:	ad 85       	ldd	r26, Y+13	; 0x0d
    5468:	be 85       	ldd	r27, Y+14	; 0x0e
    546a:	20 e0       	ldi	r18, 0x00	; 0
    546c:	30 e0       	ldi	r19, 0x00	; 0
    546e:	a9 01       	movw	r20, r18
    5470:	bc 01       	movw	r22, r24
    5472:	cd 01       	movw	r24, r26
    5474:	0e 94 ac 2b 	call	0x5758	; 0x5758 <__cmpsf2>
    5478:	88 23       	and	r24, r24
    547a:	59 f4       	brne	.+22     	; 0x5492 <ftoa_sci+0x56>
        buffer[0] = '0';
    547c:	89 85       	ldd	r24, Y+9	; 0x09
    547e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5480:	20 e3       	ldi	r18, 0x30	; 48
    5482:	fc 01       	movw	r30, r24
    5484:	20 83       	st	Z, r18
        buffer[1] = '\0';
    5486:	89 85       	ldd	r24, Y+9	; 0x09
    5488:	9a 85       	ldd	r25, Y+10	; 0x0a
    548a:	01 96       	adiw	r24, 0x01	; 1
    548c:	fc 01       	movw	r30, r24
    548e:	10 82       	st	Z, r1
        return;
    5490:	ec c0       	rjmp	.+472    	; 0x566a <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    5492:	8b 85       	ldd	r24, Y+11	; 0x0b
    5494:	9c 85       	ldd	r25, Y+12	; 0x0c
    5496:	ad 85       	ldd	r26, Y+13	; 0x0d
    5498:	be 85       	ldd	r27, Y+14	; 0x0e
    549a:	20 e0       	ldi	r18, 0x00	; 0
    549c:	30 e0       	ldi	r19, 0x00	; 0
    549e:	a9 01       	movw	r20, r18
    54a0:	bc 01       	movw	r22, r24
    54a2:	cd 01       	movw	r24, r26
    54a4:	0e 94 ac 2b 	call	0x5758	; 0x5758 <__cmpsf2>
    54a8:	88 23       	and	r24, r24
    54aa:	9c f4       	brge	.+38     	; 0x54d2 <ftoa_sci+0x96>
        *buffer++ = '-';
    54ac:	89 85       	ldd	r24, Y+9	; 0x09
    54ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    54b0:	9c 01       	movw	r18, r24
    54b2:	2f 5f       	subi	r18, 0xFF	; 255
    54b4:	3f 4f       	sbci	r19, 0xFF	; 255
    54b6:	29 87       	std	Y+9, r18	; 0x09
    54b8:	3a 87       	std	Y+10, r19	; 0x0a
    54ba:	2d e2       	ldi	r18, 0x2D	; 45
    54bc:	fc 01       	movw	r30, r24
    54be:	20 83       	st	Z, r18
        value = -value;
    54c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    54c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    54c4:	ad 85       	ldd	r26, Y+13	; 0x0d
    54c6:	be 85       	ldd	r27, Y+14	; 0x0e
    54c8:	b0 58       	subi	r27, 0x80	; 128
    54ca:	8b 87       	std	Y+11, r24	; 0x0b
    54cc:	9c 87       	std	Y+12, r25	; 0x0c
    54ce:	ad 87       	std	Y+13, r26	; 0x0d
    54d0:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    54d2:	ce 01       	movw	r24, r28
    54d4:	0b 96       	adiw	r24, 0x0b	; 11
    54d6:	0e 94 62 28 	call	0x50c4	; 0x50c4 <normalize>
    54da:	8b 83       	std	Y+3, r24	; 0x03
    54dc:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    54de:	8b 85       	ldd	r24, Y+11	; 0x0b
    54e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    54e2:	ad 85       	ldd	r26, Y+13	; 0x0d
    54e4:	be 85       	ldd	r27, Y+14	; 0x0e
    54e6:	20 e0       	ldi	r18, 0x00	; 0
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	40 e2       	ldi	r20, 0x20	; 32
    54ec:	51 e4       	ldi	r21, 0x41	; 65
    54ee:	bc 01       	movw	r22, r24
    54f0:	cd 01       	movw	r24, r26
    54f2:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsf3>
    54f6:	dc 01       	movw	r26, r24
    54f8:	cb 01       	movw	r24, r22
    54fa:	bc 01       	movw	r22, r24
    54fc:	cd 01       	movw	r24, r26
    54fe:	0e 94 23 2c 	call	0x5846	; 0x5846 <__fixsfsi>
    5502:	dc 01       	movw	r26, r24
    5504:	cb 01       	movw	r24, r22
    5506:	8d 83       	std	Y+5, r24	; 0x05
    5508:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    550a:	89 85       	ldd	r24, Y+9	; 0x09
    550c:	9a 85       	ldd	r25, Y+10	; 0x0a
    550e:	9c 01       	movw	r18, r24
    5510:	2f 5f       	subi	r18, 0xFF	; 255
    5512:	3f 4f       	sbci	r19, 0xFF	; 255
    5514:	29 87       	std	Y+9, r18	; 0x09
    5516:	3a 87       	std	Y+10, r19	; 0x0a
    5518:	2d 81       	ldd	r18, Y+5	; 0x05
    551a:	20 5d       	subi	r18, 0xD0	; 208
    551c:	fc 01       	movw	r30, r24
    551e:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    5520:	8b 85       	ldd	r24, Y+11	; 0x0b
    5522:	9c 85       	ldd	r25, Y+12	; 0x0c
    5524:	ad 85       	ldd	r26, Y+13	; 0x0d
    5526:	be 85       	ldd	r27, Y+14	; 0x0e
    5528:	20 e0       	ldi	r18, 0x00	; 0
    552a:	30 e0       	ldi	r19, 0x00	; 0
    552c:	40 e2       	ldi	r20, 0x20	; 32
    552e:	51 e4       	ldi	r21, 0x41	; 65
    5530:	bc 01       	movw	r22, r24
    5532:	cd 01       	movw	r24, r26
    5534:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsf3>
    5538:	dc 01       	movw	r26, r24
    553a:	cb 01       	movw	r24, r22
    553c:	6c 01       	movw	r12, r24
    553e:	7d 01       	movw	r14, r26
    5540:	8d 81       	ldd	r24, Y+5	; 0x05
    5542:	9e 81       	ldd	r25, Y+6	; 0x06
    5544:	09 2e       	mov	r0, r25
    5546:	00 0c       	add	r0, r0
    5548:	aa 0b       	sbc	r26, r26
    554a:	bb 0b       	sbc	r27, r27
    554c:	bc 01       	movw	r22, r24
    554e:	cd 01       	movw	r24, r26
    5550:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__floatsisf>
    5554:	dc 01       	movw	r26, r24
    5556:	cb 01       	movw	r24, r22
    5558:	9c 01       	movw	r18, r24
    555a:	ad 01       	movw	r20, r26
    555c:	c7 01       	movw	r24, r14
    555e:	b6 01       	movw	r22, r12
    5560:	0e 94 3f 2b 	call	0x567e	; 0x567e <__subsf3>
    5564:	dc 01       	movw	r26, r24
    5566:	cb 01       	movw	r24, r22
    5568:	8b 87       	std	Y+11, r24	; 0x0b
    556a:	9c 87       	std	Y+12, r25	; 0x0c
    556c:	ad 87       	std	Y+13, r26	; 0x0d
    556e:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    5570:	8b 81       	ldd	r24, Y+3	; 0x03
    5572:	9c 81       	ldd	r25, Y+4	; 0x04
    5574:	01 97       	sbiw	r24, 0x01	; 1
    5576:	8b 83       	std	Y+3, r24	; 0x03
    5578:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    557a:	89 85       	ldd	r24, Y+9	; 0x09
    557c:	9a 85       	ldd	r25, Y+10	; 0x0a
    557e:	9c 01       	movw	r18, r24
    5580:	2f 5f       	subi	r18, 0xFF	; 255
    5582:	3f 4f       	sbci	r19, 0xFF	; 255
    5584:	29 87       	std	Y+9, r18	; 0x09
    5586:	3a 87       	std	Y+10, r19	; 0x0a
    5588:	2e e2       	ldi	r18, 0x2E	; 46
    558a:	fc 01       	movw	r30, r24
    558c:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    558e:	19 82       	std	Y+1, r1	; 0x01
    5590:	1a 82       	std	Y+2, r1	; 0x02
    5592:	4e c0       	rjmp	.+156    	; 0x5630 <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    5594:	8b 85       	ldd	r24, Y+11	; 0x0b
    5596:	9c 85       	ldd	r25, Y+12	; 0x0c
    5598:	ad 85       	ldd	r26, Y+13	; 0x0d
    559a:	be 85       	ldd	r27, Y+14	; 0x0e
    559c:	20 e0       	ldi	r18, 0x00	; 0
    559e:	30 e0       	ldi	r19, 0x00	; 0
    55a0:	40 e2       	ldi	r20, 0x20	; 32
    55a2:	51 e4       	ldi	r21, 0x41	; 65
    55a4:	bc 01       	movw	r22, r24
    55a6:	cd 01       	movw	r24, r26
    55a8:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsf3>
    55ac:	dc 01       	movw	r26, r24
    55ae:	cb 01       	movw	r24, r22
    55b0:	bc 01       	movw	r22, r24
    55b2:	cd 01       	movw	r24, r26
    55b4:	0e 94 23 2c 	call	0x5846	; 0x5846 <__fixsfsi>
    55b8:	dc 01       	movw	r26, r24
    55ba:	cb 01       	movw	r24, r22
    55bc:	8f 83       	std	Y+7, r24	; 0x07
    55be:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    55c0:	89 85       	ldd	r24, Y+9	; 0x09
    55c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    55c4:	9c 01       	movw	r18, r24
    55c6:	2f 5f       	subi	r18, 0xFF	; 255
    55c8:	3f 4f       	sbci	r19, 0xFF	; 255
    55ca:	29 87       	std	Y+9, r18	; 0x09
    55cc:	3a 87       	std	Y+10, r19	; 0x0a
    55ce:	2f 81       	ldd	r18, Y+7	; 0x07
    55d0:	20 5d       	subi	r18, 0xD0	; 208
    55d2:	fc 01       	movw	r30, r24
    55d4:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    55d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    55d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    55da:	ad 85       	ldd	r26, Y+13	; 0x0d
    55dc:	be 85       	ldd	r27, Y+14	; 0x0e
    55de:	20 e0       	ldi	r18, 0x00	; 0
    55e0:	30 e0       	ldi	r19, 0x00	; 0
    55e2:	40 e2       	ldi	r20, 0x20	; 32
    55e4:	51 e4       	ldi	r21, 0x41	; 65
    55e6:	bc 01       	movw	r22, r24
    55e8:	cd 01       	movw	r24, r26
    55ea:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsf3>
    55ee:	dc 01       	movw	r26, r24
    55f0:	cb 01       	movw	r24, r22
    55f2:	6c 01       	movw	r12, r24
    55f4:	7d 01       	movw	r14, r26
    55f6:	8f 81       	ldd	r24, Y+7	; 0x07
    55f8:	98 85       	ldd	r25, Y+8	; 0x08
    55fa:	09 2e       	mov	r0, r25
    55fc:	00 0c       	add	r0, r0
    55fe:	aa 0b       	sbc	r26, r26
    5600:	bb 0b       	sbc	r27, r27
    5602:	bc 01       	movw	r22, r24
    5604:	cd 01       	movw	r24, r26
    5606:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__floatsisf>
    560a:	dc 01       	movw	r26, r24
    560c:	cb 01       	movw	r24, r22
    560e:	9c 01       	movw	r18, r24
    5610:	ad 01       	movw	r20, r26
    5612:	c7 01       	movw	r24, r14
    5614:	b6 01       	movw	r22, r12
    5616:	0e 94 3f 2b 	call	0x567e	; 0x567e <__subsf3>
    561a:	dc 01       	movw	r26, r24
    561c:	cb 01       	movw	r24, r22
    561e:	8b 87       	std	Y+11, r24	; 0x0b
    5620:	9c 87       	std	Y+12, r25	; 0x0c
    5622:	ad 87       	std	Y+13, r26	; 0x0d
    5624:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    5626:	89 81       	ldd	r24, Y+1	; 0x01
    5628:	9a 81       	ldd	r25, Y+2	; 0x02
    562a:	01 96       	adiw	r24, 0x01	; 1
    562c:	89 83       	std	Y+1, r24	; 0x01
    562e:	9a 83       	std	Y+2, r25	; 0x02
    5630:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <width.5079>
    5634:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <width.5079+0x1>
    5638:	29 81       	ldd	r18, Y+1	; 0x01
    563a:	3a 81       	ldd	r19, Y+2	; 0x02
    563c:	28 17       	cp	r18, r24
    563e:	39 07       	cpc	r19, r25
    5640:	0c f4       	brge	.+2      	; 0x5644 <ftoa_sci+0x208>
    5642:	a8 cf       	rjmp	.-176    	; 0x5594 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    5644:	89 85       	ldd	r24, Y+9	; 0x09
    5646:	9a 85       	ldd	r25, Y+10	; 0x0a
    5648:	9c 01       	movw	r18, r24
    564a:	2f 5f       	subi	r18, 0xFF	; 255
    564c:	3f 4f       	sbci	r19, 0xFF	; 255
    564e:	29 87       	std	Y+9, r18	; 0x09
    5650:	3a 87       	std	Y+10, r19	; 0x0a
    5652:	25 e6       	ldi	r18, 0x65	; 101
    5654:	fc 01       	movw	r30, r24
    5656:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    5658:	29 85       	ldd	r18, Y+9	; 0x09
    565a:	3a 85       	ldd	r19, Y+10	; 0x0a
    565c:	8b 81       	ldd	r24, Y+3	; 0x03
    565e:	9c 81       	ldd	r25, Y+4	; 0x04
    5660:	4a e0       	ldi	r20, 0x0A	; 10
    5662:	50 e0       	ldi	r21, 0x00	; 0
    5664:	b9 01       	movw	r22, r18
    5666:	0e 94 2c 32 	call	0x6458	; 0x6458 <itoa>
}
    566a:	2e 96       	adiw	r28, 0x0e	; 14
    566c:	cd bf       	out	0x3d, r28	; 61
    566e:	de bf       	out	0x3e, r29	; 62
    5670:	df 91       	pop	r29
    5672:	cf 91       	pop	r28
    5674:	ff 90       	pop	r15
    5676:	ef 90       	pop	r14
    5678:	df 90       	pop	r13
    567a:	cf 90       	pop	r12
    567c:	08 95       	ret

0000567e <__subsf3>:
    567e:	50 58       	subi	r21, 0x80	; 128

00005680 <__addsf3>:
    5680:	bb 27       	eor	r27, r27
    5682:	aa 27       	eor	r26, r26
    5684:	0e 94 57 2b 	call	0x56ae	; 0x56ae <__addsf3x>
    5688:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <__fp_round>
    568c:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__fp_pscA>
    5690:	38 f0       	brcs	.+14     	; 0x56a0 <__addsf3+0x20>
    5692:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__fp_pscB>
    5696:	20 f0       	brcs	.+8      	; 0x56a0 <__addsf3+0x20>
    5698:	39 f4       	brne	.+14     	; 0x56a8 <__addsf3+0x28>
    569a:	9f 3f       	cpi	r25, 0xFF	; 255
    569c:	19 f4       	brne	.+6      	; 0x56a4 <__addsf3+0x24>
    569e:	26 f4       	brtc	.+8      	; 0x56a8 <__addsf3+0x28>
    56a0:	0c 94 c0 2c 	jmp	0x5980	; 0x5980 <__fp_nan>
    56a4:	0e f4       	brtc	.+2      	; 0x56a8 <__addsf3+0x28>
    56a6:	e0 95       	com	r30
    56a8:	e7 fb       	bst	r30, 7
    56aa:	0c 94 ba 2c 	jmp	0x5974	; 0x5974 <__fp_inf>

000056ae <__addsf3x>:
    56ae:	e9 2f       	mov	r30, r25
    56b0:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <__fp_split3>
    56b4:	58 f3       	brcs	.-42     	; 0x568c <__addsf3+0xc>
    56b6:	ba 17       	cp	r27, r26
    56b8:	62 07       	cpc	r22, r18
    56ba:	73 07       	cpc	r23, r19
    56bc:	84 07       	cpc	r24, r20
    56be:	95 07       	cpc	r25, r21
    56c0:	20 f0       	brcs	.+8      	; 0x56ca <__addsf3x+0x1c>
    56c2:	79 f4       	brne	.+30     	; 0x56e2 <__addsf3x+0x34>
    56c4:	a6 f5       	brtc	.+104    	; 0x572e <__addsf3x+0x80>
    56c6:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__fp_zero>
    56ca:	0e f4       	brtc	.+2      	; 0x56ce <__addsf3x+0x20>
    56cc:	e0 95       	com	r30
    56ce:	0b 2e       	mov	r0, r27
    56d0:	ba 2f       	mov	r27, r26
    56d2:	a0 2d       	mov	r26, r0
    56d4:	0b 01       	movw	r0, r22
    56d6:	b9 01       	movw	r22, r18
    56d8:	90 01       	movw	r18, r0
    56da:	0c 01       	movw	r0, r24
    56dc:	ca 01       	movw	r24, r20
    56de:	a0 01       	movw	r20, r0
    56e0:	11 24       	eor	r1, r1
    56e2:	ff 27       	eor	r31, r31
    56e4:	59 1b       	sub	r21, r25
    56e6:	99 f0       	breq	.+38     	; 0x570e <__addsf3x+0x60>
    56e8:	59 3f       	cpi	r21, 0xF9	; 249
    56ea:	50 f4       	brcc	.+20     	; 0x5700 <__addsf3x+0x52>
    56ec:	50 3e       	cpi	r21, 0xE0	; 224
    56ee:	68 f1       	brcs	.+90     	; 0x574a <__addsf3x+0x9c>
    56f0:	1a 16       	cp	r1, r26
    56f2:	f0 40       	sbci	r31, 0x00	; 0
    56f4:	a2 2f       	mov	r26, r18
    56f6:	23 2f       	mov	r18, r19
    56f8:	34 2f       	mov	r19, r20
    56fa:	44 27       	eor	r20, r20
    56fc:	58 5f       	subi	r21, 0xF8	; 248
    56fe:	f3 cf       	rjmp	.-26     	; 0x56e6 <__addsf3x+0x38>
    5700:	46 95       	lsr	r20
    5702:	37 95       	ror	r19
    5704:	27 95       	ror	r18
    5706:	a7 95       	ror	r26
    5708:	f0 40       	sbci	r31, 0x00	; 0
    570a:	53 95       	inc	r21
    570c:	c9 f7       	brne	.-14     	; 0x5700 <__addsf3x+0x52>
    570e:	7e f4       	brtc	.+30     	; 0x572e <__addsf3x+0x80>
    5710:	1f 16       	cp	r1, r31
    5712:	ba 0b       	sbc	r27, r26
    5714:	62 0b       	sbc	r22, r18
    5716:	73 0b       	sbc	r23, r19
    5718:	84 0b       	sbc	r24, r20
    571a:	ba f0       	brmi	.+46     	; 0x574a <__addsf3x+0x9c>
    571c:	91 50       	subi	r25, 0x01	; 1
    571e:	a1 f0       	breq	.+40     	; 0x5748 <__addsf3x+0x9a>
    5720:	ff 0f       	add	r31, r31
    5722:	bb 1f       	adc	r27, r27
    5724:	66 1f       	adc	r22, r22
    5726:	77 1f       	adc	r23, r23
    5728:	88 1f       	adc	r24, r24
    572a:	c2 f7       	brpl	.-16     	; 0x571c <__addsf3x+0x6e>
    572c:	0e c0       	rjmp	.+28     	; 0x574a <__addsf3x+0x9c>
    572e:	ba 0f       	add	r27, r26
    5730:	62 1f       	adc	r22, r18
    5732:	73 1f       	adc	r23, r19
    5734:	84 1f       	adc	r24, r20
    5736:	48 f4       	brcc	.+18     	; 0x574a <__addsf3x+0x9c>
    5738:	87 95       	ror	r24
    573a:	77 95       	ror	r23
    573c:	67 95       	ror	r22
    573e:	b7 95       	ror	r27
    5740:	f7 95       	ror	r31
    5742:	9e 3f       	cpi	r25, 0xFE	; 254
    5744:	08 f0       	brcs	.+2      	; 0x5748 <__addsf3x+0x9a>
    5746:	b0 cf       	rjmp	.-160    	; 0x56a8 <__addsf3+0x28>
    5748:	93 95       	inc	r25
    574a:	88 0f       	add	r24, r24
    574c:	08 f0       	brcs	.+2      	; 0x5750 <__addsf3x+0xa2>
    574e:	99 27       	eor	r25, r25
    5750:	ee 0f       	add	r30, r30
    5752:	97 95       	ror	r25
    5754:	87 95       	ror	r24
    5756:	08 95       	ret

00005758 <__cmpsf2>:
    5758:	0e 94 96 2c 	call	0x592c	; 0x592c <__fp_cmp>
    575c:	08 f4       	brcc	.+2      	; 0x5760 <__cmpsf2+0x8>
    575e:	81 e0       	ldi	r24, 0x01	; 1
    5760:	08 95       	ret

00005762 <__divsf3>:
    5762:	0e 94 c5 2b 	call	0x578a	; 0x578a <__divsf3x>
    5766:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <__fp_round>
    576a:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__fp_pscB>
    576e:	58 f0       	brcs	.+22     	; 0x5786 <__divsf3+0x24>
    5770:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__fp_pscA>
    5774:	40 f0       	brcs	.+16     	; 0x5786 <__divsf3+0x24>
    5776:	29 f4       	brne	.+10     	; 0x5782 <__divsf3+0x20>
    5778:	5f 3f       	cpi	r21, 0xFF	; 255
    577a:	29 f0       	breq	.+10     	; 0x5786 <__divsf3+0x24>
    577c:	0c 94 ba 2c 	jmp	0x5974	; 0x5974 <__fp_inf>
    5780:	51 11       	cpse	r21, r1
    5782:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__fp_szero>
    5786:	0c 94 c0 2c 	jmp	0x5980	; 0x5980 <__fp_nan>

0000578a <__divsf3x>:
    578a:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <__fp_split3>
    578e:	68 f3       	brcs	.-38     	; 0x576a <__divsf3+0x8>

00005790 <__divsf3_pse>:
    5790:	99 23       	and	r25, r25
    5792:	b1 f3       	breq	.-20     	; 0x5780 <__divsf3+0x1e>
    5794:	55 23       	and	r21, r21
    5796:	91 f3       	breq	.-28     	; 0x577c <__divsf3+0x1a>
    5798:	95 1b       	sub	r25, r21
    579a:	55 0b       	sbc	r21, r21
    579c:	bb 27       	eor	r27, r27
    579e:	aa 27       	eor	r26, r26
    57a0:	62 17       	cp	r22, r18
    57a2:	73 07       	cpc	r23, r19
    57a4:	84 07       	cpc	r24, r20
    57a6:	38 f0       	brcs	.+14     	; 0x57b6 <__divsf3_pse+0x26>
    57a8:	9f 5f       	subi	r25, 0xFF	; 255
    57aa:	5f 4f       	sbci	r21, 0xFF	; 255
    57ac:	22 0f       	add	r18, r18
    57ae:	33 1f       	adc	r19, r19
    57b0:	44 1f       	adc	r20, r20
    57b2:	aa 1f       	adc	r26, r26
    57b4:	a9 f3       	breq	.-22     	; 0x57a0 <__divsf3_pse+0x10>
    57b6:	35 d0       	rcall	.+106    	; 0x5822 <__divsf3_pse+0x92>
    57b8:	0e 2e       	mov	r0, r30
    57ba:	3a f0       	brmi	.+14     	; 0x57ca <__divsf3_pse+0x3a>
    57bc:	e0 e8       	ldi	r30, 0x80	; 128
    57be:	32 d0       	rcall	.+100    	; 0x5824 <__divsf3_pse+0x94>
    57c0:	91 50       	subi	r25, 0x01	; 1
    57c2:	50 40       	sbci	r21, 0x00	; 0
    57c4:	e6 95       	lsr	r30
    57c6:	00 1c       	adc	r0, r0
    57c8:	ca f7       	brpl	.-14     	; 0x57bc <__divsf3_pse+0x2c>
    57ca:	2b d0       	rcall	.+86     	; 0x5822 <__divsf3_pse+0x92>
    57cc:	fe 2f       	mov	r31, r30
    57ce:	29 d0       	rcall	.+82     	; 0x5822 <__divsf3_pse+0x92>
    57d0:	66 0f       	add	r22, r22
    57d2:	77 1f       	adc	r23, r23
    57d4:	88 1f       	adc	r24, r24
    57d6:	bb 1f       	adc	r27, r27
    57d8:	26 17       	cp	r18, r22
    57da:	37 07       	cpc	r19, r23
    57dc:	48 07       	cpc	r20, r24
    57de:	ab 07       	cpc	r26, r27
    57e0:	b0 e8       	ldi	r27, 0x80	; 128
    57e2:	09 f0       	breq	.+2      	; 0x57e6 <__divsf3_pse+0x56>
    57e4:	bb 0b       	sbc	r27, r27
    57e6:	80 2d       	mov	r24, r0
    57e8:	bf 01       	movw	r22, r30
    57ea:	ff 27       	eor	r31, r31
    57ec:	93 58       	subi	r25, 0x83	; 131
    57ee:	5f 4f       	sbci	r21, 0xFF	; 255
    57f0:	3a f0       	brmi	.+14     	; 0x5800 <__divsf3_pse+0x70>
    57f2:	9e 3f       	cpi	r25, 0xFE	; 254
    57f4:	51 05       	cpc	r21, r1
    57f6:	78 f0       	brcs	.+30     	; 0x5816 <__divsf3_pse+0x86>
    57f8:	0c 94 ba 2c 	jmp	0x5974	; 0x5974 <__fp_inf>
    57fc:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__fp_szero>
    5800:	5f 3f       	cpi	r21, 0xFF	; 255
    5802:	e4 f3       	brlt	.-8      	; 0x57fc <__divsf3_pse+0x6c>
    5804:	98 3e       	cpi	r25, 0xE8	; 232
    5806:	d4 f3       	brlt	.-12     	; 0x57fc <__divsf3_pse+0x6c>
    5808:	86 95       	lsr	r24
    580a:	77 95       	ror	r23
    580c:	67 95       	ror	r22
    580e:	b7 95       	ror	r27
    5810:	f7 95       	ror	r31
    5812:	9f 5f       	subi	r25, 0xFF	; 255
    5814:	c9 f7       	brne	.-14     	; 0x5808 <__divsf3_pse+0x78>
    5816:	88 0f       	add	r24, r24
    5818:	91 1d       	adc	r25, r1
    581a:	96 95       	lsr	r25
    581c:	87 95       	ror	r24
    581e:	97 f9       	bld	r25, 7
    5820:	08 95       	ret
    5822:	e1 e0       	ldi	r30, 0x01	; 1
    5824:	66 0f       	add	r22, r22
    5826:	77 1f       	adc	r23, r23
    5828:	88 1f       	adc	r24, r24
    582a:	bb 1f       	adc	r27, r27
    582c:	62 17       	cp	r22, r18
    582e:	73 07       	cpc	r23, r19
    5830:	84 07       	cpc	r24, r20
    5832:	ba 07       	cpc	r27, r26
    5834:	20 f0       	brcs	.+8      	; 0x583e <__divsf3_pse+0xae>
    5836:	62 1b       	sub	r22, r18
    5838:	73 0b       	sbc	r23, r19
    583a:	84 0b       	sbc	r24, r20
    583c:	ba 0b       	sbc	r27, r26
    583e:	ee 1f       	adc	r30, r30
    5840:	88 f7       	brcc	.-30     	; 0x5824 <__divsf3_pse+0x94>
    5842:	e0 95       	com	r30
    5844:	08 95       	ret

00005846 <__fixsfsi>:
    5846:	0e 94 2a 2c 	call	0x5854	; 0x5854 <__fixunssfsi>
    584a:	68 94       	set
    584c:	b1 11       	cpse	r27, r1
    584e:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__fp_szero>
    5852:	08 95       	ret

00005854 <__fixunssfsi>:
    5854:	0e 94 ea 2c 	call	0x59d4	; 0x59d4 <__fp_splitA>
    5858:	88 f0       	brcs	.+34     	; 0x587c <__fixunssfsi+0x28>
    585a:	9f 57       	subi	r25, 0x7F	; 127
    585c:	98 f0       	brcs	.+38     	; 0x5884 <__fixunssfsi+0x30>
    585e:	b9 2f       	mov	r27, r25
    5860:	99 27       	eor	r25, r25
    5862:	b7 51       	subi	r27, 0x17	; 23
    5864:	b0 f0       	brcs	.+44     	; 0x5892 <__fixunssfsi+0x3e>
    5866:	e1 f0       	breq	.+56     	; 0x58a0 <__fixunssfsi+0x4c>
    5868:	66 0f       	add	r22, r22
    586a:	77 1f       	adc	r23, r23
    586c:	88 1f       	adc	r24, r24
    586e:	99 1f       	adc	r25, r25
    5870:	1a f0       	brmi	.+6      	; 0x5878 <__fixunssfsi+0x24>
    5872:	ba 95       	dec	r27
    5874:	c9 f7       	brne	.-14     	; 0x5868 <__fixunssfsi+0x14>
    5876:	14 c0       	rjmp	.+40     	; 0x58a0 <__fixunssfsi+0x4c>
    5878:	b1 30       	cpi	r27, 0x01	; 1
    587a:	91 f0       	breq	.+36     	; 0x58a0 <__fixunssfsi+0x4c>
    587c:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <__fp_zero>
    5880:	b1 e0       	ldi	r27, 0x01	; 1
    5882:	08 95       	ret
    5884:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__fp_zero>
    5888:	67 2f       	mov	r22, r23
    588a:	78 2f       	mov	r23, r24
    588c:	88 27       	eor	r24, r24
    588e:	b8 5f       	subi	r27, 0xF8	; 248
    5890:	39 f0       	breq	.+14     	; 0x58a0 <__fixunssfsi+0x4c>
    5892:	b9 3f       	cpi	r27, 0xF9	; 249
    5894:	cc f3       	brlt	.-14     	; 0x5888 <__fixunssfsi+0x34>
    5896:	86 95       	lsr	r24
    5898:	77 95       	ror	r23
    589a:	67 95       	ror	r22
    589c:	b3 95       	inc	r27
    589e:	d9 f7       	brne	.-10     	; 0x5896 <__fixunssfsi+0x42>
    58a0:	3e f4       	brtc	.+14     	; 0x58b0 <__fixunssfsi+0x5c>
    58a2:	90 95       	com	r25
    58a4:	80 95       	com	r24
    58a6:	70 95       	com	r23
    58a8:	61 95       	neg	r22
    58aa:	7f 4f       	sbci	r23, 0xFF	; 255
    58ac:	8f 4f       	sbci	r24, 0xFF	; 255
    58ae:	9f 4f       	sbci	r25, 0xFF	; 255
    58b0:	08 95       	ret

000058b2 <__floatunsisf>:
    58b2:	e8 94       	clt
    58b4:	09 c0       	rjmp	.+18     	; 0x58c8 <__floatsisf+0x12>

000058b6 <__floatsisf>:
    58b6:	97 fb       	bst	r25, 7
    58b8:	3e f4       	brtc	.+14     	; 0x58c8 <__floatsisf+0x12>
    58ba:	90 95       	com	r25
    58bc:	80 95       	com	r24
    58be:	70 95       	com	r23
    58c0:	61 95       	neg	r22
    58c2:	7f 4f       	sbci	r23, 0xFF	; 255
    58c4:	8f 4f       	sbci	r24, 0xFF	; 255
    58c6:	9f 4f       	sbci	r25, 0xFF	; 255
    58c8:	99 23       	and	r25, r25
    58ca:	a9 f0       	breq	.+42     	; 0x58f6 <__floatsisf+0x40>
    58cc:	f9 2f       	mov	r31, r25
    58ce:	96 e9       	ldi	r25, 0x96	; 150
    58d0:	bb 27       	eor	r27, r27
    58d2:	93 95       	inc	r25
    58d4:	f6 95       	lsr	r31
    58d6:	87 95       	ror	r24
    58d8:	77 95       	ror	r23
    58da:	67 95       	ror	r22
    58dc:	b7 95       	ror	r27
    58de:	f1 11       	cpse	r31, r1
    58e0:	f8 cf       	rjmp	.-16     	; 0x58d2 <__floatsisf+0x1c>
    58e2:	fa f4       	brpl	.+62     	; 0x5922 <__floatsisf+0x6c>
    58e4:	bb 0f       	add	r27, r27
    58e6:	11 f4       	brne	.+4      	; 0x58ec <__floatsisf+0x36>
    58e8:	60 ff       	sbrs	r22, 0
    58ea:	1b c0       	rjmp	.+54     	; 0x5922 <__floatsisf+0x6c>
    58ec:	6f 5f       	subi	r22, 0xFF	; 255
    58ee:	7f 4f       	sbci	r23, 0xFF	; 255
    58f0:	8f 4f       	sbci	r24, 0xFF	; 255
    58f2:	9f 4f       	sbci	r25, 0xFF	; 255
    58f4:	16 c0       	rjmp	.+44     	; 0x5922 <__floatsisf+0x6c>
    58f6:	88 23       	and	r24, r24
    58f8:	11 f0       	breq	.+4      	; 0x58fe <__floatsisf+0x48>
    58fa:	96 e9       	ldi	r25, 0x96	; 150
    58fc:	11 c0       	rjmp	.+34     	; 0x5920 <__floatsisf+0x6a>
    58fe:	77 23       	and	r23, r23
    5900:	21 f0       	breq	.+8      	; 0x590a <__floatsisf+0x54>
    5902:	9e e8       	ldi	r25, 0x8E	; 142
    5904:	87 2f       	mov	r24, r23
    5906:	76 2f       	mov	r23, r22
    5908:	05 c0       	rjmp	.+10     	; 0x5914 <__floatsisf+0x5e>
    590a:	66 23       	and	r22, r22
    590c:	71 f0       	breq	.+28     	; 0x592a <__floatsisf+0x74>
    590e:	96 e8       	ldi	r25, 0x86	; 134
    5910:	86 2f       	mov	r24, r22
    5912:	70 e0       	ldi	r23, 0x00	; 0
    5914:	60 e0       	ldi	r22, 0x00	; 0
    5916:	2a f0       	brmi	.+10     	; 0x5922 <__floatsisf+0x6c>
    5918:	9a 95       	dec	r25
    591a:	66 0f       	add	r22, r22
    591c:	77 1f       	adc	r23, r23
    591e:	88 1f       	adc	r24, r24
    5920:	da f7       	brpl	.-10     	; 0x5918 <__floatsisf+0x62>
    5922:	88 0f       	add	r24, r24
    5924:	96 95       	lsr	r25
    5926:	87 95       	ror	r24
    5928:	97 f9       	bld	r25, 7
    592a:	08 95       	ret

0000592c <__fp_cmp>:
    592c:	99 0f       	add	r25, r25
    592e:	00 08       	sbc	r0, r0
    5930:	55 0f       	add	r21, r21
    5932:	aa 0b       	sbc	r26, r26
    5934:	e0 e8       	ldi	r30, 0x80	; 128
    5936:	fe ef       	ldi	r31, 0xFE	; 254
    5938:	16 16       	cp	r1, r22
    593a:	17 06       	cpc	r1, r23
    593c:	e8 07       	cpc	r30, r24
    593e:	f9 07       	cpc	r31, r25
    5940:	c0 f0       	brcs	.+48     	; 0x5972 <__fp_cmp+0x46>
    5942:	12 16       	cp	r1, r18
    5944:	13 06       	cpc	r1, r19
    5946:	e4 07       	cpc	r30, r20
    5948:	f5 07       	cpc	r31, r21
    594a:	98 f0       	brcs	.+38     	; 0x5972 <__fp_cmp+0x46>
    594c:	62 1b       	sub	r22, r18
    594e:	73 0b       	sbc	r23, r19
    5950:	84 0b       	sbc	r24, r20
    5952:	95 0b       	sbc	r25, r21
    5954:	39 f4       	brne	.+14     	; 0x5964 <__fp_cmp+0x38>
    5956:	0a 26       	eor	r0, r26
    5958:	61 f0       	breq	.+24     	; 0x5972 <__fp_cmp+0x46>
    595a:	23 2b       	or	r18, r19
    595c:	24 2b       	or	r18, r20
    595e:	25 2b       	or	r18, r21
    5960:	21 f4       	brne	.+8      	; 0x596a <__fp_cmp+0x3e>
    5962:	08 95       	ret
    5964:	0a 26       	eor	r0, r26
    5966:	09 f4       	brne	.+2      	; 0x596a <__fp_cmp+0x3e>
    5968:	a1 40       	sbci	r26, 0x01	; 1
    596a:	a6 95       	lsr	r26
    596c:	8f ef       	ldi	r24, 0xFF	; 255
    596e:	81 1d       	adc	r24, r1
    5970:	81 1d       	adc	r24, r1
    5972:	08 95       	ret

00005974 <__fp_inf>:
    5974:	97 f9       	bld	r25, 7
    5976:	9f 67       	ori	r25, 0x7F	; 127
    5978:	80 e8       	ldi	r24, 0x80	; 128
    597a:	70 e0       	ldi	r23, 0x00	; 0
    597c:	60 e0       	ldi	r22, 0x00	; 0
    597e:	08 95       	ret

00005980 <__fp_nan>:
    5980:	9f ef       	ldi	r25, 0xFF	; 255
    5982:	80 ec       	ldi	r24, 0xC0	; 192
    5984:	08 95       	ret

00005986 <__fp_pscA>:
    5986:	00 24       	eor	r0, r0
    5988:	0a 94       	dec	r0
    598a:	16 16       	cp	r1, r22
    598c:	17 06       	cpc	r1, r23
    598e:	18 06       	cpc	r1, r24
    5990:	09 06       	cpc	r0, r25
    5992:	08 95       	ret

00005994 <__fp_pscB>:
    5994:	00 24       	eor	r0, r0
    5996:	0a 94       	dec	r0
    5998:	12 16       	cp	r1, r18
    599a:	13 06       	cpc	r1, r19
    599c:	14 06       	cpc	r1, r20
    599e:	05 06       	cpc	r0, r21
    59a0:	08 95       	ret

000059a2 <__fp_round>:
    59a2:	09 2e       	mov	r0, r25
    59a4:	03 94       	inc	r0
    59a6:	00 0c       	add	r0, r0
    59a8:	11 f4       	brne	.+4      	; 0x59ae <__fp_round+0xc>
    59aa:	88 23       	and	r24, r24
    59ac:	52 f0       	brmi	.+20     	; 0x59c2 <__fp_round+0x20>
    59ae:	bb 0f       	add	r27, r27
    59b0:	40 f4       	brcc	.+16     	; 0x59c2 <__fp_round+0x20>
    59b2:	bf 2b       	or	r27, r31
    59b4:	11 f4       	brne	.+4      	; 0x59ba <__fp_round+0x18>
    59b6:	60 ff       	sbrs	r22, 0
    59b8:	04 c0       	rjmp	.+8      	; 0x59c2 <__fp_round+0x20>
    59ba:	6f 5f       	subi	r22, 0xFF	; 255
    59bc:	7f 4f       	sbci	r23, 0xFF	; 255
    59be:	8f 4f       	sbci	r24, 0xFF	; 255
    59c0:	9f 4f       	sbci	r25, 0xFF	; 255
    59c2:	08 95       	ret

000059c4 <__fp_split3>:
    59c4:	57 fd       	sbrc	r21, 7
    59c6:	90 58       	subi	r25, 0x80	; 128
    59c8:	44 0f       	add	r20, r20
    59ca:	55 1f       	adc	r21, r21
    59cc:	59 f0       	breq	.+22     	; 0x59e4 <__fp_splitA+0x10>
    59ce:	5f 3f       	cpi	r21, 0xFF	; 255
    59d0:	71 f0       	breq	.+28     	; 0x59ee <__fp_splitA+0x1a>
    59d2:	47 95       	ror	r20

000059d4 <__fp_splitA>:
    59d4:	88 0f       	add	r24, r24
    59d6:	97 fb       	bst	r25, 7
    59d8:	99 1f       	adc	r25, r25
    59da:	61 f0       	breq	.+24     	; 0x59f4 <__fp_splitA+0x20>
    59dc:	9f 3f       	cpi	r25, 0xFF	; 255
    59de:	79 f0       	breq	.+30     	; 0x59fe <__fp_splitA+0x2a>
    59e0:	87 95       	ror	r24
    59e2:	08 95       	ret
    59e4:	12 16       	cp	r1, r18
    59e6:	13 06       	cpc	r1, r19
    59e8:	14 06       	cpc	r1, r20
    59ea:	55 1f       	adc	r21, r21
    59ec:	f2 cf       	rjmp	.-28     	; 0x59d2 <__fp_split3+0xe>
    59ee:	46 95       	lsr	r20
    59f0:	f1 df       	rcall	.-30     	; 0x59d4 <__fp_splitA>
    59f2:	08 c0       	rjmp	.+16     	; 0x5a04 <__fp_splitA+0x30>
    59f4:	16 16       	cp	r1, r22
    59f6:	17 06       	cpc	r1, r23
    59f8:	18 06       	cpc	r1, r24
    59fa:	99 1f       	adc	r25, r25
    59fc:	f1 cf       	rjmp	.-30     	; 0x59e0 <__fp_splitA+0xc>
    59fe:	86 95       	lsr	r24
    5a00:	71 05       	cpc	r23, r1
    5a02:	61 05       	cpc	r22, r1
    5a04:	08 94       	sec
    5a06:	08 95       	ret

00005a08 <__fp_zero>:
    5a08:	e8 94       	clt

00005a0a <__fp_szero>:
    5a0a:	bb 27       	eor	r27, r27
    5a0c:	66 27       	eor	r22, r22
    5a0e:	77 27       	eor	r23, r23
    5a10:	cb 01       	movw	r24, r22
    5a12:	97 f9       	bld	r25, 7
    5a14:	08 95       	ret

00005a16 <__gesf2>:
    5a16:	0e 94 96 2c 	call	0x592c	; 0x592c <__fp_cmp>
    5a1a:	08 f4       	brcc	.+2      	; 0x5a1e <__gesf2+0x8>
    5a1c:	8f ef       	ldi	r24, 0xFF	; 255
    5a1e:	08 95       	ret

00005a20 <__mulsf3>:
    5a20:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <__mulsf3x>
    5a24:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <__fp_round>
    5a28:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__fp_pscA>
    5a2c:	38 f0       	brcs	.+14     	; 0x5a3c <__mulsf3+0x1c>
    5a2e:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__fp_pscB>
    5a32:	20 f0       	brcs	.+8      	; 0x5a3c <__mulsf3+0x1c>
    5a34:	95 23       	and	r25, r21
    5a36:	11 f0       	breq	.+4      	; 0x5a3c <__mulsf3+0x1c>
    5a38:	0c 94 ba 2c 	jmp	0x5974	; 0x5974 <__fp_inf>
    5a3c:	0c 94 c0 2c 	jmp	0x5980	; 0x5980 <__fp_nan>
    5a40:	11 24       	eor	r1, r1
    5a42:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__fp_szero>

00005a46 <__mulsf3x>:
    5a46:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <__fp_split3>
    5a4a:	70 f3       	brcs	.-36     	; 0x5a28 <__mulsf3+0x8>

00005a4c <__mulsf3_pse>:
    5a4c:	95 9f       	mul	r25, r21
    5a4e:	c1 f3       	breq	.-16     	; 0x5a40 <__mulsf3+0x20>
    5a50:	95 0f       	add	r25, r21
    5a52:	50 e0       	ldi	r21, 0x00	; 0
    5a54:	55 1f       	adc	r21, r21
    5a56:	62 9f       	mul	r22, r18
    5a58:	f0 01       	movw	r30, r0
    5a5a:	72 9f       	mul	r23, r18
    5a5c:	bb 27       	eor	r27, r27
    5a5e:	f0 0d       	add	r31, r0
    5a60:	b1 1d       	adc	r27, r1
    5a62:	63 9f       	mul	r22, r19
    5a64:	aa 27       	eor	r26, r26
    5a66:	f0 0d       	add	r31, r0
    5a68:	b1 1d       	adc	r27, r1
    5a6a:	aa 1f       	adc	r26, r26
    5a6c:	64 9f       	mul	r22, r20
    5a6e:	66 27       	eor	r22, r22
    5a70:	b0 0d       	add	r27, r0
    5a72:	a1 1d       	adc	r26, r1
    5a74:	66 1f       	adc	r22, r22
    5a76:	82 9f       	mul	r24, r18
    5a78:	22 27       	eor	r18, r18
    5a7a:	b0 0d       	add	r27, r0
    5a7c:	a1 1d       	adc	r26, r1
    5a7e:	62 1f       	adc	r22, r18
    5a80:	73 9f       	mul	r23, r19
    5a82:	b0 0d       	add	r27, r0
    5a84:	a1 1d       	adc	r26, r1
    5a86:	62 1f       	adc	r22, r18
    5a88:	83 9f       	mul	r24, r19
    5a8a:	a0 0d       	add	r26, r0
    5a8c:	61 1d       	adc	r22, r1
    5a8e:	22 1f       	adc	r18, r18
    5a90:	74 9f       	mul	r23, r20
    5a92:	33 27       	eor	r19, r19
    5a94:	a0 0d       	add	r26, r0
    5a96:	61 1d       	adc	r22, r1
    5a98:	23 1f       	adc	r18, r19
    5a9a:	84 9f       	mul	r24, r20
    5a9c:	60 0d       	add	r22, r0
    5a9e:	21 1d       	adc	r18, r1
    5aa0:	82 2f       	mov	r24, r18
    5aa2:	76 2f       	mov	r23, r22
    5aa4:	6a 2f       	mov	r22, r26
    5aa6:	11 24       	eor	r1, r1
    5aa8:	9f 57       	subi	r25, 0x7F	; 127
    5aaa:	50 40       	sbci	r21, 0x00	; 0
    5aac:	9a f0       	brmi	.+38     	; 0x5ad4 <__mulsf3_pse+0x88>
    5aae:	f1 f0       	breq	.+60     	; 0x5aec <__mulsf3_pse+0xa0>
    5ab0:	88 23       	and	r24, r24
    5ab2:	4a f0       	brmi	.+18     	; 0x5ac6 <__mulsf3_pse+0x7a>
    5ab4:	ee 0f       	add	r30, r30
    5ab6:	ff 1f       	adc	r31, r31
    5ab8:	bb 1f       	adc	r27, r27
    5aba:	66 1f       	adc	r22, r22
    5abc:	77 1f       	adc	r23, r23
    5abe:	88 1f       	adc	r24, r24
    5ac0:	91 50       	subi	r25, 0x01	; 1
    5ac2:	50 40       	sbci	r21, 0x00	; 0
    5ac4:	a9 f7       	brne	.-22     	; 0x5ab0 <__mulsf3_pse+0x64>
    5ac6:	9e 3f       	cpi	r25, 0xFE	; 254
    5ac8:	51 05       	cpc	r21, r1
    5aca:	80 f0       	brcs	.+32     	; 0x5aec <__mulsf3_pse+0xa0>
    5acc:	0c 94 ba 2c 	jmp	0x5974	; 0x5974 <__fp_inf>
    5ad0:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__fp_szero>
    5ad4:	5f 3f       	cpi	r21, 0xFF	; 255
    5ad6:	e4 f3       	brlt	.-8      	; 0x5ad0 <__mulsf3_pse+0x84>
    5ad8:	98 3e       	cpi	r25, 0xE8	; 232
    5ada:	d4 f3       	brlt	.-12     	; 0x5ad0 <__mulsf3_pse+0x84>
    5adc:	86 95       	lsr	r24
    5ade:	77 95       	ror	r23
    5ae0:	67 95       	ror	r22
    5ae2:	b7 95       	ror	r27
    5ae4:	f7 95       	ror	r31
    5ae6:	e7 95       	ror	r30
    5ae8:	9f 5f       	subi	r25, 0xFF	; 255
    5aea:	c1 f7       	brne	.-16     	; 0x5adc <__mulsf3_pse+0x90>
    5aec:	fe 2b       	or	r31, r30
    5aee:	88 0f       	add	r24, r24
    5af0:	91 1d       	adc	r25, r1
    5af2:	96 95       	lsr	r25
    5af4:	87 95       	ror	r24
    5af6:	97 f9       	bld	r25, 7
    5af8:	08 95       	ret

00005afa <vfprintf>:
    5afa:	2f 92       	push	r2
    5afc:	3f 92       	push	r3
    5afe:	4f 92       	push	r4
    5b00:	5f 92       	push	r5
    5b02:	6f 92       	push	r6
    5b04:	7f 92       	push	r7
    5b06:	8f 92       	push	r8
    5b08:	9f 92       	push	r9
    5b0a:	af 92       	push	r10
    5b0c:	bf 92       	push	r11
    5b0e:	cf 92       	push	r12
    5b10:	df 92       	push	r13
    5b12:	ef 92       	push	r14
    5b14:	ff 92       	push	r15
    5b16:	0f 93       	push	r16
    5b18:	1f 93       	push	r17
    5b1a:	cf 93       	push	r28
    5b1c:	df 93       	push	r29
    5b1e:	cd b7       	in	r28, 0x3d	; 61
    5b20:	de b7       	in	r29, 0x3e	; 62
    5b22:	60 97       	sbiw	r28, 0x10	; 16
    5b24:	cd bf       	out	0x3d, r28	; 61
    5b26:	de bf       	out	0x3e, r29	; 62
    5b28:	7c 01       	movw	r14, r24
    5b2a:	1b 01       	movw	r2, r22
    5b2c:	6a 01       	movw	r12, r20
    5b2e:	fc 01       	movw	r30, r24
    5b30:	16 82       	std	Z+6, r1	; 0x06
    5b32:	17 82       	std	Z+7, r1	; 0x07
    5b34:	83 81       	ldd	r24, Z+3	; 0x03
    5b36:	81 ff       	sbrs	r24, 1
    5b38:	44 c3       	rjmp	.+1672   	; 0x61c2 <vfprintf+0x6c8>
    5b3a:	9e 01       	movw	r18, r28
    5b3c:	2f 5f       	subi	r18, 0xFF	; 255
    5b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b40:	39 01       	movw	r6, r18
    5b42:	f7 01       	movw	r30, r14
    5b44:	93 81       	ldd	r25, Z+3	; 0x03
    5b46:	f1 01       	movw	r30, r2
    5b48:	93 fd       	sbrc	r25, 3
    5b4a:	85 91       	lpm	r24, Z+
    5b4c:	93 ff       	sbrs	r25, 3
    5b4e:	81 91       	ld	r24, Z+
    5b50:	1f 01       	movw	r2, r30
    5b52:	88 23       	and	r24, r24
    5b54:	09 f4       	brne	.+2      	; 0x5b58 <vfprintf+0x5e>
    5b56:	31 c3       	rjmp	.+1634   	; 0x61ba <vfprintf+0x6c0>
    5b58:	85 32       	cpi	r24, 0x25	; 37
    5b5a:	39 f4       	brne	.+14     	; 0x5b6a <vfprintf+0x70>
    5b5c:	93 fd       	sbrc	r25, 3
    5b5e:	85 91       	lpm	r24, Z+
    5b60:	93 ff       	sbrs	r25, 3
    5b62:	81 91       	ld	r24, Z+
    5b64:	1f 01       	movw	r2, r30
    5b66:	85 32       	cpi	r24, 0x25	; 37
    5b68:	39 f4       	brne	.+14     	; 0x5b78 <vfprintf+0x7e>
    5b6a:	b7 01       	movw	r22, r14
    5b6c:	90 e0       	ldi	r25, 0x00	; 0
    5b6e:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5b72:	56 01       	movw	r10, r12
    5b74:	65 01       	movw	r12, r10
    5b76:	e5 cf       	rjmp	.-54     	; 0x5b42 <vfprintf+0x48>
    5b78:	10 e0       	ldi	r17, 0x00	; 0
    5b7a:	51 2c       	mov	r5, r1
    5b7c:	91 2c       	mov	r9, r1
    5b7e:	ff e1       	ldi	r31, 0x1F	; 31
    5b80:	f9 15       	cp	r31, r9
    5b82:	d8 f0       	brcs	.+54     	; 0x5bba <vfprintf+0xc0>
    5b84:	8b 32       	cpi	r24, 0x2B	; 43
    5b86:	79 f0       	breq	.+30     	; 0x5ba6 <vfprintf+0xac>
    5b88:	38 f4       	brcc	.+14     	; 0x5b98 <vfprintf+0x9e>
    5b8a:	80 32       	cpi	r24, 0x20	; 32
    5b8c:	79 f0       	breq	.+30     	; 0x5bac <vfprintf+0xb2>
    5b8e:	83 32       	cpi	r24, 0x23	; 35
    5b90:	a1 f4       	brne	.+40     	; 0x5bba <vfprintf+0xc0>
    5b92:	f9 2d       	mov	r31, r9
    5b94:	f0 61       	ori	r31, 0x10	; 16
    5b96:	2e c0       	rjmp	.+92     	; 0x5bf4 <vfprintf+0xfa>
    5b98:	8d 32       	cpi	r24, 0x2D	; 45
    5b9a:	61 f0       	breq	.+24     	; 0x5bb4 <vfprintf+0xba>
    5b9c:	80 33       	cpi	r24, 0x30	; 48
    5b9e:	69 f4       	brne	.+26     	; 0x5bba <vfprintf+0xc0>
    5ba0:	29 2d       	mov	r18, r9
    5ba2:	21 60       	ori	r18, 0x01	; 1
    5ba4:	2d c0       	rjmp	.+90     	; 0x5c00 <vfprintf+0x106>
    5ba6:	39 2d       	mov	r19, r9
    5ba8:	32 60       	ori	r19, 0x02	; 2
    5baa:	93 2e       	mov	r9, r19
    5bac:	89 2d       	mov	r24, r9
    5bae:	84 60       	ori	r24, 0x04	; 4
    5bb0:	98 2e       	mov	r9, r24
    5bb2:	2a c0       	rjmp	.+84     	; 0x5c08 <vfprintf+0x10e>
    5bb4:	e9 2d       	mov	r30, r9
    5bb6:	e8 60       	ori	r30, 0x08	; 8
    5bb8:	15 c0       	rjmp	.+42     	; 0x5be4 <vfprintf+0xea>
    5bba:	97 fc       	sbrc	r9, 7
    5bbc:	2d c0       	rjmp	.+90     	; 0x5c18 <vfprintf+0x11e>
    5bbe:	20 ed       	ldi	r18, 0xD0	; 208
    5bc0:	28 0f       	add	r18, r24
    5bc2:	2a 30       	cpi	r18, 0x0A	; 10
    5bc4:	88 f4       	brcc	.+34     	; 0x5be8 <vfprintf+0xee>
    5bc6:	96 fe       	sbrs	r9, 6
    5bc8:	06 c0       	rjmp	.+12     	; 0x5bd6 <vfprintf+0xdc>
    5bca:	3a e0       	ldi	r19, 0x0A	; 10
    5bcc:	13 9f       	mul	r17, r19
    5bce:	20 0d       	add	r18, r0
    5bd0:	11 24       	eor	r1, r1
    5bd2:	12 2f       	mov	r17, r18
    5bd4:	19 c0       	rjmp	.+50     	; 0x5c08 <vfprintf+0x10e>
    5bd6:	8a e0       	ldi	r24, 0x0A	; 10
    5bd8:	58 9e       	mul	r5, r24
    5bda:	20 0d       	add	r18, r0
    5bdc:	11 24       	eor	r1, r1
    5bde:	52 2e       	mov	r5, r18
    5be0:	e9 2d       	mov	r30, r9
    5be2:	e0 62       	ori	r30, 0x20	; 32
    5be4:	9e 2e       	mov	r9, r30
    5be6:	10 c0       	rjmp	.+32     	; 0x5c08 <vfprintf+0x10e>
    5be8:	8e 32       	cpi	r24, 0x2E	; 46
    5bea:	31 f4       	brne	.+12     	; 0x5bf8 <vfprintf+0xfe>
    5bec:	96 fc       	sbrc	r9, 6
    5bee:	e5 c2       	rjmp	.+1482   	; 0x61ba <vfprintf+0x6c0>
    5bf0:	f9 2d       	mov	r31, r9
    5bf2:	f0 64       	ori	r31, 0x40	; 64
    5bf4:	9f 2e       	mov	r9, r31
    5bf6:	08 c0       	rjmp	.+16     	; 0x5c08 <vfprintf+0x10e>
    5bf8:	8c 36       	cpi	r24, 0x6C	; 108
    5bfa:	21 f4       	brne	.+8      	; 0x5c04 <vfprintf+0x10a>
    5bfc:	29 2d       	mov	r18, r9
    5bfe:	20 68       	ori	r18, 0x80	; 128
    5c00:	92 2e       	mov	r9, r18
    5c02:	02 c0       	rjmp	.+4      	; 0x5c08 <vfprintf+0x10e>
    5c04:	88 36       	cpi	r24, 0x68	; 104
    5c06:	41 f4       	brne	.+16     	; 0x5c18 <vfprintf+0x11e>
    5c08:	f1 01       	movw	r30, r2
    5c0a:	93 fd       	sbrc	r25, 3
    5c0c:	85 91       	lpm	r24, Z+
    5c0e:	93 ff       	sbrs	r25, 3
    5c10:	81 91       	ld	r24, Z+
    5c12:	1f 01       	movw	r2, r30
    5c14:	81 11       	cpse	r24, r1
    5c16:	b3 cf       	rjmp	.-154    	; 0x5b7e <vfprintf+0x84>
    5c18:	9b eb       	ldi	r25, 0xBB	; 187
    5c1a:	98 0f       	add	r25, r24
    5c1c:	93 30       	cpi	r25, 0x03	; 3
    5c1e:	20 f4       	brcc	.+8      	; 0x5c28 <vfprintf+0x12e>
    5c20:	99 2d       	mov	r25, r9
    5c22:	90 61       	ori	r25, 0x10	; 16
    5c24:	80 5e       	subi	r24, 0xE0	; 224
    5c26:	07 c0       	rjmp	.+14     	; 0x5c36 <vfprintf+0x13c>
    5c28:	9b e9       	ldi	r25, 0x9B	; 155
    5c2a:	98 0f       	add	r25, r24
    5c2c:	93 30       	cpi	r25, 0x03	; 3
    5c2e:	08 f0       	brcs	.+2      	; 0x5c32 <vfprintf+0x138>
    5c30:	66 c1       	rjmp	.+716    	; 0x5efe <vfprintf+0x404>
    5c32:	99 2d       	mov	r25, r9
    5c34:	9f 7e       	andi	r25, 0xEF	; 239
    5c36:	96 ff       	sbrs	r25, 6
    5c38:	16 e0       	ldi	r17, 0x06	; 6
    5c3a:	9f 73       	andi	r25, 0x3F	; 63
    5c3c:	99 2e       	mov	r9, r25
    5c3e:	85 36       	cpi	r24, 0x65	; 101
    5c40:	19 f4       	brne	.+6      	; 0x5c48 <vfprintf+0x14e>
    5c42:	90 64       	ori	r25, 0x40	; 64
    5c44:	99 2e       	mov	r9, r25
    5c46:	08 c0       	rjmp	.+16     	; 0x5c58 <vfprintf+0x15e>
    5c48:	86 36       	cpi	r24, 0x66	; 102
    5c4a:	21 f4       	brne	.+8      	; 0x5c54 <vfprintf+0x15a>
    5c4c:	39 2f       	mov	r19, r25
    5c4e:	30 68       	ori	r19, 0x80	; 128
    5c50:	93 2e       	mov	r9, r19
    5c52:	02 c0       	rjmp	.+4      	; 0x5c58 <vfprintf+0x15e>
    5c54:	11 11       	cpse	r17, r1
    5c56:	11 50       	subi	r17, 0x01	; 1
    5c58:	97 fe       	sbrs	r9, 7
    5c5a:	07 c0       	rjmp	.+14     	; 0x5c6a <vfprintf+0x170>
    5c5c:	1c 33       	cpi	r17, 0x3C	; 60
    5c5e:	50 f4       	brcc	.+20     	; 0x5c74 <vfprintf+0x17a>
    5c60:	44 24       	eor	r4, r4
    5c62:	43 94       	inc	r4
    5c64:	41 0e       	add	r4, r17
    5c66:	27 e0       	ldi	r18, 0x07	; 7
    5c68:	0b c0       	rjmp	.+22     	; 0x5c80 <vfprintf+0x186>
    5c6a:	18 30       	cpi	r17, 0x08	; 8
    5c6c:	38 f0       	brcs	.+14     	; 0x5c7c <vfprintf+0x182>
    5c6e:	27 e0       	ldi	r18, 0x07	; 7
    5c70:	17 e0       	ldi	r17, 0x07	; 7
    5c72:	05 c0       	rjmp	.+10     	; 0x5c7e <vfprintf+0x184>
    5c74:	27 e0       	ldi	r18, 0x07	; 7
    5c76:	9c e3       	ldi	r25, 0x3C	; 60
    5c78:	49 2e       	mov	r4, r25
    5c7a:	02 c0       	rjmp	.+4      	; 0x5c80 <vfprintf+0x186>
    5c7c:	21 2f       	mov	r18, r17
    5c7e:	41 2c       	mov	r4, r1
    5c80:	56 01       	movw	r10, r12
    5c82:	84 e0       	ldi	r24, 0x04	; 4
    5c84:	a8 0e       	add	r10, r24
    5c86:	b1 1c       	adc	r11, r1
    5c88:	f6 01       	movw	r30, r12
    5c8a:	60 81       	ld	r22, Z
    5c8c:	71 81       	ldd	r23, Z+1	; 0x01
    5c8e:	82 81       	ldd	r24, Z+2	; 0x02
    5c90:	93 81       	ldd	r25, Z+3	; 0x03
    5c92:	04 2d       	mov	r16, r4
    5c94:	a3 01       	movw	r20, r6
    5c96:	0e 94 25 31 	call	0x624a	; 0x624a <__ftoa_engine>
    5c9a:	6c 01       	movw	r12, r24
    5c9c:	f9 81       	ldd	r31, Y+1	; 0x01
    5c9e:	fc 87       	std	Y+12, r31	; 0x0c
    5ca0:	f0 ff       	sbrs	r31, 0
    5ca2:	02 c0       	rjmp	.+4      	; 0x5ca8 <vfprintf+0x1ae>
    5ca4:	f3 ff       	sbrs	r31, 3
    5ca6:	06 c0       	rjmp	.+12     	; 0x5cb4 <vfprintf+0x1ba>
    5ca8:	91 fc       	sbrc	r9, 1
    5caa:	06 c0       	rjmp	.+12     	; 0x5cb8 <vfprintf+0x1be>
    5cac:	92 fe       	sbrs	r9, 2
    5cae:	06 c0       	rjmp	.+12     	; 0x5cbc <vfprintf+0x1c2>
    5cb0:	00 e2       	ldi	r16, 0x20	; 32
    5cb2:	05 c0       	rjmp	.+10     	; 0x5cbe <vfprintf+0x1c4>
    5cb4:	0d e2       	ldi	r16, 0x2D	; 45
    5cb6:	03 c0       	rjmp	.+6      	; 0x5cbe <vfprintf+0x1c4>
    5cb8:	0b e2       	ldi	r16, 0x2B	; 43
    5cba:	01 c0       	rjmp	.+2      	; 0x5cbe <vfprintf+0x1c4>
    5cbc:	00 e0       	ldi	r16, 0x00	; 0
    5cbe:	8c 85       	ldd	r24, Y+12	; 0x0c
    5cc0:	8c 70       	andi	r24, 0x0C	; 12
    5cc2:	19 f0       	breq	.+6      	; 0x5cca <vfprintf+0x1d0>
    5cc4:	01 11       	cpse	r16, r1
    5cc6:	5a c2       	rjmp	.+1204   	; 0x617c <vfprintf+0x682>
    5cc8:	9b c2       	rjmp	.+1334   	; 0x6200 <vfprintf+0x706>
    5cca:	97 fe       	sbrs	r9, 7
    5ccc:	10 c0       	rjmp	.+32     	; 0x5cee <vfprintf+0x1f4>
    5cce:	4c 0c       	add	r4, r12
    5cd0:	fc 85       	ldd	r31, Y+12	; 0x0c
    5cd2:	f4 ff       	sbrs	r31, 4
    5cd4:	04 c0       	rjmp	.+8      	; 0x5cde <vfprintf+0x1e4>
    5cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    5cd8:	81 33       	cpi	r24, 0x31	; 49
    5cda:	09 f4       	brne	.+2      	; 0x5cde <vfprintf+0x1e4>
    5cdc:	4a 94       	dec	r4
    5cde:	14 14       	cp	r1, r4
    5ce0:	74 f5       	brge	.+92     	; 0x5d3e <vfprintf+0x244>
    5ce2:	28 e0       	ldi	r18, 0x08	; 8
    5ce4:	24 15       	cp	r18, r4
    5ce6:	78 f5       	brcc	.+94     	; 0x5d46 <vfprintf+0x24c>
    5ce8:	88 e0       	ldi	r24, 0x08	; 8
    5cea:	48 2e       	mov	r4, r24
    5cec:	2c c0       	rjmp	.+88     	; 0x5d46 <vfprintf+0x24c>
    5cee:	96 fc       	sbrc	r9, 6
    5cf0:	2a c0       	rjmp	.+84     	; 0x5d46 <vfprintf+0x24c>
    5cf2:	81 2f       	mov	r24, r17
    5cf4:	90 e0       	ldi	r25, 0x00	; 0
    5cf6:	8c 15       	cp	r24, r12
    5cf8:	9d 05       	cpc	r25, r13
    5cfa:	9c f0       	brlt	.+38     	; 0x5d22 <vfprintf+0x228>
    5cfc:	3c ef       	ldi	r19, 0xFC	; 252
    5cfe:	c3 16       	cp	r12, r19
    5d00:	3f ef       	ldi	r19, 0xFF	; 255
    5d02:	d3 06       	cpc	r13, r19
    5d04:	74 f0       	brlt	.+28     	; 0x5d22 <vfprintf+0x228>
    5d06:	89 2d       	mov	r24, r9
    5d08:	80 68       	ori	r24, 0x80	; 128
    5d0a:	98 2e       	mov	r9, r24
    5d0c:	0a c0       	rjmp	.+20     	; 0x5d22 <vfprintf+0x228>
    5d0e:	e2 e0       	ldi	r30, 0x02	; 2
    5d10:	f0 e0       	ldi	r31, 0x00	; 0
    5d12:	ec 0f       	add	r30, r28
    5d14:	fd 1f       	adc	r31, r29
    5d16:	e1 0f       	add	r30, r17
    5d18:	f1 1d       	adc	r31, r1
    5d1a:	80 81       	ld	r24, Z
    5d1c:	80 33       	cpi	r24, 0x30	; 48
    5d1e:	19 f4       	brne	.+6      	; 0x5d26 <vfprintf+0x22c>
    5d20:	11 50       	subi	r17, 0x01	; 1
    5d22:	11 11       	cpse	r17, r1
    5d24:	f4 cf       	rjmp	.-24     	; 0x5d0e <vfprintf+0x214>
    5d26:	97 fe       	sbrs	r9, 7
    5d28:	0e c0       	rjmp	.+28     	; 0x5d46 <vfprintf+0x24c>
    5d2a:	44 24       	eor	r4, r4
    5d2c:	43 94       	inc	r4
    5d2e:	41 0e       	add	r4, r17
    5d30:	81 2f       	mov	r24, r17
    5d32:	90 e0       	ldi	r25, 0x00	; 0
    5d34:	c8 16       	cp	r12, r24
    5d36:	d9 06       	cpc	r13, r25
    5d38:	2c f4       	brge	.+10     	; 0x5d44 <vfprintf+0x24a>
    5d3a:	1c 19       	sub	r17, r12
    5d3c:	04 c0       	rjmp	.+8      	; 0x5d46 <vfprintf+0x24c>
    5d3e:	44 24       	eor	r4, r4
    5d40:	43 94       	inc	r4
    5d42:	01 c0       	rjmp	.+2      	; 0x5d46 <vfprintf+0x24c>
    5d44:	10 e0       	ldi	r17, 0x00	; 0
    5d46:	97 fe       	sbrs	r9, 7
    5d48:	06 c0       	rjmp	.+12     	; 0x5d56 <vfprintf+0x25c>
    5d4a:	1c 14       	cp	r1, r12
    5d4c:	1d 04       	cpc	r1, r13
    5d4e:	34 f4       	brge	.+12     	; 0x5d5c <vfprintf+0x262>
    5d50:	c6 01       	movw	r24, r12
    5d52:	01 96       	adiw	r24, 0x01	; 1
    5d54:	05 c0       	rjmp	.+10     	; 0x5d60 <vfprintf+0x266>
    5d56:	85 e0       	ldi	r24, 0x05	; 5
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	02 c0       	rjmp	.+4      	; 0x5d60 <vfprintf+0x266>
    5d5c:	81 e0       	ldi	r24, 0x01	; 1
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	01 11       	cpse	r16, r1
    5d62:	01 96       	adiw	r24, 0x01	; 1
    5d64:	11 23       	and	r17, r17
    5d66:	31 f0       	breq	.+12     	; 0x5d74 <vfprintf+0x27a>
    5d68:	21 2f       	mov	r18, r17
    5d6a:	30 e0       	ldi	r19, 0x00	; 0
    5d6c:	2f 5f       	subi	r18, 0xFF	; 255
    5d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d70:	82 0f       	add	r24, r18
    5d72:	93 1f       	adc	r25, r19
    5d74:	25 2d       	mov	r18, r5
    5d76:	30 e0       	ldi	r19, 0x00	; 0
    5d78:	82 17       	cp	r24, r18
    5d7a:	93 07       	cpc	r25, r19
    5d7c:	14 f4       	brge	.+4      	; 0x5d82 <vfprintf+0x288>
    5d7e:	58 1a       	sub	r5, r24
    5d80:	01 c0       	rjmp	.+2      	; 0x5d84 <vfprintf+0x28a>
    5d82:	51 2c       	mov	r5, r1
    5d84:	89 2d       	mov	r24, r9
    5d86:	89 70       	andi	r24, 0x09	; 9
    5d88:	49 f4       	brne	.+18     	; 0x5d9c <vfprintf+0x2a2>
    5d8a:	55 20       	and	r5, r5
    5d8c:	39 f0       	breq	.+14     	; 0x5d9c <vfprintf+0x2a2>
    5d8e:	b7 01       	movw	r22, r14
    5d90:	80 e2       	ldi	r24, 0x20	; 32
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5d98:	5a 94       	dec	r5
    5d9a:	f7 cf       	rjmp	.-18     	; 0x5d8a <vfprintf+0x290>
    5d9c:	00 23       	and	r16, r16
    5d9e:	29 f0       	breq	.+10     	; 0x5daa <vfprintf+0x2b0>
    5da0:	b7 01       	movw	r22, r14
    5da2:	80 2f       	mov	r24, r16
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5daa:	93 fc       	sbrc	r9, 3
    5dac:	09 c0       	rjmp	.+18     	; 0x5dc0 <vfprintf+0x2c6>
    5dae:	55 20       	and	r5, r5
    5db0:	39 f0       	breq	.+14     	; 0x5dc0 <vfprintf+0x2c6>
    5db2:	b7 01       	movw	r22, r14
    5db4:	80 e3       	ldi	r24, 0x30	; 48
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5dbc:	5a 94       	dec	r5
    5dbe:	f7 cf       	rjmp	.-18     	; 0x5dae <vfprintf+0x2b4>
    5dc0:	97 fe       	sbrs	r9, 7
    5dc2:	4c c0       	rjmp	.+152    	; 0x5e5c <vfprintf+0x362>
    5dc4:	46 01       	movw	r8, r12
    5dc6:	d7 fe       	sbrs	r13, 7
    5dc8:	02 c0       	rjmp	.+4      	; 0x5dce <vfprintf+0x2d4>
    5dca:	81 2c       	mov	r8, r1
    5dcc:	91 2c       	mov	r9, r1
    5dce:	c6 01       	movw	r24, r12
    5dd0:	88 19       	sub	r24, r8
    5dd2:	99 09       	sbc	r25, r9
    5dd4:	f3 01       	movw	r30, r6
    5dd6:	e8 0f       	add	r30, r24
    5dd8:	f9 1f       	adc	r31, r25
    5dda:	ed 87       	std	Y+13, r30	; 0x0d
    5ddc:	fe 87       	std	Y+14, r31	; 0x0e
    5dde:	96 01       	movw	r18, r12
    5de0:	24 19       	sub	r18, r4
    5de2:	31 09       	sbc	r19, r1
    5de4:	2f 87       	std	Y+15, r18	; 0x0f
    5de6:	38 8b       	std	Y+16, r19	; 0x10
    5de8:	01 2f       	mov	r16, r17
    5dea:	10 e0       	ldi	r17, 0x00	; 0
    5dec:	11 95       	neg	r17
    5dee:	01 95       	neg	r16
    5df0:	11 09       	sbc	r17, r1
    5df2:	3f ef       	ldi	r19, 0xFF	; 255
    5df4:	83 16       	cp	r8, r19
    5df6:	93 06       	cpc	r9, r19
    5df8:	29 f4       	brne	.+10     	; 0x5e04 <vfprintf+0x30a>
    5dfa:	b7 01       	movw	r22, r14
    5dfc:	8e e2       	ldi	r24, 0x2E	; 46
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5e04:	c8 14       	cp	r12, r8
    5e06:	d9 04       	cpc	r13, r9
    5e08:	4c f0       	brlt	.+18     	; 0x5e1c <vfprintf+0x322>
    5e0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e0c:	98 89       	ldd	r25, Y+16	; 0x10
    5e0e:	88 15       	cp	r24, r8
    5e10:	99 05       	cpc	r25, r9
    5e12:	24 f4       	brge	.+8      	; 0x5e1c <vfprintf+0x322>
    5e14:	ed 85       	ldd	r30, Y+13	; 0x0d
    5e16:	fe 85       	ldd	r31, Y+14	; 0x0e
    5e18:	81 81       	ldd	r24, Z+1	; 0x01
    5e1a:	01 c0       	rjmp	.+2      	; 0x5e1e <vfprintf+0x324>
    5e1c:	80 e3       	ldi	r24, 0x30	; 48
    5e1e:	f1 e0       	ldi	r31, 0x01	; 1
    5e20:	8f 1a       	sub	r8, r31
    5e22:	91 08       	sbc	r9, r1
    5e24:	2d 85       	ldd	r18, Y+13	; 0x0d
    5e26:	3e 85       	ldd	r19, Y+14	; 0x0e
    5e28:	2f 5f       	subi	r18, 0xFF	; 255
    5e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e2c:	2d 87       	std	Y+13, r18	; 0x0d
    5e2e:	3e 87       	std	Y+14, r19	; 0x0e
    5e30:	80 16       	cp	r8, r16
    5e32:	91 06       	cpc	r9, r17
    5e34:	2c f0       	brlt	.+10     	; 0x5e40 <vfprintf+0x346>
    5e36:	b7 01       	movw	r22, r14
    5e38:	90 e0       	ldi	r25, 0x00	; 0
    5e3a:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5e3e:	d9 cf       	rjmp	.-78     	; 0x5df2 <vfprintf+0x2f8>
    5e40:	c8 14       	cp	r12, r8
    5e42:	d9 04       	cpc	r13, r9
    5e44:	41 f4       	brne	.+16     	; 0x5e56 <vfprintf+0x35c>
    5e46:	9a 81       	ldd	r25, Y+2	; 0x02
    5e48:	96 33       	cpi	r25, 0x36	; 54
    5e4a:	20 f4       	brcc	.+8      	; 0x5e54 <vfprintf+0x35a>
    5e4c:	95 33       	cpi	r25, 0x35	; 53
    5e4e:	19 f4       	brne	.+6      	; 0x5e56 <vfprintf+0x35c>
    5e50:	3c 85       	ldd	r19, Y+12	; 0x0c
    5e52:	34 ff       	sbrs	r19, 4
    5e54:	81 e3       	ldi	r24, 0x31	; 49
    5e56:	b7 01       	movw	r22, r14
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	4e c0       	rjmp	.+156    	; 0x5ef8 <vfprintf+0x3fe>
    5e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e5e:	81 33       	cpi	r24, 0x31	; 49
    5e60:	19 f0       	breq	.+6      	; 0x5e68 <vfprintf+0x36e>
    5e62:	9c 85       	ldd	r25, Y+12	; 0x0c
    5e64:	9f 7e       	andi	r25, 0xEF	; 239
    5e66:	9c 87       	std	Y+12, r25	; 0x0c
    5e68:	b7 01       	movw	r22, r14
    5e6a:	90 e0       	ldi	r25, 0x00	; 0
    5e6c:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5e70:	11 11       	cpse	r17, r1
    5e72:	05 c0       	rjmp	.+10     	; 0x5e7e <vfprintf+0x384>
    5e74:	94 fc       	sbrc	r9, 4
    5e76:	18 c0       	rjmp	.+48     	; 0x5ea8 <vfprintf+0x3ae>
    5e78:	85 e6       	ldi	r24, 0x65	; 101
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	17 c0       	rjmp	.+46     	; 0x5eac <vfprintf+0x3b2>
    5e7e:	b7 01       	movw	r22, r14
    5e80:	8e e2       	ldi	r24, 0x2E	; 46
    5e82:	90 e0       	ldi	r25, 0x00	; 0
    5e84:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5e88:	1e 5f       	subi	r17, 0xFE	; 254
    5e8a:	82 e0       	ldi	r24, 0x02	; 2
    5e8c:	01 e0       	ldi	r16, 0x01	; 1
    5e8e:	08 0f       	add	r16, r24
    5e90:	f3 01       	movw	r30, r6
    5e92:	e8 0f       	add	r30, r24
    5e94:	f1 1d       	adc	r31, r1
    5e96:	80 81       	ld	r24, Z
    5e98:	b7 01       	movw	r22, r14
    5e9a:	90 e0       	ldi	r25, 0x00	; 0
    5e9c:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5ea0:	80 2f       	mov	r24, r16
    5ea2:	01 13       	cpse	r16, r17
    5ea4:	f3 cf       	rjmp	.-26     	; 0x5e8c <vfprintf+0x392>
    5ea6:	e6 cf       	rjmp	.-52     	; 0x5e74 <vfprintf+0x37a>
    5ea8:	85 e4       	ldi	r24, 0x45	; 69
    5eaa:	90 e0       	ldi	r25, 0x00	; 0
    5eac:	b7 01       	movw	r22, r14
    5eae:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5eb2:	d7 fc       	sbrc	r13, 7
    5eb4:	06 c0       	rjmp	.+12     	; 0x5ec2 <vfprintf+0x3c8>
    5eb6:	c1 14       	cp	r12, r1
    5eb8:	d1 04       	cpc	r13, r1
    5eba:	41 f4       	brne	.+16     	; 0x5ecc <vfprintf+0x3d2>
    5ebc:	ec 85       	ldd	r30, Y+12	; 0x0c
    5ebe:	e4 ff       	sbrs	r30, 4
    5ec0:	05 c0       	rjmp	.+10     	; 0x5ecc <vfprintf+0x3d2>
    5ec2:	d1 94       	neg	r13
    5ec4:	c1 94       	neg	r12
    5ec6:	d1 08       	sbc	r13, r1
    5ec8:	8d e2       	ldi	r24, 0x2D	; 45
    5eca:	01 c0       	rjmp	.+2      	; 0x5ece <vfprintf+0x3d4>
    5ecc:	8b e2       	ldi	r24, 0x2B	; 43
    5ece:	b7 01       	movw	r22, r14
    5ed0:	90 e0       	ldi	r25, 0x00	; 0
    5ed2:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5ed6:	80 e3       	ldi	r24, 0x30	; 48
    5ed8:	2a e0       	ldi	r18, 0x0A	; 10
    5eda:	c2 16       	cp	r12, r18
    5edc:	d1 04       	cpc	r13, r1
    5ede:	2c f0       	brlt	.+10     	; 0x5eea <vfprintf+0x3f0>
    5ee0:	8f 5f       	subi	r24, 0xFF	; 255
    5ee2:	fa e0       	ldi	r31, 0x0A	; 10
    5ee4:	cf 1a       	sub	r12, r31
    5ee6:	d1 08       	sbc	r13, r1
    5ee8:	f7 cf       	rjmp	.-18     	; 0x5ed8 <vfprintf+0x3de>
    5eea:	b7 01       	movw	r22, r14
    5eec:	90 e0       	ldi	r25, 0x00	; 0
    5eee:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5ef2:	b7 01       	movw	r22, r14
    5ef4:	c6 01       	movw	r24, r12
    5ef6:	c0 96       	adiw	r24, 0x30	; 48
    5ef8:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5efc:	54 c1       	rjmp	.+680    	; 0x61a6 <vfprintf+0x6ac>
    5efe:	83 36       	cpi	r24, 0x63	; 99
    5f00:	31 f0       	breq	.+12     	; 0x5f0e <vfprintf+0x414>
    5f02:	83 37       	cpi	r24, 0x73	; 115
    5f04:	79 f0       	breq	.+30     	; 0x5f24 <vfprintf+0x42a>
    5f06:	83 35       	cpi	r24, 0x53	; 83
    5f08:	09 f0       	breq	.+2      	; 0x5f0c <vfprintf+0x412>
    5f0a:	56 c0       	rjmp	.+172    	; 0x5fb8 <vfprintf+0x4be>
    5f0c:	20 c0       	rjmp	.+64     	; 0x5f4e <vfprintf+0x454>
    5f0e:	56 01       	movw	r10, r12
    5f10:	32 e0       	ldi	r19, 0x02	; 2
    5f12:	a3 0e       	add	r10, r19
    5f14:	b1 1c       	adc	r11, r1
    5f16:	f6 01       	movw	r30, r12
    5f18:	80 81       	ld	r24, Z
    5f1a:	89 83       	std	Y+1, r24	; 0x01
    5f1c:	01 e0       	ldi	r16, 0x01	; 1
    5f1e:	10 e0       	ldi	r17, 0x00	; 0
    5f20:	63 01       	movw	r12, r6
    5f22:	12 c0       	rjmp	.+36     	; 0x5f48 <vfprintf+0x44e>
    5f24:	56 01       	movw	r10, r12
    5f26:	f2 e0       	ldi	r31, 0x02	; 2
    5f28:	af 0e       	add	r10, r31
    5f2a:	b1 1c       	adc	r11, r1
    5f2c:	f6 01       	movw	r30, r12
    5f2e:	c0 80       	ld	r12, Z
    5f30:	d1 80       	ldd	r13, Z+1	; 0x01
    5f32:	96 fe       	sbrs	r9, 6
    5f34:	03 c0       	rjmp	.+6      	; 0x5f3c <vfprintf+0x442>
    5f36:	61 2f       	mov	r22, r17
    5f38:	70 e0       	ldi	r23, 0x00	; 0
    5f3a:	02 c0       	rjmp	.+4      	; 0x5f40 <vfprintf+0x446>
    5f3c:	6f ef       	ldi	r22, 0xFF	; 255
    5f3e:	7f ef       	ldi	r23, 0xFF	; 255
    5f40:	c6 01       	movw	r24, r12
    5f42:	0e 94 21 32 	call	0x6442	; 0x6442 <strnlen>
    5f46:	8c 01       	movw	r16, r24
    5f48:	f9 2d       	mov	r31, r9
    5f4a:	ff 77       	andi	r31, 0x7F	; 127
    5f4c:	14 c0       	rjmp	.+40     	; 0x5f76 <vfprintf+0x47c>
    5f4e:	56 01       	movw	r10, r12
    5f50:	22 e0       	ldi	r18, 0x02	; 2
    5f52:	a2 0e       	add	r10, r18
    5f54:	b1 1c       	adc	r11, r1
    5f56:	f6 01       	movw	r30, r12
    5f58:	c0 80       	ld	r12, Z
    5f5a:	d1 80       	ldd	r13, Z+1	; 0x01
    5f5c:	96 fe       	sbrs	r9, 6
    5f5e:	03 c0       	rjmp	.+6      	; 0x5f66 <vfprintf+0x46c>
    5f60:	61 2f       	mov	r22, r17
    5f62:	70 e0       	ldi	r23, 0x00	; 0
    5f64:	02 c0       	rjmp	.+4      	; 0x5f6a <vfprintf+0x470>
    5f66:	6f ef       	ldi	r22, 0xFF	; 255
    5f68:	7f ef       	ldi	r23, 0xFF	; 255
    5f6a:	c6 01       	movw	r24, r12
    5f6c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <strnlen_P>
    5f70:	8c 01       	movw	r16, r24
    5f72:	f9 2d       	mov	r31, r9
    5f74:	f0 68       	ori	r31, 0x80	; 128
    5f76:	9f 2e       	mov	r9, r31
    5f78:	f3 fd       	sbrc	r31, 3
    5f7a:	1a c0       	rjmp	.+52     	; 0x5fb0 <vfprintf+0x4b6>
    5f7c:	85 2d       	mov	r24, r5
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	08 17       	cp	r16, r24
    5f82:	19 07       	cpc	r17, r25
    5f84:	a8 f4       	brcc	.+42     	; 0x5fb0 <vfprintf+0x4b6>
    5f86:	b7 01       	movw	r22, r14
    5f88:	80 e2       	ldi	r24, 0x20	; 32
    5f8a:	90 e0       	ldi	r25, 0x00	; 0
    5f8c:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5f90:	5a 94       	dec	r5
    5f92:	f4 cf       	rjmp	.-24     	; 0x5f7c <vfprintf+0x482>
    5f94:	f6 01       	movw	r30, r12
    5f96:	97 fc       	sbrc	r9, 7
    5f98:	85 91       	lpm	r24, Z+
    5f9a:	97 fe       	sbrs	r9, 7
    5f9c:	81 91       	ld	r24, Z+
    5f9e:	6f 01       	movw	r12, r30
    5fa0:	b7 01       	movw	r22, r14
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    5fa8:	51 10       	cpse	r5, r1
    5faa:	5a 94       	dec	r5
    5fac:	01 50       	subi	r16, 0x01	; 1
    5fae:	11 09       	sbc	r17, r1
    5fb0:	01 15       	cp	r16, r1
    5fb2:	11 05       	cpc	r17, r1
    5fb4:	79 f7       	brne	.-34     	; 0x5f94 <vfprintf+0x49a>
    5fb6:	f7 c0       	rjmp	.+494    	; 0x61a6 <vfprintf+0x6ac>
    5fb8:	84 36       	cpi	r24, 0x64	; 100
    5fba:	11 f0       	breq	.+4      	; 0x5fc0 <vfprintf+0x4c6>
    5fbc:	89 36       	cpi	r24, 0x69	; 105
    5fbe:	61 f5       	brne	.+88     	; 0x6018 <vfprintf+0x51e>
    5fc0:	56 01       	movw	r10, r12
    5fc2:	97 fe       	sbrs	r9, 7
    5fc4:	09 c0       	rjmp	.+18     	; 0x5fd8 <vfprintf+0x4de>
    5fc6:	24 e0       	ldi	r18, 0x04	; 4
    5fc8:	a2 0e       	add	r10, r18
    5fca:	b1 1c       	adc	r11, r1
    5fcc:	f6 01       	movw	r30, r12
    5fce:	60 81       	ld	r22, Z
    5fd0:	71 81       	ldd	r23, Z+1	; 0x01
    5fd2:	82 81       	ldd	r24, Z+2	; 0x02
    5fd4:	93 81       	ldd	r25, Z+3	; 0x03
    5fd6:	0a c0       	rjmp	.+20     	; 0x5fec <vfprintf+0x4f2>
    5fd8:	f2 e0       	ldi	r31, 0x02	; 2
    5fda:	af 0e       	add	r10, r31
    5fdc:	b1 1c       	adc	r11, r1
    5fde:	f6 01       	movw	r30, r12
    5fe0:	60 81       	ld	r22, Z
    5fe2:	71 81       	ldd	r23, Z+1	; 0x01
    5fe4:	07 2e       	mov	r0, r23
    5fe6:	00 0c       	add	r0, r0
    5fe8:	88 0b       	sbc	r24, r24
    5fea:	99 0b       	sbc	r25, r25
    5fec:	f9 2d       	mov	r31, r9
    5fee:	ff 76       	andi	r31, 0x6F	; 111
    5ff0:	9f 2e       	mov	r9, r31
    5ff2:	97 ff       	sbrs	r25, 7
    5ff4:	09 c0       	rjmp	.+18     	; 0x6008 <vfprintf+0x50e>
    5ff6:	90 95       	com	r25
    5ff8:	80 95       	com	r24
    5ffa:	70 95       	com	r23
    5ffc:	61 95       	neg	r22
    5ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    6000:	8f 4f       	sbci	r24, 0xFF	; 255
    6002:	9f 4f       	sbci	r25, 0xFF	; 255
    6004:	f0 68       	ori	r31, 0x80	; 128
    6006:	9f 2e       	mov	r9, r31
    6008:	2a e0       	ldi	r18, 0x0A	; 10
    600a:	30 e0       	ldi	r19, 0x00	; 0
    600c:	a3 01       	movw	r20, r6
    600e:	0e 94 c1 32 	call	0x6582	; 0x6582 <__ultoa_invert>
    6012:	c8 2e       	mov	r12, r24
    6014:	c6 18       	sub	r12, r6
    6016:	3f c0       	rjmp	.+126    	; 0x6096 <vfprintf+0x59c>
    6018:	09 2d       	mov	r16, r9
    601a:	85 37       	cpi	r24, 0x75	; 117
    601c:	21 f4       	brne	.+8      	; 0x6026 <vfprintf+0x52c>
    601e:	0f 7e       	andi	r16, 0xEF	; 239
    6020:	2a e0       	ldi	r18, 0x0A	; 10
    6022:	30 e0       	ldi	r19, 0x00	; 0
    6024:	1d c0       	rjmp	.+58     	; 0x6060 <vfprintf+0x566>
    6026:	09 7f       	andi	r16, 0xF9	; 249
    6028:	8f 36       	cpi	r24, 0x6F	; 111
    602a:	91 f0       	breq	.+36     	; 0x6050 <vfprintf+0x556>
    602c:	18 f4       	brcc	.+6      	; 0x6034 <vfprintf+0x53a>
    602e:	88 35       	cpi	r24, 0x58	; 88
    6030:	59 f0       	breq	.+22     	; 0x6048 <vfprintf+0x54e>
    6032:	c3 c0       	rjmp	.+390    	; 0x61ba <vfprintf+0x6c0>
    6034:	80 37       	cpi	r24, 0x70	; 112
    6036:	19 f0       	breq	.+6      	; 0x603e <vfprintf+0x544>
    6038:	88 37       	cpi	r24, 0x78	; 120
    603a:	11 f0       	breq	.+4      	; 0x6040 <vfprintf+0x546>
    603c:	be c0       	rjmp	.+380    	; 0x61ba <vfprintf+0x6c0>
    603e:	00 61       	ori	r16, 0x10	; 16
    6040:	04 ff       	sbrs	r16, 4
    6042:	09 c0       	rjmp	.+18     	; 0x6056 <vfprintf+0x55c>
    6044:	04 60       	ori	r16, 0x04	; 4
    6046:	07 c0       	rjmp	.+14     	; 0x6056 <vfprintf+0x55c>
    6048:	94 fe       	sbrs	r9, 4
    604a:	08 c0       	rjmp	.+16     	; 0x605c <vfprintf+0x562>
    604c:	06 60       	ori	r16, 0x06	; 6
    604e:	06 c0       	rjmp	.+12     	; 0x605c <vfprintf+0x562>
    6050:	28 e0       	ldi	r18, 0x08	; 8
    6052:	30 e0       	ldi	r19, 0x00	; 0
    6054:	05 c0       	rjmp	.+10     	; 0x6060 <vfprintf+0x566>
    6056:	20 e1       	ldi	r18, 0x10	; 16
    6058:	30 e0       	ldi	r19, 0x00	; 0
    605a:	02 c0       	rjmp	.+4      	; 0x6060 <vfprintf+0x566>
    605c:	20 e1       	ldi	r18, 0x10	; 16
    605e:	32 e0       	ldi	r19, 0x02	; 2
    6060:	56 01       	movw	r10, r12
    6062:	07 ff       	sbrs	r16, 7
    6064:	09 c0       	rjmp	.+18     	; 0x6078 <vfprintf+0x57e>
    6066:	84 e0       	ldi	r24, 0x04	; 4
    6068:	a8 0e       	add	r10, r24
    606a:	b1 1c       	adc	r11, r1
    606c:	f6 01       	movw	r30, r12
    606e:	60 81       	ld	r22, Z
    6070:	71 81       	ldd	r23, Z+1	; 0x01
    6072:	82 81       	ldd	r24, Z+2	; 0x02
    6074:	93 81       	ldd	r25, Z+3	; 0x03
    6076:	08 c0       	rjmp	.+16     	; 0x6088 <vfprintf+0x58e>
    6078:	f2 e0       	ldi	r31, 0x02	; 2
    607a:	af 0e       	add	r10, r31
    607c:	b1 1c       	adc	r11, r1
    607e:	f6 01       	movw	r30, r12
    6080:	60 81       	ld	r22, Z
    6082:	71 81       	ldd	r23, Z+1	; 0x01
    6084:	80 e0       	ldi	r24, 0x00	; 0
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	a3 01       	movw	r20, r6
    608a:	0e 94 c1 32 	call	0x6582	; 0x6582 <__ultoa_invert>
    608e:	c8 2e       	mov	r12, r24
    6090:	c6 18       	sub	r12, r6
    6092:	0f 77       	andi	r16, 0x7F	; 127
    6094:	90 2e       	mov	r9, r16
    6096:	96 fe       	sbrs	r9, 6
    6098:	0b c0       	rjmp	.+22     	; 0x60b0 <vfprintf+0x5b6>
    609a:	09 2d       	mov	r16, r9
    609c:	0e 7f       	andi	r16, 0xFE	; 254
    609e:	c1 16       	cp	r12, r17
    60a0:	50 f4       	brcc	.+20     	; 0x60b6 <vfprintf+0x5bc>
    60a2:	94 fe       	sbrs	r9, 4
    60a4:	0a c0       	rjmp	.+20     	; 0x60ba <vfprintf+0x5c0>
    60a6:	92 fc       	sbrc	r9, 2
    60a8:	08 c0       	rjmp	.+16     	; 0x60ba <vfprintf+0x5c0>
    60aa:	09 2d       	mov	r16, r9
    60ac:	0e 7e       	andi	r16, 0xEE	; 238
    60ae:	05 c0       	rjmp	.+10     	; 0x60ba <vfprintf+0x5c0>
    60b0:	dc 2c       	mov	r13, r12
    60b2:	09 2d       	mov	r16, r9
    60b4:	03 c0       	rjmp	.+6      	; 0x60bc <vfprintf+0x5c2>
    60b6:	dc 2c       	mov	r13, r12
    60b8:	01 c0       	rjmp	.+2      	; 0x60bc <vfprintf+0x5c2>
    60ba:	d1 2e       	mov	r13, r17
    60bc:	04 ff       	sbrs	r16, 4
    60be:	0d c0       	rjmp	.+26     	; 0x60da <vfprintf+0x5e0>
    60c0:	fe 01       	movw	r30, r28
    60c2:	ec 0d       	add	r30, r12
    60c4:	f1 1d       	adc	r31, r1
    60c6:	80 81       	ld	r24, Z
    60c8:	80 33       	cpi	r24, 0x30	; 48
    60ca:	11 f4       	brne	.+4      	; 0x60d0 <vfprintf+0x5d6>
    60cc:	09 7e       	andi	r16, 0xE9	; 233
    60ce:	09 c0       	rjmp	.+18     	; 0x60e2 <vfprintf+0x5e8>
    60d0:	02 ff       	sbrs	r16, 2
    60d2:	06 c0       	rjmp	.+12     	; 0x60e0 <vfprintf+0x5e6>
    60d4:	d3 94       	inc	r13
    60d6:	d3 94       	inc	r13
    60d8:	04 c0       	rjmp	.+8      	; 0x60e2 <vfprintf+0x5e8>
    60da:	80 2f       	mov	r24, r16
    60dc:	86 78       	andi	r24, 0x86	; 134
    60de:	09 f0       	breq	.+2      	; 0x60e2 <vfprintf+0x5e8>
    60e0:	d3 94       	inc	r13
    60e2:	03 fd       	sbrc	r16, 3
    60e4:	11 c0       	rjmp	.+34     	; 0x6108 <vfprintf+0x60e>
    60e6:	00 ff       	sbrs	r16, 0
    60e8:	06 c0       	rjmp	.+12     	; 0x60f6 <vfprintf+0x5fc>
    60ea:	1c 2d       	mov	r17, r12
    60ec:	d5 14       	cp	r13, r5
    60ee:	80 f4       	brcc	.+32     	; 0x6110 <vfprintf+0x616>
    60f0:	15 0d       	add	r17, r5
    60f2:	1d 19       	sub	r17, r13
    60f4:	0d c0       	rjmp	.+26     	; 0x6110 <vfprintf+0x616>
    60f6:	d5 14       	cp	r13, r5
    60f8:	58 f4       	brcc	.+22     	; 0x6110 <vfprintf+0x616>
    60fa:	b7 01       	movw	r22, r14
    60fc:	80 e2       	ldi	r24, 0x20	; 32
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    6104:	d3 94       	inc	r13
    6106:	f7 cf       	rjmp	.-18     	; 0x60f6 <vfprintf+0x5fc>
    6108:	d5 14       	cp	r13, r5
    610a:	10 f4       	brcc	.+4      	; 0x6110 <vfprintf+0x616>
    610c:	5d 18       	sub	r5, r13
    610e:	01 c0       	rjmp	.+2      	; 0x6112 <vfprintf+0x618>
    6110:	51 2c       	mov	r5, r1
    6112:	04 ff       	sbrs	r16, 4
    6114:	10 c0       	rjmp	.+32     	; 0x6136 <vfprintf+0x63c>
    6116:	b7 01       	movw	r22, r14
    6118:	80 e3       	ldi	r24, 0x30	; 48
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    6120:	02 ff       	sbrs	r16, 2
    6122:	17 c0       	rjmp	.+46     	; 0x6152 <vfprintf+0x658>
    6124:	01 fd       	sbrc	r16, 1
    6126:	03 c0       	rjmp	.+6      	; 0x612e <vfprintf+0x634>
    6128:	88 e7       	ldi	r24, 0x78	; 120
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	02 c0       	rjmp	.+4      	; 0x6132 <vfprintf+0x638>
    612e:	88 e5       	ldi	r24, 0x58	; 88
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	b7 01       	movw	r22, r14
    6134:	0c c0       	rjmp	.+24     	; 0x614e <vfprintf+0x654>
    6136:	80 2f       	mov	r24, r16
    6138:	86 78       	andi	r24, 0x86	; 134
    613a:	59 f0       	breq	.+22     	; 0x6152 <vfprintf+0x658>
    613c:	01 ff       	sbrs	r16, 1
    613e:	02 c0       	rjmp	.+4      	; 0x6144 <vfprintf+0x64a>
    6140:	8b e2       	ldi	r24, 0x2B	; 43
    6142:	01 c0       	rjmp	.+2      	; 0x6146 <vfprintf+0x64c>
    6144:	80 e2       	ldi	r24, 0x20	; 32
    6146:	07 fd       	sbrc	r16, 7
    6148:	8d e2       	ldi	r24, 0x2D	; 45
    614a:	b7 01       	movw	r22, r14
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    6152:	c1 16       	cp	r12, r17
    6154:	38 f4       	brcc	.+14     	; 0x6164 <vfprintf+0x66a>
    6156:	b7 01       	movw	r22, r14
    6158:	80 e3       	ldi	r24, 0x30	; 48
    615a:	90 e0       	ldi	r25, 0x00	; 0
    615c:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    6160:	11 50       	subi	r17, 0x01	; 1
    6162:	f7 cf       	rjmp	.-18     	; 0x6152 <vfprintf+0x658>
    6164:	ca 94       	dec	r12
    6166:	f3 01       	movw	r30, r6
    6168:	ec 0d       	add	r30, r12
    616a:	f1 1d       	adc	r31, r1
    616c:	80 81       	ld	r24, Z
    616e:	b7 01       	movw	r22, r14
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    6176:	c1 10       	cpse	r12, r1
    6178:	f5 cf       	rjmp	.-22     	; 0x6164 <vfprintf+0x66a>
    617a:	15 c0       	rjmp	.+42     	; 0x61a6 <vfprintf+0x6ac>
    617c:	f4 e0       	ldi	r31, 0x04	; 4
    617e:	f5 15       	cp	r31, r5
    6180:	60 f5       	brcc	.+88     	; 0x61da <vfprintf+0x6e0>
    6182:	84 e0       	ldi	r24, 0x04	; 4
    6184:	58 1a       	sub	r5, r24
    6186:	93 fe       	sbrs	r9, 3
    6188:	1f c0       	rjmp	.+62     	; 0x61c8 <vfprintf+0x6ce>
    618a:	01 11       	cpse	r16, r1
    618c:	27 c0       	rjmp	.+78     	; 0x61dc <vfprintf+0x6e2>
    618e:	2c 85       	ldd	r18, Y+12	; 0x0c
    6190:	23 ff       	sbrs	r18, 3
    6192:	2a c0       	rjmp	.+84     	; 0x61e8 <vfprintf+0x6ee>
    6194:	0c e3       	ldi	r16, 0x3C	; 60
    6196:	12 e0       	ldi	r17, 0x02	; 2
    6198:	39 2d       	mov	r19, r9
    619a:	30 71       	andi	r19, 0x10	; 16
    619c:	93 2e       	mov	r9, r19
    619e:	f8 01       	movw	r30, r16
    61a0:	84 91       	lpm	r24, Z
    61a2:	81 11       	cpse	r24, r1
    61a4:	24 c0       	rjmp	.+72     	; 0x61ee <vfprintf+0x6f4>
    61a6:	55 20       	and	r5, r5
    61a8:	09 f4       	brne	.+2      	; 0x61ac <vfprintf+0x6b2>
    61aa:	e4 cc       	rjmp	.-1592   	; 0x5b74 <vfprintf+0x7a>
    61ac:	b7 01       	movw	r22, r14
    61ae:	80 e2       	ldi	r24, 0x20	; 32
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    61b6:	5a 94       	dec	r5
    61b8:	f6 cf       	rjmp	.-20     	; 0x61a6 <vfprintf+0x6ac>
    61ba:	f7 01       	movw	r30, r14
    61bc:	86 81       	ldd	r24, Z+6	; 0x06
    61be:	97 81       	ldd	r25, Z+7	; 0x07
    61c0:	26 c0       	rjmp	.+76     	; 0x620e <vfprintf+0x714>
    61c2:	8f ef       	ldi	r24, 0xFF	; 255
    61c4:	9f ef       	ldi	r25, 0xFF	; 255
    61c6:	23 c0       	rjmp	.+70     	; 0x620e <vfprintf+0x714>
    61c8:	b7 01       	movw	r22, r14
    61ca:	80 e2       	ldi	r24, 0x20	; 32
    61cc:	90 e0       	ldi	r25, 0x00	; 0
    61ce:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    61d2:	5a 94       	dec	r5
    61d4:	51 10       	cpse	r5, r1
    61d6:	f8 cf       	rjmp	.-16     	; 0x61c8 <vfprintf+0x6ce>
    61d8:	d8 cf       	rjmp	.-80     	; 0x618a <vfprintf+0x690>
    61da:	51 2c       	mov	r5, r1
    61dc:	b7 01       	movw	r22, r14
    61de:	80 2f       	mov	r24, r16
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    61e6:	d3 cf       	rjmp	.-90     	; 0x618e <vfprintf+0x694>
    61e8:	00 e4       	ldi	r16, 0x40	; 64
    61ea:	12 e0       	ldi	r17, 0x02	; 2
    61ec:	d5 cf       	rjmp	.-86     	; 0x6198 <vfprintf+0x69e>
    61ee:	91 10       	cpse	r9, r1
    61f0:	80 52       	subi	r24, 0x20	; 32
    61f2:	b7 01       	movw	r22, r14
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <fputc>
    61fa:	0f 5f       	subi	r16, 0xFF	; 255
    61fc:	1f 4f       	sbci	r17, 0xFF	; 255
    61fe:	cf cf       	rjmp	.-98     	; 0x619e <vfprintf+0x6a4>
    6200:	23 e0       	ldi	r18, 0x03	; 3
    6202:	25 15       	cp	r18, r5
    6204:	10 f4       	brcc	.+4      	; 0x620a <vfprintf+0x710>
    6206:	83 e0       	ldi	r24, 0x03	; 3
    6208:	bd cf       	rjmp	.-134    	; 0x6184 <vfprintf+0x68a>
    620a:	51 2c       	mov	r5, r1
    620c:	c0 cf       	rjmp	.-128    	; 0x618e <vfprintf+0x694>
    620e:	60 96       	adiw	r28, 0x10	; 16
    6210:	cd bf       	out	0x3d, r28	; 61
    6212:	de bf       	out	0x3e, r29	; 62
    6214:	df 91       	pop	r29
    6216:	cf 91       	pop	r28
    6218:	1f 91       	pop	r17
    621a:	0f 91       	pop	r16
    621c:	ff 90       	pop	r15
    621e:	ef 90       	pop	r14
    6220:	df 90       	pop	r13
    6222:	cf 90       	pop	r12
    6224:	bf 90       	pop	r11
    6226:	af 90       	pop	r10
    6228:	9f 90       	pop	r9
    622a:	8f 90       	pop	r8
    622c:	7f 90       	pop	r7
    622e:	6f 90       	pop	r6
    6230:	5f 90       	pop	r5
    6232:	4f 90       	pop	r4
    6234:	3f 90       	pop	r3
    6236:	2f 90       	pop	r2
    6238:	08 95       	ret

0000623a <__tablejump2__>:
    623a:	ee 0f       	add	r30, r30
    623c:	ff 1f       	adc	r31, r31
    623e:	88 1f       	adc	r24, r24
    6240:	8b bf       	out	0x3b, r24	; 59
    6242:	07 90       	elpm	r0, Z+
    6244:	f6 91       	elpm	r31, Z
    6246:	e0 2d       	mov	r30, r0
    6248:	19 94       	eijmp

0000624a <__ftoa_engine>:
    624a:	28 30       	cpi	r18, 0x08	; 8
    624c:	08 f0       	brcs	.+2      	; 0x6250 <__ftoa_engine+0x6>
    624e:	27 e0       	ldi	r18, 0x07	; 7
    6250:	33 27       	eor	r19, r19
    6252:	da 01       	movw	r26, r20
    6254:	99 0f       	add	r25, r25
    6256:	31 1d       	adc	r19, r1
    6258:	87 fd       	sbrc	r24, 7
    625a:	91 60       	ori	r25, 0x01	; 1
    625c:	00 96       	adiw	r24, 0x00	; 0
    625e:	61 05       	cpc	r22, r1
    6260:	71 05       	cpc	r23, r1
    6262:	39 f4       	brne	.+14     	; 0x6272 <__ftoa_engine+0x28>
    6264:	32 60       	ori	r19, 0x02	; 2
    6266:	2e 5f       	subi	r18, 0xFE	; 254
    6268:	3d 93       	st	X+, r19
    626a:	30 e3       	ldi	r19, 0x30	; 48
    626c:	2a 95       	dec	r18
    626e:	e1 f7       	brne	.-8      	; 0x6268 <__ftoa_engine+0x1e>
    6270:	08 95       	ret
    6272:	9f 3f       	cpi	r25, 0xFF	; 255
    6274:	30 f0       	brcs	.+12     	; 0x6282 <__ftoa_engine+0x38>
    6276:	80 38       	cpi	r24, 0x80	; 128
    6278:	71 05       	cpc	r23, r1
    627a:	61 05       	cpc	r22, r1
    627c:	09 f0       	breq	.+2      	; 0x6280 <__ftoa_engine+0x36>
    627e:	3c 5f       	subi	r19, 0xFC	; 252
    6280:	3c 5f       	subi	r19, 0xFC	; 252
    6282:	3d 93       	st	X+, r19
    6284:	91 30       	cpi	r25, 0x01	; 1
    6286:	08 f0       	brcs	.+2      	; 0x628a <__ftoa_engine+0x40>
    6288:	80 68       	ori	r24, 0x80	; 128
    628a:	91 1d       	adc	r25, r1
    628c:	df 93       	push	r29
    628e:	cf 93       	push	r28
    6290:	1f 93       	push	r17
    6292:	0f 93       	push	r16
    6294:	ff 92       	push	r15
    6296:	ef 92       	push	r14
    6298:	19 2f       	mov	r17, r25
    629a:	98 7f       	andi	r25, 0xF8	; 248
    629c:	96 95       	lsr	r25
    629e:	e9 2f       	mov	r30, r25
    62a0:	96 95       	lsr	r25
    62a2:	96 95       	lsr	r25
    62a4:	e9 0f       	add	r30, r25
    62a6:	ff 27       	eor	r31, r31
    62a8:	e2 56       	subi	r30, 0x62	; 98
    62aa:	fd 4f       	sbci	r31, 0xFD	; 253
    62ac:	99 27       	eor	r25, r25
    62ae:	33 27       	eor	r19, r19
    62b0:	ee 24       	eor	r14, r14
    62b2:	ff 24       	eor	r15, r15
    62b4:	a7 01       	movw	r20, r14
    62b6:	e7 01       	movw	r28, r14
    62b8:	05 90       	lpm	r0, Z+
    62ba:	08 94       	sec
    62bc:	07 94       	ror	r0
    62be:	28 f4       	brcc	.+10     	; 0x62ca <__ftoa_engine+0x80>
    62c0:	36 0f       	add	r19, r22
    62c2:	e7 1e       	adc	r14, r23
    62c4:	f8 1e       	adc	r15, r24
    62c6:	49 1f       	adc	r20, r25
    62c8:	51 1d       	adc	r21, r1
    62ca:	66 0f       	add	r22, r22
    62cc:	77 1f       	adc	r23, r23
    62ce:	88 1f       	adc	r24, r24
    62d0:	99 1f       	adc	r25, r25
    62d2:	06 94       	lsr	r0
    62d4:	a1 f7       	brne	.-24     	; 0x62be <__ftoa_engine+0x74>
    62d6:	05 90       	lpm	r0, Z+
    62d8:	07 94       	ror	r0
    62da:	28 f4       	brcc	.+10     	; 0x62e6 <__ftoa_engine+0x9c>
    62dc:	e7 0e       	add	r14, r23
    62de:	f8 1e       	adc	r15, r24
    62e0:	49 1f       	adc	r20, r25
    62e2:	56 1f       	adc	r21, r22
    62e4:	c1 1d       	adc	r28, r1
    62e6:	77 0f       	add	r23, r23
    62e8:	88 1f       	adc	r24, r24
    62ea:	99 1f       	adc	r25, r25
    62ec:	66 1f       	adc	r22, r22
    62ee:	06 94       	lsr	r0
    62f0:	a1 f7       	brne	.-24     	; 0x62da <__ftoa_engine+0x90>
    62f2:	05 90       	lpm	r0, Z+
    62f4:	07 94       	ror	r0
    62f6:	28 f4       	brcc	.+10     	; 0x6302 <__ftoa_engine+0xb8>
    62f8:	f8 0e       	add	r15, r24
    62fa:	49 1f       	adc	r20, r25
    62fc:	56 1f       	adc	r21, r22
    62fe:	c7 1f       	adc	r28, r23
    6300:	d1 1d       	adc	r29, r1
    6302:	88 0f       	add	r24, r24
    6304:	99 1f       	adc	r25, r25
    6306:	66 1f       	adc	r22, r22
    6308:	77 1f       	adc	r23, r23
    630a:	06 94       	lsr	r0
    630c:	a1 f7       	brne	.-24     	; 0x62f6 <__ftoa_engine+0xac>
    630e:	05 90       	lpm	r0, Z+
    6310:	07 94       	ror	r0
    6312:	20 f4       	brcc	.+8      	; 0x631c <__ftoa_engine+0xd2>
    6314:	49 0f       	add	r20, r25
    6316:	56 1f       	adc	r21, r22
    6318:	c7 1f       	adc	r28, r23
    631a:	d8 1f       	adc	r29, r24
    631c:	99 0f       	add	r25, r25
    631e:	66 1f       	adc	r22, r22
    6320:	77 1f       	adc	r23, r23
    6322:	88 1f       	adc	r24, r24
    6324:	06 94       	lsr	r0
    6326:	a9 f7       	brne	.-22     	; 0x6312 <__ftoa_engine+0xc8>
    6328:	84 91       	lpm	r24, Z
    632a:	10 95       	com	r17
    632c:	17 70       	andi	r17, 0x07	; 7
    632e:	41 f0       	breq	.+16     	; 0x6340 <__ftoa_engine+0xf6>
    6330:	d6 95       	lsr	r29
    6332:	c7 95       	ror	r28
    6334:	57 95       	ror	r21
    6336:	47 95       	ror	r20
    6338:	f7 94       	ror	r15
    633a:	e7 94       	ror	r14
    633c:	1a 95       	dec	r17
    633e:	c1 f7       	brne	.-16     	; 0x6330 <__ftoa_engine+0xe6>
    6340:	e4 e4       	ldi	r30, 0x44	; 68
    6342:	f2 e0       	ldi	r31, 0x02	; 2
    6344:	68 94       	set
    6346:	15 90       	lpm	r1, Z+
    6348:	15 91       	lpm	r17, Z+
    634a:	35 91       	lpm	r19, Z+
    634c:	65 91       	lpm	r22, Z+
    634e:	95 91       	lpm	r25, Z+
    6350:	05 90       	lpm	r0, Z+
    6352:	7f e2       	ldi	r23, 0x2F	; 47
    6354:	73 95       	inc	r23
    6356:	e1 18       	sub	r14, r1
    6358:	f1 0a       	sbc	r15, r17
    635a:	43 0b       	sbc	r20, r19
    635c:	56 0b       	sbc	r21, r22
    635e:	c9 0b       	sbc	r28, r25
    6360:	d0 09       	sbc	r29, r0
    6362:	c0 f7       	brcc	.-16     	; 0x6354 <__ftoa_engine+0x10a>
    6364:	e1 0c       	add	r14, r1
    6366:	f1 1e       	adc	r15, r17
    6368:	43 1f       	adc	r20, r19
    636a:	56 1f       	adc	r21, r22
    636c:	c9 1f       	adc	r28, r25
    636e:	d0 1d       	adc	r29, r0
    6370:	7e f4       	brtc	.+30     	; 0x6390 <__ftoa_engine+0x146>
    6372:	70 33       	cpi	r23, 0x30	; 48
    6374:	11 f4       	brne	.+4      	; 0x637a <__ftoa_engine+0x130>
    6376:	8a 95       	dec	r24
    6378:	e6 cf       	rjmp	.-52     	; 0x6346 <__ftoa_engine+0xfc>
    637a:	e8 94       	clt
    637c:	01 50       	subi	r16, 0x01	; 1
    637e:	30 f0       	brcs	.+12     	; 0x638c <__ftoa_engine+0x142>
    6380:	08 0f       	add	r16, r24
    6382:	0a f4       	brpl	.+2      	; 0x6386 <__ftoa_engine+0x13c>
    6384:	00 27       	eor	r16, r16
    6386:	02 17       	cp	r16, r18
    6388:	08 f4       	brcc	.+2      	; 0x638c <__ftoa_engine+0x142>
    638a:	20 2f       	mov	r18, r16
    638c:	23 95       	inc	r18
    638e:	02 2f       	mov	r16, r18
    6390:	7a 33       	cpi	r23, 0x3A	; 58
    6392:	28 f0       	brcs	.+10     	; 0x639e <__ftoa_engine+0x154>
    6394:	79 e3       	ldi	r23, 0x39	; 57
    6396:	7d 93       	st	X+, r23
    6398:	2a 95       	dec	r18
    639a:	e9 f7       	brne	.-6      	; 0x6396 <__ftoa_engine+0x14c>
    639c:	10 c0       	rjmp	.+32     	; 0x63be <__ftoa_engine+0x174>
    639e:	7d 93       	st	X+, r23
    63a0:	2a 95       	dec	r18
    63a2:	89 f6       	brne	.-94     	; 0x6346 <__ftoa_engine+0xfc>
    63a4:	06 94       	lsr	r0
    63a6:	97 95       	ror	r25
    63a8:	67 95       	ror	r22
    63aa:	37 95       	ror	r19
    63ac:	17 95       	ror	r17
    63ae:	17 94       	ror	r1
    63b0:	e1 18       	sub	r14, r1
    63b2:	f1 0a       	sbc	r15, r17
    63b4:	43 0b       	sbc	r20, r19
    63b6:	56 0b       	sbc	r21, r22
    63b8:	c9 0b       	sbc	r28, r25
    63ba:	d0 09       	sbc	r29, r0
    63bc:	98 f0       	brcs	.+38     	; 0x63e4 <__ftoa_engine+0x19a>
    63be:	23 95       	inc	r18
    63c0:	7e 91       	ld	r23, -X
    63c2:	73 95       	inc	r23
    63c4:	7a 33       	cpi	r23, 0x3A	; 58
    63c6:	08 f0       	brcs	.+2      	; 0x63ca <__ftoa_engine+0x180>
    63c8:	70 e3       	ldi	r23, 0x30	; 48
    63ca:	7c 93       	st	X, r23
    63cc:	20 13       	cpse	r18, r16
    63ce:	b8 f7       	brcc	.-18     	; 0x63be <__ftoa_engine+0x174>
    63d0:	7e 91       	ld	r23, -X
    63d2:	70 61       	ori	r23, 0x10	; 16
    63d4:	7d 93       	st	X+, r23
    63d6:	30 f0       	brcs	.+12     	; 0x63e4 <__ftoa_engine+0x19a>
    63d8:	83 95       	inc	r24
    63da:	71 e3       	ldi	r23, 0x31	; 49
    63dc:	7d 93       	st	X+, r23
    63de:	70 e3       	ldi	r23, 0x30	; 48
    63e0:	2a 95       	dec	r18
    63e2:	e1 f7       	brne	.-8      	; 0x63dc <__ftoa_engine+0x192>
    63e4:	11 24       	eor	r1, r1
    63e6:	ef 90       	pop	r14
    63e8:	ff 90       	pop	r15
    63ea:	0f 91       	pop	r16
    63ec:	1f 91       	pop	r17
    63ee:	cf 91       	pop	r28
    63f0:	df 91       	pop	r29
    63f2:	99 27       	eor	r25, r25
    63f4:	87 fd       	sbrc	r24, 7
    63f6:	90 95       	com	r25
    63f8:	08 95       	ret

000063fa <strnlen_P>:
    63fa:	fc 01       	movw	r30, r24
    63fc:	05 90       	lpm	r0, Z+
    63fe:	61 50       	subi	r22, 0x01	; 1
    6400:	70 40       	sbci	r23, 0x00	; 0
    6402:	01 10       	cpse	r0, r1
    6404:	d8 f7       	brcc	.-10     	; 0x63fc <strnlen_P+0x2>
    6406:	80 95       	com	r24
    6408:	90 95       	com	r25
    640a:	8e 0f       	add	r24, r30
    640c:	9f 1f       	adc	r25, r31
    640e:	08 95       	ret

00006410 <memcpy>:
    6410:	fb 01       	movw	r30, r22
    6412:	dc 01       	movw	r26, r24
    6414:	02 c0       	rjmp	.+4      	; 0x641a <memcpy+0xa>
    6416:	01 90       	ld	r0, Z+
    6418:	0d 92       	st	X+, r0
    641a:	41 50       	subi	r20, 0x01	; 1
    641c:	50 40       	sbci	r21, 0x00	; 0
    641e:	d8 f7       	brcc	.-10     	; 0x6416 <memcpy+0x6>
    6420:	08 95       	ret

00006422 <memset>:
    6422:	dc 01       	movw	r26, r24
    6424:	01 c0       	rjmp	.+2      	; 0x6428 <memset+0x6>
    6426:	6d 93       	st	X+, r22
    6428:	41 50       	subi	r20, 0x01	; 1
    642a:	50 40       	sbci	r21, 0x00	; 0
    642c:	e0 f7       	brcc	.-8      	; 0x6426 <memset+0x4>
    642e:	08 95       	ret

00006430 <strlen>:
    6430:	fc 01       	movw	r30, r24
    6432:	01 90       	ld	r0, Z+
    6434:	00 20       	and	r0, r0
    6436:	e9 f7       	brne	.-6      	; 0x6432 <strlen+0x2>
    6438:	80 95       	com	r24
    643a:	90 95       	com	r25
    643c:	8e 0f       	add	r24, r30
    643e:	9f 1f       	adc	r25, r31
    6440:	08 95       	ret

00006442 <strnlen>:
    6442:	fc 01       	movw	r30, r24
    6444:	61 50       	subi	r22, 0x01	; 1
    6446:	70 40       	sbci	r23, 0x00	; 0
    6448:	01 90       	ld	r0, Z+
    644a:	01 10       	cpse	r0, r1
    644c:	d8 f7       	brcc	.-10     	; 0x6444 <strnlen+0x2>
    644e:	80 95       	com	r24
    6450:	90 95       	com	r25
    6452:	8e 0f       	add	r24, r30
    6454:	9f 1f       	adc	r25, r31
    6456:	08 95       	ret

00006458 <itoa>:
    6458:	45 32       	cpi	r20, 0x25	; 37
    645a:	51 05       	cpc	r21, r1
    645c:	20 f4       	brcc	.+8      	; 0x6466 <itoa+0xe>
    645e:	42 30       	cpi	r20, 0x02	; 2
    6460:	10 f0       	brcs	.+4      	; 0x6466 <itoa+0xe>
    6462:	0c 94 37 32 	jmp	0x646e	; 0x646e <__itoa_ncheck>
    6466:	fb 01       	movw	r30, r22
    6468:	10 82       	st	Z, r1
    646a:	cb 01       	movw	r24, r22
    646c:	08 95       	ret

0000646e <__itoa_ncheck>:
    646e:	bb 27       	eor	r27, r27
    6470:	4a 30       	cpi	r20, 0x0A	; 10
    6472:	31 f4       	brne	.+12     	; 0x6480 <__itoa_ncheck+0x12>
    6474:	99 23       	and	r25, r25
    6476:	22 f4       	brpl	.+8      	; 0x6480 <__itoa_ncheck+0x12>
    6478:	bd e2       	ldi	r27, 0x2D	; 45
    647a:	90 95       	com	r25
    647c:	81 95       	neg	r24
    647e:	9f 4f       	sbci	r25, 0xFF	; 255
    6480:	0c 94 43 32 	jmp	0x6486	; 0x6486 <__utoa_common>

00006484 <__utoa_ncheck>:
    6484:	bb 27       	eor	r27, r27

00006486 <__utoa_common>:
    6486:	fb 01       	movw	r30, r22
    6488:	55 27       	eor	r21, r21
    648a:	aa 27       	eor	r26, r26
    648c:	88 0f       	add	r24, r24
    648e:	99 1f       	adc	r25, r25
    6490:	aa 1f       	adc	r26, r26
    6492:	a4 17       	cp	r26, r20
    6494:	10 f0       	brcs	.+4      	; 0x649a <__utoa_common+0x14>
    6496:	a4 1b       	sub	r26, r20
    6498:	83 95       	inc	r24
    649a:	50 51       	subi	r21, 0x10	; 16
    649c:	b9 f7       	brne	.-18     	; 0x648c <__utoa_common+0x6>
    649e:	a0 5d       	subi	r26, 0xD0	; 208
    64a0:	aa 33       	cpi	r26, 0x3A	; 58
    64a2:	08 f0       	brcs	.+2      	; 0x64a6 <__utoa_common+0x20>
    64a4:	a9 5d       	subi	r26, 0xD9	; 217
    64a6:	a1 93       	st	Z+, r26
    64a8:	00 97       	sbiw	r24, 0x00	; 0
    64aa:	79 f7       	brne	.-34     	; 0x648a <__utoa_common+0x4>
    64ac:	b1 11       	cpse	r27, r1
    64ae:	b1 93       	st	Z+, r27
    64b0:	11 92       	st	Z+, r1
    64b2:	cb 01       	movw	r24, r22
    64b4:	0c 94 1f 33 	jmp	0x663e	; 0x663e <strrev>

000064b8 <fputc>:
    64b8:	0f 93       	push	r16
    64ba:	1f 93       	push	r17
    64bc:	cf 93       	push	r28
    64be:	df 93       	push	r29
    64c0:	fb 01       	movw	r30, r22
    64c2:	23 81       	ldd	r18, Z+3	; 0x03
    64c4:	21 fd       	sbrc	r18, 1
    64c6:	03 c0       	rjmp	.+6      	; 0x64ce <fputc+0x16>
    64c8:	8f ef       	ldi	r24, 0xFF	; 255
    64ca:	9f ef       	ldi	r25, 0xFF	; 255
    64cc:	2c c0       	rjmp	.+88     	; 0x6526 <fputc+0x6e>
    64ce:	22 ff       	sbrs	r18, 2
    64d0:	16 c0       	rjmp	.+44     	; 0x64fe <fputc+0x46>
    64d2:	46 81       	ldd	r20, Z+6	; 0x06
    64d4:	57 81       	ldd	r21, Z+7	; 0x07
    64d6:	24 81       	ldd	r18, Z+4	; 0x04
    64d8:	35 81       	ldd	r19, Z+5	; 0x05
    64da:	42 17       	cp	r20, r18
    64dc:	53 07       	cpc	r21, r19
    64de:	44 f4       	brge	.+16     	; 0x64f0 <fputc+0x38>
    64e0:	a0 81       	ld	r26, Z
    64e2:	b1 81       	ldd	r27, Z+1	; 0x01
    64e4:	9d 01       	movw	r18, r26
    64e6:	2f 5f       	subi	r18, 0xFF	; 255
    64e8:	3f 4f       	sbci	r19, 0xFF	; 255
    64ea:	20 83       	st	Z, r18
    64ec:	31 83       	std	Z+1, r19	; 0x01
    64ee:	8c 93       	st	X, r24
    64f0:	26 81       	ldd	r18, Z+6	; 0x06
    64f2:	37 81       	ldd	r19, Z+7	; 0x07
    64f4:	2f 5f       	subi	r18, 0xFF	; 255
    64f6:	3f 4f       	sbci	r19, 0xFF	; 255
    64f8:	26 83       	std	Z+6, r18	; 0x06
    64fa:	37 83       	std	Z+7, r19	; 0x07
    64fc:	14 c0       	rjmp	.+40     	; 0x6526 <fputc+0x6e>
    64fe:	8b 01       	movw	r16, r22
    6500:	ec 01       	movw	r28, r24
    6502:	fb 01       	movw	r30, r22
    6504:	00 84       	ldd	r0, Z+8	; 0x08
    6506:	f1 85       	ldd	r31, Z+9	; 0x09
    6508:	e0 2d       	mov	r30, r0
    650a:	19 95       	eicall
    650c:	89 2b       	or	r24, r25
    650e:	e1 f6       	brne	.-72     	; 0x64c8 <fputc+0x10>
    6510:	d8 01       	movw	r26, r16
    6512:	16 96       	adiw	r26, 0x06	; 6
    6514:	8d 91       	ld	r24, X+
    6516:	9c 91       	ld	r25, X
    6518:	17 97       	sbiw	r26, 0x07	; 7
    651a:	01 96       	adiw	r24, 0x01	; 1
    651c:	16 96       	adiw	r26, 0x06	; 6
    651e:	8d 93       	st	X+, r24
    6520:	9c 93       	st	X, r25
    6522:	17 97       	sbiw	r26, 0x07	; 7
    6524:	ce 01       	movw	r24, r28
    6526:	df 91       	pop	r29
    6528:	cf 91       	pop	r28
    652a:	1f 91       	pop	r17
    652c:	0f 91       	pop	r16
    652e:	08 95       	ret

00006530 <sprintf>:
    6530:	0f 93       	push	r16
    6532:	1f 93       	push	r17
    6534:	cf 93       	push	r28
    6536:	df 93       	push	r29
    6538:	cd b7       	in	r28, 0x3d	; 61
    653a:	de b7       	in	r29, 0x3e	; 62
    653c:	2e 97       	sbiw	r28, 0x0e	; 14
    653e:	cd bf       	out	0x3d, r28	; 61
    6540:	de bf       	out	0x3e, r29	; 62
    6542:	0e 89       	ldd	r16, Y+22	; 0x16
    6544:	1f 89       	ldd	r17, Y+23	; 0x17
    6546:	86 e0       	ldi	r24, 0x06	; 6
    6548:	8c 83       	std	Y+4, r24	; 0x04
    654a:	09 83       	std	Y+1, r16	; 0x01
    654c:	1a 83       	std	Y+2, r17	; 0x02
    654e:	8f ef       	ldi	r24, 0xFF	; 255
    6550:	9f e7       	ldi	r25, 0x7F	; 127
    6552:	8d 83       	std	Y+5, r24	; 0x05
    6554:	9e 83       	std	Y+6, r25	; 0x06
    6556:	ae 01       	movw	r20, r28
    6558:	46 5e       	subi	r20, 0xE6	; 230
    655a:	5f 4f       	sbci	r21, 0xFF	; 255
    655c:	68 8d       	ldd	r22, Y+24	; 0x18
    655e:	79 8d       	ldd	r23, Y+25	; 0x19
    6560:	ce 01       	movw	r24, r28
    6562:	01 96       	adiw	r24, 0x01	; 1
    6564:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <vfprintf>
    6568:	ef 81       	ldd	r30, Y+7	; 0x07
    656a:	f8 85       	ldd	r31, Y+8	; 0x08
    656c:	e0 0f       	add	r30, r16
    656e:	f1 1f       	adc	r31, r17
    6570:	10 82       	st	Z, r1
    6572:	2e 96       	adiw	r28, 0x0e	; 14
    6574:	cd bf       	out	0x3d, r28	; 61
    6576:	de bf       	out	0x3e, r29	; 62
    6578:	df 91       	pop	r29
    657a:	cf 91       	pop	r28
    657c:	1f 91       	pop	r17
    657e:	0f 91       	pop	r16
    6580:	08 95       	ret

00006582 <__ultoa_invert>:
    6582:	fa 01       	movw	r30, r20
    6584:	aa 27       	eor	r26, r26
    6586:	28 30       	cpi	r18, 0x08	; 8
    6588:	51 f1       	breq	.+84     	; 0x65de <__ultoa_invert+0x5c>
    658a:	20 31       	cpi	r18, 0x10	; 16
    658c:	81 f1       	breq	.+96     	; 0x65ee <__ultoa_invert+0x6c>
    658e:	e8 94       	clt
    6590:	6f 93       	push	r22
    6592:	6e 7f       	andi	r22, 0xFE	; 254
    6594:	6e 5f       	subi	r22, 0xFE	; 254
    6596:	7f 4f       	sbci	r23, 0xFF	; 255
    6598:	8f 4f       	sbci	r24, 0xFF	; 255
    659a:	9f 4f       	sbci	r25, 0xFF	; 255
    659c:	af 4f       	sbci	r26, 0xFF	; 255
    659e:	b1 e0       	ldi	r27, 0x01	; 1
    65a0:	3e d0       	rcall	.+124    	; 0x661e <__ultoa_invert+0x9c>
    65a2:	b4 e0       	ldi	r27, 0x04	; 4
    65a4:	3c d0       	rcall	.+120    	; 0x661e <__ultoa_invert+0x9c>
    65a6:	67 0f       	add	r22, r23
    65a8:	78 1f       	adc	r23, r24
    65aa:	89 1f       	adc	r24, r25
    65ac:	9a 1f       	adc	r25, r26
    65ae:	a1 1d       	adc	r26, r1
    65b0:	68 0f       	add	r22, r24
    65b2:	79 1f       	adc	r23, r25
    65b4:	8a 1f       	adc	r24, r26
    65b6:	91 1d       	adc	r25, r1
    65b8:	a1 1d       	adc	r26, r1
    65ba:	6a 0f       	add	r22, r26
    65bc:	71 1d       	adc	r23, r1
    65be:	81 1d       	adc	r24, r1
    65c0:	91 1d       	adc	r25, r1
    65c2:	a1 1d       	adc	r26, r1
    65c4:	20 d0       	rcall	.+64     	; 0x6606 <__ultoa_invert+0x84>
    65c6:	09 f4       	brne	.+2      	; 0x65ca <__ultoa_invert+0x48>
    65c8:	68 94       	set
    65ca:	3f 91       	pop	r19
    65cc:	2a e0       	ldi	r18, 0x0A	; 10
    65ce:	26 9f       	mul	r18, r22
    65d0:	11 24       	eor	r1, r1
    65d2:	30 19       	sub	r19, r0
    65d4:	30 5d       	subi	r19, 0xD0	; 208
    65d6:	31 93       	st	Z+, r19
    65d8:	de f6       	brtc	.-74     	; 0x6590 <__ultoa_invert+0xe>
    65da:	cf 01       	movw	r24, r30
    65dc:	08 95       	ret
    65de:	46 2f       	mov	r20, r22
    65e0:	47 70       	andi	r20, 0x07	; 7
    65e2:	40 5d       	subi	r20, 0xD0	; 208
    65e4:	41 93       	st	Z+, r20
    65e6:	b3 e0       	ldi	r27, 0x03	; 3
    65e8:	0f d0       	rcall	.+30     	; 0x6608 <__ultoa_invert+0x86>
    65ea:	c9 f7       	brne	.-14     	; 0x65de <__ultoa_invert+0x5c>
    65ec:	f6 cf       	rjmp	.-20     	; 0x65da <__ultoa_invert+0x58>
    65ee:	46 2f       	mov	r20, r22
    65f0:	4f 70       	andi	r20, 0x0F	; 15
    65f2:	40 5d       	subi	r20, 0xD0	; 208
    65f4:	4a 33       	cpi	r20, 0x3A	; 58
    65f6:	18 f0       	brcs	.+6      	; 0x65fe <__ultoa_invert+0x7c>
    65f8:	49 5d       	subi	r20, 0xD9	; 217
    65fa:	31 fd       	sbrc	r19, 1
    65fc:	40 52       	subi	r20, 0x20	; 32
    65fe:	41 93       	st	Z+, r20
    6600:	02 d0       	rcall	.+4      	; 0x6606 <__ultoa_invert+0x84>
    6602:	a9 f7       	brne	.-22     	; 0x65ee <__ultoa_invert+0x6c>
    6604:	ea cf       	rjmp	.-44     	; 0x65da <__ultoa_invert+0x58>
    6606:	b4 e0       	ldi	r27, 0x04	; 4
    6608:	a6 95       	lsr	r26
    660a:	97 95       	ror	r25
    660c:	87 95       	ror	r24
    660e:	77 95       	ror	r23
    6610:	67 95       	ror	r22
    6612:	ba 95       	dec	r27
    6614:	c9 f7       	brne	.-14     	; 0x6608 <__ultoa_invert+0x86>
    6616:	00 97       	sbiw	r24, 0x00	; 0
    6618:	61 05       	cpc	r22, r1
    661a:	71 05       	cpc	r23, r1
    661c:	08 95       	ret
    661e:	9b 01       	movw	r18, r22
    6620:	ac 01       	movw	r20, r24
    6622:	0a 2e       	mov	r0, r26
    6624:	06 94       	lsr	r0
    6626:	57 95       	ror	r21
    6628:	47 95       	ror	r20
    662a:	37 95       	ror	r19
    662c:	27 95       	ror	r18
    662e:	ba 95       	dec	r27
    6630:	c9 f7       	brne	.-14     	; 0x6624 <__ultoa_invert+0xa2>
    6632:	62 0f       	add	r22, r18
    6634:	73 1f       	adc	r23, r19
    6636:	84 1f       	adc	r24, r20
    6638:	95 1f       	adc	r25, r21
    663a:	a0 1d       	adc	r26, r0
    663c:	08 95       	ret

0000663e <strrev>:
    663e:	dc 01       	movw	r26, r24
    6640:	fc 01       	movw	r30, r24
    6642:	67 2f       	mov	r22, r23
    6644:	71 91       	ld	r23, Z+
    6646:	77 23       	and	r23, r23
    6648:	e1 f7       	brne	.-8      	; 0x6642 <strrev+0x4>
    664a:	32 97       	sbiw	r30, 0x02	; 2
    664c:	04 c0       	rjmp	.+8      	; 0x6656 <strrev+0x18>
    664e:	7c 91       	ld	r23, X
    6650:	6d 93       	st	X+, r22
    6652:	70 83       	st	Z, r23
    6654:	62 91       	ld	r22, -Z
    6656:	ae 17       	cp	r26, r30
    6658:	bf 07       	cpc	r27, r31
    665a:	c8 f3       	brcs	.-14     	; 0x664e <strrev+0x10>
    665c:	08 95       	ret

0000665e <_exit>:
    665e:	f8 94       	cli

00006660 <__stop_program>:
    6660:	ff cf       	rjmp	.-2      	; 0x6660 <__stop_program>
