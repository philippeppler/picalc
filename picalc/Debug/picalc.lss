
picalc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00802000  00004c90  00004d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c8f  0080205e  0080205e  00004d82  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004d82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004de0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000768  00000000  00000000  00004e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d49a  00000000  00000000  00005588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004c1e  00000000  00000000  00012a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004cf7  00000000  00000000  00017640  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018f4  00000000  00000000  0001c338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000055d3  00000000  00000000  0001dc2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007e2b  00000000  00000000  000231ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a0  00000000  00000000  0002b02a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      10:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      14:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      18:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      1c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      20:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      24:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      28:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      2c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      30:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      34:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      38:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__vector_14>
      3c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      40:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      44:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      48:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      4c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      50:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      54:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      58:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      5c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      60:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      64:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      68:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      6c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      70:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      74:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      78:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      7c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      80:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      84:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      88:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      8c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      90:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      94:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      98:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      9c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ac:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      bc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      dc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ec:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      fc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     100:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     104:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     108:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     10c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     110:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     114:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     118:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     11c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     120:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     124:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     128:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     12c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     130:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     134:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     138:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     13c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     140:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     144:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     148:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     14c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     150:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     154:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     158:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     15c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     160:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     164:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     168:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     16c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     170:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     174:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     178:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     17c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     180:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     184:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     188:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     18c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     190:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     194:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     198:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     19c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1ac:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1b0:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__vector_108>
     1b4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1b8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1bc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1dc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1ec:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1fc:	50 12       	cpse	r5, r16
     1fe:	50 12       	cpse	r5, r16
     200:	50 12       	cpse	r5, r16
     202:	9d 12       	cpse	r9, r29
     204:	85 12       	cpse	r8, r21
     206:	9a 12       	cpse	r9, r26
     208:	50 12       	cpse	r5, r16
     20a:	50 12       	cpse	r5, r16
     20c:	9d 12       	cpse	r9, r29
     20e:	85 12       	cpse	r8, r21

00000210 <__trampolines_start>:
     210:	0c 94 9d 12 	jmp	0x253a	; 0x253a <prvTimerTask+0x212>
     214:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <vEventGroupSetBitsCallback>
     218:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <vDisplayUpdateTask>
     21c:	0c 94 94 11 	jmp	0x2328	; 0x2328 <prvTimerTask>
     220:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <vGUI>
     224:	0c 94 85 12 	jmp	0x250a	; 0x250a <prvTimerTask+0x1e2>
     228:	0c 94 32 14 	jmp	0x2864	; 0x2864 <vButton>
     22c:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <prvTimerTask+0x20c>
     230:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <vCalc>
     234:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <prvTimerTask+0x178>
     238:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <prvIdleTask>

0000023c <__trampolines_end>:
     23c:	6e 61       	ori	r22, 0x1E	; 30
     23e:	6e 00       	.word	0x006e	; ????

00000240 <__c.2332>:
     240:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     250:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     260:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     270:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     280:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     290:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     300:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     310:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     320:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     330:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	cf ef       	ldi	r28, 0xFF	; 255
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df e3       	ldi	r29, 0x3F	; 63
     348:	de bf       	out	0x3e, r29	; 62
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	0c bf       	out	0x3c, r16	; 60

0000034e <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     34e:	ed ee       	ldi	r30, 0xED	; 237
     350:	fc e2       	ldi	r31, 0x2C	; 44
     352:	8a ea       	ldi	r24, 0xAA	; 170
     354:	90 e4       	ldi	r25, 0x40	; 64
     356:	81 93       	st	Z+, r24
     358:	e0 30       	cpi	r30, 0x00	; 0
     35a:	f9 07       	cpc	r31, r25
     35c:	e0 f3       	brcs	.-8      	; 0x356 <init_mem+0x8>

0000035e <__do_copy_data>:
     35e:	10 e2       	ldi	r17, 0x20	; 32
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	b0 e2       	ldi	r27, 0x20	; 32
     364:	e0 e9       	ldi	r30, 0x90	; 144
     366:	fc e4       	ldi	r31, 0x4C	; 76
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	0b bf       	out	0x3b, r16	; 59
     36c:	02 c0       	rjmp	.+4      	; 0x372 <__do_copy_data+0x14>
     36e:	07 90       	elpm	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	ae 35       	cpi	r26, 0x5E	; 94
     374:	b1 07       	cpc	r27, r17
     376:	d9 f7       	brne	.-10     	; 0x36e <__do_copy_data+0x10>

00000378 <__do_clear_bss>:
     378:	2c e2       	ldi	r18, 0x2C	; 44
     37a:	ae e5       	ldi	r26, 0x5E	; 94
     37c:	b0 e2       	ldi	r27, 0x20	; 32
     37e:	01 c0       	rjmp	.+2      	; 0x382 <.do_clear_bss_start>

00000380 <.do_clear_bss_loop>:
     380:	1d 92       	st	X+, r1

00000382 <.do_clear_bss_start>:
     382:	ad 3e       	cpi	r26, 0xED	; 237
     384:	b2 07       	cpc	r27, r18
     386:	e1 f7       	brne	.-8      	; 0x380 <.do_clear_bss_loop>
     388:	0e 94 29 13 	call	0x2652	; 0x2652 <main>
     38c:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <_exit>

00000390 <__bad_interrupt>:
     390:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000394 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     39c:	80 ea       	ldi	r24, 0xA0	; 160
     39e:	96 e0       	ldi	r25, 0x06	; 6
     3a0:	20 e1       	ldi	r18, 0x10	; 16
     3a2:	fc 01       	movw	r30, r24
     3a4:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     3a6:	80 ea       	ldi	r24, 0xA0	; 160
     3a8:	96 e0       	ldi	r25, 0x06	; 6
     3aa:	20 e2       	ldi	r18, 0x20	; 32
     3ac:	fc 01       	movw	r30, r24
     3ae:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     3b0:	80 ea       	ldi	r24, 0xA0	; 160
     3b2:	96 e0       	ldi	r25, 0x06	; 6
     3b4:	20 e4       	ldi	r18, 0x40	; 64
     3b6:	fc 01       	movw	r30, r24
     3b8:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3ba:	80 ea       	ldi	r24, 0xA0	; 160
     3bc:	96 e0       	ldi	r25, 0x06	; 6
     3be:	20 e8       	ldi	r18, 0x80	; 128
     3c0:	fc 01       	movw	r30, r24
     3c2:	22 83       	std	Z+2, r18	; 0x02
 }
     3c4:	00 00       	nop
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3d4:	80 ea       	ldi	r24, 0xA0	; 160
     3d6:	96 e0       	ldi	r25, 0x06	; 6
     3d8:	fc 01       	movw	r30, r24
     3da:	80 85       	ldd	r24, Z+8	; 0x08
     3dc:	88 2f       	mov	r24, r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	80 71       	andi	r24, 0x10	; 16
     3e2:	99 27       	eor	r25, r25
     3e4:	95 95       	asr	r25
     3e6:	87 95       	ror	r24
     3e8:	95 95       	asr	r25
     3ea:	87 95       	ror	r24
     3ec:	95 95       	asr	r25
     3ee:	87 95       	ror	r24
     3f0:	95 95       	asr	r25
     3f2:	87 95       	ror	r24
     3f4:	89 2b       	or	r24, r25
     3f6:	89 f4       	brne	.+34     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		if(b1Count < 60000) {
     3f8:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     3fc:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     400:	80 36       	cpi	r24, 0x60	; 96
     402:	9a 4e       	sbci	r25, 0xEA	; 234
     404:	20 f5       	brcc	.+72     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			b1Count++;
     406:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     40a:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	80 93 5e 20 	sts	0x205E, r24	; 0x80205e <__data_end>
     414:	90 93 5f 20 	sts	0x205F, r25	; 0x80205f <__data_end+0x1>
     418:	1a c0       	rjmp	.+52     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     41a:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     41e:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     422:	0b 97       	sbiw	r24, 0x0b	; 11
     424:	68 f0       	brcs	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     426:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     42a:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     42e:	c3 97       	sbiw	r24, 0x33	; 51
     430:	18 f0       	brcs	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     432:	10 92 da 2c 	sts	0x2CDA, r1	; 0x802cda <b1Status>
     436:	07 c0       	rjmp	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	80 93 da 2c 	sts	0x2CDA, r24	; 0x802cda <b1Status>
     43e:	03 c0       	rjmp	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			}
		} else {
			b1Status = NOT_PRESSED;
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	80 93 da 2c 	sts	0x2CDA, r24	; 0x802cda <b1Status>
		}
		b1Count = 0;
     446:	10 92 5e 20 	sts	0x205E, r1	; 0x80205e <__data_end>
     44a:	10 92 5f 20 	sts	0x205F, r1	; 0x80205f <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     44e:	80 ea       	ldi	r24, 0xA0	; 160
     450:	96 e0       	ldi	r25, 0x06	; 6
     452:	fc 01       	movw	r30, r24
     454:	80 85       	ldd	r24, Z+8	; 0x08
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	80 72       	andi	r24, 0x20	; 32
     45c:	99 27       	eor	r25, r25
     45e:	95 95       	asr	r25
     460:	87 95       	ror	r24
     462:	95 95       	asr	r25
     464:	87 95       	ror	r24
     466:	95 95       	asr	r25
     468:	87 95       	ror	r24
     46a:	95 95       	asr	r25
     46c:	87 95       	ror	r24
     46e:	95 95       	asr	r25
     470:	87 95       	ror	r24
     472:	89 2b       	or	r24, r25
     474:	89 f4       	brne	.+34     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		if(b2Count < 60000) {
     476:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     47a:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     47e:	80 36       	cpi	r24, 0x60	; 96
     480:	9a 4e       	sbci	r25, 0xEA	; 234
     482:	20 f5       	brcc	.+72     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
			b2Count++;
     484:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     488:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <b2Count.3830>
     492:	90 93 61 20 	sts	0x2061, r25	; 0x802061 <b2Count.3830+0x1>
     496:	1a c0       	rjmp	.+52     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     498:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     49c:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     4a0:	0b 97       	sbiw	r24, 0x0b	; 11
     4a2:	68 f0       	brcs	.+26     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4a4:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     4a8:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     4ac:	c3 97       	sbiw	r24, 0x33	; 51
     4ae:	18 f0       	brcs	.+6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     4b0:	10 92 db 2c 	sts	0x2CDB, r1	; 0x802cdb <b2Status>
     4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 db 2c 	sts	0x2CDB, r24	; 0x802cdb <b2Status>
     4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
			}
		} else {
			b2Status = NOT_PRESSED;			
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	80 93 db 2c 	sts	0x2CDB, r24	; 0x802cdb <b2Status>
		}
		b2Count = 0;
     4c4:	10 92 60 20 	sts	0x2060, r1	; 0x802060 <b2Count.3830>
     4c8:	10 92 61 20 	sts	0x2061, r1	; 0x802061 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     4cc:	80 ea       	ldi	r24, 0xA0	; 160
     4ce:	96 e0       	ldi	r25, 0x06	; 6
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 85       	ldd	r24, Z+8	; 0x08
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	80 74       	andi	r24, 0x40	; 64
     4da:	99 27       	eor	r25, r25
     4dc:	08 2e       	mov	r0, r24
     4de:	89 2f       	mov	r24, r25
     4e0:	00 0c       	add	r0, r0
     4e2:	88 1f       	adc	r24, r24
     4e4:	99 0b       	sbc	r25, r25
     4e6:	00 0c       	add	r0, r0
     4e8:	88 1f       	adc	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	89 2b       	or	r24, r25
     4ee:	89 f4       	brne	.+34     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
		if(b3Count < 60000) {
     4f0:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     4f4:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     4f8:	80 36       	cpi	r24, 0x60	; 96
     4fa:	9a 4e       	sbci	r25, 0xEA	; 234
     4fc:	20 f5       	brcc	.+72     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
			b3Count++;
     4fe:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     502:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <b3Count.3831>
     50c:	90 93 63 20 	sts	0x2063, r25	; 0x802063 <b3Count.3831+0x1>
     510:	1a c0       	rjmp	.+52     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     512:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     516:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     51a:	0b 97       	sbiw	r24, 0x0b	; 11
     51c:	68 f0       	brcs	.+26     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     51e:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     522:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     526:	c3 97       	sbiw	r24, 0x33	; 51
     528:	18 f0       	brcs	.+6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     52a:	10 92 dc 2c 	sts	0x2CDC, r1	; 0x802cdc <b3Status>
     52e:	07 c0       	rjmp	.+14     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 dc 2c 	sts	0x2CDC, r24	; 0x802cdc <b3Status>
     536:	03 c0       	rjmp	.+6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
			}
		} else {
			b3Status = NOT_PRESSED;
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	80 93 dc 2c 	sts	0x2CDC, r24	; 0x802cdc <b3Status>
		}
		b3Count = 0;
     53e:	10 92 62 20 	sts	0x2062, r1	; 0x802062 <b3Count.3831>
     542:	10 92 63 20 	sts	0x2063, r1	; 0x802063 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     546:	80 ea       	ldi	r24, 0xA0	; 160
     548:	96 e0       	ldi	r25, 0x06	; 6
     54a:	fc 01       	movw	r30, r24
     54c:	80 85       	ldd	r24, Z+8	; 0x08
     54e:	88 23       	and	r24, r24
     550:	8c f0       	brlt	.+34     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
		if(b4Count < 60000) {
     552:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     556:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     55a:	80 36       	cpi	r24, 0x60	; 96
     55c:	9a 4e       	sbci	r25, 0xEA	; 234
     55e:	20 f5       	brcc	.+72     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			b4Count++;
     560:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     564:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	80 93 64 20 	sts	0x2064, r24	; 0x802064 <b4Count.3832>
     56e:	90 93 65 20 	sts	0x2065, r25	; 0x802065 <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     574:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     578:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     57c:	0b 97       	sbiw	r24, 0x0b	; 11
     57e:	68 f0       	brcs	.+26     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     580:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     584:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     588:	c3 97       	sbiw	r24, 0x33	; 51
     58a:	18 f0       	brcs	.+6      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     58c:	10 92 dd 2c 	sts	0x2CDD, r1	; 0x802cdd <b4Status>
     590:	07 c0       	rjmp	.+14     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	80 93 dd 2c 	sts	0x2CDD, r24	; 0x802cdd <b4Status>
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			}
		} else {
			b4Status = NOT_PRESSED;
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	80 93 dd 2c 	sts	0x2CDD, r24	; 0x802cdd <b4Status>
		}
		b4Count = 0;
     5a0:	10 92 64 20 	sts	0x2064, r1	; 0x802064 <b4Count.3832>
     5a4:	10 92 65 20 	sts	0x2065, r1	; 0x802065 <b4Count.3832+0x1>
	}
 }
     5a8:	00 00       	nop
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	88 2f       	mov	r24, r24
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	81 30       	cpi	r24, 0x01	; 1
     5c4:	91 05       	cpc	r25, r1
     5c6:	79 f0       	breq	.+30     	; 0x5e6 <getButtonPress+0x36>
     5c8:	82 30       	cpi	r24, 0x02	; 2
     5ca:	91 05       	cpc	r25, r1
     5cc:	1c f4       	brge	.+6      	; 0x5d4 <getButtonPress+0x24>
     5ce:	89 2b       	or	r24, r25
     5d0:	39 f0       	breq	.+14     	; 0x5e0 <getButtonPress+0x30>
     5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <getButtonPress+0x48>
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	91 05       	cpc	r25, r1
     5d8:	49 f0       	breq	.+18     	; 0x5ec <getButtonPress+0x3c>
     5da:	03 97       	sbiw	r24, 0x03	; 3
     5dc:	51 f0       	breq	.+20     	; 0x5f2 <getButtonPress+0x42>
     5de:	0c c0       	rjmp	.+24     	; 0x5f8 <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     5e0:	80 91 da 2c 	lds	r24, 0x2CDA	; 0x802cda <b1Status>
     5e4:	0a c0       	rjmp	.+20     	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     5e6:	80 91 db 2c 	lds	r24, 0x2CDB	; 0x802cdb <b2Status>
     5ea:	07 c0       	rjmp	.+14     	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     5ec:	80 91 dc 2c 	lds	r24, 0x2CDC	; 0x802cdc <b3Status>
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     5f2:	80 91 dd 2c 	lds	r24, 0x2CDD	; 0x802cdd <b4Status>
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	0f 90       	pop	r0
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     602:	0f 93       	push	r16
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	1f 92       	push	r1
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     60e:	2f b7       	in	r18, 0x3f	; 63
     610:	29 83       	std	Y+1, r18	; 0x01
     612:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     614:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     616:	fc 01       	movw	r30, r24
     618:	08 ed       	ldi	r16, 0xD8	; 216
     61a:	04 bf       	out	0x34, r16	; 52
     61c:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	8f bf       	out	0x3f, r24	; 63
#endif
}
     622:	0f 90       	pop	r0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	0f 91       	pop	r16
     62a:	08 95       	ret

0000062c <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     62c:	61 11       	cpse	r22, r1
     62e:	02 c0       	rjmp	.+4      	; 0x634 <CLKSYS_XOSC_Config+0x8>
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	01 c0       	rjmp	.+2      	; 0x636 <CLKSYS_XOSC_Config+0xa>
     634:	90 e2       	ldi	r25, 0x20	; 32
     636:	84 2b       	or	r24, r20
     638:	89 2b       	or	r24, r25
     63a:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     63e:	08 95       	ret

00000640 <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     640:	6f 71       	andi	r22, 0x1F	; 31
     642:	86 2b       	or	r24, r22
     644:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     648:	08 95       	ret

0000064a <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     64a:	e0 e5       	ldi	r30, 0x50	; 80
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	90 81       	ld	r25, Z
     650:	28 2f       	mov	r18, r24
     652:	20 95       	com	r18
     654:	92 23       	and	r25, r18
     656:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     658:	90 81       	ld	r25, Z
	return clkEnabled;
}
     65a:	89 23       	and	r24, r25
     65c:	08 95       	ret

0000065e <CLKSYS_Prescalers_Config>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     65e:	68 2b       	or	r22, r24
     660:	81 e4       	ldi	r24, 0x41	; 65
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 01 03 	call	0x602	; 0x602 <CCPWrite>
     668:	08 95       	ret

0000066a <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     672:	00 e4       	ldi	r16, 0x40	; 64
     674:	10 e0       	ldi	r17, 0x00	; 0
     676:	f8 01       	movw	r30, r16
     678:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
     67a:	68 7f       	andi	r22, 0xF8	; 248
     67c:	68 2b       	or	r22, r24
     67e:	80 e4       	ldi	r24, 0x40	; 64
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 01 03 	call	0x602	; 0x602 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     686:	f8 01       	movw	r30, r16
     688:	80 81       	ld	r24, Z
	return clkCtrl;
}
     68a:	8c 23       	and	r24, r28
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     694:	fc 01       	movw	r30, r24
     696:	90 81       	ld	r25, Z
     698:	90 7f       	andi	r25, 0xF0	; 240
     69a:	69 2b       	or	r22, r25
     69c:	60 83       	st	Z, r22
     69e:	08 95       	ret

000006a0 <TC0_ConfigWGM>:
     6a0:	fc 01       	movw	r30, r24
     6a2:	91 81       	ldd	r25, Z+1	; 0x01
     6a4:	98 7f       	andi	r25, 0xF8	; 248
     6a6:	69 2b       	or	r22, r25
     6a8:	61 83       	std	Z+1, r22	; 0x01
     6aa:	08 95       	ret

000006ac <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     6ac:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     6ae:	96 81       	ldd	r25, Z+6	; 0x06
     6b0:	9c 7f       	andi	r25, 0xFC	; 252
     6b2:	69 2b       	or	r22, r25
     6b4:	66 83       	std	Z+6, r22	; 0x06
     6b6:	08 95       	ret

000006b8 <software_reset>:
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     6b8:	00 00       	nop
     6ba:	88 ed       	ldi	r24, 0xD8	; 216
     6bc:	84 bf       	out	0x34, r24	; 52
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     6c4:	08 95       	ret

000006c6 <vApplicationStackOverflowHook>:
     6c6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <software_reset>
     6ca:	08 95       	ret

000006cc <xEventGroupCreate>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	80 e1       	ldi	r24, 0x10	; 16
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
     6d8:	ec 01       	movw	r28, r24
     6da:	00 97       	sbiw	r24, 0x00	; 0
     6dc:	41 f0       	breq	.+16     	; 0x6ee <xEventGroupCreate+0x22>
     6de:	fc 01       	movw	r30, r24
     6e0:	11 92       	st	Z+, r1
     6e2:	11 92       	st	Z+, r1
     6e4:	11 92       	st	Z+, r1
     6e6:	11 92       	st	Z+, r1
     6e8:	cf 01       	movw	r24, r30
     6ea:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
     6ee:	ce 01       	movw	r24, r28
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <xEventGroupWaitBits>:
     6f6:	2f 92       	push	r2
     6f8:	3f 92       	push	r3
     6fa:	4f 92       	push	r4
     6fc:	5f 92       	push	r5
     6fe:	6f 92       	push	r6
     700:	7f 92       	push	r7
     702:	8f 92       	push	r8
     704:	9f 92       	push	r9
     706:	af 92       	push	r10
     708:	bf 92       	push	r11
     70a:	cf 92       	push	r12
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
     71c:	4a 01       	movw	r8, r20
     71e:	5b 01       	movw	r10, r22
     720:	62 2e       	mov	r6, r18
     722:	70 2e       	mov	r7, r16
     724:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
     728:	28 80       	ld	r2, Y
     72a:	39 80       	ldd	r3, Y+1	; 0x01
     72c:	4a 80       	ldd	r4, Y+2	; 0x02
     72e:	5b 80       	ldd	r5, Y+3	; 0x03
     730:	01 11       	cpse	r16, r1
     732:	0d c0       	rjmp	.+26     	; 0x74e <xEventGroupWaitBits+0x58>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	b2 01       	movw	r22, r4
     738:	a1 01       	movw	r20, r2
     73a:	48 21       	and	r20, r8
     73c:	59 21       	and	r21, r9
     73e:	6a 21       	and	r22, r10
     740:	7b 21       	and	r23, r11
     742:	45 2b       	or	r20, r21
     744:	46 2b       	or	r20, r22
     746:	47 2b       	or	r20, r23
     748:	79 f4       	brne	.+30     	; 0x768 <xEventGroupWaitBits+0x72>
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	0d c0       	rjmp	.+26     	; 0x768 <xEventGroupWaitBits+0x72>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	b2 01       	movw	r22, r4
     752:	a1 01       	movw	r20, r2
     754:	48 21       	and	r20, r8
     756:	59 21       	and	r21, r9
     758:	6a 21       	and	r22, r10
     75a:	7b 21       	and	r23, r11
     75c:	48 15       	cp	r20, r8
     75e:	59 05       	cpc	r21, r9
     760:	6a 05       	cpc	r22, r10
     762:	7b 05       	cpc	r23, r11
     764:	09 f0       	breq	.+2      	; 0x768 <xEventGroupWaitBits+0x72>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	88 23       	and	r24, r24
     76a:	81 f0       	breq	.+32     	; 0x78c <xEventGroupWaitBits+0x96>
     76c:	66 20       	and	r6, r6
     76e:	09 f4       	brne	.+2      	; 0x772 <xEventGroupWaitBits+0x7c>
     770:	70 c0       	rjmp	.+224    	; 0x852 <xEventGroupWaitBits+0x15c>
     772:	80 94       	com	r8
     774:	90 94       	com	r9
     776:	a0 94       	com	r10
     778:	b0 94       	com	r11
     77a:	82 20       	and	r8, r2
     77c:	93 20       	and	r9, r3
     77e:	a4 20       	and	r10, r4
     780:	b5 20       	and	r11, r5
     782:	88 82       	st	Y, r8
     784:	99 82       	std	Y+1, r9	; 0x01
     786:	aa 82       	std	Y+2, r10	; 0x02
     788:	bb 82       	std	Y+3, r11	; 0x03
     78a:	63 c0       	rjmp	.+198    	; 0x852 <xEventGroupWaitBits+0x15c>
     78c:	c1 14       	cp	r12, r1
     78e:	d1 04       	cpc	r13, r1
     790:	e1 04       	cpc	r14, r1
     792:	f1 04       	cpc	r15, r1
     794:	09 f4       	brne	.+2      	; 0x798 <xEventGroupWaitBits+0xa2>
     796:	5d c0       	rjmp	.+186    	; 0x852 <xEventGroupWaitBits+0x15c>
     798:	66 20       	and	r6, r6
     79a:	29 f0       	breq	.+10     	; 0x7a6 <xEventGroupWaitBits+0xb0>
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <xEventGroupWaitBits+0xb6>
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	ba 01       	movw	r22, r20
     7ac:	71 10       	cpse	r7, r1
     7ae:	74 60       	ori	r23, 0x04	; 4
     7b0:	48 29       	or	r20, r8
     7b2:	59 29       	or	r21, r9
     7b4:	6a 29       	or	r22, r10
     7b6:	7b 29       	or	r23, r11
     7b8:	97 01       	movw	r18, r14
     7ba:	86 01       	movw	r16, r12
     7bc:	ce 01       	movw	r24, r28
     7be:	04 96       	adiw	r24, 0x04	; 4
     7c0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <vTaskPlaceOnUnorderedEventList>
     7c4:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     7c8:	81 11       	cpse	r24, r1
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <xEventGroupWaitBits+0xda>
     7cc:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
     7d0:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <uxTaskResetEventItemValue>
     7d4:	91 fd       	sbrc	r25, 1
     7d6:	39 c0       	rjmp	.+114    	; 0x84a <xEventGroupWaitBits+0x154>
     7d8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7dc:	ff 93       	push	r31
     7de:	f8 7f       	andi	r31, 0xF8	; 248
     7e0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7e4:	68 81       	ld	r22, Y
     7e6:	79 81       	ldd	r23, Y+1	; 0x01
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	9b 81       	ldd	r25, Y+3	; 0x03
     7ec:	71 10       	cpse	r7, r1
     7ee:	0d c0       	rjmp	.+26     	; 0x80a <xEventGroupWaitBits+0x114>
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	75 01       	movw	r14, r10
     7f4:	64 01       	movw	r12, r8
     7f6:	c6 22       	and	r12, r22
     7f8:	d7 22       	and	r13, r23
     7fa:	e8 22       	and	r14, r24
     7fc:	f9 22       	and	r15, r25
     7fe:	cd 28       	or	r12, r13
     800:	ce 28       	or	r12, r14
     802:	cf 28       	or	r12, r15
     804:	79 f4       	brne	.+30     	; 0x824 <xEventGroupWaitBits+0x12e>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	0d c0       	rjmp	.+26     	; 0x824 <xEventGroupWaitBits+0x12e>
     80a:	21 e0       	ldi	r18, 0x01	; 1
     80c:	75 01       	movw	r14, r10
     80e:	64 01       	movw	r12, r8
     810:	c6 22       	and	r12, r22
     812:	d7 22       	and	r13, r23
     814:	e8 22       	and	r14, r24
     816:	f9 22       	and	r15, r25
     818:	c8 14       	cp	r12, r8
     81a:	d9 04       	cpc	r13, r9
     81c:	ea 04       	cpc	r14, r10
     81e:	fb 04       	cpc	r15, r11
     820:	09 f0       	breq	.+2      	; 0x824 <xEventGroupWaitBits+0x12e>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	22 23       	and	r18, r18
     826:	71 f0       	breq	.+28     	; 0x844 <xEventGroupWaitBits+0x14e>
     828:	66 20       	and	r6, r6
     82a:	61 f0       	breq	.+24     	; 0x844 <xEventGroupWaitBits+0x14e>
     82c:	80 94       	com	r8
     82e:	90 94       	com	r9
     830:	a0 94       	com	r10
     832:	b0 94       	com	r11
     834:	86 22       	and	r8, r22
     836:	97 22       	and	r9, r23
     838:	a8 22       	and	r10, r24
     83a:	b9 22       	and	r11, r25
     83c:	88 82       	st	Y, r8
     83e:	99 82       	std	Y+1, r9	; 0x01
     840:	aa 82       	std	Y+2, r10	; 0x02
     842:	bb 82       	std	Y+3, r11	; 0x03
     844:	ff 91       	pop	r31
     846:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     84a:	1b 01       	movw	r2, r22
     84c:	2c 01       	movw	r4, r24
     84e:	55 24       	eor	r5, r5
     850:	02 c0       	rjmp	.+4      	; 0x856 <xEventGroupWaitBits+0x160>
     852:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     856:	c2 01       	movw	r24, r4
     858:	b1 01       	movw	r22, r2
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	af 90       	pop	r10
     86e:	9f 90       	pop	r9
     870:	8f 90       	pop	r8
     872:	7f 90       	pop	r7
     874:	6f 90       	pop	r6
     876:	5f 90       	pop	r5
     878:	4f 90       	pop	r4
     87a:	3f 90       	pop	r3
     87c:	2f 90       	pop	r2
     87e:	08 95       	ret

00000880 <xEventGroupClearBits>:
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     888:	ff 93       	push	r31
     88a:	f8 7f       	andi	r31, 0xF8	; 248
     88c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     890:	fc 01       	movw	r30, r24
     892:	00 81       	ld	r16, Z
     894:	11 81       	ldd	r17, Z+1	; 0x01
     896:	22 81       	ldd	r18, Z+2	; 0x02
     898:	33 81       	ldd	r19, Z+3	; 0x03
     89a:	40 95       	com	r20
     89c:	50 95       	com	r21
     89e:	60 95       	com	r22
     8a0:	70 95       	com	r23
     8a2:	40 23       	and	r20, r16
     8a4:	51 23       	and	r21, r17
     8a6:	62 23       	and	r22, r18
     8a8:	73 23       	and	r23, r19
     8aa:	40 83       	st	Z, r20
     8ac:	51 83       	std	Z+1, r21	; 0x01
     8ae:	62 83       	std	Z+2, r22	; 0x02
     8b0:	73 83       	std	Z+3, r23	; 0x03
     8b2:	ff 91       	pop	r31
     8b4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     8b8:	c9 01       	movw	r24, r18
     8ba:	b8 01       	movw	r22, r16
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <xEventGroupSetBits>:
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
     8e0:	6a 01       	movw	r12, r20
     8e2:	7b 01       	movw	r14, r22
     8e4:	8c 01       	movw	r16, r24
     8e6:	09 5f       	subi	r16, 0xF9	; 249
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
     8ee:	eb 85       	ldd	r30, Y+11	; 0x0b
     8f0:	fc 85       	ldd	r31, Y+12	; 0x0c
     8f2:	88 81       	ld	r24, Y
     8f4:	99 81       	ldd	r25, Y+1	; 0x01
     8f6:	aa 81       	ldd	r26, Y+2	; 0x02
     8f8:	bb 81       	ldd	r27, Y+3	; 0x03
     8fa:	c8 2a       	or	r12, r24
     8fc:	d9 2a       	or	r13, r25
     8fe:	ea 2a       	or	r14, r26
     900:	fb 2a       	or	r15, r27
     902:	c8 82       	st	Y, r12
     904:	d9 82       	std	Y+1, r13	; 0x01
     906:	ea 82       	std	Y+2, r14	; 0x02
     908:	fb 82       	std	Y+3, r15	; 0x03
     90a:	0e 17       	cp	r16, r30
     90c:	1f 07       	cpc	r17, r31
     90e:	09 f4       	brne	.+2      	; 0x912 <xEventGroupSetBits+0x50>
     910:	42 c0       	rjmp	.+132    	; 0x996 <xEventGroupSetBits+0xd4>
     912:	c1 2c       	mov	r12, r1
     914:	d1 2c       	mov	r13, r1
     916:	76 01       	movw	r14, r12
     918:	a4 80       	ldd	r10, Z+4	; 0x04
     91a:	b5 80       	ldd	r11, Z+5	; 0x05
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	a2 81       	ldd	r26, Z+2	; 0x02
     922:	b3 81       	ldd	r27, Z+3	; 0x03
     924:	ac 01       	movw	r20, r24
     926:	bd 01       	movw	r22, r26
     928:	77 27       	eor	r23, r23
     92a:	b2 fd       	sbrc	r27, 2
     92c:	0f c0       	rjmp	.+30     	; 0x94c <xEventGroupSetBits+0x8a>
     92e:	48 80       	ld	r4, Y
     930:	59 80       	ldd	r5, Y+1	; 0x01
     932:	6a 80       	ldd	r6, Y+2	; 0x02
     934:	7b 80       	ldd	r7, Y+3	; 0x03
     936:	44 22       	and	r4, r20
     938:	55 22       	and	r5, r21
     93a:	66 22       	and	r6, r22
     93c:	77 22       	and	r7, r23
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	45 28       	or	r4, r5
     942:	46 28       	or	r4, r6
     944:	47 28       	or	r4, r7
     946:	89 f4       	brne	.+34     	; 0x96a <xEventGroupSetBits+0xa8>
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	0f c0       	rjmp	.+30     	; 0x96a <xEventGroupSetBits+0xa8>
     94c:	48 80       	ld	r4, Y
     94e:	59 80       	ldd	r5, Y+1	; 0x01
     950:	6a 80       	ldd	r6, Y+2	; 0x02
     952:	7b 80       	ldd	r7, Y+3	; 0x03
     954:	44 22       	and	r4, r20
     956:	55 22       	and	r5, r21
     958:	66 22       	and	r6, r22
     95a:	77 22       	and	r7, r23
     95c:	21 e0       	ldi	r18, 0x01	; 1
     95e:	44 16       	cp	r4, r20
     960:	55 06       	cpc	r5, r21
     962:	66 06       	cpc	r6, r22
     964:	77 06       	cpc	r7, r23
     966:	09 f0       	breq	.+2      	; 0x96a <xEventGroupSetBits+0xa8>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	22 23       	and	r18, r18
     96c:	71 f0       	breq	.+28     	; 0x98a <xEventGroupSetBits+0xc8>
     96e:	b0 ff       	sbrs	r27, 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <xEventGroupSetBits+0xb8>
     972:	c4 2a       	or	r12, r20
     974:	d5 2a       	or	r13, r21
     976:	e6 2a       	or	r14, r22
     978:	f7 2a       	or	r15, r23
     97a:	48 81       	ld	r20, Y
     97c:	59 81       	ldd	r21, Y+1	; 0x01
     97e:	6a 81       	ldd	r22, Y+2	; 0x02
     980:	7b 81       	ldd	r23, Y+3	; 0x03
     982:	72 60       	ori	r23, 0x02	; 2
     984:	cf 01       	movw	r24, r30
     986:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <vTaskRemoveFromUnorderedEventList>
     98a:	ea 2d       	mov	r30, r10
     98c:	fb 2d       	mov	r31, r11
     98e:	0e 17       	cp	r16, r30
     990:	1f 07       	cpc	r17, r31
     992:	11 f6       	brne	.-124    	; 0x918 <xEventGroupSetBits+0x56>
     994:	03 c0       	rjmp	.+6      	; 0x99c <xEventGroupSetBits+0xda>
     996:	c1 2c       	mov	r12, r1
     998:	d1 2c       	mov	r13, r1
     99a:	76 01       	movw	r14, r12
     99c:	c0 94       	com	r12
     99e:	d0 94       	com	r13
     9a0:	e0 94       	com	r14
     9a2:	f0 94       	com	r15
     9a4:	88 81       	ld	r24, Y
     9a6:	99 81       	ldd	r25, Y+1	; 0x01
     9a8:	aa 81       	ldd	r26, Y+2	; 0x02
     9aa:	bb 81       	ldd	r27, Y+3	; 0x03
     9ac:	c8 22       	and	r12, r24
     9ae:	d9 22       	and	r13, r25
     9b0:	ea 22       	and	r14, r26
     9b2:	fb 22       	and	r15, r27
     9b4:	c8 82       	st	Y, r12
     9b6:	d9 82       	std	Y+1, r13	; 0x01
     9b8:	ea 82       	std	Y+2, r14	; 0x02
     9ba:	fb 82       	std	Y+3, r15	; 0x03
     9bc:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     9c0:	68 81       	ld	r22, Y
     9c2:	79 81       	ldd	r23, Y+1	; 0x01
     9c4:	8a 81       	ldd	r24, Y+2	; 0x02
     9c6:	9b 81       	ldd	r25, Y+3	; 0x03
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	cf 90       	pop	r12
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	7f 90       	pop	r7
     9de:	6f 90       	pop	r6
     9e0:	5f 90       	pop	r5
     9e2:	4f 90       	pop	r4
     9e4:	08 95       	ret

000009e6 <vEventGroupSetBitsCallback>:
     9e6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
     9ea:	08 95       	ret

000009ec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     9f0:	89 01       	movw	r16, r18
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	bc 01       	movw	r22, r24
     9f8:	83 ef       	ldi	r24, 0xF3	; 243
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	0e 94 c3 12 	call	0x2586	; 0x2586 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	08 95       	ret

00000a06 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     a0c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     a10:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <xNextFreeByte>
     a14:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <xNextFreeByte+0x1>
     a18:	c9 01       	movw	r24, r18
     a1a:	8c 0f       	add	r24, r28
     a1c:	9d 1f       	adc	r25, r29
     a1e:	88 3b       	cpi	r24, 0xB8	; 184
     a20:	4b e0       	ldi	r20, 0x0B	; 11
     a22:	94 07       	cpc	r25, r20
     a24:	58 f4       	brcc	.+22     	; 0xa3c <pvPortMalloc+0x36>
     a26:	28 17       	cp	r18, r24
     a28:	39 07       	cpc	r19, r25
     a2a:	58 f4       	brcc	.+22     	; 0xa42 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     a2c:	e9 01       	movw	r28, r18
     a2e:	c8 59       	subi	r28, 0x98	; 152
     a30:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     a32:	80 93 66 20 	sts	0x2066, r24	; 0x802066 <xNextFreeByte>
     a36:	90 93 67 20 	sts	0x2067, r25	; 0x802067 <xNextFreeByte+0x1>
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     a3c:	c0 e0       	ldi	r28, 0x00	; 0
     a3e:	d0 e0       	ldi	r29, 0x00	; 0
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <pvPortMalloc+0x40>
     a42:	c0 e0       	ldi	r28, 0x00	; 0
     a44:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     a46:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     a4a:	ce 01       	movw	r24, r28
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a52:	08 95       	ret

00000a54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a54:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a56:	03 96       	adiw	r24, 0x03	; 3
     a58:	81 83       	std	Z+1, r24	; 0x01
     a5a:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     a5c:	4f ef       	ldi	r20, 0xFF	; 255
     a5e:	5f ef       	ldi	r21, 0xFF	; 255
     a60:	ba 01       	movw	r22, r20
     a62:	43 83       	std	Z+3, r20	; 0x03
     a64:	54 83       	std	Z+4, r21	; 0x04
     a66:	65 83       	std	Z+5, r22	; 0x05
     a68:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a6a:	87 83       	std	Z+7, r24	; 0x07
     a6c:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a6e:	81 87       	std	Z+9, r24	; 0x09
     a70:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a72:	10 82       	st	Z, r1
     a74:	08 95       	ret

00000a76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     a76:	fc 01       	movw	r30, r24
     a78:	12 86       	std	Z+10, r1	; 0x0a
     a7a:	13 86       	std	Z+11, r1	; 0x0b
     a7c:	08 95       	ret

00000a7e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	9c 01       	movw	r18, r24
     a84:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     a86:	dc 01       	movw	r26, r24
     a88:	11 96       	adiw	r26, 0x01	; 1
     a8a:	cd 91       	ld	r28, X+
     a8c:	dc 91       	ld	r29, X
     a8e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     a90:	c4 83       	std	Z+4, r28	; 0x04
     a92:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a94:	8e 81       	ldd	r24, Y+6	; 0x06
     a96:	9f 81       	ldd	r25, Y+7	; 0x07
     a98:	86 83       	std	Z+6, r24	; 0x06
     a9a:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     a9c:	8e 81       	ldd	r24, Y+6	; 0x06
     a9e:	9f 81       	ldd	r25, Y+7	; 0x07
     aa0:	dc 01       	movw	r26, r24
     aa2:	14 96       	adiw	r26, 0x04	; 4
     aa4:	6d 93       	st	X+, r22
     aa6:	7c 93       	st	X, r23
     aa8:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     aaa:	6e 83       	std	Y+6, r22	; 0x06
     aac:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     aae:	22 87       	std	Z+10, r18	; 0x0a
     ab0:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     ab2:	f9 01       	movw	r30, r18
     ab4:	80 81       	ld	r24, Z
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	80 83       	st	Z, r24
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     aca:	08 81       	ld	r16, Y
     acc:	19 81       	ldd	r17, Y+1	; 0x01
     ace:	2a 81       	ldd	r18, Y+2	; 0x02
     ad0:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     ad2:	0f 3f       	cpi	r16, 0xFF	; 255
     ad4:	4f ef       	ldi	r20, 0xFF	; 255
     ad6:	14 07       	cpc	r17, r20
     ad8:	24 07       	cpc	r18, r20
     ada:	34 07       	cpc	r19, r20
     adc:	21 f4       	brne	.+8      	; 0xae6 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     ade:	fc 01       	movw	r30, r24
     ae0:	a1 85       	ldd	r26, Z+9	; 0x09
     ae2:	b2 85       	ldd	r27, Z+10	; 0x0a
     ae4:	11 c0       	rjmp	.+34     	; 0xb08 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ae6:	dc 01       	movw	r26, r24
     ae8:	13 96       	adiw	r26, 0x03	; 3
     aea:	01 c0       	rjmp	.+2      	; 0xaee <vListInsert+0x2e>
     aec:	df 01       	movw	r26, r30
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	ed 91       	ld	r30, X+
     af2:	fc 91       	ld	r31, X
     af4:	15 97       	sbiw	r26, 0x05	; 5
     af6:	40 81       	ld	r20, Z
     af8:	51 81       	ldd	r21, Z+1	; 0x01
     afa:	62 81       	ldd	r22, Z+2	; 0x02
     afc:	73 81       	ldd	r23, Z+3	; 0x03
     afe:	04 17       	cp	r16, r20
     b00:	15 07       	cpc	r17, r21
     b02:	26 07       	cpc	r18, r22
     b04:	37 07       	cpc	r19, r23
     b06:	90 f7       	brcc	.-28     	; 0xaec <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     b08:	14 96       	adiw	r26, 0x04	; 4
     b0a:	ed 91       	ld	r30, X+
     b0c:	fc 91       	ld	r31, X
     b0e:	15 97       	sbiw	r26, 0x05	; 5
     b10:	ec 83       	std	Y+4, r30	; 0x04
     b12:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b14:	c6 83       	std	Z+6, r28	; 0x06
     b16:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     b18:	ae 83       	std	Y+6, r26	; 0x06
     b1a:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     b1c:	14 96       	adiw	r26, 0x04	; 4
     b1e:	cd 93       	st	X+, r28
     b20:	dc 93       	st	X, r29
     b22:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     b24:	8a 87       	std	Y+10, r24	; 0x0a
     b26:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     b28:	fc 01       	movw	r30, r24
     b2a:	20 81       	ld	r18, Z
     b2c:	2f 5f       	subi	r18, 0xFF	; 255
     b2e:	20 83       	st	Z, r18
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	08 95       	ret

00000b3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     b40:	a2 85       	ldd	r26, Z+10	; 0x0a
     b42:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b44:	c4 81       	ldd	r28, Z+4	; 0x04
     b46:	d5 81       	ldd	r29, Z+5	; 0x05
     b48:	86 81       	ldd	r24, Z+6	; 0x06
     b4a:	97 81       	ldd	r25, Z+7	; 0x07
     b4c:	8e 83       	std	Y+6, r24	; 0x06
     b4e:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b50:	c6 81       	ldd	r28, Z+6	; 0x06
     b52:	d7 81       	ldd	r29, Z+7	; 0x07
     b54:	84 81       	ldd	r24, Z+4	; 0x04
     b56:	95 81       	ldd	r25, Z+5	; 0x05
     b58:	8c 83       	std	Y+4, r24	; 0x04
     b5a:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	12 97       	sbiw	r26, 0x02	; 2
     b64:	e8 17       	cp	r30, r24
     b66:	f9 07       	cpc	r31, r25
     b68:	31 f4       	brne	.+12     	; 0xb76 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     b6a:	86 81       	ldd	r24, Z+6	; 0x06
     b6c:	97 81       	ldd	r25, Z+7	; 0x07
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	8d 93       	st	X+, r24
     b72:	9c 93       	st	X, r25
     b74:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     b76:	12 86       	std	Z+10, r1	; 0x0a
     b78:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     b7a:	8c 91       	ld	r24, X
     b7c:	81 50       	subi	r24, 0x01	; 1
     b7e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     b80:	8c 91       	ld	r24, X
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <_portSetInterruptMaskFromIsr>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     b88:	e0 ea       	ldi	r30, 0xA0	; 160
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	92 81       	ldd	r25, Z+2	; 0x02
     b90:	98 7f       	andi	r25, 0xF8	; 248
     b92:	92 83       	std	Z+2, r25	; 0x02
     b94:	08 95       	ret

00000b96 <pxPortInitialiseStack>:
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	31 e1       	ldi	r19, 0x11	; 17
     ba0:	fc 01       	movw	r30, r24
     ba2:	30 83       	st	Z, r19
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	22 e2       	ldi	r18, 0x22	; 34
     ba8:	20 83       	st	Z, r18
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	a3 e3       	ldi	r26, 0x33	; 51
     bae:	a0 83       	st	Z, r26
     bb0:	6b 01       	movw	r12, r22
     bb2:	e1 2c       	mov	r14, r1
     bb4:	f1 2c       	mov	r15, r1
     bb6:	31 97       	sbiw	r30, 0x01	; 1
     bb8:	60 83       	st	Z, r22
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	d0 82       	st	Z, r13
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	e0 82       	st	Z, r14
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	61 e3       	ldi	r22, 0x31	; 49
     bc6:	60 83       	st	Z, r22
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	60 e8       	ldi	r22, 0x80	; 128
     bcc:	60 83       	st	Z, r22
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	67 e8       	ldi	r22, 0x87	; 135
     bd2:	60 83       	st	Z, r22
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	10 82       	st	Z, r1
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	10 82       	st	Z, r1
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	62 e0       	ldi	r22, 0x02	; 2
     be0:	60 83       	st	Z, r22
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	60 83       	st	Z, r22
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	64 e0       	ldi	r22, 0x04	; 4
     bec:	60 83       	st	Z, r22
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	65 e0       	ldi	r22, 0x05	; 5
     bf2:	60 83       	st	Z, r22
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	66 e0       	ldi	r22, 0x06	; 6
     bf8:	60 83       	st	Z, r22
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	67 e0       	ldi	r22, 0x07	; 7
     bfe:	60 83       	st	Z, r22
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	68 e0       	ldi	r22, 0x08	; 8
     c04:	60 83       	st	Z, r22
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	69 e0       	ldi	r22, 0x09	; 9
     c0a:	60 83       	st	Z, r22
     c0c:	31 97       	sbiw	r30, 0x01	; 1
     c0e:	60 e1       	ldi	r22, 0x10	; 16
     c10:	60 83       	st	Z, r22
     c12:	31 97       	sbiw	r30, 0x01	; 1
     c14:	30 83       	st	Z, r19
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	32 e1       	ldi	r19, 0x12	; 18
     c1a:	30 83       	st	Z, r19
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	33 e1       	ldi	r19, 0x13	; 19
     c20:	30 83       	st	Z, r19
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	34 e1       	ldi	r19, 0x14	; 20
     c26:	30 83       	st	Z, r19
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	35 e1       	ldi	r19, 0x15	; 21
     c2c:	30 83       	st	Z, r19
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	36 e1       	ldi	r19, 0x16	; 22
     c32:	30 83       	st	Z, r19
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	37 e1       	ldi	r19, 0x17	; 23
     c38:	30 83       	st	Z, r19
     c3a:	31 97       	sbiw	r30, 0x01	; 1
     c3c:	38 e1       	ldi	r19, 0x18	; 24
     c3e:	30 83       	st	Z, r19
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	39 e1       	ldi	r19, 0x19	; 25
     c44:	30 83       	st	Z, r19
     c46:	31 97       	sbiw	r30, 0x01	; 1
     c48:	30 e2       	ldi	r19, 0x20	; 32
     c4a:	30 83       	st	Z, r19
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	31 e2       	ldi	r19, 0x21	; 33
     c50:	30 83       	st	Z, r19
     c52:	31 97       	sbiw	r30, 0x01	; 1
     c54:	20 83       	st	Z, r18
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	23 e2       	ldi	r18, 0x23	; 35
     c5a:	20 83       	st	Z, r18
     c5c:	6a 01       	movw	r12, r20
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	40 83       	st	Z, r20
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	d0 82       	st	Z, r13
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	26 e2       	ldi	r18, 0x26	; 38
     c6a:	20 83       	st	Z, r18
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	27 e2       	ldi	r18, 0x27	; 39
     c70:	20 83       	st	Z, r18
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	28 e2       	ldi	r18, 0x28	; 40
     c76:	20 83       	st	Z, r18
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	29 e2       	ldi	r18, 0x29	; 41
     c7c:	20 83       	st	Z, r18
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	20 e3       	ldi	r18, 0x30	; 48
     c82:	20 83       	st	Z, r18
     c84:	88 97       	sbiw	r24, 0x28	; 40
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
     c8e:	08 95       	ret

00000c90 <xPortStartScheduler>:
     c90:	83 ef       	ldi	r24, 0xF3	; 243
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     c98:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     c9c:	65 e0       	ldi	r22, 0x05	; 5
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	98 e0       	ldi	r25, 0x08	; 8
     ca2:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	98 e0       	ldi	r25, 0x08	; 8
     cac:	0e 94 56 03 	call	0x6ac	; 0x6ac <TC0_SetOverflowIntLevel>
     cb0:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     cb4:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     cb8:	0d 90       	ld	r0, X+
     cba:	0d be       	out	0x3d, r0	; 61
     cbc:	0d 90       	ld	r0, X+
     cbe:	0e be       	out	0x3e, r0	; 62
     cc0:	ef 91       	pop	r30
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	7f 90       	pop	r7
     cf0:	6f 90       	pop	r6
     cf2:	5f 90       	pop	r5
     cf4:	4f 90       	pop	r4
     cf6:	3f 90       	pop	r3
     cf8:	2f 90       	pop	r2
     cfa:	1f 90       	pop	r1
     cfc:	0f 90       	pop	r0
     cfe:	ff 91       	pop	r31
     d00:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d04:	ff 91       	pop	r31
     d06:	ff bf       	out	0x3f, r31	; 63
     d08:	ff 91       	pop	r31
     d0a:	08 95       	ret
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	08 95       	ret

00000d10 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d10:	ff 93       	push	r31
     d12:	ff b7       	in	r31, 0x3f	; 63
     d14:	ff 93       	push	r31
     d16:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d1a:	ff 93       	push	r31
     d1c:	f8 7f       	andi	r31, 0xF8	; 248
     d1e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d22:	0f 92       	push	r0
     d24:	1f 92       	push	r1
     d26:	11 24       	eor	r1, r1
     d28:	2f 92       	push	r2
     d2a:	3f 92       	push	r3
     d2c:	4f 92       	push	r4
     d2e:	5f 92       	push	r5
     d30:	6f 92       	push	r6
     d32:	7f 92       	push	r7
     d34:	8f 92       	push	r8
     d36:	9f 92       	push	r9
     d38:	af 92       	push	r10
     d3a:	bf 92       	push	r11
     d3c:	cf 92       	push	r12
     d3e:	df 92       	push	r13
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ef 93       	push	r30
     d62:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     d66:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     d6a:	0d b6       	in	r0, 0x3d	; 61
     d6c:	0d 92       	st	X+, r0
     d6e:	0e b6       	in	r0, 0x3e	; 62
     d70:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d72:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d76:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     d7a:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     d7e:	0d 90       	ld	r0, X+
     d80:	0d be       	out	0x3d, r0	; 61
     d82:	0d 90       	ld	r0, X+
     d84:	0e be       	out	0x3e, r0	; 62
     d86:	ef 91       	pop	r30
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	9f 90       	pop	r9
     db2:	8f 90       	pop	r8
     db4:	7f 90       	pop	r7
     db6:	6f 90       	pop	r6
     db8:	5f 90       	pop	r5
     dba:	4f 90       	pop	r4
     dbc:	3f 90       	pop	r3
     dbe:	2f 90       	pop	r2
     dc0:	1f 90       	pop	r1
     dc2:	0f 90       	pop	r0
     dc4:	ff 91       	pop	r31
     dc6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     dca:	ff 91       	pop	r31
     dcc:	ff bf       	out	0x3f, r31	; 63
     dce:	ff 91       	pop	r31
	asm volatile ( "ret" );
     dd0:	08 95       	ret

00000dd2 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     dd2:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     dd4:	90 91 de 2c 	lds	r25, 0x2CDE	; 0x802cde <intTaskSwitchPending>
     dd8:	89 2b       	or	r24, r25
     dda:	80 93 de 2c 	sts	0x2CDE, r24	; 0x802cde <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     dde:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     de2:	91 30       	cpi	r25, 0x01	; 1
     de4:	41 f0       	breq	.+16     	; 0xdf6 <portTaskSwitchContext+0x24>
     de6:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     dea:	92 30       	cpi	r25, 0x02	; 2
     dec:	21 f0       	breq	.+8      	; 0xdf6 <portTaskSwitchContext+0x24>
     dee:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	59 f4       	brne	.+22     	; 0xe0c <portTaskSwitchContext+0x3a>
     df6:	88 23       	and	r24, r24
     df8:	49 f0       	breq	.+18     	; 0xe0c <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     dfa:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
     dfe:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     e00:	10 92 de 2c 	sts	0x2CDE, r1	; 0x802cde <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     e04:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     e08:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		}                                          					
	}
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     e10:	ff 93       	push	r31
     e12:	ff b7       	in	r31, 0x3f	; 63
     e14:	ff 93       	push	r31
     e16:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e1a:	ff 93       	push	r31
     e1c:	f8 7f       	andi	r31, 0xF8	; 248
     e1e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e22:	0f 92       	push	r0
     e24:	1f 92       	push	r1
     e26:	11 24       	eor	r1, r1
     e28:	2f 92       	push	r2
     e2a:	3f 92       	push	r3
     e2c:	4f 92       	push	r4
     e2e:	5f 92       	push	r5
     e30:	6f 92       	push	r6
     e32:	7f 92       	push	r7
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	ef 93       	push	r30
     e62:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     e66:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0
	//
	static void portTaskIncrementTick( void )
	{
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
     e72:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
     e76:	c8 2f       	mov	r28, r24
		xTaskIncrementTick();
     e78:	0e 94 8f 0c 	call	0x191e	; 0x191e <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
     e7c:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
		portTaskIncrementTick();
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <portTaskSwitchContext>
     e86:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     e8a:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     e8e:	0d 90       	ld	r0, X+
     e90:	0d be       	out	0x3d, r0	; 61
     e92:	0d 90       	ld	r0, X+
     e94:	0e be       	out	0x3e, r0	; 62
     e96:	ef 91       	pop	r30
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	8f 90       	pop	r8
     ec4:	7f 90       	pop	r7
     ec6:	6f 90       	pop	r6
     ec8:	5f 90       	pop	r5
     eca:	4f 90       	pop	r4
     ecc:	3f 90       	pop	r3
     ece:	2f 90       	pop	r2
     ed0:	1f 90       	pop	r1
     ed2:	0f 90       	pop	r0
     ed4:	ff 91       	pop	r31
     ed6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eda:	ff 91       	pop	r31
     edc:	ff bf       	out	0x3f, r31	; 63
     ede:	ff 91       	pop	r31
     ee0:	18 95       	reti

00000ee2 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     ee2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ee6:	ff 93       	push	r31
     ee8:	f8 7f       	andi	r31, 0xF8	; 248
     eea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eee:	fc 01       	movw	r30, r24
     ef0:	96 8d       	ldd	r25, Z+30	; 0x1e
     ef2:	ff 91       	pop	r31
     ef4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	91 11       	cpse	r25, r1
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 95       	ret

00000f00 <prvIsQueueFull>:
     f00:	dc 01       	movw	r26, r24
     f02:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f06:	ff 93       	push	r31
     f08:	f8 7f       	andi	r31, 0xF8	; 248
     f0a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f0e:	5e 96       	adiw	r26, 0x1e	; 30
     f10:	9c 91       	ld	r25, X
     f12:	5e 97       	sbiw	r26, 0x1e	; 30
     f14:	ff 91       	pop	r31
     f16:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	5f 96       	adiw	r26, 0x1f	; 31
     f1e:	2c 91       	ld	r18, X
     f20:	29 13       	cpse	r18, r25
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret

00000f26 <prvCopyDataToQueue>:
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	ec 01       	movw	r28, r24
     f30:	04 2f       	mov	r16, r20
     f32:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f34:	48 a1       	ldd	r20, Y+32	; 0x20
     f36:	44 23       	and	r20, r20
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <prvCopyDataToQueue+0x82>
     f3a:	01 11       	cpse	r16, r1
     f3c:	16 c0       	rjmp	.+44     	; 0xf6a <prvCopyDataToQueue+0x44>
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <memcpy>
     f48:	28 a1       	ldd	r18, Y+32	; 0x20
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	82 0f       	add	r24, r18
     f50:	91 1d       	adc	r25, r1
     f52:	8c 83       	std	Y+4, r24	; 0x04
     f54:	9d 83       	std	Y+5, r25	; 0x05
     f56:	2a 81       	ldd	r18, Y+2	; 0x02
     f58:	3b 81       	ldd	r19, Y+3	; 0x03
     f5a:	82 17       	cp	r24, r18
     f5c:	93 07       	cpc	r25, r19
     f5e:	20 f1       	brcs	.+72     	; 0xfa8 <prvCopyDataToQueue+0x82>
     f60:	88 81       	ld	r24, Y
     f62:	99 81       	ldd	r25, Y+1	; 0x01
     f64:	8c 83       	std	Y+4, r24	; 0x04
     f66:	9d 83       	std	Y+5, r25	; 0x05
     f68:	1f c0       	rjmp	.+62     	; 0xfa8 <prvCopyDataToQueue+0x82>
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	8e 81       	ldd	r24, Y+6	; 0x06
     f6e:	9f 81       	ldd	r25, Y+7	; 0x07
     f70:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <memcpy>
     f74:	88 a1       	ldd	r24, Y+32	; 0x20
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	91 95       	neg	r25
     f7a:	81 95       	neg	r24
     f7c:	91 09       	sbc	r25, r1
     f7e:	2e 81       	ldd	r18, Y+6	; 0x06
     f80:	3f 81       	ldd	r19, Y+7	; 0x07
     f82:	28 0f       	add	r18, r24
     f84:	39 1f       	adc	r19, r25
     f86:	2e 83       	std	Y+6, r18	; 0x06
     f88:	3f 83       	std	Y+7, r19	; 0x07
     f8a:	48 81       	ld	r20, Y
     f8c:	59 81       	ldd	r21, Y+1	; 0x01
     f8e:	24 17       	cp	r18, r20
     f90:	35 07       	cpc	r19, r21
     f92:	30 f4       	brcc	.+12     	; 0xfa0 <prvCopyDataToQueue+0x7a>
     f94:	2a 81       	ldd	r18, Y+2	; 0x02
     f96:	3b 81       	ldd	r19, Y+3	; 0x03
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	8e 83       	std	Y+6, r24	; 0x06
     f9e:	9f 83       	std	Y+7, r25	; 0x07
     fa0:	02 30       	cpi	r16, 0x02	; 2
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <prvCopyDataToQueue+0x82>
     fa4:	11 11       	cpse	r17, r1
     fa6:	11 50       	subi	r17, 0x01	; 1
     fa8:	1f 5f       	subi	r17, 0xFF	; 255
     faa:	1e 8f       	std	Y+30, r17	; 0x1e
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	08 95       	ret

00000fb8 <prvCopyDataFromQueue>:
     fb8:	fc 01       	movw	r30, r24
     fba:	40 a1       	ldd	r20, Z+32	; 0x20
     fbc:	44 23       	and	r20, r20
     fbe:	a9 f0       	breq	.+42     	; 0xfea <prvCopyDataFromQueue+0x32>
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	26 81       	ldd	r18, Z+6	; 0x06
     fc4:	37 81       	ldd	r19, Z+7	; 0x07
     fc6:	24 0f       	add	r18, r20
     fc8:	35 1f       	adc	r19, r21
     fca:	26 83       	std	Z+6, r18	; 0x06
     fcc:	37 83       	std	Z+7, r19	; 0x07
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	28 17       	cp	r18, r24
     fd4:	39 07       	cpc	r19, r25
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <prvCopyDataFromQueue+0x28>
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	86 83       	std	Z+6, r24	; 0x06
     fde:	97 83       	std	Z+7, r25	; 0x07
     fe0:	cb 01       	movw	r24, r22
     fe2:	66 81       	ldd	r22, Z+6	; 0x06
     fe4:	77 81       	ldd	r23, Z+7	; 0x07
     fe6:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <memcpy>
     fea:	08 95       	ret

00000fec <prvUnlockQueue>:
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	8c 01       	movw	r16, r24
     ff8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ffc:	ff 93       	push	r31
     ffe:	f8 7f       	andi	r31, 0xF8	; 248
    1000:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1004:	fc 01       	movw	r30, r24
    1006:	c2 a1       	ldd	r28, Z+34	; 0x22
    1008:	1c 16       	cp	r1, r28
    100a:	ac f4       	brge	.+42     	; 0x1036 <prvUnlockQueue+0x4a>
    100c:	83 89       	ldd	r24, Z+19	; 0x13
    100e:	81 11       	cpse	r24, r1
    1010:	06 c0       	rjmp	.+12     	; 0x101e <prvUnlockQueue+0x32>
    1012:	11 c0       	rjmp	.+34     	; 0x1036 <prvUnlockQueue+0x4a>
    1014:	f8 01       	movw	r30, r16
    1016:	83 89       	ldd	r24, Z+19	; 0x13
    1018:	81 11       	cpse	r24, r1
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <prvUnlockQueue+0x3a>
    101c:	0c c0       	rjmp	.+24     	; 0x1036 <prvUnlockQueue+0x4a>
    101e:	78 01       	movw	r14, r16
    1020:	f3 e1       	ldi	r31, 0x13	; 19
    1022:	ef 0e       	add	r14, r31
    1024:	f1 1c       	adc	r15, r1
    1026:	c7 01       	movw	r24, r14
    1028:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    102c:	81 11       	cpse	r24, r1
    102e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskMissedYield>
    1032:	c1 50       	subi	r28, 0x01	; 1
    1034:	79 f7       	brne	.-34     	; 0x1014 <prvUnlockQueue+0x28>
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	f8 01       	movw	r30, r16
    103a:	82 a3       	std	Z+34, r24	; 0x22
    103c:	ff 91       	pop	r31
    103e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1042:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1046:	ff 93       	push	r31
    1048:	f8 7f       	andi	r31, 0xF8	; 248
    104a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    104e:	f8 01       	movw	r30, r16
    1050:	c1 a1       	ldd	r28, Z+33	; 0x21
    1052:	1c 16       	cp	r1, r28
    1054:	ac f4       	brge	.+42     	; 0x1080 <prvUnlockQueue+0x94>
    1056:	80 85       	ldd	r24, Z+8	; 0x08
    1058:	81 11       	cpse	r24, r1
    105a:	06 c0       	rjmp	.+12     	; 0x1068 <prvUnlockQueue+0x7c>
    105c:	11 c0       	rjmp	.+34     	; 0x1080 <prvUnlockQueue+0x94>
    105e:	f8 01       	movw	r30, r16
    1060:	80 85       	ldd	r24, Z+8	; 0x08
    1062:	81 11       	cpse	r24, r1
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <prvUnlockQueue+0x84>
    1066:	0c c0       	rjmp	.+24     	; 0x1080 <prvUnlockQueue+0x94>
    1068:	78 01       	movw	r14, r16
    106a:	f8 e0       	ldi	r31, 0x08	; 8
    106c:	ef 0e       	add	r14, r31
    106e:	f1 1c       	adc	r15, r1
    1070:	c7 01       	movw	r24, r14
    1072:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    1076:	81 11       	cpse	r24, r1
    1078:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskMissedYield>
    107c:	c1 50       	subi	r28, 0x01	; 1
    107e:	79 f7       	brne	.-34     	; 0x105e <prvUnlockQueue+0x72>
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	f8 01       	movw	r30, r16
    1084:	81 a3       	std	Z+33, r24	; 0x21
    1086:	ff 91       	pop	r31
    1088:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	08 95       	ret

00001098 <xQueueGenericReset>:
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10a2:	ff 93       	push	r31
    10a4:	f8 7f       	andi	r31, 0xF8	; 248
    10a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10aa:	48 81       	ld	r20, Y
    10ac:	59 81       	ldd	r21, Y+1	; 0x01
    10ae:	28 a1       	ldd	r18, Y+32	; 0x20
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    10b4:	72 9f       	mul	r23, r18
    10b6:	c0 01       	movw	r24, r0
    10b8:	73 9f       	mul	r23, r19
    10ba:	90 0d       	add	r25, r0
    10bc:	11 24       	eor	r1, r1
    10be:	fa 01       	movw	r30, r20
    10c0:	e8 0f       	add	r30, r24
    10c2:	f9 1f       	adc	r31, r25
    10c4:	ea 83       	std	Y+2, r30	; 0x02
    10c6:	fb 83       	std	Y+3, r31	; 0x03
    10c8:	1e 8e       	std	Y+30, r1	; 0x1e
    10ca:	4c 83       	std	Y+4, r20	; 0x04
    10cc:	5d 83       	std	Y+5, r21	; 0x05
    10ce:	82 1b       	sub	r24, r18
    10d0:	93 0b       	sbc	r25, r19
    10d2:	84 0f       	add	r24, r20
    10d4:	95 1f       	adc	r25, r21
    10d6:	8e 83       	std	Y+6, r24	; 0x06
    10d8:	9f 83       	std	Y+7, r25	; 0x07
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	89 a3       	std	Y+33, r24	; 0x21
    10de:	8a a3       	std	Y+34, r24	; 0x22
    10e0:	61 11       	cpse	r22, r1
    10e2:	0c c0       	rjmp	.+24     	; 0x10fc <xQueueGenericReset+0x64>
    10e4:	88 85       	ldd	r24, Y+8	; 0x08
    10e6:	88 23       	and	r24, r24
    10e8:	89 f0       	breq	.+34     	; 0x110c <xQueueGenericReset+0x74>
    10ea:	ce 01       	movw	r24, r28
    10ec:	08 96       	adiw	r24, 0x08	; 8
    10ee:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    10f2:	88 23       	and	r24, r24
    10f4:	59 f0       	breq	.+22     	; 0x110c <xQueueGenericReset+0x74>
    10f6:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <xQueueGenericReset+0x74>
    10fc:	ce 01       	movw	r24, r28
    10fe:	08 96       	adiw	r24, 0x08	; 8
    1100:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    1104:	ce 01       	movw	r24, r28
    1106:	43 96       	adiw	r24, 0x13	; 19
    1108:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    110c:	ff 91       	pop	r31
    110e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <xQueueGenericCreate>:
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	08 2f       	mov	r16, r24
    1126:	16 2f       	mov	r17, r22
    1128:	f4 2e       	mov	r15, r20
    112a:	66 23       	and	r22, r22
    112c:	c9 f0       	breq	.+50     	; 0x1160 <xQueueGenericCreate+0x46>
    112e:	86 9f       	mul	r24, r22
    1130:	c0 01       	movw	r24, r0
    1132:	11 24       	eor	r1, r1
    1134:	85 96       	adiw	r24, 0x25	; 37
    1136:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    113a:	ec 01       	movw	r28, r24
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	49 f4       	brne	.+18     	; 0x1152 <xQueueGenericCreate+0x38>
    1140:	16 c0       	rjmp	.+44     	; 0x116e <xQueueGenericCreate+0x54>
    1142:	0f 8f       	std	Y+31, r16	; 0x1f
    1144:	18 a3       	std	Y+32, r17	; 0x20
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	ce 01       	movw	r24, r28
    114a:	0e 94 4c 08 	call	0x1098	; 0x1098 <xQueueGenericReset>
    114e:	fc a2       	std	Y+36, r15	; 0x24
    1150:	0e c0       	rjmp	.+28     	; 0x116e <xQueueGenericCreate+0x54>
    1152:	85 96       	adiw	r24, 0x25	; 37
    1154:	88 83       	st	Y, r24
    1156:	99 83       	std	Y+1, r25	; 0x01
    1158:	f4 cf       	rjmp	.-24     	; 0x1142 <xQueueGenericCreate+0x28>
    115a:	c8 83       	st	Y, r28
    115c:	d9 83       	std	Y+1, r29	; 0x01
    115e:	f1 cf       	rjmp	.-30     	; 0x1142 <xQueueGenericCreate+0x28>
    1160:	85 e2       	ldi	r24, 0x25	; 37
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    1168:	ec 01       	movw	r28, r24
    116a:	89 2b       	or	r24, r25
    116c:	b1 f7       	brne	.-20     	; 0x115a <xQueueGenericCreate+0x40>
    116e:	ce 01       	movw	r24, r28
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	08 95       	ret

0000117c <xQueueGenericSend>:
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	29 97       	sbiw	r28, 0x09	; 9
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	7c 01       	movw	r14, r24
    119c:	5b 01       	movw	r10, r22
    119e:	2e 83       	std	Y+6, r18	; 0x06
    11a0:	3f 83       	std	Y+7, r19	; 0x07
    11a2:	48 87       	std	Y+8, r20	; 0x08
    11a4:	59 87       	std	Y+9, r21	; 0x09
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	6c 01       	movw	r12, r24
    11aa:	88 e0       	ldi	r24, 0x08	; 8
    11ac:	c8 0e       	add	r12, r24
    11ae:	d1 1c       	adc	r13, r1
    11b0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11b4:	ff 93       	push	r31
    11b6:	f8 7f       	andi	r31, 0xF8	; 248
    11b8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11bc:	f7 01       	movw	r30, r14
    11be:	96 8d       	ldd	r25, Z+30	; 0x1e
    11c0:	87 8d       	ldd	r24, Z+31	; 0x1f
    11c2:	98 17       	cp	r25, r24
    11c4:	10 f0       	brcs	.+4      	; 0x11ca <xQueueGenericSend+0x4e>
    11c6:	02 30       	cpi	r16, 0x02	; 2
    11c8:	d1 f4       	brne	.+52     	; 0x11fe <xQueueGenericSend+0x82>
    11ca:	40 2f       	mov	r20, r16
    11cc:	b5 01       	movw	r22, r10
    11ce:	c7 01       	movw	r24, r14
    11d0:	0e 94 93 07 	call	0xf26	; 0xf26 <prvCopyDataToQueue>
    11d4:	f7 01       	movw	r30, r14
    11d6:	93 89       	ldd	r25, Z+19	; 0x13
    11d8:	99 23       	and	r25, r25
    11da:	49 f0       	breq	.+18     	; 0x11ee <xQueueGenericSend+0x72>
    11dc:	c7 01       	movw	r24, r14
    11de:	43 96       	adiw	r24, 0x13	; 19
    11e0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    11e4:	88 23       	and	r24, r24
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <xQueueGenericSend+0x78>
    11e8:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <xQueueGenericSend+0x78>
    11ee:	81 11       	cpse	r24, r1
    11f0:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    11f4:	ff 91       	pop	r31
    11f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	57 c0       	rjmp	.+174    	; 0x12ac <xQueueGenericSend+0x130>
    11fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1200:	9f 81       	ldd	r25, Y+7	; 0x07
    1202:	a8 85       	ldd	r26, Y+8	; 0x08
    1204:	b9 85       	ldd	r27, Y+9	; 0x09
    1206:	89 2b       	or	r24, r25
    1208:	8a 2b       	or	r24, r26
    120a:	8b 2b       	or	r24, r27
    120c:	29 f4       	brne	.+10     	; 0x1218 <xQueueGenericSend+0x9c>
    120e:	ff 91       	pop	r31
    1210:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	4a c0       	rjmp	.+148    	; 0x12ac <xQueueGenericSend+0x130>
    1218:	11 11       	cpse	r17, r1
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <xQueueGenericSend+0xaa>
    121c:	ce 01       	movw	r24, r28
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    1224:	11 e0       	ldi	r17, 0x01	; 1
    1226:	ff 91       	pop	r31
    1228:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    122c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    1230:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1234:	ff 93       	push	r31
    1236:	f8 7f       	andi	r31, 0xF8	; 248
    1238:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    123c:	f7 01       	movw	r30, r14
    123e:	81 a1       	ldd	r24, Z+33	; 0x21
    1240:	8f 3f       	cpi	r24, 0xFF	; 255
    1242:	09 f4       	brne	.+2      	; 0x1246 <xQueueGenericSend+0xca>
    1244:	11 a2       	std	Z+33, r1	; 0x21
    1246:	f7 01       	movw	r30, r14
    1248:	82 a1       	ldd	r24, Z+34	; 0x22
    124a:	8f 3f       	cpi	r24, 0xFF	; 255
    124c:	09 f4       	brne	.+2      	; 0x1250 <xQueueGenericSend+0xd4>
    124e:	12 a2       	std	Z+34, r1	; 0x22
    1250:	ff 91       	pop	r31
    1252:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1256:	be 01       	movw	r22, r28
    1258:	6a 5f       	subi	r22, 0xFA	; 250
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <xTaskCheckForTimeOut>
    1264:	81 11       	cpse	r24, r1
    1266:	1c c0       	rjmp	.+56     	; 0x12a0 <xQueueGenericSend+0x124>
    1268:	c7 01       	movw	r24, r14
    126a:	0e 94 80 07 	call	0xf00	; 0xf00 <prvIsQueueFull>
    126e:	88 23       	and	r24, r24
    1270:	89 f0       	breq	.+34     	; 0x1294 <xQueueGenericSend+0x118>
    1272:	4e 81       	ldd	r20, Y+6	; 0x06
    1274:	5f 81       	ldd	r21, Y+7	; 0x07
    1276:	68 85       	ldd	r22, Y+8	; 0x08
    1278:	79 85       	ldd	r23, Y+9	; 0x09
    127a:	c6 01       	movw	r24, r12
    127c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <vTaskPlaceOnEventList>
    1280:	c7 01       	movw	r24, r14
    1282:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1286:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    128a:	81 11       	cpse	r24, r1
    128c:	91 cf       	rjmp	.-222    	; 0x11b0 <xQueueGenericSend+0x34>
    128e:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1292:	8e cf       	rjmp	.-228    	; 0x11b0 <xQueueGenericSend+0x34>
    1294:	c7 01       	movw	r24, r14
    1296:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    129a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    129e:	88 cf       	rjmp	.-240    	; 0x11b0 <xQueueGenericSend+0x34>
    12a0:	c7 01       	movw	r24, r14
    12a2:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    12a6:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	29 96       	adiw	r28, 0x09	; 9
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	bf 90       	pop	r11
    12c4:	af 90       	pop	r10
    12c6:	08 95       	ret

000012c8 <xQueueGenericSendFromISR>:
    12c8:	af 92       	push	r10
    12ca:	bf 92       	push	r11
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ec 01       	movw	r28, r24
    12dc:	6b 01       	movw	r12, r22
    12de:	5a 01       	movw	r10, r20
    12e0:	02 2f       	mov	r16, r18
    12e2:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
    12e6:	f8 2e       	mov	r15, r24
    12e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ec:	98 17       	cp	r25, r24
    12ee:	10 f0       	brcs	.+4      	; 0x12f4 <xQueueGenericSendFromISR+0x2c>
    12f0:	02 30       	cpi	r16, 0x02	; 2
    12f2:	e1 f4       	brne	.+56     	; 0x132c <xQueueGenericSendFromISR+0x64>
    12f4:	1a a1       	ldd	r17, Y+34	; 0x22
    12f6:	40 2f       	mov	r20, r16
    12f8:	b6 01       	movw	r22, r12
    12fa:	ce 01       	movw	r24, r28
    12fc:	0e 94 93 07 	call	0xf26	; 0xf26 <prvCopyDataToQueue>
    1300:	1f 3f       	cpi	r17, 0xFF	; 255
    1302:	81 f4       	brne	.+32     	; 0x1324 <xQueueGenericSendFromISR+0x5c>
    1304:	8b 89       	ldd	r24, Y+19	; 0x13
    1306:	88 23       	and	r24, r24
    1308:	99 f0       	breq	.+38     	; 0x1330 <xQueueGenericSendFromISR+0x68>
    130a:	ce 01       	movw	r24, r28
    130c:	43 96       	adiw	r24, 0x13	; 19
    130e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    1312:	88 23       	and	r24, r24
    1314:	79 f0       	breq	.+30     	; 0x1334 <xQueueGenericSendFromISR+0x6c>
    1316:	a1 14       	cp	r10, r1
    1318:	b1 04       	cpc	r11, r1
    131a:	71 f0       	breq	.+28     	; 0x1338 <xQueueGenericSendFromISR+0x70>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	f5 01       	movw	r30, r10
    1320:	80 83       	st	Z, r24
    1322:	0b c0       	rjmp	.+22     	; 0x133a <xQueueGenericSendFromISR+0x72>
    1324:	1f 5f       	subi	r17, 0xFF	; 255
    1326:	1a a3       	std	Y+34, r17	; 0x22
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	07 c0       	rjmp	.+14     	; 0x133a <xQueueGenericSendFromISR+0x72>
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	05 c0       	rjmp	.+10     	; 0x133a <xQueueGenericSendFromISR+0x72>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	03 c0       	rjmp	.+6      	; 0x133a <xQueueGenericSendFromISR+0x72>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	01 c0       	rjmp	.+2      	; 0x133a <xQueueGenericSendFromISR+0x72>
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	08 95       	ret

00001352 <xQueueReceive>:
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	29 97       	sbiw	r28, 0x09	; 9
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	8c 01       	movw	r16, r24
    1372:	5b 01       	movw	r10, r22
    1374:	2e 83       	std	Y+6, r18	; 0x06
    1376:	3f 83       	std	Y+7, r19	; 0x07
    1378:	48 87       	std	Y+8, r20	; 0x08
    137a:	59 87       	std	Y+9, r21	; 0x09
    137c:	e1 2c       	mov	r14, r1
    137e:	6c 01       	movw	r12, r24
    1380:	83 e1       	ldi	r24, 0x13	; 19
    1382:	c8 0e       	add	r12, r24
    1384:	d1 1c       	adc	r13, r1
    1386:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    138a:	ff 93       	push	r31
    138c:	f8 7f       	andi	r31, 0xF8	; 248
    138e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1392:	f8 01       	movw	r30, r16
    1394:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1396:	ff 20       	and	r15, r15
    1398:	b1 f0       	breq	.+44     	; 0x13c6 <xQueueReceive+0x74>
    139a:	b5 01       	movw	r22, r10
    139c:	c8 01       	movw	r24, r16
    139e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <prvCopyDataFromQueue>
    13a2:	fa 94       	dec	r15
    13a4:	f8 01       	movw	r30, r16
    13a6:	f6 8e       	std	Z+30, r15	; 0x1e
    13a8:	80 85       	ldd	r24, Z+8	; 0x08
    13aa:	88 23       	and	r24, r24
    13ac:	39 f0       	breq	.+14     	; 0x13bc <xQueueReceive+0x6a>
    13ae:	c8 01       	movw	r24, r16
    13b0:	08 96       	adiw	r24, 0x08	; 8
    13b2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    13b6:	81 11       	cpse	r24, r1
    13b8:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    13bc:	ff 91       	pop	r31
    13be:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	5e c0       	rjmp	.+188    	; 0x1482 <xQueueReceive+0x130>
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	a8 85       	ldd	r26, Y+8	; 0x08
    13cc:	b9 85       	ldd	r27, Y+9	; 0x09
    13ce:	89 2b       	or	r24, r25
    13d0:	8a 2b       	or	r24, r26
    13d2:	8b 2b       	or	r24, r27
    13d4:	29 f4       	brne	.+10     	; 0x13e0 <xQueueReceive+0x8e>
    13d6:	ff 91       	pop	r31
    13d8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	51 c0       	rjmp	.+162    	; 0x1482 <xQueueReceive+0x130>
    13e0:	e1 10       	cpse	r14, r1
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <xQueueReceive+0x9e>
    13e4:	ce 01       	movw	r24, r28
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    13ec:	ee 24       	eor	r14, r14
    13ee:	e3 94       	inc	r14
    13f0:	ff 91       	pop	r31
    13f2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13f6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    13fa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13fe:	ff 93       	push	r31
    1400:	f8 7f       	andi	r31, 0xF8	; 248
    1402:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1406:	f8 01       	movw	r30, r16
    1408:	81 a1       	ldd	r24, Z+33	; 0x21
    140a:	8f 3f       	cpi	r24, 0xFF	; 255
    140c:	09 f4       	brne	.+2      	; 0x1410 <xQueueReceive+0xbe>
    140e:	11 a2       	std	Z+33, r1	; 0x21
    1410:	f8 01       	movw	r30, r16
    1412:	82 a1       	ldd	r24, Z+34	; 0x22
    1414:	8f 3f       	cpi	r24, 0xFF	; 255
    1416:	09 f4       	brne	.+2      	; 0x141a <xQueueReceive+0xc8>
    1418:	12 a2       	std	Z+34, r1	; 0x22
    141a:	ff 91       	pop	r31
    141c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1420:	be 01       	movw	r22, r28
    1422:	6a 5f       	subi	r22, 0xFA	; 250
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	ce 01       	movw	r24, r28
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <xTaskCheckForTimeOut>
    142e:	81 11       	cpse	r24, r1
    1430:	1c c0       	rjmp	.+56     	; 0x146a <xQueueReceive+0x118>
    1432:	c8 01       	movw	r24, r16
    1434:	0e 94 71 07 	call	0xee2	; 0xee2 <prvIsQueueEmpty>
    1438:	88 23       	and	r24, r24
    143a:	89 f0       	breq	.+34     	; 0x145e <xQueueReceive+0x10c>
    143c:	4e 81       	ldd	r20, Y+6	; 0x06
    143e:	5f 81       	ldd	r21, Y+7	; 0x07
    1440:	68 85       	ldd	r22, Y+8	; 0x08
    1442:	79 85       	ldd	r23, Y+9	; 0x09
    1444:	c6 01       	movw	r24, r12
    1446:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <vTaskPlaceOnEventList>
    144a:	c8 01       	movw	r24, r16
    144c:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1450:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1454:	81 11       	cpse	r24, r1
    1456:	97 cf       	rjmp	.-210    	; 0x1386 <xQueueReceive+0x34>
    1458:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    145c:	94 cf       	rjmp	.-216    	; 0x1386 <xQueueReceive+0x34>
    145e:	c8 01       	movw	r24, r16
    1460:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1464:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1468:	8e cf       	rjmp	.-228    	; 0x1386 <xQueueReceive+0x34>
    146a:	c8 01       	movw	r24, r16
    146c:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1470:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1474:	c8 01       	movw	r24, r16
    1476:	0e 94 71 07 	call	0xee2	; 0xee2 <prvIsQueueEmpty>
    147a:	88 23       	and	r24, r24
    147c:	09 f4       	brne	.+2      	; 0x1480 <xQueueReceive+0x12e>
    147e:	83 cf       	rjmp	.-250    	; 0x1386 <xQueueReceive+0x34>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	29 96       	adiw	r28, 0x09	; 9
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	08 95       	ret

0000149e <uxQueueMessagesWaiting>:
    149e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14a2:	ff 93       	push	r31
    14a4:	f8 7f       	andi	r31, 0xF8	; 248
    14a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14aa:	fc 01       	movw	r30, r24
    14ac:	86 8d       	ldd	r24, Z+30	; 0x1e
    14ae:	ff 91       	pop	r31
    14b0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14b4:	08 95       	ret

000014b6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    14bc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14c0:	ff 93       	push	r31
    14c2:	f8 7f       	andi	r31, 0xF8	; 248
    14c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14c8:	89 a1       	ldd	r24, Y+33	; 0x21
    14ca:	8f 3f       	cpi	r24, 0xFF	; 255
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <vQueueWaitForMessageRestricted+0x1a>
    14ce:	19 a2       	std	Y+33, r1	; 0x21
    14d0:	8a a1       	ldd	r24, Y+34	; 0x22
    14d2:	8f 3f       	cpi	r24, 0xFF	; 255
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <vQueueWaitForMessageRestricted+0x22>
    14d6:	1a a2       	std	Y+34, r1	; 0x22
    14d8:	ff 91       	pop	r31
    14da:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    14de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14e0:	81 11       	cpse	r24, r1
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    14e4:	ce 01       	movw	r24, r28
    14e6:	43 96       	adiw	r24, 0x13	; 19
    14e8:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    14ec:	ce 01       	movw	r24, r28
    14ee:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
	}
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    14f8:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    14fc:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    1500:	80 81       	ld	r24, Z
    1502:	81 11       	cpse	r24, r1
    1504:	0c c0       	rjmp	.+24     	; 0x151e <prvResetNextTaskUnblockTime+0x26>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	dc 01       	movw	r26, r24
    150c:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    1510:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1514:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1518:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    151c:	08 95       	ret
    151e:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    1522:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    1526:	07 80       	ldd	r0, Z+7	; 0x07
    1528:	f0 85       	ldd	r31, Z+8	; 0x08
    152a:	e0 2d       	mov	r30, r0
    152c:	00 84       	ldd	r0, Z+8	; 0x08
    152e:	f1 85       	ldd	r31, Z+9	; 0x09
    1530:	e0 2d       	mov	r30, r0
    1532:	82 81       	ldd	r24, Z+2	; 0x02
    1534:	93 81       	ldd	r25, Z+3	; 0x03
    1536:	a4 81       	ldd	r26, Z+4	; 0x04
    1538:	b5 81       	ldd	r27, Z+5	; 0x05
    153a:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    153e:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1542:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1546:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    154a:	08 95       	ret

0000154c <prvAddCurrentTaskToDelayedList>:
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	cf 93       	push	r28
    155e:	6b 01       	movw	r12, r22
    1560:	7c 01       	movw	r14, r24
    1562:	c4 2f       	mov	r28, r20
    1564:	80 90 2d 2c 	lds	r8, 0x2C2D	; 0x802c2d <xTickCount>
    1568:	90 90 2e 2c 	lds	r9, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    156c:	a0 90 2f 2c 	lds	r10, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1570:	b0 90 30 2c 	lds	r11, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1574:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1578:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    157c:	02 96       	adiw	r24, 0x02	; 2
    157e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	c8 16       	cp	r12, r24
    1586:	d8 06       	cpc	r13, r24
    1588:	e8 06       	cpc	r14, r24
    158a:	f8 06       	cpc	r15, r24
    158c:	69 f4       	brne	.+26     	; 0x15a8 <prvAddCurrentTaskToDelayedList+0x5c>
    158e:	cc 23       	and	r28, r28
    1590:	59 f0       	breq	.+22     	; 0x15a8 <prvAddCurrentTaskToDelayedList+0x5c>
    1592:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1596:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    159a:	6e 5f       	subi	r22, 0xFE	; 254
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	82 e3       	ldi	r24, 0x32	; 50
    15a0:	9c e2       	ldi	r25, 0x2C	; 44
    15a2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    15a6:	3f c0       	rjmp	.+126    	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    15a8:	c8 0c       	add	r12, r8
    15aa:	d9 1c       	adc	r13, r9
    15ac:	ea 1c       	adc	r14, r10
    15ae:	fb 1c       	adc	r15, r11
    15b0:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    15b4:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    15b8:	c2 82       	std	Z+2, r12	; 0x02
    15ba:	d3 82       	std	Z+3, r13	; 0x03
    15bc:	e4 82       	std	Z+4, r14	; 0x04
    15be:	f5 82       	std	Z+5, r15	; 0x05
    15c0:	c8 14       	cp	r12, r8
    15c2:	d9 04       	cpc	r13, r9
    15c4:	ea 04       	cpc	r14, r10
    15c6:	fb 04       	cpc	r15, r11
    15c8:	68 f4       	brcc	.+26     	; 0x15e4 <prvAddCurrentTaskToDelayedList+0x98>
    15ca:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    15ce:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    15d2:	80 91 48 2c 	lds	r24, 0x2C48	; 0x802c48 <pxOverflowDelayedTaskList>
    15d6:	90 91 49 2c 	lds	r25, 0x2C49	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    15da:	6e 5f       	subi	r22, 0xFE	; 254
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    15e2:	21 c0       	rjmp	.+66     	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    15e4:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    15e8:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    15ec:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    15f0:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    15f4:	6e 5f       	subi	r22, 0xFE	; 254
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    15fc:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <xNextTaskUnblockTime>
    1600:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1604:	a0 91 25 2c 	lds	r26, 0x2C25	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1608:	b0 91 26 2c 	lds	r27, 0x2C26	; 0x802c26 <xNextTaskUnblockTime+0x3>
    160c:	c8 16       	cp	r12, r24
    160e:	d9 06       	cpc	r13, r25
    1610:	ea 06       	cpc	r14, r26
    1612:	fb 06       	cpc	r15, r27
    1614:	40 f4       	brcc	.+16     	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    1616:	c0 92 23 2c 	sts	0x2C23, r12	; 0x802c23 <xNextTaskUnblockTime>
    161a:	d0 92 24 2c 	sts	0x2C24, r13	; 0x802c24 <xNextTaskUnblockTime+0x1>
    161e:	e0 92 25 2c 	sts	0x2C25, r14	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1622:	f0 92 26 2c 	sts	0x2C26, r15	; 0x802c26 <xNextTaskUnblockTime+0x3>
    1626:	cf 91       	pop	r28
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	9f 90       	pop	r9
    1636:	8f 90       	pop	r8
    1638:	08 95       	ret

0000163a <prvIdleTask>:
    163a:	c2 e6       	ldi	r28, 0x62	; 98
    163c:	dc e2       	ldi	r29, 0x2C	; 44
    163e:	88 81       	ld	r24, Y
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	10 f0       	brcs	.+4      	; 0x1648 <prvIdleTask+0xe>
    1644:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1648:	0e 94 21 13 	call	0x2642	; 0x2642 <vApplicationIdleHook>
    164c:	f8 cf       	rjmp	.-16     	; 0x163e <prvIdleTask+0x4>

0000164e <xTaskCreate>:
    164e:	4f 92       	push	r4
    1650:	5f 92       	push	r5
    1652:	6f 92       	push	r6
    1654:	7f 92       	push	r7
    1656:	8f 92       	push	r8
    1658:	9f 92       	push	r9
    165a:	af 92       	push	r10
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	4c 01       	movw	r8, r24
    166e:	6b 01       	movw	r12, r22
    1670:	5a 01       	movw	r10, r20
    1672:	29 01       	movw	r4, r18
    1674:	ca 01       	movw	r24, r20
    1676:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    167a:	3c 01       	movw	r6, r24
    167c:	89 2b       	or	r24, r25
    167e:	09 f4       	brne	.+2      	; 0x1682 <xTaskCreate+0x34>
    1680:	ea c0       	rjmp	.+468    	; 0x1856 <xTaskCreate+0x208>
    1682:	8c e2       	ldi	r24, 0x2C	; 44
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    168a:	ec 01       	movw	r28, r24
    168c:	89 2b       	or	r24, r25
    168e:	b1 f0       	breq	.+44     	; 0x16bc <xTaskCreate+0x6e>
    1690:	6b 8e       	std	Y+27, r6	; 0x1b
    1692:	7c 8e       	std	Y+28, r7	; 0x1c
    1694:	a5 01       	movw	r20, r10
    1696:	65 ea       	ldi	r22, 0xA5	; 165
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	c3 01       	movw	r24, r6
    169c:	0e 94 28 25 	call	0x4a50	; 0x4a50 <memset>
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	a2 1a       	sub	r10, r18
    16a4:	b1 08       	sbc	r11, r1
    16a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16aa:	a8 0e       	add	r10, r24
    16ac:	b9 1e       	adc	r11, r25
    16ae:	d6 01       	movw	r26, r12
    16b0:	8c 91       	ld	r24, X
    16b2:	8d 8f       	std	Y+29, r24	; 0x1d
    16b4:	8c 91       	ld	r24, X
    16b6:	81 11       	cpse	r24, r1
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <xTaskCreate+0x76>
    16ba:	18 c0       	rjmp	.+48     	; 0x16ec <xTaskCreate+0x9e>
    16bc:	c3 01       	movw	r24, r6
    16be:	0e 94 29 05 	call	0xa52	; 0xa52 <vPortFree>
    16c2:	c9 c0       	rjmp	.+402    	; 0x1856 <xTaskCreate+0x208>
    16c4:	ae 01       	movw	r20, r28
    16c6:	42 5e       	subi	r20, 0xE2	; 226
    16c8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ca:	f6 01       	movw	r30, r12
    16cc:	31 96       	adiw	r30, 0x01	; 1
    16ce:	b8 e0       	ldi	r27, 0x08	; 8
    16d0:	cb 0e       	add	r12, r27
    16d2:	d1 1c       	adc	r13, r1
    16d4:	cf 01       	movw	r24, r30
    16d6:	21 91       	ld	r18, Z+
    16d8:	da 01       	movw	r26, r20
    16da:	2d 93       	st	X+, r18
    16dc:	ad 01       	movw	r20, r26
    16de:	dc 01       	movw	r26, r24
    16e0:	8c 91       	ld	r24, X
    16e2:	88 23       	and	r24, r24
    16e4:	19 f0       	breq	.+6      	; 0x16ec <xTaskCreate+0x9e>
    16e6:	ec 15       	cp	r30, r12
    16e8:	fd 05       	cpc	r31, r13
    16ea:	a1 f7       	brne	.-24     	; 0x16d4 <xTaskCreate+0x86>
    16ec:	1c a2       	std	Y+36, r1	; 0x24
    16ee:	04 30       	cpi	r16, 0x04	; 4
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <xTaskCreate+0xa6>
    16f2:	03 e0       	ldi	r16, 0x03	; 3
    16f4:	0a 8f       	std	Y+26, r16	; 0x1a
    16f6:	6e 01       	movw	r12, r28
    16f8:	b2 e0       	ldi	r27, 0x02	; 2
    16fa:	cb 0e       	add	r12, r27
    16fc:	d1 1c       	adc	r13, r1
    16fe:	c6 01       	movw	r24, r12
    1700:	0e 94 3b 05 	call	0xa76	; 0xa76 <vListInitialiseItem>
    1704:	ce 01       	movw	r24, r28
    1706:	0e 96       	adiw	r24, 0x0e	; 14
    1708:	0e 94 3b 05 	call	0xa76	; 0xa76 <vListInitialiseItem>
    170c:	ca 87       	std	Y+10, r28	; 0x0a
    170e:	db 87       	std	Y+11, r29	; 0x0b
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a0 e0       	ldi	r26, 0x00	; 0
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	80 1b       	sub	r24, r16
    171a:	91 09       	sbc	r25, r1
    171c:	a1 09       	sbc	r26, r1
    171e:	b1 09       	sbc	r27, r1
    1720:	8e 87       	std	Y+14, r24	; 0x0e
    1722:	9f 87       	std	Y+15, r25	; 0x0f
    1724:	a8 8b       	std	Y+16, r26	; 0x10
    1726:	b9 8b       	std	Y+17, r27	; 0x11
    1728:	ce 8b       	std	Y+22, r28	; 0x16
    172a:	df 8b       	std	Y+23, r29	; 0x17
    172c:	1f a2       	std	Y+39, r1	; 0x27
    172e:	18 a6       	std	Y+40, r1	; 0x28
    1730:	19 a6       	std	Y+41, r1	; 0x29
    1732:	1a a6       	std	Y+42, r1	; 0x2a
    1734:	1b a6       	std	Y+43, r1	; 0x2b
    1736:	a2 01       	movw	r20, r4
    1738:	b4 01       	movw	r22, r8
    173a:	c5 01       	movw	r24, r10
    173c:	0e 94 cb 05 	call	0xb96	; 0xb96 <pxPortInitialiseStack>
    1740:	88 83       	st	Y, r24
    1742:	99 83       	std	Y+1, r25	; 0x01
    1744:	e1 14       	cp	r14, r1
    1746:	f1 04       	cpc	r15, r1
    1748:	19 f0       	breq	.+6      	; 0x1750 <xTaskCreate+0x102>
    174a:	f7 01       	movw	r30, r14
    174c:	c0 83       	st	Z, r28
    174e:	d1 83       	std	Z+1, r29	; 0x01
    1750:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1754:	ff 93       	push	r31
    1756:	f8 7f       	andi	r31, 0xF8	; 248
    1758:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    175c:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <uxCurrentNumberOfTasks>
    1760:	8f 5f       	subi	r24, 0xFF	; 255
    1762:	80 93 31 2c 	sts	0x2C31, r24	; 0x802c31 <uxCurrentNumberOfTasks>
    1766:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    176a:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    176e:	89 2b       	or	r24, r25
    1770:	a9 f5       	brne	.+106    	; 0x17dc <xTaskCreate+0x18e>
    1772:	c0 93 8e 2c 	sts	0x2C8E, r28	; 0x802c8e <pxCurrentTCB>
    1776:	d0 93 8f 2c 	sts	0x2C8F, r29	; 0x802c8f <pxCurrentTCB+0x1>
    177a:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <uxCurrentNumberOfTasks>
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	e9 f5       	brne	.+122    	; 0x17fc <xTaskCreate+0x1ae>
    1782:	82 e6       	ldi	r24, 0x62	; 98
    1784:	9c e2       	ldi	r25, 0x2C	; 44
    1786:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    178a:	8d e6       	ldi	r24, 0x6D	; 109
    178c:	9c e2       	ldi	r25, 0x2C	; 44
    178e:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    1792:	88 e7       	ldi	r24, 0x78	; 120
    1794:	9c e2       	ldi	r25, 0x2C	; 44
    1796:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    179a:	83 e8       	ldi	r24, 0x83	; 131
    179c:	9c e2       	ldi	r25, 0x2C	; 44
    179e:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17a2:	87 e5       	ldi	r24, 0x57	; 87
    17a4:	9c e2       	ldi	r25, 0x2C	; 44
    17a6:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17aa:	8c e4       	ldi	r24, 0x4C	; 76
    17ac:	9c e2       	ldi	r25, 0x2C	; 44
    17ae:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17b2:	8d e3       	ldi	r24, 0x3D	; 61
    17b4:	9c e2       	ldi	r25, 0x2C	; 44
    17b6:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17ba:	82 e3       	ldi	r24, 0x32	; 50
    17bc:	9c e2       	ldi	r25, 0x2C	; 44
    17be:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17c2:	87 e5       	ldi	r24, 0x57	; 87
    17c4:	9c e2       	ldi	r25, 0x2C	; 44
    17c6:	80 93 4a 2c 	sts	0x2C4A, r24	; 0x802c4a <pxDelayedTaskList>
    17ca:	90 93 4b 2c 	sts	0x2C4B, r25	; 0x802c4b <pxDelayedTaskList+0x1>
    17ce:	8c e4       	ldi	r24, 0x4C	; 76
    17d0:	9c e2       	ldi	r25, 0x2C	; 44
    17d2:	80 93 48 2c 	sts	0x2C48, r24	; 0x802c48 <pxOverflowDelayedTaskList>
    17d6:	90 93 49 2c 	sts	0x2C49, r25	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    17da:	10 c0       	rjmp	.+32     	; 0x17fc <xTaskCreate+0x1ae>
    17dc:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xSchedulerRunning>
    17e0:	81 11       	cpse	r24, r1
    17e2:	0c c0       	rjmp	.+24     	; 0x17fc <xTaskCreate+0x1ae>
    17e4:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    17e8:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    17ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    17ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17f0:	89 17       	cp	r24, r25
    17f2:	20 f0       	brcs	.+8      	; 0x17fc <xTaskCreate+0x1ae>
    17f4:	c0 93 8e 2c 	sts	0x2C8E, r28	; 0x802c8e <pxCurrentTCB>
    17f8:	d0 93 8f 2c 	sts	0x2C8F, r29	; 0x802c8f <pxCurrentTCB+0x1>
    17fc:	80 91 27 2c 	lds	r24, 0x2C27	; 0x802c27 <uxTaskNumber>
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	80 93 27 2c 	sts	0x2C27, r24	; 0x802c27 <uxTaskNumber>
    1806:	8d a3       	std	Y+37, r24	; 0x25
    1808:	8a 8d       	ldd	r24, Y+26	; 0x1a
    180a:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    180e:	98 17       	cp	r25, r24
    1810:	10 f4       	brcc	.+4      	; 0x1816 <xTaskCreate+0x1c8>
    1812:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1816:	fb e0       	ldi	r31, 0x0B	; 11
    1818:	8f 9f       	mul	r24, r31
    181a:	c0 01       	movw	r24, r0
    181c:	11 24       	eor	r1, r1
    181e:	b6 01       	movw	r22, r12
    1820:	8e 59       	subi	r24, 0x9E	; 158
    1822:	93 4d       	sbci	r25, 0xD3	; 211
    1824:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1828:	ff 91       	pop	r31
    182a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    182e:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xSchedulerRunning>
    1832:	88 23       	and	r24, r24
    1834:	61 f0       	breq	.+24     	; 0x184e <xTaskCreate+0x200>
    1836:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    183a:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    183e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1840:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1842:	98 17       	cp	r25, r24
    1844:	30 f4       	brcc	.+12     	; 0x1852 <xTaskCreate+0x204>
    1846:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <xTaskCreate+0x20a>
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <xTaskCreate+0x20a>
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <xTaskCreate+0x20a>
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	df 90       	pop	r13
    1864:	cf 90       	pop	r12
    1866:	bf 90       	pop	r11
    1868:	af 90       	pop	r10
    186a:	9f 90       	pop	r9
    186c:	8f 90       	pop	r8
    186e:	7f 90       	pop	r7
    1870:	6f 90       	pop	r6
    1872:	5f 90       	pop	r5
    1874:	4f 90       	pop	r4
    1876:	08 95       	ret

00001878 <vTaskStartScheduler>:
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	0f 2e       	mov	r0, r31
    1880:	f1 e2       	ldi	r31, 0x21	; 33
    1882:	ef 2e       	mov	r14, r31
    1884:	fc e2       	ldi	r31, 0x2C	; 44
    1886:	ff 2e       	mov	r15, r31
    1888:	f0 2d       	mov	r31, r0
    188a:	00 e0       	ldi	r16, 0x00	; 0
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	48 ec       	ldi	r20, 0xC8	; 200
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	6d e4       	ldi	r22, 0x4D	; 77
    1896:	70 e2       	ldi	r23, 0x20	; 32
    1898:	8d e1       	ldi	r24, 0x1D	; 29
    189a:	9b e0       	ldi	r25, 0x0B	; 11
    189c:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	09 f5       	brne	.+66     	; 0x18e6 <vTaskStartScheduler+0x6e>
    18a4:	0e 94 81 10 	call	0x2102	; 0x2102 <xTimerCreateTimerTask>
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	e9 f4       	brne	.+58     	; 0x18e6 <vTaskStartScheduler+0x6e>
    18ac:	e0 ea       	ldi	r30, 0xA0	; 160
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	88 7f       	andi	r24, 0xF8	; 248
    18b4:	82 83       	std	Z+2, r24	; 0x02
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	9f ef       	ldi	r25, 0xFF	; 255
    18ba:	dc 01       	movw	r26, r24
    18bc:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    18c0:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    18c4:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    18c8:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xSchedulerRunning>
    18d2:	10 92 2d 2c 	sts	0x2C2D, r1	; 0x802c2d <xTickCount>
    18d6:	10 92 2e 2c 	sts	0x2C2E, r1	; 0x802c2e <xTickCount+0x1>
    18da:	10 92 2f 2c 	sts	0x2C2F, r1	; 0x802c2f <xTickCount+0x2>
    18de:	10 92 30 2c 	sts	0x2C30, r1	; 0x802c30 <xTickCount+0x3>
    18e2:	0e 94 48 06 	call	0xc90	; 0xc90 <xPortStartScheduler>
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	08 95       	ret

000018ee <vTaskSuspendAll>:
    18ee:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxSchedulerSuspended>
    18f8:	08 95       	ret

000018fa <xTaskGetTickCount>:
    18fa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18fe:	ff 93       	push	r31
    1900:	f8 7f       	andi	r31, 0xF8	; 248
    1902:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1906:	60 91 2d 2c 	lds	r22, 0x2C2D	; 0x802c2d <xTickCount>
    190a:	70 91 2e 2c 	lds	r23, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    190e:	80 91 2f 2c 	lds	r24, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1912:	90 91 30 2c 	lds	r25, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1916:	ff 91       	pop	r31
    1918:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    191c:	08 95       	ret

0000191e <xTaskIncrementTick>:
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1936:	81 11       	cpse	r24, r1
    1938:	ad c0       	rjmp	.+346    	; 0x1a94 <xTaskIncrementTick+0x176>
    193a:	c0 90 2d 2c 	lds	r12, 0x2C2D	; 0x802c2d <xTickCount>
    193e:	d0 90 2e 2c 	lds	r13, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    1942:	e0 90 2f 2c 	lds	r14, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1946:	f0 90 30 2c 	lds	r15, 0x2C30	; 0x802c30 <xTickCount+0x3>
    194a:	8f ef       	ldi	r24, 0xFF	; 255
    194c:	c8 1a       	sub	r12, r24
    194e:	d8 0a       	sbc	r13, r24
    1950:	e8 0a       	sbc	r14, r24
    1952:	f8 0a       	sbc	r15, r24
    1954:	c0 92 2d 2c 	sts	0x2C2D, r12	; 0x802c2d <xTickCount>
    1958:	d0 92 2e 2c 	sts	0x2C2E, r13	; 0x802c2e <xTickCount+0x1>
    195c:	e0 92 2f 2c 	sts	0x2C2F, r14	; 0x802c2f <xTickCount+0x2>
    1960:	f0 92 30 2c 	sts	0x2C30, r15	; 0x802c30 <xTickCount+0x3>
    1964:	c1 14       	cp	r12, r1
    1966:	d1 04       	cpc	r13, r1
    1968:	e1 04       	cpc	r14, r1
    196a:	f1 04       	cpc	r15, r1
    196c:	b9 f4       	brne	.+46     	; 0x199c <xTaskIncrementTick+0x7e>
    196e:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    1972:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    1976:	20 91 48 2c 	lds	r18, 0x2C48	; 0x802c48 <pxOverflowDelayedTaskList>
    197a:	30 91 49 2c 	lds	r19, 0x2C49	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    197e:	20 93 4a 2c 	sts	0x2C4A, r18	; 0x802c4a <pxDelayedTaskList>
    1982:	30 93 4b 2c 	sts	0x2C4B, r19	; 0x802c4b <pxDelayedTaskList+0x1>
    1986:	80 93 48 2c 	sts	0x2C48, r24	; 0x802c48 <pxOverflowDelayedTaskList>
    198a:	90 93 49 2c 	sts	0x2C49, r25	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    198e:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <xNumOfOverflows>
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	80 93 28 2c 	sts	0x2C28, r24	; 0x802c28 <xNumOfOverflows>
    1998:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <prvResetNextTaskUnblockTime>
    199c:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <xNextTaskUnblockTime>
    19a0:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <xNextTaskUnblockTime+0x1>
    19a4:	a0 91 25 2c 	lds	r26, 0x2C25	; 0x802c25 <xNextTaskUnblockTime+0x2>
    19a8:	b0 91 26 2c 	lds	r27, 0x2C26	; 0x802c26 <xNextTaskUnblockTime+0x3>
    19ac:	c8 16       	cp	r12, r24
    19ae:	d9 06       	cpc	r13, r25
    19b0:	ea 06       	cpc	r14, r26
    19b2:	fb 06       	cpc	r15, r27
    19b4:	10 f4       	brcc	.+4      	; 0x19ba <xTaskIncrementTick+0x9c>
    19b6:	b1 2c       	mov	r11, r1
    19b8:	5c c0       	rjmp	.+184    	; 0x1a72 <xTaskIncrementTick+0x154>
    19ba:	b1 2c       	mov	r11, r1
    19bc:	0f 2e       	mov	r0, r31
    19be:	fb e0       	ldi	r31, 0x0B	; 11
    19c0:	af 2e       	mov	r10, r31
    19c2:	f0 2d       	mov	r31, r0
    19c4:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    19c8:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    19cc:	80 81       	ld	r24, Z
    19ce:	81 11       	cpse	r24, r1
    19d0:	0c c0       	rjmp	.+24     	; 0x19ea <xTaskIncrementTick+0xcc>
    19d2:	8f ef       	ldi	r24, 0xFF	; 255
    19d4:	9f ef       	ldi	r25, 0xFF	; 255
    19d6:	dc 01       	movw	r26, r24
    19d8:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    19dc:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    19e0:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    19e4:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    19e8:	44 c0       	rjmp	.+136    	; 0x1a72 <xTaskIncrementTick+0x154>
    19ea:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    19ee:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    19f2:	07 80       	ldd	r0, Z+7	; 0x07
    19f4:	f0 85       	ldd	r31, Z+8	; 0x08
    19f6:	e0 2d       	mov	r30, r0
    19f8:	c0 85       	ldd	r28, Z+8	; 0x08
    19fa:	d1 85       	ldd	r29, Z+9	; 0x09
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	ac 81       	ldd	r26, Y+4	; 0x04
    1a02:	bd 81       	ldd	r27, Y+5	; 0x05
    1a04:	c8 16       	cp	r12, r24
    1a06:	d9 06       	cpc	r13, r25
    1a08:	ea 06       	cpc	r14, r26
    1a0a:	fb 06       	cpc	r15, r27
    1a0c:	48 f4       	brcc	.+18     	; 0x1a20 <xTaskIncrementTick+0x102>
    1a0e:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    1a12:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1a16:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1a1a:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    1a1e:	29 c0       	rjmp	.+82     	; 0x1a72 <xTaskIncrementTick+0x154>
    1a20:	8e 01       	movw	r16, r28
    1a22:	0e 5f       	subi	r16, 0xFE	; 254
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	c8 01       	movw	r24, r16
    1a28:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1a2c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a2e:	99 8d       	ldd	r25, Y+25	; 0x19
    1a30:	89 2b       	or	r24, r25
    1a32:	21 f0       	breq	.+8      	; 0x1a3c <xTaskIncrementTick+0x11e>
    1a34:	ce 01       	movw	r24, r28
    1a36:	0e 96       	adiw	r24, 0x0e	; 14
    1a38:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1a3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a3e:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1a42:	98 17       	cp	r25, r24
    1a44:	10 f4       	brcc	.+4      	; 0x1a4a <xTaskIncrementTick+0x12c>
    1a46:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1a4a:	a8 9e       	mul	r10, r24
    1a4c:	c0 01       	movw	r24, r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	b8 01       	movw	r22, r16
    1a52:	8e 59       	subi	r24, 0x9E	; 158
    1a54:	93 4d       	sbci	r25, 0xD3	; 211
    1a56:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1a5a:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1a5e:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1a62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a64:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a66:	98 17       	cp	r25, r24
    1a68:	08 f4       	brcc	.+2      	; 0x1a6c <xTaskIncrementTick+0x14e>
    1a6a:	ac cf       	rjmp	.-168    	; 0x19c4 <xTaskIncrementTick+0xa6>
    1a6c:	bb 24       	eor	r11, r11
    1a6e:	b3 94       	inc	r11
    1a70:	a9 cf       	rjmp	.-174    	; 0x19c4 <xTaskIncrementTick+0xa6>
    1a72:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1a76:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1a7a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1a7c:	8b e0       	ldi	r24, 0x0B	; 11
    1a7e:	e8 9f       	mul	r30, r24
    1a80:	f0 01       	movw	r30, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	ee 59       	subi	r30, 0x9E	; 158
    1a86:	f3 4d       	sbci	r31, 0xD3	; 211
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	48 f0       	brcs	.+18     	; 0x1aa0 <xTaskIncrementTick+0x182>
    1a8e:	bb 24       	eor	r11, r11
    1a90:	b3 94       	inc	r11
    1a92:	06 c0       	rjmp	.+12     	; 0x1aa0 <xTaskIncrementTick+0x182>
    1a94:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <uxPendedTicks>
    1a98:	8f 5f       	subi	r24, 0xFF	; 255
    1a9a:	80 93 2a 2c 	sts	0x2C2A, r24	; 0x802c2a <uxPendedTicks>
    1a9e:	b1 2c       	mov	r11, r1
    1aa0:	80 91 29 2c 	lds	r24, 0x2C29	; 0x802c29 <xYieldPending>
    1aa4:	88 23       	and	r24, r24
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <xTaskIncrementTick+0x18e>
    1aa8:	bb 24       	eor	r11, r11
    1aaa:	b3 94       	inc	r11
    1aac:	8b 2d       	mov	r24, r11
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	af 90       	pop	r10
    1ac2:	08 95       	ret

00001ac4 <xTaskResumeAll>:
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ad8:	ff 93       	push	r31
    1ada:	f8 7f       	andi	r31, 0xF8	; 248
    1adc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ae0:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1ae4:	81 50       	subi	r24, 0x01	; 1
    1ae6:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxSchedulerSuspended>
    1aea:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1aee:	81 11       	cpse	r24, r1
    1af0:	5c c0       	rjmp	.+184    	; 0x1baa <xTaskResumeAll+0xe6>
    1af2:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <uxCurrentNumberOfTasks>
    1af6:	81 11       	cpse	r24, r1
    1af8:	2c c0       	rjmp	.+88     	; 0x1b52 <xTaskResumeAll+0x8e>
    1afa:	5a c0       	rjmp	.+180    	; 0x1bb0 <xTaskResumeAll+0xec>
    1afc:	d7 01       	movw	r26, r14
    1afe:	17 96       	adiw	r26, 0x07	; 7
    1b00:	ed 91       	ld	r30, X+
    1b02:	fc 91       	ld	r31, X
    1b04:	18 97       	sbiw	r26, 0x08	; 8
    1b06:	c0 85       	ldd	r28, Z+8	; 0x08
    1b08:	d1 85       	ldd	r29, Z+9	; 0x09
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	0e 96       	adiw	r24, 0x0e	; 14
    1b0e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1b12:	8e 01       	movw	r16, r28
    1b14:	0e 5f       	subi	r16, 0xFE	; 254
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	c8 01       	movw	r24, r16
    1b1a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1b1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b20:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1b24:	98 17       	cp	r25, r24
    1b26:	10 f4       	brcc	.+4      	; 0x1b2c <xTaskResumeAll+0x68>
    1b28:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1b2c:	d8 9e       	mul	r13, r24
    1b2e:	c0 01       	movw	r24, r0
    1b30:	11 24       	eor	r1, r1
    1b32:	b8 01       	movw	r22, r16
    1b34:	8e 59       	subi	r24, 0x9E	; 158
    1b36:	93 4d       	sbci	r25, 0xD3	; 211
    1b38:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1b3c:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1b40:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1b44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b46:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b48:	98 17       	cp	r25, r24
    1b4a:	88 f0       	brcs	.+34     	; 0x1b6e <xTaskResumeAll+0xaa>
    1b4c:	c0 92 29 2c 	sts	0x2C29, r12	; 0x802c29 <xYieldPending>
    1b50:	0e c0       	rjmp	.+28     	; 0x1b6e <xTaskResumeAll+0xaa>
    1b52:	c0 e0       	ldi	r28, 0x00	; 0
    1b54:	d0 e0       	ldi	r29, 0x00	; 0
    1b56:	0f 2e       	mov	r0, r31
    1b58:	fd e3       	ldi	r31, 0x3D	; 61
    1b5a:	ef 2e       	mov	r14, r31
    1b5c:	fc e2       	ldi	r31, 0x2C	; 44
    1b5e:	ff 2e       	mov	r15, r31
    1b60:	f0 2d       	mov	r31, r0
    1b62:	0f 2e       	mov	r0, r31
    1b64:	fb e0       	ldi	r31, 0x0B	; 11
    1b66:	df 2e       	mov	r13, r31
    1b68:	f0 2d       	mov	r31, r0
    1b6a:	cc 24       	eor	r12, r12
    1b6c:	c3 94       	inc	r12
    1b6e:	f7 01       	movw	r30, r14
    1b70:	80 81       	ld	r24, Z
    1b72:	81 11       	cpse	r24, r1
    1b74:	c3 cf       	rjmp	.-122    	; 0x1afc <xTaskResumeAll+0x38>
    1b76:	cd 2b       	or	r28, r29
    1b78:	11 f0       	breq	.+4      	; 0x1b7e <xTaskResumeAll+0xba>
    1b7a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <prvResetNextTaskUnblockTime>
    1b7e:	c0 91 2a 2c 	lds	r28, 0x2C2A	; 0x802c2a <uxPendedTicks>
    1b82:	cc 23       	and	r28, r28
    1b84:	51 f0       	breq	.+20     	; 0x1b9a <xTaskResumeAll+0xd6>
    1b86:	d1 e0       	ldi	r29, 0x01	; 1
    1b88:	0e 94 8f 0c 	call	0x191e	; 0x191e <xTaskIncrementTick>
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	d0 93 29 2c 	sts	0x2C29, r29	; 0x802c29 <xYieldPending>
    1b92:	c1 50       	subi	r28, 0x01	; 1
    1b94:	c9 f7       	brne	.-14     	; 0x1b88 <xTaskResumeAll+0xc4>
    1b96:	10 92 2a 2c 	sts	0x2C2A, r1	; 0x802c2a <uxPendedTicks>
    1b9a:	80 91 29 2c 	lds	r24, 0x2C29	; 0x802c29 <xYieldPending>
    1b9e:	88 23       	and	r24, r24
    1ba0:	31 f0       	breq	.+12     	; 0x1bae <xTaskResumeAll+0xea>
    1ba2:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <xTaskResumeAll+0xec>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <xTaskResumeAll+0xec>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	ff 91       	pop	r31
    1bb2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	08 95       	ret

00001bc8 <vTaskDelay>:
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	6b 01       	movw	r12, r22
    1bd2:	7c 01       	movw	r14, r24
    1bd4:	67 2b       	or	r22, r23
    1bd6:	68 2b       	or	r22, r24
    1bd8:	69 2b       	or	r22, r25
    1bda:	59 f0       	breq	.+22     	; 0x1bf2 <vTaskDelay+0x2a>
    1bdc:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	c7 01       	movw	r24, r14
    1be4:	b6 01       	movw	r22, r12
    1be6:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1bea:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1bee:	81 11       	cpse	r24, r1
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <vTaskDelay+0x2e>
    1bf2:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	08 95       	ret

00001c00 <vTaskSwitchContext>:
    1c00:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1c04:	88 23       	and	r24, r24
    1c06:	21 f0       	breq	.+8      	; 0x1c10 <vTaskSwitchContext+0x10>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1c0e:	08 95       	ret
    1c10:	10 92 29 2c 	sts	0x2C29, r1	; 0x802c29 <xYieldPending>
    1c14:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1c18:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1c1c:	03 8c       	ldd	r0, Z+27	; 0x1b
    1c1e:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1c20:	e0 2d       	mov	r30, r0
    1c22:	80 81       	ld	r24, Z
    1c24:	91 81       	ldd	r25, Z+1	; 0x01
    1c26:	a2 81       	ldd	r26, Z+2	; 0x02
    1c28:	b3 81       	ldd	r27, Z+3	; 0x03
    1c2a:	85 3a       	cpi	r24, 0xA5	; 165
    1c2c:	95 4a       	sbci	r25, 0xA5	; 165
    1c2e:	a5 4a       	sbci	r26, 0xA5	; 165
    1c30:	b5 4a       	sbci	r27, 0xA5	; 165
    1c32:	d9 f4       	brne	.+54     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c34:	84 81       	ldd	r24, Z+4	; 0x04
    1c36:	95 81       	ldd	r25, Z+5	; 0x05
    1c38:	a6 81       	ldd	r26, Z+6	; 0x06
    1c3a:	b7 81       	ldd	r27, Z+7	; 0x07
    1c3c:	85 3a       	cpi	r24, 0xA5	; 165
    1c3e:	95 4a       	sbci	r25, 0xA5	; 165
    1c40:	a5 4a       	sbci	r26, 0xA5	; 165
    1c42:	b5 4a       	sbci	r27, 0xA5	; 165
    1c44:	91 f4       	brne	.+36     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c46:	80 85       	ldd	r24, Z+8	; 0x08
    1c48:	91 85       	ldd	r25, Z+9	; 0x09
    1c4a:	a2 85       	ldd	r26, Z+10	; 0x0a
    1c4c:	b3 85       	ldd	r27, Z+11	; 0x0b
    1c4e:	85 3a       	cpi	r24, 0xA5	; 165
    1c50:	95 4a       	sbci	r25, 0xA5	; 165
    1c52:	a5 4a       	sbci	r26, 0xA5	; 165
    1c54:	b5 4a       	sbci	r27, 0xA5	; 165
    1c56:	49 f4       	brne	.+18     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c58:	84 85       	ldd	r24, Z+12	; 0x0c
    1c5a:	95 85       	ldd	r25, Z+13	; 0x0d
    1c5c:	a6 85       	ldd	r26, Z+14	; 0x0e
    1c5e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1c60:	85 3a       	cpi	r24, 0xA5	; 165
    1c62:	95 4a       	sbci	r25, 0xA5	; 165
    1c64:	a5 4a       	sbci	r26, 0xA5	; 165
    1c66:	b5 4a       	sbci	r27, 0xA5	; 165
    1c68:	61 f0       	breq	.+24     	; 0x1c82 <vTaskSwitchContext+0x82>
    1c6a:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1c6e:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1c72:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1c76:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1c7a:	63 5e       	subi	r22, 0xE3	; 227
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <vApplicationStackOverflowHook>
    1c82:	80 91 2c 2c 	lds	r24, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	9b e0       	ldi	r25, 0x0B	; 11
    1c8c:	89 9f       	mul	r24, r25
    1c8e:	f0 01       	movw	r30, r0
    1c90:	11 24       	eor	r1, r1
    1c92:	ee 59       	subi	r30, 0x9E	; 158
    1c94:	f3 4d       	sbci	r31, 0xD3	; 211
    1c96:	90 81       	ld	r25, Z
    1c98:	91 11       	cpse	r25, r1
    1c9a:	0e c0       	rjmp	.+28     	; 0x1cb8 <vTaskSwitchContext+0xb8>
    1c9c:	4b e0       	ldi	r20, 0x0B	; 11
    1c9e:	81 50       	subi	r24, 0x01	; 1
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	42 9f       	mul	r20, r18
    1ca6:	f0 01       	movw	r30, r0
    1ca8:	43 9f       	mul	r20, r19
    1caa:	f0 0d       	add	r31, r0
    1cac:	11 24       	eor	r1, r1
    1cae:	ee 59       	subi	r30, 0x9E	; 158
    1cb0:	f3 4d       	sbci	r31, 0xD3	; 211
    1cb2:	90 81       	ld	r25, Z
    1cb4:	99 23       	and	r25, r25
    1cb6:	99 f3       	breq	.-26     	; 0x1c9e <vTaskSwitchContext+0x9e>
    1cb8:	9b e0       	ldi	r25, 0x0B	; 11
    1cba:	92 9f       	mul	r25, r18
    1cbc:	a0 01       	movw	r20, r0
    1cbe:	93 9f       	mul	r25, r19
    1cc0:	50 0d       	add	r21, r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	da 01       	movw	r26, r20
    1cc6:	ae 59       	subi	r26, 0x9E	; 158
    1cc8:	b3 4d       	sbci	r27, 0xD3	; 211
    1cca:	11 96       	adiw	r26, 0x01	; 1
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	12 97       	sbiw	r26, 0x02	; 2
    1cd2:	04 80       	ldd	r0, Z+4	; 0x04
    1cd4:	f5 81       	ldd	r31, Z+5	; 0x05
    1cd6:	e0 2d       	mov	r30, r0
    1cd8:	11 96       	adiw	r26, 0x01	; 1
    1cda:	ed 93       	st	X+, r30
    1cdc:	fc 93       	st	X, r31
    1cde:	12 97       	sbiw	r26, 0x02	; 2
    1ce0:	4b 59       	subi	r20, 0x9B	; 155
    1ce2:	53 4d       	sbci	r21, 0xD3	; 211
    1ce4:	e4 17       	cp	r30, r20
    1ce6:	f5 07       	cpc	r31, r21
    1ce8:	29 f4       	brne	.+10     	; 0x1cf4 <vTaskSwitchContext+0xf4>
    1cea:	44 81       	ldd	r20, Z+4	; 0x04
    1cec:	55 81       	ldd	r21, Z+5	; 0x05
    1cee:	fd 01       	movw	r30, r26
    1cf0:	41 83       	std	Z+1, r20	; 0x01
    1cf2:	52 83       	std	Z+2, r21	; 0x02
    1cf4:	9b e0       	ldi	r25, 0x0B	; 11
    1cf6:	92 9f       	mul	r25, r18
    1cf8:	f0 01       	movw	r30, r0
    1cfa:	93 9f       	mul	r25, r19
    1cfc:	f0 0d       	add	r31, r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	ee 59       	subi	r30, 0x9E	; 158
    1d02:	f3 4d       	sbci	r31, 0xD3	; 211
    1d04:	01 80       	ldd	r0, Z+1	; 0x01
    1d06:	f2 81       	ldd	r31, Z+2	; 0x02
    1d08:	e0 2d       	mov	r30, r0
    1d0a:	20 85       	ldd	r18, Z+8	; 0x08
    1d0c:	31 85       	ldd	r19, Z+9	; 0x09
    1d0e:	20 93 8e 2c 	sts	0x2C8E, r18	; 0x802c8e <pxCurrentTCB>
    1d12:	30 93 8f 2c 	sts	0x2C8F, r19	; 0x802c8f <pxCurrentTCB+0x1>
    1d16:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1d1a:	08 95       	ret

00001d1c <vTaskPlaceOnEventList>:
    1d1c:	cf 92       	push	r12
    1d1e:	df 92       	push	r13
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	6a 01       	movw	r12, r20
    1d26:	7b 01       	movw	r14, r22
    1d28:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1d2c:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1d30:	62 5f       	subi	r22, 0xF2	; 242
    1d32:	7f 4f       	sbci	r23, 0xFF	; 255
    1d34:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	08 95       	ret

00001d4c <vTaskPlaceOnUnorderedEventList>:
    1d4c:	cf 92       	push	r12
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	68 01       	movw	r12, r16
    1d5a:	79 01       	movw	r14, r18
    1d5c:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1d60:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1d64:	70 68       	ori	r23, 0x80	; 128
    1d66:	46 87       	std	Z+14, r20	; 0x0e
    1d68:	57 87       	std	Z+15, r21	; 0x0f
    1d6a:	60 8b       	std	Z+16, r22	; 0x10
    1d6c:	71 8b       	std	Z+17, r23	; 0x11
    1d6e:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1d72:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1d76:	62 5f       	subi	r22, 0xF2	; 242
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	c7 01       	movw	r24, r14
    1d82:	b6 01       	movw	r22, r12
    1d84:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	08 95       	ret

00001d96 <vTaskPlaceOnEventListRestricted>:
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	cf 93       	push	r28
    1da0:	6a 01       	movw	r12, r20
    1da2:	7b 01       	movw	r14, r22
    1da4:	c2 2f       	mov	r28, r18
    1da6:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1daa:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1dae:	62 5f       	subi	r22, 0xF2	; 242
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1db6:	cc 23       	and	r28, r28
    1db8:	21 f0       	breq	.+8      	; 0x1dc2 <vTaskPlaceOnEventListRestricted+0x2c>
    1dba:	cc 24       	eor	r12, r12
    1dbc:	ca 94       	dec	r12
    1dbe:	dc 2c       	mov	r13, r12
    1dc0:	76 01       	movw	r14, r12
    1dc2:	4c 2f       	mov	r20, r28
    1dc4:	c7 01       	movw	r24, r14
    1dc6:	b6 01       	movw	r22, r12
    1dc8:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1dcc:	cf 91       	pop	r28
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	08 95       	ret

00001dd8 <xTaskRemoveFromEventList>:
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	dc 01       	movw	r26, r24
    1de2:	17 96       	adiw	r26, 0x07	; 7
    1de4:	ed 91       	ld	r30, X+
    1de6:	fc 91       	ld	r31, X
    1de8:	18 97       	sbiw	r26, 0x08	; 8
    1dea:	c0 85       	ldd	r28, Z+8	; 0x08
    1dec:	d1 85       	ldd	r29, Z+9	; 0x09
    1dee:	8e 01       	movw	r16, r28
    1df0:	02 5f       	subi	r16, 0xF2	; 242
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	c8 01       	movw	r24, r16
    1df6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1dfa:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1dfe:	81 11       	cpse	r24, r1
    1e00:	16 c0       	rjmp	.+44     	; 0x1e2e <xTaskRemoveFromEventList+0x56>
    1e02:	0c 50       	subi	r16, 0x0C	; 12
    1e04:	11 09       	sbc	r17, r1
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e0e:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1e12:	98 17       	cp	r25, r24
    1e14:	10 f4       	brcc	.+4      	; 0x1e1a <xTaskRemoveFromEventList+0x42>
    1e16:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1e1a:	bb e0       	ldi	r27, 0x0B	; 11
    1e1c:	8b 9f       	mul	r24, r27
    1e1e:	c0 01       	movw	r24, r0
    1e20:	11 24       	eor	r1, r1
    1e22:	b8 01       	movw	r22, r16
    1e24:	8e 59       	subi	r24, 0x9E	; 158
    1e26:	93 4d       	sbci	r25, 0xD3	; 211
    1e28:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1e2c:	05 c0       	rjmp	.+10     	; 0x1e38 <xTaskRemoveFromEventList+0x60>
    1e2e:	b8 01       	movw	r22, r16
    1e30:	8d e3       	ldi	r24, 0x3D	; 61
    1e32:	9c e2       	ldi	r25, 0x2C	; 44
    1e34:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1e38:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1e3c:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1e40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e42:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e44:	89 17       	cp	r24, r25
    1e46:	20 f4       	brcc	.+8      	; 0x1e50 <xTaskRemoveFromEventList+0x78>
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <xTaskRemoveFromEventList+0x7a>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	08 95       	ret

00001e5c <vTaskRemoveFromUnorderedEventList>:
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	70 68       	ori	r23, 0x80	; 128
    1e66:	fc 01       	movw	r30, r24
    1e68:	40 83       	st	Z, r20
    1e6a:	51 83       	std	Z+1, r21	; 0x01
    1e6c:	62 83       	std	Z+2, r22	; 0x02
    1e6e:	73 83       	std	Z+3, r23	; 0x03
    1e70:	c0 85       	ldd	r28, Z+8	; 0x08
    1e72:	d1 85       	ldd	r29, Z+9	; 0x09
    1e74:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e78:	8e 01       	movw	r16, r28
    1e7a:	0e 5f       	subi	r16, 0xFE	; 254
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7e:	c8 01       	movw	r24, r16
    1e80:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e86:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1e8a:	98 17       	cp	r25, r24
    1e8c:	10 f4       	brcc	.+4      	; 0x1e92 <vTaskRemoveFromUnorderedEventList+0x36>
    1e8e:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1e92:	fb e0       	ldi	r31, 0x0B	; 11
    1e94:	8f 9f       	mul	r24, r31
    1e96:	c0 01       	movw	r24, r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	b8 01       	movw	r22, r16
    1e9c:	8e 59       	subi	r24, 0x9E	; 158
    1e9e:	93 4d       	sbci	r25, 0xD3	; 211
    1ea0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1ea4:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1ea8:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1eac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1eae:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eb0:	89 17       	cp	r24, r25
    1eb2:	18 f4       	brcc	.+6      	; 0x1eba <vTaskRemoveFromUnorderedEventList+0x5e>
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <vTaskInternalSetTimeOutState>:
    1ec4:	20 91 28 2c 	lds	r18, 0x2C28	; 0x802c28 <xNumOfOverflows>
    1ec8:	fc 01       	movw	r30, r24
    1eca:	20 83       	st	Z, r18
    1ecc:	40 91 2d 2c 	lds	r20, 0x2C2D	; 0x802c2d <xTickCount>
    1ed0:	50 91 2e 2c 	lds	r21, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    1ed4:	60 91 2f 2c 	lds	r22, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1ed8:	70 91 30 2c 	lds	r23, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1edc:	41 83       	std	Z+1, r20	; 0x01
    1ede:	52 83       	std	Z+2, r21	; 0x02
    1ee0:	63 83       	std	Z+3, r22	; 0x03
    1ee2:	74 83       	std	Z+4, r23	; 0x04
    1ee4:	08 95       	ret

00001ee6 <xTaskCheckForTimeOut>:
    1ee6:	cf 92       	push	r12
    1ee8:	df 92       	push	r13
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	db 01       	movw	r26, r22
    1ef8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1efc:	ff 93       	push	r31
    1efe:	f8 7f       	andi	r31, 0xF8	; 248
    1f00:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f04:	40 91 2d 2c 	lds	r20, 0x2C2D	; 0x802c2d <xTickCount>
    1f08:	50 91 2e 2c 	lds	r21, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    1f0c:	60 91 2f 2c 	lds	r22, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1f10:	70 91 30 2c 	lds	r23, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1f14:	0d 91       	ld	r16, X+
    1f16:	1d 91       	ld	r17, X+
    1f18:	2d 91       	ld	r18, X+
    1f1a:	3c 91       	ld	r19, X
    1f1c:	13 97       	sbiw	r26, 0x03	; 3
    1f1e:	0f 3f       	cpi	r16, 0xFF	; 255
    1f20:	cf ef       	ldi	r28, 0xFF	; 255
    1f22:	1c 07       	cpc	r17, r28
    1f24:	2c 07       	cpc	r18, r28
    1f26:	3c 07       	cpc	r19, r28
    1f28:	69 f1       	breq	.+90     	; 0x1f84 <xTaskCheckForTimeOut+0x9e>
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	c1 80       	ldd	r12, Z+1	; 0x01
    1f2e:	d2 80       	ldd	r13, Z+2	; 0x02
    1f30:	e3 80       	ldd	r14, Z+3	; 0x03
    1f32:	f4 80       	ldd	r15, Z+4	; 0x04
    1f34:	e0 91 28 2c 	lds	r30, 0x2C28	; 0x802c28 <xNumOfOverflows>
    1f38:	ec 01       	movw	r28, r24
    1f3a:	f8 81       	ld	r31, Y
    1f3c:	fe 17       	cp	r31, r30
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <xTaskCheckForTimeOut+0x64>
    1f40:	4c 15       	cp	r20, r12
    1f42:	5d 05       	cpc	r21, r13
    1f44:	6e 05       	cpc	r22, r14
    1f46:	7f 05       	cpc	r23, r15
    1f48:	f8 f4       	brcc	.+62     	; 0x1f88 <xTaskCheckForTimeOut+0xa2>
    1f4a:	4c 19       	sub	r20, r12
    1f4c:	5d 09       	sbc	r21, r13
    1f4e:	6e 09       	sbc	r22, r14
    1f50:	7f 09       	sbc	r23, r15
    1f52:	40 17       	cp	r20, r16
    1f54:	51 07       	cpc	r21, r17
    1f56:	62 07       	cpc	r22, r18
    1f58:	73 07       	cpc	r23, r19
    1f5a:	68 f4       	brcc	.+26     	; 0x1f76 <xTaskCheckForTimeOut+0x90>
    1f5c:	fd 01       	movw	r30, r26
    1f5e:	04 1b       	sub	r16, r20
    1f60:	15 0b       	sbc	r17, r21
    1f62:	26 0b       	sbc	r18, r22
    1f64:	37 0b       	sbc	r19, r23
    1f66:	00 83       	st	Z, r16
    1f68:	11 83       	std	Z+1, r17	; 0x01
    1f6a:	22 83       	std	Z+2, r18	; 0x02
    1f6c:	33 83       	std	Z+3, r19	; 0x03
    1f6e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	0a c0       	rjmp	.+20     	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f76:	1d 92       	st	X+, r1
    1f78:	1d 92       	st	X+, r1
    1f7a:	1d 92       	st	X+, r1
    1f7c:	1c 92       	st	X, r1
    1f7e:	13 97       	sbiw	r26, 0x03	; 3
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	ff 91       	pop	r31
    1f8c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	ff 90       	pop	r15
    1f9a:	ef 90       	pop	r14
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	08 95       	ret

00001fa2 <vTaskMissedYield>:
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1fa8:	08 95       	ret

00001faa <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1faa:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xSchedulerRunning>
    1fae:	88 23       	and	r24, r24
    1fb0:	31 f0       	breq	.+12     	; 0x1fbe <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1fb2:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1fb6:	88 23       	and	r24, r24
    1fb8:	21 f0       	breq	.+8      	; 0x1fc2 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    1fc4:	08 95       	ret

00001fc6 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1fc6:	cf 92       	push	r12
    1fc8:	df 92       	push	r13
    1fca:	ef 92       	push	r14
    1fcc:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1fce:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1fd2:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1fd6:	66 85       	ldd	r22, Z+14	; 0x0e
    1fd8:	77 85       	ldd	r23, Z+15	; 0x0f
    1fda:	80 89       	ldd	r24, Z+16	; 0x10
    1fdc:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1fde:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1fe2:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1fe6:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1fea:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1fee:	5a 96       	adiw	r26, 0x1a	; 26
    1ff0:	2c 91       	ld	r18, X
    1ff2:	c1 2c       	mov	r12, r1
    1ff4:	d1 2c       	mov	r13, r1
    1ff6:	76 01       	movw	r14, r12
    1ff8:	68 94       	set
    1ffa:	c2 f8       	bld	r12, 2
    1ffc:	c2 1a       	sub	r12, r18
    1ffe:	d1 08       	sbc	r13, r1
    2000:	e1 08       	sbc	r14, r1
    2002:	f1 08       	sbc	r15, r1
    2004:	c6 86       	std	Z+14, r12	; 0x0e
    2006:	d7 86       	std	Z+15, r13	; 0x0f
    2008:	e0 8a       	std	Z+16, r14	; 0x10
    200a:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    200c:	ff 90       	pop	r15
    200e:	ef 90       	pop	r14
    2010:	df 90       	pop	r13
    2012:	cf 90       	pop	r12
    2014:	08 95       	ret

00002016 <prvInsertTimerInActiveList>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	fc 01       	movw	r30, r24
    2024:	42 83       	std	Z+2, r20	; 0x02
    2026:	53 83       	std	Z+3, r21	; 0x03
    2028:	64 83       	std	Z+4, r22	; 0x04
    202a:	75 83       	std	Z+5, r23	; 0x05
    202c:	82 87       	std	Z+10, r24	; 0x0a
    202e:	93 87       	std	Z+11, r25	; 0x0b
    2030:	04 17       	cp	r16, r20
    2032:	15 07       	cpc	r17, r21
    2034:	26 07       	cpc	r18, r22
    2036:	37 07       	cpc	r19, r23
    2038:	c0 f0       	brcs	.+48     	; 0x206a <prvInsertTimerInActiveList+0x54>
    203a:	0c 19       	sub	r16, r12
    203c:	1d 09       	sbc	r17, r13
    203e:	2e 09       	sbc	r18, r14
    2040:	3f 09       	sbc	r19, r15
    2042:	86 85       	ldd	r24, Z+14	; 0x0e
    2044:	97 85       	ldd	r25, Z+15	; 0x0f
    2046:	a0 89       	ldd	r26, Z+16	; 0x10
    2048:	b1 89       	ldd	r27, Z+17	; 0x11
    204a:	08 17       	cp	r16, r24
    204c:	19 07       	cpc	r17, r25
    204e:	2a 07       	cpc	r18, r26
    2050:	3b 07       	cpc	r19, r27
    2052:	00 f5       	brcc	.+64     	; 0x2094 <prvInsertTimerInActiveList+0x7e>
    2054:	bf 01       	movw	r22, r30
    2056:	6e 5f       	subi	r22, 0xFE	; 254
    2058:	7f 4f       	sbci	r23, 0xFF	; 255
    205a:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <pxOverflowTimerList>
    205e:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <pxOverflowTimerList+0x1>
    2062:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	18 c0       	rjmp	.+48     	; 0x209a <prvInsertTimerInActiveList+0x84>
    206a:	0c 15       	cp	r16, r12
    206c:	1d 05       	cpc	r17, r13
    206e:	2e 05       	cpc	r18, r14
    2070:	3f 05       	cpc	r19, r15
    2072:	28 f4       	brcc	.+10     	; 0x207e <prvInsertTimerInActiveList+0x68>
    2074:	4c 15       	cp	r20, r12
    2076:	5d 05       	cpc	r21, r13
    2078:	6e 05       	cpc	r22, r14
    207a:	7f 05       	cpc	r23, r15
    207c:	68 f4       	brcc	.+26     	; 0x2098 <prvInsertTimerInActiveList+0x82>
    207e:	bf 01       	movw	r22, r30
    2080:	6e 5f       	subi	r22, 0xFE	; 254
    2082:	7f 4f       	sbci	r23, 0xFF	; 255
    2084:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    2088:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    208c:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	03 c0       	rjmp	.+6      	; 0x209a <prvInsertTimerInActiveList+0x84>
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	01 c0       	rjmp	.+2      	; 0x209a <prvInsertTimerInActiveList+0x84>
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	08 95       	ret

000020a8 <prvCheckForValidListAndQueue>:
    20a8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    20ac:	ff 93       	push	r31
    20ae:	f8 7f       	andi	r31, 0xF8	; 248
    20b0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    20b4:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    20b8:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    20bc:	89 2b       	or	r24, r25
    20be:	e9 f4       	brne	.+58     	; 0x20fa <prvCheckForValidListAndQueue+0x52>
    20c0:	87 ea       	ldi	r24, 0xA7	; 167
    20c2:	9c e2       	ldi	r25, 0x2C	; 44
    20c4:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    20c8:	8c e9       	ldi	r24, 0x9C	; 156
    20ca:	9c e2       	ldi	r25, 0x2C	; 44
    20cc:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    20d0:	87 ea       	ldi	r24, 0xA7	; 167
    20d2:	9c e2       	ldi	r25, 0x2C	; 44
    20d4:	80 93 9a 2c 	sts	0x2C9A, r24	; 0x802c9a <pxCurrentTimerList>
    20d8:	90 93 9b 2c 	sts	0x2C9B, r25	; 0x802c9b <pxCurrentTimerList+0x1>
    20dc:	8c e9       	ldi	r24, 0x9C	; 156
    20de:	9c e2       	ldi	r25, 0x2C	; 44
    20e0:	80 93 98 2c 	sts	0x2C98, r24	; 0x802c98 <pxOverflowTimerList>
    20e4:	90 93 99 2c 	sts	0x2C99, r25	; 0x802c99 <pxOverflowTimerList+0x1>
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	69 e0       	ldi	r22, 0x09	; 9
    20ec:	85 e0       	ldi	r24, 0x05	; 5
    20ee:	0e 94 8d 08 	call	0x111a	; 0x111a <xQueueGenericCreate>
    20f2:	80 93 96 2c 	sts	0x2C96, r24	; 0x802c96 <xTimerQueue>
    20f6:	90 93 97 2c 	sts	0x2C97, r25	; 0x802c97 <xTimerQueue+0x1>
    20fa:	ff 91       	pop	r31
    20fc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2100:	08 95       	ret

00002102 <xTimerCreateTimerTask>:
    2102:	ef 92       	push	r14
    2104:	ff 92       	push	r15
    2106:	0f 93       	push	r16
    2108:	0e 94 54 10 	call	0x20a8	; 0x20a8 <prvCheckForValidListAndQueue>
    210c:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    2110:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    2114:	89 2b       	or	r24, r25
    2116:	91 f0       	breq	.+36     	; 0x213c <xTimerCreateTimerTask+0x3a>
    2118:	0f 2e       	mov	r0, r31
    211a:	f4 e9       	ldi	r31, 0x94	; 148
    211c:	ef 2e       	mov	r14, r31
    211e:	fc e2       	ldi	r31, 0x2C	; 44
    2120:	ff 2e       	mov	r15, r31
    2122:	f0 2d       	mov	r31, r0
    2124:	03 e0       	ldi	r16, 0x03	; 3
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	48 ec       	ldi	r20, 0xC8	; 200
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	62 e5       	ldi	r22, 0x52	; 82
    2130:	70 e2       	ldi	r23, 0x20	; 32
    2132:	84 e9       	ldi	r24, 0x94	; 148
    2134:	91 e1       	ldi	r25, 0x11	; 17
    2136:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
    213a:	01 c0       	rjmp	.+2      	; 0x213e <xTimerCreateTimerTask+0x3c>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	08 95       	ret

00002146 <xTimerGenericCommand>:
    2146:	8f 92       	push	r8
    2148:	9f 92       	push	r9
    214a:	af 92       	push	r10
    214c:	bf 92       	push	r11
    214e:	cf 92       	push	r12
    2150:	df 92       	push	r13
    2152:	ef 92       	push	r14
    2154:	ff 92       	push	r15
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	29 97       	sbiw	r28, 0x09	; 9
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <xTimerQueue>
    216c:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    2170:	30 97       	sbiw	r30, 0x00	; 0
    2172:	89 f1       	breq	.+98     	; 0x21d6 <xTimerGenericCommand+0x90>
    2174:	69 83       	std	Y+1, r22	; 0x01
    2176:	2a 83       	std	Y+2, r18	; 0x02
    2178:	3b 83       	std	Y+3, r19	; 0x03
    217a:	4c 83       	std	Y+4, r20	; 0x04
    217c:	5d 83       	std	Y+5, r21	; 0x05
    217e:	8e 83       	std	Y+6, r24	; 0x06
    2180:	9f 83       	std	Y+7, r25	; 0x07
    2182:	66 30       	cpi	r22, 0x06	; 6
    2184:	fc f4       	brge	.+62     	; 0x21c4 <xTimerGenericCommand+0x7e>
    2186:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xTaskGetSchedulerState>
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	69 f4       	brne	.+26     	; 0x21a8 <xTimerGenericCommand+0x62>
    218e:	00 e0       	ldi	r16, 0x00	; 0
    2190:	a7 01       	movw	r20, r14
    2192:	96 01       	movw	r18, r12
    2194:	be 01       	movw	r22, r28
    2196:	6f 5f       	subi	r22, 0xFF	; 255
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    219e:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    21a2:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
    21a6:	18 c0       	rjmp	.+48     	; 0x21d8 <xTimerGenericCommand+0x92>
    21a8:	00 e0       	ldi	r16, 0x00	; 0
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	a9 01       	movw	r20, r18
    21b0:	be 01       	movw	r22, r28
    21b2:	6f 5f       	subi	r22, 0xFF	; 255
    21b4:	7f 4f       	sbci	r23, 0xFF	; 255
    21b6:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    21ba:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    21be:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
    21c2:	0a c0       	rjmp	.+20     	; 0x21d8 <xTimerGenericCommand+0x92>
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	a8 01       	movw	r20, r16
    21c8:	be 01       	movw	r22, r28
    21ca:	6f 5f       	subi	r22, 0xFF	; 255
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	cf 01       	movw	r24, r30
    21d0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xQueueGenericSendFromISR>
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <xTimerGenericCommand+0x92>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	29 96       	adiw	r28, 0x09	; 9
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	ff 90       	pop	r15
    21e8:	ef 90       	pop	r14
    21ea:	df 90       	pop	r13
    21ec:	cf 90       	pop	r12
    21ee:	bf 90       	pop	r11
    21f0:	af 90       	pop	r10
    21f2:	9f 90       	pop	r9
    21f4:	8f 90       	pop	r8
    21f6:	08 95       	ret

000021f8 <prvSampleTimeNow>:
    21f8:	2f 92       	push	r2
    21fa:	3f 92       	push	r3
    21fc:	4f 92       	push	r4
    21fe:	5f 92       	push	r5
    2200:	6f 92       	push	r6
    2202:	7f 92       	push	r7
    2204:	8f 92       	push	r8
    2206:	9f 92       	push	r9
    2208:	af 92       	push	r10
    220a:	bf 92       	push	r11
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	1c 01       	movw	r2, r24
    221e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <xTaskGetTickCount>
    2222:	2b 01       	movw	r4, r22
    2224:	3c 01       	movw	r6, r24
    2226:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xLastTime.4745>
    222a:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <xLastTime.4745+0x1>
    222e:	a0 91 92 2c 	lds	r26, 0x2C92	; 0x802c92 <xLastTime.4745+0x2>
    2232:	b0 91 93 2c 	lds	r27, 0x2C93	; 0x802c93 <xLastTime.4745+0x3>
    2236:	48 16       	cp	r4, r24
    2238:	59 06       	cpc	r5, r25
    223a:	6a 06       	cpc	r6, r26
    223c:	7b 06       	cpc	r7, r27
    223e:	08 f0       	brcs	.+2      	; 0x2242 <prvSampleTimeNow+0x4a>
    2240:	54 c0       	rjmp	.+168    	; 0x22ea <prvSampleTimeNow+0xf2>
    2242:	3c c0       	rjmp	.+120    	; 0x22bc <prvSampleTimeNow+0xc4>
    2244:	07 80       	ldd	r0, Z+7	; 0x07
    2246:	f0 85       	ldd	r31, Z+8	; 0x08
    2248:	e0 2d       	mov	r30, r0
    224a:	80 80       	ld	r8, Z
    224c:	91 80       	ldd	r9, Z+1	; 0x01
    224e:	a2 80       	ldd	r10, Z+2	; 0x02
    2250:	b3 80       	ldd	r11, Z+3	; 0x03
    2252:	c0 85       	ldd	r28, Z+8	; 0x08
    2254:	d1 85       	ldd	r29, Z+9	; 0x09
    2256:	8e 01       	movw	r16, r28
    2258:	0e 5f       	subi	r16, 0xFE	; 254
    225a:	1f 4f       	sbci	r17, 0xFF	; 255
    225c:	c8 01       	movw	r24, r16
    225e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    2262:	ed 89       	ldd	r30, Y+21	; 0x15
    2264:	fe 89       	ldd	r31, Y+22	; 0x16
    2266:	ce 01       	movw	r24, r28
    2268:	19 95       	eicall
    226a:	8a 89       	ldd	r24, Y+18	; 0x12
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	31 f5       	brne	.+76     	; 0x22bc <prvSampleTimeNow+0xc4>
    2270:	8e 85       	ldd	r24, Y+14	; 0x0e
    2272:	9f 85       	ldd	r25, Y+15	; 0x0f
    2274:	a8 89       	ldd	r26, Y+16	; 0x10
    2276:	b9 89       	ldd	r27, Y+17	; 0x11
    2278:	88 0d       	add	r24, r8
    227a:	99 1d       	adc	r25, r9
    227c:	aa 1d       	adc	r26, r10
    227e:	bb 1d       	adc	r27, r11
    2280:	88 16       	cp	r8, r24
    2282:	99 06       	cpc	r9, r25
    2284:	aa 06       	cpc	r10, r26
    2286:	bb 06       	cpc	r11, r27
    2288:	70 f4       	brcc	.+28     	; 0x22a6 <prvSampleTimeNow+0xae>
    228a:	8a 83       	std	Y+2, r24	; 0x02
    228c:	9b 83       	std	Y+3, r25	; 0x03
    228e:	ac 83       	std	Y+4, r26	; 0x04
    2290:	bd 83       	std	Y+5, r27	; 0x05
    2292:	ca 87       	std	Y+10, r28	; 0x0a
    2294:	db 87       	std	Y+11, r29	; 0x0b
    2296:	b8 01       	movw	r22, r16
    2298:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    229c:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    22a0:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    22a4:	0b c0       	rjmp	.+22     	; 0x22bc <prvSampleTimeNow+0xc4>
    22a6:	c1 2c       	mov	r12, r1
    22a8:	d1 2c       	mov	r13, r1
    22aa:	76 01       	movw	r14, r12
    22ac:	00 e0       	ldi	r16, 0x00	; 0
    22ae:	10 e0       	ldi	r17, 0x00	; 0
    22b0:	a5 01       	movw	r20, r10
    22b2:	94 01       	movw	r18, r8
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	ce 01       	movw	r24, r28
    22b8:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    22bc:	e0 91 9a 2c 	lds	r30, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    22c0:	f0 91 9b 2c 	lds	r31, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    22c4:	80 81       	ld	r24, Z
    22c6:	81 11       	cpse	r24, r1
    22c8:	bd cf       	rjmp	.-134    	; 0x2244 <prvSampleTimeNow+0x4c>
    22ca:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <pxOverflowTimerList>
    22ce:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <pxOverflowTimerList+0x1>
    22d2:	80 93 9a 2c 	sts	0x2C9A, r24	; 0x802c9a <pxCurrentTimerList>
    22d6:	90 93 9b 2c 	sts	0x2C9B, r25	; 0x802c9b <pxCurrentTimerList+0x1>
    22da:	e0 93 98 2c 	sts	0x2C98, r30	; 0x802c98 <pxOverflowTimerList>
    22de:	f0 93 99 2c 	sts	0x2C99, r31	; 0x802c99 <pxOverflowTimerList+0x1>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	f1 01       	movw	r30, r2
    22e6:	80 83       	st	Z, r24
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <prvSampleTimeNow+0xf6>
    22ea:	f1 01       	movw	r30, r2
    22ec:	10 82       	st	Z, r1
    22ee:	40 92 90 2c 	sts	0x2C90, r4	; 0x802c90 <xLastTime.4745>
    22f2:	50 92 91 2c 	sts	0x2C91, r5	; 0x802c91 <xLastTime.4745+0x1>
    22f6:	60 92 92 2c 	sts	0x2C92, r6	; 0x802c92 <xLastTime.4745+0x2>
    22fa:	70 92 93 2c 	sts	0x2C93, r7	; 0x802c93 <xLastTime.4745+0x3>
    22fe:	c3 01       	movw	r24, r6
    2300:	b2 01       	movw	r22, r4
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	df 90       	pop	r13
    2310:	cf 90       	pop	r12
    2312:	bf 90       	pop	r11
    2314:	af 90       	pop	r10
    2316:	9f 90       	pop	r9
    2318:	8f 90       	pop	r8
    231a:	7f 90       	pop	r7
    231c:	6f 90       	pop	r6
    231e:	5f 90       	pop	r5
    2320:	4f 90       	pop	r4
    2322:	3f 90       	pop	r3
    2324:	2f 90       	pop	r2
    2326:	08 95       	ret

00002328 <prvTimerTask>:
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	2e 97       	sbiw	r28, 0x0e	; 14
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	ce 01       	movw	r24, r28
    2338:	01 96       	adiw	r24, 0x01	; 1
    233a:	1c 01       	movw	r2, r24
    233c:	a8 2e       	mov	r10, r24
    233e:	b3 2c       	mov	r11, r3
    2340:	e0 91 9a 2c 	lds	r30, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    2344:	f0 91 9b 2c 	lds	r31, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    2348:	80 81       	ld	r24, Z
    234a:	88 23       	and	r24, r24
    234c:	09 f4       	brne	.+2      	; 0x2350 <prvTimerTask+0x28>
    234e:	03 c1       	rjmp	.+518    	; 0x2556 <prvTimerTask+0x22e>
    2350:	07 80       	ldd	r0, Z+7	; 0x07
    2352:	f0 85       	ldd	r31, Z+8	; 0x08
    2354:	e0 2d       	mov	r30, r0
    2356:	40 80       	ld	r4, Z
    2358:	51 80       	ldd	r5, Z+1	; 0x01
    235a:	62 80       	ldd	r6, Z+2	; 0x02
    235c:	73 80       	ldd	r7, Z+3	; 0x03
    235e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    2362:	c1 01       	movw	r24, r2
    2364:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    2368:	6b 87       	std	Y+11, r22	; 0x0b
    236a:	7c 87       	std	Y+12, r23	; 0x0c
    236c:	8d 87       	std	Y+13, r24	; 0x0d
    236e:	9e 87       	std	Y+14, r25	; 0x0e
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	81 11       	cpse	r24, r1
    2374:	5e c0       	rjmp	.+188    	; 0x2432 <prvTimerTask+0x10a>
    2376:	8b 85       	ldd	r24, Y+11	; 0x0b
    2378:	9c 85       	ldd	r25, Y+12	; 0x0c
    237a:	ad 85       	ldd	r26, Y+13	; 0x0d
    237c:	be 85       	ldd	r27, Y+14	; 0x0e
    237e:	84 15       	cp	r24, r4
    2380:	95 05       	cpc	r25, r5
    2382:	a6 05       	cpc	r26, r6
    2384:	b7 05       	cpc	r27, r7
    2386:	e8 f1       	brcs	.+122    	; 0x2402 <prvTimerTask+0xda>
    2388:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    238c:	e0 91 9a 2c 	lds	r30, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    2390:	f0 91 9b 2c 	lds	r31, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    2394:	07 80       	ldd	r0, Z+7	; 0x07
    2396:	f0 85       	ldd	r31, Z+8	; 0x08
    2398:	e0 2d       	mov	r30, r0
    239a:	80 84       	ldd	r8, Z+8	; 0x08
    239c:	91 84       	ldd	r9, Z+9	; 0x09
    239e:	c4 01       	movw	r24, r8
    23a0:	02 96       	adiw	r24, 0x02	; 2
    23a2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    23a6:	d4 01       	movw	r26, r8
    23a8:	52 96       	adiw	r26, 0x12	; 18
    23aa:	8c 91       	ld	r24, X
    23ac:	52 97       	sbiw	r26, 0x12	; 18
    23ae:	81 30       	cpi	r24, 0x01	; 1
    23b0:	01 f5       	brne	.+64     	; 0x23f2 <prvTimerTask+0xca>
    23b2:	1e 96       	adiw	r26, 0x0e	; 14
    23b4:	4d 91       	ld	r20, X+
    23b6:	5d 91       	ld	r21, X+
    23b8:	6d 91       	ld	r22, X+
    23ba:	7c 91       	ld	r23, X
    23bc:	51 97       	sbiw	r26, 0x11	; 17
    23be:	44 0d       	add	r20, r4
    23c0:	55 1d       	adc	r21, r5
    23c2:	66 1d       	adc	r22, r6
    23c4:	77 1d       	adc	r23, r7
    23c6:	73 01       	movw	r14, r6
    23c8:	62 01       	movw	r12, r4
    23ca:	0b 85       	ldd	r16, Y+11	; 0x0b
    23cc:	1c 85       	ldd	r17, Y+12	; 0x0c
    23ce:	2d 85       	ldd	r18, Y+13	; 0x0d
    23d0:	3e 85       	ldd	r19, Y+14	; 0x0e
    23d2:	c4 01       	movw	r24, r8
    23d4:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    23d8:	88 23       	and	r24, r24
    23da:	59 f0       	breq	.+22     	; 0x23f2 <prvTimerTask+0xca>
    23dc:	c1 2c       	mov	r12, r1
    23de:	d1 2c       	mov	r13, r1
    23e0:	76 01       	movw	r14, r12
    23e2:	00 e0       	ldi	r16, 0x00	; 0
    23e4:	10 e0       	ldi	r17, 0x00	; 0
    23e6:	a3 01       	movw	r20, r6
    23e8:	92 01       	movw	r18, r4
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	c4 01       	movw	r24, r8
    23ee:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    23f2:	d4 01       	movw	r26, r8
    23f4:	55 96       	adiw	r26, 0x15	; 21
    23f6:	ed 91       	ld	r30, X+
    23f8:	fc 91       	ld	r31, X
    23fa:	56 97       	sbiw	r26, 0x16	; 22
    23fc:	c4 01       	movw	r24, r8
    23fe:	19 95       	eicall
    2400:	9c c0       	rjmp	.+312    	; 0x253a <prvTimerTask+0x212>
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	b3 01       	movw	r22, r6
    2406:	a2 01       	movw	r20, r4
    2408:	8b 85       	ldd	r24, Y+11	; 0x0b
    240a:	9c 85       	ldd	r25, Y+12	; 0x0c
    240c:	ad 85       	ldd	r26, Y+13	; 0x0d
    240e:	be 85       	ldd	r27, Y+14	; 0x0e
    2410:	48 1b       	sub	r20, r24
    2412:	59 0b       	sbc	r21, r25
    2414:	6a 0b       	sbc	r22, r26
    2416:	7b 0b       	sbc	r23, r27
    2418:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    241c:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    2420:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <vQueueWaitForMessageRestricted>
    2424:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    2428:	81 11       	cpse	r24, r1
    242a:	87 c0       	rjmp	.+270    	; 0x253a <prvTimerTask+0x212>
    242c:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    2430:	84 c0       	rjmp	.+264    	; 0x253a <prvTimerTask+0x212>
    2432:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    2436:	81 c0       	rjmp	.+258    	; 0x253a <prvTimerTask+0x212>
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	88 23       	and	r24, r24
    243c:	6c f4       	brge	.+26     	; 0x2458 <prvTimerTask+0x130>
    243e:	4e 81       	ldd	r20, Y+6	; 0x06
    2440:	5f 81       	ldd	r21, Y+7	; 0x07
    2442:	68 85       	ldd	r22, Y+8	; 0x08
    2444:	79 85       	ldd	r23, Y+9	; 0x09
    2446:	ea 81       	ldd	r30, Y+2	; 0x02
    2448:	fb 81       	ldd	r31, Y+3	; 0x03
    244a:	8c 81       	ldd	r24, Y+4	; 0x04
    244c:	9d 81       	ldd	r25, Y+5	; 0x05
    244e:	19 95       	eicall
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	88 23       	and	r24, r24
    2454:	0c f4       	brge	.+2      	; 0x2458 <prvTimerTask+0x130>
    2456:	71 c0       	rjmp	.+226    	; 0x253a <prvTimerTask+0x212>
    2458:	8e 80       	ldd	r8, Y+6	; 0x06
    245a:	9f 80       	ldd	r9, Y+7	; 0x07
    245c:	d4 01       	movw	r26, r8
    245e:	1c 96       	adiw	r26, 0x0c	; 12
    2460:	8d 91       	ld	r24, X+
    2462:	9c 91       	ld	r25, X
    2464:	1d 97       	sbiw	r26, 0x0d	; 13
    2466:	89 2b       	or	r24, r25
    2468:	21 f0       	breq	.+8      	; 0x2472 <prvTimerTask+0x14a>
    246a:	c4 01       	movw	r24, r8
    246c:	02 96       	adiw	r24, 0x02	; 2
    246e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    2472:	ce 01       	movw	r24, r28
    2474:	0a 96       	adiw	r24, 0x0a	; 10
    2476:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    247a:	8b 01       	movw	r16, r22
    247c:	9c 01       	movw	r18, r24
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	08 2e       	mov	r0, r24
    2482:	00 0c       	add	r0, r0
    2484:	99 0b       	sbc	r25, r25
    2486:	aa 0b       	sbc	r26, r26
    2488:	bb 0b       	sbc	r27, r27
    248a:	8a 30       	cpi	r24, 0x0A	; 10
    248c:	91 05       	cpc	r25, r1
    248e:	08 f0       	brcs	.+2      	; 0x2492 <prvTimerTask+0x16a>
    2490:	54 c0       	rjmp	.+168    	; 0x253a <prvTimerTask+0x212>
    2492:	fc 01       	movw	r30, r24
    2494:	88 27       	eor	r24, r24
    2496:	e2 50       	subi	r30, 0x02	; 2
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	8f 4f       	sbci	r24, 0xFF	; 255
    249c:	0c 94 34 24 	jmp	0x4868	; 0x4868 <__tablejump2__>
    24a0:	ca 80       	ldd	r12, Y+2	; 0x02
    24a2:	db 80       	ldd	r13, Y+3	; 0x03
    24a4:	ec 80       	ldd	r14, Y+4	; 0x04
    24a6:	fd 80       	ldd	r15, Y+5	; 0x05
    24a8:	f4 01       	movw	r30, r8
    24aa:	46 85       	ldd	r20, Z+14	; 0x0e
    24ac:	57 85       	ldd	r21, Z+15	; 0x0f
    24ae:	60 89       	ldd	r22, Z+16	; 0x10
    24b0:	71 89       	ldd	r23, Z+17	; 0x11
    24b2:	4c 0d       	add	r20, r12
    24b4:	5d 1d       	adc	r21, r13
    24b6:	6e 1d       	adc	r22, r14
    24b8:	7f 1d       	adc	r23, r15
    24ba:	c4 01       	movw	r24, r8
    24bc:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    24c0:	88 23       	and	r24, r24
    24c2:	d9 f1       	breq	.+118    	; 0x253a <prvTimerTask+0x212>
    24c4:	d4 01       	movw	r26, r8
    24c6:	55 96       	adiw	r26, 0x15	; 21
    24c8:	ed 91       	ld	r30, X+
    24ca:	fc 91       	ld	r31, X
    24cc:	56 97       	sbiw	r26, 0x16	; 22
    24ce:	c4 01       	movw	r24, r8
    24d0:	19 95       	eicall
    24d2:	f4 01       	movw	r30, r8
    24d4:	82 89       	ldd	r24, Z+18	; 0x12
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	81 f5       	brne	.+96     	; 0x253a <prvTimerTask+0x212>
    24da:	4a 81       	ldd	r20, Y+2	; 0x02
    24dc:	5b 81       	ldd	r21, Y+3	; 0x03
    24de:	6c 81       	ldd	r22, Y+4	; 0x04
    24e0:	7d 81       	ldd	r23, Y+5	; 0x05
    24e2:	86 85       	ldd	r24, Z+14	; 0x0e
    24e4:	97 85       	ldd	r25, Z+15	; 0x0f
    24e6:	a0 89       	ldd	r26, Z+16	; 0x10
    24e8:	b1 89       	ldd	r27, Z+17	; 0x11
    24ea:	9a 01       	movw	r18, r20
    24ec:	ab 01       	movw	r20, r22
    24ee:	28 0f       	add	r18, r24
    24f0:	39 1f       	adc	r19, r25
    24f2:	4a 1f       	adc	r20, r26
    24f4:	5b 1f       	adc	r21, r27
    24f6:	c1 2c       	mov	r12, r1
    24f8:	d1 2c       	mov	r13, r1
    24fa:	76 01       	movw	r14, r12
    24fc:	00 e0       	ldi	r16, 0x00	; 0
    24fe:	10 e0       	ldi	r17, 0x00	; 0
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	c4 01       	movw	r24, r8
    2504:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    2508:	18 c0       	rjmp	.+48     	; 0x253a <prvTimerTask+0x212>
    250a:	4a 81       	ldd	r20, Y+2	; 0x02
    250c:	5b 81       	ldd	r21, Y+3	; 0x03
    250e:	6c 81       	ldd	r22, Y+4	; 0x04
    2510:	7d 81       	ldd	r23, Y+5	; 0x05
    2512:	d4 01       	movw	r26, r8
    2514:	1e 96       	adiw	r26, 0x0e	; 14
    2516:	4d 93       	st	X+, r20
    2518:	5d 93       	st	X+, r21
    251a:	6d 93       	st	X+, r22
    251c:	7c 93       	st	X, r23
    251e:	51 97       	sbiw	r26, 0x11	; 17
    2520:	40 0f       	add	r20, r16
    2522:	51 1f       	adc	r21, r17
    2524:	62 1f       	adc	r22, r18
    2526:	73 1f       	adc	r23, r19
    2528:	68 01       	movw	r12, r16
    252a:	79 01       	movw	r14, r18
    252c:	c4 01       	movw	r24, r8
    252e:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    2532:	03 c0       	rjmp	.+6      	; 0x253a <prvTimerTask+0x212>
    2534:	c4 01       	movw	r24, r8
    2536:	0e 94 29 05 	call	0xa52	; 0xa52 <vPortFree>
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	a9 01       	movw	r20, r18
    2540:	6a 2d       	mov	r22, r10
    2542:	7b 2d       	mov	r23, r11
    2544:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    2548:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    254c:	0e 94 a9 09 	call	0x1352	; 0x1352 <xQueueReceive>
    2550:	81 11       	cpse	r24, r1
    2552:	72 cf       	rjmp	.-284    	; 0x2438 <prvTimerTask+0x110>
    2554:	f5 ce       	rjmp	.-534    	; 0x2340 <prvTimerTask+0x18>
    2556:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    255a:	c1 01       	movw	r24, r2
    255c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    2560:	6b 87       	std	Y+11, r22	; 0x0b
    2562:	7c 87       	std	Y+12, r23	; 0x0c
    2564:	8d 87       	std	Y+13, r24	; 0x0d
    2566:	9e 87       	std	Y+14, r25	; 0x0e
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	81 11       	cpse	r24, r1
    256c:	62 cf       	rjmp	.-316    	; 0x2432 <prvTimerTask+0x10a>
    256e:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxOverflowTimerList>
    2572:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxOverflowTimerList+0x1>
    2576:	80 81       	ld	r24, Z
    2578:	21 e0       	ldi	r18, 0x01	; 1
    257a:	81 11       	cpse	r24, r1
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	41 2c       	mov	r4, r1
    2580:	51 2c       	mov	r5, r1
    2582:	32 01       	movw	r6, r4
    2584:	3f cf       	rjmp	.-386    	; 0x2404 <prvTimerTask+0xdc>

00002586 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2586:	0f 93       	push	r16
    2588:	1f 93       	push	r17
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	29 97       	sbiw	r28, 0x09	; 9
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    2598:	ee ef       	ldi	r30, 0xFE	; 254
    259a:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    259c:	8a 83       	std	Y+2, r24	; 0x02
    259e:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    25a0:	6c 83       	std	Y+4, r22	; 0x04
    25a2:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    25a4:	2e 83       	std	Y+6, r18	; 0x06
    25a6:	3f 83       	std	Y+7, r19	; 0x07
    25a8:	48 87       	std	Y+8, r20	; 0x08
    25aa:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	a8 01       	movw	r20, r16
    25b0:	be 01       	movw	r22, r28
    25b2:	6f 5f       	subi	r22, 0xFF	; 255
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    25ba:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    25be:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    25c2:	29 96       	adiw	r28, 0x09	; 9
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	08 95       	ret

000025d2 <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    25d2:	e0 e5       	ldi	r30, 0x50	; 80
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	81 60       	ori	r24, 0x01	; 1
    25da:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    25dc:	81 81       	ldd	r24, Z+1	; 0x01
    25de:	80 ff       	sbrs	r24, 0
    25e0:	fd cf       	rjmp	.-6      	; 0x25dc <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	0e 94 35 03 	call	0x66a	; 0x66a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    25e8:	8e e1       	ldi	r24, 0x1E	; 30
    25ea:	0e 94 25 03 	call	0x64a	; 0x64a <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	0e 94 2f 03 	call	0x65e	; 0x65e <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    25f6:	43 e0       	ldi	r20, 0x03	; 3
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	80 e4       	ldi	r24, 0x40	; 64
    25fc:	0e 94 16 03 	call	0x62c	; 0x62c <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    2600:	e0 e5       	ldi	r30, 0x50	; 80
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	88 60       	ori	r24, 0x08	; 8
    2608:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    260a:	81 81       	ldd	r24, Z+1	; 0x01
    260c:	83 ff       	sbrs	r24, 3
    260e:	fd cf       	rjmp	.-6      	; 0x260a <vInitClock+0x38>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    2610:	64 e0       	ldi	r22, 0x04	; 4
    2612:	80 ec       	ldi	r24, 0xC0	; 192
    2614:	0e 94 20 03 	call	0x640	; 0x640 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    2618:	e0 e5       	ldi	r30, 0x50	; 80
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	80 61       	ori	r24, 0x10	; 16
    2620:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	0e 94 2f 03 	call	0x65e	; 0x65e <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    262a:	e0 e5       	ldi	r30, 0x50	; 80
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	81 81       	ldd	r24, Z+1	; 0x01
    2630:	84 ff       	sbrs	r24, 4
    2632:	fd cf       	rjmp	.-6      	; 0x262e <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    2634:	84 e0       	ldi	r24, 0x04	; 4
    2636:	0e 94 35 03 	call	0x66a	; 0x66a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    263a:	87 e0       	ldi	r24, 0x07	; 7
    263c:	0e 94 25 03 	call	0x64a	; 0x64a <CLKSYS_Disable>
    2640:	08 95       	ret

00002642 <vApplicationIdleHook>:
double dPi4; 
long i;


void vApplicationIdleHook( void )
{	
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
	
}
    264a:	00 00       	nop
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	08 95       	ret

00002652 <main>:

int main(void)
{
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
	vInitClock();
    2660:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <vInitClock>
	vInitDisplay();
    2664:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <vInitDisplay>
	
	xTaskCreate( vButton, (const char *) "Button", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    2668:	e1 2c       	mov	r14, r1
    266a:	f1 2c       	mov	r15, r1
    266c:	03 e0       	ldi	r16, 0x03	; 3
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	48 ec       	ldi	r20, 0xC8	; 200
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	60 e0       	ldi	r22, 0x00	; 0
    2678:	70 e2       	ldi	r23, 0x20	; 32
    267a:	82 e3       	ldi	r24, 0x32	; 50
    267c:	94 e1       	ldi	r25, 0x14	; 20
    267e:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
	xTaskCreate( vGUI, (const char *) "GUITask", configMINIMAL_STACK_SIZE, NULL, 2, &GUITask);
    2682:	0f 2e       	mov	r0, r31
    2684:	f7 ee       	ldi	r31, 0xE7	; 231
    2686:	ef 2e       	mov	r14, r31
    2688:	fc e2       	ldi	r31, 0x2C	; 44
    268a:	ff 2e       	mov	r15, r31
    268c:	f0 2d       	mov	r31, r0
    268e:	02 e0       	ldi	r16, 0x02	; 2
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	48 ec       	ldi	r20, 0xC8	; 200
    2696:	50 e0       	ldi	r21, 0x00	; 0
    2698:	67 e0       	ldi	r22, 0x07	; 7
    269a:	70 e2       	ldi	r23, 0x20	; 32
    269c:	89 e6       	ldi	r24, 0x69	; 105
    269e:	93 e1       	ldi	r25, 0x13	; 19
    26a0:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
	xTaskCreate( vCalc, (const char *) "Calc", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    26a4:	e1 2c       	mov	r14, r1
    26a6:	f1 2c       	mov	r15, r1
    26a8:	01 e0       	ldi	r16, 0x01	; 1
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	48 ec       	ldi	r20, 0xC8	; 200
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	6f e0       	ldi	r22, 0x0F	; 15
    26b4:	70 e2       	ldi	r23, 0x20	; 32
    26b6:	81 e5       	ldi	r24, 0x51	; 81
    26b8:	94 e1       	ldi	r25, 0x14	; 20
    26ba:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>

	vTaskStartScheduler();
    26be:	0e 94 3c 0c 	call	0x1878	; 0x1878 <vTaskStartScheduler>
	return 0;
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
}
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	0f 91       	pop	r16
    26cc:	ff 90       	pop	r15
    26ce:	ef 90       	pop	r14
    26d0:	08 95       	ret

000026d2 <vGUI>:

void vGUI(void *pvParameters) {
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	6b 97       	sbiw	r28, 0x1b	; 27
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	8a 8f       	std	Y+26, r24	; 0x1a
    26e2:	9b 8f       	std	Y+27, r25	; 0x1b
	char Pi[10] = "";			
    26e4:	19 82       	std	Y+1, r1	; 0x01
    26e6:	1a 82       	std	Y+2, r1	; 0x02
    26e8:	28 e0       	ldi	r18, 0x08	; 8
    26ea:	ce 01       	movw	r24, r28
    26ec:	03 96       	adiw	r24, 0x03	; 3
    26ee:	fc 01       	movw	r30, r24
    26f0:	32 2f       	mov	r19, r18
    26f2:	11 92       	st	Z+, r1
    26f4:	3a 95       	dec	r19
    26f6:	e9 f7       	brne	.-6      	; 0x26f2 <vGUI+0x20>
	char Iter[15] = "";
    26f8:	1b 86       	std	Y+11, r1	; 0x0b
    26fa:	1c 86       	std	Y+12, r1	; 0x0c
    26fc:	2d e0       	ldi	r18, 0x0D	; 13
    26fe:	ce 01       	movw	r24, r28
    2700:	0d 96       	adiw	r24, 0x0d	; 13
    2702:	fc 01       	movw	r30, r24
    2704:	32 2f       	mov	r19, r18
    2706:	11 92       	st	Z+, r1
    2708:	3a 95       	dec	r19
    270a:	e9 f7       	brne	.-6      	; 0x2706 <vGUI+0x34>
	for(;;) {

		sprintf(Pi, "%f", 4*dPi4);
    270c:	80 91 df 2c 	lds	r24, 0x2CDF	; 0x802cdf <dPi4>
    2710:	90 91 e0 2c 	lds	r25, 0x2CE0	; 0x802ce0 <dPi4+0x1>
    2714:	a0 91 e1 2c 	lds	r26, 0x2CE1	; 0x802ce1 <dPi4+0x2>
    2718:	b0 91 e2 2c 	lds	r27, 0x2CE2	; 0x802ce2 <dPi4+0x3>
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	50 e4       	ldi	r21, 0x40	; 64
    2724:	bc 01       	movw	r22, r24
    2726:	cd 01       	movw	r24, r26
    2728:	0e 94 27 20 	call	0x404e	; 0x404e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	2b 2f       	mov	r18, r27
    2732:	2f 93       	push	r18
    2734:	2a 2f       	mov	r18, r26
    2736:	2f 93       	push	r18
    2738:	29 2f       	mov	r18, r25
    273a:	2f 93       	push	r18
    273c:	8f 93       	push	r24
    273e:	84 e1       	ldi	r24, 0x14	; 20
    2740:	90 e2       	ldi	r25, 0x20	; 32
    2742:	89 2f       	mov	r24, r25
    2744:	8f 93       	push	r24
    2746:	84 e1       	ldi	r24, 0x14	; 20
    2748:	90 e2       	ldi	r25, 0x20	; 32
    274a:	8f 93       	push	r24
    274c:	ce 01       	movw	r24, r28
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	9f 93       	push	r25
    2752:	8f 93       	push	r24
    2754:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
    2758:	8d b7       	in	r24, 0x3d	; 61
    275a:	9e b7       	in	r25, 0x3e	; 62
    275c:	08 96       	adiw	r24, 0x08	; 8
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	de bf       	out	0x3e, r29	; 62
		sprintf(Iter, "%ld", i);
    2762:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <i>
    2766:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <i+0x1>
    276a:	a0 91 e5 2c 	lds	r26, 0x2CE5	; 0x802ce5 <i+0x2>
    276e:	b0 91 e6 2c 	lds	r27, 0x2CE6	; 0x802ce6 <i+0x3>
    2772:	2b 2f       	mov	r18, r27
    2774:	2f 93       	push	r18
    2776:	2a 2f       	mov	r18, r26
    2778:	2f 93       	push	r18
    277a:	29 2f       	mov	r18, r25
    277c:	2f 93       	push	r18
    277e:	8f 93       	push	r24
    2780:	87 e1       	ldi	r24, 0x17	; 23
    2782:	90 e2       	ldi	r25, 0x20	; 32
    2784:	89 2f       	mov	r24, r25
    2786:	8f 93       	push	r24
    2788:	87 e1       	ldi	r24, 0x17	; 23
    278a:	90 e2       	ldi	r25, 0x20	; 32
    278c:	8f 93       	push	r24
    278e:	ce 01       	movw	r24, r28
    2790:	0b 96       	adiw	r24, 0x0b	; 11
    2792:	29 2f       	mov	r18, r25
    2794:	2f 93       	push	r18
    2796:	8f 93       	push	r24
    2798:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
    279c:	ed b7       	in	r30, 0x3d	; 61
    279e:	fe b7       	in	r31, 0x3e	; 62
    27a0:	38 96       	adiw	r30, 0x08	; 8
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	de bf       	out	0x3e, r29	; 62
		
		vDisplayClear();
    27a6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <vDisplayClear>
		vDisplayWriteStringAtPos(0,0,"PI Calculator");
    27aa:	8b e1       	ldi	r24, 0x1B	; 27
    27ac:	90 e2       	ldi	r25, 0x20	; 32
    27ae:	89 2f       	mov	r24, r25
    27b0:	8f 93       	push	r24
    27b2:	8b e1       	ldi	r24, 0x1B	; 27
    27b4:	90 e2       	ldi	r25, 0x20	; 32
    27b6:	8f 93       	push	r24
    27b8:	1f 92       	push	r1
    27ba:	1f 92       	push	r1
    27bc:	1f 92       	push	r1
    27be:	1f 92       	push	r1
    27c0:	0e 94 fd 18 	call	0x31fa	; 0x31fa <vDisplayWriteStringAtPos>
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
		vDisplayWriteStringAtPos(1,0,"%s", Iter);
    27d0:	ce 01       	movw	r24, r28
    27d2:	0b 96       	adiw	r24, 0x0b	; 11
    27d4:	29 2f       	mov	r18, r25
    27d6:	2f 93       	push	r18
    27d8:	8f 93       	push	r24
    27da:	89 e2       	ldi	r24, 0x29	; 41
    27dc:	90 e2       	ldi	r25, 0x20	; 32
    27de:	89 2f       	mov	r24, r25
    27e0:	8f 93       	push	r24
    27e2:	89 e2       	ldi	r24, 0x29	; 41
    27e4:	90 e2       	ldi	r25, 0x20	; 32
    27e6:	8f 93       	push	r24
    27e8:	1f 92       	push	r1
    27ea:	1f 92       	push	r1
    27ec:	1f 92       	push	r1
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	8f 93       	push	r24
    27f2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <vDisplayWriteStringAtPos>
    27f6:	8d b7       	in	r24, 0x3d	; 61
    27f8:	9e b7       	in	r25, 0x3e	; 62
    27fa:	08 96       	adiw	r24, 0x08	; 8
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(2,0,"Pi: %s", Pi);
    2800:	ce 01       	movw	r24, r28
    2802:	01 96       	adiw	r24, 0x01	; 1
    2804:	9f 93       	push	r25
    2806:	8f 93       	push	r24
    2808:	8c e2       	ldi	r24, 0x2C	; 44
    280a:	90 e2       	ldi	r25, 0x20	; 32
    280c:	89 2f       	mov	r24, r25
    280e:	8f 93       	push	r24
    2810:	8c e2       	ldi	r24, 0x2C	; 44
    2812:	90 e2       	ldi	r25, 0x20	; 32
    2814:	8f 93       	push	r24
    2816:	1f 92       	push	r1
    2818:	1f 92       	push	r1
    281a:	1f 92       	push	r1
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	8f 93       	push	r24
    2820:	0e 94 fd 18 	call	0x31fa	; 0x31fa <vDisplayWriteStringAtPos>
    2824:	ed b7       	in	r30, 0x3d	; 61
    2826:	fe b7       	in	r31, 0x3e	; 62
    2828:	38 96       	adiw	r30, 0x08	; 8
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(3,0,"Zeit: xxxxxxms");
    282e:	83 e3       	ldi	r24, 0x33	; 51
    2830:	90 e2       	ldi	r25, 0x20	; 32
    2832:	89 2f       	mov	r24, r25
    2834:	8f 93       	push	r24
    2836:	83 e3       	ldi	r24, 0x33	; 51
    2838:	90 e2       	ldi	r25, 0x20	; 32
    283a:	8f 93       	push	r24
    283c:	1f 92       	push	r1
    283e:	1f 92       	push	r1
    2840:	1f 92       	push	r1
    2842:	83 e0       	ldi	r24, 0x03	; 3
    2844:	8f 93       	push	r24
    2846:	0e 94 fd 18 	call	0x31fa	; 0x31fa <vDisplayWriteStringAtPos>
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
		

		vTaskDelay(500 / portTICK_RATE_MS);
    2856:	64 ef       	ldi	r22, 0xF4	; 244
    2858:	71 e0       	ldi	r23, 0x01	; 1
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
	}
    2862:	54 cf       	rjmp	.-344    	; 0x270c <vGUI+0x3a>

00002864 <vButton>:
}

void vButton(void *pvParameters) {
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	1f 92       	push	r1
    286a:	1f 92       	push	r1
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	9a 83       	std	Y+2, r25	; 0x02
	initButtons();
    2874:	0e 94 ca 01 	call	0x394	; 0x394 <initButtons>
	
	while (1) {
		updateButtons();
    2878:	0e 94 e6 01 	call	0x3cc	; 0x3cc <updateButtons>
		if (getButtonPress(BUTTON1) == SHORT_PRESSED) {
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>

		}

		if (getButtonPress(BUTTON2) == SHORT_PRESSED) {
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>

		}
		
		if (getButtonPress(BUTTON3) == SHORT_PRESSED) {
    2888:	82 e0       	ldi	r24, 0x02	; 2
    288a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>

		}		

		if (getButtonPress(BUTTON4) == SHORT_PRESSED) {
    288e:	83 e0       	ldi	r24, 0x03	; 3
    2890:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>

		}

		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    2894:	6a e0       	ldi	r22, 0x0A	; 10
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
	}
    28a0:	eb cf       	rjmp	.-42     	; 0x2878 <vButton+0x14>

000028a2 <vCalc>:
}

void vCalc(void *pvParameters) {
    28a2:	cf 92       	push	r12
    28a4:	df 92       	push	r13
    28a6:	ef 92       	push	r14
    28a8:	ff 92       	push	r15
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	1f 92       	push	r1
    28b0:	1f 92       	push	r1
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	9a 83       	std	Y+2, r25	; 0x02
	dPi4 = 1;
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	a0 e8       	ldi	r26, 0x80	; 128
    28c0:	bf e3       	ldi	r27, 0x3F	; 63
    28c2:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <dPi4>
    28c6:	90 93 e0 2c 	sts	0x2CE0, r25	; 0x802ce0 <dPi4+0x1>
    28ca:	a0 93 e1 2c 	sts	0x2CE1, r26	; 0x802ce1 <dPi4+0x2>
    28ce:	b0 93 e2 2c 	sts	0x2CE2, r27	; 0x802ce2 <dPi4+0x3>
	
	for(i = 0;i<ITERATIONS;i++) {
    28d2:	10 92 e3 2c 	sts	0x2CE3, r1	; 0x802ce3 <i>
    28d6:	10 92 e4 2c 	sts	0x2CE4, r1	; 0x802ce4 <i+0x1>
    28da:	10 92 e5 2c 	sts	0x2CE5, r1	; 0x802ce5 <i+0x2>
    28de:	10 92 e6 2c 	sts	0x2CE6, r1	; 0x802ce6 <i+0x3>
    28e2:	81 c0       	rjmp	.+258    	; 0x29e6 <vCalc+0x144>
		dPi4 = dPi4 - (1.0/(3+4*i)) + (1.0/(5+4*i));
    28e4:	c0 90 df 2c 	lds	r12, 0x2CDF	; 0x802cdf <dPi4>
    28e8:	d0 90 e0 2c 	lds	r13, 0x2CE0	; 0x802ce0 <dPi4+0x1>
    28ec:	e0 90 e1 2c 	lds	r14, 0x2CE1	; 0x802ce1 <dPi4+0x2>
    28f0:	f0 90 e2 2c 	lds	r15, 0x2CE2	; 0x802ce2 <dPi4+0x3>
    28f4:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <i>
    28f8:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <i+0x1>
    28fc:	a0 91 e5 2c 	lds	r26, 0x2CE5	; 0x802ce5 <i+0x2>
    2900:	b0 91 e6 2c 	lds	r27, 0x2CE6	; 0x802ce6 <i+0x3>
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	aa 1f       	adc	r26, r26
    290a:	bb 1f       	adc	r27, r27
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	aa 1f       	adc	r26, r26
    2912:	bb 1f       	adc	r27, r27
    2914:	03 96       	adiw	r24, 0x03	; 3
    2916:	a1 1d       	adc	r26, r1
    2918:	b1 1d       	adc	r27, r1
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__floatsisf>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	9c 01       	movw	r18, r24
    2928:	ad 01       	movw	r20, r26
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	80 e8       	ldi	r24, 0x80	; 128
    2930:	9f e3       	ldi	r25, 0x3F	; 63
    2932:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__divsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9c 01       	movw	r18, r24
    293c:	ad 01       	movw	r20, r26
    293e:	c7 01       	movw	r24, r14
    2940:	b6 01       	movw	r22, r12
    2942:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__subsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	6c 01       	movw	r12, r24
    294c:	7d 01       	movw	r14, r26
    294e:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <i>
    2952:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <i+0x1>
    2956:	a0 91 e5 2c 	lds	r26, 0x2CE5	; 0x802ce5 <i+0x2>
    295a:	b0 91 e6 2c 	lds	r27, 0x2CE6	; 0x802ce6 <i+0x3>
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	aa 1f       	adc	r26, r26
    2964:	bb 1f       	adc	r27, r27
    2966:	88 0f       	add	r24, r24
    2968:	99 1f       	adc	r25, r25
    296a:	aa 1f       	adc	r26, r26
    296c:	bb 1f       	adc	r27, r27
    296e:	05 96       	adiw	r24, 0x05	; 5
    2970:	a1 1d       	adc	r26, r1
    2972:	b1 1d       	adc	r27, r1
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__floatsisf>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9c 01       	movw	r18, r24
    2982:	ad 01       	movw	r20, r26
    2984:	60 e0       	ldi	r22, 0x00	; 0
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	80 e8       	ldi	r24, 0x80	; 128
    298a:	9f e3       	ldi	r25, 0x3F	; 63
    298c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__divsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	9c 01       	movw	r18, r24
    2996:	ad 01       	movw	r20, r26
    2998:	c7 01       	movw	r24, r14
    299a:	b6 01       	movw	r22, r12
    299c:	0e 94 57 1e 	call	0x3cae	; 0x3cae <__addsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <dPi4>
    29a8:	90 93 e0 2c 	sts	0x2CE0, r25	; 0x802ce0 <dPi4+0x1>
    29ac:	a0 93 e1 2c 	sts	0x2CE1, r26	; 0x802ce1 <dPi4+0x2>
    29b0:	b0 93 e2 2c 	sts	0x2CE2, r27	; 0x802ce2 <dPi4+0x3>
		vTaskDelay(1/portTICK_RATE_MS);
    29b4:	61 e0       	ldi	r22, 0x01	; 1
    29b6:	70 e0       	ldi	r23, 0x00	; 0
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
}

void vCalc(void *pvParameters) {
	dPi4 = 1;
	
	for(i = 0;i<ITERATIONS;i++) {
    29c0:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <i>
    29c4:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <i+0x1>
    29c8:	a0 91 e5 2c 	lds	r26, 0x2CE5	; 0x802ce5 <i+0x2>
    29cc:	b0 91 e6 2c 	lds	r27, 0x2CE6	; 0x802ce6 <i+0x3>
    29d0:	01 96       	adiw	r24, 0x01	; 1
    29d2:	a1 1d       	adc	r26, r1
    29d4:	b1 1d       	adc	r27, r1
    29d6:	80 93 e3 2c 	sts	0x2CE3, r24	; 0x802ce3 <i>
    29da:	90 93 e4 2c 	sts	0x2CE4, r25	; 0x802ce4 <i+0x1>
    29de:	a0 93 e5 2c 	sts	0x2CE5, r26	; 0x802ce5 <i+0x2>
    29e2:	b0 93 e6 2c 	sts	0x2CE6, r27	; 0x802ce6 <i+0x3>
    29e6:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <i>
    29ea:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <i+0x1>
    29ee:	a0 91 e5 2c 	lds	r26, 0x2CE5	; 0x802ce5 <i+0x2>
    29f2:	b0 91 e6 2c 	lds	r27, 0x2CE6	; 0x802ce6 <i+0x3>
    29f6:	80 3a       	cpi	r24, 0xA0	; 160
    29f8:	96 48       	sbci	r25, 0x86	; 134
    29fa:	a1 40       	sbci	r26, 0x01	; 1
    29fc:	b1 05       	cpc	r27, r1
    29fe:	0c f4       	brge	.+2      	; 0x2a02 <vCalc+0x160>
    2a00:	71 cf       	rjmp	.-286    	; 0x28e4 <vCalc+0x42>
		dPi4 = dPi4 - (1.0/(3+4*i)) + (1.0/(5+4*i));
		vTaskDelay(1/portTICK_RATE_MS);
	}
	
}
    2a02:	00 00       	nop
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	ff 90       	pop	r15
    2a0e:	ef 90       	pop	r14
    2a10:	df 90       	pop	r13
    2a12:	cf 90       	pop	r12
    2a14:	08 95       	ret

00002a16 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    2a16:	1f 92       	push	r1
    2a18:	0f 92       	push	r0
    2a1a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2a1e:	0f 92       	push	r0
    2a20:	11 24       	eor	r1, r1
    2a22:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a26:	0f 92       	push	r0
    2a28:	2f 93       	push	r18
    2a2a:	3f 93       	push	r19
    2a2c:	4f 93       	push	r20
    2a2e:	5f 93       	push	r21
    2a30:	6f 93       	push	r22
    2a32:	7f 93       	push	r23
    2a34:	8f 93       	push	r24
    2a36:	9f 93       	push	r25
    2a38:	af 93       	push	r26
    2a3a:	bf 93       	push	r27
    2a3c:	ef 93       	push	r30
    2a3e:	ff 93       	push	r31
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	1f 92       	push	r1
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	19 82       	std	Y+1, r1	; 0x01
    2a4c:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <egDisplayTiming>
    2a50:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <egDisplayTiming+0x1>
    2a54:	9e 01       	movw	r18, r28
    2a56:	2f 5f       	subi	r18, 0xFF	; 255
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	41 e0       	ldi	r20, 0x01	; 1
    2a5c:	50 e0       	ldi	r21, 0x00	; 0
    2a5e:	60 e0       	ldi	r22, 0x00	; 0
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	0e 94 f6 04 	call	0x9ec	; 0x9ec <xEventGroupSetBitsFromISR>
    2a66:	60 e0       	ldi	r22, 0x00	; 0
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	9b e0       	ldi	r25, 0x0B	; 11
    2a6c:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	9b e0       	ldi	r25, 0x0B	; 11
    2a74:	fc 01       	movw	r30, r24
    2a76:	16 82       	std	Z+6, r1	; 0x06
    2a78:	00 00       	nop
    2a7a:	0f 90       	pop	r0
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	ff 91       	pop	r31
    2a82:	ef 91       	pop	r30
    2a84:	bf 91       	pop	r27
    2a86:	af 91       	pop	r26
    2a88:	9f 91       	pop	r25
    2a8a:	8f 91       	pop	r24
    2a8c:	7f 91       	pop	r23
    2a8e:	6f 91       	pop	r22
    2a90:	5f 91       	pop	r21
    2a92:	4f 91       	pop	r20
    2a94:	3f 91       	pop	r19
    2a96:	2f 91       	pop	r18
    2a98:	0f 90       	pop	r0
    2a9a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a9e:	0f 90       	pop	r0
    2aa0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2aa4:	0f 90       	pop	r0
    2aa6:	1f 90       	pop	r1
    2aa8:	18 95       	reti

00002aaa <delayUS>:
    2aaa:	cf 92       	push	r12
    2aac:	df 92       	push	r13
    2aae:	ef 92       	push	r14
    2ab0:	ff 92       	push	r15
    2ab2:	0f 93       	push	r16
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <delayUS+0x10>
    2aba:	1f 92       	push	r1
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	69 83       	std	Y+1, r22	; 0x01
    2ac2:	7a 83       	std	Y+2, r23	; 0x02
    2ac4:	8b 83       	std	Y+3, r24	; 0x03
    2ac6:	9c 83       	std	Y+4, r25	; 0x04
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
    2acc:	ab 81       	ldd	r26, Y+3	; 0x03
    2ace:	bc 81       	ldd	r27, Y+4	; 0x04
    2ad0:	02 97       	sbiw	r24, 0x02	; 2
    2ad2:	a1 05       	cpc	r26, r1
    2ad4:	b1 05       	cpc	r27, r1
    2ad6:	40 f4       	brcc	.+16     	; 0x2ae8 <delayUS+0x3e>
    2ad8:	82 e0       	ldi	r24, 0x02	; 2
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	ab 83       	std	Y+3, r26	; 0x03
    2ae6:	bc 83       	std	Y+4, r27	; 0x04
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	9b e0       	ldi	r25, 0x0B	; 11
    2aec:	21 e0       	ldi	r18, 0x01	; 1
    2aee:	fc 01       	movw	r30, r24
    2af0:	26 83       	std	Z+6, r18	; 0x06
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	9b e0       	ldi	r25, 0x0B	; 11
    2af6:	fc 01       	movw	r30, r24
    2af8:	10 a2       	std	Z+32, r1	; 0x20
    2afa:	11 a2       	std	Z+33, r1	; 0x21
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	9b e0       	ldi	r25, 0x0B	; 11
    2b02:	0e 94 50 03 	call	0x6a0	; 0x6a0 <TC0_ConfigWGM>
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0a:	ab 81       	ldd	r26, Y+3	; 0x03
    2b0c:	bc 81       	ldd	r27, Y+4	; 0x04
    2b0e:	8e 3f       	cpi	r24, 0xFE	; 254
    2b10:	9f 4f       	sbci	r25, 0xFF	; 255
    2b12:	a1 05       	cpc	r26, r1
    2b14:	b1 05       	cpc	r27, r1
    2b16:	98 f4       	brcc	.+38     	; 0x2b3e <delayUS+0x94>
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	3b e0       	ldi	r19, 0x0B	; 11
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b20:	ab 81       	ldd	r26, Y+3	; 0x03
    2b22:	bc 81       	ldd	r27, Y+4	; 0x04
    2b24:	b6 95       	lsr	r27
    2b26:	a7 95       	ror	r26
    2b28:	97 95       	ror	r25
    2b2a:	87 95       	ror	r24
    2b2c:	f9 01       	movw	r30, r18
    2b2e:	86 a3       	std	Z+38, r24	; 0x26
    2b30:	97 a3       	std	Z+39, r25	; 0x27
    2b32:	65 e0       	ldi	r22, 0x05	; 5
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	9b e0       	ldi	r25, 0x0B	; 11
    2b38:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2b3c:	1f c0       	rjmp	.+62     	; 0x2b7c <delayUS+0xd2>
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	9a 81       	ldd	r25, Y+2	; 0x02
    2b42:	ab 81       	ldd	r26, Y+3	; 0x03
    2b44:	bc 81       	ldd	r27, Y+4	; 0x04
    2b46:	80 34       	cpi	r24, 0x40	; 64
    2b48:	92 44       	sbci	r25, 0x42	; 66
    2b4a:	af 40       	sbci	r26, 0x0F	; 15
    2b4c:	b1 05       	cpc	r27, r1
    2b4e:	b0 f4       	brcc	.+44     	; 0x2b7c <delayUS+0xd2>
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	3b e0       	ldi	r19, 0x0B	; 11
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	9a 81       	ldd	r25, Y+2	; 0x02
    2b58:	ab 81       	ldd	r26, Y+3	; 0x03
    2b5a:	bc 81       	ldd	r27, Y+4	; 0x04
    2b5c:	68 94       	set
    2b5e:	14 f8       	bld	r1, 4
    2b60:	b6 95       	lsr	r27
    2b62:	a7 95       	ror	r26
    2b64:	97 95       	ror	r25
    2b66:	87 95       	ror	r24
    2b68:	16 94       	lsr	r1
    2b6a:	d1 f7       	brne	.-12     	; 0x2b60 <delayUS+0xb6>
    2b6c:	f9 01       	movw	r30, r18
    2b6e:	86 a3       	std	Z+38, r24	; 0x26
    2b70:	97 a3       	std	Z+39, r25	; 0x27
    2b72:	67 e0       	ldi	r22, 0x07	; 7
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	9b e0       	ldi	r25, 0x0B	; 11
    2b78:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2b7c:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <egDisplayTiming>
    2b80:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <egDisplayTiming+0x1>
    2b84:	0f 2e       	mov	r0, r31
    2b86:	f4 ef       	ldi	r31, 0xF4	; 244
    2b88:	cf 2e       	mov	r12, r31
    2b8a:	dd 24       	eor	r13, r13
    2b8c:	d3 94       	inc	r13
    2b8e:	e1 2c       	mov	r14, r1
    2b90:	f1 2c       	mov	r15, r1
    2b92:	f0 2d       	mov	r31, r0
    2b94:	00 e0       	ldi	r16, 0x00	; 0
    2b96:	21 e0       	ldi	r18, 0x01	; 1
    2b98:	41 e0       	ldi	r20, 0x01	; 1
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	70 e0       	ldi	r23, 0x00	; 0
    2ba0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <xEventGroupWaitBits>
    2ba4:	00 00       	nop
    2ba6:	24 96       	adiw	r28, 0x04	; 4
    2ba8:	cd bf       	out	0x3d, r28	; 61
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	df 91       	pop	r29
    2bae:	cf 91       	pop	r28
    2bb0:	0f 91       	pop	r16
    2bb2:	ff 90       	pop	r15
    2bb4:	ef 90       	pop	r14
    2bb6:	df 90       	pop	r13
    2bb8:	cf 90       	pop	r12
    2bba:	08 95       	ret

00002bbc <setPort>:
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	1f 92       	push	r1
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	89 83       	std	Y+1, r24	; 0x01
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	8f 70       	andi	r24, 0x0F	; 15
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	82 95       	swap	r24
    2bd2:	80 7f       	andi	r24, 0xF0	; 240
    2bd4:	89 83       	std	Y+1, r24	; 0x01
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	96 e0       	ldi	r25, 0x06	; 6
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	36 e0       	ldi	r19, 0x06	; 6
    2bde:	f9 01       	movw	r30, r18
    2be0:	34 81       	ldd	r19, Z+4	; 0x04
    2be2:	29 81       	ldd	r18, Y+1	; 0x01
    2be4:	2f 60       	ori	r18, 0x0F	; 15
    2be6:	23 23       	and	r18, r19
    2be8:	fc 01       	movw	r30, r24
    2bea:	24 83       	std	Z+4, r18	; 0x04
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	96 e0       	ldi	r25, 0x06	; 6
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	36 e0       	ldi	r19, 0x06	; 6
    2bf4:	f9 01       	movw	r30, r18
    2bf6:	34 81       	ldd	r19, Z+4	; 0x04
    2bf8:	29 81       	ldd	r18, Y+1	; 0x01
    2bfa:	23 2b       	or	r18, r19
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	24 83       	std	Z+4, r18	; 0x04
    2c00:	00 00       	nop
    2c02:	0f 90       	pop	r0
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	08 95       	ret

00002c0a <setRS>:
    2c0a:	cf 93       	push	r28
    2c0c:	df 93       	push	r29
    2c0e:	1f 92       	push	r1
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
    2c14:	89 83       	std	Y+1, r24	; 0x01
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	88 23       	and	r24, r24
    2c1a:	31 f0       	breq	.+12     	; 0x2c28 <setRS+0x1e>
    2c1c:	80 e6       	ldi	r24, 0x60	; 96
    2c1e:	96 e0       	ldi	r25, 0x06	; 6
    2c20:	21 e0       	ldi	r18, 0x01	; 1
    2c22:	fc 01       	movw	r30, r24
    2c24:	25 83       	std	Z+5, r18	; 0x05
    2c26:	05 c0       	rjmp	.+10     	; 0x2c32 <setRS+0x28>
    2c28:	80 e6       	ldi	r24, 0x60	; 96
    2c2a:	96 e0       	ldi	r25, 0x06	; 6
    2c2c:	21 e0       	ldi	r18, 0x01	; 1
    2c2e:	fc 01       	movw	r30, r24
    2c30:	26 83       	std	Z+6, r18	; 0x06
    2c32:	00 00       	nop
    2c34:	0f 90       	pop	r0
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	08 95       	ret

00002c3c <setRW>:
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	1f 92       	push	r1
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	88 23       	and	r24, r24
    2c4c:	31 f0       	breq	.+12     	; 0x2c5a <setRW+0x1e>
    2c4e:	80 e6       	ldi	r24, 0x60	; 96
    2c50:	96 e0       	ldi	r25, 0x06	; 6
    2c52:	22 e0       	ldi	r18, 0x02	; 2
    2c54:	fc 01       	movw	r30, r24
    2c56:	25 83       	std	Z+5, r18	; 0x05
    2c58:	05 c0       	rjmp	.+10     	; 0x2c64 <setRW+0x28>
    2c5a:	80 e6       	ldi	r24, 0x60	; 96
    2c5c:	96 e0       	ldi	r25, 0x06	; 6
    2c5e:	22 e0       	ldi	r18, 0x02	; 2
    2c60:	fc 01       	movw	r30, r24
    2c62:	26 83       	std	Z+6, r18	; 0x06
    2c64:	00 00       	nop
    2c66:	0f 90       	pop	r0
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	08 95       	ret

00002c6e <setE>:
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	1f 92       	push	r1
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	88 23       	and	r24, r24
    2c7e:	31 f0       	breq	.+12     	; 0x2c8c <setE+0x1e>
    2c80:	80 e6       	ldi	r24, 0x60	; 96
    2c82:	96 e0       	ldi	r25, 0x06	; 6
    2c84:	24 e0       	ldi	r18, 0x04	; 4
    2c86:	fc 01       	movw	r30, r24
    2c88:	25 83       	std	Z+5, r18	; 0x05
    2c8a:	05 c0       	rjmp	.+10     	; 0x2c96 <setE+0x28>
    2c8c:	80 e6       	ldi	r24, 0x60	; 96
    2c8e:	96 e0       	ldi	r25, 0x06	; 6
    2c90:	24 e0       	ldi	r18, 0x04	; 4
    2c92:	fc 01       	movw	r30, r24
    2c94:	26 83       	std	Z+6, r18	; 0x06
    2c96:	00 00       	nop
    2c98:	0f 90       	pop	r0
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	08 95       	ret

00002ca0 <Nybble>:
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <setE>
    2cae:	61 e0       	ldi	r22, 0x01	; 1
    2cb0:	70 e0       	ldi	r23, 0x00	; 0
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayUS>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <setE>
    2cc0:	00 00       	nop
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	08 95       	ret

00002cc8 <command>:
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	1f 92       	push	r1
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	82 95       	swap	r24
    2cd8:	8f 70       	andi	r24, 0x0F	; 15
    2cda:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <setPort>
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <setRS>
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <setRW>
    2cea:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <Nybble>
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	8f 70       	andi	r24, 0x0F	; 15
    2cf2:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <setPort>
    2cf6:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <Nybble>
    2cfa:	00 00       	nop
    2cfc:	0f 90       	pop	r0
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	08 95       	ret

00002d04 <write>:
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	1f 92       	push	r1
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	82 95       	swap	r24
    2d14:	8f 70       	andi	r24, 0x0F	; 15
    2d16:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <setPort>
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <setRS>
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <setRW>
    2d26:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <Nybble>
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	8f 70       	andi	r24, 0x0F	; 15
    2d2e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <setPort>
    2d32:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <Nybble>
    2d36:	00 00       	nop
    2d38:	0f 90       	pop	r0
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	08 95       	ret

00002d40 <vInitDisplay>:
 
 void vInitDisplay() {
    2d40:	ef 92       	push	r14
    2d42:	ff 92       	push	r15
    2d44:	0f 93       	push	r16
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	96 e0       	ldi	r25, 0x06	; 6
    2d52:	20 e1       	ldi	r18, 0x10	; 16
    2d54:	fc 01       	movw	r30, r24
    2d56:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	96 e0       	ldi	r25, 0x06	; 6
    2d5c:	20 e2       	ldi	r18, 0x20	; 32
    2d5e:	fc 01       	movw	r30, r24
    2d60:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	96 e0       	ldi	r25, 0x06	; 6
    2d66:	20 e4       	ldi	r18, 0x40	; 64
    2d68:	fc 01       	movw	r30, r24
    2d6a:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	96 e0       	ldi	r25, 0x06	; 6
    2d70:	20 e8       	ldi	r18, 0x80	; 128
    2d72:	fc 01       	movw	r30, r24
    2d74:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    2d76:	80 e6       	ldi	r24, 0x60	; 96
    2d78:	96 e0       	ldi	r25, 0x06	; 6
    2d7a:	21 e0       	ldi	r18, 0x01	; 1
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    2d80:	80 e6       	ldi	r24, 0x60	; 96
    2d82:	96 e0       	ldi	r25, 0x06	; 6
    2d84:	22 e0       	ldi	r18, 0x02	; 2
    2d86:	fc 01       	movw	r30, r24
    2d88:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    2d8a:	80 e6       	ldi	r24, 0x60	; 96
    2d8c:	96 e0       	ldi	r25, 0x06	; 6
    2d8e:	24 e0       	ldi	r18, 0x04	; 4
    2d90:	fc 01       	movw	r30, r24
    2d92:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	96 e0       	ldi	r25, 0x06	; 6
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	36 e0       	ldi	r19, 0x06	; 6
    2d9c:	f9 01       	movw	r30, r18
    2d9e:	24 81       	ldd	r18, Z+4	; 0x04
    2da0:	2f 70       	andi	r18, 0x0F	; 15
    2da2:	fc 01       	movw	r30, r24
    2da4:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    2da6:	80 e6       	ldi	r24, 0x60	; 96
    2da8:	96 e0       	ldi	r25, 0x06	; 6
    2daa:	20 e6       	ldi	r18, 0x60	; 96
    2dac:	36 e0       	ldi	r19, 0x06	; 6
    2dae:	f9 01       	movw	r30, r18
    2db0:	24 81       	ldd	r18, Z+4	; 0x04
    2db2:	28 7f       	andi	r18, 0xF8	; 248
    2db4:	fc 01       	movw	r30, r24
    2db6:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    2db8:	40 e0       	ldi	r20, 0x00	; 0
    2dba:	66 e1       	ldi	r22, 0x16	; 22
    2dbc:	88 e0       	ldi	r24, 0x08	; 8
    2dbe:	0e 94 8d 08 	call	0x111a	; 0x111a <xQueueGenericCreate>
    2dc2:	80 93 e9 2c 	sts	0x2CE9, r24	; 0x802ce9 <displayLineQueue>
    2dc6:	90 93 ea 2c 	sts	0x2CEA, r25	; 0x802cea <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    2dca:	0e 94 66 03 	call	0x6cc	; 0x6cc <xEventGroupCreate>
    2dce:	80 93 eb 2c 	sts	0x2CEB, r24	; 0x802ceb <egDisplayTiming>
    2dd2:	90 93 ec 2c 	sts	0x2CEC, r25	; 0x802cec <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);	//von Hand auf Prio 2 gestellt
    2dd6:	e1 2c       	mov	r14, r1
    2dd8:	f1 2c       	mov	r15, r1
    2dda:	02 e0       	ldi	r16, 0x02	; 2
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	4e e5       	ldi	r20, 0x5E	; 94
    2de2:	51 e0       	ldi	r21, 0x01	; 1
    2de4:	62 e4       	ldi	r22, 0x42	; 66
    2de6:	70 e2       	ldi	r23, 0x20	; 32
    2de8:	8e e9       	ldi	r24, 0x9E	; 158
    2dea:	97 e1       	ldi	r25, 0x17	; 23
    2dec:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
 }
    2df0:	00 00       	nop
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	0f 91       	pop	r16
    2df8:	ff 90       	pop	r15
    2dfa:	ef 90       	pop	r14
    2dfc:	08 95       	ret

00002dfe <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <_displaySetPos+0x6>
    2e04:	1f 92       	push	r1
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	89 83       	std	Y+1, r24	; 0x01
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	6b 83       	std	Y+3, r22	; 0x03
    2e10:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	9a 81       	ldd	r25, Y+2	; 0x02
    2e16:	81 30       	cpi	r24, 0x01	; 1
    2e18:	91 05       	cpc	r25, r1
    2e1a:	89 f0       	breq	.+34     	; 0x2e3e <_displaySetPos+0x40>
    2e1c:	82 30       	cpi	r24, 0x02	; 2
    2e1e:	91 05       	cpc	r25, r1
    2e20:	1c f4       	brge	.+6      	; 0x2e28 <_displaySetPos+0x2a>
    2e22:	89 2b       	or	r24, r25
    2e24:	39 f0       	breq	.+14     	; 0x2e34 <_displaySetPos+0x36>
    2e26:	1a c0       	rjmp	.+52     	; 0x2e5c <_displaySetPos+0x5e>
    2e28:	82 30       	cpi	r24, 0x02	; 2
    2e2a:	91 05       	cpc	r25, r1
    2e2c:	69 f0       	breq	.+26     	; 0x2e48 <_displaySetPos+0x4a>
    2e2e:	03 97       	sbiw	r24, 0x03	; 3
    2e30:	81 f0       	breq	.+32     	; 0x2e52 <_displaySetPos+0x54>
    2e32:	14 c0       	rjmp	.+40     	; 0x2e5c <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	80 58       	subi	r24, 0x80	; 128
    2e38:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <command>
		 break;
    2e3c:	0f c0       	rjmp	.+30     	; 0x2e5c <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	80 54       	subi	r24, 0x40	; 64
    2e42:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <command>
		 break;
    2e46:	0a c0       	rjmp	.+20     	; 0x2e5c <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    2e48:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4a:	8c 56       	subi	r24, 0x6C	; 108
    2e4c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <command>
		 break;
    2e50:	05 c0       	rjmp	.+10     	; 0x2e5c <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    2e52:	8b 81       	ldd	r24, Y+3	; 0x03
    2e54:	8c 52       	subi	r24, 0x2C	; 44
    2e56:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <command>
		 break;
    2e5a:	00 00       	nop
	 }
	 delayUS(39);
    2e5c:	67 e2       	ldi	r22, 0x27	; 39
    2e5e:	70 e0       	ldi	r23, 0x00	; 0
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayUS>
 }
    2e68:	00 00       	nop
    2e6a:	24 96       	adiw	r28, 0x04	; 4
    2e6c:	cd bf       	out	0x3d, r28	; 61
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28
    2e74:	08 95       	ret

00002e76 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    2e76:	cf 93       	push	r28
    2e78:	df 93       	push	r29
    2e7a:	1f 92       	push	r1
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
    2e80:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	0e 94 82 16 	call	0x2d04	; 0x2d04 <write>
	 delayUS(43);
    2e88:	6b e2       	ldi	r22, 0x2B	; 43
    2e8a:	70 e0       	ldi	r23, 0x00	; 0
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayUS>
 }
    2e94:	00 00       	nop
    2e96:	0f 90       	pop	r0
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	08 95       	ret

00002e9e <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <_displayWriteString+0x6>
    2ea4:	1f 92       	push	r1
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	8b 83       	std	Y+3, r24	; 0x03
    2eac:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    2eae:	19 82       	std	Y+1, r1	; 0x01
    2eb0:	1a 82       	std	Y+2, r1	; 0x02
    2eb2:	19 c0       	rjmp	.+50     	; 0x2ee6 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eba:	3c 81       	ldd	r19, Y+4	; 0x04
    2ebc:	82 0f       	add	r24, r18
    2ebe:	93 1f       	adc	r25, r19
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	80 81       	ld	r24, Z
    2ec4:	88 23       	and	r24, r24
    2ec6:	a1 f0       	breq	.+40     	; 0x2ef0 <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ecc:	2b 81       	ldd	r18, Y+3	; 0x03
    2ece:	3c 81       	ldd	r19, Y+4	; 0x04
    2ed0:	82 0f       	add	r24, r18
    2ed2:	93 1f       	adc	r25, r19
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	80 81       	ld	r24, Z
    2ed8:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee0:	01 96       	adiw	r24, 0x01	; 1
    2ee2:	89 83       	std	Y+1, r24	; 0x01
    2ee4:	9a 83       	std	Y+2, r25	; 0x02
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eea:	44 97       	sbiw	r24, 0x14	; 20
    2eec:	1c f3       	brlt	.-58     	; 0x2eb4 <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    2eee:	01 c0       	rjmp	.+2      	; 0x2ef2 <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    2ef0:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    2ef2:	00 00       	nop
    2ef4:	24 96       	adiw	r28, 0x04	; 4
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	08 95       	ret

00002f00 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <_displayWriteStringAtPos+0x6>
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <_displayWriteStringAtPos+0x8>
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    2f0e:	9a 83       	std	Y+2, r25	; 0x02
    2f10:	6b 83       	std	Y+3, r22	; 0x03
    2f12:	7c 83       	std	Y+4, r23	; 0x04
    2f14:	4d 83       	std	Y+5, r20	; 0x05
    2f16:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    2f18:	2b 81       	ldd	r18, Y+3	; 0x03
    2f1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f20:	b9 01       	movw	r22, r18
    2f22:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <_displaySetPos>
	 _displayWriteString(s);
    2f26:	8d 81       	ldd	r24, Y+5	; 0x05
    2f28:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2a:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <_displayWriteString>
 }
    2f2e:	00 00       	nop
    2f30:	26 96       	adiw	r28, 0x06	; 6
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	08 95       	ret

00002f3c <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	c0 57       	subi	r28, 0x70	; 112
    2f46:	d1 09       	sbc	r29, r1
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	9e 01       	movw	r18, r28
    2f4e:	21 59       	subi	r18, 0x91	; 145
    2f50:	3f 4f       	sbci	r19, 0xFF	; 255
    2f52:	f9 01       	movw	r30, r18
    2f54:	80 83       	st	Z, r24
    2f56:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    2f58:	19 82       	std	Y+1, r1	; 0x01
    2f5a:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    2f5c:	1b 82       	std	Y+3, r1	; 0x03
    2f5e:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    2f60:	1d 82       	std	Y+5, r1	; 0x05
    2f62:	1e 82       	std	Y+6, r1	; 0x06
    2f64:	26 c0       	rjmp	.+76     	; 0x2fb2 <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    2f66:	1f 82       	std	Y+7, r1	; 0x07
    2f68:	18 86       	std	Y+8, r1	; 0x08
    2f6a:	1a c0       	rjmp	.+52     	; 0x2fa0 <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    2f6c:	2d 81       	ldd	r18, Y+5	; 0x05
    2f6e:	3e 81       	ldd	r19, Y+6	; 0x06
    2f70:	44 e1       	ldi	r20, 0x14	; 20
    2f72:	42 9f       	mul	r20, r18
    2f74:	c0 01       	movw	r24, r0
    2f76:	43 9f       	mul	r20, r19
    2f78:	90 0d       	add	r25, r0
    2f7a:	11 24       	eor	r1, r1
    2f7c:	9e 01       	movw	r18, r28
    2f7e:	2f 5f       	subi	r18, 0xFF	; 255
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	28 0f       	add	r18, r24
    2f84:	39 1f       	adc	r19, r25
    2f86:	8f 81       	ldd	r24, Y+7	; 0x07
    2f88:	98 85       	ldd	r25, Y+8	; 0x08
    2f8a:	82 0f       	add	r24, r18
    2f8c:	93 1f       	adc	r25, r19
    2f8e:	08 96       	adiw	r24, 0x08	; 8
    2f90:	20 e2       	ldi	r18, 0x20	; 32
    2f92:	fc 01       	movw	r30, r24
    2f94:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    2f96:	8f 81       	ldd	r24, Y+7	; 0x07
    2f98:	98 85       	ldd	r25, Y+8	; 0x08
    2f9a:	01 96       	adiw	r24, 0x01	; 1
    2f9c:	8f 83       	std	Y+7, r24	; 0x07
    2f9e:	98 87       	std	Y+8, r25	; 0x08
    2fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fa2:	98 85       	ldd	r25, Y+8	; 0x08
    2fa4:	44 97       	sbiw	r24, 0x14	; 20
    2fa6:	14 f3       	brlt	.-60     	; 0x2f6c <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	01 96       	adiw	r24, 0x01	; 1
    2fae:	8d 83       	std	Y+5, r24	; 0x05
    2fb0:	9e 83       	std	Y+6, r25	; 0x06
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	04 97       	sbiw	r24, 0x04	; 4
    2fb8:	b4 f2       	brlt	.-84     	; 0x2f66 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    2fba:	60 e4       	ldi	r22, 0x40	; 64
    2fbc:	7c e9       	ldi	r23, 0x9C	; 156
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayUS>
	 setPort(0x03);
    2fc6:	83 e0       	ldi	r24, 0x03	; 3
    2fc8:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <setPort>
	 delayUS(5000);
    2fcc:	68 e8       	ldi	r22, 0x88	; 136
    2fce:	73 e1       	ldi	r23, 0x13	; 19
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayUS>
	 Nybble();
    2fd8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <Nybble>
	 delayUS(160);
    2fdc:	60 ea       	ldi	r22, 0xA0	; 160
    2fde:	70 e0       	ldi	r23, 0x00	; 0
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayUS>
	 Nybble();
    2fe8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <Nybble>
	 delayUS(160);
    2fec:	60 ea       	ldi	r22, 0xA0	; 160
    2fee:	70 e0       	ldi	r23, 0x00	; 0
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayUS>
	 Nybble();
    2ff8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <Nybble>
	 delayUS(160);
    2ffc:	60 ea       	ldi	r22, 0xA0	; 160
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayUS>
	 setPort(0x02);
    3008:	82 e0       	ldi	r24, 0x02	; 2
    300a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <setPort>
	 Nybble();
    300e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <Nybble>
	 command(0x28);
    3012:	88 e2       	ldi	r24, 0x28	; 40
    3014:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <command>
	 command(0x10);
    3018:	80 e1       	ldi	r24, 0x10	; 16
    301a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <command>
	 command(0x0C); //Cursor and Blinking off
    301e:	8c e0       	ldi	r24, 0x0C	; 12
    3020:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <command>
	 command(0x06);
    3024:	86 e0       	ldi	r24, 0x06	; 6
    3026:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    302a:	68 ec       	ldi	r22, 0xC8	; 200
    302c:	70 e0       	ldi	r23, 0x00	; 0
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    3036:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <egDisplayTiming>
    303a:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <egDisplayTiming+0x1>
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	50 e0       	ldi	r21, 0x00	; 0
    3042:	ba 01       	movw	r22, r20
    3044:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	89 2b       	or	r24, r25
    304e:	8a 2b       	or	r24, r26
    3050:	8b 2b       	or	r24, r27
    3052:	09 f4       	brne	.+2      	; 0x3056 <vDisplayUpdateTask+0x11a>
    3054:	96 c0       	rjmp	.+300    	; 0x3182 <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    3056:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <egDisplayTiming>
    305a:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <egDisplayTiming+0x1>
    305e:	42 e0       	ldi	r20, 0x02	; 2
    3060:	50 e0       	ldi	r21, 0x00	; 0
    3062:	60 e0       	ldi	r22, 0x00	; 0
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    306a:	19 82       	std	Y+1, r1	; 0x01
    306c:	1a 82       	std	Y+2, r1	; 0x02
    306e:	26 c0       	rjmp	.+76     	; 0x30bc <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    3070:	1b 82       	std	Y+3, r1	; 0x03
    3072:	1c 82       	std	Y+4, r1	; 0x04
    3074:	1a c0       	rjmp	.+52     	; 0x30aa <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    3076:	29 81       	ldd	r18, Y+1	; 0x01
    3078:	3a 81       	ldd	r19, Y+2	; 0x02
    307a:	44 e1       	ldi	r20, 0x14	; 20
    307c:	42 9f       	mul	r20, r18
    307e:	c0 01       	movw	r24, r0
    3080:	43 9f       	mul	r20, r19
    3082:	90 0d       	add	r25, r0
    3084:	11 24       	eor	r1, r1
    3086:	9e 01       	movw	r18, r28
    3088:	2f 5f       	subi	r18, 0xFF	; 255
    308a:	3f 4f       	sbci	r19, 0xFF	; 255
    308c:	28 0f       	add	r18, r24
    308e:	39 1f       	adc	r19, r25
    3090:	8b 81       	ldd	r24, Y+3	; 0x03
    3092:	9c 81       	ldd	r25, Y+4	; 0x04
    3094:	82 0f       	add	r24, r18
    3096:	93 1f       	adc	r25, r19
    3098:	08 96       	adiw	r24, 0x08	; 8
    309a:	20 e2       	ldi	r18, 0x20	; 32
    309c:	fc 01       	movw	r30, r24
    309e:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	9c 81       	ldd	r25, Y+4	; 0x04
    30a4:	01 96       	adiw	r24, 0x01	; 1
    30a6:	8b 83       	std	Y+3, r24	; 0x03
    30a8:	9c 83       	std	Y+4, r25	; 0x04
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	9c 81       	ldd	r25, Y+4	; 0x04
    30ae:	44 97       	sbiw	r24, 0x14	; 20
    30b0:	14 f3       	brlt	.-60     	; 0x3076 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	9a 81       	ldd	r25, Y+2	; 0x02
    30b6:	01 96       	adiw	r24, 0x01	; 1
    30b8:	89 83       	std	Y+1, r24	; 0x01
    30ba:	9a 83       	std	Y+2, r25	; 0x02
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	04 97       	sbiw	r24, 0x04	; 4
    30c2:	b4 f2       	brlt	.-84     	; 0x3070 <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    30c4:	5e c0       	rjmp	.+188    	; 0x3182 <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    30c6:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <displayLineQueue>
    30ca:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <displayLineQueue+0x1>
    30ce:	be 01       	movw	r22, r28
    30d0:	67 5a       	subi	r22, 0xA7	; 167
    30d2:	7f 4f       	sbci	r23, 0xFF	; 255
    30d4:	2f ef       	ldi	r18, 0xFF	; 255
    30d6:	3f ef       	ldi	r19, 0xFF	; 255
    30d8:	a9 01       	movw	r20, r18
    30da:	0e 94 a9 09 	call	0x1352	; 0x1352 <xQueueReceive>
    30de:	88 23       	and	r24, r24
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <vDisplayUpdateTask+0x1a8>
    30e2:	4f c0       	rjmp	.+158    	; 0x3182 <vDisplayUpdateTask+0x246>
				i=0;			
    30e4:	19 82       	std	Y+1, r1	; 0x01
    30e6:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    30e8:	32 c0       	rjmp	.+100    	; 0x314e <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    30ea:	ce 01       	movw	r24, r28
    30ec:	87 5a       	subi	r24, 0xA7	; 167
    30ee:	9f 4f       	sbci	r25, 0xFF	; 255
    30f0:	fc 01       	movw	r30, r24
    30f2:	80 81       	ld	r24, Z
    30f4:	48 2f       	mov	r20, r24
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	ce 01       	movw	r24, r28
    30fa:	87 5a       	subi	r24, 0xA7	; 167
    30fc:	9f 4f       	sbci	r25, 0xFF	; 255
    30fe:	fc 01       	movw	r30, r24
    3100:	81 81       	ldd	r24, Z+1	; 0x01
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	82 0f       	add	r24, r18
    310c:	93 1f       	adc	r25, r19
    310e:	be 01       	movw	r22, r28
    3110:	67 5a       	subi	r22, 0xA7	; 167
    3112:	7f 4f       	sbci	r23, 0xFF	; 255
    3114:	29 81       	ldd	r18, Y+1	; 0x01
    3116:	3a 81       	ldd	r19, Y+2	; 0x02
    3118:	26 0f       	add	r18, r22
    311a:	37 1f       	adc	r19, r23
    311c:	2e 5f       	subi	r18, 0xFE	; 254
    311e:	3f 4f       	sbci	r19, 0xFF	; 255
    3120:	f9 01       	movw	r30, r18
    3122:	60 81       	ld	r22, Z
    3124:	74 e1       	ldi	r23, 0x14	; 20
    3126:	74 9f       	mul	r23, r20
    3128:	90 01       	movw	r18, r0
    312a:	75 9f       	mul	r23, r21
    312c:	30 0d       	add	r19, r0
    312e:	11 24       	eor	r1, r1
    3130:	ae 01       	movw	r20, r28
    3132:	4f 5f       	subi	r20, 0xFF	; 255
    3134:	5f 4f       	sbci	r21, 0xFF	; 255
    3136:	24 0f       	add	r18, r20
    3138:	35 1f       	adc	r19, r21
    313a:	82 0f       	add	r24, r18
    313c:	93 1f       	adc	r25, r19
    313e:	08 96       	adiw	r24, 0x08	; 8
    3140:	fc 01       	movw	r30, r24
    3142:	60 83       	st	Z, r22
					i++;
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	9a 81       	ldd	r25, Y+2	; 0x02
    3148:	01 96       	adiw	r24, 0x01	; 1
    314a:	89 83       	std	Y+1, r24	; 0x01
    314c:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    314e:	ce 01       	movw	r24, r28
    3150:	87 5a       	subi	r24, 0xA7	; 167
    3152:	9f 4f       	sbci	r25, 0xFF	; 255
    3154:	fc 01       	movw	r30, r24
    3156:	81 81       	ldd	r24, Z+1	; 0x01
    3158:	28 2f       	mov	r18, r24
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	82 0f       	add	r24, r18
    3162:	93 1f       	adc	r25, r19
    3164:	44 97       	sbiw	r24, 0x14	; 20
    3166:	6c f4       	brge	.+26     	; 0x3182 <vDisplayUpdateTask+0x246>
    3168:	9e 01       	movw	r18, r28
    316a:	27 5a       	subi	r18, 0xA7	; 167
    316c:	3f 4f       	sbci	r19, 0xFF	; 255
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	9a 81       	ldd	r25, Y+2	; 0x02
    3172:	82 0f       	add	r24, r18
    3174:	93 1f       	adc	r25, r19
    3176:	02 96       	adiw	r24, 0x02	; 2
    3178:	fc 01       	movw	r30, r24
    317a:	80 81       	ld	r24, Z
    317c:	88 23       	and	r24, r24
    317e:	09 f0       	breq	.+2      	; 0x3182 <vDisplayUpdateTask+0x246>
    3180:	b4 cf       	rjmp	.-152    	; 0x30ea <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    3182:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <displayLineQueue>
    3186:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <displayLineQueue+0x1>
    318a:	0e 94 4f 0a 	call	0x149e	; 0x149e <uxQueueMessagesWaiting>
    318e:	88 23       	and	r24, r24
    3190:	09 f0       	breq	.+2      	; 0x3194 <vDisplayUpdateTask+0x258>
    3192:	99 cf       	rjmp	.-206    	; 0x30c6 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    3194:	19 82       	std	Y+1, r1	; 0x01
    3196:	1a 82       	std	Y+2, r1	; 0x02
    3198:	19 c0       	rjmp	.+50     	; 0x31cc <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    319a:	9e 01       	movw	r18, r28
    319c:	27 5f       	subi	r18, 0xF7	; 247
    319e:	3f 4f       	sbci	r19, 0xFF	; 255
    31a0:	49 81       	ldd	r20, Y+1	; 0x01
    31a2:	5a 81       	ldd	r21, Y+2	; 0x02
    31a4:	64 e1       	ldi	r22, 0x14	; 20
    31a6:	64 9f       	mul	r22, r20
    31a8:	c0 01       	movw	r24, r0
    31aa:	65 9f       	mul	r22, r21
    31ac:	90 0d       	add	r25, r0
    31ae:	11 24       	eor	r1, r1
    31b0:	28 0f       	add	r18, r24
    31b2:	39 1f       	adc	r19, r25
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	a9 01       	movw	r20, r18
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	70 e0       	ldi	r23, 0x00	; 0
    31be:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	9a 81       	ldd	r25, Y+2	; 0x02
    31c6:	01 96       	adiw	r24, 0x01	; 1
    31c8:	89 83       	std	Y+1, r24	; 0x01
    31ca:	9a 83       	std	Y+2, r25	; 0x02
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	9a 81       	ldd	r25, Y+2	; 0x02
    31d0:	04 97       	sbiw	r24, 0x04	; 4
    31d2:	1c f3       	brlt	.-58     	; 0x319a <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    31d4:	2a cf       	rjmp	.-428    	; 0x302a <vDisplayUpdateTask+0xee>

000031d6 <vDisplayClear>:
 }
 

void vDisplayClear() {
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    31de:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <egDisplayTiming>
    31e2:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <egDisplayTiming+0x1>
    31e6:	42 e0       	ldi	r20, 0x02	; 2
    31e8:	50 e0       	ldi	r21, 0x00	; 0
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
}
    31f2:	00 00       	nop
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	08 95       	ret

000031fa <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	1f 92       	push	r1
    3200:	1f 92       	push	r1
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    3206:	ce 01       	movw	r24, r28
    3208:	0e 96       	adiw	r24, 0x0e	; 14
    320a:	89 83       	std	Y+1, r24	; 0x01
    320c:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    320e:	29 81       	ldd	r18, Y+1	; 0x01
    3210:	3a 81       	ldd	r19, Y+2	; 0x02
    3212:	4c 85       	ldd	r20, Y+12	; 0x0c
    3214:	5d 85       	ldd	r21, Y+13	; 0x0d
    3216:	6a 85       	ldd	r22, Y+10	; 0x0a
    3218:	7b 85       	ldd	r23, Y+11	; 0x0b
    321a:	88 85       	ldd	r24, Y+8	; 0x08
    321c:	99 85       	ldd	r25, Y+9	; 0x09
    321e:	0e 94 17 19 	call	0x322e	; 0x322e <display_vprintf>
	va_end(arg);	
}
    3222:	00 00       	nop
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	df 91       	pop	r29
    322a:	cf 91       	pop	r28
    322c:	08 95       	ret

0000322e <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    322e:	0f 93       	push	r16
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	ec 97       	sbiw	r28, 0x3c	; 60
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	8d ab       	std	Y+53, r24	; 0x35
    3240:	9e ab       	std	Y+54, r25	; 0x36
    3242:	6f ab       	std	Y+55, r22	; 0x37
    3244:	78 af       	std	Y+56, r23	; 0x38
    3246:	49 af       	std	Y+57, r20	; 0x39
    3248:	5a af       	std	Y+58, r21	; 0x3a
    324a:	2b af       	std	Y+59, r18	; 0x3b
    324c:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    324e:	19 82       	std	Y+1, r1	; 0x01
    3250:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    3252:	1b 82       	std	Y+3, r1	; 0x03
    3254:	1c 82       	std	Y+4, r1	; 0x04
    3256:	0b c0       	rjmp	.+22     	; 0x326e <display_vprintf+0x40>
		buffer[i] = 0x00;
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	9c 81       	ldd	r25, Y+4	; 0x04
    325c:	8e 54       	subi	r24, 0x4E	; 78
    325e:	93 4d       	sbci	r25, 0xD3	; 211
    3260:	fc 01       	movw	r30, r24
    3262:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    3264:	8b 81       	ldd	r24, Y+3	; 0x03
    3266:	9c 81       	ldd	r25, Y+4	; 0x04
    3268:	01 96       	adiw	r24, 0x01	; 1
    326a:	8b 83       	std	Y+3, r24	; 0x03
    326c:	9c 83       	std	Y+4, r25	; 0x04
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	9c 81       	ldd	r25, Y+4	; 0x04
    3272:	44 97       	sbiw	r24, 0x14	; 20
    3274:	8c f3       	brlt	.-30     	; 0x3258 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    3276:	1d 82       	std	Y+5, r1	; 0x05
    3278:	1e 82       	std	Y+6, r1	; 0x06
    327a:	0b c0       	rjmp	.+22     	; 0x3292 <display_vprintf+0x64>
		str[i] = 0x00;
    327c:	8d 81       	ldd	r24, Y+5	; 0x05
    327e:	9e 81       	ldd	r25, Y+6	; 0x06
    3280:	8a 53       	subi	r24, 0x3A	; 58
    3282:	93 4d       	sbci	r25, 0xD3	; 211
    3284:	fc 01       	movw	r30, r24
    3286:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    3288:	8d 81       	ldd	r24, Y+5	; 0x05
    328a:	9e 81       	ldd	r25, Y+6	; 0x06
    328c:	01 96       	adiw	r24, 0x01	; 1
    328e:	8d 83       	std	Y+5, r24	; 0x05
    3290:	9e 83       	std	Y+6, r25	; 0x06
    3292:	8d 81       	ldd	r24, Y+5	; 0x05
    3294:	9e 81       	ldd	r25, Y+6	; 0x06
    3296:	44 97       	sbiw	r24, 0x14	; 20
    3298:	8c f3       	brlt	.-30     	; 0x327c <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    329a:	be c1       	rjmp	.+892    	; 0x3618 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    329c:	8d 89       	ldd	r24, Y+21	; 0x15
    329e:	85 32       	cpi	r24, 0x25	; 37
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <display_vprintf+0x76>
    32a2:	a0 c1       	rjmp	.+832    	; 0x35e4 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    32a4:	89 ad       	ldd	r24, Y+57	; 0x39
    32a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    32a8:	9c 01       	movw	r18, r24
    32aa:	2f 5f       	subi	r18, 0xFF	; 255
    32ac:	3f 4f       	sbci	r19, 0xFF	; 255
    32ae:	29 af       	std	Y+57, r18	; 0x39
    32b0:	3a af       	std	Y+58, r19	; 0x3a
    32b2:	fc 01       	movw	r30, r24
    32b4:	80 81       	ld	r24, Z
    32b6:	8d 8b       	std	Y+21, r24	; 0x15
    32b8:	8d 89       	ldd	r24, Y+21	; 0x15
    32ba:	88 2f       	mov	r24, r24
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	85 36       	cpi	r24, 0x65	; 101
    32c0:	91 05       	cpc	r25, r1
    32c2:	09 f4       	brne	.+2      	; 0x32c6 <display_vprintf+0x98>
    32c4:	46 c1       	rjmp	.+652    	; 0x3552 <display_vprintf+0x324>
    32c6:	86 36       	cpi	r24, 0x66	; 102
    32c8:	91 05       	cpc	r25, r1
    32ca:	54 f4       	brge	.+20     	; 0x32e0 <display_vprintf+0xb2>
    32cc:	83 36       	cpi	r24, 0x63	; 99
    32ce:	91 05       	cpc	r25, r1
    32d0:	01 f1       	breq	.+64     	; 0x3312 <display_vprintf+0xe4>
    32d2:	84 36       	cpi	r24, 0x64	; 100
    32d4:	91 05       	cpc	r25, r1
    32d6:	0c f0       	brlt	.+2      	; 0x32da <display_vprintf+0xac>
    32d8:	70 c0       	rjmp	.+224    	; 0x33ba <display_vprintf+0x18c>
    32da:	85 97       	sbiw	r24, 0x25	; 37
    32dc:	69 f0       	breq	.+26     	; 0x32f8 <display_vprintf+0xca>
    32de:	9c c1       	rjmp	.+824    	; 0x3618 <display_vprintf+0x3ea>
    32e0:	83 37       	cpi	r24, 0x73	; 115
    32e2:	91 05       	cpc	r25, r1
    32e4:	71 f1       	breq	.+92     	; 0x3342 <display_vprintf+0x114>
    32e6:	88 37       	cpi	r24, 0x78	; 120
    32e8:	91 05       	cpc	r25, r1
    32ea:	09 f4       	brne	.+2      	; 0x32ee <display_vprintf+0xc0>
    32ec:	a8 c0       	rjmp	.+336    	; 0x343e <display_vprintf+0x210>
    32ee:	86 36       	cpi	r24, 0x66	; 102
    32f0:	91 05       	cpc	r25, r1
    32f2:	09 f4       	brne	.+2      	; 0x32f6 <display_vprintf+0xc8>
    32f4:	e6 c0       	rjmp	.+460    	; 0x34c2 <display_vprintf+0x294>
    32f6:	90 c1       	rjmp	.+800    	; 0x3618 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	9a 81       	ldd	r25, Y+2	; 0x02
    32fc:	8a 53       	subi	r24, 0x3A	; 58
    32fe:	93 4d       	sbci	r25, 0xD3	; 211
    3300:	25 e2       	ldi	r18, 0x25	; 37
    3302:	fc 01       	movw	r30, r24
    3304:	20 83       	st	Z, r18
				length++;
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	9a 81       	ldd	r25, Y+2	; 0x02
    330a:	01 96       	adiw	r24, 0x01	; 1
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3310:	83 c1       	rjmp	.+774    	; 0x3618 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    3312:	8b ad       	ldd	r24, Y+59	; 0x3b
    3314:	9c ad       	ldd	r25, Y+60	; 0x3c
    3316:	9c 01       	movw	r18, r24
    3318:	2e 5f       	subi	r18, 0xFE	; 254
    331a:	3f 4f       	sbci	r19, 0xFF	; 255
    331c:	2b af       	std	Y+59, r18	; 0x3b
    331e:	3c af       	std	Y+60, r19	; 0x3c
    3320:	fc 01       	movw	r30, r24
    3322:	80 81       	ld	r24, Z
    3324:	91 81       	ldd	r25, Z+1	; 0x01
    3326:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	8a 53       	subi	r24, 0x3A	; 58
    332e:	93 4d       	sbci	r25, 0xD3	; 211
    3330:	2e 89       	ldd	r18, Y+22	; 0x16
    3332:	fc 01       	movw	r30, r24
    3334:	20 83       	st	Z, r18
				length++;
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	9a 81       	ldd	r25, Y+2	; 0x02
    333a:	01 96       	adiw	r24, 0x01	; 1
    333c:	89 83       	std	Y+1, r24	; 0x01
    333e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3340:	6b c1       	rjmp	.+726    	; 0x3618 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    3342:	8b ad       	ldd	r24, Y+59	; 0x3b
    3344:	9c ad       	ldd	r25, Y+60	; 0x3c
    3346:	9c 01       	movw	r18, r24
    3348:	2e 5f       	subi	r18, 0xFE	; 254
    334a:	3f 4f       	sbci	r19, 0xFF	; 255
    334c:	2b af       	std	Y+59, r18	; 0x3b
    334e:	3c af       	std	Y+60, r19	; 0x3c
    3350:	fc 01       	movw	r30, r24
    3352:	80 81       	ld	r24, Z
    3354:	91 81       	ldd	r25, Z+1	; 0x01
    3356:	8f 8b       	std	Y+23, r24	; 0x17
    3358:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    335a:	1f 82       	std	Y+7, r1	; 0x07
    335c:	18 86       	std	Y+8, r1	; 0x08
    335e:	17 c0       	rjmp	.+46     	; 0x338e <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    3360:	29 81       	ldd	r18, Y+1	; 0x01
    3362:	3a 81       	ldd	r19, Y+2	; 0x02
    3364:	8f 81       	ldd	r24, Y+7	; 0x07
    3366:	98 85       	ldd	r25, Y+8	; 0x08
    3368:	82 0f       	add	r24, r18
    336a:	93 1f       	adc	r25, r19
    336c:	2f 81       	ldd	r18, Y+7	; 0x07
    336e:	38 85       	ldd	r19, Y+8	; 0x08
    3370:	4f 89       	ldd	r20, Y+23	; 0x17
    3372:	58 8d       	ldd	r21, Y+24	; 0x18
    3374:	24 0f       	add	r18, r20
    3376:	35 1f       	adc	r19, r21
    3378:	f9 01       	movw	r30, r18
    337a:	20 81       	ld	r18, Z
    337c:	8a 53       	subi	r24, 0x3A	; 58
    337e:	93 4d       	sbci	r25, 0xD3	; 211
    3380:	fc 01       	movw	r30, r24
    3382:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    3384:	8f 81       	ldd	r24, Y+7	; 0x07
    3386:	98 85       	ldd	r25, Y+8	; 0x08
    3388:	01 96       	adiw	r24, 0x01	; 1
    338a:	8f 83       	std	Y+7, r24	; 0x07
    338c:	98 87       	std	Y+8, r25	; 0x08
    338e:	8f 89       	ldd	r24, Y+23	; 0x17
    3390:	98 8d       	ldd	r25, Y+24	; 0x18
    3392:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <strlen>
    3396:	9c 01       	movw	r18, r24
    3398:	8f 81       	ldd	r24, Y+7	; 0x07
    339a:	98 85       	ldd	r25, Y+8	; 0x08
    339c:	82 17       	cp	r24, r18
    339e:	93 07       	cpc	r25, r19
    33a0:	f8 f2       	brcs	.-66     	; 0x3360 <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    33a2:	8f 89       	ldd	r24, Y+23	; 0x17
    33a4:	98 8d       	ldd	r25, Y+24	; 0x18
    33a6:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <strlen>
    33aa:	9c 01       	movw	r18, r24
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
    33ae:	9a 81       	ldd	r25, Y+2	; 0x02
    33b0:	82 0f       	add	r24, r18
    33b2:	93 1f       	adc	r25, r19
    33b4:	89 83       	std	Y+1, r24	; 0x01
    33b6:	9a 83       	std	Y+2, r25	; 0x02
				break;
    33b8:	2f c1       	rjmp	.+606    	; 0x3618 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    33ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    33bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    33be:	9c 01       	movw	r18, r24
    33c0:	2e 5f       	subi	r18, 0xFE	; 254
    33c2:	3f 4f       	sbci	r19, 0xFF	; 255
    33c4:	2b af       	std	Y+59, r18	; 0x3b
    33c6:	3c af       	std	Y+60, r19	; 0x3c
    33c8:	fc 01       	movw	r30, r24
    33ca:	80 81       	ld	r24, Z
    33cc:	91 81       	ldd	r25, Z+1	; 0x01
    33ce:	89 8f       	std	Y+25, r24	; 0x19
    33d0:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    33d2:	89 8d       	ldd	r24, Y+25	; 0x19
    33d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33d6:	4a e0       	ldi	r20, 0x0A	; 10
    33d8:	50 e0       	ldi	r21, 0x00	; 0
    33da:	62 eb       	ldi	r22, 0xB2	; 178
    33dc:	7c e2       	ldi	r23, 0x2C	; 44
    33de:	0e 94 43 25 	call	0x4a86	; 0x4a86 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    33e2:	19 86       	std	Y+9, r1	; 0x09
    33e4:	1a 86       	std	Y+10, r1	; 0x0a
    33e6:	15 c0       	rjmp	.+42     	; 0x3412 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    33e8:	29 81       	ldd	r18, Y+1	; 0x01
    33ea:	3a 81       	ldd	r19, Y+2	; 0x02
    33ec:	89 85       	ldd	r24, Y+9	; 0x09
    33ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f0:	82 0f       	add	r24, r18
    33f2:	93 1f       	adc	r25, r19
    33f4:	29 85       	ldd	r18, Y+9	; 0x09
    33f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    33f8:	2e 54       	subi	r18, 0x4E	; 78
    33fa:	33 4d       	sbci	r19, 0xD3	; 211
    33fc:	f9 01       	movw	r30, r18
    33fe:	20 81       	ld	r18, Z
    3400:	8a 53       	subi	r24, 0x3A	; 58
    3402:	93 4d       	sbci	r25, 0xD3	; 211
    3404:	fc 01       	movw	r30, r24
    3406:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    3408:	89 85       	ldd	r24, Y+9	; 0x09
    340a:	9a 85       	ldd	r25, Y+10	; 0x0a
    340c:	01 96       	adiw	r24, 0x01	; 1
    340e:	89 87       	std	Y+9, r24	; 0x09
    3410:	9a 87       	std	Y+10, r25	; 0x0a
    3412:	82 eb       	ldi	r24, 0xB2	; 178
    3414:	9c e2       	ldi	r25, 0x2C	; 44
    3416:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <strlen>
    341a:	9c 01       	movw	r18, r24
    341c:	89 85       	ldd	r24, Y+9	; 0x09
    341e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3420:	82 17       	cp	r24, r18
    3422:	93 07       	cpc	r25, r19
    3424:	08 f3       	brcs	.-62     	; 0x33e8 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    3426:	82 eb       	ldi	r24, 0xB2	; 178
    3428:	9c e2       	ldi	r25, 0x2C	; 44
    342a:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <strlen>
    342e:	9c 01       	movw	r18, r24
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	9a 81       	ldd	r25, Y+2	; 0x02
    3434:	82 0f       	add	r24, r18
    3436:	93 1f       	adc	r25, r19
    3438:	89 83       	std	Y+1, r24	; 0x01
    343a:	9a 83       	std	Y+2, r25	; 0x02
				break;
    343c:	ed c0       	rjmp	.+474    	; 0x3618 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    343e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3440:	9c ad       	ldd	r25, Y+60	; 0x3c
    3442:	9c 01       	movw	r18, r24
    3444:	2e 5f       	subi	r18, 0xFE	; 254
    3446:	3f 4f       	sbci	r19, 0xFF	; 255
    3448:	2b af       	std	Y+59, r18	; 0x3b
    344a:	3c af       	std	Y+60, r19	; 0x3c
    344c:	fc 01       	movw	r30, r24
    344e:	80 81       	ld	r24, Z
    3450:	91 81       	ldd	r25, Z+1	; 0x01
    3452:	89 8f       	std	Y+25, r24	; 0x19
    3454:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    3456:	89 8d       	ldd	r24, Y+25	; 0x19
    3458:	9a 8d       	ldd	r25, Y+26	; 0x1a
    345a:	40 e1       	ldi	r20, 0x10	; 16
    345c:	50 e0       	ldi	r21, 0x00	; 0
    345e:	62 eb       	ldi	r22, 0xB2	; 178
    3460:	7c e2       	ldi	r23, 0x2C	; 44
    3462:	0e 94 43 25 	call	0x4a86	; 0x4a86 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    3466:	1b 86       	std	Y+11, r1	; 0x0b
    3468:	1c 86       	std	Y+12, r1	; 0x0c
    346a:	15 c0       	rjmp	.+42     	; 0x3496 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    346c:	29 81       	ldd	r18, Y+1	; 0x01
    346e:	3a 81       	ldd	r19, Y+2	; 0x02
    3470:	8b 85       	ldd	r24, Y+11	; 0x0b
    3472:	9c 85       	ldd	r25, Y+12	; 0x0c
    3474:	82 0f       	add	r24, r18
    3476:	93 1f       	adc	r25, r19
    3478:	2b 85       	ldd	r18, Y+11	; 0x0b
    347a:	3c 85       	ldd	r19, Y+12	; 0x0c
    347c:	2e 54       	subi	r18, 0x4E	; 78
    347e:	33 4d       	sbci	r19, 0xD3	; 211
    3480:	f9 01       	movw	r30, r18
    3482:	20 81       	ld	r18, Z
    3484:	8a 53       	subi	r24, 0x3A	; 58
    3486:	93 4d       	sbci	r25, 0xD3	; 211
    3488:	fc 01       	movw	r30, r24
    348a:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    348c:	8b 85       	ldd	r24, Y+11	; 0x0b
    348e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3490:	01 96       	adiw	r24, 0x01	; 1
    3492:	8b 87       	std	Y+11, r24	; 0x0b
    3494:	9c 87       	std	Y+12, r25	; 0x0c
    3496:	82 eb       	ldi	r24, 0xB2	; 178
    3498:	9c e2       	ldi	r25, 0x2C	; 44
    349a:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <strlen>
    349e:	9c 01       	movw	r18, r24
    34a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    34a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    34a4:	82 17       	cp	r24, r18
    34a6:	93 07       	cpc	r25, r19
    34a8:	08 f3       	brcs	.-62     	; 0x346c <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    34aa:	82 eb       	ldi	r24, 0xB2	; 178
    34ac:	9c e2       	ldi	r25, 0x2C	; 44
    34ae:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <strlen>
    34b2:	9c 01       	movw	r18, r24
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	9a 81       	ldd	r25, Y+2	; 0x02
    34b8:	82 0f       	add	r24, r18
    34ba:	93 1f       	adc	r25, r19
    34bc:	89 83       	std	Y+1, r24	; 0x01
    34be:	9a 83       	std	Y+2, r25	; 0x02
				break;
    34c0:	ab c0       	rjmp	.+342    	; 0x3618 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    34c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    34c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    34c6:	9c 01       	movw	r18, r24
    34c8:	2c 5f       	subi	r18, 0xFC	; 252
    34ca:	3f 4f       	sbci	r19, 0xFF	; 255
    34cc:	2b af       	std	Y+59, r18	; 0x3b
    34ce:	3c af       	std	Y+60, r19	; 0x3c
    34d0:	fc 01       	movw	r30, r24
    34d2:	80 81       	ld	r24, Z
    34d4:	91 81       	ldd	r25, Z+1	; 0x01
    34d6:	a2 81       	ldd	r26, Z+2	; 0x02
    34d8:	b3 81       	ldd	r27, Z+3	; 0x03
    34da:	8b 8f       	std	Y+27, r24	; 0x1b
    34dc:	9c 8f       	std	Y+28, r25	; 0x1c
    34de:	ad 8f       	std	Y+29, r26	; 0x1d
    34e0:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    34e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34e6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    34e8:	be 8d       	ldd	r27, Y+30	; 0x1e
    34ea:	ac 01       	movw	r20, r24
    34ec:	bd 01       	movw	r22, r26
    34ee:	82 eb       	ldi	r24, 0xB2	; 178
    34f0:	9c e2       	ldi	r25, 0x2C	; 44
    34f2:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    34f6:	1d 86       	std	Y+13, r1	; 0x0d
    34f8:	1e 86       	std	Y+14, r1	; 0x0e
    34fa:	15 c0       	rjmp	.+42     	; 0x3526 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    34fc:	29 81       	ldd	r18, Y+1	; 0x01
    34fe:	3a 81       	ldd	r19, Y+2	; 0x02
    3500:	8d 85       	ldd	r24, Y+13	; 0x0d
    3502:	9e 85       	ldd	r25, Y+14	; 0x0e
    3504:	82 0f       	add	r24, r18
    3506:	93 1f       	adc	r25, r19
    3508:	2d 85       	ldd	r18, Y+13	; 0x0d
    350a:	3e 85       	ldd	r19, Y+14	; 0x0e
    350c:	2e 54       	subi	r18, 0x4E	; 78
    350e:	33 4d       	sbci	r19, 0xD3	; 211
    3510:	f9 01       	movw	r30, r18
    3512:	20 81       	ld	r18, Z
    3514:	8a 53       	subi	r24, 0x3A	; 58
    3516:	93 4d       	sbci	r25, 0xD3	; 211
    3518:	fc 01       	movw	r30, r24
    351a:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    351c:	8d 85       	ldd	r24, Y+13	; 0x0d
    351e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3520:	01 96       	adiw	r24, 0x01	; 1
    3522:	8d 87       	std	Y+13, r24	; 0x0d
    3524:	9e 87       	std	Y+14, r25	; 0x0e
    3526:	82 eb       	ldi	r24, 0xB2	; 178
    3528:	9c e2       	ldi	r25, 0x2C	; 44
    352a:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <strlen>
    352e:	9c 01       	movw	r18, r24
    3530:	8d 85       	ldd	r24, Y+13	; 0x0d
    3532:	9e 85       	ldd	r25, Y+14	; 0x0e
    3534:	82 17       	cp	r24, r18
    3536:	93 07       	cpc	r25, r19
    3538:	08 f3       	brcs	.-62     	; 0x34fc <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    353a:	82 eb       	ldi	r24, 0xB2	; 178
    353c:	9c e2       	ldi	r25, 0x2C	; 44
    353e:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <strlen>
    3542:	9c 01       	movw	r18, r24
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	9a 81       	ldd	r25, Y+2	; 0x02
    3548:	82 0f       	add	r24, r18
    354a:	93 1f       	adc	r25, r19
    354c:	89 83       	std	Y+1, r24	; 0x01
    354e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3550:	63 c0       	rjmp	.+198    	; 0x3618 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    3552:	8b ad       	ldd	r24, Y+59	; 0x3b
    3554:	9c ad       	ldd	r25, Y+60	; 0x3c
    3556:	9c 01       	movw	r18, r24
    3558:	2c 5f       	subi	r18, 0xFC	; 252
    355a:	3f 4f       	sbci	r19, 0xFF	; 255
    355c:	2b af       	std	Y+59, r18	; 0x3b
    355e:	3c af       	std	Y+60, r19	; 0x3c
    3560:	fc 01       	movw	r30, r24
    3562:	80 81       	ld	r24, Z
    3564:	91 81       	ldd	r25, Z+1	; 0x01
    3566:	a2 81       	ldd	r26, Z+2	; 0x02
    3568:	b3 81       	ldd	r27, Z+3	; 0x03
    356a:	8b 8f       	std	Y+27, r24	; 0x1b
    356c:	9c 8f       	std	Y+28, r25	; 0x1c
    356e:	ad 8f       	std	Y+29, r26	; 0x1d
    3570:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    3572:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3574:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3576:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3578:	be 8d       	ldd	r27, Y+30	; 0x1e
    357a:	ac 01       	movw	r20, r24
    357c:	bd 01       	movw	r22, r26
    357e:	82 eb       	ldi	r24, 0xB2	; 178
    3580:	9c e2       	ldi	r25, 0x2C	; 44
    3582:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    3586:	1f 86       	std	Y+15, r1	; 0x0f
    3588:	18 8a       	std	Y+16, r1	; 0x10
    358a:	15 c0       	rjmp	.+42     	; 0x35b6 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    358c:	29 81       	ldd	r18, Y+1	; 0x01
    358e:	3a 81       	ldd	r19, Y+2	; 0x02
    3590:	8f 85       	ldd	r24, Y+15	; 0x0f
    3592:	98 89       	ldd	r25, Y+16	; 0x10
    3594:	82 0f       	add	r24, r18
    3596:	93 1f       	adc	r25, r19
    3598:	2f 85       	ldd	r18, Y+15	; 0x0f
    359a:	38 89       	ldd	r19, Y+16	; 0x10
    359c:	2e 54       	subi	r18, 0x4E	; 78
    359e:	33 4d       	sbci	r19, 0xD3	; 211
    35a0:	f9 01       	movw	r30, r18
    35a2:	20 81       	ld	r18, Z
    35a4:	8a 53       	subi	r24, 0x3A	; 58
    35a6:	93 4d       	sbci	r25, 0xD3	; 211
    35a8:	fc 01       	movw	r30, r24
    35aa:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    35ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ae:	98 89       	ldd	r25, Y+16	; 0x10
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	8f 87       	std	Y+15, r24	; 0x0f
    35b4:	98 8b       	std	Y+16, r25	; 0x10
    35b6:	82 eb       	ldi	r24, 0xB2	; 178
    35b8:	9c e2       	ldi	r25, 0x2C	; 44
    35ba:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <strlen>
    35be:	9c 01       	movw	r18, r24
    35c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35c2:	98 89       	ldd	r25, Y+16	; 0x10
    35c4:	82 17       	cp	r24, r18
    35c6:	93 07       	cpc	r25, r19
    35c8:	08 f3       	brcs	.-62     	; 0x358c <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    35ca:	82 eb       	ldi	r24, 0xB2	; 178
    35cc:	9c e2       	ldi	r25, 0x2C	; 44
    35ce:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <strlen>
    35d2:	9c 01       	movw	r18, r24
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	9a 81       	ldd	r25, Y+2	; 0x02
    35d8:	82 0f       	add	r24, r18
    35da:	93 1f       	adc	r25, r19
    35dc:	89 83       	std	Y+1, r24	; 0x01
    35de:	9a 83       	std	Y+2, r25	; 0x02
				break;
    35e0:	00 00       	nop
    35e2:	1a c0       	rjmp	.+52     	; 0x3618 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    35e4:	89 81       	ldd	r24, Y+1	; 0x01
    35e6:	9a 81       	ldd	r25, Y+2	; 0x02
    35e8:	8a 53       	subi	r24, 0x3A	; 58
    35ea:	93 4d       	sbci	r25, 0xD3	; 211
    35ec:	2d 89       	ldd	r18, Y+21	; 0x15
    35ee:	fc 01       	movw	r30, r24
    35f0:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	9a 81       	ldd	r25, Y+2	; 0x02
    35f6:	8a 53       	subi	r24, 0x3A	; 58
    35f8:	93 4d       	sbci	r25, 0xD3	; 211
    35fa:	fc 01       	movw	r30, r24
    35fc:	80 81       	ld	r24, Z
    35fe:	8a 30       	cpi	r24, 0x0A	; 10
    3600:	31 f4       	brne	.+12     	; 0x360e <display_vprintf+0x3e0>
				str[length] = '\0';				
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	9a 81       	ldd	r25, Y+2	; 0x02
    3606:	8a 53       	subi	r24, 0x3A	; 58
    3608:	93 4d       	sbci	r25, 0xD3	; 211
    360a:	fc 01       	movw	r30, r24
    360c:	10 82       	st	Z, r1
			}
			length++;
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	9a 81       	ldd	r25, Y+2	; 0x02
    3612:	01 96       	adiw	r24, 0x01	; 1
    3614:	89 83       	std	Y+1, r24	; 0x01
    3616:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    3618:	89 ad       	ldd	r24, Y+57	; 0x39
    361a:	9a ad       	ldd	r25, Y+58	; 0x3a
    361c:	9c 01       	movw	r18, r24
    361e:	2f 5f       	subi	r18, 0xFF	; 255
    3620:	3f 4f       	sbci	r19, 0xFF	; 255
    3622:	29 af       	std	Y+57, r18	; 0x39
    3624:	3a af       	std	Y+58, r19	; 0x3a
    3626:	fc 01       	movw	r30, r24
    3628:	80 81       	ld	r24, Z
    362a:	8d 8b       	std	Y+21, r24	; 0x15
    362c:	8d 89       	ldd	r24, Y+21	; 0x15
    362e:	88 23       	and	r24, r24
    3630:	09 f0       	breq	.+2      	; 0x3634 <display_vprintf+0x406>
    3632:	34 ce       	rjmp	.-920    	; 0x329c <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    3634:	29 81       	ldd	r18, Y+1	; 0x01
    3636:	3a 81       	ldd	r19, Y+2	; 0x02
    3638:	8f a9       	ldd	r24, Y+55	; 0x37
    363a:	98 ad       	ldd	r25, Y+56	; 0x38
    363c:	82 0f       	add	r24, r18
    363e:	93 1f       	adc	r25, r19
    3640:	44 97       	sbiw	r24, 0x14	; 20
    3642:	54 f0       	brlt	.+20     	; 0x3658 <display_vprintf+0x42a>
		length = 20-pos;
    3644:	24 e1       	ldi	r18, 0x14	; 20
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	8f a9       	ldd	r24, Y+55	; 0x37
    364a:	98 ad       	ldd	r25, Y+56	; 0x38
    364c:	a9 01       	movw	r20, r18
    364e:	48 1b       	sub	r20, r24
    3650:	59 0b       	sbc	r21, r25
    3652:	ca 01       	movw	r24, r20
    3654:	89 83       	std	Y+1, r24	; 0x01
    3656:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    3658:	19 8a       	std	Y+17, r1	; 0x11
    365a:	1a 8a       	std	Y+18, r1	; 0x12
    365c:	0e c0       	rjmp	.+28     	; 0x367a <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    365e:	9e 01       	movw	r18, r28
    3660:	2f 5d       	subi	r18, 0xDF	; 223
    3662:	3f 4f       	sbci	r19, 0xFF	; 255
    3664:	89 89       	ldd	r24, Y+17	; 0x11
    3666:	9a 89       	ldd	r25, Y+18	; 0x12
    3668:	82 0f       	add	r24, r18
    366a:	93 1f       	adc	r25, r19
    366c:	fc 01       	movw	r30, r24
    366e:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    3670:	89 89       	ldd	r24, Y+17	; 0x11
    3672:	9a 89       	ldd	r25, Y+18	; 0x12
    3674:	01 96       	adiw	r24, 0x01	; 1
    3676:	89 8b       	std	Y+17, r24	; 0x11
    3678:	9a 8b       	std	Y+18, r25	; 0x12
    367a:	89 89       	ldd	r24, Y+17	; 0x11
    367c:	9a 89       	ldd	r25, Y+18	; 0x12
    367e:	44 97       	sbiw	r24, 0x14	; 20
    3680:	74 f3       	brlt	.-36     	; 0x365e <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    3682:	8d a9       	ldd	r24, Y+53	; 0x35
    3684:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    3686:	8f a9       	ldd	r24, Y+55	; 0x37
    3688:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    368a:	1b 8a       	std	Y+19, r1	; 0x13
    368c:	1c 8a       	std	Y+20, r1	; 0x14
    368e:	14 c0       	rjmp	.+40     	; 0x36b8 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    3690:	8b 89       	ldd	r24, Y+19	; 0x13
    3692:	9c 89       	ldd	r25, Y+20	; 0x14
    3694:	8a 53       	subi	r24, 0x3A	; 58
    3696:	93 4d       	sbci	r25, 0xD3	; 211
    3698:	fc 01       	movw	r30, r24
    369a:	40 81       	ld	r20, Z
    369c:	9e 01       	movw	r18, r28
    369e:	2f 5d       	subi	r18, 0xDF	; 223
    36a0:	3f 4f       	sbci	r19, 0xFF	; 255
    36a2:	8b 89       	ldd	r24, Y+19	; 0x13
    36a4:	9c 89       	ldd	r25, Y+20	; 0x14
    36a6:	82 0f       	add	r24, r18
    36a8:	93 1f       	adc	r25, r19
    36aa:	fc 01       	movw	r30, r24
    36ac:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    36ae:	8b 89       	ldd	r24, Y+19	; 0x13
    36b0:	9c 89       	ldd	r25, Y+20	; 0x14
    36b2:	01 96       	adiw	r24, 0x01	; 1
    36b4:	8b 8b       	std	Y+19, r24	; 0x13
    36b6:	9c 8b       	std	Y+20, r25	; 0x14
    36b8:	2b 89       	ldd	r18, Y+19	; 0x13
    36ba:	3c 89       	ldd	r19, Y+20	; 0x14
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	9a 81       	ldd	r25, Y+2	; 0x02
    36c0:	28 17       	cp	r18, r24
    36c2:	39 07       	cpc	r19, r25
    36c4:	2c f3       	brlt	.-54     	; 0x3690 <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    36c6:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <displayLineQueue>
    36ca:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <displayLineQueue+0x1>
    36ce:	be 01       	movw	r22, r28
    36d0:	61 5e       	subi	r22, 0xE1	; 225
    36d2:	7f 4f       	sbci	r23, 0xFF	; 255
    36d4:	00 e0       	ldi	r16, 0x00	; 0
    36d6:	2f ef       	ldi	r18, 0xFF	; 255
    36d8:	3f ef       	ldi	r19, 0xFF	; 255
    36da:	a9 01       	movw	r20, r18
    36dc:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
	
	
	return length;
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    36e4:	ec 96       	adiw	r28, 0x3c	; 60
    36e6:	cd bf       	out	0x3d, r28	; 61
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	df 91       	pop	r29
    36ec:	cf 91       	pop	r28
    36ee:	0f 91       	pop	r16
    36f0:	08 95       	ret

000036f2 <normalize>:

static int normalize(double *val) {
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	28 97       	sbiw	r28, 0x08	; 8
    36fc:	cd bf       	out	0x3d, r28	; 61
    36fe:	de bf       	out	0x3e, r29	; 62
    3700:	8f 83       	std	Y+7, r24	; 0x07
    3702:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    3704:	19 82       	std	Y+1, r1	; 0x01
    3706:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    3708:	8f 81       	ldd	r24, Y+7	; 0x07
    370a:	98 85       	ldd	r25, Y+8	; 0x08
    370c:	fc 01       	movw	r30, r24
    370e:	80 81       	ld	r24, Z
    3710:	91 81       	ldd	r25, Z+1	; 0x01
    3712:	a2 81       	ldd	r26, Z+2	; 0x02
    3714:	b3 81       	ldd	r27, Z+3	; 0x03
    3716:	8b 83       	std	Y+3, r24	; 0x03
    3718:	9c 83       	std	Y+4, r25	; 0x04
    371a:	ad 83       	std	Y+5, r26	; 0x05
    371c:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    371e:	15 c0       	rjmp	.+42     	; 0x374a <normalize+0x58>
        value /= 10.0;
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	40 e2       	ldi	r20, 0x20	; 32
    3726:	51 e4       	ldi	r21, 0x41	; 65
    3728:	6b 81       	ldd	r22, Y+3	; 0x03
    372a:	7c 81       	ldd	r23, Y+4	; 0x04
    372c:	8d 81       	ldd	r24, Y+5	; 0x05
    372e:	9e 81       	ldd	r25, Y+6	; 0x06
    3730:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__divsf3>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	8b 83       	std	Y+3, r24	; 0x03
    373a:	9c 83       	std	Y+4, r25	; 0x04
    373c:	ad 83       	std	Y+5, r26	; 0x05
    373e:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	9a 81       	ldd	r25, Y+2	; 0x02
    3744:	01 96       	adiw	r24, 0x01	; 1
    3746:	89 83       	std	Y+1, r24	; 0x01
    3748:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	40 e8       	ldi	r20, 0x80	; 128
    3750:	5f e3       	ldi	r21, 0x3F	; 63
    3752:	6b 81       	ldd	r22, Y+3	; 0x03
    3754:	7c 81       	ldd	r23, Y+4	; 0x04
    3756:	8d 81       	ldd	r24, Y+5	; 0x05
    3758:	9e 81       	ldd	r25, Y+6	; 0x06
    375a:	0e 94 22 20 	call	0x4044	; 0x4044 <__gesf2>
    375e:	88 23       	and	r24, r24
    3760:	fc f6       	brge	.-66     	; 0x3720 <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    3762:	15 c0       	rjmp	.+42     	; 0x378e <normalize+0x9c>
        value *= 10.0;
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e2       	ldi	r20, 0x20	; 32
    376a:	51 e4       	ldi	r21, 0x41	; 65
    376c:	6b 81       	ldd	r22, Y+3	; 0x03
    376e:	7c 81       	ldd	r23, Y+4	; 0x04
    3770:	8d 81       	ldd	r24, Y+5	; 0x05
    3772:	9e 81       	ldd	r25, Y+6	; 0x06
    3774:	0e 94 27 20 	call	0x404e	; 0x404e <__mulsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	8b 83       	std	Y+3, r24	; 0x03
    377e:	9c 83       	std	Y+4, r25	; 0x04
    3780:	ad 83       	std	Y+5, r26	; 0x05
    3782:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	9a 81       	ldd	r25, Y+2	; 0x02
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	89 83       	std	Y+1, r24	; 0x01
    378c:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    378e:	2d ec       	ldi	r18, 0xCD	; 205
    3790:	3c ec       	ldi	r19, 0xCC	; 204
    3792:	4c ec       	ldi	r20, 0xCC	; 204
    3794:	5d e3       	ldi	r21, 0x3D	; 61
    3796:	6b 81       	ldd	r22, Y+3	; 0x03
    3798:	7c 81       	ldd	r23, Y+4	; 0x04
    379a:	8d 81       	ldd	r24, Y+5	; 0x05
    379c:	9e 81       	ldd	r25, Y+6	; 0x06
    379e:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__cmpsf2>
    37a2:	88 23       	and	r24, r24
    37a4:	fc f2       	brlt	.-66     	; 0x3764 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    37a6:	2f 81       	ldd	r18, Y+7	; 0x07
    37a8:	38 85       	ldd	r19, Y+8	; 0x08
    37aa:	8b 81       	ldd	r24, Y+3	; 0x03
    37ac:	9c 81       	ldd	r25, Y+4	; 0x04
    37ae:	ad 81       	ldd	r26, Y+5	; 0x05
    37b0:	be 81       	ldd	r27, Y+6	; 0x06
    37b2:	f9 01       	movw	r30, r18
    37b4:	80 83       	st	Z, r24
    37b6:	91 83       	std	Z+1, r25	; 0x01
    37b8:	a2 83       	std	Z+2, r26	; 0x02
    37ba:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
    37be:	9a 81       	ldd	r25, Y+2	; 0x02
}
    37c0:	28 96       	adiw	r28, 0x08	; 8
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	de bf       	out	0x3e, r29	; 62
    37c6:	df 91       	pop	r29
    37c8:	cf 91       	pop	r28
    37ca:	08 95       	ret

000037cc <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    37cc:	cf 92       	push	r12
    37ce:	df 92       	push	r13
    37d0:	ef 92       	push	r14
    37d2:	ff 92       	push	r15
    37d4:	cf 93       	push	r28
    37d6:	df 93       	push	r29
    37d8:	cd b7       	in	r28, 0x3d	; 61
    37da:	de b7       	in	r29, 0x3e	; 62
    37dc:	2e 97       	sbiw	r28, 0x0e	; 14
    37de:	cd bf       	out	0x3d, r28	; 61
    37e0:	de bf       	out	0x3e, r29	; 62
    37e2:	89 87       	std	Y+9, r24	; 0x09
    37e4:	9a 87       	std	Y+10, r25	; 0x0a
    37e6:	4b 87       	std	Y+11, r20	; 0x0b
    37e8:	5c 87       	std	Y+12, r21	; 0x0c
    37ea:	6d 87       	std	Y+13, r22	; 0x0d
    37ec:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    37ee:	19 82       	std	Y+1, r1	; 0x01
    37f0:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    37f2:	1b 82       	std	Y+3, r1	; 0x03
    37f4:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    37f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    37f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    37fa:	ad 85       	ldd	r26, Y+13	; 0x0d
    37fc:	be 85       	ldd	r27, Y+14	; 0x0e
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	a9 01       	movw	r20, r18
    3804:	bc 01       	movw	r22, r24
    3806:	cd 01       	movw	r24, r26
    3808:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__cmpsf2>
    380c:	88 23       	and	r24, r24
    380e:	59 f4       	brne	.+22     	; 0x3826 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    3810:	89 85       	ldd	r24, Y+9	; 0x09
    3812:	9a 85       	ldd	r25, Y+10	; 0x0a
    3814:	20 e3       	ldi	r18, 0x30	; 48
    3816:	fc 01       	movw	r30, r24
    3818:	20 83       	st	Z, r18
        buffer[1] = '\0';
    381a:	89 85       	ldd	r24, Y+9	; 0x09
    381c:	9a 85       	ldd	r25, Y+10	; 0x0a
    381e:	01 96       	adiw	r24, 0x01	; 1
    3820:	fc 01       	movw	r30, r24
    3822:	10 82       	st	Z, r1
        return;
    3824:	18 c1       	rjmp	.+560    	; 0x3a56 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    3826:	8b 85       	ldd	r24, Y+11	; 0x0b
    3828:	9c 85       	ldd	r25, Y+12	; 0x0c
    382a:	ad 85       	ldd	r26, Y+13	; 0x0d
    382c:	be 85       	ldd	r27, Y+14	; 0x0e
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	a9 01       	movw	r20, r18
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__cmpsf2>
    383c:	88 23       	and	r24, r24
    383e:	9c f4       	brge	.+38     	; 0x3866 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    3840:	89 85       	ldd	r24, Y+9	; 0x09
    3842:	9a 85       	ldd	r25, Y+10	; 0x0a
    3844:	9c 01       	movw	r18, r24
    3846:	2f 5f       	subi	r18, 0xFF	; 255
    3848:	3f 4f       	sbci	r19, 0xFF	; 255
    384a:	29 87       	std	Y+9, r18	; 0x09
    384c:	3a 87       	std	Y+10, r19	; 0x0a
    384e:	2d e2       	ldi	r18, 0x2D	; 45
    3850:	fc 01       	movw	r30, r24
    3852:	20 83       	st	Z, r18
        value = -value;
    3854:	8b 85       	ldd	r24, Y+11	; 0x0b
    3856:	9c 85       	ldd	r25, Y+12	; 0x0c
    3858:	ad 85       	ldd	r26, Y+13	; 0x0d
    385a:	be 85       	ldd	r27, Y+14	; 0x0e
    385c:	b0 58       	subi	r27, 0x80	; 128
    385e:	8b 87       	std	Y+11, r24	; 0x0b
    3860:	9c 87       	std	Y+12, r25	; 0x0c
    3862:	ad 87       	std	Y+13, r26	; 0x0d
    3864:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    3866:	ce 01       	movw	r24, r28
    3868:	0b 96       	adiw	r24, 0x0b	; 11
    386a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <normalize>
    386e:	89 83       	std	Y+1, r24	; 0x01
    3870:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    3872:	53 c0       	rjmp	.+166    	; 0x391a <ftoa_fixed+0x14e>
        int digit = value * 10;
    3874:	8b 85       	ldd	r24, Y+11	; 0x0b
    3876:	9c 85       	ldd	r25, Y+12	; 0x0c
    3878:	ad 85       	ldd	r26, Y+13	; 0x0d
    387a:	be 85       	ldd	r27, Y+14	; 0x0e
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e2       	ldi	r20, 0x20	; 32
    3882:	51 e4       	ldi	r21, 0x41	; 65
    3884:	bc 01       	movw	r22, r24
    3886:	cd 01       	movw	r24, r26
    3888:	0e 94 27 20 	call	0x404e	; 0x404e <__mulsf3>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	bc 01       	movw	r22, r24
    3892:	cd 01       	movw	r24, r26
    3894:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__fixsfsi>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	8d 83       	std	Y+5, r24	; 0x05
    389e:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    38a0:	89 85       	ldd	r24, Y+9	; 0x09
    38a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a4:	9c 01       	movw	r18, r24
    38a6:	2f 5f       	subi	r18, 0xFF	; 255
    38a8:	3f 4f       	sbci	r19, 0xFF	; 255
    38aa:	29 87       	std	Y+9, r18	; 0x09
    38ac:	3a 87       	std	Y+10, r19	; 0x0a
    38ae:	2d 81       	ldd	r18, Y+5	; 0x05
    38b0:	20 5d       	subi	r18, 0xD0	; 208
    38b2:	fc 01       	movw	r30, r24
    38b4:	20 83       	st	Z, r18
        value = value * 10 - digit;
    38b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    38b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    38ba:	ad 85       	ldd	r26, Y+13	; 0x0d
    38bc:	be 85       	ldd	r27, Y+14	; 0x0e
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	40 e2       	ldi	r20, 0x20	; 32
    38c4:	51 e4       	ldi	r21, 0x41	; 65
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 27 20 	call	0x404e	; 0x404e <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	6c 01       	movw	r12, r24
    38d4:	7d 01       	movw	r14, r26
    38d6:	8d 81       	ldd	r24, Y+5	; 0x05
    38d8:	9e 81       	ldd	r25, Y+6	; 0x06
    38da:	09 2e       	mov	r0, r25
    38dc:	00 0c       	add	r0, r0
    38de:	aa 0b       	sbc	r26, r26
    38e0:	bb 0b       	sbc	r27, r27
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__floatsisf>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	9c 01       	movw	r18, r24
    38f0:	ad 01       	movw	r20, r26
    38f2:	c7 01       	movw	r24, r14
    38f4:	b6 01       	movw	r22, r12
    38f6:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__subsf3>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	8b 87       	std	Y+11, r24	; 0x0b
    3900:	9c 87       	std	Y+12, r25	; 0x0c
    3902:	ad 87       	std	Y+13, r26	; 0x0d
    3904:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    3906:	8b 81       	ldd	r24, Y+3	; 0x03
    3908:	9c 81       	ldd	r25, Y+4	; 0x04
    390a:	01 96       	adiw	r24, 0x01	; 1
    390c:	8b 83       	std	Y+3, r24	; 0x03
    390e:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	9a 81       	ldd	r25, Y+2	; 0x02
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    391a:	89 81       	ldd	r24, Y+1	; 0x01
    391c:	9a 81       	ldd	r25, Y+2	; 0x02
    391e:	18 16       	cp	r1, r24
    3920:	19 06       	cpc	r1, r25
    3922:	0c f4       	brge	.+2      	; 0x3926 <ftoa_fixed+0x15a>
    3924:	a7 cf       	rjmp	.-178    	; 0x3874 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    3926:	8b 81       	ldd	r24, Y+3	; 0x03
    3928:	9c 81       	ldd	r25, Y+4	; 0x04
    392a:	89 2b       	or	r24, r25
    392c:	51 f4       	brne	.+20     	; 0x3942 <ftoa_fixed+0x176>
        *buffer++ = '0';
    392e:	89 85       	ldd	r24, Y+9	; 0x09
    3930:	9a 85       	ldd	r25, Y+10	; 0x0a
    3932:	9c 01       	movw	r18, r24
    3934:	2f 5f       	subi	r18, 0xFF	; 255
    3936:	3f 4f       	sbci	r19, 0xFF	; 255
    3938:	29 87       	std	Y+9, r18	; 0x09
    393a:	3a 87       	std	Y+10, r19	; 0x0a
    393c:	20 e3       	ldi	r18, 0x30	; 48
    393e:	fc 01       	movw	r30, r24
    3940:	20 83       	st	Z, r18

    *buffer++ = '.';
    3942:	89 85       	ldd	r24, Y+9	; 0x09
    3944:	9a 85       	ldd	r25, Y+10	; 0x0a
    3946:	9c 01       	movw	r18, r24
    3948:	2f 5f       	subi	r18, 0xFF	; 255
    394a:	3f 4f       	sbci	r19, 0xFF	; 255
    394c:	29 87       	std	Y+9, r18	; 0x09
    394e:	3a 87       	std	Y+10, r19	; 0x0a
    3950:	2e e2       	ldi	r18, 0x2E	; 46
    3952:	fc 01       	movw	r30, r24
    3954:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    3956:	14 c0       	rjmp	.+40     	; 0x3980 <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    3958:	89 85       	ldd	r24, Y+9	; 0x09
    395a:	9a 85       	ldd	r25, Y+10	; 0x0a
    395c:	9c 01       	movw	r18, r24
    395e:	2f 5f       	subi	r18, 0xFF	; 255
    3960:	3f 4f       	sbci	r19, 0xFF	; 255
    3962:	29 87       	std	Y+9, r18	; 0x09
    3964:	3a 87       	std	Y+10, r19	; 0x0a
    3966:	20 e3       	ldi	r18, 0x30	; 48
    3968:	fc 01       	movw	r30, r24
    396a:	20 83       	st	Z, r18
        --exponent;
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	9a 81       	ldd	r25, Y+2	; 0x02
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	89 83       	std	Y+1, r24	; 0x01
    3974:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    3976:	8b 81       	ldd	r24, Y+3	; 0x03
    3978:	9c 81       	ldd	r25, Y+4	; 0x04
    397a:	01 96       	adiw	r24, 0x01	; 1
    397c:	8b 83       	std	Y+3, r24	; 0x03
    397e:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	9a 81       	ldd	r25, Y+2	; 0x02
    3984:	99 23       	and	r25, r25
    3986:	0c f0       	brlt	.+2      	; 0x398a <ftoa_fixed+0x1be>
    3988:	58 c0       	rjmp	.+176    	; 0x3a3a <ftoa_fixed+0x26e>
    398a:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <width.5062>
    398e:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <width.5062+0x1>
    3992:	2b 81       	ldd	r18, Y+3	; 0x03
    3994:	3c 81       	ldd	r19, Y+4	; 0x04
    3996:	28 17       	cp	r18, r24
    3998:	39 07       	cpc	r19, r25
    399a:	f4 f2       	brlt	.-68     	; 0x3958 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    399c:	4e c0       	rjmp	.+156    	; 0x3a3a <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    399e:	8b 85       	ldd	r24, Y+11	; 0x0b
    39a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    39a2:	ad 85       	ldd	r26, Y+13	; 0x0d
    39a4:	be 85       	ldd	r27, Y+14	; 0x0e
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e2       	ldi	r20, 0x20	; 32
    39ac:	51 e4       	ldi	r21, 0x41	; 65
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	0e 94 27 20 	call	0x404e	; 0x404e <__mulsf3>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	bc 01       	movw	r22, r24
    39bc:	cd 01       	movw	r24, r26
    39be:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__fixsfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	8f 83       	std	Y+7, r24	; 0x07
    39c8:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    39ca:	89 85       	ldd	r24, Y+9	; 0x09
    39cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ce:	9c 01       	movw	r18, r24
    39d0:	2f 5f       	subi	r18, 0xFF	; 255
    39d2:	3f 4f       	sbci	r19, 0xFF	; 255
    39d4:	29 87       	std	Y+9, r18	; 0x09
    39d6:	3a 87       	std	Y+10, r19	; 0x0a
    39d8:	2f 81       	ldd	r18, Y+7	; 0x07
    39da:	20 5d       	subi	r18, 0xD0	; 208
    39dc:	fc 01       	movw	r30, r24
    39de:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    39e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    39e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    39e4:	ad 85       	ldd	r26, Y+13	; 0x0d
    39e6:	be 85       	ldd	r27, Y+14	; 0x0e
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	40 e2       	ldi	r20, 0x20	; 32
    39ee:	51 e4       	ldi	r21, 0x41	; 65
    39f0:	bc 01       	movw	r22, r24
    39f2:	cd 01       	movw	r24, r26
    39f4:	0e 94 27 20 	call	0x404e	; 0x404e <__mulsf3>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	6c 01       	movw	r12, r24
    39fe:	7d 01       	movw	r14, r26
    3a00:	8f 81       	ldd	r24, Y+7	; 0x07
    3a02:	98 85       	ldd	r25, Y+8	; 0x08
    3a04:	09 2e       	mov	r0, r25
    3a06:	00 0c       	add	r0, r0
    3a08:	aa 0b       	sbc	r26, r26
    3a0a:	bb 0b       	sbc	r27, r27
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	cd 01       	movw	r24, r26
    3a10:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__floatsisf>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	9c 01       	movw	r18, r24
    3a1a:	ad 01       	movw	r20, r26
    3a1c:	c7 01       	movw	r24, r14
    3a1e:	b6 01       	movw	r22, r12
    3a20:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__subsf3>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	8b 87       	std	Y+11, r24	; 0x0b
    3a2a:	9c 87       	std	Y+12, r25	; 0x0c
    3a2c:	ad 87       	std	Y+13, r26	; 0x0d
    3a2e:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    3a30:	8b 81       	ldd	r24, Y+3	; 0x03
    3a32:	9c 81       	ldd	r25, Y+4	; 0x04
    3a34:	01 96       	adiw	r24, 0x01	; 1
    3a36:	8b 83       	std	Y+3, r24	; 0x03
    3a38:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    3a3a:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <width.5062>
    3a3e:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <width.5062+0x1>
    3a42:	2b 81       	ldd	r18, Y+3	; 0x03
    3a44:	3c 81       	ldd	r19, Y+4	; 0x04
    3a46:	28 17       	cp	r18, r24
    3a48:	39 07       	cpc	r19, r25
    3a4a:	0c f4       	brge	.+2      	; 0x3a4e <ftoa_fixed+0x282>
    3a4c:	a8 cf       	rjmp	.-176    	; 0x399e <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    3a4e:	89 85       	ldd	r24, Y+9	; 0x09
    3a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a52:	fc 01       	movw	r30, r24
    3a54:	10 82       	st	Z, r1
}
    3a56:	2e 96       	adiw	r28, 0x0e	; 14
    3a58:	cd bf       	out	0x3d, r28	; 61
    3a5a:	de bf       	out	0x3e, r29	; 62
    3a5c:	df 91       	pop	r29
    3a5e:	cf 91       	pop	r28
    3a60:	ff 90       	pop	r15
    3a62:	ef 90       	pop	r14
    3a64:	df 90       	pop	r13
    3a66:	cf 90       	pop	r12
    3a68:	08 95       	ret

00003a6a <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    3a6a:	cf 92       	push	r12
    3a6c:	df 92       	push	r13
    3a6e:	ef 92       	push	r14
    3a70:	ff 92       	push	r15
    3a72:	cf 93       	push	r28
    3a74:	df 93       	push	r29
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	2e 97       	sbiw	r28, 0x0e	; 14
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	89 87       	std	Y+9, r24	; 0x09
    3a82:	9a 87       	std	Y+10, r25	; 0x0a
    3a84:	4b 87       	std	Y+11, r20	; 0x0b
    3a86:	5c 87       	std	Y+12, r21	; 0x0c
    3a88:	6d 87       	std	Y+13, r22	; 0x0d
    3a8a:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    3a8c:	1b 82       	std	Y+3, r1	; 0x03
    3a8e:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    3a90:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a92:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a94:	ad 85       	ldd	r26, Y+13	; 0x0d
    3a96:	be 85       	ldd	r27, Y+14	; 0x0e
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	a9 01       	movw	r20, r18
    3a9e:	bc 01       	movw	r22, r24
    3aa0:	cd 01       	movw	r24, r26
    3aa2:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__cmpsf2>
    3aa6:	88 23       	and	r24, r24
    3aa8:	59 f4       	brne	.+22     	; 0x3ac0 <ftoa_sci+0x56>
        buffer[0] = '0';
    3aaa:	89 85       	ldd	r24, Y+9	; 0x09
    3aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aae:	20 e3       	ldi	r18, 0x30	; 48
    3ab0:	fc 01       	movw	r30, r24
    3ab2:	20 83       	st	Z, r18
        buffer[1] = '\0';
    3ab4:	89 85       	ldd	r24, Y+9	; 0x09
    3ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab8:	01 96       	adiw	r24, 0x01	; 1
    3aba:	fc 01       	movw	r30, r24
    3abc:	10 82       	st	Z, r1
        return;
    3abe:	ec c0       	rjmp	.+472    	; 0x3c98 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    3ac0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ac2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ac4:	ad 85       	ldd	r26, Y+13	; 0x0d
    3ac6:	be 85       	ldd	r27, Y+14	; 0x0e
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	a9 01       	movw	r20, r18
    3ace:	bc 01       	movw	r22, r24
    3ad0:	cd 01       	movw	r24, r26
    3ad2:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__cmpsf2>
    3ad6:	88 23       	and	r24, r24
    3ad8:	9c f4       	brge	.+38     	; 0x3b00 <ftoa_sci+0x96>
        *buffer++ = '-';
    3ada:	89 85       	ldd	r24, Y+9	; 0x09
    3adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ade:	9c 01       	movw	r18, r24
    3ae0:	2f 5f       	subi	r18, 0xFF	; 255
    3ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae4:	29 87       	std	Y+9, r18	; 0x09
    3ae6:	3a 87       	std	Y+10, r19	; 0x0a
    3ae8:	2d e2       	ldi	r18, 0x2D	; 45
    3aea:	fc 01       	movw	r30, r24
    3aec:	20 83       	st	Z, r18
        value = -value;
    3aee:	8b 85       	ldd	r24, Y+11	; 0x0b
    3af0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3af2:	ad 85       	ldd	r26, Y+13	; 0x0d
    3af4:	be 85       	ldd	r27, Y+14	; 0x0e
    3af6:	b0 58       	subi	r27, 0x80	; 128
    3af8:	8b 87       	std	Y+11, r24	; 0x0b
    3afa:	9c 87       	std	Y+12, r25	; 0x0c
    3afc:	ad 87       	std	Y+13, r26	; 0x0d
    3afe:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    3b00:	ce 01       	movw	r24, r28
    3b02:	0b 96       	adiw	r24, 0x0b	; 11
    3b04:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <normalize>
    3b08:	8b 83       	std	Y+3, r24	; 0x03
    3b0a:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    3b0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b10:	ad 85       	ldd	r26, Y+13	; 0x0d
    3b12:	be 85       	ldd	r27, Y+14	; 0x0e
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	40 e2       	ldi	r20, 0x20	; 32
    3b1a:	51 e4       	ldi	r21, 0x41	; 65
    3b1c:	bc 01       	movw	r22, r24
    3b1e:	cd 01       	movw	r24, r26
    3b20:	0e 94 27 20 	call	0x404e	; 0x404e <__mulsf3>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	bc 01       	movw	r22, r24
    3b2a:	cd 01       	movw	r24, r26
    3b2c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__fixsfsi>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	8d 83       	std	Y+5, r24	; 0x05
    3b36:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    3b38:	89 85       	ldd	r24, Y+9	; 0x09
    3b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b3c:	9c 01       	movw	r18, r24
    3b3e:	2f 5f       	subi	r18, 0xFF	; 255
    3b40:	3f 4f       	sbci	r19, 0xFF	; 255
    3b42:	29 87       	std	Y+9, r18	; 0x09
    3b44:	3a 87       	std	Y+10, r19	; 0x0a
    3b46:	2d 81       	ldd	r18, Y+5	; 0x05
    3b48:	20 5d       	subi	r18, 0xD0	; 208
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    3b4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b50:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b52:	ad 85       	ldd	r26, Y+13	; 0x0d
    3b54:	be 85       	ldd	r27, Y+14	; 0x0e
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	40 e2       	ldi	r20, 0x20	; 32
    3b5c:	51 e4       	ldi	r21, 0x41	; 65
    3b5e:	bc 01       	movw	r22, r24
    3b60:	cd 01       	movw	r24, r26
    3b62:	0e 94 27 20 	call	0x404e	; 0x404e <__mulsf3>
    3b66:	dc 01       	movw	r26, r24
    3b68:	cb 01       	movw	r24, r22
    3b6a:	6c 01       	movw	r12, r24
    3b6c:	7d 01       	movw	r14, r26
    3b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b70:	9e 81       	ldd	r25, Y+6	; 0x06
    3b72:	09 2e       	mov	r0, r25
    3b74:	00 0c       	add	r0, r0
    3b76:	aa 0b       	sbc	r26, r26
    3b78:	bb 0b       	sbc	r27, r27
    3b7a:	bc 01       	movw	r22, r24
    3b7c:	cd 01       	movw	r24, r26
    3b7e:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__floatsisf>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	9c 01       	movw	r18, r24
    3b88:	ad 01       	movw	r20, r26
    3b8a:	c7 01       	movw	r24, r14
    3b8c:	b6 01       	movw	r22, r12
    3b8e:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__subsf3>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	8b 87       	std	Y+11, r24	; 0x0b
    3b98:	9c 87       	std	Y+12, r25	; 0x0c
    3b9a:	ad 87       	std	Y+13, r26	; 0x0d
    3b9c:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    3b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba2:	01 97       	sbiw	r24, 0x01	; 1
    3ba4:	8b 83       	std	Y+3, r24	; 0x03
    3ba6:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    3ba8:	89 85       	ldd	r24, Y+9	; 0x09
    3baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bac:	9c 01       	movw	r18, r24
    3bae:	2f 5f       	subi	r18, 0xFF	; 255
    3bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb2:	29 87       	std	Y+9, r18	; 0x09
    3bb4:	3a 87       	std	Y+10, r19	; 0x0a
    3bb6:	2e e2       	ldi	r18, 0x2E	; 46
    3bb8:	fc 01       	movw	r30, r24
    3bba:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    3bbc:	19 82       	std	Y+1, r1	; 0x01
    3bbe:	1a 82       	std	Y+2, r1	; 0x02
    3bc0:	4e c0       	rjmp	.+156    	; 0x3c5e <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    3bc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bc4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3bc6:	ad 85       	ldd	r26, Y+13	; 0x0d
    3bc8:	be 85       	ldd	r27, Y+14	; 0x0e
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e2       	ldi	r20, 0x20	; 32
    3bd0:	51 e4       	ldi	r21, 0x41	; 65
    3bd2:	bc 01       	movw	r22, r24
    3bd4:	cd 01       	movw	r24, r26
    3bd6:	0e 94 27 20 	call	0x404e	; 0x404e <__mulsf3>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	bc 01       	movw	r22, r24
    3be0:	cd 01       	movw	r24, r26
    3be2:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__fixsfsi>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	8f 83       	std	Y+7, r24	; 0x07
    3bec:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    3bee:	89 85       	ldd	r24, Y+9	; 0x09
    3bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf2:	9c 01       	movw	r18, r24
    3bf4:	2f 5f       	subi	r18, 0xFF	; 255
    3bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf8:	29 87       	std	Y+9, r18	; 0x09
    3bfa:	3a 87       	std	Y+10, r19	; 0x0a
    3bfc:	2f 81       	ldd	r18, Y+7	; 0x07
    3bfe:	20 5d       	subi	r18, 0xD0	; 208
    3c00:	fc 01       	movw	r30, r24
    3c02:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    3c04:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c06:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c08:	ad 85       	ldd	r26, Y+13	; 0x0d
    3c0a:	be 85       	ldd	r27, Y+14	; 0x0e
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 e2       	ldi	r20, 0x20	; 32
    3c12:	51 e4       	ldi	r21, 0x41	; 65
    3c14:	bc 01       	movw	r22, r24
    3c16:	cd 01       	movw	r24, r26
    3c18:	0e 94 27 20 	call	0x404e	; 0x404e <__mulsf3>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	6c 01       	movw	r12, r24
    3c22:	7d 01       	movw	r14, r26
    3c24:	8f 81       	ldd	r24, Y+7	; 0x07
    3c26:	98 85       	ldd	r25, Y+8	; 0x08
    3c28:	09 2e       	mov	r0, r25
    3c2a:	00 0c       	add	r0, r0
    3c2c:	aa 0b       	sbc	r26, r26
    3c2e:	bb 0b       	sbc	r27, r27
    3c30:	bc 01       	movw	r22, r24
    3c32:	cd 01       	movw	r24, r26
    3c34:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__floatsisf>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	9c 01       	movw	r18, r24
    3c3e:	ad 01       	movw	r20, r26
    3c40:	c7 01       	movw	r24, r14
    3c42:	b6 01       	movw	r22, r12
    3c44:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__subsf3>
    3c48:	dc 01       	movw	r26, r24
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	8b 87       	std	Y+11, r24	; 0x0b
    3c4e:	9c 87       	std	Y+12, r25	; 0x0c
    3c50:	ad 87       	std	Y+13, r26	; 0x0d
    3c52:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	9a 81       	ldd	r25, Y+2	; 0x02
    3c58:	01 96       	adiw	r24, 0x01	; 1
    3c5a:	89 83       	std	Y+1, r24	; 0x01
    3c5c:	9a 83       	std	Y+2, r25	; 0x02
    3c5e:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <width.5079>
    3c62:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <width.5079+0x1>
    3c66:	29 81       	ldd	r18, Y+1	; 0x01
    3c68:	3a 81       	ldd	r19, Y+2	; 0x02
    3c6a:	28 17       	cp	r18, r24
    3c6c:	39 07       	cpc	r19, r25
    3c6e:	0c f4       	brge	.+2      	; 0x3c72 <ftoa_sci+0x208>
    3c70:	a8 cf       	rjmp	.-176    	; 0x3bc2 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    3c72:	89 85       	ldd	r24, Y+9	; 0x09
    3c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c76:	9c 01       	movw	r18, r24
    3c78:	2f 5f       	subi	r18, 0xFF	; 255
    3c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c7c:	29 87       	std	Y+9, r18	; 0x09
    3c7e:	3a 87       	std	Y+10, r19	; 0x0a
    3c80:	25 e6       	ldi	r18, 0x65	; 101
    3c82:	fc 01       	movw	r30, r24
    3c84:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    3c86:	29 85       	ldd	r18, Y+9	; 0x09
    3c88:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8e:	4a e0       	ldi	r20, 0x0A	; 10
    3c90:	50 e0       	ldi	r21, 0x00	; 0
    3c92:	b9 01       	movw	r22, r18
    3c94:	0e 94 43 25 	call	0x4a86	; 0x4a86 <itoa>
}
    3c98:	2e 96       	adiw	r28, 0x0e	; 14
    3c9a:	cd bf       	out	0x3d, r28	; 61
    3c9c:	de bf       	out	0x3e, r29	; 62
    3c9e:	df 91       	pop	r29
    3ca0:	cf 91       	pop	r28
    3ca2:	ff 90       	pop	r15
    3ca4:	ef 90       	pop	r14
    3ca6:	df 90       	pop	r13
    3ca8:	cf 90       	pop	r12
    3caa:	08 95       	ret

00003cac <__subsf3>:
    3cac:	50 58       	subi	r21, 0x80	; 128

00003cae <__addsf3>:
    3cae:	bb 27       	eor	r27, r27
    3cb0:	aa 27       	eor	r26, r26
    3cb2:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__addsf3x>
    3cb6:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__fp_round>
    3cba:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__fp_pscA>
    3cbe:	38 f0       	brcs	.+14     	; 0x3cce <__addsf3+0x20>
    3cc0:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__fp_pscB>
    3cc4:	20 f0       	brcs	.+8      	; 0x3cce <__addsf3+0x20>
    3cc6:	39 f4       	brne	.+14     	; 0x3cd6 <__addsf3+0x28>
    3cc8:	9f 3f       	cpi	r25, 0xFF	; 255
    3cca:	19 f4       	brne	.+6      	; 0x3cd2 <__addsf3+0x24>
    3ccc:	26 f4       	brtc	.+8      	; 0x3cd6 <__addsf3+0x28>
    3cce:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__fp_nan>
    3cd2:	0e f4       	brtc	.+2      	; 0x3cd6 <__addsf3+0x28>
    3cd4:	e0 95       	com	r30
    3cd6:	e7 fb       	bst	r30, 7
    3cd8:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__fp_inf>

00003cdc <__addsf3x>:
    3cdc:	e9 2f       	mov	r30, r25
    3cde:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <__fp_split3>
    3ce2:	58 f3       	brcs	.-42     	; 0x3cba <__addsf3+0xc>
    3ce4:	ba 17       	cp	r27, r26
    3ce6:	62 07       	cpc	r22, r18
    3ce8:	73 07       	cpc	r23, r19
    3cea:	84 07       	cpc	r24, r20
    3cec:	95 07       	cpc	r25, r21
    3cee:	20 f0       	brcs	.+8      	; 0x3cf8 <__addsf3x+0x1c>
    3cf0:	79 f4       	brne	.+30     	; 0x3d10 <__addsf3x+0x34>
    3cf2:	a6 f5       	brtc	.+104    	; 0x3d5c <__addsf3x+0x80>
    3cf4:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__fp_zero>
    3cf8:	0e f4       	brtc	.+2      	; 0x3cfc <__addsf3x+0x20>
    3cfa:	e0 95       	com	r30
    3cfc:	0b 2e       	mov	r0, r27
    3cfe:	ba 2f       	mov	r27, r26
    3d00:	a0 2d       	mov	r26, r0
    3d02:	0b 01       	movw	r0, r22
    3d04:	b9 01       	movw	r22, r18
    3d06:	90 01       	movw	r18, r0
    3d08:	0c 01       	movw	r0, r24
    3d0a:	ca 01       	movw	r24, r20
    3d0c:	a0 01       	movw	r20, r0
    3d0e:	11 24       	eor	r1, r1
    3d10:	ff 27       	eor	r31, r31
    3d12:	59 1b       	sub	r21, r25
    3d14:	99 f0       	breq	.+38     	; 0x3d3c <__addsf3x+0x60>
    3d16:	59 3f       	cpi	r21, 0xF9	; 249
    3d18:	50 f4       	brcc	.+20     	; 0x3d2e <__addsf3x+0x52>
    3d1a:	50 3e       	cpi	r21, 0xE0	; 224
    3d1c:	68 f1       	brcs	.+90     	; 0x3d78 <__addsf3x+0x9c>
    3d1e:	1a 16       	cp	r1, r26
    3d20:	f0 40       	sbci	r31, 0x00	; 0
    3d22:	a2 2f       	mov	r26, r18
    3d24:	23 2f       	mov	r18, r19
    3d26:	34 2f       	mov	r19, r20
    3d28:	44 27       	eor	r20, r20
    3d2a:	58 5f       	subi	r21, 0xF8	; 248
    3d2c:	f3 cf       	rjmp	.-26     	; 0x3d14 <__addsf3x+0x38>
    3d2e:	46 95       	lsr	r20
    3d30:	37 95       	ror	r19
    3d32:	27 95       	ror	r18
    3d34:	a7 95       	ror	r26
    3d36:	f0 40       	sbci	r31, 0x00	; 0
    3d38:	53 95       	inc	r21
    3d3a:	c9 f7       	brne	.-14     	; 0x3d2e <__addsf3x+0x52>
    3d3c:	7e f4       	brtc	.+30     	; 0x3d5c <__addsf3x+0x80>
    3d3e:	1f 16       	cp	r1, r31
    3d40:	ba 0b       	sbc	r27, r26
    3d42:	62 0b       	sbc	r22, r18
    3d44:	73 0b       	sbc	r23, r19
    3d46:	84 0b       	sbc	r24, r20
    3d48:	ba f0       	brmi	.+46     	; 0x3d78 <__addsf3x+0x9c>
    3d4a:	91 50       	subi	r25, 0x01	; 1
    3d4c:	a1 f0       	breq	.+40     	; 0x3d76 <__addsf3x+0x9a>
    3d4e:	ff 0f       	add	r31, r31
    3d50:	bb 1f       	adc	r27, r27
    3d52:	66 1f       	adc	r22, r22
    3d54:	77 1f       	adc	r23, r23
    3d56:	88 1f       	adc	r24, r24
    3d58:	c2 f7       	brpl	.-16     	; 0x3d4a <__addsf3x+0x6e>
    3d5a:	0e c0       	rjmp	.+28     	; 0x3d78 <__addsf3x+0x9c>
    3d5c:	ba 0f       	add	r27, r26
    3d5e:	62 1f       	adc	r22, r18
    3d60:	73 1f       	adc	r23, r19
    3d62:	84 1f       	adc	r24, r20
    3d64:	48 f4       	brcc	.+18     	; 0x3d78 <__addsf3x+0x9c>
    3d66:	87 95       	ror	r24
    3d68:	77 95       	ror	r23
    3d6a:	67 95       	ror	r22
    3d6c:	b7 95       	ror	r27
    3d6e:	f7 95       	ror	r31
    3d70:	9e 3f       	cpi	r25, 0xFE	; 254
    3d72:	08 f0       	brcs	.+2      	; 0x3d76 <__addsf3x+0x9a>
    3d74:	b0 cf       	rjmp	.-160    	; 0x3cd6 <__addsf3+0x28>
    3d76:	93 95       	inc	r25
    3d78:	88 0f       	add	r24, r24
    3d7a:	08 f0       	brcs	.+2      	; 0x3d7e <__addsf3x+0xa2>
    3d7c:	99 27       	eor	r25, r25
    3d7e:	ee 0f       	add	r30, r30
    3d80:	97 95       	ror	r25
    3d82:	87 95       	ror	r24
    3d84:	08 95       	ret

00003d86 <__cmpsf2>:
    3d86:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__fp_cmp>
    3d8a:	08 f4       	brcc	.+2      	; 0x3d8e <__cmpsf2+0x8>
    3d8c:	81 e0       	ldi	r24, 0x01	; 1
    3d8e:	08 95       	ret

00003d90 <__divsf3>:
    3d90:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__divsf3x>
    3d94:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__fp_round>
    3d98:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__fp_pscB>
    3d9c:	58 f0       	brcs	.+22     	; 0x3db4 <__divsf3+0x24>
    3d9e:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__fp_pscA>
    3da2:	40 f0       	brcs	.+16     	; 0x3db4 <__divsf3+0x24>
    3da4:	29 f4       	brne	.+10     	; 0x3db0 <__divsf3+0x20>
    3da6:	5f 3f       	cpi	r21, 0xFF	; 255
    3da8:	29 f0       	breq	.+10     	; 0x3db4 <__divsf3+0x24>
    3daa:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__fp_inf>
    3dae:	51 11       	cpse	r21, r1
    3db0:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <__fp_szero>
    3db4:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__fp_nan>

00003db8 <__divsf3x>:
    3db8:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <__fp_split3>
    3dbc:	68 f3       	brcs	.-38     	; 0x3d98 <__divsf3+0x8>

00003dbe <__divsf3_pse>:
    3dbe:	99 23       	and	r25, r25
    3dc0:	b1 f3       	breq	.-20     	; 0x3dae <__divsf3+0x1e>
    3dc2:	55 23       	and	r21, r21
    3dc4:	91 f3       	breq	.-28     	; 0x3daa <__divsf3+0x1a>
    3dc6:	95 1b       	sub	r25, r21
    3dc8:	55 0b       	sbc	r21, r21
    3dca:	bb 27       	eor	r27, r27
    3dcc:	aa 27       	eor	r26, r26
    3dce:	62 17       	cp	r22, r18
    3dd0:	73 07       	cpc	r23, r19
    3dd2:	84 07       	cpc	r24, r20
    3dd4:	38 f0       	brcs	.+14     	; 0x3de4 <__divsf3_pse+0x26>
    3dd6:	9f 5f       	subi	r25, 0xFF	; 255
    3dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    3dda:	22 0f       	add	r18, r18
    3ddc:	33 1f       	adc	r19, r19
    3dde:	44 1f       	adc	r20, r20
    3de0:	aa 1f       	adc	r26, r26
    3de2:	a9 f3       	breq	.-22     	; 0x3dce <__divsf3_pse+0x10>
    3de4:	35 d0       	rcall	.+106    	; 0x3e50 <__divsf3_pse+0x92>
    3de6:	0e 2e       	mov	r0, r30
    3de8:	3a f0       	brmi	.+14     	; 0x3df8 <__divsf3_pse+0x3a>
    3dea:	e0 e8       	ldi	r30, 0x80	; 128
    3dec:	32 d0       	rcall	.+100    	; 0x3e52 <__divsf3_pse+0x94>
    3dee:	91 50       	subi	r25, 0x01	; 1
    3df0:	50 40       	sbci	r21, 0x00	; 0
    3df2:	e6 95       	lsr	r30
    3df4:	00 1c       	adc	r0, r0
    3df6:	ca f7       	brpl	.-14     	; 0x3dea <__divsf3_pse+0x2c>
    3df8:	2b d0       	rcall	.+86     	; 0x3e50 <__divsf3_pse+0x92>
    3dfa:	fe 2f       	mov	r31, r30
    3dfc:	29 d0       	rcall	.+82     	; 0x3e50 <__divsf3_pse+0x92>
    3dfe:	66 0f       	add	r22, r22
    3e00:	77 1f       	adc	r23, r23
    3e02:	88 1f       	adc	r24, r24
    3e04:	bb 1f       	adc	r27, r27
    3e06:	26 17       	cp	r18, r22
    3e08:	37 07       	cpc	r19, r23
    3e0a:	48 07       	cpc	r20, r24
    3e0c:	ab 07       	cpc	r26, r27
    3e0e:	b0 e8       	ldi	r27, 0x80	; 128
    3e10:	09 f0       	breq	.+2      	; 0x3e14 <__divsf3_pse+0x56>
    3e12:	bb 0b       	sbc	r27, r27
    3e14:	80 2d       	mov	r24, r0
    3e16:	bf 01       	movw	r22, r30
    3e18:	ff 27       	eor	r31, r31
    3e1a:	93 58       	subi	r25, 0x83	; 131
    3e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1e:	3a f0       	brmi	.+14     	; 0x3e2e <__divsf3_pse+0x70>
    3e20:	9e 3f       	cpi	r25, 0xFE	; 254
    3e22:	51 05       	cpc	r21, r1
    3e24:	78 f0       	brcs	.+30     	; 0x3e44 <__divsf3_pse+0x86>
    3e26:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__fp_inf>
    3e2a:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <__fp_szero>
    3e2e:	5f 3f       	cpi	r21, 0xFF	; 255
    3e30:	e4 f3       	brlt	.-8      	; 0x3e2a <__divsf3_pse+0x6c>
    3e32:	98 3e       	cpi	r25, 0xE8	; 232
    3e34:	d4 f3       	brlt	.-12     	; 0x3e2a <__divsf3_pse+0x6c>
    3e36:	86 95       	lsr	r24
    3e38:	77 95       	ror	r23
    3e3a:	67 95       	ror	r22
    3e3c:	b7 95       	ror	r27
    3e3e:	f7 95       	ror	r31
    3e40:	9f 5f       	subi	r25, 0xFF	; 255
    3e42:	c9 f7       	brne	.-14     	; 0x3e36 <__divsf3_pse+0x78>
    3e44:	88 0f       	add	r24, r24
    3e46:	91 1d       	adc	r25, r1
    3e48:	96 95       	lsr	r25
    3e4a:	87 95       	ror	r24
    3e4c:	97 f9       	bld	r25, 7
    3e4e:	08 95       	ret
    3e50:	e1 e0       	ldi	r30, 0x01	; 1
    3e52:	66 0f       	add	r22, r22
    3e54:	77 1f       	adc	r23, r23
    3e56:	88 1f       	adc	r24, r24
    3e58:	bb 1f       	adc	r27, r27
    3e5a:	62 17       	cp	r22, r18
    3e5c:	73 07       	cpc	r23, r19
    3e5e:	84 07       	cpc	r24, r20
    3e60:	ba 07       	cpc	r27, r26
    3e62:	20 f0       	brcs	.+8      	; 0x3e6c <__divsf3_pse+0xae>
    3e64:	62 1b       	sub	r22, r18
    3e66:	73 0b       	sbc	r23, r19
    3e68:	84 0b       	sbc	r24, r20
    3e6a:	ba 0b       	sbc	r27, r26
    3e6c:	ee 1f       	adc	r30, r30
    3e6e:	88 f7       	brcc	.-30     	; 0x3e52 <__divsf3_pse+0x94>
    3e70:	e0 95       	com	r30
    3e72:	08 95       	ret

00003e74 <__fixsfsi>:
    3e74:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <__fixunssfsi>
    3e78:	68 94       	set
    3e7a:	b1 11       	cpse	r27, r1
    3e7c:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <__fp_szero>
    3e80:	08 95       	ret

00003e82 <__fixunssfsi>:
    3e82:	0e 94 01 20 	call	0x4002	; 0x4002 <__fp_splitA>
    3e86:	88 f0       	brcs	.+34     	; 0x3eaa <__fixunssfsi+0x28>
    3e88:	9f 57       	subi	r25, 0x7F	; 127
    3e8a:	98 f0       	brcs	.+38     	; 0x3eb2 <__fixunssfsi+0x30>
    3e8c:	b9 2f       	mov	r27, r25
    3e8e:	99 27       	eor	r25, r25
    3e90:	b7 51       	subi	r27, 0x17	; 23
    3e92:	b0 f0       	brcs	.+44     	; 0x3ec0 <__fixunssfsi+0x3e>
    3e94:	e1 f0       	breq	.+56     	; 0x3ece <__fixunssfsi+0x4c>
    3e96:	66 0f       	add	r22, r22
    3e98:	77 1f       	adc	r23, r23
    3e9a:	88 1f       	adc	r24, r24
    3e9c:	99 1f       	adc	r25, r25
    3e9e:	1a f0       	brmi	.+6      	; 0x3ea6 <__fixunssfsi+0x24>
    3ea0:	ba 95       	dec	r27
    3ea2:	c9 f7       	brne	.-14     	; 0x3e96 <__fixunssfsi+0x14>
    3ea4:	14 c0       	rjmp	.+40     	; 0x3ece <__fixunssfsi+0x4c>
    3ea6:	b1 30       	cpi	r27, 0x01	; 1
    3ea8:	91 f0       	breq	.+36     	; 0x3ece <__fixunssfsi+0x4c>
    3eaa:	0e 94 1b 20 	call	0x4036	; 0x4036 <__fp_zero>
    3eae:	b1 e0       	ldi	r27, 0x01	; 1
    3eb0:	08 95       	ret
    3eb2:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__fp_zero>
    3eb6:	67 2f       	mov	r22, r23
    3eb8:	78 2f       	mov	r23, r24
    3eba:	88 27       	eor	r24, r24
    3ebc:	b8 5f       	subi	r27, 0xF8	; 248
    3ebe:	39 f0       	breq	.+14     	; 0x3ece <__fixunssfsi+0x4c>
    3ec0:	b9 3f       	cpi	r27, 0xF9	; 249
    3ec2:	cc f3       	brlt	.-14     	; 0x3eb6 <__fixunssfsi+0x34>
    3ec4:	86 95       	lsr	r24
    3ec6:	77 95       	ror	r23
    3ec8:	67 95       	ror	r22
    3eca:	b3 95       	inc	r27
    3ecc:	d9 f7       	brne	.-10     	; 0x3ec4 <__fixunssfsi+0x42>
    3ece:	3e f4       	brtc	.+14     	; 0x3ede <__fixunssfsi+0x5c>
    3ed0:	90 95       	com	r25
    3ed2:	80 95       	com	r24
    3ed4:	70 95       	com	r23
    3ed6:	61 95       	neg	r22
    3ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eda:	8f 4f       	sbci	r24, 0xFF	; 255
    3edc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ede:	08 95       	ret

00003ee0 <__floatunsisf>:
    3ee0:	e8 94       	clt
    3ee2:	09 c0       	rjmp	.+18     	; 0x3ef6 <__floatsisf+0x12>

00003ee4 <__floatsisf>:
    3ee4:	97 fb       	bst	r25, 7
    3ee6:	3e f4       	brtc	.+14     	; 0x3ef6 <__floatsisf+0x12>
    3ee8:	90 95       	com	r25
    3eea:	80 95       	com	r24
    3eec:	70 95       	com	r23
    3eee:	61 95       	neg	r22
    3ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef6:	99 23       	and	r25, r25
    3ef8:	a9 f0       	breq	.+42     	; 0x3f24 <__floatsisf+0x40>
    3efa:	f9 2f       	mov	r31, r25
    3efc:	96 e9       	ldi	r25, 0x96	; 150
    3efe:	bb 27       	eor	r27, r27
    3f00:	93 95       	inc	r25
    3f02:	f6 95       	lsr	r31
    3f04:	87 95       	ror	r24
    3f06:	77 95       	ror	r23
    3f08:	67 95       	ror	r22
    3f0a:	b7 95       	ror	r27
    3f0c:	f1 11       	cpse	r31, r1
    3f0e:	f8 cf       	rjmp	.-16     	; 0x3f00 <__floatsisf+0x1c>
    3f10:	fa f4       	brpl	.+62     	; 0x3f50 <__floatsisf+0x6c>
    3f12:	bb 0f       	add	r27, r27
    3f14:	11 f4       	brne	.+4      	; 0x3f1a <__floatsisf+0x36>
    3f16:	60 ff       	sbrs	r22, 0
    3f18:	1b c0       	rjmp	.+54     	; 0x3f50 <__floatsisf+0x6c>
    3f1a:	6f 5f       	subi	r22, 0xFF	; 255
    3f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f20:	9f 4f       	sbci	r25, 0xFF	; 255
    3f22:	16 c0       	rjmp	.+44     	; 0x3f50 <__floatsisf+0x6c>
    3f24:	88 23       	and	r24, r24
    3f26:	11 f0       	breq	.+4      	; 0x3f2c <__floatsisf+0x48>
    3f28:	96 e9       	ldi	r25, 0x96	; 150
    3f2a:	11 c0       	rjmp	.+34     	; 0x3f4e <__floatsisf+0x6a>
    3f2c:	77 23       	and	r23, r23
    3f2e:	21 f0       	breq	.+8      	; 0x3f38 <__floatsisf+0x54>
    3f30:	9e e8       	ldi	r25, 0x8E	; 142
    3f32:	87 2f       	mov	r24, r23
    3f34:	76 2f       	mov	r23, r22
    3f36:	05 c0       	rjmp	.+10     	; 0x3f42 <__floatsisf+0x5e>
    3f38:	66 23       	and	r22, r22
    3f3a:	71 f0       	breq	.+28     	; 0x3f58 <__floatsisf+0x74>
    3f3c:	96 e8       	ldi	r25, 0x86	; 134
    3f3e:	86 2f       	mov	r24, r22
    3f40:	70 e0       	ldi	r23, 0x00	; 0
    3f42:	60 e0       	ldi	r22, 0x00	; 0
    3f44:	2a f0       	brmi	.+10     	; 0x3f50 <__floatsisf+0x6c>
    3f46:	9a 95       	dec	r25
    3f48:	66 0f       	add	r22, r22
    3f4a:	77 1f       	adc	r23, r23
    3f4c:	88 1f       	adc	r24, r24
    3f4e:	da f7       	brpl	.-10     	; 0x3f46 <__floatsisf+0x62>
    3f50:	88 0f       	add	r24, r24
    3f52:	96 95       	lsr	r25
    3f54:	87 95       	ror	r24
    3f56:	97 f9       	bld	r25, 7
    3f58:	08 95       	ret

00003f5a <__fp_cmp>:
    3f5a:	99 0f       	add	r25, r25
    3f5c:	00 08       	sbc	r0, r0
    3f5e:	55 0f       	add	r21, r21
    3f60:	aa 0b       	sbc	r26, r26
    3f62:	e0 e8       	ldi	r30, 0x80	; 128
    3f64:	fe ef       	ldi	r31, 0xFE	; 254
    3f66:	16 16       	cp	r1, r22
    3f68:	17 06       	cpc	r1, r23
    3f6a:	e8 07       	cpc	r30, r24
    3f6c:	f9 07       	cpc	r31, r25
    3f6e:	c0 f0       	brcs	.+48     	; 0x3fa0 <__fp_cmp+0x46>
    3f70:	12 16       	cp	r1, r18
    3f72:	13 06       	cpc	r1, r19
    3f74:	e4 07       	cpc	r30, r20
    3f76:	f5 07       	cpc	r31, r21
    3f78:	98 f0       	brcs	.+38     	; 0x3fa0 <__fp_cmp+0x46>
    3f7a:	62 1b       	sub	r22, r18
    3f7c:	73 0b       	sbc	r23, r19
    3f7e:	84 0b       	sbc	r24, r20
    3f80:	95 0b       	sbc	r25, r21
    3f82:	39 f4       	brne	.+14     	; 0x3f92 <__fp_cmp+0x38>
    3f84:	0a 26       	eor	r0, r26
    3f86:	61 f0       	breq	.+24     	; 0x3fa0 <__fp_cmp+0x46>
    3f88:	23 2b       	or	r18, r19
    3f8a:	24 2b       	or	r18, r20
    3f8c:	25 2b       	or	r18, r21
    3f8e:	21 f4       	brne	.+8      	; 0x3f98 <__fp_cmp+0x3e>
    3f90:	08 95       	ret
    3f92:	0a 26       	eor	r0, r26
    3f94:	09 f4       	brne	.+2      	; 0x3f98 <__fp_cmp+0x3e>
    3f96:	a1 40       	sbci	r26, 0x01	; 1
    3f98:	a6 95       	lsr	r26
    3f9a:	8f ef       	ldi	r24, 0xFF	; 255
    3f9c:	81 1d       	adc	r24, r1
    3f9e:	81 1d       	adc	r24, r1
    3fa0:	08 95       	ret

00003fa2 <__fp_inf>:
    3fa2:	97 f9       	bld	r25, 7
    3fa4:	9f 67       	ori	r25, 0x7F	; 127
    3fa6:	80 e8       	ldi	r24, 0x80	; 128
    3fa8:	70 e0       	ldi	r23, 0x00	; 0
    3faa:	60 e0       	ldi	r22, 0x00	; 0
    3fac:	08 95       	ret

00003fae <__fp_nan>:
    3fae:	9f ef       	ldi	r25, 0xFF	; 255
    3fb0:	80 ec       	ldi	r24, 0xC0	; 192
    3fb2:	08 95       	ret

00003fb4 <__fp_pscA>:
    3fb4:	00 24       	eor	r0, r0
    3fb6:	0a 94       	dec	r0
    3fb8:	16 16       	cp	r1, r22
    3fba:	17 06       	cpc	r1, r23
    3fbc:	18 06       	cpc	r1, r24
    3fbe:	09 06       	cpc	r0, r25
    3fc0:	08 95       	ret

00003fc2 <__fp_pscB>:
    3fc2:	00 24       	eor	r0, r0
    3fc4:	0a 94       	dec	r0
    3fc6:	12 16       	cp	r1, r18
    3fc8:	13 06       	cpc	r1, r19
    3fca:	14 06       	cpc	r1, r20
    3fcc:	05 06       	cpc	r0, r21
    3fce:	08 95       	ret

00003fd0 <__fp_round>:
    3fd0:	09 2e       	mov	r0, r25
    3fd2:	03 94       	inc	r0
    3fd4:	00 0c       	add	r0, r0
    3fd6:	11 f4       	brne	.+4      	; 0x3fdc <__fp_round+0xc>
    3fd8:	88 23       	and	r24, r24
    3fda:	52 f0       	brmi	.+20     	; 0x3ff0 <__fp_round+0x20>
    3fdc:	bb 0f       	add	r27, r27
    3fde:	40 f4       	brcc	.+16     	; 0x3ff0 <__fp_round+0x20>
    3fe0:	bf 2b       	or	r27, r31
    3fe2:	11 f4       	brne	.+4      	; 0x3fe8 <__fp_round+0x18>
    3fe4:	60 ff       	sbrs	r22, 0
    3fe6:	04 c0       	rjmp	.+8      	; 0x3ff0 <__fp_round+0x20>
    3fe8:	6f 5f       	subi	r22, 0xFF	; 255
    3fea:	7f 4f       	sbci	r23, 0xFF	; 255
    3fec:	8f 4f       	sbci	r24, 0xFF	; 255
    3fee:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff0:	08 95       	ret

00003ff2 <__fp_split3>:
    3ff2:	57 fd       	sbrc	r21, 7
    3ff4:	90 58       	subi	r25, 0x80	; 128
    3ff6:	44 0f       	add	r20, r20
    3ff8:	55 1f       	adc	r21, r21
    3ffa:	59 f0       	breq	.+22     	; 0x4012 <__fp_splitA+0x10>
    3ffc:	5f 3f       	cpi	r21, 0xFF	; 255
    3ffe:	71 f0       	breq	.+28     	; 0x401c <__fp_splitA+0x1a>
    4000:	47 95       	ror	r20

00004002 <__fp_splitA>:
    4002:	88 0f       	add	r24, r24
    4004:	97 fb       	bst	r25, 7
    4006:	99 1f       	adc	r25, r25
    4008:	61 f0       	breq	.+24     	; 0x4022 <__fp_splitA+0x20>
    400a:	9f 3f       	cpi	r25, 0xFF	; 255
    400c:	79 f0       	breq	.+30     	; 0x402c <__fp_splitA+0x2a>
    400e:	87 95       	ror	r24
    4010:	08 95       	ret
    4012:	12 16       	cp	r1, r18
    4014:	13 06       	cpc	r1, r19
    4016:	14 06       	cpc	r1, r20
    4018:	55 1f       	adc	r21, r21
    401a:	f2 cf       	rjmp	.-28     	; 0x4000 <__stack+0x1>
    401c:	46 95       	lsr	r20
    401e:	f1 df       	rcall	.-30     	; 0x4002 <__fp_splitA>
    4020:	08 c0       	rjmp	.+16     	; 0x4032 <__fp_splitA+0x30>
    4022:	16 16       	cp	r1, r22
    4024:	17 06       	cpc	r1, r23
    4026:	18 06       	cpc	r1, r24
    4028:	99 1f       	adc	r25, r25
    402a:	f1 cf       	rjmp	.-30     	; 0x400e <__fp_splitA+0xc>
    402c:	86 95       	lsr	r24
    402e:	71 05       	cpc	r23, r1
    4030:	61 05       	cpc	r22, r1
    4032:	08 94       	sec
    4034:	08 95       	ret

00004036 <__fp_zero>:
    4036:	e8 94       	clt

00004038 <__fp_szero>:
    4038:	bb 27       	eor	r27, r27
    403a:	66 27       	eor	r22, r22
    403c:	77 27       	eor	r23, r23
    403e:	cb 01       	movw	r24, r22
    4040:	97 f9       	bld	r25, 7
    4042:	08 95       	ret

00004044 <__gesf2>:
    4044:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__fp_cmp>
    4048:	08 f4       	brcc	.+2      	; 0x404c <__gesf2+0x8>
    404a:	8f ef       	ldi	r24, 0xFF	; 255
    404c:	08 95       	ret

0000404e <__mulsf3>:
    404e:	0e 94 3a 20 	call	0x4074	; 0x4074 <__mulsf3x>
    4052:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__fp_round>
    4056:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__fp_pscA>
    405a:	38 f0       	brcs	.+14     	; 0x406a <__mulsf3+0x1c>
    405c:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__fp_pscB>
    4060:	20 f0       	brcs	.+8      	; 0x406a <__mulsf3+0x1c>
    4062:	95 23       	and	r25, r21
    4064:	11 f0       	breq	.+4      	; 0x406a <__mulsf3+0x1c>
    4066:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__fp_inf>
    406a:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__fp_nan>
    406e:	11 24       	eor	r1, r1
    4070:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <__fp_szero>

00004074 <__mulsf3x>:
    4074:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <__fp_split3>
    4078:	70 f3       	brcs	.-36     	; 0x4056 <__mulsf3+0x8>

0000407a <__mulsf3_pse>:
    407a:	95 9f       	mul	r25, r21
    407c:	c1 f3       	breq	.-16     	; 0x406e <__mulsf3+0x20>
    407e:	95 0f       	add	r25, r21
    4080:	50 e0       	ldi	r21, 0x00	; 0
    4082:	55 1f       	adc	r21, r21
    4084:	62 9f       	mul	r22, r18
    4086:	f0 01       	movw	r30, r0
    4088:	72 9f       	mul	r23, r18
    408a:	bb 27       	eor	r27, r27
    408c:	f0 0d       	add	r31, r0
    408e:	b1 1d       	adc	r27, r1
    4090:	63 9f       	mul	r22, r19
    4092:	aa 27       	eor	r26, r26
    4094:	f0 0d       	add	r31, r0
    4096:	b1 1d       	adc	r27, r1
    4098:	aa 1f       	adc	r26, r26
    409a:	64 9f       	mul	r22, r20
    409c:	66 27       	eor	r22, r22
    409e:	b0 0d       	add	r27, r0
    40a0:	a1 1d       	adc	r26, r1
    40a2:	66 1f       	adc	r22, r22
    40a4:	82 9f       	mul	r24, r18
    40a6:	22 27       	eor	r18, r18
    40a8:	b0 0d       	add	r27, r0
    40aa:	a1 1d       	adc	r26, r1
    40ac:	62 1f       	adc	r22, r18
    40ae:	73 9f       	mul	r23, r19
    40b0:	b0 0d       	add	r27, r0
    40b2:	a1 1d       	adc	r26, r1
    40b4:	62 1f       	adc	r22, r18
    40b6:	83 9f       	mul	r24, r19
    40b8:	a0 0d       	add	r26, r0
    40ba:	61 1d       	adc	r22, r1
    40bc:	22 1f       	adc	r18, r18
    40be:	74 9f       	mul	r23, r20
    40c0:	33 27       	eor	r19, r19
    40c2:	a0 0d       	add	r26, r0
    40c4:	61 1d       	adc	r22, r1
    40c6:	23 1f       	adc	r18, r19
    40c8:	84 9f       	mul	r24, r20
    40ca:	60 0d       	add	r22, r0
    40cc:	21 1d       	adc	r18, r1
    40ce:	82 2f       	mov	r24, r18
    40d0:	76 2f       	mov	r23, r22
    40d2:	6a 2f       	mov	r22, r26
    40d4:	11 24       	eor	r1, r1
    40d6:	9f 57       	subi	r25, 0x7F	; 127
    40d8:	50 40       	sbci	r21, 0x00	; 0
    40da:	9a f0       	brmi	.+38     	; 0x4102 <__mulsf3_pse+0x88>
    40dc:	f1 f0       	breq	.+60     	; 0x411a <__mulsf3_pse+0xa0>
    40de:	88 23       	and	r24, r24
    40e0:	4a f0       	brmi	.+18     	; 0x40f4 <__mulsf3_pse+0x7a>
    40e2:	ee 0f       	add	r30, r30
    40e4:	ff 1f       	adc	r31, r31
    40e6:	bb 1f       	adc	r27, r27
    40e8:	66 1f       	adc	r22, r22
    40ea:	77 1f       	adc	r23, r23
    40ec:	88 1f       	adc	r24, r24
    40ee:	91 50       	subi	r25, 0x01	; 1
    40f0:	50 40       	sbci	r21, 0x00	; 0
    40f2:	a9 f7       	brne	.-22     	; 0x40de <__mulsf3_pse+0x64>
    40f4:	9e 3f       	cpi	r25, 0xFE	; 254
    40f6:	51 05       	cpc	r21, r1
    40f8:	80 f0       	brcs	.+32     	; 0x411a <__mulsf3_pse+0xa0>
    40fa:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__fp_inf>
    40fe:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <__fp_szero>
    4102:	5f 3f       	cpi	r21, 0xFF	; 255
    4104:	e4 f3       	brlt	.-8      	; 0x40fe <__mulsf3_pse+0x84>
    4106:	98 3e       	cpi	r25, 0xE8	; 232
    4108:	d4 f3       	brlt	.-12     	; 0x40fe <__mulsf3_pse+0x84>
    410a:	86 95       	lsr	r24
    410c:	77 95       	ror	r23
    410e:	67 95       	ror	r22
    4110:	b7 95       	ror	r27
    4112:	f7 95       	ror	r31
    4114:	e7 95       	ror	r30
    4116:	9f 5f       	subi	r25, 0xFF	; 255
    4118:	c1 f7       	brne	.-16     	; 0x410a <__mulsf3_pse+0x90>
    411a:	fe 2b       	or	r31, r30
    411c:	88 0f       	add	r24, r24
    411e:	91 1d       	adc	r25, r1
    4120:	96 95       	lsr	r25
    4122:	87 95       	ror	r24
    4124:	97 f9       	bld	r25, 7
    4126:	08 95       	ret

00004128 <vfprintf>:
    4128:	2f 92       	push	r2
    412a:	3f 92       	push	r3
    412c:	4f 92       	push	r4
    412e:	5f 92       	push	r5
    4130:	6f 92       	push	r6
    4132:	7f 92       	push	r7
    4134:	8f 92       	push	r8
    4136:	9f 92       	push	r9
    4138:	af 92       	push	r10
    413a:	bf 92       	push	r11
    413c:	cf 92       	push	r12
    413e:	df 92       	push	r13
    4140:	ef 92       	push	r14
    4142:	ff 92       	push	r15
    4144:	0f 93       	push	r16
    4146:	1f 93       	push	r17
    4148:	cf 93       	push	r28
    414a:	df 93       	push	r29
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
    4150:	60 97       	sbiw	r28, 0x10	; 16
    4152:	cd bf       	out	0x3d, r28	; 61
    4154:	de bf       	out	0x3e, r29	; 62
    4156:	7c 01       	movw	r14, r24
    4158:	1b 01       	movw	r2, r22
    415a:	6a 01       	movw	r12, r20
    415c:	fc 01       	movw	r30, r24
    415e:	16 82       	std	Z+6, r1	; 0x06
    4160:	17 82       	std	Z+7, r1	; 0x07
    4162:	83 81       	ldd	r24, Z+3	; 0x03
    4164:	81 ff       	sbrs	r24, 1
    4166:	44 c3       	rjmp	.+1672   	; 0x47f0 <vfprintf+0x6c8>
    4168:	9e 01       	movw	r18, r28
    416a:	2f 5f       	subi	r18, 0xFF	; 255
    416c:	3f 4f       	sbci	r19, 0xFF	; 255
    416e:	39 01       	movw	r6, r18
    4170:	f7 01       	movw	r30, r14
    4172:	93 81       	ldd	r25, Z+3	; 0x03
    4174:	f1 01       	movw	r30, r2
    4176:	93 fd       	sbrc	r25, 3
    4178:	85 91       	lpm	r24, Z+
    417a:	93 ff       	sbrs	r25, 3
    417c:	81 91       	ld	r24, Z+
    417e:	1f 01       	movw	r2, r30
    4180:	88 23       	and	r24, r24
    4182:	09 f4       	brne	.+2      	; 0x4186 <vfprintf+0x5e>
    4184:	31 c3       	rjmp	.+1634   	; 0x47e8 <vfprintf+0x6c0>
    4186:	85 32       	cpi	r24, 0x25	; 37
    4188:	39 f4       	brne	.+14     	; 0x4198 <vfprintf+0x70>
    418a:	93 fd       	sbrc	r25, 3
    418c:	85 91       	lpm	r24, Z+
    418e:	93 ff       	sbrs	r25, 3
    4190:	81 91       	ld	r24, Z+
    4192:	1f 01       	movw	r2, r30
    4194:	85 32       	cpi	r24, 0x25	; 37
    4196:	39 f4       	brne	.+14     	; 0x41a6 <vfprintf+0x7e>
    4198:	b7 01       	movw	r22, r14
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    41a0:	56 01       	movw	r10, r12
    41a2:	65 01       	movw	r12, r10
    41a4:	e5 cf       	rjmp	.-54     	; 0x4170 <vfprintf+0x48>
    41a6:	10 e0       	ldi	r17, 0x00	; 0
    41a8:	51 2c       	mov	r5, r1
    41aa:	91 2c       	mov	r9, r1
    41ac:	ff e1       	ldi	r31, 0x1F	; 31
    41ae:	f9 15       	cp	r31, r9
    41b0:	d8 f0       	brcs	.+54     	; 0x41e8 <vfprintf+0xc0>
    41b2:	8b 32       	cpi	r24, 0x2B	; 43
    41b4:	79 f0       	breq	.+30     	; 0x41d4 <vfprintf+0xac>
    41b6:	38 f4       	brcc	.+14     	; 0x41c6 <vfprintf+0x9e>
    41b8:	80 32       	cpi	r24, 0x20	; 32
    41ba:	79 f0       	breq	.+30     	; 0x41da <vfprintf+0xb2>
    41bc:	83 32       	cpi	r24, 0x23	; 35
    41be:	a1 f4       	brne	.+40     	; 0x41e8 <vfprintf+0xc0>
    41c0:	f9 2d       	mov	r31, r9
    41c2:	f0 61       	ori	r31, 0x10	; 16
    41c4:	2e c0       	rjmp	.+92     	; 0x4222 <vfprintf+0xfa>
    41c6:	8d 32       	cpi	r24, 0x2D	; 45
    41c8:	61 f0       	breq	.+24     	; 0x41e2 <vfprintf+0xba>
    41ca:	80 33       	cpi	r24, 0x30	; 48
    41cc:	69 f4       	brne	.+26     	; 0x41e8 <vfprintf+0xc0>
    41ce:	29 2d       	mov	r18, r9
    41d0:	21 60       	ori	r18, 0x01	; 1
    41d2:	2d c0       	rjmp	.+90     	; 0x422e <vfprintf+0x106>
    41d4:	39 2d       	mov	r19, r9
    41d6:	32 60       	ori	r19, 0x02	; 2
    41d8:	93 2e       	mov	r9, r19
    41da:	89 2d       	mov	r24, r9
    41dc:	84 60       	ori	r24, 0x04	; 4
    41de:	98 2e       	mov	r9, r24
    41e0:	2a c0       	rjmp	.+84     	; 0x4236 <vfprintf+0x10e>
    41e2:	e9 2d       	mov	r30, r9
    41e4:	e8 60       	ori	r30, 0x08	; 8
    41e6:	15 c0       	rjmp	.+42     	; 0x4212 <vfprintf+0xea>
    41e8:	97 fc       	sbrc	r9, 7
    41ea:	2d c0       	rjmp	.+90     	; 0x4246 <vfprintf+0x11e>
    41ec:	20 ed       	ldi	r18, 0xD0	; 208
    41ee:	28 0f       	add	r18, r24
    41f0:	2a 30       	cpi	r18, 0x0A	; 10
    41f2:	88 f4       	brcc	.+34     	; 0x4216 <vfprintf+0xee>
    41f4:	96 fe       	sbrs	r9, 6
    41f6:	06 c0       	rjmp	.+12     	; 0x4204 <vfprintf+0xdc>
    41f8:	3a e0       	ldi	r19, 0x0A	; 10
    41fa:	13 9f       	mul	r17, r19
    41fc:	20 0d       	add	r18, r0
    41fe:	11 24       	eor	r1, r1
    4200:	12 2f       	mov	r17, r18
    4202:	19 c0       	rjmp	.+50     	; 0x4236 <vfprintf+0x10e>
    4204:	8a e0       	ldi	r24, 0x0A	; 10
    4206:	58 9e       	mul	r5, r24
    4208:	20 0d       	add	r18, r0
    420a:	11 24       	eor	r1, r1
    420c:	52 2e       	mov	r5, r18
    420e:	e9 2d       	mov	r30, r9
    4210:	e0 62       	ori	r30, 0x20	; 32
    4212:	9e 2e       	mov	r9, r30
    4214:	10 c0       	rjmp	.+32     	; 0x4236 <vfprintf+0x10e>
    4216:	8e 32       	cpi	r24, 0x2E	; 46
    4218:	31 f4       	brne	.+12     	; 0x4226 <vfprintf+0xfe>
    421a:	96 fc       	sbrc	r9, 6
    421c:	e5 c2       	rjmp	.+1482   	; 0x47e8 <vfprintf+0x6c0>
    421e:	f9 2d       	mov	r31, r9
    4220:	f0 64       	ori	r31, 0x40	; 64
    4222:	9f 2e       	mov	r9, r31
    4224:	08 c0       	rjmp	.+16     	; 0x4236 <vfprintf+0x10e>
    4226:	8c 36       	cpi	r24, 0x6C	; 108
    4228:	21 f4       	brne	.+8      	; 0x4232 <vfprintf+0x10a>
    422a:	29 2d       	mov	r18, r9
    422c:	20 68       	ori	r18, 0x80	; 128
    422e:	92 2e       	mov	r9, r18
    4230:	02 c0       	rjmp	.+4      	; 0x4236 <vfprintf+0x10e>
    4232:	88 36       	cpi	r24, 0x68	; 104
    4234:	41 f4       	brne	.+16     	; 0x4246 <vfprintf+0x11e>
    4236:	f1 01       	movw	r30, r2
    4238:	93 fd       	sbrc	r25, 3
    423a:	85 91       	lpm	r24, Z+
    423c:	93 ff       	sbrs	r25, 3
    423e:	81 91       	ld	r24, Z+
    4240:	1f 01       	movw	r2, r30
    4242:	81 11       	cpse	r24, r1
    4244:	b3 cf       	rjmp	.-154    	; 0x41ac <vfprintf+0x84>
    4246:	9b eb       	ldi	r25, 0xBB	; 187
    4248:	98 0f       	add	r25, r24
    424a:	93 30       	cpi	r25, 0x03	; 3
    424c:	20 f4       	brcc	.+8      	; 0x4256 <vfprintf+0x12e>
    424e:	99 2d       	mov	r25, r9
    4250:	90 61       	ori	r25, 0x10	; 16
    4252:	80 5e       	subi	r24, 0xE0	; 224
    4254:	07 c0       	rjmp	.+14     	; 0x4264 <vfprintf+0x13c>
    4256:	9b e9       	ldi	r25, 0x9B	; 155
    4258:	98 0f       	add	r25, r24
    425a:	93 30       	cpi	r25, 0x03	; 3
    425c:	08 f0       	brcs	.+2      	; 0x4260 <vfprintf+0x138>
    425e:	66 c1       	rjmp	.+716    	; 0x452c <vfprintf+0x404>
    4260:	99 2d       	mov	r25, r9
    4262:	9f 7e       	andi	r25, 0xEF	; 239
    4264:	96 ff       	sbrs	r25, 6
    4266:	16 e0       	ldi	r17, 0x06	; 6
    4268:	9f 73       	andi	r25, 0x3F	; 63
    426a:	99 2e       	mov	r9, r25
    426c:	85 36       	cpi	r24, 0x65	; 101
    426e:	19 f4       	brne	.+6      	; 0x4276 <vfprintf+0x14e>
    4270:	90 64       	ori	r25, 0x40	; 64
    4272:	99 2e       	mov	r9, r25
    4274:	08 c0       	rjmp	.+16     	; 0x4286 <vfprintf+0x15e>
    4276:	86 36       	cpi	r24, 0x66	; 102
    4278:	21 f4       	brne	.+8      	; 0x4282 <vfprintf+0x15a>
    427a:	39 2f       	mov	r19, r25
    427c:	30 68       	ori	r19, 0x80	; 128
    427e:	93 2e       	mov	r9, r19
    4280:	02 c0       	rjmp	.+4      	; 0x4286 <vfprintf+0x15e>
    4282:	11 11       	cpse	r17, r1
    4284:	11 50       	subi	r17, 0x01	; 1
    4286:	97 fe       	sbrs	r9, 7
    4288:	07 c0       	rjmp	.+14     	; 0x4298 <vfprintf+0x170>
    428a:	1c 33       	cpi	r17, 0x3C	; 60
    428c:	50 f4       	brcc	.+20     	; 0x42a2 <vfprintf+0x17a>
    428e:	44 24       	eor	r4, r4
    4290:	43 94       	inc	r4
    4292:	41 0e       	add	r4, r17
    4294:	27 e0       	ldi	r18, 0x07	; 7
    4296:	0b c0       	rjmp	.+22     	; 0x42ae <vfprintf+0x186>
    4298:	18 30       	cpi	r17, 0x08	; 8
    429a:	38 f0       	brcs	.+14     	; 0x42aa <vfprintf+0x182>
    429c:	27 e0       	ldi	r18, 0x07	; 7
    429e:	17 e0       	ldi	r17, 0x07	; 7
    42a0:	05 c0       	rjmp	.+10     	; 0x42ac <vfprintf+0x184>
    42a2:	27 e0       	ldi	r18, 0x07	; 7
    42a4:	9c e3       	ldi	r25, 0x3C	; 60
    42a6:	49 2e       	mov	r4, r25
    42a8:	02 c0       	rjmp	.+4      	; 0x42ae <vfprintf+0x186>
    42aa:	21 2f       	mov	r18, r17
    42ac:	41 2c       	mov	r4, r1
    42ae:	56 01       	movw	r10, r12
    42b0:	84 e0       	ldi	r24, 0x04	; 4
    42b2:	a8 0e       	add	r10, r24
    42b4:	b1 1c       	adc	r11, r1
    42b6:	f6 01       	movw	r30, r12
    42b8:	60 81       	ld	r22, Z
    42ba:	71 81       	ldd	r23, Z+1	; 0x01
    42bc:	82 81       	ldd	r24, Z+2	; 0x02
    42be:	93 81       	ldd	r25, Z+3	; 0x03
    42c0:	04 2d       	mov	r16, r4
    42c2:	a3 01       	movw	r20, r6
    42c4:	0e 94 3c 24 	call	0x4878	; 0x4878 <__ftoa_engine>
    42c8:	6c 01       	movw	r12, r24
    42ca:	f9 81       	ldd	r31, Y+1	; 0x01
    42cc:	fc 87       	std	Y+12, r31	; 0x0c
    42ce:	f0 ff       	sbrs	r31, 0
    42d0:	02 c0       	rjmp	.+4      	; 0x42d6 <vfprintf+0x1ae>
    42d2:	f3 ff       	sbrs	r31, 3
    42d4:	06 c0       	rjmp	.+12     	; 0x42e2 <vfprintf+0x1ba>
    42d6:	91 fc       	sbrc	r9, 1
    42d8:	06 c0       	rjmp	.+12     	; 0x42e6 <vfprintf+0x1be>
    42da:	92 fe       	sbrs	r9, 2
    42dc:	06 c0       	rjmp	.+12     	; 0x42ea <vfprintf+0x1c2>
    42de:	00 e2       	ldi	r16, 0x20	; 32
    42e0:	05 c0       	rjmp	.+10     	; 0x42ec <vfprintf+0x1c4>
    42e2:	0d e2       	ldi	r16, 0x2D	; 45
    42e4:	03 c0       	rjmp	.+6      	; 0x42ec <vfprintf+0x1c4>
    42e6:	0b e2       	ldi	r16, 0x2B	; 43
    42e8:	01 c0       	rjmp	.+2      	; 0x42ec <vfprintf+0x1c4>
    42ea:	00 e0       	ldi	r16, 0x00	; 0
    42ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    42ee:	8c 70       	andi	r24, 0x0C	; 12
    42f0:	19 f0       	breq	.+6      	; 0x42f8 <vfprintf+0x1d0>
    42f2:	01 11       	cpse	r16, r1
    42f4:	5a c2       	rjmp	.+1204   	; 0x47aa <vfprintf+0x682>
    42f6:	9b c2       	rjmp	.+1334   	; 0x482e <vfprintf+0x706>
    42f8:	97 fe       	sbrs	r9, 7
    42fa:	10 c0       	rjmp	.+32     	; 0x431c <vfprintf+0x1f4>
    42fc:	4c 0c       	add	r4, r12
    42fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    4300:	f4 ff       	sbrs	r31, 4
    4302:	04 c0       	rjmp	.+8      	; 0x430c <vfprintf+0x1e4>
    4304:	8a 81       	ldd	r24, Y+2	; 0x02
    4306:	81 33       	cpi	r24, 0x31	; 49
    4308:	09 f4       	brne	.+2      	; 0x430c <vfprintf+0x1e4>
    430a:	4a 94       	dec	r4
    430c:	14 14       	cp	r1, r4
    430e:	74 f5       	brge	.+92     	; 0x436c <vfprintf+0x244>
    4310:	28 e0       	ldi	r18, 0x08	; 8
    4312:	24 15       	cp	r18, r4
    4314:	78 f5       	brcc	.+94     	; 0x4374 <vfprintf+0x24c>
    4316:	88 e0       	ldi	r24, 0x08	; 8
    4318:	48 2e       	mov	r4, r24
    431a:	2c c0       	rjmp	.+88     	; 0x4374 <vfprintf+0x24c>
    431c:	96 fc       	sbrc	r9, 6
    431e:	2a c0       	rjmp	.+84     	; 0x4374 <vfprintf+0x24c>
    4320:	81 2f       	mov	r24, r17
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	8c 15       	cp	r24, r12
    4326:	9d 05       	cpc	r25, r13
    4328:	9c f0       	brlt	.+38     	; 0x4350 <vfprintf+0x228>
    432a:	3c ef       	ldi	r19, 0xFC	; 252
    432c:	c3 16       	cp	r12, r19
    432e:	3f ef       	ldi	r19, 0xFF	; 255
    4330:	d3 06       	cpc	r13, r19
    4332:	74 f0       	brlt	.+28     	; 0x4350 <vfprintf+0x228>
    4334:	89 2d       	mov	r24, r9
    4336:	80 68       	ori	r24, 0x80	; 128
    4338:	98 2e       	mov	r9, r24
    433a:	0a c0       	rjmp	.+20     	; 0x4350 <vfprintf+0x228>
    433c:	e2 e0       	ldi	r30, 0x02	; 2
    433e:	f0 e0       	ldi	r31, 0x00	; 0
    4340:	ec 0f       	add	r30, r28
    4342:	fd 1f       	adc	r31, r29
    4344:	e1 0f       	add	r30, r17
    4346:	f1 1d       	adc	r31, r1
    4348:	80 81       	ld	r24, Z
    434a:	80 33       	cpi	r24, 0x30	; 48
    434c:	19 f4       	brne	.+6      	; 0x4354 <vfprintf+0x22c>
    434e:	11 50       	subi	r17, 0x01	; 1
    4350:	11 11       	cpse	r17, r1
    4352:	f4 cf       	rjmp	.-24     	; 0x433c <vfprintf+0x214>
    4354:	97 fe       	sbrs	r9, 7
    4356:	0e c0       	rjmp	.+28     	; 0x4374 <vfprintf+0x24c>
    4358:	44 24       	eor	r4, r4
    435a:	43 94       	inc	r4
    435c:	41 0e       	add	r4, r17
    435e:	81 2f       	mov	r24, r17
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	c8 16       	cp	r12, r24
    4364:	d9 06       	cpc	r13, r25
    4366:	2c f4       	brge	.+10     	; 0x4372 <vfprintf+0x24a>
    4368:	1c 19       	sub	r17, r12
    436a:	04 c0       	rjmp	.+8      	; 0x4374 <vfprintf+0x24c>
    436c:	44 24       	eor	r4, r4
    436e:	43 94       	inc	r4
    4370:	01 c0       	rjmp	.+2      	; 0x4374 <vfprintf+0x24c>
    4372:	10 e0       	ldi	r17, 0x00	; 0
    4374:	97 fe       	sbrs	r9, 7
    4376:	06 c0       	rjmp	.+12     	; 0x4384 <vfprintf+0x25c>
    4378:	1c 14       	cp	r1, r12
    437a:	1d 04       	cpc	r1, r13
    437c:	34 f4       	brge	.+12     	; 0x438a <vfprintf+0x262>
    437e:	c6 01       	movw	r24, r12
    4380:	01 96       	adiw	r24, 0x01	; 1
    4382:	05 c0       	rjmp	.+10     	; 0x438e <vfprintf+0x266>
    4384:	85 e0       	ldi	r24, 0x05	; 5
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	02 c0       	rjmp	.+4      	; 0x438e <vfprintf+0x266>
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	01 11       	cpse	r16, r1
    4390:	01 96       	adiw	r24, 0x01	; 1
    4392:	11 23       	and	r17, r17
    4394:	31 f0       	breq	.+12     	; 0x43a2 <vfprintf+0x27a>
    4396:	21 2f       	mov	r18, r17
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	2f 5f       	subi	r18, 0xFF	; 255
    439c:	3f 4f       	sbci	r19, 0xFF	; 255
    439e:	82 0f       	add	r24, r18
    43a0:	93 1f       	adc	r25, r19
    43a2:	25 2d       	mov	r18, r5
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	82 17       	cp	r24, r18
    43a8:	93 07       	cpc	r25, r19
    43aa:	14 f4       	brge	.+4      	; 0x43b0 <vfprintf+0x288>
    43ac:	58 1a       	sub	r5, r24
    43ae:	01 c0       	rjmp	.+2      	; 0x43b2 <vfprintf+0x28a>
    43b0:	51 2c       	mov	r5, r1
    43b2:	89 2d       	mov	r24, r9
    43b4:	89 70       	andi	r24, 0x09	; 9
    43b6:	49 f4       	brne	.+18     	; 0x43ca <vfprintf+0x2a2>
    43b8:	55 20       	and	r5, r5
    43ba:	39 f0       	breq	.+14     	; 0x43ca <vfprintf+0x2a2>
    43bc:	b7 01       	movw	r22, r14
    43be:	80 e2       	ldi	r24, 0x20	; 32
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    43c6:	5a 94       	dec	r5
    43c8:	f7 cf       	rjmp	.-18     	; 0x43b8 <vfprintf+0x290>
    43ca:	00 23       	and	r16, r16
    43cc:	29 f0       	breq	.+10     	; 0x43d8 <vfprintf+0x2b0>
    43ce:	b7 01       	movw	r22, r14
    43d0:	80 2f       	mov	r24, r16
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    43d8:	93 fc       	sbrc	r9, 3
    43da:	09 c0       	rjmp	.+18     	; 0x43ee <vfprintf+0x2c6>
    43dc:	55 20       	and	r5, r5
    43de:	39 f0       	breq	.+14     	; 0x43ee <vfprintf+0x2c6>
    43e0:	b7 01       	movw	r22, r14
    43e2:	80 e3       	ldi	r24, 0x30	; 48
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    43ea:	5a 94       	dec	r5
    43ec:	f7 cf       	rjmp	.-18     	; 0x43dc <vfprintf+0x2b4>
    43ee:	97 fe       	sbrs	r9, 7
    43f0:	4c c0       	rjmp	.+152    	; 0x448a <vfprintf+0x362>
    43f2:	46 01       	movw	r8, r12
    43f4:	d7 fe       	sbrs	r13, 7
    43f6:	02 c0       	rjmp	.+4      	; 0x43fc <vfprintf+0x2d4>
    43f8:	81 2c       	mov	r8, r1
    43fa:	91 2c       	mov	r9, r1
    43fc:	c6 01       	movw	r24, r12
    43fe:	88 19       	sub	r24, r8
    4400:	99 09       	sbc	r25, r9
    4402:	f3 01       	movw	r30, r6
    4404:	e8 0f       	add	r30, r24
    4406:	f9 1f       	adc	r31, r25
    4408:	ed 87       	std	Y+13, r30	; 0x0d
    440a:	fe 87       	std	Y+14, r31	; 0x0e
    440c:	96 01       	movw	r18, r12
    440e:	24 19       	sub	r18, r4
    4410:	31 09       	sbc	r19, r1
    4412:	2f 87       	std	Y+15, r18	; 0x0f
    4414:	38 8b       	std	Y+16, r19	; 0x10
    4416:	01 2f       	mov	r16, r17
    4418:	10 e0       	ldi	r17, 0x00	; 0
    441a:	11 95       	neg	r17
    441c:	01 95       	neg	r16
    441e:	11 09       	sbc	r17, r1
    4420:	3f ef       	ldi	r19, 0xFF	; 255
    4422:	83 16       	cp	r8, r19
    4424:	93 06       	cpc	r9, r19
    4426:	29 f4       	brne	.+10     	; 0x4432 <vfprintf+0x30a>
    4428:	b7 01       	movw	r22, r14
    442a:	8e e2       	ldi	r24, 0x2E	; 46
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    4432:	c8 14       	cp	r12, r8
    4434:	d9 04       	cpc	r13, r9
    4436:	4c f0       	brlt	.+18     	; 0x444a <vfprintf+0x322>
    4438:	8f 85       	ldd	r24, Y+15	; 0x0f
    443a:	98 89       	ldd	r25, Y+16	; 0x10
    443c:	88 15       	cp	r24, r8
    443e:	99 05       	cpc	r25, r9
    4440:	24 f4       	brge	.+8      	; 0x444a <vfprintf+0x322>
    4442:	ed 85       	ldd	r30, Y+13	; 0x0d
    4444:	fe 85       	ldd	r31, Y+14	; 0x0e
    4446:	81 81       	ldd	r24, Z+1	; 0x01
    4448:	01 c0       	rjmp	.+2      	; 0x444c <vfprintf+0x324>
    444a:	80 e3       	ldi	r24, 0x30	; 48
    444c:	f1 e0       	ldi	r31, 0x01	; 1
    444e:	8f 1a       	sub	r8, r31
    4450:	91 08       	sbc	r9, r1
    4452:	2d 85       	ldd	r18, Y+13	; 0x0d
    4454:	3e 85       	ldd	r19, Y+14	; 0x0e
    4456:	2f 5f       	subi	r18, 0xFF	; 255
    4458:	3f 4f       	sbci	r19, 0xFF	; 255
    445a:	2d 87       	std	Y+13, r18	; 0x0d
    445c:	3e 87       	std	Y+14, r19	; 0x0e
    445e:	80 16       	cp	r8, r16
    4460:	91 06       	cpc	r9, r17
    4462:	2c f0       	brlt	.+10     	; 0x446e <vfprintf+0x346>
    4464:	b7 01       	movw	r22, r14
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    446c:	d9 cf       	rjmp	.-78     	; 0x4420 <vfprintf+0x2f8>
    446e:	c8 14       	cp	r12, r8
    4470:	d9 04       	cpc	r13, r9
    4472:	41 f4       	brne	.+16     	; 0x4484 <vfprintf+0x35c>
    4474:	9a 81       	ldd	r25, Y+2	; 0x02
    4476:	96 33       	cpi	r25, 0x36	; 54
    4478:	20 f4       	brcc	.+8      	; 0x4482 <vfprintf+0x35a>
    447a:	95 33       	cpi	r25, 0x35	; 53
    447c:	19 f4       	brne	.+6      	; 0x4484 <vfprintf+0x35c>
    447e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4480:	34 ff       	sbrs	r19, 4
    4482:	81 e3       	ldi	r24, 0x31	; 49
    4484:	b7 01       	movw	r22, r14
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	4e c0       	rjmp	.+156    	; 0x4526 <vfprintf+0x3fe>
    448a:	8a 81       	ldd	r24, Y+2	; 0x02
    448c:	81 33       	cpi	r24, 0x31	; 49
    448e:	19 f0       	breq	.+6      	; 0x4496 <vfprintf+0x36e>
    4490:	9c 85       	ldd	r25, Y+12	; 0x0c
    4492:	9f 7e       	andi	r25, 0xEF	; 239
    4494:	9c 87       	std	Y+12, r25	; 0x0c
    4496:	b7 01       	movw	r22, r14
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    449e:	11 11       	cpse	r17, r1
    44a0:	05 c0       	rjmp	.+10     	; 0x44ac <vfprintf+0x384>
    44a2:	94 fc       	sbrc	r9, 4
    44a4:	18 c0       	rjmp	.+48     	; 0x44d6 <vfprintf+0x3ae>
    44a6:	85 e6       	ldi	r24, 0x65	; 101
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	17 c0       	rjmp	.+46     	; 0x44da <vfprintf+0x3b2>
    44ac:	b7 01       	movw	r22, r14
    44ae:	8e e2       	ldi	r24, 0x2E	; 46
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    44b6:	1e 5f       	subi	r17, 0xFE	; 254
    44b8:	82 e0       	ldi	r24, 0x02	; 2
    44ba:	01 e0       	ldi	r16, 0x01	; 1
    44bc:	08 0f       	add	r16, r24
    44be:	f3 01       	movw	r30, r6
    44c0:	e8 0f       	add	r30, r24
    44c2:	f1 1d       	adc	r31, r1
    44c4:	80 81       	ld	r24, Z
    44c6:	b7 01       	movw	r22, r14
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    44ce:	80 2f       	mov	r24, r16
    44d0:	01 13       	cpse	r16, r17
    44d2:	f3 cf       	rjmp	.-26     	; 0x44ba <vfprintf+0x392>
    44d4:	e6 cf       	rjmp	.-52     	; 0x44a2 <vfprintf+0x37a>
    44d6:	85 e4       	ldi	r24, 0x45	; 69
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	b7 01       	movw	r22, r14
    44dc:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    44e0:	d7 fc       	sbrc	r13, 7
    44e2:	06 c0       	rjmp	.+12     	; 0x44f0 <vfprintf+0x3c8>
    44e4:	c1 14       	cp	r12, r1
    44e6:	d1 04       	cpc	r13, r1
    44e8:	41 f4       	brne	.+16     	; 0x44fa <vfprintf+0x3d2>
    44ea:	ec 85       	ldd	r30, Y+12	; 0x0c
    44ec:	e4 ff       	sbrs	r30, 4
    44ee:	05 c0       	rjmp	.+10     	; 0x44fa <vfprintf+0x3d2>
    44f0:	d1 94       	neg	r13
    44f2:	c1 94       	neg	r12
    44f4:	d1 08       	sbc	r13, r1
    44f6:	8d e2       	ldi	r24, 0x2D	; 45
    44f8:	01 c0       	rjmp	.+2      	; 0x44fc <vfprintf+0x3d4>
    44fa:	8b e2       	ldi	r24, 0x2B	; 43
    44fc:	b7 01       	movw	r22, r14
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    4504:	80 e3       	ldi	r24, 0x30	; 48
    4506:	2a e0       	ldi	r18, 0x0A	; 10
    4508:	c2 16       	cp	r12, r18
    450a:	d1 04       	cpc	r13, r1
    450c:	2c f0       	brlt	.+10     	; 0x4518 <vfprintf+0x3f0>
    450e:	8f 5f       	subi	r24, 0xFF	; 255
    4510:	fa e0       	ldi	r31, 0x0A	; 10
    4512:	cf 1a       	sub	r12, r31
    4514:	d1 08       	sbc	r13, r1
    4516:	f7 cf       	rjmp	.-18     	; 0x4506 <vfprintf+0x3de>
    4518:	b7 01       	movw	r22, r14
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    4520:	b7 01       	movw	r22, r14
    4522:	c6 01       	movw	r24, r12
    4524:	c0 96       	adiw	r24, 0x30	; 48
    4526:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    452a:	54 c1       	rjmp	.+680    	; 0x47d4 <vfprintf+0x6ac>
    452c:	83 36       	cpi	r24, 0x63	; 99
    452e:	31 f0       	breq	.+12     	; 0x453c <vfprintf+0x414>
    4530:	83 37       	cpi	r24, 0x73	; 115
    4532:	79 f0       	breq	.+30     	; 0x4552 <vfprintf+0x42a>
    4534:	83 35       	cpi	r24, 0x53	; 83
    4536:	09 f0       	breq	.+2      	; 0x453a <vfprintf+0x412>
    4538:	56 c0       	rjmp	.+172    	; 0x45e6 <vfprintf+0x4be>
    453a:	20 c0       	rjmp	.+64     	; 0x457c <vfprintf+0x454>
    453c:	56 01       	movw	r10, r12
    453e:	32 e0       	ldi	r19, 0x02	; 2
    4540:	a3 0e       	add	r10, r19
    4542:	b1 1c       	adc	r11, r1
    4544:	f6 01       	movw	r30, r12
    4546:	80 81       	ld	r24, Z
    4548:	89 83       	std	Y+1, r24	; 0x01
    454a:	01 e0       	ldi	r16, 0x01	; 1
    454c:	10 e0       	ldi	r17, 0x00	; 0
    454e:	63 01       	movw	r12, r6
    4550:	12 c0       	rjmp	.+36     	; 0x4576 <vfprintf+0x44e>
    4552:	56 01       	movw	r10, r12
    4554:	f2 e0       	ldi	r31, 0x02	; 2
    4556:	af 0e       	add	r10, r31
    4558:	b1 1c       	adc	r11, r1
    455a:	f6 01       	movw	r30, r12
    455c:	c0 80       	ld	r12, Z
    455e:	d1 80       	ldd	r13, Z+1	; 0x01
    4560:	96 fe       	sbrs	r9, 6
    4562:	03 c0       	rjmp	.+6      	; 0x456a <vfprintf+0x442>
    4564:	61 2f       	mov	r22, r17
    4566:	70 e0       	ldi	r23, 0x00	; 0
    4568:	02 c0       	rjmp	.+4      	; 0x456e <vfprintf+0x446>
    456a:	6f ef       	ldi	r22, 0xFF	; 255
    456c:	7f ef       	ldi	r23, 0xFF	; 255
    456e:	c6 01       	movw	r24, r12
    4570:	0e 94 38 25 	call	0x4a70	; 0x4a70 <strnlen>
    4574:	8c 01       	movw	r16, r24
    4576:	f9 2d       	mov	r31, r9
    4578:	ff 77       	andi	r31, 0x7F	; 127
    457a:	14 c0       	rjmp	.+40     	; 0x45a4 <vfprintf+0x47c>
    457c:	56 01       	movw	r10, r12
    457e:	22 e0       	ldi	r18, 0x02	; 2
    4580:	a2 0e       	add	r10, r18
    4582:	b1 1c       	adc	r11, r1
    4584:	f6 01       	movw	r30, r12
    4586:	c0 80       	ld	r12, Z
    4588:	d1 80       	ldd	r13, Z+1	; 0x01
    458a:	96 fe       	sbrs	r9, 6
    458c:	03 c0       	rjmp	.+6      	; 0x4594 <vfprintf+0x46c>
    458e:	61 2f       	mov	r22, r17
    4590:	70 e0       	ldi	r23, 0x00	; 0
    4592:	02 c0       	rjmp	.+4      	; 0x4598 <vfprintf+0x470>
    4594:	6f ef       	ldi	r22, 0xFF	; 255
    4596:	7f ef       	ldi	r23, 0xFF	; 255
    4598:	c6 01       	movw	r24, r12
    459a:	0e 94 14 25 	call	0x4a28	; 0x4a28 <strnlen_P>
    459e:	8c 01       	movw	r16, r24
    45a0:	f9 2d       	mov	r31, r9
    45a2:	f0 68       	ori	r31, 0x80	; 128
    45a4:	9f 2e       	mov	r9, r31
    45a6:	f3 fd       	sbrc	r31, 3
    45a8:	1a c0       	rjmp	.+52     	; 0x45de <vfprintf+0x4b6>
    45aa:	85 2d       	mov	r24, r5
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	08 17       	cp	r16, r24
    45b0:	19 07       	cpc	r17, r25
    45b2:	a8 f4       	brcc	.+42     	; 0x45de <vfprintf+0x4b6>
    45b4:	b7 01       	movw	r22, r14
    45b6:	80 e2       	ldi	r24, 0x20	; 32
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    45be:	5a 94       	dec	r5
    45c0:	f4 cf       	rjmp	.-24     	; 0x45aa <vfprintf+0x482>
    45c2:	f6 01       	movw	r30, r12
    45c4:	97 fc       	sbrc	r9, 7
    45c6:	85 91       	lpm	r24, Z+
    45c8:	97 fe       	sbrs	r9, 7
    45ca:	81 91       	ld	r24, Z+
    45cc:	6f 01       	movw	r12, r30
    45ce:	b7 01       	movw	r22, r14
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    45d6:	51 10       	cpse	r5, r1
    45d8:	5a 94       	dec	r5
    45da:	01 50       	subi	r16, 0x01	; 1
    45dc:	11 09       	sbc	r17, r1
    45de:	01 15       	cp	r16, r1
    45e0:	11 05       	cpc	r17, r1
    45e2:	79 f7       	brne	.-34     	; 0x45c2 <vfprintf+0x49a>
    45e4:	f7 c0       	rjmp	.+494    	; 0x47d4 <vfprintf+0x6ac>
    45e6:	84 36       	cpi	r24, 0x64	; 100
    45e8:	11 f0       	breq	.+4      	; 0x45ee <vfprintf+0x4c6>
    45ea:	89 36       	cpi	r24, 0x69	; 105
    45ec:	61 f5       	brne	.+88     	; 0x4646 <vfprintf+0x51e>
    45ee:	56 01       	movw	r10, r12
    45f0:	97 fe       	sbrs	r9, 7
    45f2:	09 c0       	rjmp	.+18     	; 0x4606 <vfprintf+0x4de>
    45f4:	24 e0       	ldi	r18, 0x04	; 4
    45f6:	a2 0e       	add	r10, r18
    45f8:	b1 1c       	adc	r11, r1
    45fa:	f6 01       	movw	r30, r12
    45fc:	60 81       	ld	r22, Z
    45fe:	71 81       	ldd	r23, Z+1	; 0x01
    4600:	82 81       	ldd	r24, Z+2	; 0x02
    4602:	93 81       	ldd	r25, Z+3	; 0x03
    4604:	0a c0       	rjmp	.+20     	; 0x461a <vfprintf+0x4f2>
    4606:	f2 e0       	ldi	r31, 0x02	; 2
    4608:	af 0e       	add	r10, r31
    460a:	b1 1c       	adc	r11, r1
    460c:	f6 01       	movw	r30, r12
    460e:	60 81       	ld	r22, Z
    4610:	71 81       	ldd	r23, Z+1	; 0x01
    4612:	07 2e       	mov	r0, r23
    4614:	00 0c       	add	r0, r0
    4616:	88 0b       	sbc	r24, r24
    4618:	99 0b       	sbc	r25, r25
    461a:	f9 2d       	mov	r31, r9
    461c:	ff 76       	andi	r31, 0x6F	; 111
    461e:	9f 2e       	mov	r9, r31
    4620:	97 ff       	sbrs	r25, 7
    4622:	09 c0       	rjmp	.+18     	; 0x4636 <vfprintf+0x50e>
    4624:	90 95       	com	r25
    4626:	80 95       	com	r24
    4628:	70 95       	com	r23
    462a:	61 95       	neg	r22
    462c:	7f 4f       	sbci	r23, 0xFF	; 255
    462e:	8f 4f       	sbci	r24, 0xFF	; 255
    4630:	9f 4f       	sbci	r25, 0xFF	; 255
    4632:	f0 68       	ori	r31, 0x80	; 128
    4634:	9f 2e       	mov	r9, r31
    4636:	2a e0       	ldi	r18, 0x0A	; 10
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	a3 01       	movw	r20, r6
    463c:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__ultoa_invert>
    4640:	c8 2e       	mov	r12, r24
    4642:	c6 18       	sub	r12, r6
    4644:	3f c0       	rjmp	.+126    	; 0x46c4 <vfprintf+0x59c>
    4646:	09 2d       	mov	r16, r9
    4648:	85 37       	cpi	r24, 0x75	; 117
    464a:	21 f4       	brne	.+8      	; 0x4654 <vfprintf+0x52c>
    464c:	0f 7e       	andi	r16, 0xEF	; 239
    464e:	2a e0       	ldi	r18, 0x0A	; 10
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	1d c0       	rjmp	.+58     	; 0x468e <vfprintf+0x566>
    4654:	09 7f       	andi	r16, 0xF9	; 249
    4656:	8f 36       	cpi	r24, 0x6F	; 111
    4658:	91 f0       	breq	.+36     	; 0x467e <vfprintf+0x556>
    465a:	18 f4       	brcc	.+6      	; 0x4662 <vfprintf+0x53a>
    465c:	88 35       	cpi	r24, 0x58	; 88
    465e:	59 f0       	breq	.+22     	; 0x4676 <vfprintf+0x54e>
    4660:	c3 c0       	rjmp	.+390    	; 0x47e8 <vfprintf+0x6c0>
    4662:	80 37       	cpi	r24, 0x70	; 112
    4664:	19 f0       	breq	.+6      	; 0x466c <vfprintf+0x544>
    4666:	88 37       	cpi	r24, 0x78	; 120
    4668:	11 f0       	breq	.+4      	; 0x466e <vfprintf+0x546>
    466a:	be c0       	rjmp	.+380    	; 0x47e8 <vfprintf+0x6c0>
    466c:	00 61       	ori	r16, 0x10	; 16
    466e:	04 ff       	sbrs	r16, 4
    4670:	09 c0       	rjmp	.+18     	; 0x4684 <vfprintf+0x55c>
    4672:	04 60       	ori	r16, 0x04	; 4
    4674:	07 c0       	rjmp	.+14     	; 0x4684 <vfprintf+0x55c>
    4676:	94 fe       	sbrs	r9, 4
    4678:	08 c0       	rjmp	.+16     	; 0x468a <vfprintf+0x562>
    467a:	06 60       	ori	r16, 0x06	; 6
    467c:	06 c0       	rjmp	.+12     	; 0x468a <vfprintf+0x562>
    467e:	28 e0       	ldi	r18, 0x08	; 8
    4680:	30 e0       	ldi	r19, 0x00	; 0
    4682:	05 c0       	rjmp	.+10     	; 0x468e <vfprintf+0x566>
    4684:	20 e1       	ldi	r18, 0x10	; 16
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	02 c0       	rjmp	.+4      	; 0x468e <vfprintf+0x566>
    468a:	20 e1       	ldi	r18, 0x10	; 16
    468c:	32 e0       	ldi	r19, 0x02	; 2
    468e:	56 01       	movw	r10, r12
    4690:	07 ff       	sbrs	r16, 7
    4692:	09 c0       	rjmp	.+18     	; 0x46a6 <vfprintf+0x57e>
    4694:	84 e0       	ldi	r24, 0x04	; 4
    4696:	a8 0e       	add	r10, r24
    4698:	b1 1c       	adc	r11, r1
    469a:	f6 01       	movw	r30, r12
    469c:	60 81       	ld	r22, Z
    469e:	71 81       	ldd	r23, Z+1	; 0x01
    46a0:	82 81       	ldd	r24, Z+2	; 0x02
    46a2:	93 81       	ldd	r25, Z+3	; 0x03
    46a4:	08 c0       	rjmp	.+16     	; 0x46b6 <vfprintf+0x58e>
    46a6:	f2 e0       	ldi	r31, 0x02	; 2
    46a8:	af 0e       	add	r10, r31
    46aa:	b1 1c       	adc	r11, r1
    46ac:	f6 01       	movw	r30, r12
    46ae:	60 81       	ld	r22, Z
    46b0:	71 81       	ldd	r23, Z+1	; 0x01
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	a3 01       	movw	r20, r6
    46b8:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__ultoa_invert>
    46bc:	c8 2e       	mov	r12, r24
    46be:	c6 18       	sub	r12, r6
    46c0:	0f 77       	andi	r16, 0x7F	; 127
    46c2:	90 2e       	mov	r9, r16
    46c4:	96 fe       	sbrs	r9, 6
    46c6:	0b c0       	rjmp	.+22     	; 0x46de <vfprintf+0x5b6>
    46c8:	09 2d       	mov	r16, r9
    46ca:	0e 7f       	andi	r16, 0xFE	; 254
    46cc:	c1 16       	cp	r12, r17
    46ce:	50 f4       	brcc	.+20     	; 0x46e4 <vfprintf+0x5bc>
    46d0:	94 fe       	sbrs	r9, 4
    46d2:	0a c0       	rjmp	.+20     	; 0x46e8 <vfprintf+0x5c0>
    46d4:	92 fc       	sbrc	r9, 2
    46d6:	08 c0       	rjmp	.+16     	; 0x46e8 <vfprintf+0x5c0>
    46d8:	09 2d       	mov	r16, r9
    46da:	0e 7e       	andi	r16, 0xEE	; 238
    46dc:	05 c0       	rjmp	.+10     	; 0x46e8 <vfprintf+0x5c0>
    46de:	dc 2c       	mov	r13, r12
    46e0:	09 2d       	mov	r16, r9
    46e2:	03 c0       	rjmp	.+6      	; 0x46ea <vfprintf+0x5c2>
    46e4:	dc 2c       	mov	r13, r12
    46e6:	01 c0       	rjmp	.+2      	; 0x46ea <vfprintf+0x5c2>
    46e8:	d1 2e       	mov	r13, r17
    46ea:	04 ff       	sbrs	r16, 4
    46ec:	0d c0       	rjmp	.+26     	; 0x4708 <vfprintf+0x5e0>
    46ee:	fe 01       	movw	r30, r28
    46f0:	ec 0d       	add	r30, r12
    46f2:	f1 1d       	adc	r31, r1
    46f4:	80 81       	ld	r24, Z
    46f6:	80 33       	cpi	r24, 0x30	; 48
    46f8:	11 f4       	brne	.+4      	; 0x46fe <vfprintf+0x5d6>
    46fa:	09 7e       	andi	r16, 0xE9	; 233
    46fc:	09 c0       	rjmp	.+18     	; 0x4710 <vfprintf+0x5e8>
    46fe:	02 ff       	sbrs	r16, 2
    4700:	06 c0       	rjmp	.+12     	; 0x470e <vfprintf+0x5e6>
    4702:	d3 94       	inc	r13
    4704:	d3 94       	inc	r13
    4706:	04 c0       	rjmp	.+8      	; 0x4710 <vfprintf+0x5e8>
    4708:	80 2f       	mov	r24, r16
    470a:	86 78       	andi	r24, 0x86	; 134
    470c:	09 f0       	breq	.+2      	; 0x4710 <vfprintf+0x5e8>
    470e:	d3 94       	inc	r13
    4710:	03 fd       	sbrc	r16, 3
    4712:	11 c0       	rjmp	.+34     	; 0x4736 <vfprintf+0x60e>
    4714:	00 ff       	sbrs	r16, 0
    4716:	06 c0       	rjmp	.+12     	; 0x4724 <vfprintf+0x5fc>
    4718:	1c 2d       	mov	r17, r12
    471a:	d5 14       	cp	r13, r5
    471c:	80 f4       	brcc	.+32     	; 0x473e <vfprintf+0x616>
    471e:	15 0d       	add	r17, r5
    4720:	1d 19       	sub	r17, r13
    4722:	0d c0       	rjmp	.+26     	; 0x473e <vfprintf+0x616>
    4724:	d5 14       	cp	r13, r5
    4726:	58 f4       	brcc	.+22     	; 0x473e <vfprintf+0x616>
    4728:	b7 01       	movw	r22, r14
    472a:	80 e2       	ldi	r24, 0x20	; 32
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    4732:	d3 94       	inc	r13
    4734:	f7 cf       	rjmp	.-18     	; 0x4724 <vfprintf+0x5fc>
    4736:	d5 14       	cp	r13, r5
    4738:	10 f4       	brcc	.+4      	; 0x473e <vfprintf+0x616>
    473a:	5d 18       	sub	r5, r13
    473c:	01 c0       	rjmp	.+2      	; 0x4740 <vfprintf+0x618>
    473e:	51 2c       	mov	r5, r1
    4740:	04 ff       	sbrs	r16, 4
    4742:	10 c0       	rjmp	.+32     	; 0x4764 <vfprintf+0x63c>
    4744:	b7 01       	movw	r22, r14
    4746:	80 e3       	ldi	r24, 0x30	; 48
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    474e:	02 ff       	sbrs	r16, 2
    4750:	17 c0       	rjmp	.+46     	; 0x4780 <vfprintf+0x658>
    4752:	01 fd       	sbrc	r16, 1
    4754:	03 c0       	rjmp	.+6      	; 0x475c <vfprintf+0x634>
    4756:	88 e7       	ldi	r24, 0x78	; 120
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	02 c0       	rjmp	.+4      	; 0x4760 <vfprintf+0x638>
    475c:	88 e5       	ldi	r24, 0x58	; 88
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	b7 01       	movw	r22, r14
    4762:	0c c0       	rjmp	.+24     	; 0x477c <vfprintf+0x654>
    4764:	80 2f       	mov	r24, r16
    4766:	86 78       	andi	r24, 0x86	; 134
    4768:	59 f0       	breq	.+22     	; 0x4780 <vfprintf+0x658>
    476a:	01 ff       	sbrs	r16, 1
    476c:	02 c0       	rjmp	.+4      	; 0x4772 <vfprintf+0x64a>
    476e:	8b e2       	ldi	r24, 0x2B	; 43
    4770:	01 c0       	rjmp	.+2      	; 0x4774 <vfprintf+0x64c>
    4772:	80 e2       	ldi	r24, 0x20	; 32
    4774:	07 fd       	sbrc	r16, 7
    4776:	8d e2       	ldi	r24, 0x2D	; 45
    4778:	b7 01       	movw	r22, r14
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    4780:	c1 16       	cp	r12, r17
    4782:	38 f4       	brcc	.+14     	; 0x4792 <vfprintf+0x66a>
    4784:	b7 01       	movw	r22, r14
    4786:	80 e3       	ldi	r24, 0x30	; 48
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    478e:	11 50       	subi	r17, 0x01	; 1
    4790:	f7 cf       	rjmp	.-18     	; 0x4780 <vfprintf+0x658>
    4792:	ca 94       	dec	r12
    4794:	f3 01       	movw	r30, r6
    4796:	ec 0d       	add	r30, r12
    4798:	f1 1d       	adc	r31, r1
    479a:	80 81       	ld	r24, Z
    479c:	b7 01       	movw	r22, r14
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    47a4:	c1 10       	cpse	r12, r1
    47a6:	f5 cf       	rjmp	.-22     	; 0x4792 <vfprintf+0x66a>
    47a8:	15 c0       	rjmp	.+42     	; 0x47d4 <vfprintf+0x6ac>
    47aa:	f4 e0       	ldi	r31, 0x04	; 4
    47ac:	f5 15       	cp	r31, r5
    47ae:	60 f5       	brcc	.+88     	; 0x4808 <vfprintf+0x6e0>
    47b0:	84 e0       	ldi	r24, 0x04	; 4
    47b2:	58 1a       	sub	r5, r24
    47b4:	93 fe       	sbrs	r9, 3
    47b6:	1f c0       	rjmp	.+62     	; 0x47f6 <vfprintf+0x6ce>
    47b8:	01 11       	cpse	r16, r1
    47ba:	27 c0       	rjmp	.+78     	; 0x480a <vfprintf+0x6e2>
    47bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    47be:	23 ff       	sbrs	r18, 3
    47c0:	2a c0       	rjmp	.+84     	; 0x4816 <vfprintf+0x6ee>
    47c2:	0c e3       	ldi	r16, 0x3C	; 60
    47c4:	12 e0       	ldi	r17, 0x02	; 2
    47c6:	39 2d       	mov	r19, r9
    47c8:	30 71       	andi	r19, 0x10	; 16
    47ca:	93 2e       	mov	r9, r19
    47cc:	f8 01       	movw	r30, r16
    47ce:	84 91       	lpm	r24, Z
    47d0:	81 11       	cpse	r24, r1
    47d2:	24 c0       	rjmp	.+72     	; 0x481c <vfprintf+0x6f4>
    47d4:	55 20       	and	r5, r5
    47d6:	09 f4       	brne	.+2      	; 0x47da <vfprintf+0x6b2>
    47d8:	e4 cc       	rjmp	.-1592   	; 0x41a2 <vfprintf+0x7a>
    47da:	b7 01       	movw	r22, r14
    47dc:	80 e2       	ldi	r24, 0x20	; 32
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    47e4:	5a 94       	dec	r5
    47e6:	f6 cf       	rjmp	.-20     	; 0x47d4 <vfprintf+0x6ac>
    47e8:	f7 01       	movw	r30, r14
    47ea:	86 81       	ldd	r24, Z+6	; 0x06
    47ec:	97 81       	ldd	r25, Z+7	; 0x07
    47ee:	26 c0       	rjmp	.+76     	; 0x483c <vfprintf+0x714>
    47f0:	8f ef       	ldi	r24, 0xFF	; 255
    47f2:	9f ef       	ldi	r25, 0xFF	; 255
    47f4:	23 c0       	rjmp	.+70     	; 0x483c <vfprintf+0x714>
    47f6:	b7 01       	movw	r22, r14
    47f8:	80 e2       	ldi	r24, 0x20	; 32
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    4800:	5a 94       	dec	r5
    4802:	51 10       	cpse	r5, r1
    4804:	f8 cf       	rjmp	.-16     	; 0x47f6 <vfprintf+0x6ce>
    4806:	d8 cf       	rjmp	.-80     	; 0x47b8 <vfprintf+0x690>
    4808:	51 2c       	mov	r5, r1
    480a:	b7 01       	movw	r22, r14
    480c:	80 2f       	mov	r24, r16
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    4814:	d3 cf       	rjmp	.-90     	; 0x47bc <vfprintf+0x694>
    4816:	00 e4       	ldi	r16, 0x40	; 64
    4818:	12 e0       	ldi	r17, 0x02	; 2
    481a:	d5 cf       	rjmp	.-86     	; 0x47c6 <vfprintf+0x69e>
    481c:	91 10       	cpse	r9, r1
    481e:	80 52       	subi	r24, 0x20	; 32
    4820:	b7 01       	movw	r22, r14
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <fputc>
    4828:	0f 5f       	subi	r16, 0xFF	; 255
    482a:	1f 4f       	sbci	r17, 0xFF	; 255
    482c:	cf cf       	rjmp	.-98     	; 0x47cc <vfprintf+0x6a4>
    482e:	23 e0       	ldi	r18, 0x03	; 3
    4830:	25 15       	cp	r18, r5
    4832:	10 f4       	brcc	.+4      	; 0x4838 <vfprintf+0x710>
    4834:	83 e0       	ldi	r24, 0x03	; 3
    4836:	bd cf       	rjmp	.-134    	; 0x47b2 <vfprintf+0x68a>
    4838:	51 2c       	mov	r5, r1
    483a:	c0 cf       	rjmp	.-128    	; 0x47bc <vfprintf+0x694>
    483c:	60 96       	adiw	r28, 0x10	; 16
    483e:	cd bf       	out	0x3d, r28	; 61
    4840:	de bf       	out	0x3e, r29	; 62
    4842:	df 91       	pop	r29
    4844:	cf 91       	pop	r28
    4846:	1f 91       	pop	r17
    4848:	0f 91       	pop	r16
    484a:	ff 90       	pop	r15
    484c:	ef 90       	pop	r14
    484e:	df 90       	pop	r13
    4850:	cf 90       	pop	r12
    4852:	bf 90       	pop	r11
    4854:	af 90       	pop	r10
    4856:	9f 90       	pop	r9
    4858:	8f 90       	pop	r8
    485a:	7f 90       	pop	r7
    485c:	6f 90       	pop	r6
    485e:	5f 90       	pop	r5
    4860:	4f 90       	pop	r4
    4862:	3f 90       	pop	r3
    4864:	2f 90       	pop	r2
    4866:	08 95       	ret

00004868 <__tablejump2__>:
    4868:	ee 0f       	add	r30, r30
    486a:	ff 1f       	adc	r31, r31
    486c:	88 1f       	adc	r24, r24
    486e:	8b bf       	out	0x3b, r24	; 59
    4870:	07 90       	elpm	r0, Z+
    4872:	f6 91       	elpm	r31, Z
    4874:	e0 2d       	mov	r30, r0
    4876:	19 94       	eijmp

00004878 <__ftoa_engine>:
    4878:	28 30       	cpi	r18, 0x08	; 8
    487a:	08 f0       	brcs	.+2      	; 0x487e <__ftoa_engine+0x6>
    487c:	27 e0       	ldi	r18, 0x07	; 7
    487e:	33 27       	eor	r19, r19
    4880:	da 01       	movw	r26, r20
    4882:	99 0f       	add	r25, r25
    4884:	31 1d       	adc	r19, r1
    4886:	87 fd       	sbrc	r24, 7
    4888:	91 60       	ori	r25, 0x01	; 1
    488a:	00 96       	adiw	r24, 0x00	; 0
    488c:	61 05       	cpc	r22, r1
    488e:	71 05       	cpc	r23, r1
    4890:	39 f4       	brne	.+14     	; 0x48a0 <__ftoa_engine+0x28>
    4892:	32 60       	ori	r19, 0x02	; 2
    4894:	2e 5f       	subi	r18, 0xFE	; 254
    4896:	3d 93       	st	X+, r19
    4898:	30 e3       	ldi	r19, 0x30	; 48
    489a:	2a 95       	dec	r18
    489c:	e1 f7       	brne	.-8      	; 0x4896 <__ftoa_engine+0x1e>
    489e:	08 95       	ret
    48a0:	9f 3f       	cpi	r25, 0xFF	; 255
    48a2:	30 f0       	brcs	.+12     	; 0x48b0 <__ftoa_engine+0x38>
    48a4:	80 38       	cpi	r24, 0x80	; 128
    48a6:	71 05       	cpc	r23, r1
    48a8:	61 05       	cpc	r22, r1
    48aa:	09 f0       	breq	.+2      	; 0x48ae <__ftoa_engine+0x36>
    48ac:	3c 5f       	subi	r19, 0xFC	; 252
    48ae:	3c 5f       	subi	r19, 0xFC	; 252
    48b0:	3d 93       	st	X+, r19
    48b2:	91 30       	cpi	r25, 0x01	; 1
    48b4:	08 f0       	brcs	.+2      	; 0x48b8 <__ftoa_engine+0x40>
    48b6:	80 68       	ori	r24, 0x80	; 128
    48b8:	91 1d       	adc	r25, r1
    48ba:	df 93       	push	r29
    48bc:	cf 93       	push	r28
    48be:	1f 93       	push	r17
    48c0:	0f 93       	push	r16
    48c2:	ff 92       	push	r15
    48c4:	ef 92       	push	r14
    48c6:	19 2f       	mov	r17, r25
    48c8:	98 7f       	andi	r25, 0xF8	; 248
    48ca:	96 95       	lsr	r25
    48cc:	e9 2f       	mov	r30, r25
    48ce:	96 95       	lsr	r25
    48d0:	96 95       	lsr	r25
    48d2:	e9 0f       	add	r30, r25
    48d4:	ff 27       	eor	r31, r31
    48d6:	e2 56       	subi	r30, 0x62	; 98
    48d8:	fd 4f       	sbci	r31, 0xFD	; 253
    48da:	99 27       	eor	r25, r25
    48dc:	33 27       	eor	r19, r19
    48de:	ee 24       	eor	r14, r14
    48e0:	ff 24       	eor	r15, r15
    48e2:	a7 01       	movw	r20, r14
    48e4:	e7 01       	movw	r28, r14
    48e6:	05 90       	lpm	r0, Z+
    48e8:	08 94       	sec
    48ea:	07 94       	ror	r0
    48ec:	28 f4       	brcc	.+10     	; 0x48f8 <__ftoa_engine+0x80>
    48ee:	36 0f       	add	r19, r22
    48f0:	e7 1e       	adc	r14, r23
    48f2:	f8 1e       	adc	r15, r24
    48f4:	49 1f       	adc	r20, r25
    48f6:	51 1d       	adc	r21, r1
    48f8:	66 0f       	add	r22, r22
    48fa:	77 1f       	adc	r23, r23
    48fc:	88 1f       	adc	r24, r24
    48fe:	99 1f       	adc	r25, r25
    4900:	06 94       	lsr	r0
    4902:	a1 f7       	brne	.-24     	; 0x48ec <__ftoa_engine+0x74>
    4904:	05 90       	lpm	r0, Z+
    4906:	07 94       	ror	r0
    4908:	28 f4       	brcc	.+10     	; 0x4914 <__ftoa_engine+0x9c>
    490a:	e7 0e       	add	r14, r23
    490c:	f8 1e       	adc	r15, r24
    490e:	49 1f       	adc	r20, r25
    4910:	56 1f       	adc	r21, r22
    4912:	c1 1d       	adc	r28, r1
    4914:	77 0f       	add	r23, r23
    4916:	88 1f       	adc	r24, r24
    4918:	99 1f       	adc	r25, r25
    491a:	66 1f       	adc	r22, r22
    491c:	06 94       	lsr	r0
    491e:	a1 f7       	brne	.-24     	; 0x4908 <__ftoa_engine+0x90>
    4920:	05 90       	lpm	r0, Z+
    4922:	07 94       	ror	r0
    4924:	28 f4       	brcc	.+10     	; 0x4930 <__ftoa_engine+0xb8>
    4926:	f8 0e       	add	r15, r24
    4928:	49 1f       	adc	r20, r25
    492a:	56 1f       	adc	r21, r22
    492c:	c7 1f       	adc	r28, r23
    492e:	d1 1d       	adc	r29, r1
    4930:	88 0f       	add	r24, r24
    4932:	99 1f       	adc	r25, r25
    4934:	66 1f       	adc	r22, r22
    4936:	77 1f       	adc	r23, r23
    4938:	06 94       	lsr	r0
    493a:	a1 f7       	brne	.-24     	; 0x4924 <__ftoa_engine+0xac>
    493c:	05 90       	lpm	r0, Z+
    493e:	07 94       	ror	r0
    4940:	20 f4       	brcc	.+8      	; 0x494a <__ftoa_engine+0xd2>
    4942:	49 0f       	add	r20, r25
    4944:	56 1f       	adc	r21, r22
    4946:	c7 1f       	adc	r28, r23
    4948:	d8 1f       	adc	r29, r24
    494a:	99 0f       	add	r25, r25
    494c:	66 1f       	adc	r22, r22
    494e:	77 1f       	adc	r23, r23
    4950:	88 1f       	adc	r24, r24
    4952:	06 94       	lsr	r0
    4954:	a9 f7       	brne	.-22     	; 0x4940 <__ftoa_engine+0xc8>
    4956:	84 91       	lpm	r24, Z
    4958:	10 95       	com	r17
    495a:	17 70       	andi	r17, 0x07	; 7
    495c:	41 f0       	breq	.+16     	; 0x496e <__ftoa_engine+0xf6>
    495e:	d6 95       	lsr	r29
    4960:	c7 95       	ror	r28
    4962:	57 95       	ror	r21
    4964:	47 95       	ror	r20
    4966:	f7 94       	ror	r15
    4968:	e7 94       	ror	r14
    496a:	1a 95       	dec	r17
    496c:	c1 f7       	brne	.-16     	; 0x495e <__ftoa_engine+0xe6>
    496e:	e4 e4       	ldi	r30, 0x44	; 68
    4970:	f2 e0       	ldi	r31, 0x02	; 2
    4972:	68 94       	set
    4974:	15 90       	lpm	r1, Z+
    4976:	15 91       	lpm	r17, Z+
    4978:	35 91       	lpm	r19, Z+
    497a:	65 91       	lpm	r22, Z+
    497c:	95 91       	lpm	r25, Z+
    497e:	05 90       	lpm	r0, Z+
    4980:	7f e2       	ldi	r23, 0x2F	; 47
    4982:	73 95       	inc	r23
    4984:	e1 18       	sub	r14, r1
    4986:	f1 0a       	sbc	r15, r17
    4988:	43 0b       	sbc	r20, r19
    498a:	56 0b       	sbc	r21, r22
    498c:	c9 0b       	sbc	r28, r25
    498e:	d0 09       	sbc	r29, r0
    4990:	c0 f7       	brcc	.-16     	; 0x4982 <__ftoa_engine+0x10a>
    4992:	e1 0c       	add	r14, r1
    4994:	f1 1e       	adc	r15, r17
    4996:	43 1f       	adc	r20, r19
    4998:	56 1f       	adc	r21, r22
    499a:	c9 1f       	adc	r28, r25
    499c:	d0 1d       	adc	r29, r0
    499e:	7e f4       	brtc	.+30     	; 0x49be <__ftoa_engine+0x146>
    49a0:	70 33       	cpi	r23, 0x30	; 48
    49a2:	11 f4       	brne	.+4      	; 0x49a8 <__ftoa_engine+0x130>
    49a4:	8a 95       	dec	r24
    49a6:	e6 cf       	rjmp	.-52     	; 0x4974 <__ftoa_engine+0xfc>
    49a8:	e8 94       	clt
    49aa:	01 50       	subi	r16, 0x01	; 1
    49ac:	30 f0       	brcs	.+12     	; 0x49ba <__ftoa_engine+0x142>
    49ae:	08 0f       	add	r16, r24
    49b0:	0a f4       	brpl	.+2      	; 0x49b4 <__ftoa_engine+0x13c>
    49b2:	00 27       	eor	r16, r16
    49b4:	02 17       	cp	r16, r18
    49b6:	08 f4       	brcc	.+2      	; 0x49ba <__ftoa_engine+0x142>
    49b8:	20 2f       	mov	r18, r16
    49ba:	23 95       	inc	r18
    49bc:	02 2f       	mov	r16, r18
    49be:	7a 33       	cpi	r23, 0x3A	; 58
    49c0:	28 f0       	brcs	.+10     	; 0x49cc <__ftoa_engine+0x154>
    49c2:	79 e3       	ldi	r23, 0x39	; 57
    49c4:	7d 93       	st	X+, r23
    49c6:	2a 95       	dec	r18
    49c8:	e9 f7       	brne	.-6      	; 0x49c4 <__ftoa_engine+0x14c>
    49ca:	10 c0       	rjmp	.+32     	; 0x49ec <__ftoa_engine+0x174>
    49cc:	7d 93       	st	X+, r23
    49ce:	2a 95       	dec	r18
    49d0:	89 f6       	brne	.-94     	; 0x4974 <__ftoa_engine+0xfc>
    49d2:	06 94       	lsr	r0
    49d4:	97 95       	ror	r25
    49d6:	67 95       	ror	r22
    49d8:	37 95       	ror	r19
    49da:	17 95       	ror	r17
    49dc:	17 94       	ror	r1
    49de:	e1 18       	sub	r14, r1
    49e0:	f1 0a       	sbc	r15, r17
    49e2:	43 0b       	sbc	r20, r19
    49e4:	56 0b       	sbc	r21, r22
    49e6:	c9 0b       	sbc	r28, r25
    49e8:	d0 09       	sbc	r29, r0
    49ea:	98 f0       	brcs	.+38     	; 0x4a12 <__ftoa_engine+0x19a>
    49ec:	23 95       	inc	r18
    49ee:	7e 91       	ld	r23, -X
    49f0:	73 95       	inc	r23
    49f2:	7a 33       	cpi	r23, 0x3A	; 58
    49f4:	08 f0       	brcs	.+2      	; 0x49f8 <__ftoa_engine+0x180>
    49f6:	70 e3       	ldi	r23, 0x30	; 48
    49f8:	7c 93       	st	X, r23
    49fa:	20 13       	cpse	r18, r16
    49fc:	b8 f7       	brcc	.-18     	; 0x49ec <__ftoa_engine+0x174>
    49fe:	7e 91       	ld	r23, -X
    4a00:	70 61       	ori	r23, 0x10	; 16
    4a02:	7d 93       	st	X+, r23
    4a04:	30 f0       	brcs	.+12     	; 0x4a12 <__ftoa_engine+0x19a>
    4a06:	83 95       	inc	r24
    4a08:	71 e3       	ldi	r23, 0x31	; 49
    4a0a:	7d 93       	st	X+, r23
    4a0c:	70 e3       	ldi	r23, 0x30	; 48
    4a0e:	2a 95       	dec	r18
    4a10:	e1 f7       	brne	.-8      	; 0x4a0a <__ftoa_engine+0x192>
    4a12:	11 24       	eor	r1, r1
    4a14:	ef 90       	pop	r14
    4a16:	ff 90       	pop	r15
    4a18:	0f 91       	pop	r16
    4a1a:	1f 91       	pop	r17
    4a1c:	cf 91       	pop	r28
    4a1e:	df 91       	pop	r29
    4a20:	99 27       	eor	r25, r25
    4a22:	87 fd       	sbrc	r24, 7
    4a24:	90 95       	com	r25
    4a26:	08 95       	ret

00004a28 <strnlen_P>:
    4a28:	fc 01       	movw	r30, r24
    4a2a:	05 90       	lpm	r0, Z+
    4a2c:	61 50       	subi	r22, 0x01	; 1
    4a2e:	70 40       	sbci	r23, 0x00	; 0
    4a30:	01 10       	cpse	r0, r1
    4a32:	d8 f7       	brcc	.-10     	; 0x4a2a <strnlen_P+0x2>
    4a34:	80 95       	com	r24
    4a36:	90 95       	com	r25
    4a38:	8e 0f       	add	r24, r30
    4a3a:	9f 1f       	adc	r25, r31
    4a3c:	08 95       	ret

00004a3e <memcpy>:
    4a3e:	fb 01       	movw	r30, r22
    4a40:	dc 01       	movw	r26, r24
    4a42:	02 c0       	rjmp	.+4      	; 0x4a48 <memcpy+0xa>
    4a44:	01 90       	ld	r0, Z+
    4a46:	0d 92       	st	X+, r0
    4a48:	41 50       	subi	r20, 0x01	; 1
    4a4a:	50 40       	sbci	r21, 0x00	; 0
    4a4c:	d8 f7       	brcc	.-10     	; 0x4a44 <memcpy+0x6>
    4a4e:	08 95       	ret

00004a50 <memset>:
    4a50:	dc 01       	movw	r26, r24
    4a52:	01 c0       	rjmp	.+2      	; 0x4a56 <memset+0x6>
    4a54:	6d 93       	st	X+, r22
    4a56:	41 50       	subi	r20, 0x01	; 1
    4a58:	50 40       	sbci	r21, 0x00	; 0
    4a5a:	e0 f7       	brcc	.-8      	; 0x4a54 <memset+0x4>
    4a5c:	08 95       	ret

00004a5e <strlen>:
    4a5e:	fc 01       	movw	r30, r24
    4a60:	01 90       	ld	r0, Z+
    4a62:	00 20       	and	r0, r0
    4a64:	e9 f7       	brne	.-6      	; 0x4a60 <strlen+0x2>
    4a66:	80 95       	com	r24
    4a68:	90 95       	com	r25
    4a6a:	8e 0f       	add	r24, r30
    4a6c:	9f 1f       	adc	r25, r31
    4a6e:	08 95       	ret

00004a70 <strnlen>:
    4a70:	fc 01       	movw	r30, r24
    4a72:	61 50       	subi	r22, 0x01	; 1
    4a74:	70 40       	sbci	r23, 0x00	; 0
    4a76:	01 90       	ld	r0, Z+
    4a78:	01 10       	cpse	r0, r1
    4a7a:	d8 f7       	brcc	.-10     	; 0x4a72 <strnlen+0x2>
    4a7c:	80 95       	com	r24
    4a7e:	90 95       	com	r25
    4a80:	8e 0f       	add	r24, r30
    4a82:	9f 1f       	adc	r25, r31
    4a84:	08 95       	ret

00004a86 <itoa>:
    4a86:	45 32       	cpi	r20, 0x25	; 37
    4a88:	51 05       	cpc	r21, r1
    4a8a:	20 f4       	brcc	.+8      	; 0x4a94 <itoa+0xe>
    4a8c:	42 30       	cpi	r20, 0x02	; 2
    4a8e:	10 f0       	brcs	.+4      	; 0x4a94 <itoa+0xe>
    4a90:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <__itoa_ncheck>
    4a94:	fb 01       	movw	r30, r22
    4a96:	10 82       	st	Z, r1
    4a98:	cb 01       	movw	r24, r22
    4a9a:	08 95       	ret

00004a9c <__itoa_ncheck>:
    4a9c:	bb 27       	eor	r27, r27
    4a9e:	4a 30       	cpi	r20, 0x0A	; 10
    4aa0:	31 f4       	brne	.+12     	; 0x4aae <__itoa_ncheck+0x12>
    4aa2:	99 23       	and	r25, r25
    4aa4:	22 f4       	brpl	.+8      	; 0x4aae <__itoa_ncheck+0x12>
    4aa6:	bd e2       	ldi	r27, 0x2D	; 45
    4aa8:	90 95       	com	r25
    4aaa:	81 95       	neg	r24
    4aac:	9f 4f       	sbci	r25, 0xFF	; 255
    4aae:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__utoa_common>

00004ab2 <__utoa_ncheck>:
    4ab2:	bb 27       	eor	r27, r27

00004ab4 <__utoa_common>:
    4ab4:	fb 01       	movw	r30, r22
    4ab6:	55 27       	eor	r21, r21
    4ab8:	aa 27       	eor	r26, r26
    4aba:	88 0f       	add	r24, r24
    4abc:	99 1f       	adc	r25, r25
    4abe:	aa 1f       	adc	r26, r26
    4ac0:	a4 17       	cp	r26, r20
    4ac2:	10 f0       	brcs	.+4      	; 0x4ac8 <__utoa_common+0x14>
    4ac4:	a4 1b       	sub	r26, r20
    4ac6:	83 95       	inc	r24
    4ac8:	50 51       	subi	r21, 0x10	; 16
    4aca:	b9 f7       	brne	.-18     	; 0x4aba <__utoa_common+0x6>
    4acc:	a0 5d       	subi	r26, 0xD0	; 208
    4ace:	aa 33       	cpi	r26, 0x3A	; 58
    4ad0:	08 f0       	brcs	.+2      	; 0x4ad4 <__utoa_common+0x20>
    4ad2:	a9 5d       	subi	r26, 0xD9	; 217
    4ad4:	a1 93       	st	Z+, r26
    4ad6:	00 97       	sbiw	r24, 0x00	; 0
    4ad8:	79 f7       	brne	.-34     	; 0x4ab8 <__utoa_common+0x4>
    4ada:	b1 11       	cpse	r27, r1
    4adc:	b1 93       	st	Z+, r27
    4ade:	11 92       	st	Z+, r1
    4ae0:	cb 01       	movw	r24, r22
    4ae2:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <strrev>

00004ae6 <fputc>:
    4ae6:	0f 93       	push	r16
    4ae8:	1f 93       	push	r17
    4aea:	cf 93       	push	r28
    4aec:	df 93       	push	r29
    4aee:	fb 01       	movw	r30, r22
    4af0:	23 81       	ldd	r18, Z+3	; 0x03
    4af2:	21 fd       	sbrc	r18, 1
    4af4:	03 c0       	rjmp	.+6      	; 0x4afc <fputc+0x16>
    4af6:	8f ef       	ldi	r24, 0xFF	; 255
    4af8:	9f ef       	ldi	r25, 0xFF	; 255
    4afa:	2c c0       	rjmp	.+88     	; 0x4b54 <fputc+0x6e>
    4afc:	22 ff       	sbrs	r18, 2
    4afe:	16 c0       	rjmp	.+44     	; 0x4b2c <fputc+0x46>
    4b00:	46 81       	ldd	r20, Z+6	; 0x06
    4b02:	57 81       	ldd	r21, Z+7	; 0x07
    4b04:	24 81       	ldd	r18, Z+4	; 0x04
    4b06:	35 81       	ldd	r19, Z+5	; 0x05
    4b08:	42 17       	cp	r20, r18
    4b0a:	53 07       	cpc	r21, r19
    4b0c:	44 f4       	brge	.+16     	; 0x4b1e <fputc+0x38>
    4b0e:	a0 81       	ld	r26, Z
    4b10:	b1 81       	ldd	r27, Z+1	; 0x01
    4b12:	9d 01       	movw	r18, r26
    4b14:	2f 5f       	subi	r18, 0xFF	; 255
    4b16:	3f 4f       	sbci	r19, 0xFF	; 255
    4b18:	20 83       	st	Z, r18
    4b1a:	31 83       	std	Z+1, r19	; 0x01
    4b1c:	8c 93       	st	X, r24
    4b1e:	26 81       	ldd	r18, Z+6	; 0x06
    4b20:	37 81       	ldd	r19, Z+7	; 0x07
    4b22:	2f 5f       	subi	r18, 0xFF	; 255
    4b24:	3f 4f       	sbci	r19, 0xFF	; 255
    4b26:	26 83       	std	Z+6, r18	; 0x06
    4b28:	37 83       	std	Z+7, r19	; 0x07
    4b2a:	14 c0       	rjmp	.+40     	; 0x4b54 <fputc+0x6e>
    4b2c:	8b 01       	movw	r16, r22
    4b2e:	ec 01       	movw	r28, r24
    4b30:	fb 01       	movw	r30, r22
    4b32:	00 84       	ldd	r0, Z+8	; 0x08
    4b34:	f1 85       	ldd	r31, Z+9	; 0x09
    4b36:	e0 2d       	mov	r30, r0
    4b38:	19 95       	eicall
    4b3a:	89 2b       	or	r24, r25
    4b3c:	e1 f6       	brne	.-72     	; 0x4af6 <fputc+0x10>
    4b3e:	d8 01       	movw	r26, r16
    4b40:	16 96       	adiw	r26, 0x06	; 6
    4b42:	8d 91       	ld	r24, X+
    4b44:	9c 91       	ld	r25, X
    4b46:	17 97       	sbiw	r26, 0x07	; 7
    4b48:	01 96       	adiw	r24, 0x01	; 1
    4b4a:	16 96       	adiw	r26, 0x06	; 6
    4b4c:	8d 93       	st	X+, r24
    4b4e:	9c 93       	st	X, r25
    4b50:	17 97       	sbiw	r26, 0x07	; 7
    4b52:	ce 01       	movw	r24, r28
    4b54:	df 91       	pop	r29
    4b56:	cf 91       	pop	r28
    4b58:	1f 91       	pop	r17
    4b5a:	0f 91       	pop	r16
    4b5c:	08 95       	ret

00004b5e <sprintf>:
    4b5e:	0f 93       	push	r16
    4b60:	1f 93       	push	r17
    4b62:	cf 93       	push	r28
    4b64:	df 93       	push	r29
    4b66:	cd b7       	in	r28, 0x3d	; 61
    4b68:	de b7       	in	r29, 0x3e	; 62
    4b6a:	2e 97       	sbiw	r28, 0x0e	; 14
    4b6c:	cd bf       	out	0x3d, r28	; 61
    4b6e:	de bf       	out	0x3e, r29	; 62
    4b70:	0e 89       	ldd	r16, Y+22	; 0x16
    4b72:	1f 89       	ldd	r17, Y+23	; 0x17
    4b74:	86 e0       	ldi	r24, 0x06	; 6
    4b76:	8c 83       	std	Y+4, r24	; 0x04
    4b78:	09 83       	std	Y+1, r16	; 0x01
    4b7a:	1a 83       	std	Y+2, r17	; 0x02
    4b7c:	8f ef       	ldi	r24, 0xFF	; 255
    4b7e:	9f e7       	ldi	r25, 0x7F	; 127
    4b80:	8d 83       	std	Y+5, r24	; 0x05
    4b82:	9e 83       	std	Y+6, r25	; 0x06
    4b84:	ae 01       	movw	r20, r28
    4b86:	46 5e       	subi	r20, 0xE6	; 230
    4b88:	5f 4f       	sbci	r21, 0xFF	; 255
    4b8a:	68 8d       	ldd	r22, Y+24	; 0x18
    4b8c:	79 8d       	ldd	r23, Y+25	; 0x19
    4b8e:	ce 01       	movw	r24, r28
    4b90:	01 96       	adiw	r24, 0x01	; 1
    4b92:	0e 94 94 20 	call	0x4128	; 0x4128 <vfprintf>
    4b96:	ef 81       	ldd	r30, Y+7	; 0x07
    4b98:	f8 85       	ldd	r31, Y+8	; 0x08
    4b9a:	e0 0f       	add	r30, r16
    4b9c:	f1 1f       	adc	r31, r17
    4b9e:	10 82       	st	Z, r1
    4ba0:	2e 96       	adiw	r28, 0x0e	; 14
    4ba2:	cd bf       	out	0x3d, r28	; 61
    4ba4:	de bf       	out	0x3e, r29	; 62
    4ba6:	df 91       	pop	r29
    4ba8:	cf 91       	pop	r28
    4baa:	1f 91       	pop	r17
    4bac:	0f 91       	pop	r16
    4bae:	08 95       	ret

00004bb0 <__ultoa_invert>:
    4bb0:	fa 01       	movw	r30, r20
    4bb2:	aa 27       	eor	r26, r26
    4bb4:	28 30       	cpi	r18, 0x08	; 8
    4bb6:	51 f1       	breq	.+84     	; 0x4c0c <__ultoa_invert+0x5c>
    4bb8:	20 31       	cpi	r18, 0x10	; 16
    4bba:	81 f1       	breq	.+96     	; 0x4c1c <__ultoa_invert+0x6c>
    4bbc:	e8 94       	clt
    4bbe:	6f 93       	push	r22
    4bc0:	6e 7f       	andi	r22, 0xFE	; 254
    4bc2:	6e 5f       	subi	r22, 0xFE	; 254
    4bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    4bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bca:	af 4f       	sbci	r26, 0xFF	; 255
    4bcc:	b1 e0       	ldi	r27, 0x01	; 1
    4bce:	3e d0       	rcall	.+124    	; 0x4c4c <__ultoa_invert+0x9c>
    4bd0:	b4 e0       	ldi	r27, 0x04	; 4
    4bd2:	3c d0       	rcall	.+120    	; 0x4c4c <__ultoa_invert+0x9c>
    4bd4:	67 0f       	add	r22, r23
    4bd6:	78 1f       	adc	r23, r24
    4bd8:	89 1f       	adc	r24, r25
    4bda:	9a 1f       	adc	r25, r26
    4bdc:	a1 1d       	adc	r26, r1
    4bde:	68 0f       	add	r22, r24
    4be0:	79 1f       	adc	r23, r25
    4be2:	8a 1f       	adc	r24, r26
    4be4:	91 1d       	adc	r25, r1
    4be6:	a1 1d       	adc	r26, r1
    4be8:	6a 0f       	add	r22, r26
    4bea:	71 1d       	adc	r23, r1
    4bec:	81 1d       	adc	r24, r1
    4bee:	91 1d       	adc	r25, r1
    4bf0:	a1 1d       	adc	r26, r1
    4bf2:	20 d0       	rcall	.+64     	; 0x4c34 <__ultoa_invert+0x84>
    4bf4:	09 f4       	brne	.+2      	; 0x4bf8 <__ultoa_invert+0x48>
    4bf6:	68 94       	set
    4bf8:	3f 91       	pop	r19
    4bfa:	2a e0       	ldi	r18, 0x0A	; 10
    4bfc:	26 9f       	mul	r18, r22
    4bfe:	11 24       	eor	r1, r1
    4c00:	30 19       	sub	r19, r0
    4c02:	30 5d       	subi	r19, 0xD0	; 208
    4c04:	31 93       	st	Z+, r19
    4c06:	de f6       	brtc	.-74     	; 0x4bbe <__ultoa_invert+0xe>
    4c08:	cf 01       	movw	r24, r30
    4c0a:	08 95       	ret
    4c0c:	46 2f       	mov	r20, r22
    4c0e:	47 70       	andi	r20, 0x07	; 7
    4c10:	40 5d       	subi	r20, 0xD0	; 208
    4c12:	41 93       	st	Z+, r20
    4c14:	b3 e0       	ldi	r27, 0x03	; 3
    4c16:	0f d0       	rcall	.+30     	; 0x4c36 <__ultoa_invert+0x86>
    4c18:	c9 f7       	brne	.-14     	; 0x4c0c <__ultoa_invert+0x5c>
    4c1a:	f6 cf       	rjmp	.-20     	; 0x4c08 <__ultoa_invert+0x58>
    4c1c:	46 2f       	mov	r20, r22
    4c1e:	4f 70       	andi	r20, 0x0F	; 15
    4c20:	40 5d       	subi	r20, 0xD0	; 208
    4c22:	4a 33       	cpi	r20, 0x3A	; 58
    4c24:	18 f0       	brcs	.+6      	; 0x4c2c <__ultoa_invert+0x7c>
    4c26:	49 5d       	subi	r20, 0xD9	; 217
    4c28:	31 fd       	sbrc	r19, 1
    4c2a:	40 52       	subi	r20, 0x20	; 32
    4c2c:	41 93       	st	Z+, r20
    4c2e:	02 d0       	rcall	.+4      	; 0x4c34 <__ultoa_invert+0x84>
    4c30:	a9 f7       	brne	.-22     	; 0x4c1c <__ultoa_invert+0x6c>
    4c32:	ea cf       	rjmp	.-44     	; 0x4c08 <__ultoa_invert+0x58>
    4c34:	b4 e0       	ldi	r27, 0x04	; 4
    4c36:	a6 95       	lsr	r26
    4c38:	97 95       	ror	r25
    4c3a:	87 95       	ror	r24
    4c3c:	77 95       	ror	r23
    4c3e:	67 95       	ror	r22
    4c40:	ba 95       	dec	r27
    4c42:	c9 f7       	brne	.-14     	; 0x4c36 <__ultoa_invert+0x86>
    4c44:	00 97       	sbiw	r24, 0x00	; 0
    4c46:	61 05       	cpc	r22, r1
    4c48:	71 05       	cpc	r23, r1
    4c4a:	08 95       	ret
    4c4c:	9b 01       	movw	r18, r22
    4c4e:	ac 01       	movw	r20, r24
    4c50:	0a 2e       	mov	r0, r26
    4c52:	06 94       	lsr	r0
    4c54:	57 95       	ror	r21
    4c56:	47 95       	ror	r20
    4c58:	37 95       	ror	r19
    4c5a:	27 95       	ror	r18
    4c5c:	ba 95       	dec	r27
    4c5e:	c9 f7       	brne	.-14     	; 0x4c52 <__ultoa_invert+0xa2>
    4c60:	62 0f       	add	r22, r18
    4c62:	73 1f       	adc	r23, r19
    4c64:	84 1f       	adc	r24, r20
    4c66:	95 1f       	adc	r25, r21
    4c68:	a0 1d       	adc	r26, r0
    4c6a:	08 95       	ret

00004c6c <strrev>:
    4c6c:	dc 01       	movw	r26, r24
    4c6e:	fc 01       	movw	r30, r24
    4c70:	67 2f       	mov	r22, r23
    4c72:	71 91       	ld	r23, Z+
    4c74:	77 23       	and	r23, r23
    4c76:	e1 f7       	brne	.-8      	; 0x4c70 <strrev+0x4>
    4c78:	32 97       	sbiw	r30, 0x02	; 2
    4c7a:	04 c0       	rjmp	.+8      	; 0x4c84 <strrev+0x18>
    4c7c:	7c 91       	ld	r23, X
    4c7e:	6d 93       	st	X+, r22
    4c80:	70 83       	st	Z, r23
    4c82:	62 91       	ld	r22, -Z
    4c84:	ae 17       	cp	r26, r30
    4c86:	bf 07       	cpc	r27, r31
    4c88:	c8 f3       	brcs	.-14     	; 0x4c7c <strrev+0x10>
    4c8a:	08 95       	ret

00004c8c <_exit>:
    4c8c:	f8 94       	cli

00004c8e <__stop_program>:
    4c8e:	ff cf       	rjmp	.-2      	; 0x4c8e <__stop_program>
