
picalc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009bf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00802000  00009bf2  00009c86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d17  00802064  00802064  00009cea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009cea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009d48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000898  00000000  00000000  00009d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c35e  00000000  00000000  0000a620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000048cd  00000000  00000000  0001697e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008644  00000000  00000000  0001b24b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002634  00000000  00000000  00023890  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002a526  00000000  00000000  00025ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000536f  00000000  00000000  000503ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b0  00000000  00000000  00055759  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a611  00000000  00000000  00055f09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
       8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
       c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      10:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      14:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      18:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      1c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      20:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      24:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      28:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      2c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      30:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      34:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      38:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__vector_14>
      3c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      40:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      44:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      48:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      4c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      50:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      54:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      58:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      5c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      60:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      64:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      68:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      6c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      70:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      74:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      78:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      7c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      80:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      84:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      88:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      8c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      90:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      94:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      98:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      9c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      ac:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      bc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      cc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      dc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      ec:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      fc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     100:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     104:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     108:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     10c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     110:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     114:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     118:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     11c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     120:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     124:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     128:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     12c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     130:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     134:	0c 94 f1 3a 	jmp	0x75e2	; 0x75e2 <__vector_77>
     138:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     13c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     140:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     144:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     148:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     14c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     150:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     154:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     158:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     15c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     160:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     164:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     168:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     16c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     170:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     174:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     178:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     17c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     180:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     184:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     188:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     18c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     190:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     194:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     198:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     19c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1ac:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1b0:	0c 94 30 3b 	jmp	0x7660	; 0x7660 <__vector_108>
     1b4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1b8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1bc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1cc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1dc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1ec:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1fc:	71 35       	cpi	r23, 0x51	; 81
     1fe:	71 35       	cpi	r23, 0x51	; 81
     200:	71 35       	cpi	r23, 0x51	; 81
     202:	f8 35       	cpi	r31, 0x58	; 88
     204:	c4 35       	cpi	r28, 0x54	; 84
     206:	f2 35       	cpi	r31, 0x52	; 82
     208:	71 35       	cpi	r23, 0x51	; 81
     20a:	71 35       	cpi	r23, 0x51	; 81
     20c:	f8 35       	cpi	r31, 0x58	; 88
     20e:	c4 35       	cpi	r28, 0x54	; 84

00000210 <__trampolines_start>:
     210:	0c 94 f2 35 	jmp	0x6be4	; 0x6be4 <prvProcessReceivedCommands+0x1d0>
     214:	0c 94 71 35 	jmp	0x6ae2	; 0x6ae2 <prvProcessReceivedCommands+0xce>
     218:	0c 94 74 39 	jmp	0x72e8	; 0x72e8 <vCalc>
     21c:	0c 94 28 39 	jmp	0x7250	; 0x7250 <vButton>
     220:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <vEventGroupSetBitsCallback>
     224:	0c 94 f8 35 	jmp	0x6bf0	; 0x6bf0 <prvProcessReceivedCommands+0x1dc>
     228:	0c 94 c3 3d 	jmp	0x7b86	; 0x7b86 <vDisplayUpdateTask>
     22c:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <prvProcessReceivedCommands+0x174>
     230:	0c 94 53 33 	jmp	0x66a6	; 0x66a6 <prvTimerTask>
     234:	0c 94 ea 37 	jmp	0x6fd4	; 0x6fd4 <vGUI>
     238:	0c 94 ac 30 	jmp	0x6158	; 0x6158 <prvIdleTask>

0000023c <__trampolines_end>:
     23c:	6e 61       	ori	r22, 0x1E	; 30
     23e:	6e 00       	.word	0x006e	; ????

00000240 <__c.2332>:
     240:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     250:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     260:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     270:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     280:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     290:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     300:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     310:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     320:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     330:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	cf ef       	ldi	r28, 0xFF	; 255
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df e3       	ldi	r29, 0x3F	; 63
     348:	de bf       	out	0x3e, r29	; 62
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	0c bf       	out	0x3c, r16	; 60

0000034e <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     34e:	eb e7       	ldi	r30, 0x7B	; 123
     350:	fd e2       	ldi	r31, 0x2D	; 45
     352:	8a ea       	ldi	r24, 0xAA	; 170
     354:	90 e4       	ldi	r25, 0x40	; 64
     356:	81 93       	st	Z+, r24
     358:	e0 30       	cpi	r30, 0x00	; 0
     35a:	f9 07       	cpc	r31, r25
     35c:	e0 f3       	brcs	.-8      	; 0x356 <init_mem+0x8>
	...

00000360 <__do_copy_data>:
     360:	10 e2       	ldi	r17, 0x20	; 32
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b0 e2       	ldi	r27, 0x20	; 32
     366:	e2 ef       	ldi	r30, 0xF2	; 242
     368:	fb e9       	ldi	r31, 0x9B	; 155
     36a:	00 e0       	ldi	r16, 0x00	; 0
     36c:	0b bf       	out	0x3b, r16	; 59
     36e:	02 c0       	rjmp	.+4      	; 0x374 <__do_copy_data+0x14>
     370:	07 90       	elpm	r0, Z+
     372:	0d 92       	st	X+, r0
     374:	a4 36       	cpi	r26, 0x64	; 100
     376:	b1 07       	cpc	r27, r17
     378:	d9 f7       	brne	.-10     	; 0x370 <__do_copy_data+0x10>

0000037a <__do_clear_bss>:
     37a:	2d e2       	ldi	r18, 0x2D	; 45
     37c:	a4 e6       	ldi	r26, 0x64	; 100
     37e:	b0 e2       	ldi	r27, 0x20	; 32
     380:	01 c0       	rjmp	.+2      	; 0x384 <.do_clear_bss_start>

00000382 <.do_clear_bss_loop>:
     382:	1d 92       	st	X+, r1

00000384 <.do_clear_bss_start>:
     384:	ab 37       	cpi	r26, 0x7B	; 123
     386:	b2 07       	cpc	r27, r18
     388:	e1 f7       	brne	.-8      	; 0x382 <.do_clear_bss_loop>
     38a:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <main>
     38e:	0c 94 f7 4d 	jmp	0x9bee	; 0x9bee <_exit>

00000392 <__bad_interrupt>:
     392:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000396 <f_split64>:
		i64=approx_high_uint64_word_of_uint64_mult_uint64_pbv_y(&xm, approx_inverse_of_fixpoint_uint64(&ym), 0);
		xex += 1023-yex;
	}
	f_combi_from_fixpoint(&x, xsig^ysig, xex-10, &i64);
	return x;
}
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	a1 97       	sbiw	r28, 0x21	; 33
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	89 83       	std	Y+1, r24	; 0x01
     3ba:	9a 83       	std	Y+2, r25	; 0x02
     3bc:	6b 83       	std	Y+3, r22	; 0x03
     3be:	7c 83       	std	Y+4, r23	; 0x04
     3c0:	4d 83       	std	Y+5, r20	; 0x05
     3c2:	5e 83       	std	Y+6, r21	; 0x06
     3c4:	2f 83       	std	Y+7, r18	; 0x07
     3c6:	38 87       	std	Y+8, r19	; 0x08
     3c8:	09 87       	std	Y+9, r16	; 0x09
     3ca:	e9 81       	ldd	r30, Y+1	; 0x01
     3cc:	fa 81       	ldd	r31, Y+2	; 0x02
     3ce:	20 81       	ld	r18, Z
     3d0:	31 81       	ldd	r19, Z+1	; 0x01
     3d2:	42 81       	ldd	r20, Z+2	; 0x02
     3d4:	53 81       	ldd	r21, Z+3	; 0x03
     3d6:	64 81       	ldd	r22, Z+4	; 0x04
     3d8:	75 81       	ldd	r23, Z+5	; 0x05
     3da:	86 81       	ldd	r24, Z+6	; 0x06
     3dc:	97 81       	ldd	r25, Z+7	; 0x07
     3de:	e2 2f       	mov	r30, r18
     3e0:	ef 7f       	andi	r30, 0xFF	; 255
     3e2:	ea 87       	std	Y+10, r30	; 0x0a
     3e4:	f3 2f       	mov	r31, r19
     3e6:	ff 7f       	andi	r31, 0xFF	; 255
     3e8:	fb 87       	std	Y+11, r31	; 0x0b
     3ea:	e4 2f       	mov	r30, r20
     3ec:	ef 7f       	andi	r30, 0xFF	; 255
     3ee:	ec 87       	std	Y+12, r30	; 0x0c
     3f0:	f5 2f       	mov	r31, r21
     3f2:	ff 7f       	andi	r31, 0xFF	; 255
     3f4:	fd 87       	std	Y+13, r31	; 0x0d
     3f6:	e6 2f       	mov	r30, r22
     3f8:	ef 7f       	andi	r30, 0xFF	; 255
     3fa:	ee 87       	std	Y+14, r30	; 0x0e
     3fc:	f7 2f       	mov	r31, r23
     3fe:	ff 7f       	andi	r31, 0xFF	; 255
     400:	ff 87       	std	Y+15, r31	; 0x0f
     402:	e8 2f       	mov	r30, r24
     404:	ef 70       	andi	r30, 0x0F	; 15
     406:	e8 8b       	std	Y+16, r30	; 0x10
     408:	f9 2f       	mov	r31, r25
     40a:	f0 70       	andi	r31, 0x00	; 0
     40c:	f9 8b       	std	Y+17, r31	; 0x11
     40e:	8f 81       	ldd	r24, Y+7	; 0x07
     410:	98 85       	ldd	r25, Y+8	; 0x08
     412:	2a 85       	ldd	r18, Y+10	; 0x0a
     414:	fc 01       	movw	r30, r24
     416:	20 83       	st	Z, r18
     418:	2b 85       	ldd	r18, Y+11	; 0x0b
     41a:	fc 01       	movw	r30, r24
     41c:	21 83       	std	Z+1, r18	; 0x01
     41e:	2c 85       	ldd	r18, Y+12	; 0x0c
     420:	fc 01       	movw	r30, r24
     422:	22 83       	std	Z+2, r18	; 0x02
     424:	2d 85       	ldd	r18, Y+13	; 0x0d
     426:	fc 01       	movw	r30, r24
     428:	23 83       	std	Z+3, r18	; 0x03
     42a:	2e 85       	ldd	r18, Y+14	; 0x0e
     42c:	fc 01       	movw	r30, r24
     42e:	24 83       	std	Z+4, r18	; 0x04
     430:	2f 85       	ldd	r18, Y+15	; 0x0f
     432:	fc 01       	movw	r30, r24
     434:	25 83       	std	Z+5, r18	; 0x05
     436:	28 89       	ldd	r18, Y+16	; 0x10
     438:	fc 01       	movw	r30, r24
     43a:	26 83       	std	Z+6, r18	; 0x06
     43c:	29 89       	ldd	r18, Y+17	; 0x11
     43e:	fc 01       	movw	r30, r24
     440:	27 83       	std	Z+7, r18	; 0x07
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	9a 81       	ldd	r25, Y+2	; 0x02
     446:	fc 01       	movw	r30, r24
     448:	f0 81       	ld	r31, Z
     44a:	fa 8b       	std	Y+18, r31	; 0x12
     44c:	fc 01       	movw	r30, r24
     44e:	f1 81       	ldd	r31, Z+1	; 0x01
     450:	fb 8b       	std	Y+19, r31	; 0x13
     452:	fc 01       	movw	r30, r24
     454:	f2 81       	ldd	r31, Z+2	; 0x02
     456:	fc 8b       	std	Y+20, r31	; 0x14
     458:	fc 01       	movw	r30, r24
     45a:	f3 81       	ldd	r31, Z+3	; 0x03
     45c:	fd 8b       	std	Y+21, r31	; 0x15
     45e:	fc 01       	movw	r30, r24
     460:	f4 81       	ldd	r31, Z+4	; 0x04
     462:	fe 8b       	std	Y+22, r31	; 0x16
     464:	fc 01       	movw	r30, r24
     466:	f5 81       	ldd	r31, Z+5	; 0x05
     468:	ff 8b       	std	Y+23, r31	; 0x17
     46a:	fc 01       	movw	r30, r24
     46c:	f6 81       	ldd	r31, Z+6	; 0x06
     46e:	f8 8f       	std	Y+24, r31	; 0x18
     470:	fc 01       	movw	r30, r24
     472:	f7 81       	ldd	r31, Z+7	; 0x07
     474:	f9 8f       	std	Y+25, r31	; 0x19
     476:	2a 89       	ldd	r18, Y+18	; 0x12
     478:	3b 89       	ldd	r19, Y+19	; 0x13
     47a:	4c 89       	ldd	r20, Y+20	; 0x14
     47c:	5d 89       	ldd	r21, Y+21	; 0x15
     47e:	6e 89       	ldd	r22, Y+22	; 0x16
     480:	7f 89       	ldd	r23, Y+23	; 0x17
     482:	88 8d       	ldd	r24, Y+24	; 0x18
     484:	99 8d       	ldd	r25, Y+25	; 0x19
     486:	04 e3       	ldi	r16, 0x34	; 52
     488:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
     48c:	2a 8f       	std	Y+26, r18	; 0x1a
     48e:	3b 8f       	std	Y+27, r19	; 0x1b
     490:	4c 8f       	std	Y+28, r20	; 0x1c
     492:	5d 8f       	std	Y+29, r21	; 0x1d
     494:	6e 8f       	std	Y+30, r22	; 0x1e
     496:	7f 8f       	std	Y+31, r23	; 0x1f
     498:	88 a3       	std	Y+32, r24	; 0x20
     49a:	99 a3       	std	Y+33, r25	; 0x21
     49c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     49e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     4a0:	9c 01       	movw	r18, r24
     4a2:	37 70       	andi	r19, 0x07	; 7
     4a4:	8d 81       	ldd	r24, Y+5	; 0x05
     4a6:	9e 81       	ldd	r25, Y+6	; 0x06
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
     4ac:	31 83       	std	Z+1, r19	; 0x01
     4ae:	8d 81       	ldd	r24, Y+5	; 0x05
     4b0:	9e 81       	ldd	r25, Y+6	; 0x06
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	91 81       	ldd	r25, Z+1	; 0x01
     4b8:	89 2b       	or	r24, r25
     4ba:	99 f4       	brne	.+38     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4bc:	8f 81       	ldd	r24, Y+7	; 0x07
     4be:	98 85       	ldd	r25, Y+8	; 0x08
     4c0:	fc 01       	movw	r30, r24
     4c2:	10 82       	st	Z, r1
     4c4:	fc 01       	movw	r30, r24
     4c6:	11 82       	std	Z+1, r1	; 0x01
     4c8:	fc 01       	movw	r30, r24
     4ca:	12 82       	std	Z+2, r1	; 0x02
     4cc:	fc 01       	movw	r30, r24
     4ce:	13 82       	std	Z+3, r1	; 0x03
     4d0:	fc 01       	movw	r30, r24
     4d2:	14 82       	std	Z+4, r1	; 0x04
     4d4:	fc 01       	movw	r30, r24
     4d6:	15 82       	std	Z+5, r1	; 0x05
     4d8:	fc 01       	movw	r30, r24
     4da:	16 82       	std	Z+6, r1	; 0x06
     4dc:	fc 01       	movw	r30, r24
     4de:	17 82       	std	Z+7, r1	; 0x07
     4e0:	3c c0       	rjmp	.+120    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     4e2:	8d 81       	ldd	r24, Y+5	; 0x05
     4e4:	9e 81       	ldd	r25, Y+6	; 0x06
     4e6:	fc 01       	movw	r30, r24
     4e8:	80 81       	ld	r24, Z
     4ea:	91 81       	ldd	r25, Z+1	; 0x01
     4ec:	8f 3f       	cpi	r24, 0xFF	; 255
     4ee:	97 40       	sbci	r25, 0x07	; 7
     4f0:	a1 f1       	breq	.+104    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     4f2:	ef 81       	ldd	r30, Y+7	; 0x07
     4f4:	f8 85       	ldd	r31, Y+8	; 0x08
     4f6:	20 81       	ld	r18, Z
     4f8:	31 81       	ldd	r19, Z+1	; 0x01
     4fa:	42 81       	ldd	r20, Z+2	; 0x02
     4fc:	53 81       	ldd	r21, Z+3	; 0x03
     4fe:	64 81       	ldd	r22, Z+4	; 0x04
     500:	75 81       	ldd	r23, Z+5	; 0x05
     502:	86 81       	ldd	r24, Z+6	; 0x06
     504:	97 81       	ldd	r25, Z+7	; 0x07
     506:	e2 2f       	mov	r30, r18
     508:	e0 60       	ori	r30, 0x00	; 0
     50a:	8e 2e       	mov	r8, r30
     50c:	f3 2f       	mov	r31, r19
     50e:	f0 60       	ori	r31, 0x00	; 0
     510:	9f 2e       	mov	r9, r31
     512:	e4 2f       	mov	r30, r20
     514:	e0 60       	ori	r30, 0x00	; 0
     516:	ae 2e       	mov	r10, r30
     518:	f5 2f       	mov	r31, r21
     51a:	f0 60       	ori	r31, 0x00	; 0
     51c:	bf 2e       	mov	r11, r31
     51e:	e6 2f       	mov	r30, r22
     520:	e0 60       	ori	r30, 0x00	; 0
     522:	ce 2e       	mov	r12, r30
     524:	f7 2f       	mov	r31, r23
     526:	f0 60       	ori	r31, 0x00	; 0
     528:	df 2e       	mov	r13, r31
     52a:	e8 2f       	mov	r30, r24
     52c:	e0 61       	ori	r30, 0x10	; 16
     52e:	ee 2e       	mov	r14, r30
     530:	f9 2f       	mov	r31, r25
     532:	f0 60       	ori	r31, 0x00	; 0
     534:	ff 2e       	mov	r15, r31
     536:	8f 81       	ldd	r24, Y+7	; 0x07
     538:	98 85       	ldd	r25, Y+8	; 0x08
     53a:	fc 01       	movw	r30, r24
     53c:	80 82       	st	Z, r8
     53e:	fc 01       	movw	r30, r24
     540:	91 82       	std	Z+1, r9	; 0x01
     542:	fc 01       	movw	r30, r24
     544:	a2 82       	std	Z+2, r10	; 0x02
     546:	fc 01       	movw	r30, r24
     548:	b3 82       	std	Z+3, r11	; 0x03
     54a:	fc 01       	movw	r30, r24
     54c:	c4 82       	std	Z+4, r12	; 0x04
     54e:	fc 01       	movw	r30, r24
     550:	d5 82       	std	Z+5, r13	; 0x05
     552:	fc 01       	movw	r30, r24
     554:	e6 82       	std	Z+6, r14	; 0x06
     556:	fc 01       	movw	r30, r24
     558:	f7 82       	std	Z+7, r15	; 0x07
     55a:	8f 81       	ldd	r24, Y+7	; 0x07
     55c:	98 85       	ldd	r25, Y+8	; 0x08
     55e:	fc 01       	movw	r30, r24
     560:	a0 80       	ld	r10, Z
     562:	fc 01       	movw	r30, r24
     564:	b1 80       	ldd	r11, Z+1	; 0x01
     566:	fc 01       	movw	r30, r24
     568:	c2 80       	ldd	r12, Z+2	; 0x02
     56a:	fc 01       	movw	r30, r24
     56c:	d3 80       	ldd	r13, Z+3	; 0x03
     56e:	fc 01       	movw	r30, r24
     570:	e4 80       	ldd	r14, Z+4	; 0x04
     572:	fc 01       	movw	r30, r24
     574:	f5 80       	ldd	r15, Z+5	; 0x05
     576:	fc 01       	movw	r30, r24
     578:	06 81       	ldd	r16, Z+6	; 0x06
     57a:	fc 01       	movw	r30, r24
     57c:	17 81       	ldd	r17, Z+7	; 0x07
     57e:	89 85       	ldd	r24, Y+9	; 0x09
     580:	e8 2f       	mov	r30, r24
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	2a 2d       	mov	r18, r10
     586:	3b 2d       	mov	r19, r11
     588:	4c 2d       	mov	r20, r12
     58a:	5d 2d       	mov	r21, r13
     58c:	6e 2d       	mov	r22, r14
     58e:	7f 2d       	mov	r23, r15
     590:	80 2f       	mov	r24, r16
     592:	91 2f       	mov	r25, r17
     594:	0e 2f       	mov	r16, r30
     596:	0e 94 76 4b 	call	0x96ec	; 0x96ec <__ashldi3>
     59a:	a2 2e       	mov	r10, r18
     59c:	b3 2e       	mov	r11, r19
     59e:	c4 2e       	mov	r12, r20
     5a0:	d5 2e       	mov	r13, r21
     5a2:	e6 2e       	mov	r14, r22
     5a4:	f7 2e       	mov	r15, r23
     5a6:	08 2f       	mov	r16, r24
     5a8:	19 2f       	mov	r17, r25
     5aa:	8f 81       	ldd	r24, Y+7	; 0x07
     5ac:	98 85       	ldd	r25, Y+8	; 0x08
     5ae:	fc 01       	movw	r30, r24
     5b0:	a0 82       	st	Z, r10
     5b2:	fc 01       	movw	r30, r24
     5b4:	b1 82       	std	Z+1, r11	; 0x01
     5b6:	fc 01       	movw	r30, r24
     5b8:	c2 82       	std	Z+2, r12	; 0x02
     5ba:	fc 01       	movw	r30, r24
     5bc:	d3 82       	std	Z+3, r13	; 0x03
     5be:	fc 01       	movw	r30, r24
     5c0:	e4 82       	std	Z+4, r14	; 0x04
     5c2:	fc 01       	movw	r30, r24
     5c4:	f5 82       	std	Z+5, r15	; 0x05
     5c6:	fc 01       	movw	r30, r24
     5c8:	06 83       	std	Z+6, r16	; 0x06
     5ca:	fc 01       	movw	r30, r24
     5cc:	17 83       	std	Z+7, r17	; 0x07
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	fc 01       	movw	r30, r24
     5d4:	a0 80       	ld	r10, Z
     5d6:	fc 01       	movw	r30, r24
     5d8:	b1 80       	ldd	r11, Z+1	; 0x01
     5da:	fc 01       	movw	r30, r24
     5dc:	c2 80       	ldd	r12, Z+2	; 0x02
     5de:	fc 01       	movw	r30, r24
     5e0:	d3 80       	ldd	r13, Z+3	; 0x03
     5e2:	fc 01       	movw	r30, r24
     5e4:	e4 80       	ldd	r14, Z+4	; 0x04
     5e6:	fc 01       	movw	r30, r24
     5e8:	f5 80       	ldd	r15, Z+5	; 0x05
     5ea:	fc 01       	movw	r30, r24
     5ec:	06 81       	ldd	r16, Z+6	; 0x06
     5ee:	fc 01       	movw	r30, r24
     5f0:	17 81       	ldd	r17, Z+7	; 0x07
     5f2:	2a 2d       	mov	r18, r10
     5f4:	3b 2d       	mov	r19, r11
     5f6:	4c 2d       	mov	r20, r12
     5f8:	5d 2d       	mov	r21, r13
     5fa:	6e 2d       	mov	r22, r14
     5fc:	7f 2d       	mov	r23, r15
     5fe:	80 2f       	mov	r24, r16
     600:	91 2f       	mov	r25, r17
     602:	0f e3       	ldi	r16, 0x3F	; 63
     604:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
     608:	a2 2e       	mov	r10, r18
     60a:	b3 2e       	mov	r11, r19
     60c:	c4 2e       	mov	r12, r20
     60e:	d5 2e       	mov	r13, r21
     610:	e6 2e       	mov	r14, r22
     612:	f7 2e       	mov	r15, r23
     614:	08 2f       	mov	r16, r24
     616:	19 2f       	mov	r17, r25
     618:	2a 2d       	mov	r18, r10
     61a:	8b 81       	ldd	r24, Y+3	; 0x03
     61c:	9c 81       	ldd	r25, Y+4	; 0x04
     61e:	fc 01       	movw	r30, r24
     620:	20 83       	st	Z, r18
     622:	00 00       	nop
     624:	a1 96       	adiw	r28, 0x21	; 33
     626:	cd bf       	out	0x3d, r28	; 61
     628:	de bf       	out	0x3e, r29	; 62
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	af 90       	pop	r10
     63e:	9f 90       	pop	r9
     640:	8f 90       	pop	r8
     642:	08 95       	ret

00000644 <f_combi_from_fixpoint>:
     644:	2f 92       	push	r2
     646:	3f 92       	push	r3
     648:	4f 92       	push	r4
     64a:	5f 92       	push	r5
     64c:	6f 92       	push	r6
     64e:	7f 92       	push	r7
     650:	8f 92       	push	r8
     652:	9f 92       	push	r9
     654:	af 92       	push	r10
     656:	bf 92       	push	r11
     658:	cf 92       	push	r12
     65a:	df 92       	push	r13
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	c0 56       	subi	r28, 0x60	; 96
     66e:	d1 09       	sbc	r29, r1
     670:	cd bf       	out	0x3d, r28	; 61
     672:	de bf       	out	0x3e, r29	; 62
     674:	8a 87       	std	Y+10, r24	; 0x0a
     676:	9b 87       	std	Y+11, r25	; 0x0b
     678:	6c 87       	std	Y+12, r22	; 0x0c
     67a:	4d 87       	std	Y+13, r20	; 0x0d
     67c:	5e 87       	std	Y+14, r21	; 0x0e
     67e:	2f 87       	std	Y+15, r18	; 0x0f
     680:	38 8b       	std	Y+16, r19	; 0x10
     682:	19 82       	std	Y+1, r1	; 0x01
     684:	8f 85       	ldd	r24, Y+15	; 0x0f
     686:	98 89       	ldd	r25, Y+16	; 0x10
     688:	fc 01       	movw	r30, r24
     68a:	20 81       	ld	r18, Z
     68c:	2a 83       	std	Y+2, r18	; 0x02
     68e:	fc 01       	movw	r30, r24
     690:	21 81       	ldd	r18, Z+1	; 0x01
     692:	2b 83       	std	Y+3, r18	; 0x03
     694:	fc 01       	movw	r30, r24
     696:	22 81       	ldd	r18, Z+2	; 0x02
     698:	2c 83       	std	Y+4, r18	; 0x04
     69a:	fc 01       	movw	r30, r24
     69c:	23 81       	ldd	r18, Z+3	; 0x03
     69e:	2d 83       	std	Y+5, r18	; 0x05
     6a0:	fc 01       	movw	r30, r24
     6a2:	24 81       	ldd	r18, Z+4	; 0x04
     6a4:	2e 83       	std	Y+6, r18	; 0x06
     6a6:	fc 01       	movw	r30, r24
     6a8:	25 81       	ldd	r18, Z+5	; 0x05
     6aa:	2f 83       	std	Y+7, r18	; 0x07
     6ac:	fc 01       	movw	r30, r24
     6ae:	26 81       	ldd	r18, Z+6	; 0x06
     6b0:	28 87       	std	Y+8, r18	; 0x08
     6b2:	fc 01       	movw	r30, r24
     6b4:	87 81       	ldd	r24, Z+7	; 0x07
     6b6:	89 87       	std	Y+9, r24	; 0x09
     6b8:	aa 80       	ldd	r10, Y+2	; 0x02
     6ba:	bb 80       	ldd	r11, Y+3	; 0x03
     6bc:	cc 80       	ldd	r12, Y+4	; 0x04
     6be:	dd 80       	ldd	r13, Y+5	; 0x05
     6c0:	ee 80       	ldd	r14, Y+6	; 0x06
     6c2:	ff 80       	ldd	r15, Y+7	; 0x07
     6c4:	08 85       	ldd	r16, Y+8	; 0x08
     6c6:	19 85       	ldd	r17, Y+9	; 0x09
     6c8:	2a 2d       	mov	r18, r10
     6ca:	3b 2d       	mov	r19, r11
     6cc:	4c 2d       	mov	r20, r12
     6ce:	5d 2d       	mov	r21, r13
     6d0:	6e 2d       	mov	r22, r14
     6d2:	7f 2d       	mov	r23, r15
     6d4:	80 2f       	mov	r24, r16
     6d6:	91 2f       	mov	r25, r17
     6d8:	a0 e0       	ldi	r26, 0x00	; 0
     6da:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
     6de:	09 f4       	brne	.+2      	; 0x6e2 <f_combi_from_fixpoint+0x9e>
     6e0:	15 c2       	rjmp	.+1066   	; 0xb0c <f_combi_from_fixpoint+0x4c8>
     6e2:	20 c0       	rjmp	.+64     	; 0x724 <f_combi_from_fixpoint+0xe0>
     6e4:	2a 81       	ldd	r18, Y+2	; 0x02
     6e6:	3b 81       	ldd	r19, Y+3	; 0x03
     6e8:	4c 81       	ldd	r20, Y+4	; 0x04
     6ea:	5d 81       	ldd	r21, Y+5	; 0x05
     6ec:	6e 81       	ldd	r22, Y+6	; 0x06
     6ee:	7f 81       	ldd	r23, Y+7	; 0x07
     6f0:	88 85       	ldd	r24, Y+8	; 0x08
     6f2:	99 85       	ldd	r25, Y+9	; 0x09
     6f4:	08 e0       	ldi	r16, 0x08	; 8
     6f6:	0e 94 76 4b 	call	0x96ec	; 0x96ec <__ashldi3>
     6fa:	a2 2e       	mov	r10, r18
     6fc:	b3 2e       	mov	r11, r19
     6fe:	c4 2e       	mov	r12, r20
     700:	d5 2e       	mov	r13, r21
     702:	e6 2e       	mov	r14, r22
     704:	f7 2e       	mov	r15, r23
     706:	08 2f       	mov	r16, r24
     708:	19 2f       	mov	r17, r25
     70a:	aa 82       	std	Y+2, r10	; 0x02
     70c:	bb 82       	std	Y+3, r11	; 0x03
     70e:	cc 82       	std	Y+4, r12	; 0x04
     710:	dd 82       	std	Y+5, r13	; 0x05
     712:	ee 82       	std	Y+6, r14	; 0x06
     714:	ff 82       	std	Y+7, r15	; 0x07
     716:	08 87       	std	Y+8, r16	; 0x08
     718:	19 87       	std	Y+9, r17	; 0x09
     71a:	8d 85       	ldd	r24, Y+13	; 0x0d
     71c:	9e 85       	ldd	r25, Y+14	; 0x0e
     71e:	08 97       	sbiw	r24, 0x08	; 8
     720:	8d 87       	std	Y+13, r24	; 0x0d
     722:	9e 87       	std	Y+14, r25	; 0x0e
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	f8 2f       	mov	r31, r24
     728:	f0 70       	andi	r31, 0x00	; 0
     72a:	2f 2e       	mov	r2, r31
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	28 2f       	mov	r18, r24
     730:	20 70       	andi	r18, 0x00	; 0
     732:	32 2e       	mov	r3, r18
     734:	8c 81       	ldd	r24, Y+4	; 0x04
     736:	98 2f       	mov	r25, r24
     738:	90 70       	andi	r25, 0x00	; 0
     73a:	49 2e       	mov	r4, r25
     73c:	8d 81       	ldd	r24, Y+5	; 0x05
     73e:	e8 2f       	mov	r30, r24
     740:	e0 70       	andi	r30, 0x00	; 0
     742:	5e 2e       	mov	r5, r30
     744:	8e 81       	ldd	r24, Y+6	; 0x06
     746:	f8 2f       	mov	r31, r24
     748:	f0 70       	andi	r31, 0x00	; 0
     74a:	6f 2e       	mov	r6, r31
     74c:	8f 81       	ldd	r24, Y+7	; 0x07
     74e:	28 2f       	mov	r18, r24
     750:	20 7e       	andi	r18, 0xE0	; 224
     752:	72 2e       	mov	r7, r18
     754:	88 85       	ldd	r24, Y+8	; 0x08
     756:	98 2f       	mov	r25, r24
     758:	9f 7f       	andi	r25, 0xFF	; 255
     75a:	89 2e       	mov	r8, r25
     75c:	89 85       	ldd	r24, Y+9	; 0x09
     75e:	e8 2f       	mov	r30, r24
     760:	ef 7f       	andi	r30, 0xFF	; 255
     762:	9e 2e       	mov	r9, r30
     764:	22 2d       	mov	r18, r2
     766:	33 2d       	mov	r19, r3
     768:	44 2d       	mov	r20, r4
     76a:	55 2d       	mov	r21, r5
     76c:	66 2d       	mov	r22, r6
     76e:	77 2d       	mov	r23, r7
     770:	88 2d       	mov	r24, r8
     772:	99 2d       	mov	r25, r9
     774:	a0 e0       	ldi	r26, 0x00	; 0
     776:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
     77a:	09 f4       	brne	.+2      	; 0x77e <f_combi_from_fixpoint+0x13a>
     77c:	b3 cf       	rjmp	.-154    	; 0x6e4 <f_combi_from_fixpoint+0xa0>
     77e:	20 c0       	rjmp	.+64     	; 0x7c0 <f_combi_from_fixpoint+0x17c>
     780:	2a 81       	ldd	r18, Y+2	; 0x02
     782:	3b 81       	ldd	r19, Y+3	; 0x03
     784:	4c 81       	ldd	r20, Y+4	; 0x04
     786:	5d 81       	ldd	r21, Y+5	; 0x05
     788:	6e 81       	ldd	r22, Y+6	; 0x06
     78a:	7f 81       	ldd	r23, Y+7	; 0x07
     78c:	88 85       	ldd	r24, Y+8	; 0x08
     78e:	99 85       	ldd	r25, Y+9	; 0x09
     790:	01 e0       	ldi	r16, 0x01	; 1
     792:	0e 94 76 4b 	call	0x96ec	; 0x96ec <__ashldi3>
     796:	a2 2e       	mov	r10, r18
     798:	b3 2e       	mov	r11, r19
     79a:	c4 2e       	mov	r12, r20
     79c:	d5 2e       	mov	r13, r21
     79e:	e6 2e       	mov	r14, r22
     7a0:	f7 2e       	mov	r15, r23
     7a2:	08 2f       	mov	r16, r24
     7a4:	19 2f       	mov	r17, r25
     7a6:	aa 82       	std	Y+2, r10	; 0x02
     7a8:	bb 82       	std	Y+3, r11	; 0x03
     7aa:	cc 82       	std	Y+4, r12	; 0x04
     7ac:	dd 82       	std	Y+5, r13	; 0x05
     7ae:	ee 82       	std	Y+6, r14	; 0x06
     7b0:	ff 82       	std	Y+7, r15	; 0x07
     7b2:	08 87       	std	Y+8, r16	; 0x08
     7b4:	19 87       	std	Y+9, r17	; 0x09
     7b6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7b8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	8d 87       	std	Y+13, r24	; 0x0d
     7be:	9e 87       	std	Y+14, r25	; 0x0e
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	f8 2f       	mov	r31, r24
     7c4:	f0 70       	andi	r31, 0x00	; 0
     7c6:	f9 8b       	std	Y+17, r31	; 0x11
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	28 2f       	mov	r18, r24
     7cc:	20 70       	andi	r18, 0x00	; 0
     7ce:	2a 8b       	std	Y+18, r18	; 0x12
     7d0:	8c 81       	ldd	r24, Y+4	; 0x04
     7d2:	98 2f       	mov	r25, r24
     7d4:	90 70       	andi	r25, 0x00	; 0
     7d6:	9b 8b       	std	Y+19, r25	; 0x13
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	e8 2f       	mov	r30, r24
     7dc:	e0 70       	andi	r30, 0x00	; 0
     7de:	ec 8b       	std	Y+20, r30	; 0x14
     7e0:	8e 81       	ldd	r24, Y+6	; 0x06
     7e2:	f8 2f       	mov	r31, r24
     7e4:	f0 70       	andi	r31, 0x00	; 0
     7e6:	fd 8b       	std	Y+21, r31	; 0x15
     7e8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ea:	28 2f       	mov	r18, r24
     7ec:	20 70       	andi	r18, 0x00	; 0
     7ee:	2e 8b       	std	Y+22, r18	; 0x16
     7f0:	88 85       	ldd	r24, Y+8	; 0x08
     7f2:	98 2f       	mov	r25, r24
     7f4:	90 7f       	andi	r25, 0xF0	; 240
     7f6:	9f 8b       	std	Y+23, r25	; 0x17
     7f8:	89 85       	ldd	r24, Y+9	; 0x09
     7fa:	e8 2f       	mov	r30, r24
     7fc:	ef 7f       	andi	r30, 0xFF	; 255
     7fe:	e8 8f       	std	Y+24, r30	; 0x18
     800:	29 89       	ldd	r18, Y+17	; 0x11
     802:	3a 89       	ldd	r19, Y+18	; 0x12
     804:	4b 89       	ldd	r20, Y+19	; 0x13
     806:	5c 89       	ldd	r21, Y+20	; 0x14
     808:	6d 89       	ldd	r22, Y+21	; 0x15
     80a:	7e 89       	ldd	r23, Y+22	; 0x16
     80c:	8f 89       	ldd	r24, Y+23	; 0x17
     80e:	98 8d       	ldd	r25, Y+24	; 0x18
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
     816:	09 f4       	brne	.+2      	; 0x81a <f_combi_from_fixpoint+0x1d6>
     818:	b3 cf       	rjmp	.-154    	; 0x780 <f_combi_from_fixpoint+0x13c>
     81a:	4f c0       	rjmp	.+158    	; 0x8ba <f_combi_from_fixpoint+0x276>
     81c:	8a 81       	ldd	r24, Y+2	; 0x02
     81e:	f8 2f       	mov	r31, r24
     820:	f8 70       	andi	r31, 0x08	; 8
     822:	f9 a3       	std	Y+33, r31	; 0x21
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	28 2f       	mov	r18, r24
     828:	20 70       	andi	r18, 0x00	; 0
     82a:	2a a3       	std	Y+34, r18	; 0x22
     82c:	8c 81       	ldd	r24, Y+4	; 0x04
     82e:	98 2f       	mov	r25, r24
     830:	90 70       	andi	r25, 0x00	; 0
     832:	9b a3       	std	Y+35, r25	; 0x23
     834:	8d 81       	ldd	r24, Y+5	; 0x05
     836:	e8 2f       	mov	r30, r24
     838:	e0 70       	andi	r30, 0x00	; 0
     83a:	ec a3       	std	Y+36, r30	; 0x24
     83c:	8e 81       	ldd	r24, Y+6	; 0x06
     83e:	f8 2f       	mov	r31, r24
     840:	f0 70       	andi	r31, 0x00	; 0
     842:	fd a3       	std	Y+37, r31	; 0x25
     844:	8f 81       	ldd	r24, Y+7	; 0x07
     846:	28 2f       	mov	r18, r24
     848:	20 70       	andi	r18, 0x00	; 0
     84a:	2e a3       	std	Y+38, r18	; 0x26
     84c:	88 85       	ldd	r24, Y+8	; 0x08
     84e:	98 2f       	mov	r25, r24
     850:	90 70       	andi	r25, 0x00	; 0
     852:	9f a3       	std	Y+39, r25	; 0x27
     854:	89 85       	ldd	r24, Y+9	; 0x09
     856:	e8 2f       	mov	r30, r24
     858:	e0 70       	andi	r30, 0x00	; 0
     85a:	e8 a7       	std	Y+40, r30	; 0x28
     85c:	e1 e0       	ldi	r30, 0x01	; 1
     85e:	29 a1       	ldd	r18, Y+33	; 0x21
     860:	3a a1       	ldd	r19, Y+34	; 0x22
     862:	4b a1       	ldd	r20, Y+35	; 0x23
     864:	5c a1       	ldd	r21, Y+36	; 0x24
     866:	6d a1       	ldd	r22, Y+37	; 0x25
     868:	7e a1       	ldd	r23, Y+38	; 0x26
     86a:	8f a1       	ldd	r24, Y+39	; 0x27
     86c:	98 a5       	ldd	r25, Y+40	; 0x28
     86e:	a0 e0       	ldi	r26, 0x00	; 0
     870:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
     874:	09 f4       	brne	.+2      	; 0x878 <f_combi_from_fixpoint+0x234>
     876:	e0 e0       	ldi	r30, 0x00	; 0
     878:	e9 83       	std	Y+1, r30	; 0x01
     87a:	2a 81       	ldd	r18, Y+2	; 0x02
     87c:	3b 81       	ldd	r19, Y+3	; 0x03
     87e:	4c 81       	ldd	r20, Y+4	; 0x04
     880:	5d 81       	ldd	r21, Y+5	; 0x05
     882:	6e 81       	ldd	r22, Y+6	; 0x06
     884:	7f 81       	ldd	r23, Y+7	; 0x07
     886:	88 85       	ldd	r24, Y+8	; 0x08
     888:	99 85       	ldd	r25, Y+9	; 0x09
     88a:	04 e0       	ldi	r16, 0x04	; 4
     88c:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
     890:	a2 2e       	mov	r10, r18
     892:	b3 2e       	mov	r11, r19
     894:	c4 2e       	mov	r12, r20
     896:	d5 2e       	mov	r13, r21
     898:	e6 2e       	mov	r14, r22
     89a:	f7 2e       	mov	r15, r23
     89c:	08 2f       	mov	r16, r24
     89e:	19 2f       	mov	r17, r25
     8a0:	aa 82       	std	Y+2, r10	; 0x02
     8a2:	bb 82       	std	Y+3, r11	; 0x03
     8a4:	cc 82       	std	Y+4, r12	; 0x04
     8a6:	dd 82       	std	Y+5, r13	; 0x05
     8a8:	ee 82       	std	Y+6, r14	; 0x06
     8aa:	ff 82       	std	Y+7, r15	; 0x07
     8ac:	08 87       	std	Y+8, r16	; 0x08
     8ae:	19 87       	std	Y+9, r17	; 0x09
     8b0:	8d 85       	ldd	r24, Y+13	; 0x0d
     8b2:	9e 85       	ldd	r25, Y+14	; 0x0e
     8b4:	04 96       	adiw	r24, 0x04	; 4
     8b6:	8d 87       	std	Y+13, r24	; 0x0d
     8b8:	9e 87       	std	Y+14, r25	; 0x0e
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	f8 2f       	mov	r31, r24
     8be:	f0 70       	andi	r31, 0x00	; 0
     8c0:	f9 8f       	std	Y+25, r31	; 0x19
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	28 2f       	mov	r18, r24
     8c6:	20 70       	andi	r18, 0x00	; 0
     8c8:	2a 8f       	std	Y+26, r18	; 0x1a
     8ca:	8c 81       	ldd	r24, Y+4	; 0x04
     8cc:	98 2f       	mov	r25, r24
     8ce:	90 70       	andi	r25, 0x00	; 0
     8d0:	9b 8f       	std	Y+27, r25	; 0x1b
     8d2:	8d 81       	ldd	r24, Y+5	; 0x05
     8d4:	e8 2f       	mov	r30, r24
     8d6:	e0 70       	andi	r30, 0x00	; 0
     8d8:	ec 8f       	std	Y+28, r30	; 0x1c
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	f8 2f       	mov	r31, r24
     8de:	f0 70       	andi	r31, 0x00	; 0
     8e0:	fd 8f       	std	Y+29, r31	; 0x1d
     8e2:	8f 81       	ldd	r24, Y+7	; 0x07
     8e4:	28 2f       	mov	r18, r24
     8e6:	20 70       	andi	r18, 0x00	; 0
     8e8:	2e 8f       	std	Y+30, r18	; 0x1e
     8ea:	88 85       	ldd	r24, Y+8	; 0x08
     8ec:	98 2f       	mov	r25, r24
     8ee:	90 70       	andi	r25, 0x00	; 0
     8f0:	9f 8f       	std	Y+31, r25	; 0x1f
     8f2:	89 85       	ldd	r24, Y+9	; 0x09
     8f4:	e8 2f       	mov	r30, r24
     8f6:	ef 7f       	andi	r30, 0xFF	; 255
     8f8:	e8 a3       	std	Y+32, r30	; 0x20
     8fa:	29 8d       	ldd	r18, Y+25	; 0x19
     8fc:	3a 8d       	ldd	r19, Y+26	; 0x1a
     8fe:	4b 8d       	ldd	r20, Y+27	; 0x1b
     900:	5c 8d       	ldd	r21, Y+28	; 0x1c
     902:	6d 8d       	ldd	r22, Y+29	; 0x1d
     904:	7e 8d       	ldd	r23, Y+30	; 0x1e
     906:	8f 8d       	ldd	r24, Y+31	; 0x1f
     908:	98 a1       	ldd	r25, Y+32	; 0x20
     90a:	a0 e0       	ldi	r26, 0x00	; 0
     90c:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
     910:	09 f0       	breq	.+2      	; 0x914 <f_combi_from_fixpoint+0x2d0>
     912:	84 cf       	rjmp	.-248    	; 0x81c <f_combi_from_fixpoint+0x1d8>
     914:	4f c0       	rjmp	.+158    	; 0x9b4 <f_combi_from_fixpoint+0x370>
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	f8 2f       	mov	r31, r24
     91a:	f1 70       	andi	r31, 0x01	; 1
     91c:	f9 ab       	std	Y+49, r31	; 0x31
     91e:	8b 81       	ldd	r24, Y+3	; 0x03
     920:	28 2f       	mov	r18, r24
     922:	20 70       	andi	r18, 0x00	; 0
     924:	2a ab       	std	Y+50, r18	; 0x32
     926:	8c 81       	ldd	r24, Y+4	; 0x04
     928:	98 2f       	mov	r25, r24
     92a:	90 70       	andi	r25, 0x00	; 0
     92c:	9b ab       	std	Y+51, r25	; 0x33
     92e:	8d 81       	ldd	r24, Y+5	; 0x05
     930:	e8 2f       	mov	r30, r24
     932:	e0 70       	andi	r30, 0x00	; 0
     934:	ec ab       	std	Y+52, r30	; 0x34
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	f8 2f       	mov	r31, r24
     93a:	f0 70       	andi	r31, 0x00	; 0
     93c:	fd ab       	std	Y+53, r31	; 0x35
     93e:	8f 81       	ldd	r24, Y+7	; 0x07
     940:	28 2f       	mov	r18, r24
     942:	20 70       	andi	r18, 0x00	; 0
     944:	2e ab       	std	Y+54, r18	; 0x36
     946:	88 85       	ldd	r24, Y+8	; 0x08
     948:	98 2f       	mov	r25, r24
     94a:	90 70       	andi	r25, 0x00	; 0
     94c:	9f ab       	std	Y+55, r25	; 0x37
     94e:	89 85       	ldd	r24, Y+9	; 0x09
     950:	e8 2f       	mov	r30, r24
     952:	e0 70       	andi	r30, 0x00	; 0
     954:	e8 af       	std	Y+56, r30	; 0x38
     956:	e1 e0       	ldi	r30, 0x01	; 1
     958:	29 a9       	ldd	r18, Y+49	; 0x31
     95a:	3a a9       	ldd	r19, Y+50	; 0x32
     95c:	4b a9       	ldd	r20, Y+51	; 0x33
     95e:	5c a9       	ldd	r21, Y+52	; 0x34
     960:	6d a9       	ldd	r22, Y+53	; 0x35
     962:	7e a9       	ldd	r23, Y+54	; 0x36
     964:	8f a9       	ldd	r24, Y+55	; 0x37
     966:	98 ad       	ldd	r25, Y+56	; 0x38
     968:	a0 e0       	ldi	r26, 0x00	; 0
     96a:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
     96e:	09 f4       	brne	.+2      	; 0x972 <f_combi_from_fixpoint+0x32e>
     970:	e0 e0       	ldi	r30, 0x00	; 0
     972:	e9 83       	std	Y+1, r30	; 0x01
     974:	2a 81       	ldd	r18, Y+2	; 0x02
     976:	3b 81       	ldd	r19, Y+3	; 0x03
     978:	4c 81       	ldd	r20, Y+4	; 0x04
     97a:	5d 81       	ldd	r21, Y+5	; 0x05
     97c:	6e 81       	ldd	r22, Y+6	; 0x06
     97e:	7f 81       	ldd	r23, Y+7	; 0x07
     980:	88 85       	ldd	r24, Y+8	; 0x08
     982:	99 85       	ldd	r25, Y+9	; 0x09
     984:	01 e0       	ldi	r16, 0x01	; 1
     986:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
     98a:	a2 2e       	mov	r10, r18
     98c:	b3 2e       	mov	r11, r19
     98e:	c4 2e       	mov	r12, r20
     990:	d5 2e       	mov	r13, r21
     992:	e6 2e       	mov	r14, r22
     994:	f7 2e       	mov	r15, r23
     996:	08 2f       	mov	r16, r24
     998:	19 2f       	mov	r17, r25
     99a:	aa 82       	std	Y+2, r10	; 0x02
     99c:	bb 82       	std	Y+3, r11	; 0x03
     99e:	cc 82       	std	Y+4, r12	; 0x04
     9a0:	dd 82       	std	Y+5, r13	; 0x05
     9a2:	ee 82       	std	Y+6, r14	; 0x06
     9a4:	ff 82       	std	Y+7, r15	; 0x07
     9a6:	08 87       	std	Y+8, r16	; 0x08
     9a8:	19 87       	std	Y+9, r17	; 0x09
     9aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ac:	9e 85       	ldd	r25, Y+14	; 0x0e
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	8d 87       	std	Y+13, r24	; 0x0d
     9b2:	9e 87       	std	Y+14, r25	; 0x0e
     9b4:	8a 81       	ldd	r24, Y+2	; 0x02
     9b6:	f8 2f       	mov	r31, r24
     9b8:	f0 70       	andi	r31, 0x00	; 0
     9ba:	f9 a7       	std	Y+41, r31	; 0x29
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	28 2f       	mov	r18, r24
     9c0:	20 70       	andi	r18, 0x00	; 0
     9c2:	2a a7       	std	Y+42, r18	; 0x2a
     9c4:	8c 81       	ldd	r24, Y+4	; 0x04
     9c6:	98 2f       	mov	r25, r24
     9c8:	90 70       	andi	r25, 0x00	; 0
     9ca:	9b a7       	std	Y+43, r25	; 0x2b
     9cc:	8d 81       	ldd	r24, Y+5	; 0x05
     9ce:	e8 2f       	mov	r30, r24
     9d0:	e0 70       	andi	r30, 0x00	; 0
     9d2:	ec a7       	std	Y+44, r30	; 0x2c
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	f8 2f       	mov	r31, r24
     9d8:	f0 70       	andi	r31, 0x00	; 0
     9da:	fd a7       	std	Y+45, r31	; 0x2d
     9dc:	8f 81       	ldd	r24, Y+7	; 0x07
     9de:	28 2f       	mov	r18, r24
     9e0:	20 70       	andi	r18, 0x00	; 0
     9e2:	2e a7       	std	Y+46, r18	; 0x2e
     9e4:	88 85       	ldd	r24, Y+8	; 0x08
     9e6:	98 2f       	mov	r25, r24
     9e8:	90 7e       	andi	r25, 0xE0	; 224
     9ea:	9f a7       	std	Y+47, r25	; 0x2f
     9ec:	89 85       	ldd	r24, Y+9	; 0x09
     9ee:	e8 2f       	mov	r30, r24
     9f0:	ef 7f       	andi	r30, 0xFF	; 255
     9f2:	e8 ab       	std	Y+48, r30	; 0x30
     9f4:	29 a5       	ldd	r18, Y+41	; 0x29
     9f6:	3a a5       	ldd	r19, Y+42	; 0x2a
     9f8:	4b a5       	ldd	r20, Y+43	; 0x2b
     9fa:	5c a5       	ldd	r21, Y+44	; 0x2c
     9fc:	6d a5       	ldd	r22, Y+45	; 0x2d
     9fe:	7e a5       	ldd	r23, Y+46	; 0x2e
     a00:	8f a5       	ldd	r24, Y+47	; 0x2f
     a02:	98 a9       	ldd	r25, Y+48	; 0x30
     a04:	a0 e0       	ldi	r26, 0x00	; 0
     a06:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
     a0a:	09 f0       	breq	.+2      	; 0xa0e <f_combi_from_fixpoint+0x3ca>
     a0c:	84 cf       	rjmp	.-248    	; 0x916 <f_combi_from_fixpoint+0x2d2>
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	88 23       	and	r24, r24
     a12:	09 f4       	brne	.+2      	; 0xa16 <f_combi_from_fixpoint+0x3d2>
     a14:	6b c0       	rjmp	.+214    	; 0xaec <f_combi_from_fixpoint+0x4a8>
     a16:	2a 81       	ldd	r18, Y+2	; 0x02
     a18:	3b 81       	ldd	r19, Y+3	; 0x03
     a1a:	4c 81       	ldd	r20, Y+4	; 0x04
     a1c:	5d 81       	ldd	r21, Y+5	; 0x05
     a1e:	6e 81       	ldd	r22, Y+6	; 0x06
     a20:	7f 81       	ldd	r23, Y+7	; 0x07
     a22:	88 85       	ldd	r24, Y+8	; 0x08
     a24:	99 85       	ldd	r25, Y+9	; 0x09
     a26:	a1 e0       	ldi	r26, 0x01	; 1
     a28:	0e 94 b6 4b 	call	0x976c	; 0x976c <__adddi3_s8>
     a2c:	a2 2e       	mov	r10, r18
     a2e:	b3 2e       	mov	r11, r19
     a30:	c4 2e       	mov	r12, r20
     a32:	d5 2e       	mov	r13, r21
     a34:	e6 2e       	mov	r14, r22
     a36:	f7 2e       	mov	r15, r23
     a38:	08 2f       	mov	r16, r24
     a3a:	19 2f       	mov	r17, r25
     a3c:	aa 82       	std	Y+2, r10	; 0x02
     a3e:	bb 82       	std	Y+3, r11	; 0x03
     a40:	cc 82       	std	Y+4, r12	; 0x04
     a42:	dd 82       	std	Y+5, r13	; 0x05
     a44:	ee 82       	std	Y+6, r14	; 0x06
     a46:	ff 82       	std	Y+7, r15	; 0x07
     a48:	08 87       	std	Y+8, r16	; 0x08
     a4a:	19 87       	std	Y+9, r17	; 0x09
     a4c:	8a 81       	ldd	r24, Y+2	; 0x02
     a4e:	f8 2f       	mov	r31, r24
     a50:	f0 70       	andi	r31, 0x00	; 0
     a52:	f9 af       	std	Y+57, r31	; 0x39
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	28 2f       	mov	r18, r24
     a58:	20 70       	andi	r18, 0x00	; 0
     a5a:	2a af       	std	Y+58, r18	; 0x3a
     a5c:	8c 81       	ldd	r24, Y+4	; 0x04
     a5e:	98 2f       	mov	r25, r24
     a60:	90 70       	andi	r25, 0x00	; 0
     a62:	9b af       	std	Y+59, r25	; 0x3b
     a64:	8d 81       	ldd	r24, Y+5	; 0x05
     a66:	e8 2f       	mov	r30, r24
     a68:	e0 70       	andi	r30, 0x00	; 0
     a6a:	ec af       	std	Y+60, r30	; 0x3c
     a6c:	8e 81       	ldd	r24, Y+6	; 0x06
     a6e:	f8 2f       	mov	r31, r24
     a70:	f0 70       	andi	r31, 0x00	; 0
     a72:	fd af       	std	Y+61, r31	; 0x3d
     a74:	8f 81       	ldd	r24, Y+7	; 0x07
     a76:	28 2f       	mov	r18, r24
     a78:	20 70       	andi	r18, 0x00	; 0
     a7a:	2e af       	std	Y+62, r18	; 0x3e
     a7c:	88 85       	ldd	r24, Y+8	; 0x08
     a7e:	98 2f       	mov	r25, r24
     a80:	90 7e       	andi	r25, 0xE0	; 224
     a82:	9f af       	std	Y+63, r25	; 0x3f
     a84:	89 85       	ldd	r24, Y+9	; 0x09
     a86:	e8 2f       	mov	r30, r24
     a88:	ef 7f       	andi	r30, 0xFF	; 255
     a8a:	21 96       	adiw	r28, 0x01	; 1
     a8c:	ef af       	std	Y+63, r30	; 0x3f
     a8e:	21 97       	sbiw	r28, 0x01	; 1
     a90:	29 ad       	ldd	r18, Y+57	; 0x39
     a92:	3a ad       	ldd	r19, Y+58	; 0x3a
     a94:	4b ad       	ldd	r20, Y+59	; 0x3b
     a96:	5c ad       	ldd	r21, Y+60	; 0x3c
     a98:	6d ad       	ldd	r22, Y+61	; 0x3d
     a9a:	7e ad       	ldd	r23, Y+62	; 0x3e
     a9c:	8f ad       	ldd	r24, Y+63	; 0x3f
     a9e:	21 96       	adiw	r28, 0x01	; 1
     aa0:	9f ad       	ldd	r25, Y+63	; 0x3f
     aa2:	21 97       	sbiw	r28, 0x01	; 1
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
     aaa:	01 f1       	breq	.+64     	; 0xaec <f_combi_from_fixpoint+0x4a8>
     aac:	2a 81       	ldd	r18, Y+2	; 0x02
     aae:	3b 81       	ldd	r19, Y+3	; 0x03
     ab0:	4c 81       	ldd	r20, Y+4	; 0x04
     ab2:	5d 81       	ldd	r21, Y+5	; 0x05
     ab4:	6e 81       	ldd	r22, Y+6	; 0x06
     ab6:	7f 81       	ldd	r23, Y+7	; 0x07
     ab8:	88 85       	ldd	r24, Y+8	; 0x08
     aba:	99 85       	ldd	r25, Y+9	; 0x09
     abc:	01 e0       	ldi	r16, 0x01	; 1
     abe:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
     ac2:	a2 2e       	mov	r10, r18
     ac4:	b3 2e       	mov	r11, r19
     ac6:	c4 2e       	mov	r12, r20
     ac8:	d5 2e       	mov	r13, r21
     aca:	e6 2e       	mov	r14, r22
     acc:	f7 2e       	mov	r15, r23
     ace:	08 2f       	mov	r16, r24
     ad0:	19 2f       	mov	r17, r25
     ad2:	aa 82       	std	Y+2, r10	; 0x02
     ad4:	bb 82       	std	Y+3, r11	; 0x03
     ad6:	cc 82       	std	Y+4, r12	; 0x04
     ad8:	dd 82       	std	Y+5, r13	; 0x05
     ada:	ee 82       	std	Y+6, r14	; 0x06
     adc:	ff 82       	std	Y+7, r15	; 0x07
     ade:	08 87       	std	Y+8, r16	; 0x08
     ae0:	19 87       	std	Y+9, r17	; 0x09
     ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	8d 87       	std	Y+13, r24	; 0x0d
     aea:	9e 87       	std	Y+14, r25	; 0x0e
     aec:	8d 85       	ldd	r24, Y+13	; 0x0d
     aee:	9e 85       	ldd	r25, Y+14	; 0x0e
     af0:	18 16       	cp	r1, r24
     af2:	19 06       	cpc	r1, r25
     af4:	94 f0       	brlt	.+36     	; 0xb1a <f_combi_from_fixpoint+0x4d6>
     af6:	1d 86       	std	Y+13, r1	; 0x0d
     af8:	1e 86       	std	Y+14, r1	; 0x0e
     afa:	1a 82       	std	Y+2, r1	; 0x02
     afc:	1b 82       	std	Y+3, r1	; 0x03
     afe:	1c 82       	std	Y+4, r1	; 0x04
     b00:	1d 82       	std	Y+5, r1	; 0x05
     b02:	1e 82       	std	Y+6, r1	; 0x06
     b04:	1f 82       	std	Y+7, r1	; 0x07
     b06:	18 86       	std	Y+8, r1	; 0x08
     b08:	19 86       	std	Y+9, r1	; 0x09
     b0a:	07 c0       	rjmp	.+14     	; 0xb1a <f_combi_from_fixpoint+0x4d6>
     b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b10:	8f 3f       	cpi	r24, 0xFF	; 255
     b12:	97 40       	sbci	r25, 0x07	; 7
     b14:	14 f4       	brge	.+4      	; 0xb1a <f_combi_from_fixpoint+0x4d6>
     b16:	1d 86       	std	Y+13, r1	; 0x0d
     b18:	1e 86       	std	Y+14, r1	; 0x0e
     b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b1e:	8f 3f       	cpi	r24, 0xFF	; 255
     b20:	97 40       	sbci	r25, 0x07	; 7
     b22:	64 f0       	brlt	.+24     	; 0xb3c <f_combi_from_fixpoint+0x4f8>
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	97 e0       	ldi	r25, 0x07	; 7
     b28:	8d 87       	std	Y+13, r24	; 0x0d
     b2a:	9e 87       	std	Y+14, r25	; 0x0e
     b2c:	1a 82       	std	Y+2, r1	; 0x02
     b2e:	1b 82       	std	Y+3, r1	; 0x03
     b30:	1c 82       	std	Y+4, r1	; 0x04
     b32:	1d 82       	std	Y+5, r1	; 0x05
     b34:	1e 82       	std	Y+6, r1	; 0x06
     b36:	1f 82       	std	Y+7, r1	; 0x07
     b38:	18 86       	std	Y+8, r1	; 0x08
     b3a:	19 86       	std	Y+9, r1	; 0x09
     b3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b3e:	a8 2e       	mov	r10, r24
     b40:	b1 2c       	mov	r11, r1
     b42:	c1 2c       	mov	r12, r1
     b44:	d1 2c       	mov	r13, r1
     b46:	e1 2c       	mov	r14, r1
     b48:	f1 2c       	mov	r15, r1
     b4a:	87 01       	movw	r16, r14
     b4c:	2a 2d       	mov	r18, r10
     b4e:	3b 2d       	mov	r19, r11
     b50:	4c 2d       	mov	r20, r12
     b52:	5d 2d       	mov	r21, r13
     b54:	6e 2d       	mov	r22, r14
     b56:	7f 2d       	mov	r23, r15
     b58:	80 2f       	mov	r24, r16
     b5a:	91 2f       	mov	r25, r17
     b5c:	0f e3       	ldi	r16, 0x3F	; 63
     b5e:	0e 94 76 4b 	call	0x96ec	; 0x96ec <__ashldi3>
     b62:	22 2e       	mov	r2, r18
     b64:	33 2e       	mov	r3, r19
     b66:	44 2e       	mov	r4, r20
     b68:	55 2e       	mov	r5, r21
     b6a:	66 2e       	mov	r6, r22
     b6c:	77 2e       	mov	r7, r23
     b6e:	88 2e       	mov	r8, r24
     b70:	99 2e       	mov	r9, r25
     b72:	8d 85       	ldd	r24, Y+13	; 0x0d
     b74:	9e 85       	ldd	r25, Y+14	; 0x0e
     b76:	23 96       	adiw	r28, 0x03	; 3
     b78:	8e af       	std	Y+62, r24	; 0x3e
     b7a:	9f af       	std	Y+63, r25	; 0x3f
     b7c:	23 97       	sbiw	r28, 0x03	; 3
     b7e:	89 2f       	mov	r24, r25
     b80:	88 0f       	add	r24, r24
     b82:	88 0b       	sbc	r24, r24
     b84:	24 96       	adiw	r28, 0x04	; 4
     b86:	8f af       	std	Y+63, r24	; 0x3f
     b88:	24 97       	sbiw	r28, 0x04	; 4
     b8a:	25 96       	adiw	r28, 0x05	; 5
     b8c:	8f af       	std	Y+63, r24	; 0x3f
     b8e:	25 97       	sbiw	r28, 0x05	; 5
     b90:	26 96       	adiw	r28, 0x06	; 6
     b92:	8f af       	std	Y+63, r24	; 0x3f
     b94:	26 97       	sbiw	r28, 0x06	; 6
     b96:	27 96       	adiw	r28, 0x07	; 7
     b98:	8f af       	std	Y+63, r24	; 0x3f
     b9a:	27 97       	sbiw	r28, 0x07	; 7
     b9c:	28 96       	adiw	r28, 0x08	; 8
     b9e:	8f af       	std	Y+63, r24	; 0x3f
     ba0:	28 97       	sbiw	r28, 0x08	; 8
     ba2:	29 96       	adiw	r28, 0x09	; 9
     ba4:	8f af       	std	Y+63, r24	; 0x3f
     ba6:	29 97       	sbiw	r28, 0x09	; 9
     ba8:	22 96       	adiw	r28, 0x02	; 2
     baa:	2f ad       	ldd	r18, Y+63	; 0x3f
     bac:	22 97       	sbiw	r28, 0x02	; 2
     bae:	23 96       	adiw	r28, 0x03	; 3
     bb0:	3f ad       	ldd	r19, Y+63	; 0x3f
     bb2:	23 97       	sbiw	r28, 0x03	; 3
     bb4:	24 96       	adiw	r28, 0x04	; 4
     bb6:	4f ad       	ldd	r20, Y+63	; 0x3f
     bb8:	24 97       	sbiw	r28, 0x04	; 4
     bba:	25 96       	adiw	r28, 0x05	; 5
     bbc:	5f ad       	ldd	r21, Y+63	; 0x3f
     bbe:	25 97       	sbiw	r28, 0x05	; 5
     bc0:	26 96       	adiw	r28, 0x06	; 6
     bc2:	6f ad       	ldd	r22, Y+63	; 0x3f
     bc4:	26 97       	sbiw	r28, 0x06	; 6
     bc6:	27 96       	adiw	r28, 0x07	; 7
     bc8:	7f ad       	ldd	r23, Y+63	; 0x3f
     bca:	27 97       	sbiw	r28, 0x07	; 7
     bcc:	28 96       	adiw	r28, 0x08	; 8
     bce:	8f ad       	ldd	r24, Y+63	; 0x3f
     bd0:	28 97       	sbiw	r28, 0x08	; 8
     bd2:	29 96       	adiw	r28, 0x09	; 9
     bd4:	9f ad       	ldd	r25, Y+63	; 0x3f
     bd6:	29 97       	sbiw	r28, 0x09	; 9
     bd8:	04 e3       	ldi	r16, 0x34	; 52
     bda:	0e 94 76 4b 	call	0x96ec	; 0x96ec <__ashldi3>
     bde:	a2 2e       	mov	r10, r18
     be0:	b3 2e       	mov	r11, r19
     be2:	c4 2e       	mov	r12, r20
     be4:	d5 2e       	mov	r13, r21
     be6:	e6 2e       	mov	r14, r22
     be8:	f7 2e       	mov	r15, r23
     bea:	08 2f       	mov	r16, r24
     bec:	19 2f       	mov	r17, r25
     bee:	82 2d       	mov	r24, r2
     bf0:	8a 29       	or	r24, r10
     bf2:	2a 96       	adiw	r28, 0x0a	; 10
     bf4:	8f af       	std	Y+63, r24	; 0x3f
     bf6:	2a 97       	sbiw	r28, 0x0a	; 10
     bf8:	93 2d       	mov	r25, r3
     bfa:	9b 29       	or	r25, r11
     bfc:	2b 96       	adiw	r28, 0x0b	; 11
     bfe:	9f af       	std	Y+63, r25	; 0x3f
     c00:	2b 97       	sbiw	r28, 0x0b	; 11
     c02:	e4 2d       	mov	r30, r4
     c04:	ec 29       	or	r30, r12
     c06:	2c 96       	adiw	r28, 0x0c	; 12
     c08:	ef af       	std	Y+63, r30	; 0x3f
     c0a:	2c 97       	sbiw	r28, 0x0c	; 12
     c0c:	f5 2d       	mov	r31, r5
     c0e:	fd 29       	or	r31, r13
     c10:	2d 96       	adiw	r28, 0x0d	; 13
     c12:	ff af       	std	Y+63, r31	; 0x3f
     c14:	2d 97       	sbiw	r28, 0x0d	; 13
     c16:	26 2d       	mov	r18, r6
     c18:	2e 29       	or	r18, r14
     c1a:	2e 96       	adiw	r28, 0x0e	; 14
     c1c:	2f af       	std	Y+63, r18	; 0x3f
     c1e:	2e 97       	sbiw	r28, 0x0e	; 14
     c20:	87 2d       	mov	r24, r7
     c22:	8f 29       	or	r24, r15
     c24:	2f 96       	adiw	r28, 0x0f	; 15
     c26:	8f af       	std	Y+63, r24	; 0x3f
     c28:	2f 97       	sbiw	r28, 0x0f	; 15
     c2a:	98 2d       	mov	r25, r8
     c2c:	90 2b       	or	r25, r16
     c2e:	60 96       	adiw	r28, 0x10	; 16
     c30:	9f af       	std	Y+63, r25	; 0x3f
     c32:	60 97       	sbiw	r28, 0x10	; 16
     c34:	e9 2d       	mov	r30, r9
     c36:	e1 2b       	or	r30, r17
     c38:	61 96       	adiw	r28, 0x11	; 17
     c3a:	ef af       	std	Y+63, r30	; 0x3f
     c3c:	61 97       	sbiw	r28, 0x11	; 17
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	f8 2f       	mov	r31, r24
     c42:	ff 7f       	andi	r31, 0xFF	; 255
     c44:	62 96       	adiw	r28, 0x12	; 18
     c46:	ff af       	std	Y+63, r31	; 0x3f
     c48:	62 97       	sbiw	r28, 0x12	; 18
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	28 2f       	mov	r18, r24
     c4e:	2f 7f       	andi	r18, 0xFF	; 255
     c50:	63 96       	adiw	r28, 0x13	; 19
     c52:	2f af       	std	Y+63, r18	; 0x3f
     c54:	63 97       	sbiw	r28, 0x13	; 19
     c56:	8c 81       	ldd	r24, Y+4	; 0x04
     c58:	98 2f       	mov	r25, r24
     c5a:	9f 7f       	andi	r25, 0xFF	; 255
     c5c:	64 96       	adiw	r28, 0x14	; 20
     c5e:	9f af       	std	Y+63, r25	; 0x3f
     c60:	64 97       	sbiw	r28, 0x14	; 20
     c62:	8d 81       	ldd	r24, Y+5	; 0x05
     c64:	e8 2f       	mov	r30, r24
     c66:	ef 7f       	andi	r30, 0xFF	; 255
     c68:	65 96       	adiw	r28, 0x15	; 21
     c6a:	ef af       	std	Y+63, r30	; 0x3f
     c6c:	65 97       	sbiw	r28, 0x15	; 21
     c6e:	8e 81       	ldd	r24, Y+6	; 0x06
     c70:	f8 2f       	mov	r31, r24
     c72:	ff 7f       	andi	r31, 0xFF	; 255
     c74:	66 96       	adiw	r28, 0x16	; 22
     c76:	ff af       	std	Y+63, r31	; 0x3f
     c78:	66 97       	sbiw	r28, 0x16	; 22
     c7a:	8f 81       	ldd	r24, Y+7	; 0x07
     c7c:	28 2f       	mov	r18, r24
     c7e:	2f 7f       	andi	r18, 0xFF	; 255
     c80:	67 96       	adiw	r28, 0x17	; 23
     c82:	2f af       	std	Y+63, r18	; 0x3f
     c84:	67 97       	sbiw	r28, 0x17	; 23
     c86:	88 85       	ldd	r24, Y+8	; 0x08
     c88:	98 2f       	mov	r25, r24
     c8a:	9f 70       	andi	r25, 0x0F	; 15
     c8c:	68 96       	adiw	r28, 0x18	; 24
     c8e:	9f af       	std	Y+63, r25	; 0x3f
     c90:	68 97       	sbiw	r28, 0x18	; 24
     c92:	89 85       	ldd	r24, Y+9	; 0x09
     c94:	e8 2f       	mov	r30, r24
     c96:	e0 70       	andi	r30, 0x00	; 0
     c98:	69 96       	adiw	r28, 0x19	; 25
     c9a:	ef af       	std	Y+63, r30	; 0x3f
     c9c:	69 97       	sbiw	r28, 0x19	; 25
     c9e:	2a 96       	adiw	r28, 0x0a	; 10
     ca0:	ff ad       	ldd	r31, Y+63	; 0x3f
     ca2:	2a 97       	sbiw	r28, 0x0a	; 10
     ca4:	62 96       	adiw	r28, 0x12	; 18
     ca6:	2f ad       	ldd	r18, Y+63	; 0x3f
     ca8:	62 97       	sbiw	r28, 0x12	; 18
     caa:	f2 2b       	or	r31, r18
     cac:	6a 96       	adiw	r28, 0x1a	; 26
     cae:	ff af       	std	Y+63, r31	; 0x3f
     cb0:	6a 97       	sbiw	r28, 0x1a	; 26
     cb2:	2b 96       	adiw	r28, 0x0b	; 11
     cb4:	8f ad       	ldd	r24, Y+63	; 0x3f
     cb6:	2b 97       	sbiw	r28, 0x0b	; 11
     cb8:	63 96       	adiw	r28, 0x13	; 19
     cba:	9f ad       	ldd	r25, Y+63	; 0x3f
     cbc:	63 97       	sbiw	r28, 0x13	; 19
     cbe:	89 2b       	or	r24, r25
     cc0:	6b 96       	adiw	r28, 0x1b	; 27
     cc2:	8f af       	std	Y+63, r24	; 0x3f
     cc4:	6b 97       	sbiw	r28, 0x1b	; 27
     cc6:	2c 96       	adiw	r28, 0x0c	; 12
     cc8:	ef ad       	ldd	r30, Y+63	; 0x3f
     cca:	2c 97       	sbiw	r28, 0x0c	; 12
     ccc:	64 96       	adiw	r28, 0x14	; 20
     cce:	ff ad       	ldd	r31, Y+63	; 0x3f
     cd0:	64 97       	sbiw	r28, 0x14	; 20
     cd2:	ef 2b       	or	r30, r31
     cd4:	6c 96       	adiw	r28, 0x1c	; 28
     cd6:	ef af       	std	Y+63, r30	; 0x3f
     cd8:	6c 97       	sbiw	r28, 0x1c	; 28
     cda:	2d 96       	adiw	r28, 0x0d	; 13
     cdc:	2f ad       	ldd	r18, Y+63	; 0x3f
     cde:	2d 97       	sbiw	r28, 0x0d	; 13
     ce0:	65 96       	adiw	r28, 0x15	; 21
     ce2:	8f ad       	ldd	r24, Y+63	; 0x3f
     ce4:	65 97       	sbiw	r28, 0x15	; 21
     ce6:	28 2b       	or	r18, r24
     ce8:	6d 96       	adiw	r28, 0x1d	; 29
     cea:	2f af       	std	Y+63, r18	; 0x3f
     cec:	6d 97       	sbiw	r28, 0x1d	; 29
     cee:	2e 96       	adiw	r28, 0x0e	; 14
     cf0:	9f ad       	ldd	r25, Y+63	; 0x3f
     cf2:	2e 97       	sbiw	r28, 0x0e	; 14
     cf4:	66 96       	adiw	r28, 0x16	; 22
     cf6:	ef ad       	ldd	r30, Y+63	; 0x3f
     cf8:	66 97       	sbiw	r28, 0x16	; 22
     cfa:	9e 2b       	or	r25, r30
     cfc:	6e 96       	adiw	r28, 0x1e	; 30
     cfe:	9f af       	std	Y+63, r25	; 0x3f
     d00:	6e 97       	sbiw	r28, 0x1e	; 30
     d02:	2f 96       	adiw	r28, 0x0f	; 15
     d04:	ff ad       	ldd	r31, Y+63	; 0x3f
     d06:	2f 97       	sbiw	r28, 0x0f	; 15
     d08:	67 96       	adiw	r28, 0x17	; 23
     d0a:	2f ad       	ldd	r18, Y+63	; 0x3f
     d0c:	67 97       	sbiw	r28, 0x17	; 23
     d0e:	f2 2b       	or	r31, r18
     d10:	6f 96       	adiw	r28, 0x1f	; 31
     d12:	ff af       	std	Y+63, r31	; 0x3f
     d14:	6f 97       	sbiw	r28, 0x1f	; 31
     d16:	60 96       	adiw	r28, 0x10	; 16
     d18:	8f ad       	ldd	r24, Y+63	; 0x3f
     d1a:	60 97       	sbiw	r28, 0x10	; 16
     d1c:	68 96       	adiw	r28, 0x18	; 24
     d1e:	9f ad       	ldd	r25, Y+63	; 0x3f
     d20:	68 97       	sbiw	r28, 0x18	; 24
     d22:	89 2b       	or	r24, r25
     d24:	a0 96       	adiw	r28, 0x20	; 32
     d26:	8f af       	std	Y+63, r24	; 0x3f
     d28:	a0 97       	sbiw	r28, 0x20	; 32
     d2a:	61 96       	adiw	r28, 0x11	; 17
     d2c:	ef ad       	ldd	r30, Y+63	; 0x3f
     d2e:	61 97       	sbiw	r28, 0x11	; 17
     d30:	69 96       	adiw	r28, 0x19	; 25
     d32:	ff ad       	ldd	r31, Y+63	; 0x3f
     d34:	69 97       	sbiw	r28, 0x19	; 25
     d36:	ef 2b       	or	r30, r31
     d38:	a1 96       	adiw	r28, 0x21	; 33
     d3a:	ef af       	std	Y+63, r30	; 0x3f
     d3c:	a1 97       	sbiw	r28, 0x21	; 33
     d3e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d40:	9b 85       	ldd	r25, Y+11	; 0x0b
     d42:	6a 96       	adiw	r28, 0x1a	; 26
     d44:	2f ad       	ldd	r18, Y+63	; 0x3f
     d46:	6a 97       	sbiw	r28, 0x1a	; 26
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18
     d4c:	6b 96       	adiw	r28, 0x1b	; 27
     d4e:	2f ad       	ldd	r18, Y+63	; 0x3f
     d50:	6b 97       	sbiw	r28, 0x1b	; 27
     d52:	fc 01       	movw	r30, r24
     d54:	21 83       	std	Z+1, r18	; 0x01
     d56:	6c 96       	adiw	r28, 0x1c	; 28
     d58:	2f ad       	ldd	r18, Y+63	; 0x3f
     d5a:	6c 97       	sbiw	r28, 0x1c	; 28
     d5c:	fc 01       	movw	r30, r24
     d5e:	22 83       	std	Z+2, r18	; 0x02
     d60:	6d 96       	adiw	r28, 0x1d	; 29
     d62:	2f ad       	ldd	r18, Y+63	; 0x3f
     d64:	6d 97       	sbiw	r28, 0x1d	; 29
     d66:	fc 01       	movw	r30, r24
     d68:	23 83       	std	Z+3, r18	; 0x03
     d6a:	6e 96       	adiw	r28, 0x1e	; 30
     d6c:	2f ad       	ldd	r18, Y+63	; 0x3f
     d6e:	6e 97       	sbiw	r28, 0x1e	; 30
     d70:	fc 01       	movw	r30, r24
     d72:	24 83       	std	Z+4, r18	; 0x04
     d74:	6f 96       	adiw	r28, 0x1f	; 31
     d76:	2f ad       	ldd	r18, Y+63	; 0x3f
     d78:	6f 97       	sbiw	r28, 0x1f	; 31
     d7a:	fc 01       	movw	r30, r24
     d7c:	25 83       	std	Z+5, r18	; 0x05
     d7e:	a0 96       	adiw	r28, 0x20	; 32
     d80:	2f ad       	ldd	r18, Y+63	; 0x3f
     d82:	a0 97       	sbiw	r28, 0x20	; 32
     d84:	fc 01       	movw	r30, r24
     d86:	26 83       	std	Z+6, r18	; 0x06
     d88:	a1 96       	adiw	r28, 0x21	; 33
     d8a:	2f ad       	ldd	r18, Y+63	; 0x3f
     d8c:	a1 97       	sbiw	r28, 0x21	; 33
     d8e:	fc 01       	movw	r30, r24
     d90:	27 83       	std	Z+7, r18	; 0x07
     d92:	00 00       	nop
     d94:	c0 5a       	subi	r28, 0xA0	; 160
     d96:	df 4f       	sbci	r29, 0xFF	; 255
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	9f 90       	pop	r9
     db2:	8f 90       	pop	r8
     db4:	7f 90       	pop	r7
     db6:	6f 90       	pop	r6
     db8:	5f 90       	pop	r5
     dba:	4f 90       	pop	r4
     dbc:	3f 90       	pop	r3
     dbe:	2f 90       	pop	r2
     dc0:	08 95       	ret

00000dc2 <f_shift_left_until_bit63_set>:
     dc2:	2f 92       	push	r2
     dc4:	3f 92       	push	r3
     dc6:	4f 92       	push	r4
     dc8:	5f 92       	push	r5
     dca:	6f 92       	push	r6
     dcc:	7f 92       	push	r7
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	63 97       	sbiw	r28, 0x13	; 19
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	9a 83       	std	Y+2, r25	; 0x02
     df4:	1b 82       	std	Y+3, r1	; 0x03
     df6:	21 2c       	mov	r2, r1
     df8:	31 2c       	mov	r3, r1
     dfa:	41 2c       	mov	r4, r1
     dfc:	51 2c       	mov	r5, r1
     dfe:	61 2c       	mov	r6, r1
     e00:	71 2c       	mov	r7, r1
     e02:	81 2c       	mov	r8, r1
     e04:	99 24       	eor	r9, r9
     e06:	9a 94       	dec	r9
     e08:	3a c0       	rjmp	.+116    	; 0xe7e <f_shift_left_until_bit63_set+0xbc>
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	9a 81       	ldd	r25, Y+2	; 0x02
     e0e:	fc 01       	movw	r30, r24
     e10:	a0 80       	ld	r10, Z
     e12:	fc 01       	movw	r30, r24
     e14:	b1 80       	ldd	r11, Z+1	; 0x01
     e16:	fc 01       	movw	r30, r24
     e18:	c2 80       	ldd	r12, Z+2	; 0x02
     e1a:	fc 01       	movw	r30, r24
     e1c:	d3 80       	ldd	r13, Z+3	; 0x03
     e1e:	fc 01       	movw	r30, r24
     e20:	e4 80       	ldd	r14, Z+4	; 0x04
     e22:	fc 01       	movw	r30, r24
     e24:	f5 80       	ldd	r15, Z+5	; 0x05
     e26:	fc 01       	movw	r30, r24
     e28:	06 81       	ldd	r16, Z+6	; 0x06
     e2a:	fc 01       	movw	r30, r24
     e2c:	17 81       	ldd	r17, Z+7	; 0x07
     e2e:	2a 2d       	mov	r18, r10
     e30:	3b 2d       	mov	r19, r11
     e32:	4c 2d       	mov	r20, r12
     e34:	5d 2d       	mov	r21, r13
     e36:	6e 2d       	mov	r22, r14
     e38:	7f 2d       	mov	r23, r15
     e3a:	80 2f       	mov	r24, r16
     e3c:	91 2f       	mov	r25, r17
     e3e:	08 e0       	ldi	r16, 0x08	; 8
     e40:	0e 94 76 4b 	call	0x96ec	; 0x96ec <__ashldi3>
     e44:	a2 2e       	mov	r10, r18
     e46:	b3 2e       	mov	r11, r19
     e48:	c4 2e       	mov	r12, r20
     e4a:	d5 2e       	mov	r13, r21
     e4c:	e6 2e       	mov	r14, r22
     e4e:	f7 2e       	mov	r15, r23
     e50:	08 2f       	mov	r16, r24
     e52:	19 2f       	mov	r17, r25
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	fc 01       	movw	r30, r24
     e5a:	a0 82       	st	Z, r10
     e5c:	fc 01       	movw	r30, r24
     e5e:	b1 82       	std	Z+1, r11	; 0x01
     e60:	fc 01       	movw	r30, r24
     e62:	c2 82       	std	Z+2, r12	; 0x02
     e64:	fc 01       	movw	r30, r24
     e66:	d3 82       	std	Z+3, r13	; 0x03
     e68:	fc 01       	movw	r30, r24
     e6a:	e4 82       	std	Z+4, r14	; 0x04
     e6c:	fc 01       	movw	r30, r24
     e6e:	f5 82       	std	Z+5, r15	; 0x05
     e70:	fc 01       	movw	r30, r24
     e72:	06 83       	std	Z+6, r16	; 0x06
     e74:	fc 01       	movw	r30, r24
     e76:	17 83       	std	Z+7, r17	; 0x07
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	88 5f       	subi	r24, 0xF8	; 248
     e7c:	8b 83       	std	Y+3, r24	; 0x03
     e7e:	e9 81       	ldd	r30, Y+1	; 0x01
     e80:	fa 81       	ldd	r31, Y+2	; 0x02
     e82:	20 81       	ld	r18, Z
     e84:	31 81       	ldd	r19, Z+1	; 0x01
     e86:	42 81       	ldd	r20, Z+2	; 0x02
     e88:	53 81       	ldd	r21, Z+3	; 0x03
     e8a:	64 81       	ldd	r22, Z+4	; 0x04
     e8c:	75 81       	ldd	r23, Z+5	; 0x05
     e8e:	86 81       	ldd	r24, Z+6	; 0x06
     e90:	97 81       	ldd	r25, Z+7	; 0x07
     e92:	f2 2f       	mov	r31, r18
     e94:	f2 21       	and	r31, r2
     e96:	fc 83       	std	Y+4, r31	; 0x04
     e98:	e3 2f       	mov	r30, r19
     e9a:	e3 21       	and	r30, r3
     e9c:	ed 83       	std	Y+5, r30	; 0x05
     e9e:	f4 2f       	mov	r31, r20
     ea0:	f4 21       	and	r31, r4
     ea2:	fe 83       	std	Y+6, r31	; 0x06
     ea4:	e5 2f       	mov	r30, r21
     ea6:	e5 21       	and	r30, r5
     ea8:	ef 83       	std	Y+7, r30	; 0x07
     eaa:	f6 2f       	mov	r31, r22
     eac:	f6 21       	and	r31, r6
     eae:	f8 87       	std	Y+8, r31	; 0x08
     eb0:	e7 2f       	mov	r30, r23
     eb2:	e7 21       	and	r30, r7
     eb4:	e9 87       	std	Y+9, r30	; 0x09
     eb6:	f8 2f       	mov	r31, r24
     eb8:	f8 21       	and	r31, r8
     eba:	fa 87       	std	Y+10, r31	; 0x0a
     ebc:	e9 2f       	mov	r30, r25
     ebe:	e9 21       	and	r30, r9
     ec0:	eb 87       	std	Y+11, r30	; 0x0b
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	4e 81       	ldd	r20, Y+6	; 0x06
     ec8:	5f 81       	ldd	r21, Y+7	; 0x07
     eca:	68 85       	ldd	r22, Y+8	; 0x08
     ecc:	79 85       	ldd	r23, Y+9	; 0x09
     ece:	8a 85       	ldd	r24, Y+10	; 0x0a
     ed0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
     ed8:	21 f4       	brne	.+8      	; 0xee2 <f_shift_left_until_bit63_set+0x120>
     eda:	fb 81       	ldd	r31, Y+3	; 0x03
     edc:	f0 34       	cpi	r31, 0x40	; 64
     ede:	0c f4       	brge	.+2      	; 0xee2 <f_shift_left_until_bit63_set+0x120>
     ee0:	94 cf       	rjmp	.-216    	; 0xe0a <f_shift_left_until_bit63_set+0x48>
     ee2:	21 2c       	mov	r2, r1
     ee4:	31 2c       	mov	r3, r1
     ee6:	41 2c       	mov	r4, r1
     ee8:	51 2c       	mov	r5, r1
     eea:	61 2c       	mov	r6, r1
     eec:	71 2c       	mov	r7, r1
     eee:	81 2c       	mov	r8, r1
     ef0:	68 94       	set
     ef2:	99 24       	eor	r9, r9
     ef4:	97 f8       	bld	r9, 7
     ef6:	3a c0       	rjmp	.+116    	; 0xf6c <f_shift_left_until_bit63_set+0x1aa>
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	fc 01       	movw	r30, r24
     efe:	a0 80       	ld	r10, Z
     f00:	fc 01       	movw	r30, r24
     f02:	b1 80       	ldd	r11, Z+1	; 0x01
     f04:	fc 01       	movw	r30, r24
     f06:	c2 80       	ldd	r12, Z+2	; 0x02
     f08:	fc 01       	movw	r30, r24
     f0a:	d3 80       	ldd	r13, Z+3	; 0x03
     f0c:	fc 01       	movw	r30, r24
     f0e:	e4 80       	ldd	r14, Z+4	; 0x04
     f10:	fc 01       	movw	r30, r24
     f12:	f5 80       	ldd	r15, Z+5	; 0x05
     f14:	fc 01       	movw	r30, r24
     f16:	06 81       	ldd	r16, Z+6	; 0x06
     f18:	fc 01       	movw	r30, r24
     f1a:	17 81       	ldd	r17, Z+7	; 0x07
     f1c:	2a 2d       	mov	r18, r10
     f1e:	3b 2d       	mov	r19, r11
     f20:	4c 2d       	mov	r20, r12
     f22:	5d 2d       	mov	r21, r13
     f24:	6e 2d       	mov	r22, r14
     f26:	7f 2d       	mov	r23, r15
     f28:	80 2f       	mov	r24, r16
     f2a:	91 2f       	mov	r25, r17
     f2c:	01 e0       	ldi	r16, 0x01	; 1
     f2e:	0e 94 76 4b 	call	0x96ec	; 0x96ec <__ashldi3>
     f32:	a2 2e       	mov	r10, r18
     f34:	b3 2e       	mov	r11, r19
     f36:	c4 2e       	mov	r12, r20
     f38:	d5 2e       	mov	r13, r21
     f3a:	e6 2e       	mov	r14, r22
     f3c:	f7 2e       	mov	r15, r23
     f3e:	08 2f       	mov	r16, r24
     f40:	19 2f       	mov	r17, r25
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	fc 01       	movw	r30, r24
     f48:	a0 82       	st	Z, r10
     f4a:	fc 01       	movw	r30, r24
     f4c:	b1 82       	std	Z+1, r11	; 0x01
     f4e:	fc 01       	movw	r30, r24
     f50:	c2 82       	std	Z+2, r12	; 0x02
     f52:	fc 01       	movw	r30, r24
     f54:	d3 82       	std	Z+3, r13	; 0x03
     f56:	fc 01       	movw	r30, r24
     f58:	e4 82       	std	Z+4, r14	; 0x04
     f5a:	fc 01       	movw	r30, r24
     f5c:	f5 82       	std	Z+5, r15	; 0x05
     f5e:	fc 01       	movw	r30, r24
     f60:	06 83       	std	Z+6, r16	; 0x06
     f62:	fc 01       	movw	r30, r24
     f64:	17 83       	std	Z+7, r17	; 0x07
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	8f 5f       	subi	r24, 0xFF	; 255
     f6a:	8b 83       	std	Y+3, r24	; 0x03
     f6c:	e9 81       	ldd	r30, Y+1	; 0x01
     f6e:	fa 81       	ldd	r31, Y+2	; 0x02
     f70:	20 81       	ld	r18, Z
     f72:	31 81       	ldd	r19, Z+1	; 0x01
     f74:	42 81       	ldd	r20, Z+2	; 0x02
     f76:	53 81       	ldd	r21, Z+3	; 0x03
     f78:	64 81       	ldd	r22, Z+4	; 0x04
     f7a:	75 81       	ldd	r23, Z+5	; 0x05
     f7c:	86 81       	ldd	r24, Z+6	; 0x06
     f7e:	97 81       	ldd	r25, Z+7	; 0x07
     f80:	f2 2f       	mov	r31, r18
     f82:	f2 21       	and	r31, r2
     f84:	fc 87       	std	Y+12, r31	; 0x0c
     f86:	e3 2f       	mov	r30, r19
     f88:	e3 21       	and	r30, r3
     f8a:	ed 87       	std	Y+13, r30	; 0x0d
     f8c:	f4 2f       	mov	r31, r20
     f8e:	f4 21       	and	r31, r4
     f90:	fe 87       	std	Y+14, r31	; 0x0e
     f92:	e5 2f       	mov	r30, r21
     f94:	e5 21       	and	r30, r5
     f96:	ef 87       	std	Y+15, r30	; 0x0f
     f98:	f6 2f       	mov	r31, r22
     f9a:	f6 21       	and	r31, r6
     f9c:	f8 8b       	std	Y+16, r31	; 0x10
     f9e:	e7 2f       	mov	r30, r23
     fa0:	e7 21       	and	r30, r7
     fa2:	e9 8b       	std	Y+17, r30	; 0x11
     fa4:	f8 2f       	mov	r31, r24
     fa6:	f8 21       	and	r31, r8
     fa8:	fa 8b       	std	Y+18, r31	; 0x12
     faa:	e9 2f       	mov	r30, r25
     fac:	e9 21       	and	r30, r9
     fae:	eb 8b       	std	Y+19, r30	; 0x13
     fb0:	2c 85       	ldd	r18, Y+12	; 0x0c
     fb2:	3d 85       	ldd	r19, Y+13	; 0x0d
     fb4:	4e 85       	ldd	r20, Y+14	; 0x0e
     fb6:	5f 85       	ldd	r21, Y+15	; 0x0f
     fb8:	68 89       	ldd	r22, Y+16	; 0x10
     fba:	79 89       	ldd	r23, Y+17	; 0x11
     fbc:	8a 89       	ldd	r24, Y+18	; 0x12
     fbe:	9b 89       	ldd	r25, Y+19	; 0x13
     fc0:	a0 e0       	ldi	r26, 0x00	; 0
     fc2:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
     fc6:	21 f4       	brne	.+8      	; 0xfd0 <f_shift_left_until_bit63_set+0x20e>
     fc8:	fb 81       	ldd	r31, Y+3	; 0x03
     fca:	f0 34       	cpi	r31, 0x40	; 64
     fcc:	0c f4       	brge	.+2      	; 0xfd0 <f_shift_left_until_bit63_set+0x20e>
     fce:	94 cf       	rjmp	.-216    	; 0xef8 <f_shift_left_until_bit63_set+0x136>
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	63 96       	adiw	r28, 0x13	; 19
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	df 90       	pop	r13
     fe6:	cf 90       	pop	r12
     fe8:	bf 90       	pop	r11
     fea:	af 90       	pop	r10
     fec:	9f 90       	pop	r9
     fee:	8f 90       	pop	r8
     ff0:	7f 90       	pop	r7
     ff2:	6f 90       	pop	r6
     ff4:	5f 90       	pop	r5
     ff6:	4f 90       	pop	r4
     ff8:	3f 90       	pop	r3
     ffa:	2f 90       	pop	r2
     ffc:	08 95       	ret

00000ffe <approx_high_uint64_word_of_uint64_mult_uint64>:
     ffe:	2f 92       	push	r2
    1000:	3f 92       	push	r3
    1002:	4f 92       	push	r4
    1004:	5f 92       	push	r5
    1006:	6f 92       	push	r6
    1008:	7f 92       	push	r7
    100a:	8f 92       	push	r8
    100c:	9f 92       	push	r9
    100e:	af 92       	push	r10
    1010:	bf 92       	push	r11
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	e5 97       	sbiw	r28, 0x35	; 53
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	89 87       	std	Y+9, r24	; 0x09
    102e:	9a 87       	std	Y+10, r25	; 0x0a
    1030:	6b 87       	std	Y+11, r22	; 0x0b
    1032:	7c 87       	std	Y+12, r23	; 0x0c
    1034:	4d 87       	std	Y+13, r20	; 0x0d
    1036:	89 85       	ldd	r24, Y+9	; 0x09
    1038:	9a 85       	ldd	r25, Y+10	; 0x0a
    103a:	fc 01       	movw	r30, r24
    103c:	a0 80       	ld	r10, Z
    103e:	fc 01       	movw	r30, r24
    1040:	b1 80       	ldd	r11, Z+1	; 0x01
    1042:	fc 01       	movw	r30, r24
    1044:	c2 80       	ldd	r12, Z+2	; 0x02
    1046:	fc 01       	movw	r30, r24
    1048:	d3 80       	ldd	r13, Z+3	; 0x03
    104a:	fc 01       	movw	r30, r24
    104c:	e4 80       	ldd	r14, Z+4	; 0x04
    104e:	fc 01       	movw	r30, r24
    1050:	f5 80       	ldd	r15, Z+5	; 0x05
    1052:	fc 01       	movw	r30, r24
    1054:	06 81       	ldd	r16, Z+6	; 0x06
    1056:	fc 01       	movw	r30, r24
    1058:	17 81       	ldd	r17, Z+7	; 0x07
    105a:	2a 2d       	mov	r18, r10
    105c:	3b 2d       	mov	r19, r11
    105e:	4c 2d       	mov	r20, r12
    1060:	5d 2d       	mov	r21, r13
    1062:	6e 2d       	mov	r22, r14
    1064:	7f 2d       	mov	r23, r15
    1066:	80 2f       	mov	r24, r16
    1068:	91 2f       	mov	r25, r17
    106a:	00 e2       	ldi	r16, 0x20	; 32
    106c:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    1070:	2e 87       	std	Y+14, r18	; 0x0e
    1072:	3f 87       	std	Y+15, r19	; 0x0f
    1074:	48 8b       	std	Y+16, r20	; 0x10
    1076:	59 8b       	std	Y+17, r21	; 0x11
    1078:	6a 8b       	std	Y+18, r22	; 0x12
    107a:	7b 8b       	std	Y+19, r23	; 0x13
    107c:	8c 8b       	std	Y+20, r24	; 0x14
    107e:	9d 8b       	std	Y+21, r25	; 0x15
    1080:	8b 85       	ldd	r24, Y+11	; 0x0b
    1082:	9c 85       	ldd	r25, Y+12	; 0x0c
    1084:	fc 01       	movw	r30, r24
    1086:	a0 80       	ld	r10, Z
    1088:	fc 01       	movw	r30, r24
    108a:	b1 80       	ldd	r11, Z+1	; 0x01
    108c:	fc 01       	movw	r30, r24
    108e:	c2 80       	ldd	r12, Z+2	; 0x02
    1090:	fc 01       	movw	r30, r24
    1092:	d3 80       	ldd	r13, Z+3	; 0x03
    1094:	fc 01       	movw	r30, r24
    1096:	e4 80       	ldd	r14, Z+4	; 0x04
    1098:	fc 01       	movw	r30, r24
    109a:	f5 80       	ldd	r15, Z+5	; 0x05
    109c:	fc 01       	movw	r30, r24
    109e:	06 81       	ldd	r16, Z+6	; 0x06
    10a0:	fc 01       	movw	r30, r24
    10a2:	17 81       	ldd	r17, Z+7	; 0x07
    10a4:	2a 2d       	mov	r18, r10
    10a6:	3b 2d       	mov	r19, r11
    10a8:	4c 2d       	mov	r20, r12
    10aa:	5d 2d       	mov	r21, r13
    10ac:	6e 2d       	mov	r22, r14
    10ae:	7f 2d       	mov	r23, r15
    10b0:	80 2f       	mov	r24, r16
    10b2:	91 2f       	mov	r25, r17
    10b4:	00 e2       	ldi	r16, 0x20	; 32
    10b6:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    10ba:	22 2e       	mov	r2, r18
    10bc:	33 2e       	mov	r3, r19
    10be:	44 2e       	mov	r4, r20
    10c0:	55 2e       	mov	r5, r21
    10c2:	66 2e       	mov	r6, r22
    10c4:	77 2e       	mov	r7, r23
    10c6:	88 2e       	mov	r8, r24
    10c8:	99 2e       	mov	r9, r25
    10ca:	a2 2c       	mov	r10, r2
    10cc:	b3 2c       	mov	r11, r3
    10ce:	c4 2c       	mov	r12, r4
    10d0:	d5 2c       	mov	r13, r5
    10d2:	e6 2c       	mov	r14, r6
    10d4:	f7 2c       	mov	r15, r7
    10d6:	08 2d       	mov	r16, r8
    10d8:	19 2d       	mov	r17, r9
    10da:	2e 85       	ldd	r18, Y+14	; 0x0e
    10dc:	3f 85       	ldd	r19, Y+15	; 0x0f
    10de:	48 89       	ldd	r20, Y+16	; 0x10
    10e0:	59 89       	ldd	r21, Y+17	; 0x11
    10e2:	6a 89       	ldd	r22, Y+18	; 0x12
    10e4:	7b 89       	ldd	r23, Y+19	; 0x13
    10e6:	8c 89       	ldd	r24, Y+20	; 0x14
    10e8:	9d 89       	ldd	r25, Y+21	; 0x15
    10ea:	0e 94 0d 4b 	call	0x961a	; 0x961a <__muldi3>
    10ee:	a2 2e       	mov	r10, r18
    10f0:	b3 2e       	mov	r11, r19
    10f2:	c4 2e       	mov	r12, r20
    10f4:	d5 2e       	mov	r13, r21
    10f6:	e6 2e       	mov	r14, r22
    10f8:	f7 2e       	mov	r15, r23
    10fa:	08 2f       	mov	r16, r24
    10fc:	19 2f       	mov	r17, r25
    10fe:	ae 8a       	std	Y+22, r10	; 0x16
    1100:	bf 8a       	std	Y+23, r11	; 0x17
    1102:	c8 8e       	std	Y+24, r12	; 0x18
    1104:	d9 8e       	std	Y+25, r13	; 0x19
    1106:	ea 8e       	std	Y+26, r14	; 0x1a
    1108:	fb 8e       	std	Y+27, r15	; 0x1b
    110a:	0c 8f       	std	Y+28, r16	; 0x1c
    110c:	1d 8f       	std	Y+29, r17	; 0x1d
    110e:	89 85       	ldd	r24, Y+9	; 0x09
    1110:	9a 85       	ldd	r25, Y+10	; 0x0a
    1112:	fc 01       	movw	r30, r24
    1114:	a0 80       	ld	r10, Z
    1116:	fc 01       	movw	r30, r24
    1118:	b1 80       	ldd	r11, Z+1	; 0x01
    111a:	fc 01       	movw	r30, r24
    111c:	c2 80       	ldd	r12, Z+2	; 0x02
    111e:	fc 01       	movw	r30, r24
    1120:	d3 80       	ldd	r13, Z+3	; 0x03
    1122:	fc 01       	movw	r30, r24
    1124:	e4 80       	ldd	r14, Z+4	; 0x04
    1126:	fc 01       	movw	r30, r24
    1128:	f5 80       	ldd	r15, Z+5	; 0x05
    112a:	fc 01       	movw	r30, r24
    112c:	06 81       	ldd	r16, Z+6	; 0x06
    112e:	fc 01       	movw	r30, r24
    1130:	17 81       	ldd	r17, Z+7	; 0x07
    1132:	2a 2d       	mov	r18, r10
    1134:	3b 2d       	mov	r19, r11
    1136:	4c 2d       	mov	r20, r12
    1138:	5d 2d       	mov	r21, r13
    113a:	6e 2d       	mov	r22, r14
    113c:	7f 2d       	mov	r23, r15
    113e:	80 2f       	mov	r24, r16
    1140:	91 2f       	mov	r25, r17
    1142:	00 e2       	ldi	r16, 0x20	; 32
    1144:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    1148:	22 2e       	mov	r2, r18
    114a:	33 2e       	mov	r3, r19
    114c:	44 2e       	mov	r4, r20
    114e:	55 2e       	mov	r5, r21
    1150:	66 2e       	mov	r6, r22
    1152:	77 2e       	mov	r7, r23
    1154:	88 2e       	mov	r8, r24
    1156:	99 2e       	mov	r9, r25
    1158:	eb 85       	ldd	r30, Y+11	; 0x0b
    115a:	fc 85       	ldd	r31, Y+12	; 0x0c
    115c:	20 81       	ld	r18, Z
    115e:	31 81       	ldd	r19, Z+1	; 0x01
    1160:	42 81       	ldd	r20, Z+2	; 0x02
    1162:	53 81       	ldd	r21, Z+3	; 0x03
    1164:	64 81       	ldd	r22, Z+4	; 0x04
    1166:	75 81       	ldd	r23, Z+5	; 0x05
    1168:	86 81       	ldd	r24, Z+6	; 0x06
    116a:	97 81       	ldd	r25, Z+7	; 0x07
    116c:	f2 2f       	mov	r31, r18
    116e:	ff 7f       	andi	r31, 0xFF	; 255
    1170:	fe 8f       	std	Y+30, r31	; 0x1e
    1172:	e3 2f       	mov	r30, r19
    1174:	ef 7f       	andi	r30, 0xFF	; 255
    1176:	ef 8f       	std	Y+31, r30	; 0x1f
    1178:	f4 2f       	mov	r31, r20
    117a:	ff 7f       	andi	r31, 0xFF	; 255
    117c:	f8 a3       	std	Y+32, r31	; 0x20
    117e:	e5 2f       	mov	r30, r21
    1180:	ef 7f       	andi	r30, 0xFF	; 255
    1182:	e9 a3       	std	Y+33, r30	; 0x21
    1184:	f6 2f       	mov	r31, r22
    1186:	f0 70       	andi	r31, 0x00	; 0
    1188:	fa a3       	std	Y+34, r31	; 0x22
    118a:	e7 2f       	mov	r30, r23
    118c:	e0 70       	andi	r30, 0x00	; 0
    118e:	eb a3       	std	Y+35, r30	; 0x23
    1190:	f8 2f       	mov	r31, r24
    1192:	f0 70       	andi	r31, 0x00	; 0
    1194:	fc a3       	std	Y+36, r31	; 0x24
    1196:	e9 2f       	mov	r30, r25
    1198:	e0 70       	andi	r30, 0x00	; 0
    119a:	ed a3       	std	Y+37, r30	; 0x25
    119c:	ae 8c       	ldd	r10, Y+30	; 0x1e
    119e:	bf 8c       	ldd	r11, Y+31	; 0x1f
    11a0:	c8 a0       	ldd	r12, Y+32	; 0x20
    11a2:	d9 a0       	ldd	r13, Y+33	; 0x21
    11a4:	ea a0       	ldd	r14, Y+34	; 0x22
    11a6:	fb a0       	ldd	r15, Y+35	; 0x23
    11a8:	0c a1       	ldd	r16, Y+36	; 0x24
    11aa:	1d a1       	ldd	r17, Y+37	; 0x25
    11ac:	22 2d       	mov	r18, r2
    11ae:	33 2d       	mov	r19, r3
    11b0:	44 2d       	mov	r20, r4
    11b2:	55 2d       	mov	r21, r5
    11b4:	66 2d       	mov	r22, r6
    11b6:	77 2d       	mov	r23, r7
    11b8:	88 2d       	mov	r24, r8
    11ba:	99 2d       	mov	r25, r9
    11bc:	0e 94 0d 4b 	call	0x961a	; 0x961a <__muldi3>
    11c0:	22 2e       	mov	r2, r18
    11c2:	33 2e       	mov	r3, r19
    11c4:	44 2e       	mov	r4, r20
    11c6:	55 2e       	mov	r5, r21
    11c8:	66 2e       	mov	r6, r22
    11ca:	77 2e       	mov	r7, r23
    11cc:	88 2e       	mov	r8, r24
    11ce:	99 2e       	mov	r9, r25
    11d0:	a2 2c       	mov	r10, r2
    11d2:	b3 2c       	mov	r11, r3
    11d4:	c4 2c       	mov	r12, r4
    11d6:	d5 2c       	mov	r13, r5
    11d8:	e6 2c       	mov	r14, r6
    11da:	f7 2c       	mov	r15, r7
    11dc:	08 2d       	mov	r16, r8
    11de:	19 2d       	mov	r17, r9
    11e0:	2a 2d       	mov	r18, r10
    11e2:	3b 2d       	mov	r19, r11
    11e4:	4c 2d       	mov	r20, r12
    11e6:	5d 2d       	mov	r21, r13
    11e8:	6e 2d       	mov	r22, r14
    11ea:	7f 2d       	mov	r23, r15
    11ec:	80 2f       	mov	r24, r16
    11ee:	91 2f       	mov	r25, r17
    11f0:	00 e2       	ldi	r16, 0x20	; 32
    11f2:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    11f6:	22 2e       	mov	r2, r18
    11f8:	33 2e       	mov	r3, r19
    11fa:	44 2e       	mov	r4, r20
    11fc:	55 2e       	mov	r5, r21
    11fe:	66 2e       	mov	r6, r22
    1200:	77 2e       	mov	r7, r23
    1202:	88 2e       	mov	r8, r24
    1204:	99 2e       	mov	r9, r25
    1206:	2e 89       	ldd	r18, Y+22	; 0x16
    1208:	3f 89       	ldd	r19, Y+23	; 0x17
    120a:	48 8d       	ldd	r20, Y+24	; 0x18
    120c:	59 8d       	ldd	r21, Y+25	; 0x19
    120e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1210:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1212:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1214:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1216:	a2 2c       	mov	r10, r2
    1218:	b3 2c       	mov	r11, r3
    121a:	c4 2c       	mov	r12, r4
    121c:	d5 2c       	mov	r13, r5
    121e:	e6 2c       	mov	r14, r6
    1220:	f7 2c       	mov	r15, r7
    1222:	08 2d       	mov	r16, r8
    1224:	19 2d       	mov	r17, r9
    1226:	0e 94 ad 4b 	call	0x975a	; 0x975a <__adddi3>
    122a:	2e a3       	std	Y+38, r18	; 0x26
    122c:	3f a3       	std	Y+39, r19	; 0x27
    122e:	48 a7       	std	Y+40, r20	; 0x28
    1230:	59 a7       	std	Y+41, r21	; 0x29
    1232:	6a a7       	std	Y+42, r22	; 0x2a
    1234:	7b a7       	std	Y+43, r23	; 0x2b
    1236:	8c a7       	std	Y+44, r24	; 0x2c
    1238:	9d a7       	std	Y+45, r25	; 0x2d
    123a:	8b 85       	ldd	r24, Y+11	; 0x0b
    123c:	9c 85       	ldd	r25, Y+12	; 0x0c
    123e:	fc 01       	movw	r30, r24
    1240:	a0 80       	ld	r10, Z
    1242:	fc 01       	movw	r30, r24
    1244:	b1 80       	ldd	r11, Z+1	; 0x01
    1246:	fc 01       	movw	r30, r24
    1248:	c2 80       	ldd	r12, Z+2	; 0x02
    124a:	fc 01       	movw	r30, r24
    124c:	d3 80       	ldd	r13, Z+3	; 0x03
    124e:	fc 01       	movw	r30, r24
    1250:	e4 80       	ldd	r14, Z+4	; 0x04
    1252:	fc 01       	movw	r30, r24
    1254:	f5 80       	ldd	r15, Z+5	; 0x05
    1256:	fc 01       	movw	r30, r24
    1258:	06 81       	ldd	r16, Z+6	; 0x06
    125a:	fc 01       	movw	r30, r24
    125c:	17 81       	ldd	r17, Z+7	; 0x07
    125e:	2a 2d       	mov	r18, r10
    1260:	3b 2d       	mov	r19, r11
    1262:	4c 2d       	mov	r20, r12
    1264:	5d 2d       	mov	r21, r13
    1266:	6e 2d       	mov	r22, r14
    1268:	7f 2d       	mov	r23, r15
    126a:	80 2f       	mov	r24, r16
    126c:	91 2f       	mov	r25, r17
    126e:	00 e2       	ldi	r16, 0x20	; 32
    1270:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    1274:	22 2e       	mov	r2, r18
    1276:	33 2e       	mov	r3, r19
    1278:	44 2e       	mov	r4, r20
    127a:	55 2e       	mov	r5, r21
    127c:	66 2e       	mov	r6, r22
    127e:	77 2e       	mov	r7, r23
    1280:	88 2e       	mov	r8, r24
    1282:	99 2e       	mov	r9, r25
    1284:	e9 85       	ldd	r30, Y+9	; 0x09
    1286:	fa 85       	ldd	r31, Y+10	; 0x0a
    1288:	20 81       	ld	r18, Z
    128a:	31 81       	ldd	r19, Z+1	; 0x01
    128c:	42 81       	ldd	r20, Z+2	; 0x02
    128e:	53 81       	ldd	r21, Z+3	; 0x03
    1290:	64 81       	ldd	r22, Z+4	; 0x04
    1292:	75 81       	ldd	r23, Z+5	; 0x05
    1294:	86 81       	ldd	r24, Z+6	; 0x06
    1296:	97 81       	ldd	r25, Z+7	; 0x07
    1298:	f2 2f       	mov	r31, r18
    129a:	ff 7f       	andi	r31, 0xFF	; 255
    129c:	fe a7       	std	Y+46, r31	; 0x2e
    129e:	e3 2f       	mov	r30, r19
    12a0:	ef 7f       	andi	r30, 0xFF	; 255
    12a2:	ef a7       	std	Y+47, r30	; 0x2f
    12a4:	f4 2f       	mov	r31, r20
    12a6:	ff 7f       	andi	r31, 0xFF	; 255
    12a8:	f8 ab       	std	Y+48, r31	; 0x30
    12aa:	e5 2f       	mov	r30, r21
    12ac:	ef 7f       	andi	r30, 0xFF	; 255
    12ae:	e9 ab       	std	Y+49, r30	; 0x31
    12b0:	f6 2f       	mov	r31, r22
    12b2:	f0 70       	andi	r31, 0x00	; 0
    12b4:	fa ab       	std	Y+50, r31	; 0x32
    12b6:	e7 2f       	mov	r30, r23
    12b8:	e0 70       	andi	r30, 0x00	; 0
    12ba:	eb ab       	std	Y+51, r30	; 0x33
    12bc:	f8 2f       	mov	r31, r24
    12be:	f0 70       	andi	r31, 0x00	; 0
    12c0:	fc ab       	std	Y+52, r31	; 0x34
    12c2:	e9 2f       	mov	r30, r25
    12c4:	e0 70       	andi	r30, 0x00	; 0
    12c6:	ed ab       	std	Y+53, r30	; 0x35
    12c8:	ae a4       	ldd	r10, Y+46	; 0x2e
    12ca:	bf a4       	ldd	r11, Y+47	; 0x2f
    12cc:	c8 a8       	ldd	r12, Y+48	; 0x30
    12ce:	d9 a8       	ldd	r13, Y+49	; 0x31
    12d0:	ea a8       	ldd	r14, Y+50	; 0x32
    12d2:	fb a8       	ldd	r15, Y+51	; 0x33
    12d4:	0c a9       	ldd	r16, Y+52	; 0x34
    12d6:	1d a9       	ldd	r17, Y+53	; 0x35
    12d8:	22 2d       	mov	r18, r2
    12da:	33 2d       	mov	r19, r3
    12dc:	44 2d       	mov	r20, r4
    12de:	55 2d       	mov	r21, r5
    12e0:	66 2d       	mov	r22, r6
    12e2:	77 2d       	mov	r23, r7
    12e4:	88 2d       	mov	r24, r8
    12e6:	99 2d       	mov	r25, r9
    12e8:	0e 94 0d 4b 	call	0x961a	; 0x961a <__muldi3>
    12ec:	22 2e       	mov	r2, r18
    12ee:	33 2e       	mov	r3, r19
    12f0:	44 2e       	mov	r4, r20
    12f2:	55 2e       	mov	r5, r21
    12f4:	66 2e       	mov	r6, r22
    12f6:	77 2e       	mov	r7, r23
    12f8:	88 2e       	mov	r8, r24
    12fa:	99 2e       	mov	r9, r25
    12fc:	a2 2c       	mov	r10, r2
    12fe:	b3 2c       	mov	r11, r3
    1300:	c4 2c       	mov	r12, r4
    1302:	d5 2c       	mov	r13, r5
    1304:	e6 2c       	mov	r14, r6
    1306:	f7 2c       	mov	r15, r7
    1308:	08 2d       	mov	r16, r8
    130a:	19 2d       	mov	r17, r9
    130c:	2a 2d       	mov	r18, r10
    130e:	3b 2d       	mov	r19, r11
    1310:	4c 2d       	mov	r20, r12
    1312:	5d 2d       	mov	r21, r13
    1314:	6e 2d       	mov	r22, r14
    1316:	7f 2d       	mov	r23, r15
    1318:	80 2f       	mov	r24, r16
    131a:	91 2f       	mov	r25, r17
    131c:	00 e2       	ldi	r16, 0x20	; 32
    131e:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    1322:	22 2e       	mov	r2, r18
    1324:	33 2e       	mov	r3, r19
    1326:	44 2e       	mov	r4, r20
    1328:	55 2e       	mov	r5, r21
    132a:	66 2e       	mov	r6, r22
    132c:	77 2e       	mov	r7, r23
    132e:	88 2e       	mov	r8, r24
    1330:	99 2e       	mov	r9, r25
    1332:	2e a1       	ldd	r18, Y+38	; 0x26
    1334:	3f a1       	ldd	r19, Y+39	; 0x27
    1336:	48 a5       	ldd	r20, Y+40	; 0x28
    1338:	59 a5       	ldd	r21, Y+41	; 0x29
    133a:	6a a5       	ldd	r22, Y+42	; 0x2a
    133c:	7b a5       	ldd	r23, Y+43	; 0x2b
    133e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1340:	9d a5       	ldd	r25, Y+45	; 0x2d
    1342:	a2 2c       	mov	r10, r2
    1344:	b3 2c       	mov	r11, r3
    1346:	c4 2c       	mov	r12, r4
    1348:	d5 2c       	mov	r13, r5
    134a:	e6 2c       	mov	r14, r6
    134c:	f7 2c       	mov	r15, r7
    134e:	08 2d       	mov	r16, r8
    1350:	19 2d       	mov	r17, r9
    1352:	0e 94 ad 4b 	call	0x975a	; 0x975a <__adddi3>
    1356:	29 83       	std	Y+1, r18	; 0x01
    1358:	3a 83       	std	Y+2, r19	; 0x02
    135a:	4b 83       	std	Y+3, r20	; 0x03
    135c:	5c 83       	std	Y+4, r21	; 0x04
    135e:	6d 83       	std	Y+5, r22	; 0x05
    1360:	7e 83       	std	Y+6, r23	; 0x06
    1362:	8f 83       	std	Y+7, r24	; 0x07
    1364:	98 87       	std	Y+8, r25	; 0x08
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	81 70       	andi	r24, 0x01	; 1
    136e:	99 27       	eor	r25, r25
    1370:	89 2b       	or	r24, r25
    1372:	09 f4       	brne	.+2      	; 0x1376 <approx_high_uint64_word_of_uint64_mult_uint64+0x378>
    1374:	52 c0       	rjmp	.+164    	; 0x141a <approx_high_uint64_word_of_uint64_mult_uint64+0x41c>
    1376:	e9 85       	ldd	r30, Y+9	; 0x09
    1378:	fa 85       	ldd	r31, Y+10	; 0x0a
    137a:	20 81       	ld	r18, Z
    137c:	31 81       	ldd	r19, Z+1	; 0x01
    137e:	42 81       	ldd	r20, Z+2	; 0x02
    1380:	53 81       	ldd	r21, Z+3	; 0x03
    1382:	64 81       	ldd	r22, Z+4	; 0x04
    1384:	75 81       	ldd	r23, Z+5	; 0x05
    1386:	86 81       	ldd	r24, Z+6	; 0x06
    1388:	97 81       	ldd	r25, Z+7	; 0x07
    138a:	a2 2e       	mov	r10, r18
    138c:	b3 2e       	mov	r11, r19
    138e:	c4 2e       	mov	r12, r20
    1390:	d5 2e       	mov	r13, r21
    1392:	e6 2e       	mov	r14, r22
    1394:	f7 2e       	mov	r15, r23
    1396:	08 2f       	mov	r16, r24
    1398:	19 2f       	mov	r17, r25
    139a:	2a 2d       	mov	r18, r10
    139c:	3b 2d       	mov	r19, r11
    139e:	4c 2d       	mov	r20, r12
    13a0:	5d 2d       	mov	r21, r13
    13a2:	6e 2d       	mov	r22, r14
    13a4:	7f 2d       	mov	r23, r15
    13a6:	80 2f       	mov	r24, r16
    13a8:	91 2f       	mov	r25, r17
    13aa:	a0 e0       	ldi	r26, 0x00	; 0
    13ac:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    13b0:	a4 f5       	brge	.+104    	; 0x141a <approx_high_uint64_word_of_uint64_mult_uint64+0x41c>
    13b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    13b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    13b6:	fc 01       	movw	r30, r24
    13b8:	20 80       	ld	r2, Z
    13ba:	fc 01       	movw	r30, r24
    13bc:	31 80       	ldd	r3, Z+1	; 0x01
    13be:	fc 01       	movw	r30, r24
    13c0:	42 80       	ldd	r4, Z+2	; 0x02
    13c2:	fc 01       	movw	r30, r24
    13c4:	53 80       	ldd	r5, Z+3	; 0x03
    13c6:	fc 01       	movw	r30, r24
    13c8:	64 80       	ldd	r6, Z+4	; 0x04
    13ca:	fc 01       	movw	r30, r24
    13cc:	75 80       	ldd	r7, Z+5	; 0x05
    13ce:	fc 01       	movw	r30, r24
    13d0:	86 80       	ldd	r8, Z+6	; 0x06
    13d2:	fc 01       	movw	r30, r24
    13d4:	97 80       	ldd	r9, Z+7	; 0x07
    13d6:	29 81       	ldd	r18, Y+1	; 0x01
    13d8:	3a 81       	ldd	r19, Y+2	; 0x02
    13da:	4b 81       	ldd	r20, Y+3	; 0x03
    13dc:	5c 81       	ldd	r21, Y+4	; 0x04
    13de:	6d 81       	ldd	r22, Y+5	; 0x05
    13e0:	7e 81       	ldd	r23, Y+6	; 0x06
    13e2:	8f 81       	ldd	r24, Y+7	; 0x07
    13e4:	98 85       	ldd	r25, Y+8	; 0x08
    13e6:	a2 2c       	mov	r10, r2
    13e8:	b3 2c       	mov	r11, r3
    13ea:	c4 2c       	mov	r12, r4
    13ec:	d5 2c       	mov	r13, r5
    13ee:	e6 2c       	mov	r14, r6
    13f0:	f7 2c       	mov	r15, r7
    13f2:	08 2d       	mov	r16, r8
    13f4:	19 2d       	mov	r17, r9
    13f6:	0e 94 c2 4b 	call	0x9784	; 0x9784 <__subdi3>
    13fa:	a2 2e       	mov	r10, r18
    13fc:	b3 2e       	mov	r11, r19
    13fe:	c4 2e       	mov	r12, r20
    1400:	d5 2e       	mov	r13, r21
    1402:	e6 2e       	mov	r14, r22
    1404:	f7 2e       	mov	r15, r23
    1406:	08 2f       	mov	r16, r24
    1408:	19 2f       	mov	r17, r25
    140a:	a9 82       	std	Y+1, r10	; 0x01
    140c:	ba 82       	std	Y+2, r11	; 0x02
    140e:	cb 82       	std	Y+3, r12	; 0x03
    1410:	dc 82       	std	Y+4, r13	; 0x04
    1412:	ed 82       	std	Y+5, r14	; 0x05
    1414:	fe 82       	std	Y+6, r15	; 0x06
    1416:	0f 83       	std	Y+7, r16	; 0x07
    1418:	18 87       	std	Y+8, r17	; 0x08
    141a:	8d 85       	ldd	r24, Y+13	; 0x0d
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	82 70       	andi	r24, 0x02	; 2
    1422:	99 27       	eor	r25, r25
    1424:	89 2b       	or	r24, r25
    1426:	09 f4       	brne	.+2      	; 0x142a <approx_high_uint64_word_of_uint64_mult_uint64+0x42c>
    1428:	52 c0       	rjmp	.+164    	; 0x14ce <approx_high_uint64_word_of_uint64_mult_uint64+0x4d0>
    142a:	eb 85       	ldd	r30, Y+11	; 0x0b
    142c:	fc 85       	ldd	r31, Y+12	; 0x0c
    142e:	20 81       	ld	r18, Z
    1430:	31 81       	ldd	r19, Z+1	; 0x01
    1432:	42 81       	ldd	r20, Z+2	; 0x02
    1434:	53 81       	ldd	r21, Z+3	; 0x03
    1436:	64 81       	ldd	r22, Z+4	; 0x04
    1438:	75 81       	ldd	r23, Z+5	; 0x05
    143a:	86 81       	ldd	r24, Z+6	; 0x06
    143c:	97 81       	ldd	r25, Z+7	; 0x07
    143e:	a2 2e       	mov	r10, r18
    1440:	b3 2e       	mov	r11, r19
    1442:	c4 2e       	mov	r12, r20
    1444:	d5 2e       	mov	r13, r21
    1446:	e6 2e       	mov	r14, r22
    1448:	f7 2e       	mov	r15, r23
    144a:	08 2f       	mov	r16, r24
    144c:	19 2f       	mov	r17, r25
    144e:	2a 2d       	mov	r18, r10
    1450:	3b 2d       	mov	r19, r11
    1452:	4c 2d       	mov	r20, r12
    1454:	5d 2d       	mov	r21, r13
    1456:	6e 2d       	mov	r22, r14
    1458:	7f 2d       	mov	r23, r15
    145a:	80 2f       	mov	r24, r16
    145c:	91 2f       	mov	r25, r17
    145e:	a0 e0       	ldi	r26, 0x00	; 0
    1460:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    1464:	a4 f5       	brge	.+104    	; 0x14ce <approx_high_uint64_word_of_uint64_mult_uint64+0x4d0>
    1466:	89 85       	ldd	r24, Y+9	; 0x09
    1468:	9a 85       	ldd	r25, Y+10	; 0x0a
    146a:	fc 01       	movw	r30, r24
    146c:	20 80       	ld	r2, Z
    146e:	fc 01       	movw	r30, r24
    1470:	31 80       	ldd	r3, Z+1	; 0x01
    1472:	fc 01       	movw	r30, r24
    1474:	42 80       	ldd	r4, Z+2	; 0x02
    1476:	fc 01       	movw	r30, r24
    1478:	53 80       	ldd	r5, Z+3	; 0x03
    147a:	fc 01       	movw	r30, r24
    147c:	64 80       	ldd	r6, Z+4	; 0x04
    147e:	fc 01       	movw	r30, r24
    1480:	75 80       	ldd	r7, Z+5	; 0x05
    1482:	fc 01       	movw	r30, r24
    1484:	86 80       	ldd	r8, Z+6	; 0x06
    1486:	fc 01       	movw	r30, r24
    1488:	97 80       	ldd	r9, Z+7	; 0x07
    148a:	29 81       	ldd	r18, Y+1	; 0x01
    148c:	3a 81       	ldd	r19, Y+2	; 0x02
    148e:	4b 81       	ldd	r20, Y+3	; 0x03
    1490:	5c 81       	ldd	r21, Y+4	; 0x04
    1492:	6d 81       	ldd	r22, Y+5	; 0x05
    1494:	7e 81       	ldd	r23, Y+6	; 0x06
    1496:	8f 81       	ldd	r24, Y+7	; 0x07
    1498:	98 85       	ldd	r25, Y+8	; 0x08
    149a:	a2 2c       	mov	r10, r2
    149c:	b3 2c       	mov	r11, r3
    149e:	c4 2c       	mov	r12, r4
    14a0:	d5 2c       	mov	r13, r5
    14a2:	e6 2c       	mov	r14, r6
    14a4:	f7 2c       	mov	r15, r7
    14a6:	08 2d       	mov	r16, r8
    14a8:	19 2d       	mov	r17, r9
    14aa:	0e 94 c2 4b 	call	0x9784	; 0x9784 <__subdi3>
    14ae:	a2 2e       	mov	r10, r18
    14b0:	b3 2e       	mov	r11, r19
    14b2:	c4 2e       	mov	r12, r20
    14b4:	d5 2e       	mov	r13, r21
    14b6:	e6 2e       	mov	r14, r22
    14b8:	f7 2e       	mov	r15, r23
    14ba:	08 2f       	mov	r16, r24
    14bc:	19 2f       	mov	r17, r25
    14be:	a9 82       	std	Y+1, r10	; 0x01
    14c0:	ba 82       	std	Y+2, r11	; 0x02
    14c2:	cb 82       	std	Y+3, r12	; 0x03
    14c4:	dc 82       	std	Y+4, r13	; 0x04
    14c6:	ed 82       	std	Y+5, r14	; 0x05
    14c8:	fe 82       	std	Y+6, r15	; 0x06
    14ca:	0f 83       	std	Y+7, r16	; 0x07
    14cc:	18 87       	std	Y+8, r17	; 0x08
    14ce:	29 81       	ldd	r18, Y+1	; 0x01
    14d0:	3a 81       	ldd	r19, Y+2	; 0x02
    14d2:	4b 81       	ldd	r20, Y+3	; 0x03
    14d4:	5c 81       	ldd	r21, Y+4	; 0x04
    14d6:	6d 81       	ldd	r22, Y+5	; 0x05
    14d8:	7e 81       	ldd	r23, Y+6	; 0x06
    14da:	8f 81       	ldd	r24, Y+7	; 0x07
    14dc:	98 85       	ldd	r25, Y+8	; 0x08
    14de:	a2 2e       	mov	r10, r18
    14e0:	b3 2e       	mov	r11, r19
    14e2:	c4 2e       	mov	r12, r20
    14e4:	d5 2e       	mov	r13, r21
    14e6:	e6 2e       	mov	r14, r22
    14e8:	f7 2e       	mov	r15, r23
    14ea:	08 2f       	mov	r16, r24
    14ec:	19 2f       	mov	r17, r25
    14ee:	2a 2d       	mov	r18, r10
    14f0:	3b 2d       	mov	r19, r11
    14f2:	4c 2d       	mov	r20, r12
    14f4:	5d 2d       	mov	r21, r13
    14f6:	6e 2d       	mov	r22, r14
    14f8:	7f 2d       	mov	r23, r15
    14fa:	80 2f       	mov	r24, r16
    14fc:	91 2f       	mov	r25, r17
    14fe:	e5 96       	adiw	r28, 0x35	; 53
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	bf 90       	pop	r11
    1516:	af 90       	pop	r10
    1518:	9f 90       	pop	r9
    151a:	8f 90       	pop	r8
    151c:	7f 90       	pop	r7
    151e:	6f 90       	pop	r6
    1520:	5f 90       	pop	r5
    1522:	4f 90       	pop	r4
    1524:	3f 90       	pop	r3
    1526:	2f 90       	pop	r2
    1528:	08 95       	ret

0000152a <approx_high_uint64_word_of_uint64_mult_uint64_pbv_y>:
    152a:	2f 92       	push	r2
    152c:	3f 92       	push	r3
    152e:	4f 92       	push	r4
    1530:	5f 92       	push	r5
    1532:	6f 92       	push	r6
    1534:	7f 92       	push	r7
    1536:	8f 92       	push	r8
    1538:	9f 92       	push	r9
    153a:	af 92       	push	r10
    153c:	bf 92       	push	r11
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	2b 97       	sbiw	r28, 0x0b	; 11
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	0b 83       	std	Y+3, r16	; 0x03
    155e:	1c 83       	std	Y+4, r17	; 0x04
    1560:	2d 83       	std	Y+5, r18	; 0x05
    1562:	3e 83       	std	Y+6, r19	; 0x06
    1564:	4f 83       	std	Y+7, r20	; 0x07
    1566:	58 87       	std	Y+8, r21	; 0x08
    1568:	69 87       	std	Y+9, r22	; 0x09
    156a:	7a 87       	std	Y+10, r23	; 0x0a
    156c:	eb 86       	std	Y+11, r14	; 0x0b
    156e:	9e 01       	movw	r18, r28
    1570:	2d 5f       	subi	r18, 0xFD	; 253
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	4b 85       	ldd	r20, Y+11	; 0x0b
    157a:	b9 01       	movw	r22, r18
    157c:	0e 94 ff 07 	call	0xffe	; 0xffe <approx_high_uint64_word_of_uint64_mult_uint64>
    1580:	22 2e       	mov	r2, r18
    1582:	33 2e       	mov	r3, r19
    1584:	44 2e       	mov	r4, r20
    1586:	55 2e       	mov	r5, r21
    1588:	66 2e       	mov	r6, r22
    158a:	77 2e       	mov	r7, r23
    158c:	88 2e       	mov	r8, r24
    158e:	99 2e       	mov	r9, r25
    1590:	a2 2c       	mov	r10, r2
    1592:	b3 2c       	mov	r11, r3
    1594:	c4 2c       	mov	r12, r4
    1596:	d5 2c       	mov	r13, r5
    1598:	e6 2c       	mov	r14, r6
    159a:	f7 2c       	mov	r15, r7
    159c:	08 2d       	mov	r16, r8
    159e:	19 2d       	mov	r17, r9
    15a0:	2a 2d       	mov	r18, r10
    15a2:	3b 2d       	mov	r19, r11
    15a4:	4c 2d       	mov	r20, r12
    15a6:	5d 2d       	mov	r21, r13
    15a8:	6e 2d       	mov	r22, r14
    15aa:	7f 2d       	mov	r23, r15
    15ac:	80 2f       	mov	r24, r16
    15ae:	91 2f       	mov	r25, r17
    15b0:	2b 96       	adiw	r28, 0x0b	; 11
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	bf 90       	pop	r11
    15c8:	af 90       	pop	r10
    15ca:	9f 90       	pop	r9
    15cc:	8f 90       	pop	r8
    15ce:	7f 90       	pop	r7
    15d0:	6f 90       	pop	r6
    15d2:	5f 90       	pop	r5
    15d4:	4f 90       	pop	r4
    15d6:	3f 90       	pop	r3
    15d8:	2f 90       	pop	r2
    15da:	08 95       	ret

000015dc <approx_inverse_of_fixpoint_uint64>:
    15dc:	2f 92       	push	r2
    15de:	3f 92       	push	r3
    15e0:	4f 92       	push	r4
    15e2:	5f 92       	push	r5
    15e4:	6f 92       	push	r6
    15e6:	7f 92       	push	r7
    15e8:	8f 92       	push	r8
    15ea:	9f 92       	push	r9
    15ec:	af 92       	push	r10
    15ee:	bf 92       	push	r11
    15f0:	cf 92       	push	r12
    15f2:	df 92       	push	r13
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	c5 55       	subi	r28, 0x55	; 85
    1606:	d1 09       	sbc	r29, r1
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	88 a7       	std	Y+40, r24	; 0x28
    160e:	99 a7       	std	Y+41, r25	; 0x29
    1610:	88 a5       	ldd	r24, Y+40	; 0x28
    1612:	99 a5       	ldd	r25, Y+41	; 0x29
    1614:	fc 01       	movw	r30, r24
    1616:	20 81       	ld	r18, Z
    1618:	2e 87       	std	Y+14, r18	; 0x0e
    161a:	fc 01       	movw	r30, r24
    161c:	21 81       	ldd	r18, Z+1	; 0x01
    161e:	2f 87       	std	Y+15, r18	; 0x0f
    1620:	fc 01       	movw	r30, r24
    1622:	22 81       	ldd	r18, Z+2	; 0x02
    1624:	28 8b       	std	Y+16, r18	; 0x10
    1626:	fc 01       	movw	r30, r24
    1628:	23 81       	ldd	r18, Z+3	; 0x03
    162a:	29 8b       	std	Y+17, r18	; 0x11
    162c:	fc 01       	movw	r30, r24
    162e:	24 81       	ldd	r18, Z+4	; 0x04
    1630:	2a 8b       	std	Y+18, r18	; 0x12
    1632:	fc 01       	movw	r30, r24
    1634:	25 81       	ldd	r18, Z+5	; 0x05
    1636:	2b 8b       	std	Y+19, r18	; 0x13
    1638:	fc 01       	movw	r30, r24
    163a:	26 81       	ldd	r18, Z+6	; 0x06
    163c:	2c 8b       	std	Y+20, r18	; 0x14
    163e:	fc 01       	movw	r30, r24
    1640:	87 81       	ldd	r24, Z+7	; 0x07
    1642:	8d 8b       	std	Y+21, r24	; 0x15
    1644:	2e 85       	ldd	r18, Y+14	; 0x0e
    1646:	3f 85       	ldd	r19, Y+15	; 0x0f
    1648:	48 89       	ldd	r20, Y+16	; 0x10
    164a:	59 89       	ldd	r21, Y+17	; 0x11
    164c:	6a 89       	ldd	r22, Y+18	; 0x12
    164e:	7b 89       	ldd	r23, Y+19	; 0x13
    1650:	8c 89       	ldd	r24, Y+20	; 0x14
    1652:	9d 89       	ldd	r25, Y+21	; 0x15
    1654:	00 e2       	ldi	r16, 0x20	; 32
    1656:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    165a:	a2 2e       	mov	r10, r18
    165c:	b3 2e       	mov	r11, r19
    165e:	c4 2e       	mov	r12, r20
    1660:	d5 2e       	mov	r13, r21
    1662:	e6 2e       	mov	r14, r22
    1664:	f7 2e       	mov	r15, r23
    1666:	08 2f       	mov	r16, r24
    1668:	19 2f       	mov	r17, r25
    166a:	a9 82       	std	Y+1, r10	; 0x01
    166c:	ba 82       	std	Y+2, r11	; 0x02
    166e:	cb 82       	std	Y+3, r12	; 0x03
    1670:	dc 82       	std	Y+4, r13	; 0x04
    1672:	8e 85       	ldd	r24, Y+14	; 0x0e
    1674:	9f 85       	ldd	r25, Y+15	; 0x0f
    1676:	a8 89       	ldd	r26, Y+16	; 0x10
    1678:	b9 89       	ldd	r27, Y+17	; 0x11
    167a:	bb 23       	and	r27, r27
    167c:	c4 f4       	brge	.+48     	; 0x16ae <approx_inverse_of_fixpoint_uint64+0xd2>
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	ab 81       	ldd	r26, Y+3	; 0x03
    1684:	bc 81       	ldd	r27, Y+4	; 0x04
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	a1 1d       	adc	r26, r1
    168a:	b1 1d       	adc	r27, r1
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	9a 83       	std	Y+2, r25	; 0x02
    1690:	ab 83       	std	Y+3, r26	; 0x03
    1692:	bc 83       	std	Y+4, r27	; 0x04
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	ab 81       	ldd	r26, Y+3	; 0x03
    169a:	bc 81       	ldd	r27, Y+4	; 0x04
    169c:	89 2b       	or	r24, r25
    169e:	8a 2b       	or	r24, r26
    16a0:	8b 2b       	or	r24, r27
    16a2:	29 f4       	brne	.+10     	; 0x16ae <approx_inverse_of_fixpoint_uint64+0xd2>
    16a4:	1d 82       	std	Y+5, r1	; 0x05
    16a6:	1e 82       	std	Y+6, r1	; 0x06
    16a8:	1f 82       	std	Y+7, r1	; 0x07
    16aa:	18 86       	std	Y+8, r1	; 0x08
    16ac:	1c c1       	rjmp	.+568    	; 0x18e6 <approx_inverse_of_fixpoint_uint64+0x30a>
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	ab 81       	ldd	r26, Y+3	; 0x03
    16b4:	bc 81       	ldd	r27, Y+4	; 0x04
    16b6:	cd 01       	movw	r24, r26
    16b8:	aa 27       	eor	r26, r26
    16ba:	bb 27       	eor	r27, r27
    16bc:	8e 8b       	std	Y+22, r24	; 0x16
    16be:	9f 8b       	std	Y+23, r25	; 0x17
    16c0:	8e 89       	ldd	r24, Y+22	; 0x16
    16c2:	9f 89       	ldd	r25, Y+23	; 0x17
    16c4:	9f 77       	andi	r25, 0x7F	; 127
    16c6:	89 2b       	or	r24, r25
    16c8:	b9 f5       	brne	.+110    	; 0x1738 <approx_inverse_of_fixpoint_uint64+0x15c>
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	ab 81       	ldd	r26, Y+3	; 0x03
    16d0:	bc 81       	ldd	r27, Y+4	; 0x04
    16d2:	aa 27       	eor	r26, r26
    16d4:	bb 27       	eor	r27, r27
    16d6:	89 2b       	or	r24, r25
    16d8:	8a 2b       	or	r24, r26
    16da:	8b 2b       	or	r24, r27
    16dc:	99 f4       	brne	.+38     	; 0x1704 <approx_inverse_of_fixpoint_uint64+0x128>
    16de:	2e 85       	ldd	r18, Y+14	; 0x0e
    16e0:	3f 85       	ldd	r19, Y+15	; 0x0f
    16e2:	48 89       	ldd	r20, Y+16	; 0x10
    16e4:	59 89       	ldd	r21, Y+17	; 0x11
    16e6:	6a 89       	ldd	r22, Y+18	; 0x12
    16e8:	7b 89       	ldd	r23, Y+19	; 0x13
    16ea:	8c 89       	ldd	r24, Y+20	; 0x14
    16ec:	9d 89       	ldd	r25, Y+21	; 0x15
    16ee:	0e 94 66 4b 	call	0x96cc	; 0x96cc <__negdi2>
    16f2:	a2 2e       	mov	r10, r18
    16f4:	b3 2e       	mov	r11, r19
    16f6:	c4 2e       	mov	r12, r20
    16f8:	d5 2e       	mov	r13, r21
    16fa:	e6 2e       	mov	r14, r22
    16fc:	f7 2e       	mov	r15, r23
    16fe:	08 2f       	mov	r16, r24
    1700:	19 2f       	mov	r17, r25
    1702:	61 c3       	rjmp	.+1730   	; 0x1dc6 <approx_inverse_of_fixpoint_uint64+0x7ea>
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	ab 81       	ldd	r26, Y+3	; 0x03
    170a:	bc 81       	ldd	r27, Y+4	; 0x04
    170c:	aa 27       	eor	r26, r26
    170e:	bb 27       	eor	r27, r27
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	aa 1f       	adc	r26, r26
    1716:	bb 1f       	adc	r27, r27
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	aa 1f       	adc	r26, r26
    171e:	bb 1f       	adc	r27, r27
    1720:	b0 95       	com	r27
    1722:	a0 95       	com	r26
    1724:	90 95       	com	r25
    1726:	81 95       	neg	r24
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	af 4f       	sbci	r26, 0xFF	; 255
    172c:	bf 4f       	sbci	r27, 0xFF	; 255
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	af 83       	std	Y+7, r26	; 0x07
    1734:	b8 87       	std	Y+8, r27	; 0x08
    1736:	d7 c0       	rjmp	.+430    	; 0x18e6 <approx_inverse_of_fixpoint_uint64+0x30a>
    1738:	8e 89       	ldd	r24, Y+22	; 0x16
    173a:	9f 89       	ldd	r25, Y+23	; 0x17
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	81 f4       	brne	.+32     	; 0x1760 <approx_inverse_of_fixpoint_uint64+0x184>
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	9a 81       	ldd	r25, Y+2	; 0x02
    1744:	ab 81       	ldd	r26, Y+3	; 0x03
    1746:	bc 81       	ldd	r27, Y+4	; 0x04
    1748:	b0 95       	com	r27
    174a:	a0 95       	com	r26
    174c:	90 95       	com	r25
    174e:	81 95       	neg	r24
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	af 4f       	sbci	r26, 0xFF	; 255
    1754:	bf 4f       	sbci	r27, 0xFF	; 255
    1756:	8d 83       	std	Y+5, r24	; 0x05
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	af 83       	std	Y+7, r26	; 0x07
    175c:	b8 87       	std	Y+8, r27	; 0x08
    175e:	c3 c0       	rjmp	.+390    	; 0x18e6 <approx_inverse_of_fixpoint_uint64+0x30a>
    1760:	8e 89       	ldd	r24, Y+22	; 0x16
    1762:	9f 89       	ldd	r25, Y+23	; 0x17
    1764:	96 95       	lsr	r25
    1766:	87 95       	ror	r24
    1768:	cc 01       	movw	r24, r24
    176a:	a0 e0       	ldi	r26, 0x00	; 0
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	80 95       	com	r24
    1770:	90 95       	com	r25
    1772:	a0 95       	com	r26
    1774:	b0 95       	com	r27
    1776:	2e 89       	ldd	r18, Y+22	; 0x16
    1778:	3f 89       	ldd	r19, Y+23	; 0x17
    177a:	99 01       	movw	r18, r18
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <__udivmodsi4>
    1788:	da 01       	movw	r26, r20
    178a:	c9 01       	movw	r24, r18
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	8e 8b       	std	Y+22, r24	; 0x16
    1790:	9f 8b       	std	Y+23, r25	; 0x17
    1792:	8e 89       	ldd	r24, Y+22	; 0x16
    1794:	9f 89       	ldd	r25, Y+23	; 0x17
    1796:	cc 01       	movw	r24, r24
    1798:	a0 e0       	ldi	r26, 0x00	; 0
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	8c 01       	movw	r16, r24
    179e:	9d 01       	movw	r18, r26
    17a0:	0f 2e       	mov	r0, r31
    17a2:	f1 e1       	ldi	r31, 0x11	; 17
    17a4:	00 0f       	add	r16, r16
    17a6:	11 1f       	adc	r17, r17
    17a8:	22 1f       	adc	r18, r18
    17aa:	33 1f       	adc	r19, r19
    17ac:	fa 95       	dec	r31
    17ae:	d1 f7       	brne	.-12     	; 0x17a4 <approx_inverse_of_fixpoint_uint64+0x1c8>
    17b0:	f0 2d       	mov	r31, r0
    17b2:	0a a7       	std	Y+42, r16	; 0x2a
    17b4:	1b a7       	std	Y+43, r17	; 0x2b
    17b6:	2c a7       	std	Y+44, r18	; 0x2c
    17b8:	3d a7       	std	Y+45, r19	; 0x2d
    17ba:	8e 89       	ldd	r24, Y+22	; 0x16
    17bc:	9f 89       	ldd	r25, Y+23	; 0x17
    17be:	8c 01       	movw	r16, r24
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	ba 01       	movw	r22, r20
    17ca:	0e a7       	std	Y+46, r16	; 0x2e
    17cc:	1f a7       	std	Y+47, r17	; 0x2f
    17ce:	28 ab       	std	Y+48, r18	; 0x30
    17d0:	39 ab       	std	Y+49, r19	; 0x31
    17d2:	4a ab       	std	Y+50, r20	; 0x32
    17d4:	5b ab       	std	Y+51, r21	; 0x33
    17d6:	6c ab       	std	Y+52, r22	; 0x34
    17d8:	7d ab       	std	Y+53, r23	; 0x35
    17da:	8e 89       	ldd	r24, Y+22	; 0x16
    17dc:	9f 89       	ldd	r25, Y+23	; 0x17
    17de:	cc 01       	movw	r24, r24
    17e0:	a0 e0       	ldi	r26, 0x00	; 0
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	12 96       	adiw	r26, 0x02	; 2
    17e6:	1c 01       	movw	r2, r24
    17e8:	2d 01       	movw	r4, r26
    17ea:	61 2c       	mov	r6, r1
    17ec:	71 2c       	mov	r7, r1
    17ee:	43 01       	movw	r8, r6
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	9a 81       	ldd	r25, Y+2	; 0x02
    17f4:	ab 81       	ldd	r26, Y+3	; 0x03
    17f6:	bc 81       	ldd	r27, Y+4	; 0x04
    17f8:	9c 01       	movw	r18, r24
    17fa:	ad 01       	movw	r20, r26
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	cb 01       	movw	r24, r22
    1802:	a2 2e       	mov	r10, r18
    1804:	b3 2e       	mov	r11, r19
    1806:	c4 2e       	mov	r12, r20
    1808:	d5 2e       	mov	r13, r21
    180a:	e6 2e       	mov	r14, r22
    180c:	f7 2e       	mov	r15, r23
    180e:	08 2f       	mov	r16, r24
    1810:	19 2f       	mov	r17, r25
    1812:	22 2d       	mov	r18, r2
    1814:	33 2d       	mov	r19, r3
    1816:	44 2d       	mov	r20, r4
    1818:	55 2d       	mov	r21, r5
    181a:	66 2d       	mov	r22, r6
    181c:	77 2d       	mov	r23, r7
    181e:	88 2d       	mov	r24, r8
    1820:	99 2d       	mov	r25, r9
    1822:	0e 94 0d 4b 	call	0x961a	; 0x961a <__muldi3>
    1826:	a2 2e       	mov	r10, r18
    1828:	b3 2e       	mov	r11, r19
    182a:	c4 2e       	mov	r12, r20
    182c:	d5 2e       	mov	r13, r21
    182e:	e6 2e       	mov	r14, r22
    1830:	f7 2e       	mov	r15, r23
    1832:	08 2f       	mov	r16, r24
    1834:	19 2f       	mov	r17, r25
    1836:	2a 2d       	mov	r18, r10
    1838:	3b 2d       	mov	r19, r11
    183a:	4c 2d       	mov	r20, r12
    183c:	5d 2d       	mov	r21, r13
    183e:	6e 2d       	mov	r22, r14
    1840:	7f 2d       	mov	r23, r15
    1842:	80 2f       	mov	r24, r16
    1844:	91 2f       	mov	r25, r17
    1846:	a2 2e       	mov	r10, r18
    1848:	b3 2e       	mov	r11, r19
    184a:	c4 2e       	mov	r12, r20
    184c:	d5 2e       	mov	r13, r21
    184e:	e6 2e       	mov	r14, r22
    1850:	f7 2e       	mov	r15, r23
    1852:	08 2f       	mov	r16, r24
    1854:	19 2f       	mov	r17, r25
    1856:	2e a5       	ldd	r18, Y+46	; 0x2e
    1858:	3f a5       	ldd	r19, Y+47	; 0x2f
    185a:	48 a9       	ldd	r20, Y+48	; 0x30
    185c:	59 a9       	ldd	r21, Y+49	; 0x31
    185e:	6a a9       	ldd	r22, Y+50	; 0x32
    1860:	7b a9       	ldd	r23, Y+51	; 0x33
    1862:	8c a9       	ldd	r24, Y+52	; 0x34
    1864:	9d a9       	ldd	r25, Y+53	; 0x35
    1866:	0e 94 0d 4b 	call	0x961a	; 0x961a <__muldi3>
    186a:	22 2e       	mov	r2, r18
    186c:	33 2e       	mov	r3, r19
    186e:	44 2e       	mov	r4, r20
    1870:	55 2e       	mov	r5, r21
    1872:	66 2e       	mov	r6, r22
    1874:	77 2e       	mov	r7, r23
    1876:	88 2e       	mov	r8, r24
    1878:	99 2e       	mov	r9, r25
    187a:	a2 2c       	mov	r10, r2
    187c:	b3 2c       	mov	r11, r3
    187e:	c4 2c       	mov	r12, r4
    1880:	d5 2c       	mov	r13, r5
    1882:	e6 2c       	mov	r14, r6
    1884:	f7 2c       	mov	r15, r7
    1886:	08 2d       	mov	r16, r8
    1888:	19 2d       	mov	r17, r9
    188a:	2a 2d       	mov	r18, r10
    188c:	3b 2d       	mov	r19, r11
    188e:	4c 2d       	mov	r20, r12
    1890:	5d 2d       	mov	r21, r13
    1892:	6e 2d       	mov	r22, r14
    1894:	7f 2d       	mov	r23, r15
    1896:	80 2f       	mov	r24, r16
    1898:	91 2f       	mov	r25, r17
    189a:	00 e2       	ldi	r16, 0x20	; 32
    189c:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    18a0:	a2 2e       	mov	r10, r18
    18a2:	b3 2e       	mov	r11, r19
    18a4:	c4 2e       	mov	r12, r20
    18a6:	d5 2e       	mov	r13, r21
    18a8:	e6 2e       	mov	r14, r22
    18aa:	f7 2e       	mov	r15, r23
    18ac:	08 2f       	mov	r16, r24
    18ae:	19 2f       	mov	r17, r25
    18b0:	a6 01       	movw	r20, r12
    18b2:	95 01       	movw	r18, r10
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	ab 81       	ldd	r26, Y+3	; 0x03
    18ba:	bc 81       	ldd	r27, Y+4	; 0x04
    18bc:	82 0f       	add	r24, r18
    18be:	93 1f       	adc	r25, r19
    18c0:	a4 1f       	adc	r26, r20
    18c2:	b5 1f       	adc	r27, r21
    18c4:	2a a5       	ldd	r18, Y+42	; 0x2a
    18c6:	3b a5       	ldd	r19, Y+43	; 0x2b
    18c8:	4c a5       	ldd	r20, Y+44	; 0x2c
    18ca:	5d a5       	ldd	r21, Y+45	; 0x2d
    18cc:	28 1b       	sub	r18, r24
    18ce:	39 0b       	sbc	r19, r25
    18d0:	4a 0b       	sbc	r20, r26
    18d2:	5b 0b       	sbc	r21, r27
    18d4:	da 01       	movw	r26, r20
    18d6:	c9 01       	movw	r24, r18
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	a1 09       	sbc	r26, r1
    18dc:	b1 09       	sbc	r27, r1
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	af 83       	std	Y+7, r26	; 0x07
    18e4:	b8 87       	std	Y+8, r27	; 0x08
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	af 81       	ldd	r26, Y+7	; 0x07
    18ec:	b8 85       	ldd	r27, Y+8	; 0x08
    18ee:	9c 01       	movw	r18, r24
    18f0:	ad 01       	movw	r20, r26
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	cb 01       	movw	r24, r22
    18f8:	e2 2f       	mov	r30, r18
    18fa:	e0 60       	ori	r30, 0x00	; 0
    18fc:	ee ab       	std	Y+54, r30	; 0x36
    18fe:	f3 2f       	mov	r31, r19
    1900:	f0 60       	ori	r31, 0x00	; 0
    1902:	ff ab       	std	Y+55, r31	; 0x37
    1904:	04 2f       	mov	r16, r20
    1906:	00 60       	ori	r16, 0x00	; 0
    1908:	08 af       	std	Y+56, r16	; 0x38
    190a:	15 2f       	mov	r17, r21
    190c:	10 60       	ori	r17, 0x00	; 0
    190e:	19 af       	std	Y+57, r17	; 0x39
    1910:	e6 2f       	mov	r30, r22
    1912:	e1 60       	ori	r30, 0x01	; 1
    1914:	ea af       	std	Y+58, r30	; 0x3a
    1916:	f7 2f       	mov	r31, r23
    1918:	f0 60       	ori	r31, 0x00	; 0
    191a:	fb af       	std	Y+59, r31	; 0x3b
    191c:	08 2f       	mov	r16, r24
    191e:	00 60       	ori	r16, 0x00	; 0
    1920:	0c af       	std	Y+60, r16	; 0x3c
    1922:	19 2f       	mov	r17, r25
    1924:	10 60       	ori	r17, 0x00	; 0
    1926:	1d af       	std	Y+61, r17	; 0x3d
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	ab 81       	ldd	r26, Y+3	; 0x03
    192e:	bc 81       	ldd	r27, Y+4	; 0x04
    1930:	9c 01       	movw	r18, r24
    1932:	ad 01       	movw	r20, r26
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	cb 01       	movw	r24, r22
    193a:	a2 2e       	mov	r10, r18
    193c:	b3 2e       	mov	r11, r19
    193e:	c4 2e       	mov	r12, r20
    1940:	d5 2e       	mov	r13, r21
    1942:	e6 2e       	mov	r14, r22
    1944:	f7 2e       	mov	r15, r23
    1946:	08 2f       	mov	r16, r24
    1948:	19 2f       	mov	r17, r25
    194a:	2e a9       	ldd	r18, Y+54	; 0x36
    194c:	3f a9       	ldd	r19, Y+55	; 0x37
    194e:	48 ad       	ldd	r20, Y+56	; 0x38
    1950:	59 ad       	ldd	r21, Y+57	; 0x39
    1952:	6a ad       	ldd	r22, Y+58	; 0x3a
    1954:	7b ad       	ldd	r23, Y+59	; 0x3b
    1956:	8c ad       	ldd	r24, Y+60	; 0x3c
    1958:	9d ad       	ldd	r25, Y+61	; 0x3d
    195a:	0e 94 0d 4b 	call	0x961a	; 0x961a <__muldi3>
    195e:	a2 2e       	mov	r10, r18
    1960:	b3 2e       	mov	r11, r19
    1962:	c4 2e       	mov	r12, r20
    1964:	d5 2e       	mov	r13, r21
    1966:	e6 2e       	mov	r14, r22
    1968:	f7 2e       	mov	r15, r23
    196a:	08 2f       	mov	r16, r24
    196c:	19 2f       	mov	r17, r25
    196e:	2a 2c       	mov	r2, r10
    1970:	3b 2c       	mov	r3, r11
    1972:	4c 2c       	mov	r4, r12
    1974:	5d 2c       	mov	r5, r13
    1976:	6e 2c       	mov	r6, r14
    1978:	7f 2c       	mov	r7, r15
    197a:	80 2e       	mov	r8, r16
    197c:	91 2e       	mov	r9, r17
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	ab 81       	ldd	r26, Y+3	; 0x03
    1984:	bc 81       	ldd	r27, Y+4	; 0x04
    1986:	b6 95       	lsr	r27
    1988:	a7 95       	ror	r26
    198a:	97 95       	ror	r25
    198c:	87 95       	ror	r24
    198e:	8c 01       	movw	r16, r24
    1990:	9d 01       	movw	r18, r26
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	ba 01       	movw	r22, r20
    1998:	0e af       	std	Y+62, r16	; 0x3e
    199a:	1f af       	std	Y+63, r17	; 0x3f
    199c:	21 96       	adiw	r28, 0x01	; 1
    199e:	2f af       	std	Y+63, r18	; 0x3f
    19a0:	21 97       	sbiw	r28, 0x01	; 1
    19a2:	22 96       	adiw	r28, 0x02	; 2
    19a4:	3f af       	std	Y+63, r19	; 0x3f
    19a6:	22 97       	sbiw	r28, 0x02	; 2
    19a8:	23 96       	adiw	r28, 0x03	; 3
    19aa:	4f af       	std	Y+63, r20	; 0x3f
    19ac:	23 97       	sbiw	r28, 0x03	; 3
    19ae:	24 96       	adiw	r28, 0x04	; 4
    19b0:	5f af       	std	Y+63, r21	; 0x3f
    19b2:	24 97       	sbiw	r28, 0x04	; 4
    19b4:	25 96       	adiw	r28, 0x05	; 5
    19b6:	6f af       	std	Y+63, r22	; 0x3f
    19b8:	25 97       	sbiw	r28, 0x05	; 5
    19ba:	26 96       	adiw	r28, 0x06	; 6
    19bc:	7f af       	std	Y+63, r23	; 0x3f
    19be:	26 97       	sbiw	r28, 0x06	; 6
    19c0:	22 2d       	mov	r18, r2
    19c2:	33 2d       	mov	r19, r3
    19c4:	44 2d       	mov	r20, r4
    19c6:	55 2d       	mov	r21, r5
    19c8:	66 2d       	mov	r22, r6
    19ca:	77 2d       	mov	r23, r7
    19cc:	88 2d       	mov	r24, r8
    19ce:	99 2d       	mov	r25, r9
    19d0:	ae ac       	ldd	r10, Y+62	; 0x3e
    19d2:	bf ac       	ldd	r11, Y+63	; 0x3f
    19d4:	21 96       	adiw	r28, 0x01	; 1
    19d6:	cf ac       	ldd	r12, Y+63	; 0x3f
    19d8:	21 97       	sbiw	r28, 0x01	; 1
    19da:	22 96       	adiw	r28, 0x02	; 2
    19dc:	df ac       	ldd	r13, Y+63	; 0x3f
    19de:	22 97       	sbiw	r28, 0x02	; 2
    19e0:	23 96       	adiw	r28, 0x03	; 3
    19e2:	ef ac       	ldd	r14, Y+63	; 0x3f
    19e4:	23 97       	sbiw	r28, 0x03	; 3
    19e6:	24 96       	adiw	r28, 0x04	; 4
    19e8:	ff ac       	ldd	r15, Y+63	; 0x3f
    19ea:	24 97       	sbiw	r28, 0x04	; 4
    19ec:	25 96       	adiw	r28, 0x05	; 5
    19ee:	0f ad       	ldd	r16, Y+63	; 0x3f
    19f0:	25 97       	sbiw	r28, 0x05	; 5
    19f2:	26 96       	adiw	r28, 0x06	; 6
    19f4:	1f ad       	ldd	r17, Y+63	; 0x3f
    19f6:	26 97       	sbiw	r28, 0x06	; 6
    19f8:	0e 94 ad 4b 	call	0x975a	; 0x975a <__adddi3>
    19fc:	a2 2e       	mov	r10, r18
    19fe:	b3 2e       	mov	r11, r19
    1a00:	c4 2e       	mov	r12, r20
    1a02:	d5 2e       	mov	r13, r21
    1a04:	e6 2e       	mov	r14, r22
    1a06:	f7 2e       	mov	r15, r23
    1a08:	08 2f       	mov	r16, r24
    1a0a:	19 2f       	mov	r17, r25
    1a0c:	a8 a2       	std	Y+32, r10	; 0x20
    1a0e:	b9 a2       	std	Y+33, r11	; 0x21
    1a10:	ca a2       	std	Y+34, r12	; 0x22
    1a12:	db a2       	std	Y+35, r13	; 0x23
    1a14:	ec a2       	std	Y+36, r14	; 0x24
    1a16:	fd a2       	std	Y+37, r15	; 0x25
    1a18:	0e a3       	std	Y+38, r16	; 0x26
    1a1a:	1f a3       	std	Y+39, r17	; 0x27
    1a1c:	28 a1       	ldd	r18, Y+32	; 0x20
    1a1e:	39 a1       	ldd	r19, Y+33	; 0x21
    1a20:	4a a1       	ldd	r20, Y+34	; 0x22
    1a22:	5b a1       	ldd	r21, Y+35	; 0x23
    1a24:	6c a1       	ldd	r22, Y+36	; 0x24
    1a26:	7d a1       	ldd	r23, Y+37	; 0x25
    1a28:	8e a1       	ldd	r24, Y+38	; 0x26
    1a2a:	9f a1       	ldd	r25, Y+39	; 0x27
    1a2c:	29 87       	std	Y+9, r18	; 0x09
    1a2e:	3a 87       	std	Y+10, r19	; 0x0a
    1a30:	4b 87       	std	Y+11, r20	; 0x0b
    1a32:	5c 87       	std	Y+12, r21	; 0x0c
    1a34:	a8 a0       	ldd	r10, Y+32	; 0x20
    1a36:	b9 a0       	ldd	r11, Y+33	; 0x21
    1a38:	ca a0       	ldd	r12, Y+34	; 0x22
    1a3a:	db a0       	ldd	r13, Y+35	; 0x23
    1a3c:	ec a0       	ldd	r14, Y+36	; 0x24
    1a3e:	fd a0       	ldd	r15, Y+37	; 0x25
    1a40:	0e a1       	ldd	r16, Y+38	; 0x26
    1a42:	1f a1       	ldd	r17, Y+39	; 0x27
    1a44:	2a 2d       	mov	r18, r10
    1a46:	3b 2d       	mov	r19, r11
    1a48:	4c 2d       	mov	r20, r12
    1a4a:	5d 2d       	mov	r21, r13
    1a4c:	6e 2d       	mov	r22, r14
    1a4e:	7f 2d       	mov	r23, r15
    1a50:	80 2f       	mov	r24, r16
    1a52:	91 2f       	mov	r25, r17
    1a54:	00 e2       	ldi	r16, 0x20	; 32
    1a56:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    1a5a:	a2 2e       	mov	r10, r18
    1a5c:	b3 2e       	mov	r11, r19
    1a5e:	c4 2e       	mov	r12, r20
    1a60:	d5 2e       	mov	r13, r21
    1a62:	e6 2e       	mov	r14, r22
    1a64:	f7 2e       	mov	r15, r23
    1a66:	08 2f       	mov	r16, r24
    1a68:	19 2f       	mov	r17, r25
    1a6a:	ad 86       	std	Y+13, r10	; 0x0d
    1a6c:	33 c0       	rjmp	.+102    	; 0x1ad4 <approx_inverse_of_fixpoint_uint64+0x4f8>
    1a6e:	29 85       	ldd	r18, Y+9	; 0x09
    1a70:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a72:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a74:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	ab 81       	ldd	r26, Y+3	; 0x03
    1a7c:	bc 81       	ldd	r27, Y+4	; 0x04
    1a7e:	28 0f       	add	r18, r24
    1a80:	39 1f       	adc	r19, r25
    1a82:	4a 1f       	adc	r20, r26
    1a84:	5b 1f       	adc	r21, r27
    1a86:	89 85       	ldd	r24, Y+9	; 0x09
    1a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8a:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a8c:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a8e:	28 17       	cp	r18, r24
    1a90:	39 07       	cpc	r19, r25
    1a92:	4a 07       	cpc	r20, r26
    1a94:	5b 07       	cpc	r21, r27
    1a96:	18 f4       	brcc	.+6      	; 0x1a9e <approx_inverse_of_fixpoint_uint64+0x4c2>
    1a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9a:	8f 5f       	subi	r24, 0xFF	; 255
    1a9c:	8d 87       	std	Y+13, r24	; 0x0d
    1a9e:	29 85       	ldd	r18, Y+9	; 0x09
    1aa0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1aa2:	4b 85       	ldd	r20, Y+11	; 0x0b
    1aa4:	5c 85       	ldd	r21, Y+12	; 0x0c
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	ab 81       	ldd	r26, Y+3	; 0x03
    1aac:	bc 81       	ldd	r27, Y+4	; 0x04
    1aae:	82 0f       	add	r24, r18
    1ab0:	93 1f       	adc	r25, r19
    1ab2:	a4 1f       	adc	r26, r20
    1ab4:	b5 1f       	adc	r27, r21
    1ab6:	89 87       	std	Y+9, r24	; 0x09
    1ab8:	9a 87       	std	Y+10, r25	; 0x0a
    1aba:	ab 87       	std	Y+11, r26	; 0x0b
    1abc:	bc 87       	std	Y+12, r27	; 0x0c
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	af 81       	ldd	r26, Y+7	; 0x07
    1ac4:	b8 85       	ldd	r27, Y+8	; 0x08
    1ac6:	01 96       	adiw	r24, 0x01	; 1
    1ac8:	a1 1d       	adc	r26, r1
    1aca:	b1 1d       	adc	r27, r1
    1acc:	8d 83       	std	Y+5, r24	; 0x05
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	af 83       	std	Y+7, r26	; 0x07
    1ad2:	b8 87       	std	Y+8, r27	; 0x08
    1ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad6:	88 23       	and	r24, r24
    1ad8:	51 f6       	brne	.-108    	; 0x1a6e <approx_inverse_of_fixpoint_uint64+0x492>
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	af 81       	ldd	r26, Y+7	; 0x07
    1ae0:	b8 85       	ldd	r27, Y+8	; 0x08
    1ae2:	5c 01       	movw	r10, r24
    1ae4:	6d 01       	movw	r12, r26
    1ae6:	e1 2c       	mov	r14, r1
    1ae8:	f1 2c       	mov	r15, r1
    1aea:	87 01       	movw	r16, r14
    1aec:	2a 2d       	mov	r18, r10
    1aee:	3b 2d       	mov	r19, r11
    1af0:	4c 2d       	mov	r20, r12
    1af2:	5d 2d       	mov	r21, r13
    1af4:	6e 2d       	mov	r22, r14
    1af6:	7f 2d       	mov	r23, r15
    1af8:	80 2f       	mov	r24, r16
    1afa:	91 2f       	mov	r25, r17
    1afc:	0f e1       	ldi	r16, 0x1F	; 31
    1afe:	0e 94 76 4b 	call	0x96ec	; 0x96ec <__ashldi3>
    1b02:	a2 2e       	mov	r10, r18
    1b04:	b3 2e       	mov	r11, r19
    1b06:	c4 2e       	mov	r12, r20
    1b08:	d5 2e       	mov	r13, r21
    1b0a:	e6 2e       	mov	r14, r22
    1b0c:	f7 2e       	mov	r15, r23
    1b0e:	08 2f       	mov	r16, r24
    1b10:	19 2f       	mov	r17, r25
    1b12:	2a 2d       	mov	r18, r10
    1b14:	20 60       	ori	r18, 0x00	; 0
    1b16:	27 96       	adiw	r28, 0x07	; 7
    1b18:	2f af       	std	Y+63, r18	; 0x3f
    1b1a:	27 97       	sbiw	r28, 0x07	; 7
    1b1c:	3b 2d       	mov	r19, r11
    1b1e:	30 60       	ori	r19, 0x00	; 0
    1b20:	28 96       	adiw	r28, 0x08	; 8
    1b22:	3f af       	std	Y+63, r19	; 0x3f
    1b24:	28 97       	sbiw	r28, 0x08	; 8
    1b26:	4c 2d       	mov	r20, r12
    1b28:	40 60       	ori	r20, 0x00	; 0
    1b2a:	29 96       	adiw	r28, 0x09	; 9
    1b2c:	4f af       	std	Y+63, r20	; 0x3f
    1b2e:	29 97       	sbiw	r28, 0x09	; 9
    1b30:	5d 2d       	mov	r21, r13
    1b32:	50 60       	ori	r21, 0x00	; 0
    1b34:	2a 96       	adiw	r28, 0x0a	; 10
    1b36:	5f af       	std	Y+63, r21	; 0x3f
    1b38:	2a 97       	sbiw	r28, 0x0a	; 10
    1b3a:	6e 2d       	mov	r22, r14
    1b3c:	60 60       	ori	r22, 0x00	; 0
    1b3e:	2b 96       	adiw	r28, 0x0b	; 11
    1b40:	6f af       	std	Y+63, r22	; 0x3f
    1b42:	2b 97       	sbiw	r28, 0x0b	; 11
    1b44:	7f 2d       	mov	r23, r15
    1b46:	70 60       	ori	r23, 0x00	; 0
    1b48:	2c 96       	adiw	r28, 0x0c	; 12
    1b4a:	7f af       	std	Y+63, r23	; 0x3f
    1b4c:	2c 97       	sbiw	r28, 0x0c	; 12
    1b4e:	80 2f       	mov	r24, r16
    1b50:	80 60       	ori	r24, 0x00	; 0
    1b52:	2d 96       	adiw	r28, 0x0d	; 13
    1b54:	8f af       	std	Y+63, r24	; 0x3f
    1b56:	2d 97       	sbiw	r28, 0x0d	; 13
    1b58:	e1 2f       	mov	r30, r17
    1b5a:	e0 68       	ori	r30, 0x80	; 128
    1b5c:	2e 96       	adiw	r28, 0x0e	; 14
    1b5e:	ef af       	std	Y+63, r30	; 0x3f
    1b60:	2e 97       	sbiw	r28, 0x0e	; 14
    1b62:	27 96       	adiw	r28, 0x07	; 7
    1b64:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b66:	27 97       	sbiw	r28, 0x07	; 7
    1b68:	f8 8f       	std	Y+24, r31	; 0x18
    1b6a:	28 96       	adiw	r28, 0x08	; 8
    1b6c:	0f ad       	ldd	r16, Y+63	; 0x3f
    1b6e:	28 97       	sbiw	r28, 0x08	; 8
    1b70:	09 8f       	std	Y+25, r16	; 0x19
    1b72:	29 96       	adiw	r28, 0x09	; 9
    1b74:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b76:	29 97       	sbiw	r28, 0x09	; 9
    1b78:	1a 8f       	std	Y+26, r17	; 0x1a
    1b7a:	2a 96       	adiw	r28, 0x0a	; 10
    1b7c:	2f ad       	ldd	r18, Y+63	; 0x3f
    1b7e:	2a 97       	sbiw	r28, 0x0a	; 10
    1b80:	2b 8f       	std	Y+27, r18	; 0x1b
    1b82:	2b 96       	adiw	r28, 0x0b	; 11
    1b84:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b86:	2b 97       	sbiw	r28, 0x0b	; 11
    1b88:	3c 8f       	std	Y+28, r19	; 0x1c
    1b8a:	2c 96       	adiw	r28, 0x0c	; 12
    1b8c:	4f ad       	ldd	r20, Y+63	; 0x3f
    1b8e:	2c 97       	sbiw	r28, 0x0c	; 12
    1b90:	4d 8f       	std	Y+29, r20	; 0x1d
    1b92:	2d 96       	adiw	r28, 0x0d	; 13
    1b94:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b96:	2d 97       	sbiw	r28, 0x0d	; 13
    1b98:	5e 8f       	std	Y+30, r21	; 0x1e
    1b9a:	2e 96       	adiw	r28, 0x0e	; 14
    1b9c:	6f ad       	ldd	r22, Y+63	; 0x3f
    1b9e:	2e 97       	sbiw	r28, 0x0e	; 14
    1ba0:	6f 8f       	std	Y+31, r22	; 0x1f
    1ba2:	a8 8c       	ldd	r10, Y+24	; 0x18
    1ba4:	b9 8c       	ldd	r11, Y+25	; 0x19
    1ba6:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1ba8:	db 8c       	ldd	r13, Y+27	; 0x1b
    1baa:	ec 8c       	ldd	r14, Y+28	; 0x1c
    1bac:	fd 8c       	ldd	r15, Y+29	; 0x1d
    1bae:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1bb0:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1bb2:	2a 2d       	mov	r18, r10
    1bb4:	3b 2d       	mov	r19, r11
    1bb6:	4c 2d       	mov	r20, r12
    1bb8:	5d 2d       	mov	r21, r13
    1bba:	6e 2d       	mov	r22, r14
    1bbc:	7f 2d       	mov	r23, r15
    1bbe:	80 2f       	mov	r24, r16
    1bc0:	91 2f       	mov	r25, r17
    1bc2:	0e 94 66 4b 	call	0x96cc	; 0x96cc <__negdi2>
    1bc6:	2f 96       	adiw	r28, 0x0f	; 15
    1bc8:	2f af       	std	Y+63, r18	; 0x3f
    1bca:	2f 97       	sbiw	r28, 0x0f	; 15
    1bcc:	60 96       	adiw	r28, 0x10	; 16
    1bce:	3f af       	std	Y+63, r19	; 0x3f
    1bd0:	60 97       	sbiw	r28, 0x10	; 16
    1bd2:	61 96       	adiw	r28, 0x11	; 17
    1bd4:	4f af       	std	Y+63, r20	; 0x3f
    1bd6:	61 97       	sbiw	r28, 0x11	; 17
    1bd8:	62 96       	adiw	r28, 0x12	; 18
    1bda:	5f af       	std	Y+63, r21	; 0x3f
    1bdc:	62 97       	sbiw	r28, 0x12	; 18
    1bde:	63 96       	adiw	r28, 0x13	; 19
    1be0:	6f af       	std	Y+63, r22	; 0x3f
    1be2:	63 97       	sbiw	r28, 0x13	; 19
    1be4:	64 96       	adiw	r28, 0x14	; 20
    1be6:	7f af       	std	Y+63, r23	; 0x3f
    1be8:	64 97       	sbiw	r28, 0x14	; 20
    1bea:	65 96       	adiw	r28, 0x15	; 21
    1bec:	8f af       	std	Y+63, r24	; 0x3f
    1bee:	65 97       	sbiw	r28, 0x15	; 21
    1bf0:	66 96       	adiw	r28, 0x16	; 22
    1bf2:	9f af       	std	Y+63, r25	; 0x3f
    1bf4:	66 97       	sbiw	r28, 0x16	; 22
    1bf6:	2e 85       	ldd	r18, Y+14	; 0x0e
    1bf8:	3f 85       	ldd	r19, Y+15	; 0x0f
    1bfa:	48 89       	ldd	r20, Y+16	; 0x10
    1bfc:	59 89       	ldd	r21, Y+17	; 0x11
    1bfe:	6a 89       	ldd	r22, Y+18	; 0x12
    1c00:	7b 89       	ldd	r23, Y+19	; 0x13
    1c02:	8c 89       	ldd	r24, Y+20	; 0x14
    1c04:	9d 89       	ldd	r25, Y+21	; 0x15
    1c06:	01 e0       	ldi	r16, 0x01	; 1
    1c08:	0e 94 76 4b 	call	0x96ec	; 0x96ec <__ashldi3>
    1c0c:	62 2e       	mov	r6, r18
    1c0e:	73 2e       	mov	r7, r19
    1c10:	84 2e       	mov	r8, r20
    1c12:	95 2e       	mov	r9, r21
    1c14:	a6 2e       	mov	r10, r22
    1c16:	b7 2e       	mov	r11, r23
    1c18:	c8 2e       	mov	r12, r24
    1c1a:	d9 2e       	mov	r13, r25
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	48 96       	adiw	r24, 0x18	; 24
    1c20:	e1 2c       	mov	r14, r1
    1c22:	06 2d       	mov	r16, r6
    1c24:	17 2d       	mov	r17, r7
    1c26:	28 2d       	mov	r18, r8
    1c28:	39 2d       	mov	r19, r9
    1c2a:	4a 2d       	mov	r20, r10
    1c2c:	5b 2d       	mov	r21, r11
    1c2e:	6c 2d       	mov	r22, r12
    1c30:	7d 2d       	mov	r23, r13
    1c32:	0e 94 95 0a 	call	0x152a	; 0x152a <approx_high_uint64_word_of_uint64_mult_uint64_pbv_y>
    1c36:	22 2e       	mov	r2, r18
    1c38:	33 2e       	mov	r3, r19
    1c3a:	44 2e       	mov	r4, r20
    1c3c:	55 2e       	mov	r5, r21
    1c3e:	66 2e       	mov	r6, r22
    1c40:	77 2e       	mov	r7, r23
    1c42:	88 2e       	mov	r8, r24
    1c44:	99 2e       	mov	r9, r25
    1c46:	2f 96       	adiw	r28, 0x0f	; 15
    1c48:	2f ad       	ldd	r18, Y+63	; 0x3f
    1c4a:	2f 97       	sbiw	r28, 0x0f	; 15
    1c4c:	60 96       	adiw	r28, 0x10	; 16
    1c4e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c50:	60 97       	sbiw	r28, 0x10	; 16
    1c52:	61 96       	adiw	r28, 0x11	; 17
    1c54:	4f ad       	ldd	r20, Y+63	; 0x3f
    1c56:	61 97       	sbiw	r28, 0x11	; 17
    1c58:	62 96       	adiw	r28, 0x12	; 18
    1c5a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c5c:	62 97       	sbiw	r28, 0x12	; 18
    1c5e:	63 96       	adiw	r28, 0x13	; 19
    1c60:	6f ad       	ldd	r22, Y+63	; 0x3f
    1c62:	63 97       	sbiw	r28, 0x13	; 19
    1c64:	64 96       	adiw	r28, 0x14	; 20
    1c66:	7f ad       	ldd	r23, Y+63	; 0x3f
    1c68:	64 97       	sbiw	r28, 0x14	; 20
    1c6a:	65 96       	adiw	r28, 0x15	; 21
    1c6c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c6e:	65 97       	sbiw	r28, 0x15	; 21
    1c70:	66 96       	adiw	r28, 0x16	; 22
    1c72:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c74:	66 97       	sbiw	r28, 0x16	; 22
    1c76:	a2 2c       	mov	r10, r2
    1c78:	b3 2c       	mov	r11, r3
    1c7a:	c4 2c       	mov	r12, r4
    1c7c:	d5 2c       	mov	r13, r5
    1c7e:	e6 2c       	mov	r14, r6
    1c80:	f7 2c       	mov	r15, r7
    1c82:	08 2d       	mov	r16, r8
    1c84:	19 2d       	mov	r17, r9
    1c86:	0e 94 c2 4b 	call	0x9784	; 0x9784 <__subdi3>
    1c8a:	a2 2e       	mov	r10, r18
    1c8c:	b3 2e       	mov	r11, r19
    1c8e:	c4 2e       	mov	r12, r20
    1c90:	d5 2e       	mov	r13, r21
    1c92:	e6 2e       	mov	r14, r22
    1c94:	f7 2e       	mov	r15, r23
    1c96:	08 2f       	mov	r16, r24
    1c98:	19 2f       	mov	r17, r25
    1c9a:	a8 a2       	std	Y+32, r10	; 0x20
    1c9c:	b9 a2       	std	Y+33, r11	; 0x21
    1c9e:	ca a2       	std	Y+34, r12	; 0x22
    1ca0:	db a2       	std	Y+35, r13	; 0x23
    1ca2:	ec a2       	std	Y+36, r14	; 0x24
    1ca4:	fd a2       	std	Y+37, r15	; 0x25
    1ca6:	0e a3       	std	Y+38, r16	; 0x26
    1ca8:	1f a3       	std	Y+39, r17	; 0x27
    1caa:	9e 01       	movw	r18, r28
    1cac:	20 5e       	subi	r18, 0xE0	; 224
    1cae:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	48 96       	adiw	r24, 0x18	; 24
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	b9 01       	movw	r22, r18
    1cb8:	0e 94 ff 07 	call	0xffe	; 0xffe <approx_high_uint64_word_of_uint64_mult_uint64>
    1cbc:	a2 2e       	mov	r10, r18
    1cbe:	b3 2e       	mov	r11, r19
    1cc0:	c4 2e       	mov	r12, r20
    1cc2:	d5 2e       	mov	r13, r21
    1cc4:	e6 2e       	mov	r14, r22
    1cc6:	f7 2e       	mov	r15, r23
    1cc8:	08 2f       	mov	r16, r24
    1cca:	19 2f       	mov	r17, r25
    1ccc:	28 a1       	ldd	r18, Y+32	; 0x20
    1cce:	39 a1       	ldd	r19, Y+33	; 0x21
    1cd0:	4a a1       	ldd	r20, Y+34	; 0x22
    1cd2:	5b a1       	ldd	r21, Y+35	; 0x23
    1cd4:	6c a1       	ldd	r22, Y+36	; 0x24
    1cd6:	7d a1       	ldd	r23, Y+37	; 0x25
    1cd8:	8e a1       	ldd	r24, Y+38	; 0x26
    1cda:	9f a1       	ldd	r25, Y+39	; 0x27
    1cdc:	22 2e       	mov	r2, r18
    1cde:	33 2e       	mov	r3, r19
    1ce0:	44 2e       	mov	r4, r20
    1ce2:	55 2e       	mov	r5, r21
    1ce4:	66 2e       	mov	r6, r22
    1ce6:	77 2e       	mov	r7, r23
    1ce8:	88 2e       	mov	r8, r24
    1cea:	99 2e       	mov	r9, r25
    1cec:	22 2d       	mov	r18, r2
    1cee:	33 2d       	mov	r19, r3
    1cf0:	44 2d       	mov	r20, r4
    1cf2:	55 2d       	mov	r21, r5
    1cf4:	66 2d       	mov	r22, r6
    1cf6:	77 2d       	mov	r23, r7
    1cf8:	88 2d       	mov	r24, r8
    1cfa:	99 2d       	mov	r25, r9
    1cfc:	a0 e0       	ldi	r26, 0x00	; 0
    1cfe:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    1d02:	4c f0       	brlt	.+18     	; 0x1d16 <approx_inverse_of_fixpoint_uint64+0x73a>
    1d04:	28 8c       	ldd	r2, Y+24	; 0x18
    1d06:	39 8c       	ldd	r3, Y+25	; 0x19
    1d08:	4a 8c       	ldd	r4, Y+26	; 0x1a
    1d0a:	5b 8c       	ldd	r5, Y+27	; 0x1b
    1d0c:	6c 8c       	ldd	r6, Y+28	; 0x1c
    1d0e:	7d 8c       	ldd	r7, Y+29	; 0x1d
    1d10:	8e 8c       	ldd	r8, Y+30	; 0x1e
    1d12:	9f 8c       	ldd	r9, Y+31	; 0x1f
    1d14:	08 c0       	rjmp	.+16     	; 0x1d26 <approx_inverse_of_fixpoint_uint64+0x74a>
    1d16:	21 2c       	mov	r2, r1
    1d18:	31 2c       	mov	r3, r1
    1d1a:	41 2c       	mov	r4, r1
    1d1c:	51 2c       	mov	r5, r1
    1d1e:	61 2c       	mov	r6, r1
    1d20:	71 2c       	mov	r7, r1
    1d22:	81 2c       	mov	r8, r1
    1d24:	91 2c       	mov	r9, r1
    1d26:	2a 2d       	mov	r18, r10
    1d28:	3b 2d       	mov	r19, r11
    1d2a:	4c 2d       	mov	r20, r12
    1d2c:	5d 2d       	mov	r21, r13
    1d2e:	6e 2d       	mov	r22, r14
    1d30:	7f 2d       	mov	r23, r15
    1d32:	80 2f       	mov	r24, r16
    1d34:	91 2f       	mov	r25, r17
    1d36:	a2 2c       	mov	r10, r2
    1d38:	b3 2c       	mov	r11, r3
    1d3a:	c4 2c       	mov	r12, r4
    1d3c:	d5 2c       	mov	r13, r5
    1d3e:	e6 2c       	mov	r14, r6
    1d40:	f7 2c       	mov	r15, r7
    1d42:	08 2d       	mov	r16, r8
    1d44:	19 2d       	mov	r17, r9
    1d46:	0e 94 ad 4b 	call	0x975a	; 0x975a <__adddi3>
    1d4a:	a2 2e       	mov	r10, r18
    1d4c:	b3 2e       	mov	r11, r19
    1d4e:	c4 2e       	mov	r12, r20
    1d50:	d5 2e       	mov	r13, r21
    1d52:	e6 2e       	mov	r14, r22
    1d54:	f7 2e       	mov	r15, r23
    1d56:	08 2f       	mov	r16, r24
    1d58:	19 2f       	mov	r17, r25
    1d5a:	a8 8e       	std	Y+24, r10	; 0x18
    1d5c:	b9 8e       	std	Y+25, r11	; 0x19
    1d5e:	ca 8e       	std	Y+26, r12	; 0x1a
    1d60:	db 8e       	std	Y+27, r13	; 0x1b
    1d62:	ec 8e       	std	Y+28, r14	; 0x1c
    1d64:	fd 8e       	std	Y+29, r15	; 0x1d
    1d66:	0e 8f       	std	Y+30, r16	; 0x1e
    1d68:	1f 8f       	std	Y+31, r17	; 0x1f
    1d6a:	a8 8c       	ldd	r10, Y+24	; 0x18
    1d6c:	b9 8c       	ldd	r11, Y+25	; 0x19
    1d6e:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1d70:	db 8c       	ldd	r13, Y+27	; 0x1b
    1d72:	ec 8c       	ldd	r14, Y+28	; 0x1c
    1d74:	fd 8c       	ldd	r15, Y+29	; 0x1d
    1d76:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1d78:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1d7a:	2a 2d       	mov	r18, r10
    1d7c:	3b 2d       	mov	r19, r11
    1d7e:	4c 2d       	mov	r20, r12
    1d80:	5d 2d       	mov	r21, r13
    1d82:	6e 2d       	mov	r22, r14
    1d84:	7f 2d       	mov	r23, r15
    1d86:	80 2f       	mov	r24, r16
    1d88:	91 2f       	mov	r25, r17
    1d8a:	a1 e0       	ldi	r26, 0x01	; 1
    1d8c:	0e 94 b6 4b 	call	0x976c	; 0x976c <__adddi3_s8>
    1d90:	a2 2e       	mov	r10, r18
    1d92:	b3 2e       	mov	r11, r19
    1d94:	c4 2e       	mov	r12, r20
    1d96:	d5 2e       	mov	r13, r21
    1d98:	e6 2e       	mov	r14, r22
    1d9a:	f7 2e       	mov	r15, r23
    1d9c:	08 2f       	mov	r16, r24
    1d9e:	19 2f       	mov	r17, r25
    1da0:	2a 2d       	mov	r18, r10
    1da2:	3b 2d       	mov	r19, r11
    1da4:	4c 2d       	mov	r20, r12
    1da6:	5d 2d       	mov	r21, r13
    1da8:	6e 2d       	mov	r22, r14
    1daa:	7f 2d       	mov	r23, r15
    1dac:	80 2f       	mov	r24, r16
    1dae:	91 2f       	mov	r25, r17
    1db0:	01 e0       	ldi	r16, 0x01	; 1
    1db2:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    1db6:	a2 2e       	mov	r10, r18
    1db8:	b3 2e       	mov	r11, r19
    1dba:	c4 2e       	mov	r12, r20
    1dbc:	d5 2e       	mov	r13, r21
    1dbe:	e6 2e       	mov	r14, r22
    1dc0:	f7 2e       	mov	r15, r23
    1dc2:	08 2f       	mov	r16, r24
    1dc4:	19 2f       	mov	r17, r25
    1dc6:	2a 2c       	mov	r2, r10
    1dc8:	3b 2c       	mov	r3, r11
    1dca:	4c 2c       	mov	r4, r12
    1dcc:	5d 2c       	mov	r5, r13
    1dce:	6e 2c       	mov	r6, r14
    1dd0:	7f 2c       	mov	r7, r15
    1dd2:	80 2e       	mov	r8, r16
    1dd4:	91 2e       	mov	r9, r17
    1dd6:	22 2d       	mov	r18, r2
    1dd8:	33 2d       	mov	r19, r3
    1dda:	44 2d       	mov	r20, r4
    1ddc:	55 2d       	mov	r21, r5
    1dde:	66 2d       	mov	r22, r6
    1de0:	77 2d       	mov	r23, r7
    1de2:	88 2d       	mov	r24, r8
    1de4:	99 2d       	mov	r25, r9
    1de6:	cb 5a       	subi	r28, 0xAB	; 171
    1de8:	df 4f       	sbci	r29, 0xFF	; 255
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	ff 90       	pop	r15
    1df8:	ef 90       	pop	r14
    1dfa:	df 90       	pop	r13
    1dfc:	cf 90       	pop	r12
    1dfe:	bf 90       	pop	r11
    1e00:	af 90       	pop	r10
    1e02:	9f 90       	pop	r9
    1e04:	8f 90       	pop	r8
    1e06:	7f 90       	pop	r7
    1e08:	6f 90       	pop	r6
    1e0a:	5f 90       	pop	r5
    1e0c:	4f 90       	pop	r4
    1e0e:	3f 90       	pop	r3
    1e10:	2f 90       	pop	r2
    1e12:	08 95       	ret

00001e14 <f_sd>:
    1e14:	2f 92       	push	r2
    1e16:	3f 92       	push	r3
    1e18:	4f 92       	push	r4
    1e1a:	5f 92       	push	r5
    1e1c:	6f 92       	push	r6
    1e1e:	7f 92       	push	r7
    1e20:	8f 92       	push	r8
    1e22:	9f 92       	push	r9
    1e24:	af 92       	push	r10
    1e26:	bf 92       	push	r11
    1e28:	cf 92       	push	r12
    1e2a:	df 92       	push	r13
    1e2c:	ef 92       	push	r14
    1e2e:	ff 92       	push	r15
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	a1 97       	sbiw	r28, 0x21	; 33
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	6e 8b       	std	Y+22, r22	; 0x16
    1e44:	7f 8b       	std	Y+23, r23	; 0x17
    1e46:	88 8f       	std	Y+24, r24	; 0x18
    1e48:	99 8f       	std	Y+25, r25	; 0x19
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	46 96       	adiw	r24, 0x16	; 22
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	fc 01       	movw	r30, r24
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	a2 81       	ldd	r26, Z+2	; 0x02
    1e5e:	b3 81       	ldd	r27, Z+3	; 0x03
    1e60:	8a 8f       	std	Y+26, r24	; 0x1a
    1e62:	9b 8f       	std	Y+27, r25	; 0x1b
    1e64:	ac 8f       	std	Y+28, r26	; 0x1c
    1e66:	bd 8f       	std	Y+29, r27	; 0x1d
    1e68:	bb 0f       	add	r27, r27
    1e6a:	88 0b       	sbc	r24, r24
    1e6c:	98 2f       	mov	r25, r24
    1e6e:	dc 01       	movw	r26, r24
    1e70:	8e 8f       	std	Y+30, r24	; 0x1e
    1e72:	8f 8f       	std	Y+31, r24	; 0x1f
    1e74:	88 a3       	std	Y+32, r24	; 0x20
    1e76:	89 a3       	std	Y+33, r24	; 0x21
    1e78:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e7a:	ff 7f       	andi	r31, 0xFF	; 255
    1e7c:	2f 2e       	mov	r2, r31
    1e7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e80:	8f 7f       	andi	r24, 0xFF	; 255
    1e82:	38 2e       	mov	r3, r24
    1e84:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1e86:	ef 77       	andi	r30, 0x7F	; 127
    1e88:	4e 2e       	mov	r4, r30
    1e8a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1e8c:	f0 70       	andi	r31, 0x00	; 0
    1e8e:	5f 2e       	mov	r5, r31
    1e90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e92:	80 70       	andi	r24, 0x00	; 0
    1e94:	68 2e       	mov	r6, r24
    1e96:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1e98:	e0 70       	andi	r30, 0x00	; 0
    1e9a:	7e 2e       	mov	r7, r30
    1e9c:	f8 a1       	ldd	r31, Y+32	; 0x20
    1e9e:	f0 70       	andi	r31, 0x00	; 0
    1ea0:	8f 2e       	mov	r8, r31
    1ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea4:	80 70       	andi	r24, 0x00	; 0
    1ea6:	98 2e       	mov	r9, r24
    1ea8:	2e 82       	std	Y+6, r2	; 0x06
    1eaa:	3f 82       	std	Y+7, r3	; 0x07
    1eac:	48 86       	std	Y+8, r4	; 0x08
    1eae:	59 86       	std	Y+9, r5	; 0x09
    1eb0:	6a 86       	std	Y+10, r6	; 0x0a
    1eb2:	7b 86       	std	Y+11, r7	; 0x0b
    1eb4:	8c 86       	std	Y+12, r8	; 0x0c
    1eb6:	9d 86       	std	Y+13, r9	; 0x0d
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ec4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ec6:	07 2e       	mov	r0, r23
    1ec8:	77 e1       	ldi	r23, 0x17	; 23
    1eca:	b5 95       	asr	r27
    1ecc:	a7 95       	ror	r26
    1ece:	97 95       	ror	r25
    1ed0:	87 95       	ror	r24
    1ed2:	7a 95       	dec	r23
    1ed4:	d1 f7       	brne	.-12     	; 0x1eca <f_sd+0xb6>
    1ed6:	70 2d       	mov	r23, r0
    1ed8:	99 27       	eor	r25, r25
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	a2 81       	ldd	r26, Z+2	; 0x02
    1eea:	b3 81       	ldd	r27, Z+3	; 0x03
    1eec:	88 27       	eor	r24, r24
    1eee:	b7 fd       	sbrc	r27, 7
    1ef0:	83 95       	inc	r24
    1ef2:	99 27       	eor	r25, r25
    1ef4:	aa 27       	eor	r26, r26
    1ef6:	bb 27       	eor	r27, r27
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	9a 81       	ldd	r25, Y+2	; 0x02
    1efe:	89 2b       	or	r24, r25
    1f00:	d9 f4       	brne	.+54     	; 0x1f38 <f_sd+0x124>
    1f02:	2e 80       	ldd	r2, Y+6	; 0x06
    1f04:	3f 80       	ldd	r3, Y+7	; 0x07
    1f06:	48 84       	ldd	r4, Y+8	; 0x08
    1f08:	59 84       	ldd	r5, Y+9	; 0x09
    1f0a:	6a 84       	ldd	r6, Y+10	; 0x0a
    1f0c:	7b 84       	ldd	r7, Y+11	; 0x0b
    1f0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f10:	9d 84       	ldd	r9, Y+13	; 0x0d
    1f12:	22 2d       	mov	r18, r2
    1f14:	33 2d       	mov	r19, r3
    1f16:	44 2d       	mov	r20, r4
    1f18:	55 2d       	mov	r21, r5
    1f1a:	66 2d       	mov	r22, r6
    1f1c:	77 2d       	mov	r23, r7
    1f1e:	88 2d       	mov	r24, r8
    1f20:	99 2d       	mov	r25, r9
    1f22:	a0 e0       	ldi	r26, 0x00	; 0
    1f24:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    1f28:	39 f0       	breq	.+14     	; 0x1f38 <f_sd+0x124>
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2e:	82 56       	subi	r24, 0x62	; 98
    1f30:	9c 4f       	sbci	r25, 0xFC	; 252
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	9a 83       	std	Y+2, r25	; 0x02
    1f36:	67 c0       	rjmp	.+206    	; 0x2006 <f_sd+0x1f2>
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f3e:	91 05       	cpc	r25, r1
    1f40:	91 f5       	brne	.+100    	; 0x1fa6 <f_sd+0x192>
    1f42:	ae 80       	ldd	r10, Y+6	; 0x06
    1f44:	bf 80       	ldd	r11, Y+7	; 0x07
    1f46:	c8 84       	ldd	r12, Y+8	; 0x08
    1f48:	d9 84       	ldd	r13, Y+9	; 0x09
    1f4a:	ea 84       	ldd	r14, Y+10	; 0x0a
    1f4c:	fb 84       	ldd	r15, Y+11	; 0x0b
    1f4e:	0c 85       	ldd	r16, Y+12	; 0x0c
    1f50:	1d 85       	ldd	r17, Y+13	; 0x0d
    1f52:	2a 2d       	mov	r18, r10
    1f54:	3b 2d       	mov	r19, r11
    1f56:	4c 2d       	mov	r20, r12
    1f58:	5d 2d       	mov	r21, r13
    1f5a:	6e 2d       	mov	r22, r14
    1f5c:	7f 2d       	mov	r23, r15
    1f5e:	80 2f       	mov	r24, r16
    1f60:	91 2f       	mov	r25, r17
    1f62:	a0 e0       	ldi	r26, 0x00	; 0
    1f64:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    1f68:	a9 f4       	brne	.+42     	; 0x1f94 <f_sd+0x180>
    1f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6c:	88 23       	and	r24, r24
    1f6e:	49 f0       	breq	.+18     	; 0x1f82 <f_sd+0x16e>
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	80 ef       	ldi	r24, 0xF0	; 240
    1f7e:	9f ef       	ldi	r25, 0xFF	; 255
    1f80:	54 c0       	rjmp	.+168    	; 0x202a <f_sd+0x216>
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	80 ef       	ldi	r24, 0xF0	; 240
    1f90:	9f e7       	ldi	r25, 0x7F	; 127
    1f92:	4b c0       	rjmp	.+150    	; 0x202a <f_sd+0x216>
    1f94:	2f ef       	ldi	r18, 0xFF	; 255
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f ef       	ldi	r20, 0xFF	; 255
    1f9a:	5f ef       	ldi	r21, 0xFF	; 255
    1f9c:	6f ef       	ldi	r22, 0xFF	; 255
    1f9e:	7f ef       	ldi	r23, 0xFF	; 255
    1fa0:	8f ef       	ldi	r24, 0xFF	; 255
    1fa2:	9f e7       	ldi	r25, 0x7F	; 127
    1fa4:	42 c0       	rjmp	.+132    	; 0x202a <f_sd+0x216>
    1fa6:	2e 81       	ldd	r18, Y+6	; 0x06
    1fa8:	3f 81       	ldd	r19, Y+7	; 0x07
    1faa:	48 85       	ldd	r20, Y+8	; 0x08
    1fac:	59 85       	ldd	r21, Y+9	; 0x09
    1fae:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fb0:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fb6:	f2 2f       	mov	r31, r18
    1fb8:	f0 60       	ori	r31, 0x00	; 0
    1fba:	af 2e       	mov	r10, r31
    1fbc:	e3 2f       	mov	r30, r19
    1fbe:	e0 60       	ori	r30, 0x00	; 0
    1fc0:	be 2e       	mov	r11, r30
    1fc2:	f4 2f       	mov	r31, r20
    1fc4:	f0 68       	ori	r31, 0x80	; 128
    1fc6:	cf 2e       	mov	r12, r31
    1fc8:	e5 2f       	mov	r30, r21
    1fca:	e0 60       	ori	r30, 0x00	; 0
    1fcc:	de 2e       	mov	r13, r30
    1fce:	f6 2f       	mov	r31, r22
    1fd0:	f0 60       	ori	r31, 0x00	; 0
    1fd2:	ef 2e       	mov	r14, r31
    1fd4:	e7 2f       	mov	r30, r23
    1fd6:	e0 60       	ori	r30, 0x00	; 0
    1fd8:	fe 2e       	mov	r15, r30
    1fda:	08 2f       	mov	r16, r24
    1fdc:	00 60       	ori	r16, 0x00	; 0
    1fde:	19 2f       	mov	r17, r25
    1fe0:	10 60       	ori	r17, 0x00	; 0
    1fe2:	ae 82       	std	Y+6, r10	; 0x06
    1fe4:	bf 82       	std	Y+7, r11	; 0x07
    1fe6:	c8 86       	std	Y+8, r12	; 0x08
    1fe8:	d9 86       	std	Y+9, r13	; 0x09
    1fea:	ea 86       	std	Y+10, r14	; 0x0a
    1fec:	fb 86       	std	Y+11, r15	; 0x0b
    1fee:	0c 87       	std	Y+12, r16	; 0x0c
    1ff0:	1d 87       	std	Y+13, r17	; 0x0d
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	89 2b       	or	r24, r25
    1ff8:	31 f0       	breq	.+12     	; 0x2006 <f_sd+0x1f2>
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	83 56       	subi	r24, 0x63	; 99
    2000:	9c 4f       	sbci	r25, 0xFC	; 252
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	9e 01       	movw	r18, r28
    2008:	2a 5f       	subi	r18, 0xFA	; 250
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	49 81       	ldd	r20, Y+1	; 0x01
    200e:	5a 81       	ldd	r21, Y+2	; 0x02
    2010:	ce 01       	movw	r24, r28
    2012:	0e 96       	adiw	r24, 0x0e	; 14
    2014:	6d 81       	ldd	r22, Y+5	; 0x05
    2016:	0e 94 22 03 	call	0x644	; 0x644 <f_combi_from_fixpoint>
    201a:	2e 85       	ldd	r18, Y+14	; 0x0e
    201c:	3f 85       	ldd	r19, Y+15	; 0x0f
    201e:	48 89       	ldd	r20, Y+16	; 0x10
    2020:	59 89       	ldd	r21, Y+17	; 0x11
    2022:	6a 89       	ldd	r22, Y+18	; 0x12
    2024:	7b 89       	ldd	r23, Y+19	; 0x13
    2026:	8c 89       	ldd	r24, Y+20	; 0x14
    2028:	9d 89       	ldd	r25, Y+21	; 0x15
    202a:	a2 2e       	mov	r10, r18
    202c:	b3 2e       	mov	r11, r19
    202e:	c4 2e       	mov	r12, r20
    2030:	d5 2e       	mov	r13, r21
    2032:	e6 2e       	mov	r14, r22
    2034:	f7 2e       	mov	r15, r23
    2036:	08 2f       	mov	r16, r24
    2038:	19 2f       	mov	r17, r25
    203a:	2a 2d       	mov	r18, r10
    203c:	3b 2d       	mov	r19, r11
    203e:	4c 2d       	mov	r20, r12
    2040:	5d 2d       	mov	r21, r13
    2042:	6e 2d       	mov	r22, r14
    2044:	7f 2d       	mov	r23, r15
    2046:	80 2f       	mov	r24, r16
    2048:	91 2f       	mov	r25, r17
    204a:	a1 96       	adiw	r28, 0x21	; 33
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	ff 90       	pop	r15
    205a:	ef 90       	pop	r14
    205c:	df 90       	pop	r13
    205e:	cf 90       	pop	r12
    2060:	bf 90       	pop	r11
    2062:	af 90       	pop	r10
    2064:	9f 90       	pop	r9
    2066:	8f 90       	pop	r8
    2068:	7f 90       	pop	r7
    206a:	6f 90       	pop	r6
    206c:	5f 90       	pop	r5
    206e:	4f 90       	pop	r4
    2070:	3f 90       	pop	r3
    2072:	2f 90       	pop	r2
    2074:	08 95       	ret

00002076 <f_getsign>:
    2076:	af 92       	push	r10
    2078:	bf 92       	push	r11
    207a:	cf 92       	push	r12
    207c:	df 92       	push	r13
    207e:	ef 92       	push	r14
    2080:	ff 92       	push	r15
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	2a 97       	sbiw	r28, 0x0a	; 10
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	2b 83       	std	Y+3, r18	; 0x03
    2096:	3c 83       	std	Y+4, r19	; 0x04
    2098:	4d 83       	std	Y+5, r20	; 0x05
    209a:	5e 83       	std	Y+6, r21	; 0x06
    209c:	6f 83       	std	Y+7, r22	; 0x07
    209e:	78 87       	std	Y+8, r23	; 0x08
    20a0:	89 87       	std	Y+9, r24	; 0x09
    20a2:	9a 87       	std	Y+10, r25	; 0x0a
    20a4:	ce 01       	movw	r24, r28
    20a6:	03 96       	adiw	r24, 0x03	; 3
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	fc 01       	movw	r30, r24
    20b2:	a0 80       	ld	r10, Z
    20b4:	fc 01       	movw	r30, r24
    20b6:	b1 80       	ldd	r11, Z+1	; 0x01
    20b8:	fc 01       	movw	r30, r24
    20ba:	c2 80       	ldd	r12, Z+2	; 0x02
    20bc:	fc 01       	movw	r30, r24
    20be:	d3 80       	ldd	r13, Z+3	; 0x03
    20c0:	fc 01       	movw	r30, r24
    20c2:	e4 80       	ldd	r14, Z+4	; 0x04
    20c4:	fc 01       	movw	r30, r24
    20c6:	f5 80       	ldd	r15, Z+5	; 0x05
    20c8:	fc 01       	movw	r30, r24
    20ca:	06 81       	ldd	r16, Z+6	; 0x06
    20cc:	fc 01       	movw	r30, r24
    20ce:	17 81       	ldd	r17, Z+7	; 0x07
    20d0:	2a 2d       	mov	r18, r10
    20d2:	3b 2d       	mov	r19, r11
    20d4:	4c 2d       	mov	r20, r12
    20d6:	5d 2d       	mov	r21, r13
    20d8:	6e 2d       	mov	r22, r14
    20da:	7f 2d       	mov	r23, r15
    20dc:	80 2f       	mov	r24, r16
    20de:	91 2f       	mov	r25, r17
    20e0:	0f e3       	ldi	r16, 0x3F	; 63
    20e2:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    20e6:	a2 2e       	mov	r10, r18
    20e8:	b3 2e       	mov	r11, r19
    20ea:	c4 2e       	mov	r12, r20
    20ec:	d5 2e       	mov	r13, r21
    20ee:	e6 2e       	mov	r14, r22
    20f0:	f7 2e       	mov	r15, r23
    20f2:	08 2f       	mov	r16, r24
    20f4:	19 2f       	mov	r17, r25
    20f6:	8a 2d       	mov	r24, r10
    20f8:	81 70       	andi	r24, 0x01	; 1
    20fa:	2a 96       	adiw	r28, 0x0a	; 10
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	1f 91       	pop	r17
    2106:	0f 91       	pop	r16
    2108:	ff 90       	pop	r15
    210a:	ef 90       	pop	r14
    210c:	df 90       	pop	r13
    210e:	cf 90       	pop	r12
    2110:	bf 90       	pop	r11
    2112:	af 90       	pop	r10
    2114:	08 95       	ret

00002116 <f_10HochN>:
}
#endif

#if defined(F_WITH_to_decimalExp) || defined(F_WITH_to_string) || defined(F_WITH_strtod) || defined(F_WITH_atof)
static int16_t f_10HochN(int64_t n, uint64_t *res)
{
    2116:	2f 92       	push	r2
    2118:	3f 92       	push	r3
    211a:	4f 92       	push	r4
    211c:	5f 92       	push	r5
    211e:	6f 92       	push	r6
    2120:	7f 92       	push	r7
    2122:	8f 92       	push	r8
    2124:	9f 92       	push	r9
    2126:	af 92       	push	r10
    2128:	bf 92       	push	r11
    212a:	cf 92       	push	r12
    212c:	df 92       	push	r13
    212e:	ef 92       	push	r14
    2130:	ff 92       	push	r15
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	67 97       	sbiw	r28, 0x17	; 23
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	2e 87       	std	Y+14, r18	; 0x0e
    2146:	3f 87       	std	Y+15, r19	; 0x0f
    2148:	48 8b       	std	Y+16, r20	; 0x10
    214a:	59 8b       	std	Y+17, r21	; 0x11
    214c:	6a 8b       	std	Y+18, r22	; 0x12
    214e:	7b 8b       	std	Y+19, r23	; 0x13
    2150:	8c 8b       	std	Y+20, r24	; 0x14
    2152:	9d 8b       	std	Y+21, r25	; 0x15
    2154:	0e 8b       	std	Y+22, r16	; 0x16
    2156:	1f 8b       	std	Y+23, r17	; 0x17
	uint64_t pot=((uint64_t)10)<<60;
    2158:	1e 82       	std	Y+6, r1	; 0x06
    215a:	1f 82       	std	Y+7, r1	; 0x07
    215c:	18 86       	std	Y+8, r1	; 0x08
    215e:	19 86       	std	Y+9, r1	; 0x09
    2160:	1a 86       	std	Y+10, r1	; 0x0a
    2162:	1b 86       	std	Y+11, r1	; 0x0b
    2164:	1c 86       	std	Y+12, r1	; 0x0c
    2166:	80 ea       	ldi	r24, 0xA0	; 160
    2168:	8d 87       	std	Y+13, r24	; 0x0d
	int16_t exp2=0, pot_exp2=3;
    216a:	19 82       	std	Y+1, r1	; 0x01
    216c:	1a 82       	std	Y+2, r1	; 0x02
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	8b 83       	std	Y+3, r24	; 0x03
    2174:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t neg=0;
    2176:	1d 82       	std	Y+5, r1	; 0x05
	*res=((uint64_t)1)<<63;
    2178:	8e 89       	ldd	r24, Y+22	; 0x16
    217a:	9f 89       	ldd	r25, Y+23	; 0x17
    217c:	fc 01       	movw	r30, r24
    217e:	10 82       	st	Z, r1
    2180:	fc 01       	movw	r30, r24
    2182:	11 82       	std	Z+1, r1	; 0x01
    2184:	fc 01       	movw	r30, r24
    2186:	12 82       	std	Z+2, r1	; 0x02
    2188:	fc 01       	movw	r30, r24
    218a:	13 82       	std	Z+3, r1	; 0x03
    218c:	fc 01       	movw	r30, r24
    218e:	14 82       	std	Z+4, r1	; 0x04
    2190:	fc 01       	movw	r30, r24
    2192:	15 82       	std	Z+5, r1	; 0x05
    2194:	fc 01       	movw	r30, r24
    2196:	16 82       	std	Z+6, r1	; 0x06
    2198:	20 e8       	ldi	r18, 0x80	; 128
    219a:	fc 01       	movw	r30, r24
    219c:	27 83       	std	Z+7, r18	; 0x07
	if(n<0)
    219e:	ae 84       	ldd	r10, Y+14	; 0x0e
    21a0:	bf 84       	ldd	r11, Y+15	; 0x0f
    21a2:	c8 88       	ldd	r12, Y+16	; 0x10
    21a4:	d9 88       	ldd	r13, Y+17	; 0x11
    21a6:	ea 88       	ldd	r14, Y+18	; 0x12
    21a8:	fb 88       	ldd	r15, Y+19	; 0x13
    21aa:	0c 89       	ldd	r16, Y+20	; 0x14
    21ac:	1d 89       	ldd	r17, Y+21	; 0x15
    21ae:	2a 2d       	mov	r18, r10
    21b0:	3b 2d       	mov	r19, r11
    21b2:	4c 2d       	mov	r20, r12
    21b4:	5d 2d       	mov	r21, r13
    21b6:	6e 2d       	mov	r22, r14
    21b8:	7f 2d       	mov	r23, r15
    21ba:	80 2f       	mov	r24, r16
    21bc:	91 2f       	mov	r25, r17
    21be:	a0 e0       	ldi	r26, 0x00	; 0
    21c0:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    21c4:	0c f0       	brlt	.+2      	; 0x21c8 <f_10HochN+0xb2>
    21c6:	ca c0       	rjmp	.+404    	; 0x235c <f_10HochN+0x246>
		{ neg=1; n=-n; }
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	8d 83       	std	Y+5, r24	; 0x05
    21cc:	2e 85       	ldd	r18, Y+14	; 0x0e
    21ce:	3f 85       	ldd	r19, Y+15	; 0x0f
    21d0:	48 89       	ldd	r20, Y+16	; 0x10
    21d2:	59 89       	ldd	r21, Y+17	; 0x11
    21d4:	6a 89       	ldd	r22, Y+18	; 0x12
    21d6:	7b 89       	ldd	r23, Y+19	; 0x13
    21d8:	8c 89       	ldd	r24, Y+20	; 0x14
    21da:	9d 89       	ldd	r25, Y+21	; 0x15
    21dc:	0e 94 66 4b 	call	0x96cc	; 0x96cc <__negdi2>
    21e0:	a2 2e       	mov	r10, r18
    21e2:	b3 2e       	mov	r11, r19
    21e4:	c4 2e       	mov	r12, r20
    21e6:	d5 2e       	mov	r13, r21
    21e8:	e6 2e       	mov	r14, r22
    21ea:	f7 2e       	mov	r15, r23
    21ec:	08 2f       	mov	r16, r24
    21ee:	19 2f       	mov	r17, r25
    21f0:	ae 86       	std	Y+14, r10	; 0x0e
    21f2:	bf 86       	std	Y+15, r11	; 0x0f
    21f4:	c8 8a       	std	Y+16, r12	; 0x10
    21f6:	d9 8a       	std	Y+17, r13	; 0x11
    21f8:	ea 8a       	std	Y+18, r14	; 0x12
    21fa:	fb 8a       	std	Y+19, r15	; 0x13
    21fc:	0c 8b       	std	Y+20, r16	; 0x14
    21fe:	1d 8b       	std	Y+21, r17	; 0x15
	while(0 != n)
    2200:	ad c0       	rjmp	.+346    	; 0x235c <f_10HochN+0x246>
	{
		if(0 != (n & 1))
    2202:	8e 85       	ldd	r24, Y+14	; 0x0e
    2204:	f8 2f       	mov	r31, r24
    2206:	f1 70       	andi	r31, 0x01	; 1
    2208:	2f 2e       	mov	r2, r31
    220a:	8f 85       	ldd	r24, Y+15	; 0x0f
    220c:	28 2f       	mov	r18, r24
    220e:	20 70       	andi	r18, 0x00	; 0
    2210:	32 2e       	mov	r3, r18
    2212:	88 89       	ldd	r24, Y+16	; 0x10
    2214:	38 2f       	mov	r19, r24
    2216:	30 70       	andi	r19, 0x00	; 0
    2218:	43 2e       	mov	r4, r19
    221a:	89 89       	ldd	r24, Y+17	; 0x11
    221c:	98 2f       	mov	r25, r24
    221e:	90 70       	andi	r25, 0x00	; 0
    2220:	59 2e       	mov	r5, r25
    2222:	8a 89       	ldd	r24, Y+18	; 0x12
    2224:	e8 2f       	mov	r30, r24
    2226:	e0 70       	andi	r30, 0x00	; 0
    2228:	6e 2e       	mov	r6, r30
    222a:	8b 89       	ldd	r24, Y+19	; 0x13
    222c:	f8 2f       	mov	r31, r24
    222e:	f0 70       	andi	r31, 0x00	; 0
    2230:	7f 2e       	mov	r7, r31
    2232:	8c 89       	ldd	r24, Y+20	; 0x14
    2234:	28 2f       	mov	r18, r24
    2236:	20 70       	andi	r18, 0x00	; 0
    2238:	82 2e       	mov	r8, r18
    223a:	8d 89       	ldd	r24, Y+21	; 0x15
    223c:	38 2f       	mov	r19, r24
    223e:	30 70       	andi	r19, 0x00	; 0
    2240:	93 2e       	mov	r9, r19
    2242:	22 2d       	mov	r18, r2
    2244:	33 2d       	mov	r19, r3
    2246:	44 2d       	mov	r20, r4
    2248:	55 2d       	mov	r21, r5
    224a:	66 2d       	mov	r22, r6
    224c:	77 2d       	mov	r23, r7
    224e:	88 2d       	mov	r24, r8
    2250:	99 2d       	mov	r25, r9
    2252:	a0 e0       	ldi	r26, 0x00	; 0
    2254:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    2258:	c9 f1       	breq	.+114    	; 0x22cc <f_10HochN+0x1b6>
		{
			*res = approx_high_uint64_word_of_uint64_mult_uint64(res, &pot, 0);
    225a:	9e 01       	movw	r18, r28
    225c:	2a 5f       	subi	r18, 0xFA	; 250
    225e:	3f 4f       	sbci	r19, 0xFF	; 255
    2260:	8e 89       	ldd	r24, Y+22	; 0x16
    2262:	9f 89       	ldd	r25, Y+23	; 0x17
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	b9 01       	movw	r22, r18
    2268:	0e 94 ff 07 	call	0xffe	; 0xffe <approx_high_uint64_word_of_uint64_mult_uint64>
    226c:	a2 2e       	mov	r10, r18
    226e:	b3 2e       	mov	r11, r19
    2270:	c4 2e       	mov	r12, r20
    2272:	d5 2e       	mov	r13, r21
    2274:	e6 2e       	mov	r14, r22
    2276:	f7 2e       	mov	r15, r23
    2278:	08 2f       	mov	r16, r24
    227a:	19 2f       	mov	r17, r25
    227c:	8e 89       	ldd	r24, Y+22	; 0x16
    227e:	9f 89       	ldd	r25, Y+23	; 0x17
    2280:	fc 01       	movw	r30, r24
    2282:	a0 82       	st	Z, r10
    2284:	fc 01       	movw	r30, r24
    2286:	b1 82       	std	Z+1, r11	; 0x01
    2288:	fc 01       	movw	r30, r24
    228a:	c2 82       	std	Z+2, r12	; 0x02
    228c:	fc 01       	movw	r30, r24
    228e:	d3 82       	std	Z+3, r13	; 0x03
    2290:	fc 01       	movw	r30, r24
    2292:	e4 82       	std	Z+4, r14	; 0x04
    2294:	fc 01       	movw	r30, r24
    2296:	f5 82       	std	Z+5, r15	; 0x05
    2298:	fc 01       	movw	r30, r24
    229a:	06 83       	std	Z+6, r16	; 0x06
    229c:	fc 01       	movw	r30, r24
    229e:	17 83       	std	Z+7, r17	; 0x07
			exp2+=pot_exp2+1-f_shift_left_until_bit63_set(res);
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	8c 01       	movw	r16, r24
    22a6:	0f 5f       	subi	r16, 0xFF	; 255
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	8e 89       	ldd	r24, Y+22	; 0x16
    22ac:	9f 89       	ldd	r25, Y+23	; 0x17
    22ae:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <f_shift_left_until_bit63_set>
    22b2:	08 2e       	mov	r0, r24
    22b4:	00 0c       	add	r0, r0
    22b6:	99 0b       	sbc	r25, r25
    22b8:	98 01       	movw	r18, r16
    22ba:	28 1b       	sub	r18, r24
    22bc:	39 0b       	sbc	r19, r25
    22be:	c9 01       	movw	r24, r18
    22c0:	29 81       	ldd	r18, Y+1	; 0x01
    22c2:	3a 81       	ldd	r19, Y+2	; 0x02
    22c4:	82 0f       	add	r24, r18
    22c6:	93 1f       	adc	r25, r19
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	9a 83       	std	Y+2, r25	; 0x02
		}
		pot = approx_high_uint64_word_of_uint64_mult_uint64(&pot, &pot, 0);
    22cc:	9e 01       	movw	r18, r28
    22ce:	2a 5f       	subi	r18, 0xFA	; 250
    22d0:	3f 4f       	sbci	r19, 0xFF	; 255
    22d2:	ce 01       	movw	r24, r28
    22d4:	06 96       	adiw	r24, 0x06	; 6
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	b9 01       	movw	r22, r18
    22da:	0e 94 ff 07 	call	0xffe	; 0xffe <approx_high_uint64_word_of_uint64_mult_uint64>
    22de:	a2 2e       	mov	r10, r18
    22e0:	b3 2e       	mov	r11, r19
    22e2:	c4 2e       	mov	r12, r20
    22e4:	d5 2e       	mov	r13, r21
    22e6:	e6 2e       	mov	r14, r22
    22e8:	f7 2e       	mov	r15, r23
    22ea:	08 2f       	mov	r16, r24
    22ec:	19 2f       	mov	r17, r25
    22ee:	ae 82       	std	Y+6, r10	; 0x06
    22f0:	bf 82       	std	Y+7, r11	; 0x07
    22f2:	c8 86       	std	Y+8, r12	; 0x08
    22f4:	d9 86       	std	Y+9, r13	; 0x09
    22f6:	ea 86       	std	Y+10, r14	; 0x0a
    22f8:	fb 86       	std	Y+11, r15	; 0x0b
    22fa:	0c 87       	std	Y+12, r16	; 0x0c
    22fc:	1d 87       	std	Y+13, r17	; 0x0d
		pot_exp2=(pot_exp2<<1)+1-f_shift_left_until_bit63_set(&pot);
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	8c 01       	movw	r16, r24
    2308:	0f 5f       	subi	r16, 0xFF	; 255
    230a:	1f 4f       	sbci	r17, 0xFF	; 255
    230c:	ce 01       	movw	r24, r28
    230e:	06 96       	adiw	r24, 0x06	; 6
    2310:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <f_shift_left_until_bit63_set>
    2314:	08 2e       	mov	r0, r24
    2316:	00 0c       	add	r0, r0
    2318:	99 0b       	sbc	r25, r25
    231a:	f8 01       	movw	r30, r16
    231c:	e8 1b       	sub	r30, r24
    231e:	f9 0b       	sbc	r31, r25
    2320:	cf 01       	movw	r24, r30
    2322:	8b 83       	std	Y+3, r24	; 0x03
    2324:	9c 83       	std	Y+4, r25	; 0x04
		n >>= 1;
    2326:	2e 85       	ldd	r18, Y+14	; 0x0e
    2328:	3f 85       	ldd	r19, Y+15	; 0x0f
    232a:	48 89       	ldd	r20, Y+16	; 0x10
    232c:	59 89       	ldd	r21, Y+17	; 0x11
    232e:	6a 89       	ldd	r22, Y+18	; 0x12
    2330:	7b 89       	ldd	r23, Y+19	; 0x13
    2332:	8c 89       	ldd	r24, Y+20	; 0x14
    2334:	9d 89       	ldd	r25, Y+21	; 0x15
    2336:	01 e0       	ldi	r16, 0x01	; 1
    2338:	0e 94 8f 4b 	call	0x971e	; 0x971e <__ashrdi3>
    233c:	a2 2e       	mov	r10, r18
    233e:	b3 2e       	mov	r11, r19
    2340:	c4 2e       	mov	r12, r20
    2342:	d5 2e       	mov	r13, r21
    2344:	e6 2e       	mov	r14, r22
    2346:	f7 2e       	mov	r15, r23
    2348:	08 2f       	mov	r16, r24
    234a:	19 2f       	mov	r17, r25
    234c:	ae 86       	std	Y+14, r10	; 0x0e
    234e:	bf 86       	std	Y+15, r11	; 0x0f
    2350:	c8 8a       	std	Y+16, r12	; 0x10
    2352:	d9 8a       	std	Y+17, r13	; 0x11
    2354:	ea 8a       	std	Y+18, r14	; 0x12
    2356:	fb 8a       	std	Y+19, r15	; 0x13
    2358:	0c 8b       	std	Y+20, r16	; 0x14
    235a:	1d 8b       	std	Y+21, r17	; 0x15
	int16_t exp2=0, pot_exp2=3;
	uint8_t neg=0;
	*res=((uint64_t)1)<<63;
	if(n<0)
		{ neg=1; n=-n; }
	while(0 != n)
    235c:	ae 84       	ldd	r10, Y+14	; 0x0e
    235e:	bf 84       	ldd	r11, Y+15	; 0x0f
    2360:	c8 88       	ldd	r12, Y+16	; 0x10
    2362:	d9 88       	ldd	r13, Y+17	; 0x11
    2364:	ea 88       	ldd	r14, Y+18	; 0x12
    2366:	fb 88       	ldd	r15, Y+19	; 0x13
    2368:	0c 89       	ldd	r16, Y+20	; 0x14
    236a:	1d 89       	ldd	r17, Y+21	; 0x15
    236c:	2a 2d       	mov	r18, r10
    236e:	3b 2d       	mov	r19, r11
    2370:	4c 2d       	mov	r20, r12
    2372:	5d 2d       	mov	r21, r13
    2374:	6e 2d       	mov	r22, r14
    2376:	7f 2d       	mov	r23, r15
    2378:	80 2f       	mov	r24, r16
    237a:	91 2f       	mov	r25, r17
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    2382:	09 f0       	breq	.+2      	; 0x2386 <f_10HochN+0x270>
    2384:	3e cf       	rjmp	.-388    	; 0x2202 <f_10HochN+0xec>
		}
		pot = approx_high_uint64_word_of_uint64_mult_uint64(&pot, &pot, 0);
		pot_exp2=(pot_exp2<<1)+1-f_shift_left_until_bit63_set(&pot);
		n >>= 1;
	}
	if(neg)
    2386:	8d 81       	ldd	r24, Y+5	; 0x05
    2388:	88 23       	and	r24, r24
    238a:	89 f1       	breq	.+98     	; 0x23ee <f_10HochN+0x2d8>
	{
		*res = approx_inverse_of_fixpoint_uint64(res);
    238c:	8e 89       	ldd	r24, Y+22	; 0x16
    238e:	9f 89       	ldd	r25, Y+23	; 0x17
    2390:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <approx_inverse_of_fixpoint_uint64>
    2394:	a2 2e       	mov	r10, r18
    2396:	b3 2e       	mov	r11, r19
    2398:	c4 2e       	mov	r12, r20
    239a:	d5 2e       	mov	r13, r21
    239c:	e6 2e       	mov	r14, r22
    239e:	f7 2e       	mov	r15, r23
    23a0:	08 2f       	mov	r16, r24
    23a2:	19 2f       	mov	r17, r25
    23a4:	8e 89       	ldd	r24, Y+22	; 0x16
    23a6:	9f 89       	ldd	r25, Y+23	; 0x17
    23a8:	fc 01       	movw	r30, r24
    23aa:	a0 82       	st	Z, r10
    23ac:	fc 01       	movw	r30, r24
    23ae:	b1 82       	std	Z+1, r11	; 0x01
    23b0:	fc 01       	movw	r30, r24
    23b2:	c2 82       	std	Z+2, r12	; 0x02
    23b4:	fc 01       	movw	r30, r24
    23b6:	d3 82       	std	Z+3, r13	; 0x03
    23b8:	fc 01       	movw	r30, r24
    23ba:	e4 82       	std	Z+4, r14	; 0x04
    23bc:	fc 01       	movw	r30, r24
    23be:	f5 82       	std	Z+5, r15	; 0x05
    23c0:	fc 01       	movw	r30, r24
    23c2:	06 83       	std	Z+6, r16	; 0x06
    23c4:	fc 01       	movw	r30, r24
    23c6:	17 83       	std	Z+7, r17	; 0x07
		exp2=-exp2-f_shift_left_until_bit63_set(res);
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	00 27       	eor	r16, r16
    23ce:	11 27       	eor	r17, r17
    23d0:	08 1b       	sub	r16, r24
    23d2:	19 0b       	sbc	r17, r25
    23d4:	8e 89       	ldd	r24, Y+22	; 0x16
    23d6:	9f 89       	ldd	r25, Y+23	; 0x17
    23d8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <f_shift_left_until_bit63_set>
    23dc:	08 2e       	mov	r0, r24
    23de:	00 0c       	add	r0, r0
    23e0:	99 0b       	sbc	r25, r25
    23e2:	98 01       	movw	r18, r16
    23e4:	28 1b       	sub	r18, r24
    23e6:	39 0b       	sbc	r19, r25
    23e8:	c9 01       	movw	r24, r18
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	9a 83       	std	Y+2, r25	; 0x02
	}
	return exp2;
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    23f2:	67 96       	adiw	r28, 0x17	; 23
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	ff 90       	pop	r15
    2402:	ef 90       	pop	r14
    2404:	df 90       	pop	r13
    2406:	cf 90       	pop	r12
    2408:	bf 90       	pop	r11
    240a:	af 90       	pop	r10
    240c:	9f 90       	pop	r9
    240e:	8f 90       	pop	r8
    2410:	7f 90       	pop	r7
    2412:	6f 90       	pop	r6
    2414:	5f 90       	pop	r5
    2416:	4f 90       	pop	r4
    2418:	3f 90       	pop	r3
    241a:	2f 90       	pop	r2
    241c:	08 95       	ret

0000241e <f_to_decimalExp>:
#endif

#if defined(F_WITH_to_decimalExp) || defined(F_WITH_to_string)
char *f_to_decimalExp(float64_t x, uint8_t anz_dezimal_mantisse, uint8_t MantisseUndExponentGetrennt,
						int16_t *ExponentBasis10)
{	// f_to_decimalExp() converts the float64 to the decimal representation of the number x if x is
    241e:	4f 92       	push	r4
    2420:	5f 92       	push	r5
    2422:	6f 92       	push	r6
    2424:	7f 92       	push	r7
    2426:	8f 92       	push	r8
    2428:	9f 92       	push	r9
    242a:	af 92       	push	r10
    242c:	bf 92       	push	r11
    242e:	cf 92       	push	r12
    2430:	df 92       	push	r13
    2432:	ef 92       	push	r14
    2434:	ff 92       	push	r15
    2436:	0f 93       	push	r16
    2438:	1f 93       	push	r17
    243a:	cf 93       	push	r28
    243c:	df 93       	push	r29
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	c4 54       	subi	r28, 0x44	; 68
    2444:	d1 09       	sbc	r29, r1
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	29 8f       	std	Y+25, r18	; 0x19
    244c:	3a 8f       	std	Y+26, r19	; 0x1a
    244e:	4b 8f       	std	Y+27, r20	; 0x1b
    2450:	5c 8f       	std	Y+28, r21	; 0x1c
    2452:	6d 8f       	std	Y+29, r22	; 0x1d
    2454:	7e 8f       	std	Y+30, r23	; 0x1e
    2456:	8f 8f       	std	Y+31, r24	; 0x1f
    2458:	98 a3       	std	Y+32, r25	; 0x20
    245a:	09 a3       	std	Y+33, r16	; 0x21
    245c:	ea a2       	std	Y+34, r14	; 0x22
    245e:	cb a2       	std	Y+35, r12	; 0x23
    2460:	dc a2       	std	Y+36, r13	; 0x24
	uint8_t len, posm, i;
	int16_t f_ex;
	uint64_t w, w2;
	int16_t Exp10;

	if(anz_dezimal_mantisse>17)
    2462:	89 a1       	ldd	r24, Y+33	; 0x21
    2464:	82 31       	cpi	r24, 0x12	; 18
    2466:	10 f0       	brcs	.+4      	; 0x246c <f_to_decimalExp+0x4e>
		anz_dezimal_mantisse=17;
    2468:	81 e1       	ldi	r24, 0x11	; 17
    246a:	89 a3       	std	Y+33, r24	; 0x21
	if(anz_dezimal_mantisse<1)
    246c:	89 a1       	ldd	r24, Y+33	; 0x21
    246e:	88 23       	and	r24, r24
    2470:	11 f4       	brne	.+4      	; 0x2476 <f_to_decimalExp+0x58>
		anz_dezimal_mantisse=1;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	89 a3       	std	Y+33, r24	; 0x21
	f_split64(&x, &f_sign, &f_ex, &w, 11);
    2476:	9e 01       	movw	r18, r28
    2478:	27 5f       	subi	r18, 0xF7	; 247
    247a:	3f 4f       	sbci	r19, 0xFF	; 255
    247c:	ae 01       	movw	r20, r28
    247e:	49 5f       	subi	r20, 0xF9	; 249
    2480:	5f 4f       	sbci	r21, 0xFF	; 255
    2482:	be 01       	movw	r22, r28
    2484:	6a 5f       	subi	r22, 0xFA	; 250
    2486:	7f 4f       	sbci	r23, 0xFF	; 255
    2488:	ce 01       	movw	r24, r28
    248a:	49 96       	adiw	r24, 0x19	; 25
    248c:	0b e0       	ldi	r16, 0x0B	; 11
    248e:	0e 94 cb 01 	call	0x396	; 0x396 <f_split64>
	if(0==f_ex) // Alle denormalisierten Zahlen werden als Null interpretiert.
    2492:	8f 81       	ldd	r24, Y+7	; 0x07
    2494:	98 85       	ldd	r25, Y+8	; 0x08
    2496:	89 2b       	or	r24, r25
    2498:	41 f4       	brne	.+16     	; 0x24aa <f_to_decimalExp+0x8c>
		{ TemporaryMemory[0]='0'; TemporaryMemory[1]=0; return TemporaryMemory; }
    249a:	80 e3       	ldi	r24, 0x30	; 48
    249c:	80 93 64 20 	sts	0x2064, r24	; 0x802064 <__data_end>
    24a0:	10 92 65 20 	sts	0x2065, r1	; 0x802065 <__data_end+0x1>
    24a4:	84 e6       	ldi	r24, 0x64	; 100
    24a6:	90 e2       	ldi	r25, 0x20	; 32
    24a8:	2e c3       	rjmp	.+1628   	; 0x2b06 <f_to_decimalExp+0x6e8>
#ifdef F_ONLY_NAN_NO_INFINITY
	if(2047==f_ex)
		{ strcpy(TemporaryMemory, "NaN"); return TemporaryMemory; }
#else
	if(2047==f_ex)
    24aa:	8f 81       	ldd	r24, Y+7	; 0x07
    24ac:	98 85       	ldd	r25, Y+8	; 0x08
    24ae:	8f 3f       	cpi	r24, 0xFF	; 255
    24b0:	97 40       	sbci	r25, 0x07	; 7
    24b2:	d1 f5       	brne	.+116    	; 0x2528 <f_to_decimalExp+0x10a>
	{
		if(0!=w)
    24b4:	a9 84       	ldd	r10, Y+9	; 0x09
    24b6:	ba 84       	ldd	r11, Y+10	; 0x0a
    24b8:	cb 84       	ldd	r12, Y+11	; 0x0b
    24ba:	dc 84       	ldd	r13, Y+12	; 0x0c
    24bc:	ed 84       	ldd	r14, Y+13	; 0x0d
    24be:	fe 84       	ldd	r15, Y+14	; 0x0e
    24c0:	0f 85       	ldd	r16, Y+15	; 0x0f
    24c2:	18 89       	ldd	r17, Y+16	; 0x10
    24c4:	2a 2d       	mov	r18, r10
    24c6:	3b 2d       	mov	r19, r11
    24c8:	4c 2d       	mov	r20, r12
    24ca:	5d 2d       	mov	r21, r13
    24cc:	6e 2d       	mov	r22, r14
    24ce:	7f 2d       	mov	r23, r15
    24d0:	80 2f       	mov	r24, r16
    24d2:	91 2f       	mov	r25, r17
    24d4:	a0 e0       	ldi	r26, 0x00	; 0
    24d6:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    24da:	79 f0       	breq	.+30     	; 0x24fa <f_to_decimalExp+0xdc>
			{ strcpy(TemporaryMemory, "NaN"); return TemporaryMemory; }
    24dc:	8e e4       	ldi	r24, 0x4E	; 78
    24de:	91 e6       	ldi	r25, 0x61	; 97
    24e0:	80 93 64 20 	sts	0x2064, r24	; 0x802064 <__data_end>
    24e4:	90 93 65 20 	sts	0x2065, r25	; 0x802065 <__data_end+0x1>
    24e8:	8e e4       	ldi	r24, 0x4E	; 78
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	80 93 66 20 	sts	0x2066, r24	; 0x802066 <__data_end+0x2>
    24f0:	90 93 67 20 	sts	0x2067, r25	; 0x802067 <__data_end+0x3>
    24f4:	84 e6       	ldi	r24, 0x64	; 100
    24f6:	90 e2       	ldi	r25, 0x20	; 32
    24f8:	06 c3       	rjmp	.+1548   	; 0x2b06 <f_to_decimalExp+0x6e8>
		TemporaryMemory[0]=f_sign ? '-' : '+';
    24fa:	8e 81       	ldd	r24, Y+6	; 0x06
    24fc:	88 23       	and	r24, r24
    24fe:	11 f0       	breq	.+4      	; 0x2504 <f_to_decimalExp+0xe6>
    2500:	8d e2       	ldi	r24, 0x2D	; 45
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <f_to_decimalExp+0xe8>
    2504:	8b e2       	ldi	r24, 0x2B	; 43
    2506:	80 93 64 20 	sts	0x2064, r24	; 0x802064 <__data_end>
		strcpy(TemporaryMemory+1, "INF");
    250a:	85 e6       	ldi	r24, 0x65	; 101
    250c:	90 e2       	ldi	r25, 0x20	; 32
    250e:	29 e4       	ldi	r18, 0x49	; 73
    2510:	3e e4       	ldi	r19, 0x4E	; 78
    2512:	dc 01       	movw	r26, r24
    2514:	2d 93       	st	X+, r18
    2516:	3c 93       	st	X, r19
    2518:	26 e4       	ldi	r18, 0x46	; 70
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	fc 01       	movw	r30, r24
    251e:	22 83       	std	Z+2, r18	; 0x02
    2520:	33 83       	std	Z+3, r19	; 0x03
		return TemporaryMemory;
    2522:	84 e6       	ldi	r24, 0x64	; 100
    2524:	90 e2       	ldi	r25, 0x20	; 32
    2526:	ef c2       	rjmp	.+1502   	; 0x2b06 <f_to_decimalExp+0x6e8>
	}
#endif
	f_ex-=1023; // Nach der Abfrage auf 0==f_ex und 2047==f_ex !
    2528:	8f 81       	ldd	r24, Y+7	; 0x07
    252a:	98 85       	ldd	r25, Y+8	; 0x08
    252c:	8f 5f       	subi	r24, 0xFF	; 255
    252e:	93 40       	sbci	r25, 0x03	; 3
    2530:	8f 83       	std	Y+7, r24	; 0x07
    2532:	98 87       	std	Y+8, r25	; 0x08
	len=0;
    2534:	19 82       	std	Y+1, r1	; 0x01
	if(f_sign)
    2536:	8e 81       	ldd	r24, Y+6	; 0x06
    2538:	88 23       	and	r24, r24
    253a:	59 f0       	breq	.+22     	; 0x2552 <f_to_decimalExp+0x134>
		TemporaryMemory[len++]='-';
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	91 e0       	ldi	r25, 0x01	; 1
    2540:	98 0f       	add	r25, r24
    2542:	99 83       	std	Y+1, r25	; 0x01
    2544:	88 2f       	mov	r24, r24
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	8c 59       	subi	r24, 0x9C	; 156
    254a:	9f 4d       	sbci	r25, 0xDF	; 223
    254c:	2d e2       	ldi	r18, 0x2D	; 45
    254e:	dc 01       	movw	r26, r24
    2550:	2c 93       	st	X, r18

	if(f_ex >= 0)
    2552:	8f 81       	ldd	r24, Y+7	; 0x07
    2554:	98 85       	ldd	r25, Y+8	; 0x08
    2556:	99 23       	and	r25, r25
    2558:	bc f0       	brlt	.+46     	; 0x2588 <f_to_decimalExp+0x16a>
		Exp10=(uint16_t)((((uint16_t)f_ex)*10+31)>>5);
    255a:	8f 81       	ldd	r24, Y+7	; 0x07
    255c:	98 85       	ldd	r25, Y+8	; 0x08
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	9c 01       	movw	r18, r24
    2564:	22 0f       	add	r18, r18
    2566:	33 1f       	adc	r19, r19
    2568:	22 0f       	add	r18, r18
    256a:	33 1f       	adc	r19, r19
    256c:	82 0f       	add	r24, r18
    256e:	93 1f       	adc	r25, r19
    2570:	4f 96       	adiw	r24, 0x1f	; 31
    2572:	96 95       	lsr	r25
    2574:	87 95       	ror	r24
    2576:	92 95       	swap	r25
    2578:	82 95       	swap	r24
    257a:	8f 70       	andi	r24, 0x0F	; 15
    257c:	89 27       	eor	r24, r25
    257e:	9f 70       	andi	r25, 0x0F	; 15
    2580:	89 27       	eor	r24, r25
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	9c 83       	std	Y+4, r25	; 0x04
    2586:	16 c0       	rjmp	.+44     	; 0x25b4 <f_to_decimalExp+0x196>
	else
		Exp10=(int16_t)(-((((uint16_t)(-f_ex))*9)>>5));
    2588:	8f 81       	ldd	r24, Y+7	; 0x07
    258a:	98 85       	ldd	r25, Y+8	; 0x08
    258c:	9c 01       	movw	r18, r24
    258e:	47 ef       	ldi	r20, 0xF7	; 247
    2590:	42 03       	mulsu	r20, r18
    2592:	c0 01       	movw	r24, r0
    2594:	43 9f       	mul	r20, r19
    2596:	90 0d       	add	r25, r0
    2598:	11 24       	eor	r1, r1
    259a:	96 95       	lsr	r25
    259c:	87 95       	ror	r24
    259e:	92 95       	swap	r25
    25a0:	82 95       	swap	r24
    25a2:	8f 70       	andi	r24, 0x0F	; 15
    25a4:	89 27       	eor	r24, r25
    25a6:	9f 70       	andi	r25, 0x0F	; 15
    25a8:	89 27       	eor	r24, r25
    25aa:	91 95       	neg	r25
    25ac:	81 95       	neg	r24
    25ae:	91 09       	sbc	r25, r1
    25b0:	8b 83       	std	Y+3, r24	; 0x03
    25b2:	9c 83       	std	Y+4, r25	; 0x04

	f_ex+=f_10HochN(-Exp10, &w2);
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	91 95       	neg	r25
    25ba:	81 95       	neg	r24
    25bc:	91 09       	sbc	r25, r1
    25be:	8d a3       	std	Y+37, r24	; 0x25
    25c0:	9e a3       	std	Y+38, r25	; 0x26
    25c2:	89 2f       	mov	r24, r25
    25c4:	88 0f       	add	r24, r24
    25c6:	88 0b       	sbc	r24, r24
    25c8:	8f a3       	std	Y+39, r24	; 0x27
    25ca:	88 a7       	std	Y+40, r24	; 0x28
    25cc:	89 a7       	std	Y+41, r24	; 0x29
    25ce:	8a a7       	std	Y+42, r24	; 0x2a
    25d0:	8b a7       	std	Y+43, r24	; 0x2b
    25d2:	8c a7       	std	Y+44, r24	; 0x2c
    25d4:	ce 01       	movw	r24, r28
    25d6:	41 96       	adiw	r24, 0x11	; 17
    25d8:	8c 01       	movw	r16, r24
    25da:	2d a1       	ldd	r18, Y+37	; 0x25
    25dc:	3e a1       	ldd	r19, Y+38	; 0x26
    25de:	4f a1       	ldd	r20, Y+39	; 0x27
    25e0:	58 a5       	ldd	r21, Y+40	; 0x28
    25e2:	69 a5       	ldd	r22, Y+41	; 0x29
    25e4:	7a a5       	ldd	r23, Y+42	; 0x2a
    25e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    25e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    25ea:	0e 94 8b 10 	call	0x2116	; 0x2116 <f_10HochN>
    25ee:	9c 01       	movw	r18, r24
    25f0:	8f 81       	ldd	r24, Y+7	; 0x07
    25f2:	98 85       	ldd	r25, Y+8	; 0x08
    25f4:	82 0f       	add	r24, r18
    25f6:	93 1f       	adc	r25, r19
    25f8:	8f 83       	std	Y+7, r24	; 0x07
    25fa:	98 87       	std	Y+8, r25	; 0x08
	w=approx_high_uint64_word_of_uint64_mult_uint64(&w, &w2, 0);
    25fc:	9e 01       	movw	r18, r28
    25fe:	2f 5e       	subi	r18, 0xEF	; 239
    2600:	3f 4f       	sbci	r19, 0xFF	; 255
    2602:	ce 01       	movw	r24, r28
    2604:	09 96       	adiw	r24, 0x09	; 9
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	b9 01       	movw	r22, r18
    260a:	0e 94 ff 07 	call	0xffe	; 0xffe <approx_high_uint64_word_of_uint64_mult_uint64>
    260e:	2d a7       	std	Y+45, r18	; 0x2d
    2610:	3e a7       	std	Y+46, r19	; 0x2e
    2612:	4f a7       	std	Y+47, r20	; 0x2f
    2614:	58 ab       	std	Y+48, r21	; 0x30
    2616:	69 ab       	std	Y+49, r22	; 0x31
    2618:	7a ab       	std	Y+50, r23	; 0x32
    261a:	8b ab       	std	Y+51, r24	; 0x33
    261c:	9c ab       	std	Y+52, r25	; 0x34
    261e:	bd a5       	ldd	r27, Y+45	; 0x2d
    2620:	b9 87       	std	Y+9, r27	; 0x09
    2622:	ee a5       	ldd	r30, Y+46	; 0x2e
    2624:	ea 87       	std	Y+10, r30	; 0x0a
    2626:	ff a5       	ldd	r31, Y+47	; 0x2f
    2628:	fb 87       	std	Y+11, r31	; 0x0b
    262a:	28 a9       	ldd	r18, Y+48	; 0x30
    262c:	2c 87       	std	Y+12, r18	; 0x0c
    262e:	49 a9       	ldd	r20, Y+49	; 0x31
    2630:	4d 87       	std	Y+13, r20	; 0x0d
    2632:	5a a9       	ldd	r21, Y+50	; 0x32
    2634:	5e 87       	std	Y+14, r21	; 0x0e
    2636:	8b a9       	ldd	r24, Y+51	; 0x33
    2638:	8f 87       	std	Y+15, r24	; 0x0f
    263a:	ac a9       	ldd	r26, Y+52	; 0x34
    263c:	a8 8b       	std	Y+16, r26	; 0x10
	f_ex+=1-f_shift_left_until_bit63_set(&w);
    263e:	ce 01       	movw	r24, r28
    2640:	09 96       	adiw	r24, 0x09	; 9
    2642:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <f_shift_left_until_bit63_set>
    2646:	08 2e       	mov	r0, r24
    2648:	00 0c       	add	r0, r0
    264a:	99 0b       	sbc	r25, r25
    264c:	21 e0       	ldi	r18, 0x01	; 1
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	28 1b       	sub	r18, r24
    2652:	39 0b       	sbc	r19, r25
    2654:	8f 81       	ldd	r24, Y+7	; 0x07
    2656:	98 85       	ldd	r25, Y+8	; 0x08
    2658:	82 0f       	add	r24, r18
    265a:	93 1f       	adc	r25, r19
    265c:	8f 83       	std	Y+7, r24	; 0x07
    265e:	98 87       	std	Y+8, r25	; 0x08

	while(f_ex<0)
    2660:	3b c0       	rjmp	.+118    	; 0x26d8 <f_to_decimalExp+0x2ba>
	{
		w=approx_high_uint64_word_of_uint64_mult_uint64_pbv_y(&w, ((uint64_t)10)<<60, 0);
    2662:	ce 01       	movw	r24, r28
    2664:	09 96       	adiw	r24, 0x09	; 9
    2666:	e1 2c       	mov	r14, r1
    2668:	00 e0       	ldi	r16, 0x00	; 0
    266a:	10 e0       	ldi	r17, 0x00	; 0
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	70 ea       	ldi	r23, 0xA0	; 160
    2678:	0e 94 95 0a 	call	0x152a	; 0x152a <approx_high_uint64_word_of_uint64_mult_uint64_pbv_y>
    267c:	2d ab       	std	Y+53, r18	; 0x35
    267e:	3e ab       	std	Y+54, r19	; 0x36
    2680:	4f ab       	std	Y+55, r20	; 0x37
    2682:	58 af       	std	Y+56, r21	; 0x38
    2684:	69 af       	std	Y+57, r22	; 0x39
    2686:	7a af       	std	Y+58, r23	; 0x3a
    2688:	8b af       	std	Y+59, r24	; 0x3b
    268a:	9c af       	std	Y+60, r25	; 0x3c
    268c:	bd a9       	ldd	r27, Y+53	; 0x35
    268e:	b9 87       	std	Y+9, r27	; 0x09
    2690:	ee a9       	ldd	r30, Y+54	; 0x36
    2692:	ea 87       	std	Y+10, r30	; 0x0a
    2694:	ff a9       	ldd	r31, Y+55	; 0x37
    2696:	fb 87       	std	Y+11, r31	; 0x0b
    2698:	28 ad       	ldd	r18, Y+56	; 0x38
    269a:	2c 87       	std	Y+12, r18	; 0x0c
    269c:	49 ad       	ldd	r20, Y+57	; 0x39
    269e:	4d 87       	std	Y+13, r20	; 0x0d
    26a0:	5a ad       	ldd	r21, Y+58	; 0x3a
    26a2:	5e 87       	std	Y+14, r21	; 0x0e
    26a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    26a6:	8f 87       	std	Y+15, r24	; 0x0f
    26a8:	ac ad       	ldd	r26, Y+60	; 0x3c
    26aa:	a8 8b       	std	Y+16, r26	; 0x10
		f_ex+=4-f_shift_left_until_bit63_set(&w);
    26ac:	ce 01       	movw	r24, r28
    26ae:	09 96       	adiw	r24, 0x09	; 9
    26b0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <f_shift_left_until_bit63_set>
    26b4:	08 2e       	mov	r0, r24
    26b6:	00 0c       	add	r0, r0
    26b8:	99 0b       	sbc	r25, r25
    26ba:	24 e0       	ldi	r18, 0x04	; 4
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	28 1b       	sub	r18, r24
    26c0:	39 0b       	sbc	r19, r25
    26c2:	8f 81       	ldd	r24, Y+7	; 0x07
    26c4:	98 85       	ldd	r25, Y+8	; 0x08
    26c6:	82 0f       	add	r24, r18
    26c8:	93 1f       	adc	r25, r19
    26ca:	8f 83       	std	Y+7, r24	; 0x07
    26cc:	98 87       	std	Y+8, r25	; 0x08
		Exp10--;
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	9c 81       	ldd	r25, Y+4	; 0x04
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	8b 83       	std	Y+3, r24	; 0x03
    26d6:	9c 83       	std	Y+4, r25	; 0x04

	f_ex+=f_10HochN(-Exp10, &w2);
	w=approx_high_uint64_word_of_uint64_mult_uint64(&w, &w2, 0);
	f_ex+=1-f_shift_left_until_bit63_set(&w);

	while(f_ex<0)
    26d8:	8f 81       	ldd	r24, Y+7	; 0x07
    26da:	98 85       	ldd	r25, Y+8	; 0x08
    26dc:	99 23       	and	r25, r25
    26de:	0c f2       	brlt	.-126    	; 0x2662 <f_to_decimalExp+0x244>
	{
		w=approx_high_uint64_word_of_uint64_mult_uint64_pbv_y(&w, ((uint64_t)10)<<60, 0);
		f_ex+=4-f_shift_left_until_bit63_set(&w);
		Exp10--;
	}
	while(f_ex>=4 || (f_ex==3 && (w & 0xf000000000000000)>=0xa000000000000000))
    26e0:	4e c0       	rjmp	.+156    	; 0x277e <f_to_decimalExp+0x360>
	{
		w=approx_high_uint64_word_of_uint64_mult_uint64_pbv_y(&w, 0xcccccccccccccccc, 0);
    26e2:	ce 01       	movw	r24, r28
    26e4:	09 96       	adiw	r24, 0x09	; 9
    26e6:	e1 2c       	mov	r14, r1
    26e8:	0c ec       	ldi	r16, 0xCC	; 204
    26ea:	1c ec       	ldi	r17, 0xCC	; 204
    26ec:	2c ec       	ldi	r18, 0xCC	; 204
    26ee:	3c ec       	ldi	r19, 0xCC	; 204
    26f0:	4c ec       	ldi	r20, 0xCC	; 204
    26f2:	5c ec       	ldi	r21, 0xCC	; 204
    26f4:	6c ec       	ldi	r22, 0xCC	; 204
    26f6:	7c ec       	ldi	r23, 0xCC	; 204
    26f8:	0e 94 95 0a 	call	0x152a	; 0x152a <approx_high_uint64_word_of_uint64_mult_uint64_pbv_y>
    26fc:	2d af       	std	Y+61, r18	; 0x3d
    26fe:	3e af       	std	Y+62, r19	; 0x3e
    2700:	4f af       	std	Y+63, r20	; 0x3f
    2702:	21 96       	adiw	r28, 0x01	; 1
    2704:	5f af       	std	Y+63, r21	; 0x3f
    2706:	21 97       	sbiw	r28, 0x01	; 1
    2708:	22 96       	adiw	r28, 0x02	; 2
    270a:	6f af       	std	Y+63, r22	; 0x3f
    270c:	22 97       	sbiw	r28, 0x02	; 2
    270e:	23 96       	adiw	r28, 0x03	; 3
    2710:	7f af       	std	Y+63, r23	; 0x3f
    2712:	23 97       	sbiw	r28, 0x03	; 3
    2714:	24 96       	adiw	r28, 0x04	; 4
    2716:	8f af       	std	Y+63, r24	; 0x3f
    2718:	24 97       	sbiw	r28, 0x04	; 4
    271a:	25 96       	adiw	r28, 0x05	; 5
    271c:	9f af       	std	Y+63, r25	; 0x3f
    271e:	25 97       	sbiw	r28, 0x05	; 5
    2720:	bd ad       	ldd	r27, Y+61	; 0x3d
    2722:	b9 87       	std	Y+9, r27	; 0x09
    2724:	ee ad       	ldd	r30, Y+62	; 0x3e
    2726:	ea 87       	std	Y+10, r30	; 0x0a
    2728:	ff ad       	ldd	r31, Y+63	; 0x3f
    272a:	fb 87       	std	Y+11, r31	; 0x0b
    272c:	21 96       	adiw	r28, 0x01	; 1
    272e:	2f ad       	ldd	r18, Y+63	; 0x3f
    2730:	21 97       	sbiw	r28, 0x01	; 1
    2732:	2c 87       	std	Y+12, r18	; 0x0c
    2734:	22 96       	adiw	r28, 0x02	; 2
    2736:	4f ad       	ldd	r20, Y+63	; 0x3f
    2738:	22 97       	sbiw	r28, 0x02	; 2
    273a:	4d 87       	std	Y+13, r20	; 0x0d
    273c:	23 96       	adiw	r28, 0x03	; 3
    273e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2740:	23 97       	sbiw	r28, 0x03	; 3
    2742:	5e 87       	std	Y+14, r21	; 0x0e
    2744:	24 96       	adiw	r28, 0x04	; 4
    2746:	8f ad       	ldd	r24, Y+63	; 0x3f
    2748:	24 97       	sbiw	r28, 0x04	; 4
    274a:	8f 87       	std	Y+15, r24	; 0x0f
    274c:	25 96       	adiw	r28, 0x05	; 5
    274e:	af ad       	ldd	r26, Y+63	; 0x3f
    2750:	25 97       	sbiw	r28, 0x05	; 5
    2752:	a8 8b       	std	Y+16, r26	; 0x10
		f_ex-=3+f_shift_left_until_bit63_set(&w);
    2754:	ce 01       	movw	r24, r28
    2756:	09 96       	adiw	r24, 0x09	; 9
    2758:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <f_shift_left_until_bit63_set>
    275c:	08 2e       	mov	r0, r24
    275e:	00 0c       	add	r0, r0
    2760:	99 0b       	sbc	r25, r25
    2762:	03 96       	adiw	r24, 0x03	; 3
    2764:	2f 81       	ldd	r18, Y+7	; 0x07
    2766:	38 85       	ldd	r19, Y+8	; 0x08
    2768:	f9 01       	movw	r30, r18
    276a:	e8 1b       	sub	r30, r24
    276c:	f9 0b       	sbc	r31, r25
    276e:	cf 01       	movw	r24, r30
    2770:	8f 83       	std	Y+7, r24	; 0x07
    2772:	98 87       	std	Y+8, r25	; 0x08
		Exp10++;
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	9c 81       	ldd	r25, Y+4	; 0x04
    2778:	01 96       	adiw	r24, 0x01	; 1
    277a:	8b 83       	std	Y+3, r24	; 0x03
    277c:	9c 83       	std	Y+4, r25	; 0x04
	{
		w=approx_high_uint64_word_of_uint64_mult_uint64_pbv_y(&w, ((uint64_t)10)<<60, 0);
		f_ex+=4-f_shift_left_until_bit63_set(&w);
		Exp10--;
	}
	while(f_ex>=4 || (f_ex==3 && (w & 0xf000000000000000)>=0xa000000000000000))
    277e:	8f 81       	ldd	r24, Y+7	; 0x07
    2780:	98 85       	ldd	r25, Y+8	; 0x08
    2782:	04 97       	sbiw	r24, 0x04	; 4
    2784:	0c f0       	brlt	.+2      	; 0x2788 <f_to_decimalExp+0x36a>
    2786:	ad cf       	rjmp	.-166    	; 0x26e2 <f_to_decimalExp+0x2c4>
    2788:	8f 81       	ldd	r24, Y+7	; 0x07
    278a:	98 85       	ldd	r25, Y+8	; 0x08
    278c:	03 97       	sbiw	r24, 0x03	; 3
    278e:	99 f5       	brne	.+102    	; 0x27f6 <f_to_decimalExp+0x3d8>
    2790:	29 85       	ldd	r18, Y+9	; 0x09
    2792:	3a 85       	ldd	r19, Y+10	; 0x0a
    2794:	4b 85       	ldd	r20, Y+11	; 0x0b
    2796:	5c 85       	ldd	r21, Y+12	; 0x0c
    2798:	6d 85       	ldd	r22, Y+13	; 0x0d
    279a:	7e 85       	ldd	r23, Y+14	; 0x0e
    279c:	8f 85       	ldd	r24, Y+15	; 0x0f
    279e:	98 89       	ldd	r25, Y+16	; 0x10
    27a0:	f2 2f       	mov	r31, r18
    27a2:	f0 70       	andi	r31, 0x00	; 0
    27a4:	4f 2e       	mov	r4, r31
    27a6:	a3 2f       	mov	r26, r19
    27a8:	a0 70       	andi	r26, 0x00	; 0
    27aa:	5a 2e       	mov	r5, r26
    27ac:	b4 2f       	mov	r27, r20
    27ae:	b0 70       	andi	r27, 0x00	; 0
    27b0:	6b 2e       	mov	r6, r27
    27b2:	e5 2f       	mov	r30, r21
    27b4:	e0 70       	andi	r30, 0x00	; 0
    27b6:	7e 2e       	mov	r7, r30
    27b8:	f6 2f       	mov	r31, r22
    27ba:	f0 70       	andi	r31, 0x00	; 0
    27bc:	8f 2e       	mov	r8, r31
    27be:	a7 2f       	mov	r26, r23
    27c0:	a0 70       	andi	r26, 0x00	; 0
    27c2:	9a 2e       	mov	r9, r26
    27c4:	b8 2f       	mov	r27, r24
    27c6:	b0 70       	andi	r27, 0x00	; 0
    27c8:	ab 2e       	mov	r10, r27
    27ca:	e9 2f       	mov	r30, r25
    27cc:	e0 7f       	andi	r30, 0xF0	; 240
    27ce:	be 2e       	mov	r11, r30
    27d0:	24 2d       	mov	r18, r4
    27d2:	35 2d       	mov	r19, r5
    27d4:	46 2d       	mov	r20, r6
    27d6:	57 2d       	mov	r21, r7
    27d8:	68 2d       	mov	r22, r8
    27da:	79 2d       	mov	r23, r9
    27dc:	8a 2d       	mov	r24, r10
    27de:	9b 2d       	mov	r25, r11
    27e0:	2f 3f       	cpi	r18, 0xFF	; 255
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	4f 4f       	sbci	r20, 0xFF	; 255
    27e6:	5f 4f       	sbci	r21, 0xFF	; 255
    27e8:	6f 4f       	sbci	r22, 0xFF	; 255
    27ea:	7f 4f       	sbci	r23, 0xFF	; 255
    27ec:	8f 4f       	sbci	r24, 0xFF	; 255
    27ee:	9f 49       	sbci	r25, 0x9F	; 159
    27f0:	11 f0       	breq	.+4      	; 0x27f6 <f_to_decimalExp+0x3d8>
    27f2:	08 f0       	brcs	.+2      	; 0x27f6 <f_to_decimalExp+0x3d8>
    27f4:	76 cf       	rjmp	.-276    	; 0x26e2 <f_to_decimalExp+0x2c4>
	{
		w=approx_high_uint64_word_of_uint64_mult_uint64_pbv_y(&w, 0xcccccccccccccccc, 0);
		f_ex-=3+f_shift_left_until_bit63_set(&w);
		Exp10++;
	}
	posm=len;
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	8d 83       	std	Y+5, r24	; 0x05
	++len; // Platz f�r .
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	8f 5f       	subi	r24, 0xFF	; 255
    27fe:	89 83       	std	Y+1, r24	; 0x01
	while(0!=(anz_dezimal_mantisse--))
    2800:	9d c0       	rjmp	.+314    	; 0x293c <f_to_decimalExp+0x51e>
	{
		TemporaryMemory[len]='0';
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	88 2f       	mov	r24, r24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	8c 59       	subi	r24, 0x9C	; 156
    280a:	9f 4d       	sbci	r25, 0xDF	; 223
    280c:	20 e3       	ldi	r18, 0x30	; 48
    280e:	dc 01       	movw	r26, r24
    2810:	2c 93       	st	X, r18
		if(f_ex>=0)
    2812:	8f 81       	ldd	r24, Y+7	; 0x07
    2814:	98 85       	ldd	r25, Y+8	; 0x08
    2816:	99 23       	and	r25, r25
    2818:	0c f4       	brge	.+2      	; 0x281c <f_to_decimalExp+0x3fe>
    281a:	5f c0       	rjmp	.+190    	; 0x28da <f_to_decimalExp+0x4bc>
		{
			TemporaryMemory[len] += (w>>(63-f_ex));
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	e8 2f       	mov	r30, r24
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	88 2f       	mov	r24, r24
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	8c 59       	subi	r24, 0x9C	; 156
    282a:	9f 4d       	sbci	r25, 0xDF	; 223
    282c:	dc 01       	movw	r26, r24
    282e:	9c 90       	ld	r9, X
    2830:	a9 84       	ldd	r10, Y+9	; 0x09
    2832:	ba 84       	ldd	r11, Y+10	; 0x0a
    2834:	cb 84       	ldd	r12, Y+11	; 0x0b
    2836:	dc 84       	ldd	r13, Y+12	; 0x0c
    2838:	ed 84       	ldd	r14, Y+13	; 0x0d
    283a:	fe 84       	ldd	r15, Y+14	; 0x0e
    283c:	0f 85       	ldd	r16, Y+15	; 0x0f
    283e:	18 89       	ldd	r17, Y+16	; 0x10
    2840:	8f 81       	ldd	r24, Y+7	; 0x07
    2842:	98 85       	ldd	r25, Y+8	; 0x08
    2844:	2f e3       	ldi	r18, 0x3F	; 63
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	d9 01       	movw	r26, r18
    284a:	a8 1b       	sub	r26, r24
    284c:	b9 0b       	sbc	r27, r25
    284e:	2a 2d       	mov	r18, r10
    2850:	3b 2d       	mov	r19, r11
    2852:	4c 2d       	mov	r20, r12
    2854:	5d 2d       	mov	r21, r13
    2856:	6e 2d       	mov	r22, r14
    2858:	7f 2d       	mov	r23, r15
    285a:	80 2f       	mov	r24, r16
    285c:	91 2f       	mov	r25, r17
    285e:	0a 2f       	mov	r16, r26
    2860:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    2864:	a2 2e       	mov	r10, r18
    2866:	b3 2e       	mov	r11, r19
    2868:	c4 2e       	mov	r12, r20
    286a:	d5 2e       	mov	r13, r21
    286c:	e6 2e       	mov	r14, r22
    286e:	f7 2e       	mov	r15, r23
    2870:	08 2f       	mov	r16, r24
    2872:	19 2f       	mov	r17, r25
    2874:	8a 2d       	mov	r24, r10
    2876:	29 2d       	mov	r18, r9
    2878:	28 0f       	add	r18, r24
    287a:	cf 01       	movw	r24, r30
    287c:	8c 59       	subi	r24, 0x9C	; 156
    287e:	9f 4d       	sbci	r25, 0xDF	; 223
    2880:	fc 01       	movw	r30, r24
    2882:	20 83       	st	Z, r18
			w <<= 1+f_ex;
    2884:	a9 84       	ldd	r10, Y+9	; 0x09
    2886:	ba 84       	ldd	r11, Y+10	; 0x0a
    2888:	cb 84       	ldd	r12, Y+11	; 0x0b
    288a:	dc 84       	ldd	r13, Y+12	; 0x0c
    288c:	ed 84       	ldd	r14, Y+13	; 0x0d
    288e:	fe 84       	ldd	r15, Y+14	; 0x0e
    2890:	0f 85       	ldd	r16, Y+15	; 0x0f
    2892:	18 89       	ldd	r17, Y+16	; 0x10
    2894:	8f 81       	ldd	r24, Y+7	; 0x07
    2896:	98 85       	ldd	r25, Y+8	; 0x08
    2898:	fc 01       	movw	r30, r24
    289a:	31 96       	adiw	r30, 0x01	; 1
    289c:	2a 2d       	mov	r18, r10
    289e:	3b 2d       	mov	r19, r11
    28a0:	4c 2d       	mov	r20, r12
    28a2:	5d 2d       	mov	r21, r13
    28a4:	6e 2d       	mov	r22, r14
    28a6:	7f 2d       	mov	r23, r15
    28a8:	80 2f       	mov	r24, r16
    28aa:	91 2f       	mov	r25, r17
    28ac:	0e 2f       	mov	r16, r30
    28ae:	0e 94 76 4b 	call	0x96ec	; 0x96ec <__ashldi3>
    28b2:	a2 2e       	mov	r10, r18
    28b4:	b3 2e       	mov	r11, r19
    28b6:	c4 2e       	mov	r12, r20
    28b8:	d5 2e       	mov	r13, r21
    28ba:	e6 2e       	mov	r14, r22
    28bc:	f7 2e       	mov	r15, r23
    28be:	08 2f       	mov	r16, r24
    28c0:	19 2f       	mov	r17, r25
    28c2:	a9 86       	std	Y+9, r10	; 0x09
    28c4:	ba 86       	std	Y+10, r11	; 0x0a
    28c6:	cb 86       	std	Y+11, r12	; 0x0b
    28c8:	dc 86       	std	Y+12, r13	; 0x0c
    28ca:	ed 86       	std	Y+13, r14	; 0x0d
    28cc:	fe 86       	std	Y+14, r15	; 0x0e
    28ce:	0f 87       	std	Y+15, r16	; 0x0f
    28d0:	18 8b       	std	Y+16, r17	; 0x10
			f_ex=-1;
    28d2:	8f ef       	ldi	r24, 0xFF	; 255
    28d4:	9f ef       	ldi	r25, 0xFF	; 255
    28d6:	8f 83       	std	Y+7, r24	; 0x07
    28d8:	98 87       	std	Y+8, r25	; 0x08
		}
		++len;
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	8f 5f       	subi	r24, 0xFF	; 255
    28de:	89 83       	std	Y+1, r24	; 0x01
		w=approx_high_uint64_word_of_uint64_mult_uint64_pbv_y(&w, ((uint64_t)10)<<60, 0);
    28e0:	ce 01       	movw	r24, r28
    28e2:	09 96       	adiw	r24, 0x09	; 9
    28e4:	e1 2c       	mov	r14, r1
    28e6:	00 e0       	ldi	r16, 0x00	; 0
    28e8:	10 e0       	ldi	r17, 0x00	; 0
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	60 e0       	ldi	r22, 0x00	; 0
    28f4:	70 ea       	ldi	r23, 0xA0	; 160
    28f6:	0e 94 95 0a 	call	0x152a	; 0x152a <approx_high_uint64_word_of_uint64_mult_uint64_pbv_y>
    28fa:	a2 2e       	mov	r10, r18
    28fc:	b3 2e       	mov	r11, r19
    28fe:	c4 2e       	mov	r12, r20
    2900:	d5 2e       	mov	r13, r21
    2902:	e6 2e       	mov	r14, r22
    2904:	f7 2e       	mov	r15, r23
    2906:	08 2f       	mov	r16, r24
    2908:	19 2f       	mov	r17, r25
    290a:	a9 86       	std	Y+9, r10	; 0x09
    290c:	ba 86       	std	Y+10, r11	; 0x0a
    290e:	cb 86       	std	Y+11, r12	; 0x0b
    2910:	dc 86       	std	Y+12, r13	; 0x0c
    2912:	ed 86       	std	Y+13, r14	; 0x0d
    2914:	fe 86       	std	Y+14, r15	; 0x0e
    2916:	0f 87       	std	Y+15, r16	; 0x0f
    2918:	18 8b       	std	Y+16, r17	; 0x10
		f_ex+=4-f_shift_left_until_bit63_set(&w);
    291a:	ce 01       	movw	r24, r28
    291c:	09 96       	adiw	r24, 0x09	; 9
    291e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <f_shift_left_until_bit63_set>
    2922:	08 2e       	mov	r0, r24
    2924:	00 0c       	add	r0, r0
    2926:	99 0b       	sbc	r25, r25
    2928:	24 e0       	ldi	r18, 0x04	; 4
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	28 1b       	sub	r18, r24
    292e:	39 0b       	sbc	r19, r25
    2930:	8f 81       	ldd	r24, Y+7	; 0x07
    2932:	98 85       	ldd	r25, Y+8	; 0x08
    2934:	82 0f       	add	r24, r18
    2936:	93 1f       	adc	r25, r19
    2938:	8f 83       	std	Y+7, r24	; 0x07
    293a:	98 87       	std	Y+8, r25	; 0x08
		f_ex-=3+f_shift_left_until_bit63_set(&w);
		Exp10++;
	}
	posm=len;
	++len; // Platz f�r .
	while(0!=(anz_dezimal_mantisse--))
    293c:	89 a1       	ldd	r24, Y+33	; 0x21
    293e:	9f ef       	ldi	r25, 0xFF	; 255
    2940:	98 0f       	add	r25, r24
    2942:	99 a3       	std	Y+33, r25	; 0x21
    2944:	88 23       	and	r24, r24
    2946:	09 f0       	breq	.+2      	; 0x294a <f_to_decimalExp+0x52c>
    2948:	5c cf       	rjmp	.-328    	; 0x2802 <f_to_decimalExp+0x3e4>
		}
		++len;
		w=approx_high_uint64_word_of_uint64_mult_uint64_pbv_y(&w, ((uint64_t)10)<<60, 0);
		f_ex+=4-f_shift_left_until_bit63_set(&w);
	}
	if(f_ex>=0 && (w>>(63-f_ex)) >= 5)
    294a:	8f 81       	ldd	r24, Y+7	; 0x07
    294c:	98 85       	ldd	r25, Y+8	; 0x08
    294e:	99 23       	and	r25, r25
    2950:	0c f4       	brge	.+2      	; 0x2954 <f_to_decimalExp+0x536>
    2952:	7e c0       	rjmp	.+252    	; 0x2a50 <f_to_decimalExp+0x632>
    2954:	a9 84       	ldd	r10, Y+9	; 0x09
    2956:	ba 84       	ldd	r11, Y+10	; 0x0a
    2958:	cb 84       	ldd	r12, Y+11	; 0x0b
    295a:	dc 84       	ldd	r13, Y+12	; 0x0c
    295c:	ed 84       	ldd	r14, Y+13	; 0x0d
    295e:	fe 84       	ldd	r15, Y+14	; 0x0e
    2960:	0f 85       	ldd	r16, Y+15	; 0x0f
    2962:	18 89       	ldd	r17, Y+16	; 0x10
    2964:	8f 81       	ldd	r24, Y+7	; 0x07
    2966:	98 85       	ldd	r25, Y+8	; 0x08
    2968:	2f e3       	ldi	r18, 0x3F	; 63
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	f9 01       	movw	r30, r18
    296e:	e8 1b       	sub	r30, r24
    2970:	f9 0b       	sbc	r31, r25
    2972:	2a 2d       	mov	r18, r10
    2974:	3b 2d       	mov	r19, r11
    2976:	4c 2d       	mov	r20, r12
    2978:	5d 2d       	mov	r21, r13
    297a:	6e 2d       	mov	r22, r14
    297c:	7f 2d       	mov	r23, r15
    297e:	80 2f       	mov	r24, r16
    2980:	91 2f       	mov	r25, r17
    2982:	0e 2f       	mov	r16, r30
    2984:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    2988:	a2 2e       	mov	r10, r18
    298a:	b3 2e       	mov	r11, r19
    298c:	c4 2e       	mov	r12, r20
    298e:	d5 2e       	mov	r13, r21
    2990:	e6 2e       	mov	r14, r22
    2992:	f7 2e       	mov	r15, r23
    2994:	08 2f       	mov	r16, r24
    2996:	19 2f       	mov	r17, r25
    2998:	2a 2d       	mov	r18, r10
    299a:	3b 2d       	mov	r19, r11
    299c:	4c 2d       	mov	r20, r12
    299e:	5d 2d       	mov	r21, r13
    29a0:	6e 2d       	mov	r22, r14
    29a2:	7f 2d       	mov	r23, r15
    29a4:	80 2f       	mov	r24, r16
    29a6:	91 2f       	mov	r25, r17
    29a8:	a4 e0       	ldi	r26, 0x04	; 4
    29aa:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <f_to_decimalExp+0x594>
    29b0:	08 f4       	brcc	.+2      	; 0x29b4 <f_to_decimalExp+0x596>
    29b2:	4e c0       	rjmp	.+156    	; 0x2a50 <f_to_decimalExp+0x632>
	{
		for(i=len ; --i>posm ; )
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	8a 83       	std	Y+2, r24	; 0x02
    29b8:	20 c0       	rjmp	.+64     	; 0x29fa <f_to_decimalExp+0x5dc>
			if(TemporaryMemory[i]=='9')
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	88 2f       	mov	r24, r24
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	8c 59       	subi	r24, 0x9C	; 156
    29c2:	9f 4d       	sbci	r25, 0xDF	; 223
    29c4:	dc 01       	movw	r26, r24
    29c6:	8c 91       	ld	r24, X
    29c8:	89 33       	cpi	r24, 0x39	; 57
    29ca:	49 f4       	brne	.+18     	; 0x29de <f_to_decimalExp+0x5c0>
				TemporaryMemory[i]='0';
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	88 2f       	mov	r24, r24
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	8c 59       	subi	r24, 0x9C	; 156
    29d4:	9f 4d       	sbci	r25, 0xDF	; 223
    29d6:	20 e3       	ldi	r18, 0x30	; 48
    29d8:	fc 01       	movw	r30, r24
    29da:	20 83       	st	Z, r18
    29dc:	0e c0       	rjmp	.+28     	; 0x29fa <f_to_decimalExp+0x5dc>
			else
			{
				++TemporaryMemory[i];
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	88 2f       	mov	r24, r24
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9c 01       	movw	r18, r24
    29e6:	2c 59       	subi	r18, 0x9C	; 156
    29e8:	3f 4d       	sbci	r19, 0xDF	; 223
    29ea:	d9 01       	movw	r26, r18
    29ec:	2c 91       	ld	r18, X
    29ee:	2f 5f       	subi	r18, 0xFF	; 255
    29f0:	8c 59       	subi	r24, 0x9C	; 156
    29f2:	9f 4d       	sbci	r25, 0xDF	; 223
    29f4:	fc 01       	movw	r30, r24
    29f6:	20 83       	st	Z, r18
				break;
    29f8:	07 c0       	rjmp	.+14     	; 0x2a08 <f_to_decimalExp+0x5ea>
		w=approx_high_uint64_word_of_uint64_mult_uint64_pbv_y(&w, ((uint64_t)10)<<60, 0);
		f_ex+=4-f_shift_left_until_bit63_set(&w);
	}
	if(f_ex>=0 && (w>>(63-f_ex)) >= 5)
	{
		for(i=len ; --i>posm ; )
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	81 50       	subi	r24, 0x01	; 1
    29fe:	8a 83       	std	Y+2, r24	; 0x02
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	89 17       	cp	r24, r25
    2a06:	c8 f2       	brcs	.-78     	; 0x29ba <f_to_decimalExp+0x59c>
			else
			{
				++TemporaryMemory[i];
				break;
			}
		if(i==posm)
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	98 17       	cp	r25, r24
    2a0e:	01 f5       	brne	.+64     	; 0x2a50 <f_to_decimalExp+0x632>
		{
			++Exp10;
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	01 96       	adiw	r24, 0x01	; 1
    2a16:	8b 83       	std	Y+3, r24	; 0x03
    2a18:	9c 83       	std	Y+4, r25	; 0x04
			TemporaryMemory[++i]='1';
    2a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1c:	8f 5f       	subi	r24, 0xFF	; 255
    2a1e:	8a 83       	std	Y+2, r24	; 0x02
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	8c 59       	subi	r24, 0x9C	; 156
    2a28:	9f 4d       	sbci	r25, 0xDF	; 223
    2a2a:	21 e3       	ldi	r18, 0x31	; 49
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	2c 93       	st	X, r18
			while(++i<len)
    2a30:	08 c0       	rjmp	.+16     	; 0x2a42 <f_to_decimalExp+0x624>
				TemporaryMemory[i]='0';
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	88 2f       	mov	r24, r24
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	8c 59       	subi	r24, 0x9C	; 156
    2a3a:	9f 4d       	sbci	r25, 0xDF	; 223
    2a3c:	20 e3       	ldi	r18, 0x30	; 48
    2a3e:	fc 01       	movw	r30, r24
    2a40:	20 83       	st	Z, r18
			}
		if(i==posm)
		{
			++Exp10;
			TemporaryMemory[++i]='1';
			while(++i<len)
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	8a 83       	std	Y+2, r24	; 0x02
    2a48:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	98 17       	cp	r25, r24
    2a4e:	88 f3       	brcs	.-30     	; 0x2a32 <f_to_decimalExp+0x614>
				TemporaryMemory[i]='0';
		}
	}
	TemporaryMemory[posm]=TemporaryMemory[posm+1];
    2a50:	8d 81       	ldd	r24, Y+5	; 0x05
    2a52:	88 2f       	mov	r24, r24
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	2d 81       	ldd	r18, Y+5	; 0x05
    2a58:	22 2f       	mov	r18, r18
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	2f 5f       	subi	r18, 0xFF	; 255
    2a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a60:	2c 59       	subi	r18, 0x9C	; 156
    2a62:	3f 4d       	sbci	r19, 0xDF	; 223
    2a64:	d9 01       	movw	r26, r18
    2a66:	2c 91       	ld	r18, X
    2a68:	8c 59       	subi	r24, 0x9C	; 156
    2a6a:	9f 4d       	sbci	r25, 0xDF	; 223
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	20 83       	st	Z, r18
	TemporaryMemory[posm+1]='.';
    2a70:	8d 81       	ldd	r24, Y+5	; 0x05
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	8c 59       	subi	r24, 0x9C	; 156
    2a7a:	9f 4d       	sbci	r25, 0xDF	; 223
    2a7c:	2e e2       	ldi	r18, 0x2E	; 46
    2a7e:	dc 01       	movw	r26, r24
    2a80:	2c 93       	st	X, r18
	if(MantisseUndExponentGetrennt)
    2a82:	8a a1       	ldd	r24, Y+34	; 0x22
    2a84:	88 23       	and	r24, r24
    2a86:	51 f0       	breq	.+20     	; 0x2a9c <f_to_decimalExp+0x67e>
		TemporaryMemory[len++]=0;
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	91 e0       	ldi	r25, 0x01	; 1
    2a8c:	98 0f       	add	r25, r24
    2a8e:	99 83       	std	Y+1, r25	; 0x01
    2a90:	88 2f       	mov	r24, r24
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	8c 59       	subi	r24, 0x9C	; 156
    2a96:	9f 4d       	sbci	r25, 0xDF	; 223
    2a98:	fc 01       	movw	r30, r24
    2a9a:	10 82       	st	Z, r1
	TemporaryMemory[len++]='E';
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	91 e0       	ldi	r25, 0x01	; 1
    2aa0:	98 0f       	add	r25, r24
    2aa2:	99 83       	std	Y+1, r25	; 0x01
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	8c 59       	subi	r24, 0x9C	; 156
    2aaa:	9f 4d       	sbci	r25, 0xDF	; 223
    2aac:	25 e4       	ldi	r18, 0x45	; 69
    2aae:	dc 01       	movw	r26, r24
    2ab0:	2c 93       	st	X, r18
	if(Exp10>0)
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab6:	18 16       	cp	r1, r24
    2ab8:	19 06       	cpc	r1, r25
    2aba:	5c f4       	brge	.+22     	; 0x2ad2 <f_to_decimalExp+0x6b4>
		TemporaryMemory[len++]='+';
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	91 e0       	ldi	r25, 0x01	; 1
    2ac0:	98 0f       	add	r25, r24
    2ac2:	99 83       	std	Y+1, r25	; 0x01
    2ac4:	88 2f       	mov	r24, r24
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	8c 59       	subi	r24, 0x9C	; 156
    2aca:	9f 4d       	sbci	r25, 0xDF	; 223
    2acc:	2b e2       	ldi	r18, 0x2B	; 43
    2ace:	fc 01       	movw	r30, r24
    2ad0:	20 83       	st	Z, r18
	itoa(Exp10, &TemporaryMemory[len], 10);
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	88 2f       	mov	r24, r24
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9c 01       	movw	r18, r24
    2ada:	2c 59       	subi	r18, 0x9C	; 156
    2adc:	3f 4d       	sbci	r19, 0xDF	; 223
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae2:	4a e0       	ldi	r20, 0x0A	; 10
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	b9 01       	movw	r22, r18
    2ae8:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <itoa>
	if(0!=ExponentBasis10)
    2aec:	8b a1       	ldd	r24, Y+35	; 0x23
    2aee:	9c a1       	ldd	r25, Y+36	; 0x24
    2af0:	89 2b       	or	r24, r25
    2af2:	39 f0       	breq	.+14     	; 0x2b02 <f_to_decimalExp+0x6e4>
		*ExponentBasis10=Exp10;
    2af4:	8b a1       	ldd	r24, Y+35	; 0x23
    2af6:	9c a1       	ldd	r25, Y+36	; 0x24
    2af8:	2b 81       	ldd	r18, Y+3	; 0x03
    2afa:	3c 81       	ldd	r19, Y+4	; 0x04
    2afc:	dc 01       	movw	r26, r24
    2afe:	2d 93       	st	X+, r18
    2b00:	3c 93       	st	X, r19
	return TemporaryMemory;
    2b02:	84 e6       	ldi	r24, 0x64	; 100
    2b04:	90 e2       	ldi	r25, 0x20	; 32
}
    2b06:	cc 5b       	subi	r28, 0xBC	; 188
    2b08:	df 4f       	sbci	r29, 0xFF	; 255
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	1f 91       	pop	r17
    2b14:	0f 91       	pop	r16
    2b16:	ff 90       	pop	r15
    2b18:	ef 90       	pop	r14
    2b1a:	df 90       	pop	r13
    2b1c:	cf 90       	pop	r12
    2b1e:	bf 90       	pop	r11
    2b20:	af 90       	pop	r10
    2b22:	9f 90       	pop	r9
    2b24:	8f 90       	pop	r8
    2b26:	7f 90       	pop	r7
    2b28:	6f 90       	pop	r6
    2b2a:	5f 90       	pop	r5
    2b2c:	4f 90       	pop	r4
    2b2e:	08 95       	ret

00002b30 <f_to_string>:
#endif

#ifdef F_WITH_to_string
char *f_to_string(float64_t x, uint8_t max_nr_chars, uint8_t max_leading_mantisse_zeros)
{	// f_to_decimalExp() converts the float64 to the decimal representation of the number x if x is
    2b30:	4f 92       	push	r4
    2b32:	5f 92       	push	r5
    2b34:	6f 92       	push	r6
    2b36:	7f 92       	push	r7
    2b38:	8f 92       	push	r8
    2b3a:	9f 92       	push	r9
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	aa 97       	sbiw	r28, 0x2a	; 42
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	29 87       	std	Y+9, r18	; 0x09
    2b5c:	3a 87       	std	Y+10, r19	; 0x0a
    2b5e:	4b 87       	std	Y+11, r20	; 0x0b
    2b60:	5c 87       	std	Y+12, r21	; 0x0c
    2b62:	6d 87       	std	Y+13, r22	; 0x0d
    2b64:	7e 87       	std	Y+14, r23	; 0x0e
    2b66:	8f 87       	std	Y+15, r24	; 0x0f
    2b68:	98 8b       	std	Y+16, r25	; 0x10
    2b6a:	09 8b       	std	Y+17, r16	; 0x11
    2b6c:	ea 8a       	std	Y+18, r14	; 0x12
	// in this memory will become invalid if one of the functions f_to_decimalExp(), f_to_string(),
	// f_exp(), f_log(), f_sin(), f_cos(), f_tan(), f_arcsin(), f_arccos(), f_arctan() is called as
	// these functions will overwrite the memory.

	int16_t exp10;
	int8_t nrd=(0!=(x & 0x8000000000000000)) ? (max_nr_chars-1) : max_nr_chars; // nrd: Zahl der zu berechnenden dezimalen Mantissestellen.
    2b6e:	a9 84       	ldd	r10, Y+9	; 0x09
    2b70:	ba 84       	ldd	r11, Y+10	; 0x0a
    2b72:	cb 84       	ldd	r12, Y+11	; 0x0b
    2b74:	dc 84       	ldd	r13, Y+12	; 0x0c
    2b76:	ed 84       	ldd	r14, Y+13	; 0x0d
    2b78:	fe 84       	ldd	r15, Y+14	; 0x0e
    2b7a:	0f 85       	ldd	r16, Y+15	; 0x0f
    2b7c:	18 89       	ldd	r17, Y+16	; 0x10
    2b7e:	2a 2d       	mov	r18, r10
    2b80:	3b 2d       	mov	r19, r11
    2b82:	4c 2d       	mov	r20, r12
    2b84:	5d 2d       	mov	r21, r13
    2b86:	6e 2d       	mov	r22, r14
    2b88:	7f 2d       	mov	r23, r15
    2b8a:	80 2f       	mov	r24, r16
    2b8c:	91 2f       	mov	r25, r17
    2b8e:	a0 e0       	ldi	r26, 0x00	; 0
    2b90:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    2b94:	1c f4       	brge	.+6      	; 0x2b9c <f_to_string+0x6c>
    2b96:	89 89       	ldd	r24, Y+17	; 0x11
    2b98:	81 50       	subi	r24, 0x01	; 1
    2b9a:	01 c0       	rjmp	.+2      	; 0x2b9e <f_to_string+0x6e>
    2b9c:	89 89       	ldd	r24, Y+17	; 0x11
    2b9e:	89 83       	std	Y+1, r24	; 0x01
	int8_t nrd_vor=nrd+1;
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	8f 5f       	subi	r24, 0xFF	; 255
    2ba4:	8a 83       	std	Y+2, r24	; 0x02
	char *r=0;
    2ba6:	1b 82       	std	Y+3, r1	; 0x03
    2ba8:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t j, k;
	for(j=0; j<3 && nrd!=nrd_vor; j++)
    2baa:	1d 82       	std	Y+5, r1	; 0x05
    2bac:	eb c0       	rjmp	.+470    	; 0x2d84 <f_to_string+0x254>
	{
		if(nrd>nrd_vor)
    2bae:	99 81       	ldd	r25, Y+1	; 0x01
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	89 17       	cp	r24, r25
    2bb4:	e4 f4       	brge	.+56     	; 0x2bee <f_to_string+0xbe>
		{
			r=f_to_decimalExp(x, nrd_vor, 1, &exp10); // Nur exp10 berechnen
    2bb6:	2a 81       	ldd	r18, Y+2	; 0x02
    2bb8:	ce 01       	movw	r24, r28
    2bba:	07 96       	adiw	r24, 0x07	; 7
    2bbc:	49 84       	ldd	r4, Y+9	; 0x09
    2bbe:	5a 84       	ldd	r5, Y+10	; 0x0a
    2bc0:	6b 84       	ldd	r6, Y+11	; 0x0b
    2bc2:	7c 84       	ldd	r7, Y+12	; 0x0c
    2bc4:	8d 84       	ldd	r8, Y+13	; 0x0d
    2bc6:	9e 84       	ldd	r9, Y+14	; 0x0e
    2bc8:	af 84       	ldd	r10, Y+15	; 0x0f
    2bca:	b8 88       	ldd	r11, Y+16	; 0x10
    2bcc:	6c 01       	movw	r12, r24
    2bce:	ee 24       	eor	r14, r14
    2bd0:	e3 94       	inc	r14
    2bd2:	02 2f       	mov	r16, r18
    2bd4:	24 2d       	mov	r18, r4
    2bd6:	35 2d       	mov	r19, r5
    2bd8:	46 2d       	mov	r20, r6
    2bda:	57 2d       	mov	r21, r7
    2bdc:	68 2d       	mov	r22, r8
    2bde:	79 2d       	mov	r23, r9
    2be0:	8a 2d       	mov	r24, r10
    2be2:	9b 2d       	mov	r25, r11
    2be4:	0e 94 0f 12 	call	0x241e	; 0x241e <f_to_decimalExp>
    2be8:	8b 83       	std	Y+3, r24	; 0x03
    2bea:	9c 83       	std	Y+4, r25	; 0x04
			break;
    2bec:	d5 c0       	rjmp	.+426    	; 0x2d98 <f_to_string+0x268>
		}
		r=f_to_decimalExp(x, nrd, 1, &exp10); // Nur exp10 berechnen
    2bee:	29 81       	ldd	r18, Y+1	; 0x01
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	07 96       	adiw	r24, 0x07	; 7
    2bf4:	49 84       	ldd	r4, Y+9	; 0x09
    2bf6:	5a 84       	ldd	r5, Y+10	; 0x0a
    2bf8:	6b 84       	ldd	r6, Y+11	; 0x0b
    2bfa:	7c 84       	ldd	r7, Y+12	; 0x0c
    2bfc:	8d 84       	ldd	r8, Y+13	; 0x0d
    2bfe:	9e 84       	ldd	r9, Y+14	; 0x0e
    2c00:	af 84       	ldd	r10, Y+15	; 0x0f
    2c02:	b8 88       	ldd	r11, Y+16	; 0x10
    2c04:	6c 01       	movw	r12, r24
    2c06:	ee 24       	eor	r14, r14
    2c08:	e3 94       	inc	r14
    2c0a:	02 2f       	mov	r16, r18
    2c0c:	24 2d       	mov	r18, r4
    2c0e:	35 2d       	mov	r19, r5
    2c10:	46 2d       	mov	r20, r6
    2c12:	57 2d       	mov	r21, r7
    2c14:	68 2d       	mov	r22, r8
    2c16:	79 2d       	mov	r23, r9
    2c18:	8a 2d       	mov	r24, r10
    2c1a:	9b 2d       	mov	r25, r11
    2c1c:	0e 94 0f 12 	call	0x241e	; 0x241e <f_to_decimalExp>
    2c20:	8b 83       	std	Y+3, r24	; 0x03
    2c22:	9c 83       	std	Y+4, r25	; 0x04
		if(((x>>52)&2047)==2047 || 0==(x & 0x7ff0000000000000))
    2c24:	29 85       	ldd	r18, Y+9	; 0x09
    2c26:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c28:	4b 85       	ldd	r20, Y+11	; 0x0b
    2c2a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2c2c:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c2e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c32:	98 89       	ldd	r25, Y+16	; 0x10
    2c34:	04 e3       	ldi	r16, 0x34	; 52
    2c36:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    2c3a:	a2 2e       	mov	r10, r18
    2c3c:	b3 2e       	mov	r11, r19
    2c3e:	c4 2e       	mov	r12, r20
    2c40:	d5 2e       	mov	r13, r21
    2c42:	e6 2e       	mov	r14, r22
    2c44:	f7 2e       	mov	r15, r23
    2c46:	08 2f       	mov	r16, r24
    2c48:	19 2f       	mov	r17, r25
    2c4a:	2a 2d       	mov	r18, r10
    2c4c:	2f 7f       	andi	r18, 0xFF	; 255
    2c4e:	2b 8b       	std	Y+19, r18	; 0x13
    2c50:	4b 2d       	mov	r20, r11
    2c52:	47 70       	andi	r20, 0x07	; 7
    2c54:	4c 8b       	std	Y+20, r20	; 0x14
    2c56:	5c 2d       	mov	r21, r12
    2c58:	50 70       	andi	r21, 0x00	; 0
    2c5a:	5d 8b       	std	Y+21, r21	; 0x15
    2c5c:	8d 2d       	mov	r24, r13
    2c5e:	80 70       	andi	r24, 0x00	; 0
    2c60:	8e 8b       	std	Y+22, r24	; 0x16
    2c62:	9e 2d       	mov	r25, r14
    2c64:	90 70       	andi	r25, 0x00	; 0
    2c66:	9f 8b       	std	Y+23, r25	; 0x17
    2c68:	ef 2d       	mov	r30, r15
    2c6a:	e0 70       	andi	r30, 0x00	; 0
    2c6c:	e8 8f       	std	Y+24, r30	; 0x18
    2c6e:	f0 2f       	mov	r31, r16
    2c70:	f0 70       	andi	r31, 0x00	; 0
    2c72:	f9 8f       	std	Y+25, r31	; 0x19
    2c74:	21 2f       	mov	r18, r17
    2c76:	20 70       	andi	r18, 0x00	; 0
    2c78:	2a 8f       	std	Y+26, r18	; 0x1a
    2c7a:	2b 89       	ldd	r18, Y+19	; 0x13
    2c7c:	3c 89       	ldd	r19, Y+20	; 0x14
    2c7e:	4d 89       	ldd	r20, Y+21	; 0x15
    2c80:	5e 89       	ldd	r21, Y+22	; 0x16
    2c82:	6f 89       	ldd	r22, Y+23	; 0x17
    2c84:	78 8d       	ldd	r23, Y+24	; 0x18
    2c86:	89 8d       	ldd	r24, Y+25	; 0x19
    2c88:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c8a:	2f 3f       	cpi	r18, 0xFF	; 255
    2c8c:	37 40       	sbci	r19, 0x07	; 7
    2c8e:	41 05       	cpc	r20, r1
    2c90:	51 05       	cpc	r21, r1
    2c92:	61 05       	cpc	r22, r1
    2c94:	71 05       	cpc	r23, r1
    2c96:	81 05       	cpc	r24, r1
    2c98:	91 05       	cpc	r25, r1
    2c9a:	61 f1       	breq	.+88     	; 0x2cf4 <f_to_string+0x1c4>
    2c9c:	89 85       	ldd	r24, Y+9	; 0x09
    2c9e:	f8 2f       	mov	r31, r24
    2ca0:	f0 70       	andi	r31, 0x00	; 0
    2ca2:	fb 8f       	std	Y+27, r31	; 0x1b
    2ca4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca6:	28 2f       	mov	r18, r24
    2ca8:	20 70       	andi	r18, 0x00	; 0
    2caa:	2c 8f       	std	Y+28, r18	; 0x1c
    2cac:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cae:	48 2f       	mov	r20, r24
    2cb0:	40 70       	andi	r20, 0x00	; 0
    2cb2:	4d 8f       	std	Y+29, r20	; 0x1d
    2cb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cb6:	58 2f       	mov	r21, r24
    2cb8:	50 70       	andi	r21, 0x00	; 0
    2cba:	5e 8f       	std	Y+30, r21	; 0x1e
    2cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbe:	98 2f       	mov	r25, r24
    2cc0:	90 70       	andi	r25, 0x00	; 0
    2cc2:	9f 8f       	std	Y+31, r25	; 0x1f
    2cc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cc6:	e8 2f       	mov	r30, r24
    2cc8:	e0 70       	andi	r30, 0x00	; 0
    2cca:	e8 a3       	std	Y+32, r30	; 0x20
    2ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cce:	f8 2f       	mov	r31, r24
    2cd0:	f0 7f       	andi	r31, 0xF0	; 240
    2cd2:	f9 a3       	std	Y+33, r31	; 0x21
    2cd4:	88 89       	ldd	r24, Y+16	; 0x10
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	2f 77       	andi	r18, 0x7F	; 127
    2cda:	2a a3       	std	Y+34, r18	; 0x22
    2cdc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2cde:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2ce0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2ce2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2ce4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ce6:	78 a1       	ldd	r23, Y+32	; 0x20
    2ce8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cea:	9a a1       	ldd	r25, Y+34	; 0x22
    2cec:	a0 e0       	ldi	r26, 0x00	; 0
    2cee:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    2cf2:	19 f4       	brne	.+6      	; 0x2cfa <f_to_string+0x1ca>
			return r;
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	cb c2       	rjmp	.+1430   	; 0x3290 <f_to_string+0x760>
		if(exp10<-max_leading_mantisse_zeros-1)
    2cfa:	8a 89       	ldd	r24, Y+18	; 0x12
    2cfc:	88 2f       	mov	r24, r24
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	9c 01       	movw	r18, r24
    2d02:	20 95       	com	r18
    2d04:	30 95       	com	r19
    2d06:	8f 81       	ldd	r24, Y+7	; 0x07
    2d08:	98 85       	ldd	r25, Y+8	; 0x08
    2d0a:	82 17       	cp	r24, r18
    2d0c:	93 07       	cpc	r25, r19
    2d0e:	0c f4       	brge	.+2      	; 0x2d12 <f_to_string+0x1e2>
    2d10:	42 c0       	rjmp	.+132    	; 0x2d96 <f_to_string+0x266>
			break;
		nrd_vor=nrd;
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	8a 83       	std	Y+2, r24	; 0x02

		nrd=f_getsign(x) ? max_nr_chars-1 : max_nr_chars;
    2d16:	a9 84       	ldd	r10, Y+9	; 0x09
    2d18:	ba 84       	ldd	r11, Y+10	; 0x0a
    2d1a:	cb 84       	ldd	r12, Y+11	; 0x0b
    2d1c:	dc 84       	ldd	r13, Y+12	; 0x0c
    2d1e:	ed 84       	ldd	r14, Y+13	; 0x0d
    2d20:	fe 84       	ldd	r15, Y+14	; 0x0e
    2d22:	0f 85       	ldd	r16, Y+15	; 0x0f
    2d24:	18 89       	ldd	r17, Y+16	; 0x10
    2d26:	2a 2d       	mov	r18, r10
    2d28:	3b 2d       	mov	r19, r11
    2d2a:	4c 2d       	mov	r20, r12
    2d2c:	5d 2d       	mov	r21, r13
    2d2e:	6e 2d       	mov	r22, r14
    2d30:	7f 2d       	mov	r23, r15
    2d32:	80 2f       	mov	r24, r16
    2d34:	91 2f       	mov	r25, r17
    2d36:	0e 94 3b 10 	call	0x2076	; 0x2076 <f_getsign>
    2d3a:	88 23       	and	r24, r24
    2d3c:	19 f0       	breq	.+6      	; 0x2d44 <f_to_string+0x214>
    2d3e:	89 89       	ldd	r24, Y+17	; 0x11
    2d40:	81 50       	subi	r24, 0x01	; 1
    2d42:	01 c0       	rjmp	.+2      	; 0x2d46 <f_to_string+0x216>
    2d44:	89 89       	ldd	r24, Y+17	; 0x11
    2d46:	89 83       	std	Y+1, r24	; 0x01
			// Diese Variable nrd muss sowohl hier als oben vor Beginn der Schleife initialisiert werden.
		if(exp10<0)
    2d48:	8f 81       	ldd	r24, Y+7	; 0x07
    2d4a:	98 85       	ldd	r25, Y+8	; 0x08
    2d4c:	99 23       	and	r25, r25
    2d4e:	44 f4       	brge	.+16     	; 0x2d60 <f_to_string+0x230>
			nrd += exp10-1; // exp10-1 Zeichen durch 0.00 .... verbraucht.
    2d50:	8f 81       	ldd	r24, Y+7	; 0x07
    2d52:	98 85       	ldd	r25, Y+8	; 0x08
    2d54:	98 2f       	mov	r25, r24
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	89 0f       	add	r24, r25
    2d5a:	81 50       	subi	r24, 0x01	; 1
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	0f c0       	rjmp	.+30     	; 0x2d7e <f_to_string+0x24e>
		else if(exp10+1<nrd) // && exp10>=0 .
    2d60:	8f 81       	ldd	r24, Y+7	; 0x07
    2d62:	98 85       	ldd	r25, Y+8	; 0x08
    2d64:	9c 01       	movw	r18, r24
    2d66:	2f 5f       	subi	r18, 0xFF	; 255
    2d68:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	08 2e       	mov	r0, r24
    2d6e:	00 0c       	add	r0, r0
    2d70:	99 0b       	sbc	r25, r25
    2d72:	28 17       	cp	r18, r24
    2d74:	39 07       	cpc	r19, r25
    2d76:	1c f4       	brge	.+6      	; 0x2d7e <f_to_string+0x24e>
			--nrd; // Ein Zeichen durch Dezimalpunkt verbraucht.
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	81 50       	subi	r24, 0x01	; 1
    2d7c:	89 83       	std	Y+1, r24	; 0x01
	int16_t exp10;
	int8_t nrd=(0!=(x & 0x8000000000000000)) ? (max_nr_chars-1) : max_nr_chars; // nrd: Zahl der zu berechnenden dezimalen Mantissestellen.
	int8_t nrd_vor=nrd+1;
	char *r=0;
	uint8_t j, k;
	for(j=0; j<3 && nrd!=nrd_vor; j++)
    2d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d80:	8f 5f       	subi	r24, 0xFF	; 255
    2d82:	8d 83       	std	Y+5, r24	; 0x05
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	83 30       	cpi	r24, 0x03	; 3
    2d88:	38 f4       	brcc	.+14     	; 0x2d98 <f_to_string+0x268>
    2d8a:	99 81       	ldd	r25, Y+1	; 0x01
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	98 17       	cp	r25, r24
    2d90:	09 f0       	breq	.+2      	; 0x2d94 <f_to_string+0x264>
    2d92:	0d cf       	rjmp	.-486    	; 0x2bae <f_to_string+0x7e>
    2d94:	01 c0       	rjmp	.+2      	; 0x2d98 <f_to_string+0x268>
		}
		r=f_to_decimalExp(x, nrd, 1, &exp10); // Nur exp10 berechnen
		if(((x>>52)&2047)==2047 || 0==(x & 0x7ff0000000000000))
			return r;
		if(exp10<-max_leading_mantisse_zeros-1)
			break;
    2d96:	00 00       	nop
				// Beispiel f�r den Fall exp10==max_nr_chars-2 : Es sei max_nr_chars=4, exp10=2, Zahl=683.79426
				// ==> Es wird 684 dargestellt
				// (3 statt 4 Zeichen belegt, weil 683.8 zu viele Zeichen belegen w�rde).
	}

	if(0!=(x & 0x7ff0000000000000) && exp10>=-max_leading_mantisse_zeros && nrd>exp10)
    2d98:	89 85       	ldd	r24, Y+9	; 0x09
    2d9a:	48 2f       	mov	r20, r24
    2d9c:	40 70       	andi	r20, 0x00	; 0
    2d9e:	4b a3       	std	Y+35, r20	; 0x23
    2da0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da2:	58 2f       	mov	r21, r24
    2da4:	50 70       	andi	r21, 0x00	; 0
    2da6:	5c a3       	std	Y+36, r21	; 0x24
    2da8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2daa:	98 2f       	mov	r25, r24
    2dac:	90 70       	andi	r25, 0x00	; 0
    2dae:	9d a3       	std	Y+37, r25	; 0x25
    2db0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2db2:	e8 2f       	mov	r30, r24
    2db4:	e0 70       	andi	r30, 0x00	; 0
    2db6:	ee a3       	std	Y+38, r30	; 0x26
    2db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dba:	f8 2f       	mov	r31, r24
    2dbc:	f0 70       	andi	r31, 0x00	; 0
    2dbe:	ff a3       	std	Y+39, r31	; 0x27
    2dc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	20 70       	andi	r18, 0x00	; 0
    2dc6:	28 a7       	std	Y+40, r18	; 0x28
    2dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dca:	48 2f       	mov	r20, r24
    2dcc:	40 7f       	andi	r20, 0xF0	; 240
    2dce:	49 a7       	std	Y+41, r20	; 0x29
    2dd0:	88 89       	ldd	r24, Y+16	; 0x10
    2dd2:	58 2f       	mov	r21, r24
    2dd4:	5f 77       	andi	r21, 0x7F	; 127
    2dd6:	5a a7       	std	Y+42, r21	; 0x2a
    2dd8:	2b a1       	ldd	r18, Y+35	; 0x23
    2dda:	3c a1       	ldd	r19, Y+36	; 0x24
    2ddc:	4d a1       	ldd	r20, Y+37	; 0x25
    2dde:	5e a1       	ldd	r21, Y+38	; 0x26
    2de0:	6f a1       	ldd	r22, Y+39	; 0x27
    2de2:	78 a5       	ldd	r23, Y+40	; 0x28
    2de4:	89 a5       	ldd	r24, Y+41	; 0x29
    2de6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2de8:	a0 e0       	ldi	r26, 0x00	; 0
    2dea:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <f_to_string+0x2c2>
    2df0:	69 c1       	rjmp	.+722    	; 0x30c4 <f_to_string+0x594>
    2df2:	8a 89       	ldd	r24, Y+18	; 0x12
    2df4:	88 2f       	mov	r24, r24
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	22 27       	eor	r18, r18
    2dfa:	33 27       	eor	r19, r19
    2dfc:	28 1b       	sub	r18, r24
    2dfe:	39 0b       	sbc	r19, r25
    2e00:	8f 81       	ldd	r24, Y+7	; 0x07
    2e02:	98 85       	ldd	r25, Y+8	; 0x08
    2e04:	82 17       	cp	r24, r18
    2e06:	93 07       	cpc	r25, r19
    2e08:	0c f4       	brge	.+2      	; 0x2e0c <f_to_string+0x2dc>
    2e0a:	5c c1       	rjmp	.+696    	; 0x30c4 <f_to_string+0x594>
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	28 2f       	mov	r18, r24
    2e10:	88 0f       	add	r24, r24
    2e12:	33 0b       	sbc	r19, r19
    2e14:	8f 81       	ldd	r24, Y+7	; 0x07
    2e16:	98 85       	ldd	r25, Y+8	; 0x08
    2e18:	82 17       	cp	r24, r18
    2e1a:	93 07       	cpc	r25, r19
    2e1c:	0c f0       	brlt	.+2      	; 0x2e20 <f_to_string+0x2f0>
    2e1e:	52 c1       	rjmp	.+676    	; 0x30c4 <f_to_string+0x594>
	{		// Darstellung ohne 10er-Exponent (E)
		if(f_getsign(x))
    2e20:	a9 84       	ldd	r10, Y+9	; 0x09
    2e22:	ba 84       	ldd	r11, Y+10	; 0x0a
    2e24:	cb 84       	ldd	r12, Y+11	; 0x0b
    2e26:	dc 84       	ldd	r13, Y+12	; 0x0c
    2e28:	ed 84       	ldd	r14, Y+13	; 0x0d
    2e2a:	fe 84       	ldd	r15, Y+14	; 0x0e
    2e2c:	0f 85       	ldd	r16, Y+15	; 0x0f
    2e2e:	18 89       	ldd	r17, Y+16	; 0x10
    2e30:	2a 2d       	mov	r18, r10
    2e32:	3b 2d       	mov	r19, r11
    2e34:	4c 2d       	mov	r20, r12
    2e36:	5d 2d       	mov	r21, r13
    2e38:	6e 2d       	mov	r22, r14
    2e3a:	7f 2d       	mov	r23, r15
    2e3c:	80 2f       	mov	r24, r16
    2e3e:	91 2f       	mov	r25, r17
    2e40:	0e 94 3b 10 	call	0x2076	; 0x2076 <f_getsign>
    2e44:	88 23       	and	r24, r24
    2e46:	29 f0       	breq	.+10     	; 0x2e52 <f_to_string+0x322>
			++r;  // - Zeichen
    2e48:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4c:	01 96       	adiw	r24, 0x01	; 1
    2e4e:	8b 83       	std	Y+3, r24	; 0x03
    2e50:	9c 83       	std	Y+4, r25	; 0x04
		if(exp10<0)
    2e52:	8f 81       	ldd	r24, Y+7	; 0x07
    2e54:	98 85       	ldd	r25, Y+8	; 0x08
    2e56:	99 23       	and	r25, r25
    2e58:	0c f0       	brlt	.+2      	; 0x2e5c <f_to_string+0x32c>
    2e5a:	71 c0       	rjmp	.+226    	; 0x2f3e <f_to_string+0x40e>
		{
			for(j=strlen(r) ; (j--)>0 && '0'==r[j] ; )
    2e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e60:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    2e64:	8d 83       	std	Y+5, r24	; 0x05
    2e66:	09 c0       	rjmp	.+18     	; 0x2e7a <f_to_string+0x34a>
				r[j]=0;
    2e68:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6a:	88 2f       	mov	r24, r24
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e70:	3c 81       	ldd	r19, Y+4	; 0x04
    2e72:	82 0f       	add	r24, r18
    2e74:	93 1f       	adc	r25, r19
    2e76:	fc 01       	movw	r30, r24
    2e78:	10 82       	st	Z, r1
	{		// Darstellung ohne 10er-Exponent (E)
		if(f_getsign(x))
			++r;  // - Zeichen
		if(exp10<0)
		{
			for(j=strlen(r) ; (j--)>0 && '0'==r[j] ; )
    2e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7c:	9f ef       	ldi	r25, 0xFF	; 255
    2e7e:	98 0f       	add	r25, r24
    2e80:	9d 83       	std	Y+5, r25	; 0x05
    2e82:	88 23       	and	r24, r24
    2e84:	59 f0       	breq	.+22     	; 0x2e9c <f_to_string+0x36c>
    2e86:	8d 81       	ldd	r24, Y+5	; 0x05
    2e88:	88 2f       	mov	r24, r24
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e90:	82 0f       	add	r24, r18
    2e92:	93 1f       	adc	r25, r19
    2e94:	fc 01       	movw	r30, r24
    2e96:	80 81       	ld	r24, Z
    2e98:	80 33       	cpi	r24, 0x30	; 48
    2e9a:	31 f3       	breq	.-52     	; 0x2e68 <f_to_string+0x338>
				r[j]=0;
			r[1]=r[0];
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea0:	01 96       	adiw	r24, 0x01	; 1
    2ea2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ea4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ea6:	f9 01       	movw	r30, r18
    2ea8:	20 81       	ld	r18, Z
    2eaa:	fc 01       	movw	r30, r24
    2eac:	20 83       	st	Z, r18
			for(++j ; j>0 ; j--)
    2eae:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
    2eb4:	1c c0       	rjmp	.+56     	; 0x2eee <f_to_string+0x3be>
				r[j-exp10]=r[j];
    2eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ebe:	98 85       	ldd	r25, Y+8	; 0x08
    2ec0:	a9 01       	movw	r20, r18
    2ec2:	48 1b       	sub	r20, r24
    2ec4:	59 0b       	sbc	r21, r25
    2ec6:	ca 01       	movw	r24, r20
    2ec8:	9c 01       	movw	r18, r24
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ece:	82 0f       	add	r24, r18
    2ed0:	93 1f       	adc	r25, r19
    2ed2:	2d 81       	ldd	r18, Y+5	; 0x05
    2ed4:	22 2f       	mov	r18, r18
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	4b 81       	ldd	r20, Y+3	; 0x03
    2eda:	5c 81       	ldd	r21, Y+4	; 0x04
    2edc:	24 0f       	add	r18, r20
    2ede:	35 1f       	adc	r19, r21
    2ee0:	f9 01       	movw	r30, r18
    2ee2:	20 81       	ld	r18, Z
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	20 83       	st	Z, r18
		if(exp10<0)
		{
			for(j=strlen(r) ; (j--)>0 && '0'==r[j] ; )
				r[j]=0;
			r[1]=r[0];
			for(++j ; j>0 ; j--)
    2ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eea:	81 50       	subi	r24, 0x01	; 1
    2eec:	8d 83       	std	Y+5, r24	; 0x05
    2eee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef0:	88 23       	and	r24, r24
    2ef2:	09 f7       	brne	.-62     	; 0x2eb6 <f_to_string+0x386>
				r[j-exp10]=r[j];
			r[0]='0';
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef8:	20 e3       	ldi	r18, 0x30	; 48
    2efa:	fc 01       	movw	r30, r24
    2efc:	20 83       	st	Z, r18
			r[1]='.';
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	9c 81       	ldd	r25, Y+4	; 0x04
    2f02:	01 96       	adiw	r24, 0x01	; 1
    2f04:	2e e2       	ldi	r18, 0x2E	; 46
    2f06:	fc 01       	movw	r30, r24
    2f08:	20 83       	st	Z, r18
			for(j=2; ++exp10<0; )
    2f0a:	82 e0       	ldi	r24, 0x02	; 2
    2f0c:	8d 83       	std	Y+5, r24	; 0x05
    2f0e:	0d c0       	rjmp	.+26     	; 0x2f2a <f_to_string+0x3fa>
				r[j++]='0';
    2f10:	8d 81       	ldd	r24, Y+5	; 0x05
    2f12:	91 e0       	ldi	r25, 0x01	; 1
    2f14:	98 0f       	add	r25, r24
    2f16:	9d 83       	std	Y+5, r25	; 0x05
    2f18:	88 2f       	mov	r24, r24
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f1e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f20:	82 0f       	add	r24, r18
    2f22:	93 1f       	adc	r25, r19
    2f24:	20 e3       	ldi	r18, 0x30	; 48
    2f26:	fc 01       	movw	r30, r24
    2f28:	20 83       	st	Z, r18
			r[1]=r[0];
			for(++j ; j>0 ; j--)
				r[j-exp10]=r[j];
			r[0]='0';
			r[1]='.';
			for(j=2; ++exp10<0; )
    2f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f2c:	98 85       	ldd	r25, Y+8	; 0x08
    2f2e:	01 96       	adiw	r24, 0x01	; 1
    2f30:	8f 83       	std	Y+7, r24	; 0x07
    2f32:	98 87       	std	Y+8, r25	; 0x08
    2f34:	8f 81       	ldd	r24, Y+7	; 0x07
    2f36:	98 85       	ldd	r25, Y+8	; 0x08
    2f38:	99 23       	and	r25, r25
    2f3a:	54 f3       	brlt	.-44     	; 0x2f10 <f_to_string+0x3e0>
    2f3c:	a8 c0       	rjmp	.+336    	; 0x308e <f_to_string+0x55e>
				r[j++]='0';
		}
		else
		{
			for(j=1 ; j<=exp10 ; j++)
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	8d 83       	std	Y+5, r24	; 0x05
    2f42:	3b c0       	rjmp	.+118    	; 0x2fba <f_to_string+0x48a>
				 if(0==(r[j]=r[j+1]))
    2f44:	8d 81       	ldd	r24, Y+5	; 0x05
    2f46:	88 2f       	mov	r24, r24
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f4e:	82 0f       	add	r24, r18
    2f50:	93 1f       	adc	r25, r19
    2f52:	2d 81       	ldd	r18, Y+5	; 0x05
    2f54:	22 2f       	mov	r18, r18
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	2f 5f       	subi	r18, 0xFF	; 255
    2f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5c:	4b 81       	ldd	r20, Y+3	; 0x03
    2f5e:	5c 81       	ldd	r21, Y+4	; 0x04
    2f60:	24 0f       	add	r18, r20
    2f62:	35 1f       	adc	r19, r21
    2f64:	f9 01       	movw	r30, r18
    2f66:	20 81       	ld	r18, Z
    2f68:	fc 01       	movw	r30, r24
    2f6a:	20 83       	st	Z, r18
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	80 81       	ld	r24, Z
    2f70:	88 23       	and	r24, r24
    2f72:	01 f5       	brne	.+64     	; 0x2fb4 <f_to_string+0x484>
				 {
					 while(j<=exp10)
    2f74:	0d c0       	rjmp	.+26     	; 0x2f90 <f_to_string+0x460>
						 r[j++]='0';
    2f76:	8d 81       	ldd	r24, Y+5	; 0x05
    2f78:	91 e0       	ldi	r25, 0x01	; 1
    2f7a:	98 0f       	add	r25, r24
    2f7c:	9d 83       	std	Y+5, r25	; 0x05
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	2b 81       	ldd	r18, Y+3	; 0x03
    2f84:	3c 81       	ldd	r19, Y+4	; 0x04
    2f86:	82 0f       	add	r24, r18
    2f88:	93 1f       	adc	r25, r19
    2f8a:	20 e3       	ldi	r18, 0x30	; 48
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	20 83       	st	Z, r18
		else
		{
			for(j=1 ; j<=exp10 ; j++)
				 if(0==(r[j]=r[j+1]))
				 {
					 while(j<=exp10)
    2f90:	8d 81       	ldd	r24, Y+5	; 0x05
    2f92:	28 2f       	mov	r18, r24
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	8f 81       	ldd	r24, Y+7	; 0x07
    2f98:	98 85       	ldd	r25, Y+8	; 0x08
    2f9a:	82 17       	cp	r24, r18
    2f9c:	93 07       	cpc	r25, r19
    2f9e:	5c f7       	brge	.-42     	; 0x2f76 <f_to_string+0x446>
						 r[j++]='0';
					 r[j]=0;
    2fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa2:	88 2f       	mov	r24, r24
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	2b 81       	ldd	r18, Y+3	; 0x03
    2fa8:	3c 81       	ldd	r19, Y+4	; 0x04
    2faa:	82 0f       	add	r24, r18
    2fac:	93 1f       	adc	r25, r19
    2fae:	fc 01       	movw	r30, r24
    2fb0:	10 82       	st	Z, r1
					 break;
    2fb2:	0c c0       	rjmp	.+24     	; 0x2fcc <f_to_string+0x49c>
			for(j=2; ++exp10<0; )
				r[j++]='0';
		}
		else
		{
			for(j=1 ; j<=exp10 ; j++)
    2fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb6:	8f 5f       	subi	r24, 0xFF	; 255
    2fb8:	8d 83       	std	Y+5, r24	; 0x05
    2fba:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fc2:	98 85       	ldd	r25, Y+8	; 0x08
    2fc4:	82 17       	cp	r24, r18
    2fc6:	93 07       	cpc	r25, r19
    2fc8:	0c f0       	brlt	.+2      	; 0x2fcc <f_to_string+0x49c>
    2fca:	bc cf       	rjmp	.-136    	; 0x2f44 <f_to_string+0x414>
					 while(j<=exp10)
						 r[j++]='0';
					 r[j]=0;
					 break;
				 }
			if(j+1<max_nr_chars && 0!=r[j])
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	88 2f       	mov	r24, r24
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	9c 01       	movw	r18, r24
    2fd4:	2f 5f       	subi	r18, 0xFF	; 255
    2fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd8:	89 89       	ldd	r24, Y+17	; 0x11
    2fda:	88 2f       	mov	r24, r24
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	28 17       	cp	r18, r24
    2fe0:	39 07       	cpc	r19, r25
    2fe2:	0c f0       	brlt	.+2      	; 0x2fe6 <f_to_string+0x4b6>
    2fe4:	4b c0       	rjmp	.+150    	; 0x307c <f_to_string+0x54c>
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	88 2f       	mov	r24, r24
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	2b 81       	ldd	r18, Y+3	; 0x03
    2fee:	3c 81       	ldd	r19, Y+4	; 0x04
    2ff0:	82 0f       	add	r24, r18
    2ff2:	93 1f       	adc	r25, r19
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	80 81       	ld	r24, Z
    2ff8:	88 23       	and	r24, r24
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <f_to_string+0x4ce>
    2ffc:	3f c0       	rjmp	.+126    	; 0x307c <f_to_string+0x54c>
			{
				r[j]='.';
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	88 2f       	mov	r24, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	2b 81       	ldd	r18, Y+3	; 0x03
    3006:	3c 81       	ldd	r19, Y+4	; 0x04
    3008:	82 0f       	add	r24, r18
    300a:	93 1f       	adc	r25, r19
    300c:	2e e2       	ldi	r18, 0x2E	; 46
    300e:	fc 01       	movw	r30, r24
    3010:	20 83       	st	Z, r18
				for(j=strlen(r) ; (j--)>0 && '0'==r[j] ; )
    3012:	8b 81       	ldd	r24, Y+3	; 0x03
    3014:	9c 81       	ldd	r25, Y+4	; 0x04
    3016:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    301a:	8d 83       	std	Y+5, r24	; 0x05
    301c:	09 c0       	rjmp	.+18     	; 0x3030 <f_to_string+0x500>
					r[j]=0;
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	88 2f       	mov	r24, r24
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	2b 81       	ldd	r18, Y+3	; 0x03
    3026:	3c 81       	ldd	r19, Y+4	; 0x04
    3028:	82 0f       	add	r24, r18
    302a:	93 1f       	adc	r25, r19
    302c:	fc 01       	movw	r30, r24
    302e:	10 82       	st	Z, r1
					 break;
				 }
			if(j+1<max_nr_chars && 0!=r[j])
			{
				r[j]='.';
				for(j=strlen(r) ; (j--)>0 && '0'==r[j] ; )
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9f ef       	ldi	r25, 0xFF	; 255
    3034:	98 0f       	add	r25, r24
    3036:	9d 83       	std	Y+5, r25	; 0x05
    3038:	88 23       	and	r24, r24
    303a:	59 f0       	breq	.+22     	; 0x3052 <f_to_string+0x522>
    303c:	8d 81       	ldd	r24, Y+5	; 0x05
    303e:	88 2f       	mov	r24, r24
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	2b 81       	ldd	r18, Y+3	; 0x03
    3044:	3c 81       	ldd	r19, Y+4	; 0x04
    3046:	82 0f       	add	r24, r18
    3048:	93 1f       	adc	r25, r19
    304a:	fc 01       	movw	r30, r24
    304c:	80 81       	ld	r24, Z
    304e:	80 33       	cpi	r24, 0x30	; 48
    3050:	31 f3       	breq	.-52     	; 0x301e <f_to_string+0x4ee>
					r[j]=0;
				if('.'==r[j])
    3052:	8d 81       	ldd	r24, Y+5	; 0x05
    3054:	88 2f       	mov	r24, r24
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	2b 81       	ldd	r18, Y+3	; 0x03
    305a:	3c 81       	ldd	r19, Y+4	; 0x04
    305c:	82 0f       	add	r24, r18
    305e:	93 1f       	adc	r25, r19
    3060:	fc 01       	movw	r30, r24
    3062:	80 81       	ld	r24, Z
    3064:	8e 32       	cpi	r24, 0x2E	; 46
    3066:	99 f4       	brne	.+38     	; 0x308e <f_to_string+0x55e>
					r[j]=0;
    3068:	8d 81       	ldd	r24, Y+5	; 0x05
    306a:	88 2f       	mov	r24, r24
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	2b 81       	ldd	r18, Y+3	; 0x03
    3070:	3c 81       	ldd	r19, Y+4	; 0x04
    3072:	82 0f       	add	r24, r18
    3074:	93 1f       	adc	r25, r19
    3076:	fc 01       	movw	r30, r24
    3078:	10 82       	st	Z, r1
			if(j+1<max_nr_chars && 0!=r[j])
			{
				r[j]='.';
				for(j=strlen(r) ; (j--)>0 && '0'==r[j] ; )
					r[j]=0;
				if('.'==r[j])
    307a:	09 c0       	rjmp	.+18     	; 0x308e <f_to_string+0x55e>
					r[j]=0;
			}
			else
				r[j]=0; // Notwendig f�r den Fall j+1>=max_nr_chars
    307c:	8d 81       	ldd	r24, Y+5	; 0x05
    307e:	88 2f       	mov	r24, r24
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	2b 81       	ldd	r18, Y+3	; 0x03
    3084:	3c 81       	ldd	r19, Y+4	; 0x04
    3086:	82 0f       	add	r24, r18
    3088:	93 1f       	adc	r25, r19
    308a:	fc 01       	movw	r30, r24
    308c:	10 82       	st	Z, r1
		}
		if(f_getsign(x))
    308e:	a9 84       	ldd	r10, Y+9	; 0x09
    3090:	ba 84       	ldd	r11, Y+10	; 0x0a
    3092:	cb 84       	ldd	r12, Y+11	; 0x0b
    3094:	dc 84       	ldd	r13, Y+12	; 0x0c
    3096:	ed 84       	ldd	r14, Y+13	; 0x0d
    3098:	fe 84       	ldd	r15, Y+14	; 0x0e
    309a:	0f 85       	ldd	r16, Y+15	; 0x0f
    309c:	18 89       	ldd	r17, Y+16	; 0x10
    309e:	2a 2d       	mov	r18, r10
    30a0:	3b 2d       	mov	r19, r11
    30a2:	4c 2d       	mov	r20, r12
    30a4:	5d 2d       	mov	r21, r13
    30a6:	6e 2d       	mov	r22, r14
    30a8:	7f 2d       	mov	r23, r15
    30aa:	80 2f       	mov	r24, r16
    30ac:	91 2f       	mov	r25, r17
    30ae:	0e 94 3b 10 	call	0x2076	; 0x2076 <f_getsign>
    30b2:	88 23       	and	r24, r24
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <f_to_string+0x588>
    30b6:	ea c0       	rjmp	.+468    	; 0x328c <f_to_string+0x75c>
			--r;
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	9c 81       	ldd	r25, Y+4	; 0x04
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	8b 83       	std	Y+3, r24	; 0x03
    30c0:	9c 83       	std	Y+4, r25	; 0x04
					r[j]=0;
			}
			else
				r[j]=0; // Notwendig f�r den Fall j+1>=max_nr_chars
		}
		if(f_getsign(x))
    30c2:	e4 c0       	rjmp	.+456    	; 0x328c <f_to_string+0x75c>
			--r;
	}
	else
	{	// Darstellung mit 10er-Exponent (E)
		j=max_nr_chars-4;
    30c4:	89 89       	ldd	r24, Y+17	; 0x11
    30c6:	84 50       	subi	r24, 0x04	; 4
    30c8:	8d 83       	std	Y+5, r24	; 0x05
		if(f_getsign(x))
    30ca:	a9 84       	ldd	r10, Y+9	; 0x09
    30cc:	ba 84       	ldd	r11, Y+10	; 0x0a
    30ce:	cb 84       	ldd	r12, Y+11	; 0x0b
    30d0:	dc 84       	ldd	r13, Y+12	; 0x0c
    30d2:	ed 84       	ldd	r14, Y+13	; 0x0d
    30d4:	fe 84       	ldd	r15, Y+14	; 0x0e
    30d6:	0f 85       	ldd	r16, Y+15	; 0x0f
    30d8:	18 89       	ldd	r17, Y+16	; 0x10
    30da:	2a 2d       	mov	r18, r10
    30dc:	3b 2d       	mov	r19, r11
    30de:	4c 2d       	mov	r20, r12
    30e0:	5d 2d       	mov	r21, r13
    30e2:	6e 2d       	mov	r22, r14
    30e4:	7f 2d       	mov	r23, r15
    30e6:	80 2f       	mov	r24, r16
    30e8:	91 2f       	mov	r25, r17
    30ea:	0e 94 3b 10 	call	0x2076	; 0x2076 <f_getsign>
    30ee:	88 23       	and	r24, r24
    30f0:	19 f0       	breq	.+6      	; 0x30f8 <f_to_string+0x5c8>
			--j;
    30f2:	8d 81       	ldd	r24, Y+5	; 0x05
    30f4:	81 50       	subi	r24, 0x01	; 1
    30f6:	8d 83       	std	Y+5, r24	; 0x05
		exp10=(x>>52)&2047; // exp10 wird hier zur Aufnahme des bin�ren Exponenten "missbraucht"
    30f8:	29 85       	ldd	r18, Y+9	; 0x09
    30fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    30fc:	4b 85       	ldd	r20, Y+11	; 0x0b
    30fe:	5c 85       	ldd	r21, Y+12	; 0x0c
    3100:	6d 85       	ldd	r22, Y+13	; 0x0d
    3102:	7e 85       	ldd	r23, Y+14	; 0x0e
    3104:	8f 85       	ldd	r24, Y+15	; 0x0f
    3106:	98 89       	ldd	r25, Y+16	; 0x10
    3108:	04 e3       	ldi	r16, 0x34	; 52
    310a:	0e 94 91 4b 	call	0x9722	; 0x9722 <__lshrdi3>
    310e:	a2 2e       	mov	r10, r18
    3110:	b3 2e       	mov	r11, r19
    3112:	c4 2e       	mov	r12, r20
    3114:	d5 2e       	mov	r13, r21
    3116:	e6 2e       	mov	r14, r22
    3118:	f7 2e       	mov	r15, r23
    311a:	08 2f       	mov	r16, r24
    311c:	19 2f       	mov	r17, r25
    311e:	c5 01       	movw	r24, r10
    3120:	97 70       	andi	r25, 0x07	; 7
    3122:	8f 83       	std	Y+7, r24	; 0x07
    3124:	98 87       	std	Y+8, r25	; 0x08
		if(exp10<1023) --j;
    3126:	8f 81       	ldd	r24, Y+7	; 0x07
    3128:	98 85       	ldd	r25, Y+8	; 0x08
    312a:	8f 3f       	cpi	r24, 0xFF	; 255
    312c:	93 40       	sbci	r25, 0x03	; 3
    312e:	1c f4       	brge	.+6      	; 0x3136 <f_to_string+0x606>
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	81 50       	subi	r24, 0x01	; 1
    3134:	8d 83       	std	Y+5, r24	; 0x05
		if(exp10>1023+34 || exp10<1023-34) --j;
    3136:	8f 81       	ldd	r24, Y+7	; 0x07
    3138:	98 85       	ldd	r25, Y+8	; 0x08
    313a:	82 32       	cpi	r24, 0x22	; 34
    313c:	94 40       	sbci	r25, 0x04	; 4
    313e:	2c f4       	brge	.+10     	; 0x314a <f_to_string+0x61a>
    3140:	8f 81       	ldd	r24, Y+7	; 0x07
    3142:	98 85       	ldd	r25, Y+8	; 0x08
    3144:	8d 3d       	cpi	r24, 0xDD	; 221
    3146:	93 40       	sbci	r25, 0x03	; 3
    3148:	1c f4       	brge	.+6      	; 0x3150 <f_to_string+0x620>
    314a:	8d 81       	ldd	r24, Y+5	; 0x05
    314c:	81 50       	subi	r24, 0x01	; 1
    314e:	8d 83       	std	Y+5, r24	; 0x05
		if(j<1) j=1;
    3150:	8d 81       	ldd	r24, Y+5	; 0x05
    3152:	88 23       	and	r24, r24
    3154:	49 f4       	brne	.+18     	; 0x3168 <f_to_string+0x638>
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	8d 83       	std	Y+5, r24	; 0x05
		while((r=f_to_decimalExp(x, j, 0, 0)), strlen(r)>(uint8_t)max_nr_chars)
    315a:	06 c0       	rjmp	.+12     	; 0x3168 <f_to_string+0x638>
			if(--j<1)
    315c:	8d 81       	ldd	r24, Y+5	; 0x05
    315e:	81 50       	subi	r24, 0x01	; 1
    3160:	8d 83       	std	Y+5, r24	; 0x05
    3162:	8d 81       	ldd	r24, Y+5	; 0x05
    3164:	88 23       	and	r24, r24
    3166:	21 f1       	breq	.+72     	; 0x31b0 <f_to_string+0x680>
			--j;
		exp10=(x>>52)&2047; // exp10 wird hier zur Aufnahme des bin�ren Exponenten "missbraucht"
		if(exp10<1023) --j;
		if(exp10>1023+34 || exp10<1023-34) --j;
		if(j<1) j=1;
		while((r=f_to_decimalExp(x, j, 0, 0)), strlen(r)>(uint8_t)max_nr_chars)
    3168:	49 84       	ldd	r4, Y+9	; 0x09
    316a:	5a 84       	ldd	r5, Y+10	; 0x0a
    316c:	6b 84       	ldd	r6, Y+11	; 0x0b
    316e:	7c 84       	ldd	r7, Y+12	; 0x0c
    3170:	8d 84       	ldd	r8, Y+13	; 0x0d
    3172:	9e 84       	ldd	r9, Y+14	; 0x0e
    3174:	af 84       	ldd	r10, Y+15	; 0x0f
    3176:	b8 88       	ldd	r11, Y+16	; 0x10
    3178:	c1 2c       	mov	r12, r1
    317a:	d1 2c       	mov	r13, r1
    317c:	e1 2c       	mov	r14, r1
    317e:	0d 81       	ldd	r16, Y+5	; 0x05
    3180:	24 2d       	mov	r18, r4
    3182:	35 2d       	mov	r19, r5
    3184:	46 2d       	mov	r20, r6
    3186:	57 2d       	mov	r21, r7
    3188:	68 2d       	mov	r22, r8
    318a:	79 2d       	mov	r23, r9
    318c:	8a 2d       	mov	r24, r10
    318e:	9b 2d       	mov	r25, r11
    3190:	0e 94 0f 12 	call	0x241e	; 0x241e <f_to_decimalExp>
    3194:	8b 83       	std	Y+3, r24	; 0x03
    3196:	9c 83       	std	Y+4, r25	; 0x04
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	9c 81       	ldd	r25, Y+4	; 0x04
    319c:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    31a0:	9c 01       	movw	r18, r24
    31a2:	89 89       	ldd	r24, Y+17	; 0x11
    31a4:	88 2f       	mov	r24, r24
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	82 17       	cp	r24, r18
    31aa:	93 07       	cpc	r25, r19
    31ac:	b8 f2       	brcs	.-82     	; 0x315c <f_to_string+0x62c>
    31ae:	01 c0       	rjmp	.+2      	; 0x31b2 <f_to_string+0x682>
			if(--j<1)
				break;
    31b0:	00 00       	nop
		for(j=2; 0!=r[j] && 'E'!=r[j] && 'e'!=r[j] ; j++)
    31b2:	82 e0       	ldi	r24, 0x02	; 2
    31b4:	8d 83       	std	Y+5, r24	; 0x05
    31b6:	03 c0       	rjmp	.+6      	; 0x31be <f_to_string+0x68e>
    31b8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ba:	8f 5f       	subi	r24, 0xFF	; 255
    31bc:	8d 83       	std	Y+5, r24	; 0x05
    31be:	8d 81       	ldd	r24, Y+5	; 0x05
    31c0:	88 2f       	mov	r24, r24
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	2b 81       	ldd	r18, Y+3	; 0x03
    31c6:	3c 81       	ldd	r19, Y+4	; 0x04
    31c8:	82 0f       	add	r24, r18
    31ca:	93 1f       	adc	r25, r19
    31cc:	fc 01       	movw	r30, r24
    31ce:	80 81       	ld	r24, Z
    31d0:	88 23       	and	r24, r24
    31d2:	b1 f0       	breq	.+44     	; 0x3200 <f_to_string+0x6d0>
    31d4:	8d 81       	ldd	r24, Y+5	; 0x05
    31d6:	88 2f       	mov	r24, r24
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	2b 81       	ldd	r18, Y+3	; 0x03
    31dc:	3c 81       	ldd	r19, Y+4	; 0x04
    31de:	82 0f       	add	r24, r18
    31e0:	93 1f       	adc	r25, r19
    31e2:	fc 01       	movw	r30, r24
    31e4:	80 81       	ld	r24, Z
    31e6:	85 34       	cpi	r24, 0x45	; 69
    31e8:	59 f0       	breq	.+22     	; 0x3200 <f_to_string+0x6d0>
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	88 2f       	mov	r24, r24
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	2b 81       	ldd	r18, Y+3	; 0x03
    31f2:	3c 81       	ldd	r19, Y+4	; 0x04
    31f4:	82 0f       	add	r24, r18
    31f6:	93 1f       	adc	r25, r19
    31f8:	fc 01       	movw	r30, r24
    31fa:	80 81       	ld	r24, Z
    31fc:	85 36       	cpi	r24, 0x65	; 101
    31fe:	e1 f6       	brne	.-72     	; 0x31b8 <f_to_string+0x688>
			;
		k=j;
    3200:	8d 81       	ldd	r24, Y+5	; 0x05
    3202:	8e 83       	std	Y+6, r24	; 0x06
		while((--j>=4 || (!f_getsign(x) && j>=3)) && '0'==r[j])
    3204:	8d 81       	ldd	r24, Y+5	; 0x05
    3206:	81 50       	subi	r24, 0x01	; 1
    3208:	8d 83       	std	Y+5, r24	; 0x05
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	84 30       	cpi	r24, 0x04	; 4
    320e:	b8 f4       	brcc	.+46     	; 0x323e <f_to_string+0x70e>
    3210:	a9 84       	ldd	r10, Y+9	; 0x09
    3212:	ba 84       	ldd	r11, Y+10	; 0x0a
    3214:	cb 84       	ldd	r12, Y+11	; 0x0b
    3216:	dc 84       	ldd	r13, Y+12	; 0x0c
    3218:	ed 84       	ldd	r14, Y+13	; 0x0d
    321a:	fe 84       	ldd	r15, Y+14	; 0x0e
    321c:	0f 85       	ldd	r16, Y+15	; 0x0f
    321e:	18 89       	ldd	r17, Y+16	; 0x10
    3220:	2a 2d       	mov	r18, r10
    3222:	3b 2d       	mov	r19, r11
    3224:	4c 2d       	mov	r20, r12
    3226:	5d 2d       	mov	r21, r13
    3228:	6e 2d       	mov	r22, r14
    322a:	7f 2d       	mov	r23, r15
    322c:	80 2f       	mov	r24, r16
    322e:	91 2f       	mov	r25, r17
    3230:	0e 94 3b 10 	call	0x2076	; 0x2076 <f_getsign>
    3234:	88 23       	and	r24, r24
    3236:	71 f4       	brne	.+28     	; 0x3254 <f_to_string+0x724>
    3238:	8d 81       	ldd	r24, Y+5	; 0x05
    323a:	83 30       	cpi	r24, 0x03	; 3
    323c:	58 f0       	brcs	.+22     	; 0x3254 <f_to_string+0x724>
    323e:	8d 81       	ldd	r24, Y+5	; 0x05
    3240:	88 2f       	mov	r24, r24
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	2b 81       	ldd	r18, Y+3	; 0x03
    3246:	3c 81       	ldd	r19, Y+4	; 0x04
    3248:	82 0f       	add	r24, r18
    324a:	93 1f       	adc	r25, r19
    324c:	fc 01       	movw	r30, r24
    324e:	80 81       	ld	r24, Z
    3250:	80 33       	cpi	r24, 0x30	; 48
    3252:	c1 f2       	breq	.-80     	; 0x3204 <f_to_string+0x6d4>
			;
		while(0!=(r[++j]=r[k++]))
    3254:	8d 81       	ldd	r24, Y+5	; 0x05
    3256:	8f 5f       	subi	r24, 0xFF	; 255
    3258:	8d 83       	std	Y+5, r24	; 0x05
    325a:	8d 81       	ldd	r24, Y+5	; 0x05
    325c:	88 2f       	mov	r24, r24
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	2b 81       	ldd	r18, Y+3	; 0x03
    3262:	3c 81       	ldd	r19, Y+4	; 0x04
    3264:	82 0f       	add	r24, r18
    3266:	93 1f       	adc	r25, r19
    3268:	2e 81       	ldd	r18, Y+6	; 0x06
    326a:	31 e0       	ldi	r19, 0x01	; 1
    326c:	32 0f       	add	r19, r18
    326e:	3e 83       	std	Y+6, r19	; 0x06
    3270:	22 2f       	mov	r18, r18
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	4b 81       	ldd	r20, Y+3	; 0x03
    3276:	5c 81       	ldd	r21, Y+4	; 0x04
    3278:	24 0f       	add	r18, r20
    327a:	35 1f       	adc	r19, r21
    327c:	f9 01       	movw	r30, r18
    327e:	20 81       	ld	r18, Z
    3280:	fc 01       	movw	r30, r24
    3282:	20 83       	st	Z, r18
    3284:	fc 01       	movw	r30, r24
    3286:	80 81       	ld	r24, Z
    3288:	88 23       	and	r24, r24
    328a:	21 f7       	brne	.-56     	; 0x3254 <f_to_string+0x724>
			;
	}
	return r;
    328c:	8b 81       	ldd	r24, Y+3	; 0x03
    328e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3290:	aa 96       	adiw	r28, 0x2a	; 42
    3292:	cd bf       	out	0x3d, r28	; 61
    3294:	de bf       	out	0x3e, r29	; 62
    3296:	df 91       	pop	r29
    3298:	cf 91       	pop	r28
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	ff 90       	pop	r15
    32a0:	ef 90       	pop	r14
    32a2:	df 90       	pop	r13
    32a4:	cf 90       	pop	r12
    32a6:	bf 90       	pop	r11
    32a8:	af 90       	pop	r10
    32aa:	9f 90       	pop	r9
    32ac:	8f 90       	pop	r8
    32ae:	7f 90       	pop	r7
    32b0:	6f 90       	pop	r6
    32b2:	5f 90       	pop	r5
    32b4:	4f 90       	pop	r4
    32b6:	08 95       	ret

000032b8 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
    32b8:	cf 93       	push	r28
    32ba:	df 93       	push	r29
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
    32c0:	80 ea       	ldi	r24, 0xA0	; 160
    32c2:	96 e0       	ldi	r25, 0x06	; 6
    32c4:	20 e1       	ldi	r18, 0x10	; 16
    32c6:	fc 01       	movw	r30, r24
    32c8:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
    32ca:	80 ea       	ldi	r24, 0xA0	; 160
    32cc:	96 e0       	ldi	r25, 0x06	; 6
    32ce:	20 e2       	ldi	r18, 0x20	; 32
    32d0:	fc 01       	movw	r30, r24
    32d2:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
    32d4:	80 ea       	ldi	r24, 0xA0	; 160
    32d6:	96 e0       	ldi	r25, 0x06	; 6
    32d8:	20 e4       	ldi	r18, 0x40	; 64
    32da:	fc 01       	movw	r30, r24
    32dc:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
    32de:	80 ea       	ldi	r24, 0xA0	; 160
    32e0:	96 e0       	ldi	r25, 0x06	; 6
    32e2:	20 e8       	ldi	r18, 0x80	; 128
    32e4:	fc 01       	movw	r30, r24
    32e6:	22 83       	std	Z+2, r18	; 0x02
 }
    32e8:	00 00       	nop
    32ea:	df 91       	pop	r29
    32ec:	cf 91       	pop	r28
    32ee:	08 95       	ret

000032f0 <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
    32f0:	cf 93       	push	r28
    32f2:	df 93       	push	r29
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
    32f8:	80 ea       	ldi	r24, 0xA0	; 160
    32fa:	96 e0       	ldi	r25, 0x06	; 6
    32fc:	fc 01       	movw	r30, r24
    32fe:	80 85       	ldd	r24, Z+8	; 0x08
    3300:	88 2f       	mov	r24, r24
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	80 71       	andi	r24, 0x10	; 16
    3306:	99 27       	eor	r25, r25
    3308:	95 95       	asr	r25
    330a:	87 95       	ror	r24
    330c:	95 95       	asr	r25
    330e:	87 95       	ror	r24
    3310:	95 95       	asr	r25
    3312:	87 95       	ror	r24
    3314:	95 95       	asr	r25
    3316:	87 95       	ror	r24
    3318:	89 2b       	or	r24, r25
    331a:	89 f4       	brne	.+34     	; 0x333e <updateButtons+0x4e>
		if(b1Count < 60000) {
    331c:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <b1Count.3829>
    3320:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <b1Count.3829+0x1>
    3324:	80 36       	cpi	r24, 0x60	; 96
    3326:	9a 4e       	sbci	r25, 0xEA	; 234
    3328:	20 f5       	brcc	.+72     	; 0x3372 <updateButtons+0x82>
			b1Count++;
    332a:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <b1Count.3829>
    332e:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <b1Count.3829+0x1>
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <b1Count.3829>
    3338:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <b1Count.3829+0x1>
    333c:	1a c0       	rjmp	.+52     	; 0x3372 <updateButtons+0x82>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
    333e:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <b1Count.3829>
    3342:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <b1Count.3829+0x1>
    3346:	0b 97       	sbiw	r24, 0x0b	; 11
    3348:	68 f0       	brcs	.+26     	; 0x3364 <updateButtons+0x74>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
    334a:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <b1Count.3829>
    334e:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <b1Count.3829+0x1>
    3352:	c3 97       	sbiw	r24, 0x33	; 51
    3354:	18 f0       	brcs	.+6      	; 0x335c <updateButtons+0x6c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
    3356:	10 92 60 2d 	sts	0x2D60, r1	; 0x802d60 <b1Status>
    335a:	07 c0       	rjmp	.+14     	; 0x336a <updateButtons+0x7a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	80 93 60 2d 	sts	0x2D60, r24	; 0x802d60 <b1Status>
    3362:	03 c0       	rjmp	.+6      	; 0x336a <updateButtons+0x7a>
			}
		} else {
			b1Status = NOT_PRESSED;
    3364:	82 e0       	ldi	r24, 0x02	; 2
    3366:	80 93 60 2d 	sts	0x2D60, r24	; 0x802d60 <b1Status>
		}
		b1Count = 0;
    336a:	10 92 e4 20 	sts	0x20E4, r1	; 0x8020e4 <b1Count.3829>
    336e:	10 92 e5 20 	sts	0x20E5, r1	; 0x8020e5 <b1Count.3829+0x1>
	}
	if(Button2_Value == 0) {
    3372:	80 ea       	ldi	r24, 0xA0	; 160
    3374:	96 e0       	ldi	r25, 0x06	; 6
    3376:	fc 01       	movw	r30, r24
    3378:	80 85       	ldd	r24, Z+8	; 0x08
    337a:	88 2f       	mov	r24, r24
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	80 72       	andi	r24, 0x20	; 32
    3380:	99 27       	eor	r25, r25
    3382:	95 95       	asr	r25
    3384:	87 95       	ror	r24
    3386:	95 95       	asr	r25
    3388:	87 95       	ror	r24
    338a:	95 95       	asr	r25
    338c:	87 95       	ror	r24
    338e:	95 95       	asr	r25
    3390:	87 95       	ror	r24
    3392:	95 95       	asr	r25
    3394:	87 95       	ror	r24
    3396:	89 2b       	or	r24, r25
    3398:	89 f4       	brne	.+34     	; 0x33bc <updateButtons+0xcc>
		if(b2Count < 60000) {
    339a:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <b2Count.3830>
    339e:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <b2Count.3830+0x1>
    33a2:	80 36       	cpi	r24, 0x60	; 96
    33a4:	9a 4e       	sbci	r25, 0xEA	; 234
    33a6:	20 f5       	brcc	.+72     	; 0x33f0 <updateButtons+0x100>
			b2Count++;
    33a8:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <b2Count.3830>
    33ac:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <b2Count.3830+0x1>
    33b0:	01 96       	adiw	r24, 0x01	; 1
    33b2:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <b2Count.3830>
    33b6:	90 93 e7 20 	sts	0x20E7, r25	; 0x8020e7 <b2Count.3830+0x1>
    33ba:	1a c0       	rjmp	.+52     	; 0x33f0 <updateButtons+0x100>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
    33bc:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <b2Count.3830>
    33c0:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <b2Count.3830+0x1>
    33c4:	0b 97       	sbiw	r24, 0x0b	; 11
    33c6:	68 f0       	brcs	.+26     	; 0x33e2 <updateButtons+0xf2>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
    33c8:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <b2Count.3830>
    33cc:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <b2Count.3830+0x1>
    33d0:	c3 97       	sbiw	r24, 0x33	; 51
    33d2:	18 f0       	brcs	.+6      	; 0x33da <updateButtons+0xea>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
    33d4:	10 92 61 2d 	sts	0x2D61, r1	; 0x802d61 <b2Status>
    33d8:	07 c0       	rjmp	.+14     	; 0x33e8 <updateButtons+0xf8>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	80 93 61 2d 	sts	0x2D61, r24	; 0x802d61 <b2Status>
    33e0:	03 c0       	rjmp	.+6      	; 0x33e8 <updateButtons+0xf8>
			}
		} else {
			b2Status = NOT_PRESSED;			
    33e2:	82 e0       	ldi	r24, 0x02	; 2
    33e4:	80 93 61 2d 	sts	0x2D61, r24	; 0x802d61 <b2Status>
		}
		b2Count = 0;
    33e8:	10 92 e6 20 	sts	0x20E6, r1	; 0x8020e6 <b2Count.3830>
    33ec:	10 92 e7 20 	sts	0x20E7, r1	; 0x8020e7 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
    33f0:	80 ea       	ldi	r24, 0xA0	; 160
    33f2:	96 e0       	ldi	r25, 0x06	; 6
    33f4:	fc 01       	movw	r30, r24
    33f6:	80 85       	ldd	r24, Z+8	; 0x08
    33f8:	88 2f       	mov	r24, r24
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	80 74       	andi	r24, 0x40	; 64
    33fe:	99 27       	eor	r25, r25
    3400:	08 2e       	mov	r0, r24
    3402:	89 2f       	mov	r24, r25
    3404:	00 0c       	add	r0, r0
    3406:	88 1f       	adc	r24, r24
    3408:	99 0b       	sbc	r25, r25
    340a:	00 0c       	add	r0, r0
    340c:	88 1f       	adc	r24, r24
    340e:	99 1f       	adc	r25, r25
    3410:	89 2b       	or	r24, r25
    3412:	89 f4       	brne	.+34     	; 0x3436 <updateButtons+0x146>
		if(b3Count < 60000) {
    3414:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <b3Count.3831>
    3418:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <b3Count.3831+0x1>
    341c:	80 36       	cpi	r24, 0x60	; 96
    341e:	9a 4e       	sbci	r25, 0xEA	; 234
    3420:	20 f5       	brcc	.+72     	; 0x346a <updateButtons+0x17a>
			b3Count++;
    3422:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <b3Count.3831>
    3426:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <b3Count.3831+0x1>
    342a:	01 96       	adiw	r24, 0x01	; 1
    342c:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <b3Count.3831>
    3430:	90 93 e9 20 	sts	0x20E9, r25	; 0x8020e9 <b3Count.3831+0x1>
    3434:	1a c0       	rjmp	.+52     	; 0x346a <updateButtons+0x17a>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
    3436:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <b3Count.3831>
    343a:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <b3Count.3831+0x1>
    343e:	0b 97       	sbiw	r24, 0x0b	; 11
    3440:	68 f0       	brcs	.+26     	; 0x345c <updateButtons+0x16c>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
    3442:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <b3Count.3831>
    3446:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <b3Count.3831+0x1>
    344a:	c3 97       	sbiw	r24, 0x33	; 51
    344c:	18 f0       	brcs	.+6      	; 0x3454 <updateButtons+0x164>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
    344e:	10 92 62 2d 	sts	0x2D62, r1	; 0x802d62 <b3Status>
    3452:	07 c0       	rjmp	.+14     	; 0x3462 <updateButtons+0x172>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	80 93 62 2d 	sts	0x2D62, r24	; 0x802d62 <b3Status>
    345a:	03 c0       	rjmp	.+6      	; 0x3462 <updateButtons+0x172>
			}
		} else {
			b3Status = NOT_PRESSED;
    345c:	82 e0       	ldi	r24, 0x02	; 2
    345e:	80 93 62 2d 	sts	0x2D62, r24	; 0x802d62 <b3Status>
		}
		b3Count = 0;
    3462:	10 92 e8 20 	sts	0x20E8, r1	; 0x8020e8 <b3Count.3831>
    3466:	10 92 e9 20 	sts	0x20E9, r1	; 0x8020e9 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
    346a:	80 ea       	ldi	r24, 0xA0	; 160
    346c:	96 e0       	ldi	r25, 0x06	; 6
    346e:	fc 01       	movw	r30, r24
    3470:	80 85       	ldd	r24, Z+8	; 0x08
    3472:	88 23       	and	r24, r24
    3474:	8c f0       	brlt	.+34     	; 0x3498 <updateButtons+0x1a8>
		if(b4Count < 60000) {
    3476:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <b4Count.3832>
    347a:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <b4Count.3832+0x1>
    347e:	80 36       	cpi	r24, 0x60	; 96
    3480:	9a 4e       	sbci	r25, 0xEA	; 234
    3482:	20 f5       	brcc	.+72     	; 0x34cc <updateButtons+0x1dc>
			b4Count++;
    3484:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <b4Count.3832>
    3488:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <b4Count.3832+0x1>
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <b4Count.3832>
    3492:	90 93 eb 20 	sts	0x20EB, r25	; 0x8020eb <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
    3496:	1a c0       	rjmp	.+52     	; 0x34cc <updateButtons+0x1dc>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
    3498:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <b4Count.3832>
    349c:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <b4Count.3832+0x1>
    34a0:	0b 97       	sbiw	r24, 0x0b	; 11
    34a2:	68 f0       	brcs	.+26     	; 0x34be <updateButtons+0x1ce>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
    34a4:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <b4Count.3832>
    34a8:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <b4Count.3832+0x1>
    34ac:	c3 97       	sbiw	r24, 0x33	; 51
    34ae:	18 f0       	brcs	.+6      	; 0x34b6 <updateButtons+0x1c6>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
    34b0:	10 92 63 2d 	sts	0x2D63, r1	; 0x802d63 <b4Status>
    34b4:	07 c0       	rjmp	.+14     	; 0x34c4 <updateButtons+0x1d4>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	80 93 63 2d 	sts	0x2D63, r24	; 0x802d63 <b4Status>
    34bc:	03 c0       	rjmp	.+6      	; 0x34c4 <updateButtons+0x1d4>
			}
		} else {
			b4Status = NOT_PRESSED;
    34be:	82 e0       	ldi	r24, 0x02	; 2
    34c0:	80 93 63 2d 	sts	0x2D63, r24	; 0x802d63 <b4Status>
		}
		b4Count = 0;
    34c4:	10 92 ea 20 	sts	0x20EA, r1	; 0x8020ea <b4Count.3832>
    34c8:	10 92 eb 20 	sts	0x20EB, r1	; 0x8020eb <b4Count.3832+0x1>
	}
 }
    34cc:	00 00       	nop
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	08 95       	ret

000034d4 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
    34d4:	cf 93       	push	r28
    34d6:	df 93       	push	r29
    34d8:	1f 92       	push	r1
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
    34de:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	88 2f       	mov	r24, r24
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	81 30       	cpi	r24, 0x01	; 1
    34e8:	91 05       	cpc	r25, r1
    34ea:	79 f0       	breq	.+30     	; 0x350a <getButtonPress+0x36>
    34ec:	82 30       	cpi	r24, 0x02	; 2
    34ee:	91 05       	cpc	r25, r1
    34f0:	1c f4       	brge	.+6      	; 0x34f8 <getButtonPress+0x24>
    34f2:	89 2b       	or	r24, r25
    34f4:	39 f0       	breq	.+14     	; 0x3504 <getButtonPress+0x30>
    34f6:	12 c0       	rjmp	.+36     	; 0x351c <getButtonPress+0x48>
    34f8:	82 30       	cpi	r24, 0x02	; 2
    34fa:	91 05       	cpc	r25, r1
    34fc:	49 f0       	breq	.+18     	; 0x3510 <getButtonPress+0x3c>
    34fe:	03 97       	sbiw	r24, 0x03	; 3
    3500:	51 f0       	breq	.+20     	; 0x3516 <getButtonPress+0x42>
    3502:	0c c0       	rjmp	.+24     	; 0x351c <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
    3504:	80 91 60 2d 	lds	r24, 0x2D60	; 0x802d60 <b1Status>
    3508:	0a c0       	rjmp	.+20     	; 0x351e <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
    350a:	80 91 61 2d 	lds	r24, 0x2D61	; 0x802d61 <b2Status>
    350e:	07 c0       	rjmp	.+14     	; 0x351e <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
    3510:	80 91 62 2d 	lds	r24, 0x2D62	; 0x802d62 <b3Status>
    3514:	04 c0       	rjmp	.+8      	; 0x351e <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
    3516:	80 91 63 2d 	lds	r24, 0x2D63	; 0x802d63 <b4Status>
    351a:	01 c0       	rjmp	.+2      	; 0x351e <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
    351c:	82 e0       	ldi	r24, 0x02	; 2
    351e:	0f 90       	pop	r0
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    3524:	08 95       	ret

00003526 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3526:	0f 93       	push	r16
    3528:	cf 93       	push	r28
    352a:	df 93       	push	r29
    352c:	00 d0       	rcall	.+0      	; 0x352e <CCPWrite+0x8>
    352e:	00 d0       	rcall	.+0      	; 0x3530 <CCPWrite+0xa>
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	8c 83       	std	Y+4, r24	; 0x04
    3536:	9d 83       	std	Y+5, r25	; 0x05
    3538:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    353a:	8f e3       	ldi	r24, 0x3F	; 63
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	fc 01       	movw	r30, r24
    3540:	80 81       	ld	r24, Z
    3542:	8b 83       	std	Y+3, r24	; 0x03
    3544:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
    3546:	8c 81       	ldd	r24, Y+4	; 0x04
    3548:	9d 81       	ldd	r25, Y+5	; 0x05
    354a:	89 83       	std	Y+1, r24	; 0x01
    354c:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
    354e:	8b e3       	ldi	r24, 0x3B	; 59
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	fc 01       	movw	r30, r24
    3554:	10 82       	st	Z, r1
#endif
	asm volatile(
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	9a 81       	ldd	r25, Y+2	; 0x02
    355a:	2e 81       	ldd	r18, Y+6	; 0x06
    355c:	fc 01       	movw	r30, r24
    355e:	08 ed       	ldi	r16, 0xD8	; 216
    3560:	04 bf       	out	0x34, r16	; 52
    3562:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    3564:	8f e3       	ldi	r24, 0x3F	; 63
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	2b 81       	ldd	r18, Y+3	; 0x03
    356a:	fc 01       	movw	r30, r24
    356c:	20 83       	st	Z, r18
#endif
}
    356e:	00 00       	nop
    3570:	26 96       	adiw	r28, 0x06	; 6
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	de bf       	out	0x3e, r29	; 62
    3576:	df 91       	pop	r29
    3578:	cf 91       	pop	r28
    357a:	0f 91       	pop	r16
    357c:	08 95       	ret

0000357e <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	00 d0       	rcall	.+0      	; 0x3584 <CLKSYS_XOSC_Config+0x6>
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	6a 83       	std	Y+2, r22	; 0x02
    358c:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
    358e:	80 e5       	ldi	r24, 0x50	; 80
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	2a 81       	ldd	r18, Y+2	; 0x02
    3594:	22 23       	and	r18, r18
    3596:	11 f0       	breq	.+4      	; 0x359c <CLKSYS_XOSC_Config+0x1e>
    3598:	20 e2       	ldi	r18, 0x20	; 32
    359a:	01 c0       	rjmp	.+2      	; 0x359e <CLKSYS_XOSC_Config+0x20>
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	39 81       	ldd	r19, Y+1	; 0x01
    35a0:	32 2b       	or	r19, r18
    35a2:	2b 81       	ldd	r18, Y+3	; 0x03
    35a4:	23 2b       	or	r18, r19
    35a6:	fc 01       	movw	r30, r24
    35a8:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    35aa:	00 00       	nop
    35ac:	23 96       	adiw	r28, 0x03	; 3
    35ae:	cd bf       	out	0x3d, r28	; 61
    35b0:	de bf       	out	0x3e, r29	; 62
    35b2:	df 91       	pop	r29
    35b4:	cf 91       	pop	r28
    35b6:	08 95       	ret

000035b8 <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
    35b8:	cf 93       	push	r28
    35ba:	df 93       	push	r29
    35bc:	1f 92       	push	r1
    35be:	1f 92       	push	r1
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
    35c4:	89 83       	std	Y+1, r24	; 0x01
    35c6:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
    35c8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ca:	8f 71       	andi	r24, 0x1F	; 31
    35cc:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
    35ce:	80 e5       	ldi	r24, 0x50	; 80
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	39 81       	ldd	r19, Y+1	; 0x01
    35d4:	2a 81       	ldd	r18, Y+2	; 0x02
    35d6:	23 2b       	or	r18, r19
    35d8:	fc 01       	movw	r30, r24
    35da:	25 83       	std	Z+5, r18	; 0x05
}
    35dc:	00 00       	nop
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	df 91       	pop	r29
    35e4:	cf 91       	pop	r28
    35e6:	08 95       	ret

000035e8 <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	1f 92       	push	r1
    35ee:	1f 92       	push	r1
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
    35f4:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
    35f6:	80 e5       	ldi	r24, 0x50	; 80
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	20 e5       	ldi	r18, 0x50	; 80
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	f9 01       	movw	r30, r18
    3600:	20 81       	ld	r18, Z
    3602:	32 2f       	mov	r19, r18
    3604:	2a 81       	ldd	r18, Y+2	; 0x02
    3606:	20 95       	com	r18
    3608:	23 23       	and	r18, r19
    360a:	fc 01       	movw	r30, r24
    360c:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    360e:	80 e5       	ldi	r24, 0x50	; 80
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	fc 01       	movw	r30, r24
    3614:	90 81       	ld	r25, Z
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	89 23       	and	r24, r25
    361a:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
    361c:	89 81       	ldd	r24, Y+1	; 0x01
}
    361e:	0f 90       	pop	r0
    3620:	0f 90       	pop	r0
    3622:	df 91       	pop	r29
    3624:	cf 91       	pop	r28
    3626:	08 95       	ret

00003628 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
    3628:	cf 93       	push	r28
    362a:	df 93       	push	r29
    362c:	00 d0       	rcall	.+0      	; 0x362e <CLKSYS_Prescalers_Config+0x6>
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	8a 83       	std	Y+2, r24	; 0x02
    3634:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    3636:	9a 81       	ldd	r25, Y+2	; 0x02
    3638:	8b 81       	ldd	r24, Y+3	; 0x03
    363a:	89 2b       	or	r24, r25
    363c:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
    363e:	69 81       	ldd	r22, Y+1	; 0x01
    3640:	81 e4       	ldi	r24, 0x41	; 65
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 93 1a 	call	0x3526	; 0x3526 <CCPWrite>
}
    3648:	00 00       	nop
    364a:	23 96       	adiw	r28, 0x03	; 3
    364c:	cd bf       	out	0x3d, r28	; 61
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	df 91       	pop	r29
    3652:	cf 91       	pop	r28
    3654:	08 95       	ret

00003656 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    3656:	cf 93       	push	r28
    3658:	df 93       	push	r29
    365a:	1f 92       	push	r1
    365c:	1f 92       	push	r1
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62
    3662:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    3664:	80 e4       	ldi	r24, 0x40	; 64
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	fc 01       	movw	r30, r24
    366a:	80 81       	ld	r24, Z
    366c:	98 2f       	mov	r25, r24
    366e:	98 7f       	andi	r25, 0xF8	; 248
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	89 2b       	or	r24, r25
    3674:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
    3676:	69 81       	ldd	r22, Y+1	; 0x01
    3678:	80 e4       	ldi	r24, 0x40	; 64
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	0e 94 93 1a 	call	0x3526	; 0x3526 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    3680:	80 e4       	ldi	r24, 0x40	; 64
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	fc 01       	movw	r30, r24
    3686:	90 81       	ld	r25, Z
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	89 23       	and	r24, r25
    368c:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
    368e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3690:	0f 90       	pop	r0
    3692:	0f 90       	pop	r0
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	08 95       	ret

0000369a <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
    369a:	cf 93       	push	r28
    369c:	df 93       	push	r29
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <TC0_ConfigClockSource+0x6>
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	89 83       	std	Y+1, r24	; 0x01
    36a6:	9a 83       	std	Y+2, r25	; 0x02
    36a8:	6b 83       	std	Y+3, r22	; 0x03
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	9a 81       	ldd	r25, Y+2	; 0x02
    36ae:	fc 01       	movw	r30, r24
    36b0:	80 81       	ld	r24, Z
    36b2:	98 2f       	mov	r25, r24
    36b4:	90 7f       	andi	r25, 0xF0	; 240
    36b6:	8b 81       	ldd	r24, Y+3	; 0x03
    36b8:	89 2b       	or	r24, r25
    36ba:	28 2f       	mov	r18, r24
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	9a 81       	ldd	r25, Y+2	; 0x02
    36c0:	fc 01       	movw	r30, r24
    36c2:	20 83       	st	Z, r18
    36c4:	00 00       	nop
    36c6:	23 96       	adiw	r28, 0x03	; 3
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	df 91       	pop	r29
    36ce:	cf 91       	pop	r28
    36d0:	08 95       	ret

000036d2 <TC0_ConfigWGM>:
    36d2:	cf 93       	push	r28
    36d4:	df 93       	push	r29
    36d6:	00 d0       	rcall	.+0      	; 0x36d8 <TC0_ConfigWGM+0x6>
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
    36dc:	89 83       	std	Y+1, r24	; 0x01
    36de:	9a 83       	std	Y+2, r25	; 0x02
    36e0:	6b 83       	std	Y+3, r22	; 0x03
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	9a 81       	ldd	r25, Y+2	; 0x02
    36e6:	fc 01       	movw	r30, r24
    36e8:	81 81       	ldd	r24, Z+1	; 0x01
    36ea:	98 2f       	mov	r25, r24
    36ec:	98 7f       	andi	r25, 0xF8	; 248
    36ee:	8b 81       	ldd	r24, Y+3	; 0x03
    36f0:	89 2b       	or	r24, r25
    36f2:	28 2f       	mov	r18, r24
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
    36f6:	9a 81       	ldd	r25, Y+2	; 0x02
    36f8:	fc 01       	movw	r30, r24
    36fa:	21 83       	std	Z+1, r18	; 0x01
    36fc:	00 00       	nop
    36fe:	23 96       	adiw	r28, 0x03	; 3
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	df 91       	pop	r29
    3706:	cf 91       	pop	r28
    3708:	08 95       	ret

0000370a <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    370a:	cf 93       	push	r28
    370c:	df 93       	push	r29
    370e:	00 d0       	rcall	.+0      	; 0x3710 <TC0_SetOverflowIntLevel+0x6>
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	89 83       	std	Y+1, r24	; 0x01
    3716:	9a 83       	std	Y+2, r25	; 0x02
    3718:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	9a 81       	ldd	r25, Y+2	; 0x02
    371e:	fc 01       	movw	r30, r24
    3720:	86 81       	ldd	r24, Z+6	; 0x06
    3722:	98 2f       	mov	r25, r24
    3724:	9c 7f       	andi	r25, 0xFC	; 252
    3726:	8b 81       	ldd	r24, Y+3	; 0x03
    3728:	89 2b       	or	r24, r25
    372a:	28 2f       	mov	r18, r24
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	9a 81       	ldd	r25, Y+2	; 0x02
    3730:	fc 01       	movw	r30, r24
    3732:	26 83       	std	Z+6, r18	; 0x06
}
    3734:	00 00       	nop
    3736:	23 96       	adiw	r28, 0x03	; 3
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	df 91       	pop	r29
    373e:	cf 91       	pop	r28
    3740:	08 95       	ret

00003742 <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
    3742:	cf 93       	push	r28
    3744:	df 93       	push	r29
    3746:	00 d0       	rcall	.+0      	; 0x3748 <vApplicationStackOverflowHook+0x6>
    3748:	1f 92       	push	r1
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	89 83       	std	Y+1, r24	; 0x01
    3750:	9a 83       	std	Y+2, r25	; 0x02
    3752:	6b 83       	std	Y+3, r22	; 0x03
    3754:	7c 83       	std	Y+4, r23	; 0x04
    3756:	8b e2       	ldi	r24, 0x2B	; 43
    3758:	0e 94 b5 1b 	call	0x376a	; 0x376a <error>
    375c:	00 00       	nop
    375e:	24 96       	adiw	r28, 0x04	; 4
    3760:	cd bf       	out	0x3d, r28	; 61
    3762:	de bf       	out	0x3e, r29	; 62
    3764:	df 91       	pop	r29
    3766:	cf 91       	pop	r28
    3768:	08 95       	ret

0000376a <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
    376a:	cf 93       	push	r28
    376c:	df 93       	push	r29
    376e:	1f 92       	push	r1
    3770:	1f 92       	push	r1
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
    3776:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
    3778:	8a 81       	ldd	r24, Y+2	; 0x02
    377a:	8b 32       	cpi	r24, 0x2B	; 43
    377c:	19 f4       	brne	.+6      	; 0x3784 <error+0x1a>
	 a = 1;
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	89 83       	std	Y+1, r24	; 0x01
    3782:	0e c0       	rjmp	.+28     	; 0x37a0 <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
    3784:	8a 81       	ldd	r24, Y+2	; 0x02
    3786:	8c 32       	cpi	r24, 0x2C	; 44
    3788:	19 f4       	brne	.+6      	; 0x3790 <error+0x26>
	 a = 2;
    378a:	82 e0       	ldi	r24, 0x02	; 2
    378c:	89 83       	std	Y+1, r24	; 0x01
    378e:	08 c0       	rjmp	.+16     	; 0x37a0 <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
    3790:	8a 81       	ldd	r24, Y+2	; 0x02
    3792:	8f 32       	cpi	r24, 0x2F	; 47
    3794:	19 f4       	brne	.+6      	; 0x379c <error+0x32>
	 a = 3;
    3796:	83 e0       	ldi	r24, 0x03	; 3
    3798:	89 83       	std	Y+1, r24	; 0x01
    379a:	02 c0       	rjmp	.+4      	; 0x37a0 <error+0x36>
	 else
	 a = 4;
    379c:	84 e0       	ldi	r24, 0x04	; 4
    379e:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
    37a0:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <software_reset>
 }
    37a4:	00 00       	nop
    37a6:	0f 90       	pop	r0
    37a8:	0f 90       	pop	r0
    37aa:	df 91       	pop	r29
    37ac:	cf 91       	pop	r28
    37ae:	08 95       	ret

000037b0 <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
    37b0:	cf 93       	push	r28
    37b2:	df 93       	push	r29
    37b4:	cd b7       	in	r28, 0x3d	; 61
    37b6:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
    37b8:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
    37ba:	84 e3       	ldi	r24, 0x34	; 52
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	28 ed       	ldi	r18, 0xD8	; 216
    37c0:	fc 01       	movw	r30, r24
    37c2:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
    37c4:	88 e7       	ldi	r24, 0x78	; 120
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	21 e0       	ldi	r18, 0x01	; 1
    37ca:	fc 01       	movw	r30, r24
    37cc:	21 83       	std	Z+1, r18	; 0x01
    37ce:	00 00       	nop
    37d0:	df 91       	pop	r29
    37d2:	cf 91       	pop	r28
    37d4:	08 95       	ret

000037d6 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	1f 92       	push	r1
    37dc:	1f 92       	push	r1
    37de:	cd b7       	in	r28, 0x3d	; 61
    37e0:	de b7       	in	r29, 0x3e	; 62
    37e2:	80 e1       	ldi	r24, 0x10	; 16
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <pvPortMalloc>
    37ea:	89 83       	std	Y+1, r24	; 0x01
    37ec:	9a 83       	std	Y+2, r25	; 0x02
    37ee:	89 81       	ldd	r24, Y+1	; 0x01
    37f0:	9a 81       	ldd	r25, Y+2	; 0x02
    37f2:	89 2b       	or	r24, r25
    37f4:	61 f0       	breq	.+24     	; 0x380e <xEventGroupCreate+0x38>
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	9a 81       	ldd	r25, Y+2	; 0x02
    37fa:	fc 01       	movw	r30, r24
    37fc:	10 82       	st	Z, r1
    37fe:	11 82       	std	Z+1, r1	; 0x01
    3800:	12 82       	std	Z+2, r1	; 0x02
    3802:	13 82       	std	Z+3, r1	; 0x03
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	9a 81       	ldd	r25, Y+2	; 0x02
    3808:	04 96       	adiw	r24, 0x04	; 4
    380a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <vListInitialise>
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	9a 81       	ldd	r25, Y+2	; 0x02
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	df 91       	pop	r29
    3818:	cf 91       	pop	r28
    381a:	08 95       	ret

0000381c <xEventGroupWaitBits>:
    381c:	cf 92       	push	r12
    381e:	df 92       	push	r13
    3820:	ef 92       	push	r14
    3822:	ff 92       	push	r15
    3824:	0f 93       	push	r16
    3826:	1f 93       	push	r17
    3828:	cf 93       	push	r28
    382a:	df 93       	push	r29
    382c:	cd b7       	in	r28, 0x3d	; 61
    382e:	de b7       	in	r29, 0x3e	; 62
    3830:	6d 97       	sbiw	r28, 0x1d	; 29
    3832:	cd bf       	out	0x3d, r28	; 61
    3834:	de bf       	out	0x3e, r29	; 62
    3836:	8a 8b       	std	Y+18, r24	; 0x12
    3838:	9b 8b       	std	Y+19, r25	; 0x13
    383a:	4c 8b       	std	Y+20, r20	; 0x14
    383c:	5d 8b       	std	Y+21, r21	; 0x15
    383e:	6e 8b       	std	Y+22, r22	; 0x16
    3840:	7f 8b       	std	Y+23, r23	; 0x17
    3842:	28 8f       	std	Y+24, r18	; 0x18
    3844:	09 8f       	std	Y+25, r16	; 0x19
    3846:	ca 8e       	std	Y+26, r12	; 0x1a
    3848:	db 8e       	std	Y+27, r13	; 0x1b
    384a:	ec 8e       	std	Y+28, r14	; 0x1c
    384c:	fd 8e       	std	Y+29, r15	; 0x1d
    384e:	8a 89       	ldd	r24, Y+18	; 0x12
    3850:	9b 89       	ldd	r25, Y+19	; 0x13
    3852:	89 87       	std	Y+9, r24	; 0x09
    3854:	9a 87       	std	Y+10, r25	; 0x0a
    3856:	1d 82       	std	Y+5, r1	; 0x05
    3858:	1e 82       	std	Y+6, r1	; 0x06
    385a:	1f 82       	std	Y+7, r1	; 0x07
    385c:	18 86       	std	Y+8, r1	; 0x08
    385e:	1b 86       	std	Y+11, r1	; 0x0b
    3860:	0e 94 c5 2b 	call	0x578a	; 0x578a <vTaskSuspendAll>
    3864:	89 85       	ldd	r24, Y+9	; 0x09
    3866:	9a 85       	ldd	r25, Y+10	; 0x0a
    3868:	fc 01       	movw	r30, r24
    386a:	80 81       	ld	r24, Z
    386c:	91 81       	ldd	r25, Z+1	; 0x01
    386e:	a2 81       	ldd	r26, Z+2	; 0x02
    3870:	b3 81       	ldd	r27, Z+3	; 0x03
    3872:	8c 87       	std	Y+12, r24	; 0x0c
    3874:	9d 87       	std	Y+13, r25	; 0x0d
    3876:	ae 87       	std	Y+14, r26	; 0x0e
    3878:	bf 87       	std	Y+15, r27	; 0x0f
    387a:	2c 89       	ldd	r18, Y+20	; 0x14
    387c:	3d 89       	ldd	r19, Y+21	; 0x15
    387e:	4e 89       	ldd	r20, Y+22	; 0x16
    3880:	5f 89       	ldd	r21, Y+23	; 0x17
    3882:	8c 85       	ldd	r24, Y+12	; 0x0c
    3884:	9d 85       	ldd	r25, Y+13	; 0x0d
    3886:	ae 85       	ldd	r26, Y+14	; 0x0e
    3888:	bf 85       	ldd	r27, Y+15	; 0x0f
    388a:	09 8d       	ldd	r16, Y+25	; 0x19
    388c:	bc 01       	movw	r22, r24
    388e:	cd 01       	movw	r24, r26
    3890:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <prvTestWaitCondition>
    3894:	88 8b       	std	Y+16, r24	; 0x10
    3896:	88 89       	ldd	r24, Y+16	; 0x10
    3898:	88 23       	and	r24, r24
    389a:	59 f1       	breq	.+86     	; 0x38f2 <xEventGroupWaitBits+0xd6>
    389c:	8c 85       	ldd	r24, Y+12	; 0x0c
    389e:	9d 85       	ldd	r25, Y+13	; 0x0d
    38a0:	ae 85       	ldd	r26, Y+14	; 0x0e
    38a2:	bf 85       	ldd	r27, Y+15	; 0x0f
    38a4:	89 83       	std	Y+1, r24	; 0x01
    38a6:	9a 83       	std	Y+2, r25	; 0x02
    38a8:	ab 83       	std	Y+3, r26	; 0x03
    38aa:	bc 83       	std	Y+4, r27	; 0x04
    38ac:	1a 8e       	std	Y+26, r1	; 0x1a
    38ae:	1b 8e       	std	Y+27, r1	; 0x1b
    38b0:	1c 8e       	std	Y+28, r1	; 0x1c
    38b2:	1d 8e       	std	Y+29, r1	; 0x1d
    38b4:	88 8d       	ldd	r24, Y+24	; 0x18
    38b6:	88 23       	and	r24, r24
    38b8:	09 f4       	brne	.+2      	; 0x38bc <xEventGroupWaitBits+0xa0>
    38ba:	65 c0       	rjmp	.+202    	; 0x3986 <xEventGroupWaitBits+0x16a>
    38bc:	89 85       	ldd	r24, Y+9	; 0x09
    38be:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c0:	fc 01       	movw	r30, r24
    38c2:	20 81       	ld	r18, Z
    38c4:	31 81       	ldd	r19, Z+1	; 0x01
    38c6:	42 81       	ldd	r20, Z+2	; 0x02
    38c8:	53 81       	ldd	r21, Z+3	; 0x03
    38ca:	8c 89       	ldd	r24, Y+20	; 0x14
    38cc:	9d 89       	ldd	r25, Y+21	; 0x15
    38ce:	ae 89       	ldd	r26, Y+22	; 0x16
    38d0:	bf 89       	ldd	r27, Y+23	; 0x17
    38d2:	80 95       	com	r24
    38d4:	90 95       	com	r25
    38d6:	a0 95       	com	r26
    38d8:	b0 95       	com	r27
    38da:	82 23       	and	r24, r18
    38dc:	93 23       	and	r25, r19
    38de:	a4 23       	and	r26, r20
    38e0:	b5 23       	and	r27, r21
    38e2:	29 85       	ldd	r18, Y+9	; 0x09
    38e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    38e6:	f9 01       	movw	r30, r18
    38e8:	80 83       	st	Z, r24
    38ea:	91 83       	std	Z+1, r25	; 0x01
    38ec:	a2 83       	std	Z+2, r26	; 0x02
    38ee:	b3 83       	std	Z+3, r27	; 0x03
    38f0:	4a c0       	rjmp	.+148    	; 0x3986 <xEventGroupWaitBits+0x16a>
    38f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    38f6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    38f8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    38fa:	89 2b       	or	r24, r25
    38fc:	8a 2b       	or	r24, r26
    38fe:	8b 2b       	or	r24, r27
    3900:	59 f4       	brne	.+22     	; 0x3918 <xEventGroupWaitBits+0xfc>
    3902:	8c 85       	ldd	r24, Y+12	; 0x0c
    3904:	9d 85       	ldd	r25, Y+13	; 0x0d
    3906:	ae 85       	ldd	r26, Y+14	; 0x0e
    3908:	bf 85       	ldd	r27, Y+15	; 0x0f
    390a:	89 83       	std	Y+1, r24	; 0x01
    390c:	9a 83       	std	Y+2, r25	; 0x02
    390e:	ab 83       	std	Y+3, r26	; 0x03
    3910:	bc 83       	std	Y+4, r27	; 0x04
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	8b 87       	std	Y+11, r24	; 0x0b
    3916:	37 c0       	rjmp	.+110    	; 0x3986 <xEventGroupWaitBits+0x16a>
    3918:	88 8d       	ldd	r24, Y+24	; 0x18
    391a:	88 23       	and	r24, r24
    391c:	49 f0       	breq	.+18     	; 0x3930 <xEventGroupWaitBits+0x114>
    391e:	8d 81       	ldd	r24, Y+5	; 0x05
    3920:	9e 81       	ldd	r25, Y+6	; 0x06
    3922:	af 81       	ldd	r26, Y+7	; 0x07
    3924:	b8 85       	ldd	r27, Y+8	; 0x08
    3926:	b1 60       	ori	r27, 0x01	; 1
    3928:	8d 83       	std	Y+5, r24	; 0x05
    392a:	9e 83       	std	Y+6, r25	; 0x06
    392c:	af 83       	std	Y+7, r26	; 0x07
    392e:	b8 87       	std	Y+8, r27	; 0x08
    3930:	89 8d       	ldd	r24, Y+25	; 0x19
    3932:	88 23       	and	r24, r24
    3934:	49 f0       	breq	.+18     	; 0x3948 <xEventGroupWaitBits+0x12c>
    3936:	8d 81       	ldd	r24, Y+5	; 0x05
    3938:	9e 81       	ldd	r25, Y+6	; 0x06
    393a:	af 81       	ldd	r26, Y+7	; 0x07
    393c:	b8 85       	ldd	r27, Y+8	; 0x08
    393e:	b4 60       	ori	r27, 0x04	; 4
    3940:	8d 83       	std	Y+5, r24	; 0x05
    3942:	9e 83       	std	Y+6, r25	; 0x06
    3944:	af 83       	std	Y+7, r26	; 0x07
    3946:	b8 87       	std	Y+8, r27	; 0x08
    3948:	2c 89       	ldd	r18, Y+20	; 0x14
    394a:	3d 89       	ldd	r19, Y+21	; 0x15
    394c:	4e 89       	ldd	r20, Y+22	; 0x16
    394e:	5f 89       	ldd	r21, Y+23	; 0x17
    3950:	8d 81       	ldd	r24, Y+5	; 0x05
    3952:	9e 81       	ldd	r25, Y+6	; 0x06
    3954:	af 81       	ldd	r26, Y+7	; 0x07
    3956:	b8 85       	ldd	r27, Y+8	; 0x08
    3958:	82 2b       	or	r24, r18
    395a:	93 2b       	or	r25, r19
    395c:	a4 2b       	or	r26, r20
    395e:	b5 2b       	or	r27, r21
    3960:	29 85       	ldd	r18, Y+9	; 0x09
    3962:	3a 85       	ldd	r19, Y+10	; 0x0a
    3964:	f9 01       	movw	r30, r18
    3966:	34 96       	adiw	r30, 0x04	; 4
    3968:	2a 8d       	ldd	r18, Y+26	; 0x1a
    396a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    396c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    396e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    3970:	89 01       	movw	r16, r18
    3972:	9a 01       	movw	r18, r20
    3974:	ac 01       	movw	r20, r24
    3976:	bd 01       	movw	r22, r26
    3978:	cf 01       	movw	r24, r30
    397a:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <vTaskPlaceOnUnorderedEventList>
    397e:	19 82       	std	Y+1, r1	; 0x01
    3980:	1a 82       	std	Y+2, r1	; 0x02
    3982:	1b 82       	std	Y+3, r1	; 0x03
    3984:	1c 82       	std	Y+4, r1	; 0x04
    3986:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    398a:	89 8b       	std	Y+17, r24	; 0x11
    398c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    398e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3990:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3992:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3994:	89 2b       	or	r24, r25
    3996:	8a 2b       	or	r24, r26
    3998:	8b 2b       	or	r24, r27
    399a:	09 f4       	brne	.+2      	; 0x399e <xEventGroupWaitBits+0x182>
    399c:	65 c0       	rjmp	.+202    	; 0x3a68 <xEventGroupWaitBits+0x24c>
    399e:	89 89       	ldd	r24, Y+17	; 0x11
    39a0:	88 23       	and	r24, r24
    39a2:	11 f4       	brne	.+4      	; 0x39a8 <xEventGroupWaitBits+0x18c>
    39a4:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    39a8:	0e 94 56 31 	call	0x62ac	; 0x62ac <uxTaskResetEventItemValue>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	89 83       	std	Y+1, r24	; 0x01
    39b2:	9a 83       	std	Y+2, r25	; 0x02
    39b4:	ab 83       	std	Y+3, r26	; 0x03
    39b6:	bc 83       	std	Y+4, r27	; 0x04
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	9a 81       	ldd	r25, Y+2	; 0x02
    39bc:	ab 81       	ldd	r26, Y+3	; 0x03
    39be:	bc 81       	ldd	r27, Y+4	; 0x04
    39c0:	88 27       	eor	r24, r24
    39c2:	99 27       	eor	r25, r25
    39c4:	aa 27       	eor	r26, r26
    39c6:	b2 70       	andi	r27, 0x02	; 2
    39c8:	89 2b       	or	r24, r25
    39ca:	8a 2b       	or	r24, r26
    39cc:	8b 2b       	or	r24, r27
    39ce:	09 f0       	breq	.+2      	; 0x39d2 <xEventGroupWaitBits+0x1b6>
    39d0:	42 c0       	rjmp	.+132    	; 0x3a56 <xEventGroupWaitBits+0x23a>
    39d2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    39d6:	ff 93       	push	r31
    39d8:	f8 7f       	andi	r31, 0xF8	; 248
    39da:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    39de:	89 85       	ldd	r24, Y+9	; 0x09
    39e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e2:	fc 01       	movw	r30, r24
    39e4:	80 81       	ld	r24, Z
    39e6:	91 81       	ldd	r25, Z+1	; 0x01
    39e8:	a2 81       	ldd	r26, Z+2	; 0x02
    39ea:	b3 81       	ldd	r27, Z+3	; 0x03
    39ec:	89 83       	std	Y+1, r24	; 0x01
    39ee:	9a 83       	std	Y+2, r25	; 0x02
    39f0:	ab 83       	std	Y+3, r26	; 0x03
    39f2:	bc 83       	std	Y+4, r27	; 0x04
    39f4:	2c 89       	ldd	r18, Y+20	; 0x14
    39f6:	3d 89       	ldd	r19, Y+21	; 0x15
    39f8:	4e 89       	ldd	r20, Y+22	; 0x16
    39fa:	5f 89       	ldd	r21, Y+23	; 0x17
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3a00:	ab 81       	ldd	r26, Y+3	; 0x03
    3a02:	bc 81       	ldd	r27, Y+4	; 0x04
    3a04:	09 8d       	ldd	r16, Y+25	; 0x19
    3a06:	bc 01       	movw	r22, r24
    3a08:	cd 01       	movw	r24, r26
    3a0a:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <prvTestWaitCondition>
    3a0e:	88 23       	and	r24, r24
    3a10:	e9 f0       	breq	.+58     	; 0x3a4c <xEventGroupWaitBits+0x230>
    3a12:	88 8d       	ldd	r24, Y+24	; 0x18
    3a14:	88 23       	and	r24, r24
    3a16:	d1 f0       	breq	.+52     	; 0x3a4c <xEventGroupWaitBits+0x230>
    3a18:	89 85       	ldd	r24, Y+9	; 0x09
    3a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	20 81       	ld	r18, Z
    3a20:	31 81       	ldd	r19, Z+1	; 0x01
    3a22:	42 81       	ldd	r20, Z+2	; 0x02
    3a24:	53 81       	ldd	r21, Z+3	; 0x03
    3a26:	8c 89       	ldd	r24, Y+20	; 0x14
    3a28:	9d 89       	ldd	r25, Y+21	; 0x15
    3a2a:	ae 89       	ldd	r26, Y+22	; 0x16
    3a2c:	bf 89       	ldd	r27, Y+23	; 0x17
    3a2e:	80 95       	com	r24
    3a30:	90 95       	com	r25
    3a32:	a0 95       	com	r26
    3a34:	b0 95       	com	r27
    3a36:	82 23       	and	r24, r18
    3a38:	93 23       	and	r25, r19
    3a3a:	a4 23       	and	r26, r20
    3a3c:	b5 23       	and	r27, r21
    3a3e:	29 85       	ldd	r18, Y+9	; 0x09
    3a40:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a42:	f9 01       	movw	r30, r18
    3a44:	80 83       	st	Z, r24
    3a46:	91 83       	std	Z+1, r25	; 0x01
    3a48:	a2 83       	std	Z+2, r26	; 0x02
    3a4a:	b3 83       	std	Z+3, r27	; 0x03
    3a4c:	81 e0       	ldi	r24, 0x01	; 1
    3a4e:	8b 87       	std	Y+11, r24	; 0x0b
    3a50:	ff 91       	pop	r31
    3a52:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5a:	ab 81       	ldd	r26, Y+3	; 0x03
    3a5c:	bc 81       	ldd	r27, Y+4	; 0x04
    3a5e:	bb 27       	eor	r27, r27
    3a60:	89 83       	std	Y+1, r24	; 0x01
    3a62:	9a 83       	std	Y+2, r25	; 0x02
    3a64:	ab 83       	std	Y+3, r26	; 0x03
    3a66:	bc 83       	std	Y+4, r27	; 0x04
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6c:	ab 81       	ldd	r26, Y+3	; 0x03
    3a6e:	bc 81       	ldd	r27, Y+4	; 0x04
    3a70:	bc 01       	movw	r22, r24
    3a72:	cd 01       	movw	r24, r26
    3a74:	6d 96       	adiw	r28, 0x1d	; 29
    3a76:	cd bf       	out	0x3d, r28	; 61
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	df 91       	pop	r29
    3a7c:	cf 91       	pop	r28
    3a7e:	1f 91       	pop	r17
    3a80:	0f 91       	pop	r16
    3a82:	ff 90       	pop	r15
    3a84:	ef 90       	pop	r14
    3a86:	df 90       	pop	r13
    3a88:	cf 90       	pop	r12
    3a8a:	08 95       	ret

00003a8c <xEventGroupClearBits>:
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
    3a94:	2c 97       	sbiw	r28, 0x0c	; 12
    3a96:	cd bf       	out	0x3d, r28	; 61
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	8f 83       	std	Y+7, r24	; 0x07
    3a9c:	98 87       	std	Y+8, r25	; 0x08
    3a9e:	49 87       	std	Y+9, r20	; 0x09
    3aa0:	5a 87       	std	Y+10, r21	; 0x0a
    3aa2:	6b 87       	std	Y+11, r22	; 0x0b
    3aa4:	7c 87       	std	Y+12, r23	; 0x0c
    3aa6:	8f 81       	ldd	r24, Y+7	; 0x07
    3aa8:	98 85       	ldd	r25, Y+8	; 0x08
    3aaa:	89 83       	std	Y+1, r24	; 0x01
    3aac:	9a 83       	std	Y+2, r25	; 0x02
    3aae:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3ab2:	ff 93       	push	r31
    3ab4:	f8 7f       	andi	r31, 0xF8	; 248
    3ab6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	9a 81       	ldd	r25, Y+2	; 0x02
    3abe:	fc 01       	movw	r30, r24
    3ac0:	80 81       	ld	r24, Z
    3ac2:	91 81       	ldd	r25, Z+1	; 0x01
    3ac4:	a2 81       	ldd	r26, Z+2	; 0x02
    3ac6:	b3 81       	ldd	r27, Z+3	; 0x03
    3ac8:	8b 83       	std	Y+3, r24	; 0x03
    3aca:	9c 83       	std	Y+4, r25	; 0x04
    3acc:	ad 83       	std	Y+5, r26	; 0x05
    3ace:	be 83       	std	Y+6, r27	; 0x06
    3ad0:	89 81       	ldd	r24, Y+1	; 0x01
    3ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	20 81       	ld	r18, Z
    3ad8:	31 81       	ldd	r19, Z+1	; 0x01
    3ada:	42 81       	ldd	r20, Z+2	; 0x02
    3adc:	53 81       	ldd	r21, Z+3	; 0x03
    3ade:	89 85       	ldd	r24, Y+9	; 0x09
    3ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae2:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ae4:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ae6:	80 95       	com	r24
    3ae8:	90 95       	com	r25
    3aea:	a0 95       	com	r26
    3aec:	b0 95       	com	r27
    3aee:	82 23       	and	r24, r18
    3af0:	93 23       	and	r25, r19
    3af2:	a4 23       	and	r26, r20
    3af4:	b5 23       	and	r27, r21
    3af6:	29 81       	ldd	r18, Y+1	; 0x01
    3af8:	3a 81       	ldd	r19, Y+2	; 0x02
    3afa:	f9 01       	movw	r30, r18
    3afc:	80 83       	st	Z, r24
    3afe:	91 83       	std	Z+1, r25	; 0x01
    3b00:	a2 83       	std	Z+2, r26	; 0x02
    3b02:	b3 83       	std	Z+3, r27	; 0x03
    3b04:	ff 91       	pop	r31
    3b06:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b0e:	ad 81       	ldd	r26, Y+5	; 0x05
    3b10:	be 81       	ldd	r27, Y+6	; 0x06
    3b12:	bc 01       	movw	r22, r24
    3b14:	cd 01       	movw	r24, r26
    3b16:	2c 96       	adiw	r28, 0x0c	; 12
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	de bf       	out	0x3e, r29	; 62
    3b1c:	df 91       	pop	r29
    3b1e:	cf 91       	pop	r28
    3b20:	08 95       	ret

00003b22 <xEventGroupSetBits>:
    3b22:	cf 93       	push	r28
    3b24:	df 93       	push	r29
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	6d 97       	sbiw	r28, 0x1d	; 29
    3b2c:	cd bf       	out	0x3d, r28	; 61
    3b2e:	de bf       	out	0x3e, r29	; 62
    3b30:	88 8f       	std	Y+24, r24	; 0x18
    3b32:	99 8f       	std	Y+25, r25	; 0x19
    3b34:	4a 8f       	std	Y+26, r20	; 0x1a
    3b36:	5b 8f       	std	Y+27, r21	; 0x1b
    3b38:	6c 8f       	std	Y+28, r22	; 0x1c
    3b3a:	7d 8f       	std	Y+29, r23	; 0x1d
    3b3c:	1b 82       	std	Y+3, r1	; 0x03
    3b3e:	1c 82       	std	Y+4, r1	; 0x04
    3b40:	1d 82       	std	Y+5, r1	; 0x05
    3b42:	1e 82       	std	Y+6, r1	; 0x06
    3b44:	88 8d       	ldd	r24, Y+24	; 0x18
    3b46:	99 8d       	ldd	r25, Y+25	; 0x19
    3b48:	88 87       	std	Y+8, r24	; 0x08
    3b4a:	99 87       	std	Y+9, r25	; 0x09
    3b4c:	1f 82       	std	Y+7, r1	; 0x07
    3b4e:	88 85       	ldd	r24, Y+8	; 0x08
    3b50:	99 85       	ldd	r25, Y+9	; 0x09
    3b52:	04 96       	adiw	r24, 0x04	; 4
    3b54:	8a 87       	std	Y+10, r24	; 0x0a
    3b56:	9b 87       	std	Y+11, r25	; 0x0b
    3b58:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b5c:	03 96       	adiw	r24, 0x03	; 3
    3b5e:	8c 87       	std	Y+12, r24	; 0x0c
    3b60:	9d 87       	std	Y+13, r25	; 0x0d
    3b62:	0e 94 c5 2b 	call	0x578a	; 0x578a <vTaskSuspendAll>
    3b66:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b68:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	87 81       	ldd	r24, Z+7	; 0x07
    3b6e:	90 85       	ldd	r25, Z+8	; 0x08
    3b70:	89 83       	std	Y+1, r24	; 0x01
    3b72:	9a 83       	std	Y+2, r25	; 0x02
    3b74:	88 85       	ldd	r24, Y+8	; 0x08
    3b76:	99 85       	ldd	r25, Y+9	; 0x09
    3b78:	fc 01       	movw	r30, r24
    3b7a:	20 81       	ld	r18, Z
    3b7c:	31 81       	ldd	r19, Z+1	; 0x01
    3b7e:	42 81       	ldd	r20, Z+2	; 0x02
    3b80:	53 81       	ldd	r21, Z+3	; 0x03
    3b82:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b84:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b86:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3b88:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3b8a:	82 2b       	or	r24, r18
    3b8c:	93 2b       	or	r25, r19
    3b8e:	a4 2b       	or	r26, r20
    3b90:	b5 2b       	or	r27, r21
    3b92:	28 85       	ldd	r18, Y+8	; 0x08
    3b94:	39 85       	ldd	r19, Y+9	; 0x09
    3b96:	f9 01       	movw	r30, r18
    3b98:	80 83       	st	Z, r24
    3b9a:	91 83       	std	Z+1, r25	; 0x01
    3b9c:	a2 83       	std	Z+2, r26	; 0x02
    3b9e:	b3 83       	std	Z+3, r27	; 0x03
    3ba0:	95 c0       	rjmp	.+298    	; 0x3ccc <xEventGroupSetBits+0x1aa>
    3ba2:	89 81       	ldd	r24, Y+1	; 0x01
    3ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	84 81       	ldd	r24, Z+4	; 0x04
    3baa:	95 81       	ldd	r25, Z+5	; 0x05
    3bac:	8e 87       	std	Y+14, r24	; 0x0e
    3bae:	9f 87       	std	Y+15, r25	; 0x0f
    3bb0:	89 81       	ldd	r24, Y+1	; 0x01
    3bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb4:	fc 01       	movw	r30, r24
    3bb6:	80 81       	ld	r24, Z
    3bb8:	91 81       	ldd	r25, Z+1	; 0x01
    3bba:	a2 81       	ldd	r26, Z+2	; 0x02
    3bbc:	b3 81       	ldd	r27, Z+3	; 0x03
    3bbe:	88 8b       	std	Y+16, r24	; 0x10
    3bc0:	99 8b       	std	Y+17, r25	; 0x11
    3bc2:	aa 8b       	std	Y+18, r26	; 0x12
    3bc4:	bb 8b       	std	Y+19, r27	; 0x13
    3bc6:	1f 82       	std	Y+7, r1	; 0x07
    3bc8:	88 89       	ldd	r24, Y+16	; 0x10
    3bca:	99 89       	ldd	r25, Y+17	; 0x11
    3bcc:	aa 89       	ldd	r26, Y+18	; 0x12
    3bce:	bb 89       	ldd	r27, Y+19	; 0x13
    3bd0:	88 27       	eor	r24, r24
    3bd2:	99 27       	eor	r25, r25
    3bd4:	aa 27       	eor	r26, r26
    3bd6:	8c 8b       	std	Y+20, r24	; 0x14
    3bd8:	9d 8b       	std	Y+21, r25	; 0x15
    3bda:	ae 8b       	std	Y+22, r26	; 0x16
    3bdc:	bf 8b       	std	Y+23, r27	; 0x17
    3bde:	88 89       	ldd	r24, Y+16	; 0x10
    3be0:	99 89       	ldd	r25, Y+17	; 0x11
    3be2:	aa 89       	ldd	r26, Y+18	; 0x12
    3be4:	bb 89       	ldd	r27, Y+19	; 0x13
    3be6:	bb 27       	eor	r27, r27
    3be8:	88 8b       	std	Y+16, r24	; 0x10
    3bea:	99 8b       	std	Y+17, r25	; 0x11
    3bec:	aa 8b       	std	Y+18, r26	; 0x12
    3bee:	bb 8b       	std	Y+19, r27	; 0x13
    3bf0:	8c 89       	ldd	r24, Y+20	; 0x14
    3bf2:	9d 89       	ldd	r25, Y+21	; 0x15
    3bf4:	ae 89       	ldd	r26, Y+22	; 0x16
    3bf6:	bf 89       	ldd	r27, Y+23	; 0x17
    3bf8:	88 27       	eor	r24, r24
    3bfa:	99 27       	eor	r25, r25
    3bfc:	aa 27       	eor	r26, r26
    3bfe:	b4 70       	andi	r27, 0x04	; 4
    3c00:	89 2b       	or	r24, r25
    3c02:	8a 2b       	or	r24, r26
    3c04:	8b 2b       	or	r24, r27
    3c06:	b1 f4       	brne	.+44     	; 0x3c34 <xEventGroupSetBits+0x112>
    3c08:	88 85       	ldd	r24, Y+8	; 0x08
    3c0a:	99 85       	ldd	r25, Y+9	; 0x09
    3c0c:	fc 01       	movw	r30, r24
    3c0e:	20 81       	ld	r18, Z
    3c10:	31 81       	ldd	r19, Z+1	; 0x01
    3c12:	42 81       	ldd	r20, Z+2	; 0x02
    3c14:	53 81       	ldd	r21, Z+3	; 0x03
    3c16:	88 89       	ldd	r24, Y+16	; 0x10
    3c18:	99 89       	ldd	r25, Y+17	; 0x11
    3c1a:	aa 89       	ldd	r26, Y+18	; 0x12
    3c1c:	bb 89       	ldd	r27, Y+19	; 0x13
    3c1e:	82 23       	and	r24, r18
    3c20:	93 23       	and	r25, r19
    3c22:	a4 23       	and	r26, r20
    3c24:	b5 23       	and	r27, r21
    3c26:	89 2b       	or	r24, r25
    3c28:	8a 2b       	or	r24, r26
    3c2a:	8b 2b       	or	r24, r27
    3c2c:	e9 f0       	breq	.+58     	; 0x3c68 <xEventGroupSetBits+0x146>
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	8f 83       	std	Y+7, r24	; 0x07
    3c32:	1a c0       	rjmp	.+52     	; 0x3c68 <xEventGroupSetBits+0x146>
    3c34:	88 85       	ldd	r24, Y+8	; 0x08
    3c36:	99 85       	ldd	r25, Y+9	; 0x09
    3c38:	fc 01       	movw	r30, r24
    3c3a:	20 81       	ld	r18, Z
    3c3c:	31 81       	ldd	r19, Z+1	; 0x01
    3c3e:	42 81       	ldd	r20, Z+2	; 0x02
    3c40:	53 81       	ldd	r21, Z+3	; 0x03
    3c42:	88 89       	ldd	r24, Y+16	; 0x10
    3c44:	99 89       	ldd	r25, Y+17	; 0x11
    3c46:	aa 89       	ldd	r26, Y+18	; 0x12
    3c48:	bb 89       	ldd	r27, Y+19	; 0x13
    3c4a:	28 23       	and	r18, r24
    3c4c:	39 23       	and	r19, r25
    3c4e:	4a 23       	and	r20, r26
    3c50:	5b 23       	and	r21, r27
    3c52:	88 89       	ldd	r24, Y+16	; 0x10
    3c54:	99 89       	ldd	r25, Y+17	; 0x11
    3c56:	aa 89       	ldd	r26, Y+18	; 0x12
    3c58:	bb 89       	ldd	r27, Y+19	; 0x13
    3c5a:	28 17       	cp	r18, r24
    3c5c:	39 07       	cpc	r19, r25
    3c5e:	4a 07       	cpc	r20, r26
    3c60:	5b 07       	cpc	r21, r27
    3c62:	11 f4       	brne	.+4      	; 0x3c68 <xEventGroupSetBits+0x146>
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	8f 83       	std	Y+7, r24	; 0x07
    3c68:	8f 81       	ldd	r24, Y+7	; 0x07
    3c6a:	88 23       	and	r24, r24
    3c6c:	59 f1       	breq	.+86     	; 0x3cc4 <xEventGroupSetBits+0x1a2>
    3c6e:	8c 89       	ldd	r24, Y+20	; 0x14
    3c70:	9d 89       	ldd	r25, Y+21	; 0x15
    3c72:	ae 89       	ldd	r26, Y+22	; 0x16
    3c74:	bf 89       	ldd	r27, Y+23	; 0x17
    3c76:	88 27       	eor	r24, r24
    3c78:	99 27       	eor	r25, r25
    3c7a:	aa 27       	eor	r26, r26
    3c7c:	b1 70       	andi	r27, 0x01	; 1
    3c7e:	89 2b       	or	r24, r25
    3c80:	8a 2b       	or	r24, r26
    3c82:	8b 2b       	or	r24, r27
    3c84:	81 f0       	breq	.+32     	; 0x3ca6 <xEventGroupSetBits+0x184>
    3c86:	2b 81       	ldd	r18, Y+3	; 0x03
    3c88:	3c 81       	ldd	r19, Y+4	; 0x04
    3c8a:	4d 81       	ldd	r20, Y+5	; 0x05
    3c8c:	5e 81       	ldd	r21, Y+6	; 0x06
    3c8e:	88 89       	ldd	r24, Y+16	; 0x10
    3c90:	99 89       	ldd	r25, Y+17	; 0x11
    3c92:	aa 89       	ldd	r26, Y+18	; 0x12
    3c94:	bb 89       	ldd	r27, Y+19	; 0x13
    3c96:	82 2b       	or	r24, r18
    3c98:	93 2b       	or	r25, r19
    3c9a:	a4 2b       	or	r26, r20
    3c9c:	b5 2b       	or	r27, r21
    3c9e:	8b 83       	std	Y+3, r24	; 0x03
    3ca0:	9c 83       	std	Y+4, r25	; 0x04
    3ca2:	ad 83       	std	Y+5, r26	; 0x05
    3ca4:	be 83       	std	Y+6, r27	; 0x06
    3ca6:	88 85       	ldd	r24, Y+8	; 0x08
    3ca8:	99 85       	ldd	r25, Y+9	; 0x09
    3caa:	fc 01       	movw	r30, r24
    3cac:	80 81       	ld	r24, Z
    3cae:	91 81       	ldd	r25, Z+1	; 0x01
    3cb0:	a2 81       	ldd	r26, Z+2	; 0x02
    3cb2:	b3 81       	ldd	r27, Z+3	; 0x03
    3cb4:	b2 60       	ori	r27, 0x02	; 2
    3cb6:	29 81       	ldd	r18, Y+1	; 0x01
    3cb8:	3a 81       	ldd	r19, Y+2	; 0x02
    3cba:	ac 01       	movw	r20, r24
    3cbc:	bd 01       	movw	r22, r26
    3cbe:	c9 01       	movw	r24, r18
    3cc0:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <vTaskRemoveFromUnorderedEventList>
    3cc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3cc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cc8:	89 83       	std	Y+1, r24	; 0x01
    3cca:	9a 83       	std	Y+2, r25	; 0x02
    3ccc:	29 81       	ldd	r18, Y+1	; 0x01
    3cce:	3a 81       	ldd	r19, Y+2	; 0x02
    3cd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cd4:	28 17       	cp	r18, r24
    3cd6:	39 07       	cpc	r19, r25
    3cd8:	09 f0       	breq	.+2      	; 0x3cdc <xEventGroupSetBits+0x1ba>
    3cda:	63 cf       	rjmp	.-314    	; 0x3ba2 <xEventGroupSetBits+0x80>
    3cdc:	88 85       	ldd	r24, Y+8	; 0x08
    3cde:	99 85       	ldd	r25, Y+9	; 0x09
    3ce0:	fc 01       	movw	r30, r24
    3ce2:	20 81       	ld	r18, Z
    3ce4:	31 81       	ldd	r19, Z+1	; 0x01
    3ce6:	42 81       	ldd	r20, Z+2	; 0x02
    3ce8:	53 81       	ldd	r21, Z+3	; 0x03
    3cea:	8b 81       	ldd	r24, Y+3	; 0x03
    3cec:	9c 81       	ldd	r25, Y+4	; 0x04
    3cee:	ad 81       	ldd	r26, Y+5	; 0x05
    3cf0:	be 81       	ldd	r27, Y+6	; 0x06
    3cf2:	80 95       	com	r24
    3cf4:	90 95       	com	r25
    3cf6:	a0 95       	com	r26
    3cf8:	b0 95       	com	r27
    3cfa:	82 23       	and	r24, r18
    3cfc:	93 23       	and	r25, r19
    3cfe:	a4 23       	and	r26, r20
    3d00:	b5 23       	and	r27, r21
    3d02:	28 85       	ldd	r18, Y+8	; 0x08
    3d04:	39 85       	ldd	r19, Y+9	; 0x09
    3d06:	f9 01       	movw	r30, r18
    3d08:	80 83       	st	Z, r24
    3d0a:	91 83       	std	Z+1, r25	; 0x01
    3d0c:	a2 83       	std	Z+2, r26	; 0x02
    3d0e:	b3 83       	std	Z+3, r27	; 0x03
    3d10:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    3d14:	88 85       	ldd	r24, Y+8	; 0x08
    3d16:	99 85       	ldd	r25, Y+9	; 0x09
    3d18:	fc 01       	movw	r30, r24
    3d1a:	80 81       	ld	r24, Z
    3d1c:	91 81       	ldd	r25, Z+1	; 0x01
    3d1e:	a2 81       	ldd	r26, Z+2	; 0x02
    3d20:	b3 81       	ldd	r27, Z+3	; 0x03
    3d22:	bc 01       	movw	r22, r24
    3d24:	cd 01       	movw	r24, r26
    3d26:	6d 96       	adiw	r28, 0x1d	; 29
    3d28:	cd bf       	out	0x3d, r28	; 61
    3d2a:	de bf       	out	0x3e, r29	; 62
    3d2c:	df 91       	pop	r29
    3d2e:	cf 91       	pop	r28
    3d30:	08 95       	ret

00003d32 <vEventGroupSetBitsCallback>:
    3d32:	cf 93       	push	r28
    3d34:	df 93       	push	r29
    3d36:	00 d0       	rcall	.+0      	; 0x3d38 <vEventGroupSetBitsCallback+0x6>
    3d38:	00 d0       	rcall	.+0      	; 0x3d3a <vEventGroupSetBitsCallback+0x8>
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
    3d3e:	89 83       	std	Y+1, r24	; 0x01
    3d40:	9a 83       	std	Y+2, r25	; 0x02
    3d42:	4b 83       	std	Y+3, r20	; 0x03
    3d44:	5c 83       	std	Y+4, r21	; 0x04
    3d46:	6d 83       	std	Y+5, r22	; 0x05
    3d48:	7e 83       	std	Y+6, r23	; 0x06
    3d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d4e:	ad 81       	ldd	r26, Y+5	; 0x05
    3d50:	be 81       	ldd	r27, Y+6	; 0x06
    3d52:	29 81       	ldd	r18, Y+1	; 0x01
    3d54:	3a 81       	ldd	r19, Y+2	; 0x02
    3d56:	ac 01       	movw	r20, r24
    3d58:	bd 01       	movw	r22, r26
    3d5a:	c9 01       	movw	r24, r18
    3d5c:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <xEventGroupSetBits>
    3d60:	00 00       	nop
    3d62:	26 96       	adiw	r28, 0x06	; 6
    3d64:	cd bf       	out	0x3d, r28	; 61
    3d66:	de bf       	out	0x3e, r29	; 62
    3d68:	df 91       	pop	r29
    3d6a:	cf 91       	pop	r28
    3d6c:	08 95       	ret

00003d6e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    3d6e:	0f 93       	push	r16
    3d70:	cf 93       	push	r28
    3d72:	df 93       	push	r29
    3d74:	cd b7       	in	r28, 0x3d	; 61
    3d76:	de b7       	in	r29, 0x3e	; 62
    3d78:	2a 97       	sbiw	r28, 0x0a	; 10
    3d7a:	cd bf       	out	0x3d, r28	; 61
    3d7c:	de bf       	out	0x3e, r29	; 62
    3d7e:	6a 83       	std	Y+2, r22	; 0x02
    3d80:	7b 83       	std	Y+3, r23	; 0x03
    3d82:	8c 83       	std	Y+4, r24	; 0x04
    3d84:	9d 83       	std	Y+5, r25	; 0x05
    3d86:	2e 83       	std	Y+6, r18	; 0x06
    3d88:	3f 83       	std	Y+7, r19	; 0x07
    3d8a:	48 87       	std	Y+8, r20	; 0x08
    3d8c:	59 87       	std	Y+9, r21	; 0x09
    3d8e:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
    3d90:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    3d92:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d94:	88 23       	and	r24, r24
    3d96:	99 f4       	brne	.+38     	; 0x3dbe <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    3d98:	2a 81       	ldd	r18, Y+2	; 0x02
    3d9a:	3b 81       	ldd	r19, Y+3	; 0x03
    3d9c:	4c 81       	ldd	r20, Y+4	; 0x04
    3d9e:	5d 81       	ldd	r21, Y+5	; 0x05
    3da0:	8e 81       	ldd	r24, Y+6	; 0x06
    3da2:	9f 81       	ldd	r25, Y+7	; 0x07
    3da4:	a8 85       	ldd	r26, Y+8	; 0x08
    3da6:	b9 85       	ldd	r27, Y+9	; 0x09
    3da8:	82 23       	and	r24, r18
    3daa:	93 23       	and	r25, r19
    3dac:	a4 23       	and	r26, r20
    3dae:	b5 23       	and	r27, r21
    3db0:	89 2b       	or	r24, r25
    3db2:	8a 2b       	or	r24, r26
    3db4:	8b 2b       	or	r24, r27
    3db6:	d1 f0       	breq	.+52     	; 0x3dec <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	89 83       	std	Y+1, r24	; 0x01
    3dbc:	17 c0       	rjmp	.+46     	; 0x3dec <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    3dbe:	2a 81       	ldd	r18, Y+2	; 0x02
    3dc0:	3b 81       	ldd	r19, Y+3	; 0x03
    3dc2:	4c 81       	ldd	r20, Y+4	; 0x04
    3dc4:	5d 81       	ldd	r21, Y+5	; 0x05
    3dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    3dc8:	9f 81       	ldd	r25, Y+7	; 0x07
    3dca:	a8 85       	ldd	r26, Y+8	; 0x08
    3dcc:	b9 85       	ldd	r27, Y+9	; 0x09
    3dce:	28 23       	and	r18, r24
    3dd0:	39 23       	and	r19, r25
    3dd2:	4a 23       	and	r20, r26
    3dd4:	5b 23       	and	r21, r27
    3dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    3dd8:	9f 81       	ldd	r25, Y+7	; 0x07
    3dda:	a8 85       	ldd	r26, Y+8	; 0x08
    3ddc:	b9 85       	ldd	r27, Y+9	; 0x09
    3dde:	28 17       	cp	r18, r24
    3de0:	39 07       	cpc	r19, r25
    3de2:	4a 07       	cpc	r20, r26
    3de4:	5b 07       	cpc	r21, r27
    3de6:	11 f4       	brne	.+4      	; 0x3dec <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    3dec:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dee:	2a 96       	adiw	r28, 0x0a	; 10
    3df0:	cd bf       	out	0x3d, r28	; 61
    3df2:	de bf       	out	0x3e, r29	; 62
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	0f 91       	pop	r16
    3dfa:	08 95       	ret

00003dfc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
    3dfc:	0f 93       	push	r16
    3dfe:	1f 93       	push	r17
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	29 97       	sbiw	r28, 0x09	; 9
    3e0a:	cd bf       	out	0x3d, r28	; 61
    3e0c:	de bf       	out	0x3e, r29	; 62
    3e0e:	8a 83       	std	Y+2, r24	; 0x02
    3e10:	9b 83       	std	Y+3, r25	; 0x03
    3e12:	4c 83       	std	Y+4, r20	; 0x04
    3e14:	5d 83       	std	Y+5, r21	; 0x05
    3e16:	6e 83       	std	Y+6, r22	; 0x06
    3e18:	7f 83       	std	Y+7, r23	; 0x07
    3e1a:	28 87       	std	Y+8, r18	; 0x08
    3e1c:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
    3e1e:	28 85       	ldd	r18, Y+8	; 0x08
    3e20:	39 85       	ldd	r19, Y+9	; 0x09
    3e22:	8c 81       	ldd	r24, Y+4	; 0x04
    3e24:	9d 81       	ldd	r25, Y+5	; 0x05
    3e26:	ae 81       	ldd	r26, Y+6	; 0x06
    3e28:	bf 81       	ldd	r27, Y+7	; 0x07
    3e2a:	6a 81       	ldd	r22, Y+2	; 0x02
    3e2c:	7b 81       	ldd	r23, Y+3	; 0x03
    3e2e:	89 01       	movw	r16, r18
    3e30:	9c 01       	movw	r18, r24
    3e32:	ad 01       	movw	r20, r26
    3e34:	89 e9       	ldi	r24, 0x99	; 153
    3e36:	9e e1       	ldi	r25, 0x1E	; 30
    3e38:	0e 94 02 37 	call	0x6e04	; 0x6e04 <xTimerPendFunctionCallFromISR>
    3e3c:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    3e3e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3e40:	29 96       	adiw	r28, 0x09	; 9
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	de bf       	out	0x3e, r29	; 62
    3e46:	df 91       	pop	r29
    3e48:	cf 91       	pop	r28
    3e4a:	1f 91       	pop	r17
    3e4c:	0f 91       	pop	r16
    3e4e:	08 95       	ret

00003e50 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3e50:	cf 93       	push	r28
    3e52:	df 93       	push	r29
    3e54:	00 d0       	rcall	.+0      	; 0x3e56 <pvPortMalloc+0x6>
    3e56:	1f 92       	push	r1
    3e58:	cd b7       	in	r28, 0x3d	; 61
    3e5a:	de b7       	in	r29, 0x3e	; 62
    3e5c:	8b 83       	std	Y+3, r24	; 0x03
    3e5e:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
    3e60:	19 82       	std	Y+1, r1	; 0x01
    3e62:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    3e64:	0e 94 c5 2b 	call	0x578a	; 0x578a <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    3e68:	20 91 a4 2c 	lds	r18, 0x2CA4	; 0x802ca4 <xNextFreeByte>
    3e6c:	30 91 a5 2c 	lds	r19, 0x2CA5	; 0x802ca5 <xNextFreeByte+0x1>
    3e70:	8b 81       	ldd	r24, Y+3	; 0x03
    3e72:	9c 81       	ldd	r25, Y+4	; 0x04
    3e74:	82 0f       	add	r24, r18
    3e76:	93 1f       	adc	r25, r19
    3e78:	88 3b       	cpi	r24, 0xB8	; 184
    3e7a:	9b 40       	sbci	r25, 0x0B	; 11
    3e7c:	18 f5       	brcc	.+70     	; 0x3ec4 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    3e7e:	20 91 a4 2c 	lds	r18, 0x2CA4	; 0x802ca4 <xNextFreeByte>
    3e82:	30 91 a5 2c 	lds	r19, 0x2CA5	; 0x802ca5 <xNextFreeByte+0x1>
    3e86:	8b 81       	ldd	r24, Y+3	; 0x03
    3e88:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8a:	28 0f       	add	r18, r24
    3e8c:	39 1f       	adc	r19, r25
    3e8e:	80 91 a4 2c 	lds	r24, 0x2CA4	; 0x802ca4 <xNextFreeByte>
    3e92:	90 91 a5 2c 	lds	r25, 0x2CA5	; 0x802ca5 <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    3e96:	82 17       	cp	r24, r18
    3e98:	93 07       	cpc	r25, r19
    3e9a:	a0 f4       	brcc	.+40     	; 0x3ec4 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    3e9c:	80 91 a4 2c 	lds	r24, 0x2CA4	; 0x802ca4 <xNextFreeByte>
    3ea0:	90 91 a5 2c 	lds	r25, 0x2CA5	; 0x802ca5 <xNextFreeByte+0x1>
    3ea4:	84 51       	subi	r24, 0x14	; 20
    3ea6:	9f 4d       	sbci	r25, 0xDF	; 223
    3ea8:	89 83       	std	Y+1, r24	; 0x01
    3eaa:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
    3eac:	20 91 a4 2c 	lds	r18, 0x2CA4	; 0x802ca4 <xNextFreeByte>
    3eb0:	30 91 a5 2c 	lds	r19, 0x2CA5	; 0x802ca5 <xNextFreeByte+0x1>
    3eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb8:	82 0f       	add	r24, r18
    3eba:	93 1f       	adc	r25, r19
    3ebc:	80 93 a4 2c 	sts	0x2CA4, r24	; 0x802ca4 <xNextFreeByte>
    3ec0:	90 93 a5 2c 	sts	0x2CA5, r25	; 0x802ca5 <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
    3ec4:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    3ec8:	89 81       	ldd	r24, Y+1	; 0x01
    3eca:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3ecc:	24 96       	adiw	r28, 0x04	; 4
    3ece:	cd bf       	out	0x3d, r28	; 61
    3ed0:	de bf       	out	0x3e, r29	; 62
    3ed2:	df 91       	pop	r29
    3ed4:	cf 91       	pop	r28
    3ed6:	08 95       	ret

00003ed8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    3ed8:	cf 93       	push	r28
    3eda:	df 93       	push	r29
    3edc:	1f 92       	push	r1
    3ede:	1f 92       	push	r1
    3ee0:	cd b7       	in	r28, 0x3d	; 61
    3ee2:	de b7       	in	r29, 0x3e	; 62
    3ee4:	89 83       	std	Y+1, r24	; 0x01
    3ee6:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    3ee8:	00 00       	nop
    3eea:	0f 90       	pop	r0
    3eec:	0f 90       	pop	r0
    3eee:	df 91       	pop	r29
    3ef0:	cf 91       	pop	r28
    3ef2:	08 95       	ret

00003ef4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	1f 92       	push	r1
    3efa:	1f 92       	push	r1
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	89 83       	std	Y+1, r24	; 0x01
    3f02:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3f04:	89 81       	ldd	r24, Y+1	; 0x01
    3f06:	9a 81       	ldd	r25, Y+2	; 0x02
    3f08:	9c 01       	movw	r18, r24
    3f0a:	2d 5f       	subi	r18, 0xFD	; 253
    3f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f0e:	89 81       	ldd	r24, Y+1	; 0x01
    3f10:	9a 81       	ldd	r25, Y+2	; 0x02
    3f12:	fc 01       	movw	r30, r24
    3f14:	21 83       	std	Z+1, r18	; 0x01
    3f16:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3f18:	29 81       	ldd	r18, Y+1	; 0x01
    3f1a:	3a 81       	ldd	r19, Y+2	; 0x02
    3f1c:	8f ef       	ldi	r24, 0xFF	; 255
    3f1e:	9f ef       	ldi	r25, 0xFF	; 255
    3f20:	dc 01       	movw	r26, r24
    3f22:	f9 01       	movw	r30, r18
    3f24:	83 83       	std	Z+3, r24	; 0x03
    3f26:	94 83       	std	Z+4, r25	; 0x04
    3f28:	a5 83       	std	Z+5, r26	; 0x05
    3f2a:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3f2c:	89 81       	ldd	r24, Y+1	; 0x01
    3f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f30:	9c 01       	movw	r18, r24
    3f32:	2d 5f       	subi	r18, 0xFD	; 253
    3f34:	3f 4f       	sbci	r19, 0xFF	; 255
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3a:	fc 01       	movw	r30, r24
    3f3c:	27 83       	std	Z+7, r18	; 0x07
    3f3e:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3f40:	89 81       	ldd	r24, Y+1	; 0x01
    3f42:	9a 81       	ldd	r25, Y+2	; 0x02
    3f44:	9c 01       	movw	r18, r24
    3f46:	2d 5f       	subi	r18, 0xFD	; 253
    3f48:	3f 4f       	sbci	r19, 0xFF	; 255
    3f4a:	89 81       	ldd	r24, Y+1	; 0x01
    3f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4e:	fc 01       	movw	r30, r24
    3f50:	21 87       	std	Z+9, r18	; 0x09
    3f52:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    3f54:	89 81       	ldd	r24, Y+1	; 0x01
    3f56:	9a 81       	ldd	r25, Y+2	; 0x02
    3f58:	fc 01       	movw	r30, r24
    3f5a:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    3f5c:	00 00       	nop
    3f5e:	0f 90       	pop	r0
    3f60:	0f 90       	pop	r0
    3f62:	df 91       	pop	r29
    3f64:	cf 91       	pop	r28
    3f66:	08 95       	ret

00003f68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    3f68:	cf 93       	push	r28
    3f6a:	df 93       	push	r29
    3f6c:	1f 92       	push	r1
    3f6e:	1f 92       	push	r1
    3f70:	cd b7       	in	r28, 0x3d	; 61
    3f72:	de b7       	in	r29, 0x3e	; 62
    3f74:	89 83       	std	Y+1, r24	; 0x01
    3f76:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3f78:	89 81       	ldd	r24, Y+1	; 0x01
    3f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	12 86       	std	Z+10, r1	; 0x0a
    3f80:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    3f82:	00 00       	nop
    3f84:	0f 90       	pop	r0
    3f86:	0f 90       	pop	r0
    3f88:	df 91       	pop	r29
    3f8a:	cf 91       	pop	r28
    3f8c:	08 95       	ret

00003f8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	00 d0       	rcall	.+0      	; 0x3f94 <vListInsertEnd+0x6>
    3f94:	00 d0       	rcall	.+0      	; 0x3f96 <vListInsertEnd+0x8>
    3f96:	cd b7       	in	r28, 0x3d	; 61
    3f98:	de b7       	in	r29, 0x3e	; 62
    3f9a:	8b 83       	std	Y+3, r24	; 0x03
    3f9c:	9c 83       	std	Y+4, r25	; 0x04
    3f9e:	6d 83       	std	Y+5, r22	; 0x05
    3fa0:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
    3fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	81 81       	ldd	r24, Z+1	; 0x01
    3faa:	92 81       	ldd	r25, Z+2	; 0x02
    3fac:	89 83       	std	Y+1, r24	; 0x01
    3fae:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    3fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb4:	29 81       	ldd	r18, Y+1	; 0x01
    3fb6:	3a 81       	ldd	r19, Y+2	; 0x02
    3fb8:	fc 01       	movw	r30, r24
    3fba:	24 83       	std	Z+4, r18	; 0x04
    3fbc:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3fbe:	89 81       	ldd	r24, Y+1	; 0x01
    3fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	26 81       	ldd	r18, Z+6	; 0x06
    3fc6:	37 81       	ldd	r19, Z+7	; 0x07
    3fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fca:	9e 81       	ldd	r25, Y+6	; 0x06
    3fcc:	fc 01       	movw	r30, r24
    3fce:	26 83       	std	Z+6, r18	; 0x06
    3fd0:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3fd2:	89 81       	ldd	r24, Y+1	; 0x01
    3fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	86 81       	ldd	r24, Z+6	; 0x06
    3fda:	97 81       	ldd	r25, Z+7	; 0x07
    3fdc:	2d 81       	ldd	r18, Y+5	; 0x05
    3fde:	3e 81       	ldd	r19, Y+6	; 0x06
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	24 83       	std	Z+4, r18	; 0x04
    3fe4:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fea:	2d 81       	ldd	r18, Y+5	; 0x05
    3fec:	3e 81       	ldd	r19, Y+6	; 0x06
    3fee:	fc 01       	movw	r30, r24
    3ff0:	26 83       	std	Z+6, r18	; 0x06
    3ff2:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff8:	2b 81       	ldd	r18, Y+3	; 0x03
    3ffa:	3c 81       	ldd	r19, Y+4	; 0x04
    3ffc:	fc 01       	movw	r30, r24
    3ffe:	22 87       	std	Z+10, r18	; 0x0a
    4000:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    4002:	8b 81       	ldd	r24, Y+3	; 0x03
    4004:	9c 81       	ldd	r25, Y+4	; 0x04
    4006:	fc 01       	movw	r30, r24
    4008:	80 81       	ld	r24, Z
    400a:	21 e0       	ldi	r18, 0x01	; 1
    400c:	28 0f       	add	r18, r24
    400e:	8b 81       	ldd	r24, Y+3	; 0x03
    4010:	9c 81       	ldd	r25, Y+4	; 0x04
    4012:	fc 01       	movw	r30, r24
    4014:	20 83       	st	Z, r18
}
    4016:	00 00       	nop
    4018:	26 96       	adiw	r28, 0x06	; 6
    401a:	cd bf       	out	0x3d, r28	; 61
    401c:	de bf       	out	0x3e, r29	; 62
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	08 95       	ret

00004024 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    4024:	cf 93       	push	r28
    4026:	df 93       	push	r29
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
    402c:	2a 97       	sbiw	r28, 0x0a	; 10
    402e:	cd bf       	out	0x3d, r28	; 61
    4030:	de bf       	out	0x3e, r29	; 62
    4032:	8f 83       	std	Y+7, r24	; 0x07
    4034:	98 87       	std	Y+8, r25	; 0x08
    4036:	69 87       	std	Y+9, r22	; 0x09
    4038:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    403a:	89 85       	ldd	r24, Y+9	; 0x09
    403c:	9a 85       	ldd	r25, Y+10	; 0x0a
    403e:	fc 01       	movw	r30, r24
    4040:	80 81       	ld	r24, Z
    4042:	91 81       	ldd	r25, Z+1	; 0x01
    4044:	a2 81       	ldd	r26, Z+2	; 0x02
    4046:	b3 81       	ldd	r27, Z+3	; 0x03
    4048:	8b 83       	std	Y+3, r24	; 0x03
    404a:	9c 83       	std	Y+4, r25	; 0x04
    404c:	ad 83       	std	Y+5, r26	; 0x05
    404e:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    4050:	8b 81       	ldd	r24, Y+3	; 0x03
    4052:	9c 81       	ldd	r25, Y+4	; 0x04
    4054:	ad 81       	ldd	r26, Y+5	; 0x05
    4056:	be 81       	ldd	r27, Y+6	; 0x06
    4058:	8f 3f       	cpi	r24, 0xFF	; 255
    405a:	9f 4f       	sbci	r25, 0xFF	; 255
    405c:	af 4f       	sbci	r26, 0xFF	; 255
    405e:	bf 4f       	sbci	r27, 0xFF	; 255
    4060:	41 f4       	brne	.+16     	; 0x4072 <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    4062:	8f 81       	ldd	r24, Y+7	; 0x07
    4064:	98 85       	ldd	r25, Y+8	; 0x08
    4066:	fc 01       	movw	r30, r24
    4068:	81 85       	ldd	r24, Z+9	; 0x09
    406a:	92 85       	ldd	r25, Z+10	; 0x0a
    406c:	89 83       	std	Y+1, r24	; 0x01
    406e:	9a 83       	std	Y+2, r25	; 0x02
    4070:	20 c0       	rjmp	.+64     	; 0x40b2 <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4072:	8f 81       	ldd	r24, Y+7	; 0x07
    4074:	98 85       	ldd	r25, Y+8	; 0x08
    4076:	03 96       	adiw	r24, 0x03	; 3
    4078:	89 83       	std	Y+1, r24	; 0x01
    407a:	9a 83       	std	Y+2, r25	; 0x02
    407c:	07 c0       	rjmp	.+14     	; 0x408c <vListInsert+0x68>
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	9a 81       	ldd	r25, Y+2	; 0x02
    4082:	fc 01       	movw	r30, r24
    4084:	84 81       	ldd	r24, Z+4	; 0x04
    4086:	95 81       	ldd	r25, Z+5	; 0x05
    4088:	89 83       	std	Y+1, r24	; 0x01
    408a:	9a 83       	std	Y+2, r25	; 0x02
    408c:	89 81       	ldd	r24, Y+1	; 0x01
    408e:	9a 81       	ldd	r25, Y+2	; 0x02
    4090:	fc 01       	movw	r30, r24
    4092:	84 81       	ldd	r24, Z+4	; 0x04
    4094:	95 81       	ldd	r25, Z+5	; 0x05
    4096:	fc 01       	movw	r30, r24
    4098:	20 81       	ld	r18, Z
    409a:	31 81       	ldd	r19, Z+1	; 0x01
    409c:	42 81       	ldd	r20, Z+2	; 0x02
    409e:	53 81       	ldd	r21, Z+3	; 0x03
    40a0:	8b 81       	ldd	r24, Y+3	; 0x03
    40a2:	9c 81       	ldd	r25, Y+4	; 0x04
    40a4:	ad 81       	ldd	r26, Y+5	; 0x05
    40a6:	be 81       	ldd	r27, Y+6	; 0x06
    40a8:	82 17       	cp	r24, r18
    40aa:	93 07       	cpc	r25, r19
    40ac:	a4 07       	cpc	r26, r20
    40ae:	b5 07       	cpc	r27, r21
    40b0:	30 f7       	brcc	.-52     	; 0x407e <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    40b2:	89 81       	ldd	r24, Y+1	; 0x01
    40b4:	9a 81       	ldd	r25, Y+2	; 0x02
    40b6:	fc 01       	movw	r30, r24
    40b8:	24 81       	ldd	r18, Z+4	; 0x04
    40ba:	35 81       	ldd	r19, Z+5	; 0x05
    40bc:	89 85       	ldd	r24, Y+9	; 0x09
    40be:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c0:	fc 01       	movw	r30, r24
    40c2:	24 83       	std	Z+4, r18	; 0x04
    40c4:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    40c6:	89 85       	ldd	r24, Y+9	; 0x09
    40c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ca:	fc 01       	movw	r30, r24
    40cc:	84 81       	ldd	r24, Z+4	; 0x04
    40ce:	95 81       	ldd	r25, Z+5	; 0x05
    40d0:	29 85       	ldd	r18, Y+9	; 0x09
    40d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    40d4:	fc 01       	movw	r30, r24
    40d6:	26 83       	std	Z+6, r18	; 0x06
    40d8:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
    40da:	89 85       	ldd	r24, Y+9	; 0x09
    40dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    40de:	29 81       	ldd	r18, Y+1	; 0x01
    40e0:	3a 81       	ldd	r19, Y+2	; 0x02
    40e2:	fc 01       	movw	r30, r24
    40e4:	26 83       	std	Z+6, r18	; 0x06
    40e6:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	9a 81       	ldd	r25, Y+2	; 0x02
    40ec:	29 85       	ldd	r18, Y+9	; 0x09
    40ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    40f0:	fc 01       	movw	r30, r24
    40f2:	24 83       	std	Z+4, r18	; 0x04
    40f4:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    40f6:	89 85       	ldd	r24, Y+9	; 0x09
    40f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40fa:	2f 81       	ldd	r18, Y+7	; 0x07
    40fc:	38 85       	ldd	r19, Y+8	; 0x08
    40fe:	fc 01       	movw	r30, r24
    4100:	22 87       	std	Z+10, r18	; 0x0a
    4102:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    4104:	8f 81       	ldd	r24, Y+7	; 0x07
    4106:	98 85       	ldd	r25, Y+8	; 0x08
    4108:	fc 01       	movw	r30, r24
    410a:	80 81       	ld	r24, Z
    410c:	21 e0       	ldi	r18, 0x01	; 1
    410e:	28 0f       	add	r18, r24
    4110:	8f 81       	ldd	r24, Y+7	; 0x07
    4112:	98 85       	ldd	r25, Y+8	; 0x08
    4114:	fc 01       	movw	r30, r24
    4116:	20 83       	st	Z, r18
}
    4118:	00 00       	nop
    411a:	2a 96       	adiw	r28, 0x0a	; 10
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	de bf       	out	0x3e, r29	; 62
    4120:	df 91       	pop	r29
    4122:	cf 91       	pop	r28
    4124:	08 95       	ret

00004126 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	00 d0       	rcall	.+0      	; 0x412c <uxListRemove+0x6>
    412c:	1f 92       	push	r1
    412e:	cd b7       	in	r28, 0x3d	; 61
    4130:	de b7       	in	r29, 0x3e	; 62
    4132:	8b 83       	std	Y+3, r24	; 0x03
    4134:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    4136:	8b 81       	ldd	r24, Y+3	; 0x03
    4138:	9c 81       	ldd	r25, Y+4	; 0x04
    413a:	fc 01       	movw	r30, r24
    413c:	82 85       	ldd	r24, Z+10	; 0x0a
    413e:	93 85       	ldd	r25, Z+11	; 0x0b
    4140:	89 83       	std	Y+1, r24	; 0x01
    4142:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4144:	8b 81       	ldd	r24, Y+3	; 0x03
    4146:	9c 81       	ldd	r25, Y+4	; 0x04
    4148:	fc 01       	movw	r30, r24
    414a:	84 81       	ldd	r24, Z+4	; 0x04
    414c:	95 81       	ldd	r25, Z+5	; 0x05
    414e:	2b 81       	ldd	r18, Y+3	; 0x03
    4150:	3c 81       	ldd	r19, Y+4	; 0x04
    4152:	f9 01       	movw	r30, r18
    4154:	26 81       	ldd	r18, Z+6	; 0x06
    4156:	37 81       	ldd	r19, Z+7	; 0x07
    4158:	fc 01       	movw	r30, r24
    415a:	26 83       	std	Z+6, r18	; 0x06
    415c:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    415e:	8b 81       	ldd	r24, Y+3	; 0x03
    4160:	9c 81       	ldd	r25, Y+4	; 0x04
    4162:	fc 01       	movw	r30, r24
    4164:	86 81       	ldd	r24, Z+6	; 0x06
    4166:	97 81       	ldd	r25, Z+7	; 0x07
    4168:	2b 81       	ldd	r18, Y+3	; 0x03
    416a:	3c 81       	ldd	r19, Y+4	; 0x04
    416c:	f9 01       	movw	r30, r18
    416e:	24 81       	ldd	r18, Z+4	; 0x04
    4170:	35 81       	ldd	r19, Z+5	; 0x05
    4172:	fc 01       	movw	r30, r24
    4174:	24 83       	std	Z+4, r18	; 0x04
    4176:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    4178:	89 81       	ldd	r24, Y+1	; 0x01
    417a:	9a 81       	ldd	r25, Y+2	; 0x02
    417c:	fc 01       	movw	r30, r24
    417e:	21 81       	ldd	r18, Z+1	; 0x01
    4180:	32 81       	ldd	r19, Z+2	; 0x02
    4182:	8b 81       	ldd	r24, Y+3	; 0x03
    4184:	9c 81       	ldd	r25, Y+4	; 0x04
    4186:	28 17       	cp	r18, r24
    4188:	39 07       	cpc	r19, r25
    418a:	51 f4       	brne	.+20     	; 0x41a0 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    418c:	8b 81       	ldd	r24, Y+3	; 0x03
    418e:	9c 81       	ldd	r25, Y+4	; 0x04
    4190:	fc 01       	movw	r30, r24
    4192:	26 81       	ldd	r18, Z+6	; 0x06
    4194:	37 81       	ldd	r19, Z+7	; 0x07
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	9a 81       	ldd	r25, Y+2	; 0x02
    419a:	fc 01       	movw	r30, r24
    419c:	21 83       	std	Z+1, r18	; 0x01
    419e:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    41a0:	8b 81       	ldd	r24, Y+3	; 0x03
    41a2:	9c 81       	ldd	r25, Y+4	; 0x04
    41a4:	fc 01       	movw	r30, r24
    41a6:	12 86       	std	Z+10, r1	; 0x0a
    41a8:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	9a 81       	ldd	r25, Y+2	; 0x02
    41ae:	fc 01       	movw	r30, r24
    41b0:	80 81       	ld	r24, Z
    41b2:	2f ef       	ldi	r18, 0xFF	; 255
    41b4:	28 0f       	add	r18, r24
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ba:	fc 01       	movw	r30, r24
    41bc:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    41be:	89 81       	ldd	r24, Y+1	; 0x01
    41c0:	9a 81       	ldd	r25, Y+2	; 0x02
    41c2:	fc 01       	movw	r30, r24
    41c4:	80 81       	ld	r24, Z
}
    41c6:	24 96       	adiw	r28, 0x04	; 4
    41c8:	cd bf       	out	0x3d, r28	; 61
    41ca:	de bf       	out	0x3e, r29	; 62
    41cc:	df 91       	pop	r29
    41ce:	cf 91       	pop	r28
    41d0:	08 95       	ret

000041d2 <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    41d2:	1f 93       	push	r17
    41d4:	cf 93       	push	r28
    41d6:	df 93       	push	r29
    41d8:	cd b7       	in	r28, 0x3d	; 61
    41da:	de b7       	in	r29, 0x3e	; 62
    41dc:	80 ea       	ldi	r24, 0xA0	; 160
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	fc 01       	movw	r30, r24
    41e2:	12 81       	ldd	r17, Z+2	; 0x02
    41e4:	80 ea       	ldi	r24, 0xA0	; 160
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	20 ea       	ldi	r18, 0xA0	; 160
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	f9 01       	movw	r30, r18
    41ee:	22 81       	ldd	r18, Z+2	; 0x02
    41f0:	28 7f       	andi	r18, 0xF8	; 248
    41f2:	fc 01       	movw	r30, r24
    41f4:	22 83       	std	Z+2, r18	; 0x02
    41f6:	81 2f       	mov	r24, r17
    41f8:	df 91       	pop	r29
    41fa:	cf 91       	pop	r28
    41fc:	1f 91       	pop	r17
    41fe:	08 95       	ret

00004200 <pxPortInitialiseStack>:
    4200:	cf 93       	push	r28
    4202:	df 93       	push	r29
    4204:	cd b7       	in	r28, 0x3d	; 61
    4206:	de b7       	in	r29, 0x3e	; 62
    4208:	2a 97       	sbiw	r28, 0x0a	; 10
    420a:	cd bf       	out	0x3d, r28	; 61
    420c:	de bf       	out	0x3e, r29	; 62
    420e:	8d 83       	std	Y+5, r24	; 0x05
    4210:	9e 83       	std	Y+6, r25	; 0x06
    4212:	6f 83       	std	Y+7, r22	; 0x07
    4214:	78 87       	std	Y+8, r23	; 0x08
    4216:	49 87       	std	Y+9, r20	; 0x09
    4218:	5a 87       	std	Y+10, r21	; 0x0a
    421a:	8d 81       	ldd	r24, Y+5	; 0x05
    421c:	9e 81       	ldd	r25, Y+6	; 0x06
    421e:	21 e1       	ldi	r18, 0x11	; 17
    4220:	fc 01       	movw	r30, r24
    4222:	20 83       	st	Z, r18
    4224:	8d 81       	ldd	r24, Y+5	; 0x05
    4226:	9e 81       	ldd	r25, Y+6	; 0x06
    4228:	01 97       	sbiw	r24, 0x01	; 1
    422a:	8d 83       	std	Y+5, r24	; 0x05
    422c:	9e 83       	std	Y+6, r25	; 0x06
    422e:	8d 81       	ldd	r24, Y+5	; 0x05
    4230:	9e 81       	ldd	r25, Y+6	; 0x06
    4232:	22 e2       	ldi	r18, 0x22	; 34
    4234:	fc 01       	movw	r30, r24
    4236:	20 83       	st	Z, r18
    4238:	8d 81       	ldd	r24, Y+5	; 0x05
    423a:	9e 81       	ldd	r25, Y+6	; 0x06
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	8d 83       	std	Y+5, r24	; 0x05
    4240:	9e 83       	std	Y+6, r25	; 0x06
    4242:	8d 81       	ldd	r24, Y+5	; 0x05
    4244:	9e 81       	ldd	r25, Y+6	; 0x06
    4246:	23 e3       	ldi	r18, 0x33	; 51
    4248:	fc 01       	movw	r30, r24
    424a:	20 83       	st	Z, r18
    424c:	8d 81       	ldd	r24, Y+5	; 0x05
    424e:	9e 81       	ldd	r25, Y+6	; 0x06
    4250:	01 97       	sbiw	r24, 0x01	; 1
    4252:	8d 83       	std	Y+5, r24	; 0x05
    4254:	9e 83       	std	Y+6, r25	; 0x06
    4256:	8f 81       	ldd	r24, Y+7	; 0x07
    4258:	98 85       	ldd	r25, Y+8	; 0x08
    425a:	cc 01       	movw	r24, r24
    425c:	a0 e0       	ldi	r26, 0x00	; 0
    425e:	b0 e0       	ldi	r27, 0x00	; 0
    4260:	89 83       	std	Y+1, r24	; 0x01
    4262:	9a 83       	std	Y+2, r25	; 0x02
    4264:	ab 83       	std	Y+3, r26	; 0x03
    4266:	bc 83       	std	Y+4, r27	; 0x04
    4268:	29 81       	ldd	r18, Y+1	; 0x01
    426a:	8d 81       	ldd	r24, Y+5	; 0x05
    426c:	9e 81       	ldd	r25, Y+6	; 0x06
    426e:	fc 01       	movw	r30, r24
    4270:	20 83       	st	Z, r18
    4272:	8d 81       	ldd	r24, Y+5	; 0x05
    4274:	9e 81       	ldd	r25, Y+6	; 0x06
    4276:	01 97       	sbiw	r24, 0x01	; 1
    4278:	8d 83       	std	Y+5, r24	; 0x05
    427a:	9e 83       	std	Y+6, r25	; 0x06
    427c:	89 81       	ldd	r24, Y+1	; 0x01
    427e:	9a 81       	ldd	r25, Y+2	; 0x02
    4280:	ab 81       	ldd	r26, Y+3	; 0x03
    4282:	bc 81       	ldd	r27, Y+4	; 0x04
    4284:	89 2f       	mov	r24, r25
    4286:	9a 2f       	mov	r25, r26
    4288:	ab 2f       	mov	r26, r27
    428a:	bb 27       	eor	r27, r27
    428c:	89 83       	std	Y+1, r24	; 0x01
    428e:	9a 83       	std	Y+2, r25	; 0x02
    4290:	ab 83       	std	Y+3, r26	; 0x03
    4292:	bc 83       	std	Y+4, r27	; 0x04
    4294:	29 81       	ldd	r18, Y+1	; 0x01
    4296:	8d 81       	ldd	r24, Y+5	; 0x05
    4298:	9e 81       	ldd	r25, Y+6	; 0x06
    429a:	fc 01       	movw	r30, r24
    429c:	20 83       	st	Z, r18
    429e:	8d 81       	ldd	r24, Y+5	; 0x05
    42a0:	9e 81       	ldd	r25, Y+6	; 0x06
    42a2:	01 97       	sbiw	r24, 0x01	; 1
    42a4:	8d 83       	std	Y+5, r24	; 0x05
    42a6:	9e 83       	std	Y+6, r25	; 0x06
    42a8:	89 81       	ldd	r24, Y+1	; 0x01
    42aa:	9a 81       	ldd	r25, Y+2	; 0x02
    42ac:	ab 81       	ldd	r26, Y+3	; 0x03
    42ae:	bc 81       	ldd	r27, Y+4	; 0x04
    42b0:	89 2f       	mov	r24, r25
    42b2:	9a 2f       	mov	r25, r26
    42b4:	ab 2f       	mov	r26, r27
    42b6:	bb 27       	eor	r27, r27
    42b8:	89 83       	std	Y+1, r24	; 0x01
    42ba:	9a 83       	std	Y+2, r25	; 0x02
    42bc:	ab 83       	std	Y+3, r26	; 0x03
    42be:	bc 83       	std	Y+4, r27	; 0x04
    42c0:	29 81       	ldd	r18, Y+1	; 0x01
    42c2:	8d 81       	ldd	r24, Y+5	; 0x05
    42c4:	9e 81       	ldd	r25, Y+6	; 0x06
    42c6:	fc 01       	movw	r30, r24
    42c8:	20 83       	st	Z, r18
    42ca:	8d 81       	ldd	r24, Y+5	; 0x05
    42cc:	9e 81       	ldd	r25, Y+6	; 0x06
    42ce:	01 97       	sbiw	r24, 0x01	; 1
    42d0:	8d 83       	std	Y+5, r24	; 0x05
    42d2:	9e 83       	std	Y+6, r25	; 0x06
    42d4:	8d 81       	ldd	r24, Y+5	; 0x05
    42d6:	9e 81       	ldd	r25, Y+6	; 0x06
    42d8:	21 e3       	ldi	r18, 0x31	; 49
    42da:	fc 01       	movw	r30, r24
    42dc:	20 83       	st	Z, r18
    42de:	8d 81       	ldd	r24, Y+5	; 0x05
    42e0:	9e 81       	ldd	r25, Y+6	; 0x06
    42e2:	01 97       	sbiw	r24, 0x01	; 1
    42e4:	8d 83       	std	Y+5, r24	; 0x05
    42e6:	9e 83       	std	Y+6, r25	; 0x06
    42e8:	8d 81       	ldd	r24, Y+5	; 0x05
    42ea:	9e 81       	ldd	r25, Y+6	; 0x06
    42ec:	20 e8       	ldi	r18, 0x80	; 128
    42ee:	fc 01       	movw	r30, r24
    42f0:	20 83       	st	Z, r18
    42f2:	8d 81       	ldd	r24, Y+5	; 0x05
    42f4:	9e 81       	ldd	r25, Y+6	; 0x06
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	8d 83       	std	Y+5, r24	; 0x05
    42fa:	9e 83       	std	Y+6, r25	; 0x06
    42fc:	8d 81       	ldd	r24, Y+5	; 0x05
    42fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4300:	27 e8       	ldi	r18, 0x87	; 135
    4302:	fc 01       	movw	r30, r24
    4304:	20 83       	st	Z, r18
    4306:	8d 81       	ldd	r24, Y+5	; 0x05
    4308:	9e 81       	ldd	r25, Y+6	; 0x06
    430a:	01 97       	sbiw	r24, 0x01	; 1
    430c:	8d 83       	std	Y+5, r24	; 0x05
    430e:	9e 83       	std	Y+6, r25	; 0x06
    4310:	8d 81       	ldd	r24, Y+5	; 0x05
    4312:	9e 81       	ldd	r25, Y+6	; 0x06
    4314:	fc 01       	movw	r30, r24
    4316:	10 82       	st	Z, r1
    4318:	8d 81       	ldd	r24, Y+5	; 0x05
    431a:	9e 81       	ldd	r25, Y+6	; 0x06
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	8d 83       	std	Y+5, r24	; 0x05
    4320:	9e 83       	std	Y+6, r25	; 0x06
    4322:	8d 81       	ldd	r24, Y+5	; 0x05
    4324:	9e 81       	ldd	r25, Y+6	; 0x06
    4326:	fc 01       	movw	r30, r24
    4328:	10 82       	st	Z, r1
    432a:	8d 81       	ldd	r24, Y+5	; 0x05
    432c:	9e 81       	ldd	r25, Y+6	; 0x06
    432e:	01 97       	sbiw	r24, 0x01	; 1
    4330:	8d 83       	std	Y+5, r24	; 0x05
    4332:	9e 83       	std	Y+6, r25	; 0x06
    4334:	8d 81       	ldd	r24, Y+5	; 0x05
    4336:	9e 81       	ldd	r25, Y+6	; 0x06
    4338:	22 e0       	ldi	r18, 0x02	; 2
    433a:	fc 01       	movw	r30, r24
    433c:	20 83       	st	Z, r18
    433e:	8d 81       	ldd	r24, Y+5	; 0x05
    4340:	9e 81       	ldd	r25, Y+6	; 0x06
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	8d 83       	std	Y+5, r24	; 0x05
    4346:	9e 83       	std	Y+6, r25	; 0x06
    4348:	8d 81       	ldd	r24, Y+5	; 0x05
    434a:	9e 81       	ldd	r25, Y+6	; 0x06
    434c:	23 e0       	ldi	r18, 0x03	; 3
    434e:	fc 01       	movw	r30, r24
    4350:	20 83       	st	Z, r18
    4352:	8d 81       	ldd	r24, Y+5	; 0x05
    4354:	9e 81       	ldd	r25, Y+6	; 0x06
    4356:	01 97       	sbiw	r24, 0x01	; 1
    4358:	8d 83       	std	Y+5, r24	; 0x05
    435a:	9e 83       	std	Y+6, r25	; 0x06
    435c:	8d 81       	ldd	r24, Y+5	; 0x05
    435e:	9e 81       	ldd	r25, Y+6	; 0x06
    4360:	24 e0       	ldi	r18, 0x04	; 4
    4362:	fc 01       	movw	r30, r24
    4364:	20 83       	st	Z, r18
    4366:	8d 81       	ldd	r24, Y+5	; 0x05
    4368:	9e 81       	ldd	r25, Y+6	; 0x06
    436a:	01 97       	sbiw	r24, 0x01	; 1
    436c:	8d 83       	std	Y+5, r24	; 0x05
    436e:	9e 83       	std	Y+6, r25	; 0x06
    4370:	8d 81       	ldd	r24, Y+5	; 0x05
    4372:	9e 81       	ldd	r25, Y+6	; 0x06
    4374:	25 e0       	ldi	r18, 0x05	; 5
    4376:	fc 01       	movw	r30, r24
    4378:	20 83       	st	Z, r18
    437a:	8d 81       	ldd	r24, Y+5	; 0x05
    437c:	9e 81       	ldd	r25, Y+6	; 0x06
    437e:	01 97       	sbiw	r24, 0x01	; 1
    4380:	8d 83       	std	Y+5, r24	; 0x05
    4382:	9e 83       	std	Y+6, r25	; 0x06
    4384:	8d 81       	ldd	r24, Y+5	; 0x05
    4386:	9e 81       	ldd	r25, Y+6	; 0x06
    4388:	26 e0       	ldi	r18, 0x06	; 6
    438a:	fc 01       	movw	r30, r24
    438c:	20 83       	st	Z, r18
    438e:	8d 81       	ldd	r24, Y+5	; 0x05
    4390:	9e 81       	ldd	r25, Y+6	; 0x06
    4392:	01 97       	sbiw	r24, 0x01	; 1
    4394:	8d 83       	std	Y+5, r24	; 0x05
    4396:	9e 83       	std	Y+6, r25	; 0x06
    4398:	8d 81       	ldd	r24, Y+5	; 0x05
    439a:	9e 81       	ldd	r25, Y+6	; 0x06
    439c:	27 e0       	ldi	r18, 0x07	; 7
    439e:	fc 01       	movw	r30, r24
    43a0:	20 83       	st	Z, r18
    43a2:	8d 81       	ldd	r24, Y+5	; 0x05
    43a4:	9e 81       	ldd	r25, Y+6	; 0x06
    43a6:	01 97       	sbiw	r24, 0x01	; 1
    43a8:	8d 83       	std	Y+5, r24	; 0x05
    43aa:	9e 83       	std	Y+6, r25	; 0x06
    43ac:	8d 81       	ldd	r24, Y+5	; 0x05
    43ae:	9e 81       	ldd	r25, Y+6	; 0x06
    43b0:	28 e0       	ldi	r18, 0x08	; 8
    43b2:	fc 01       	movw	r30, r24
    43b4:	20 83       	st	Z, r18
    43b6:	8d 81       	ldd	r24, Y+5	; 0x05
    43b8:	9e 81       	ldd	r25, Y+6	; 0x06
    43ba:	01 97       	sbiw	r24, 0x01	; 1
    43bc:	8d 83       	std	Y+5, r24	; 0x05
    43be:	9e 83       	std	Y+6, r25	; 0x06
    43c0:	8d 81       	ldd	r24, Y+5	; 0x05
    43c2:	9e 81       	ldd	r25, Y+6	; 0x06
    43c4:	29 e0       	ldi	r18, 0x09	; 9
    43c6:	fc 01       	movw	r30, r24
    43c8:	20 83       	st	Z, r18
    43ca:	8d 81       	ldd	r24, Y+5	; 0x05
    43cc:	9e 81       	ldd	r25, Y+6	; 0x06
    43ce:	01 97       	sbiw	r24, 0x01	; 1
    43d0:	8d 83       	std	Y+5, r24	; 0x05
    43d2:	9e 83       	std	Y+6, r25	; 0x06
    43d4:	8d 81       	ldd	r24, Y+5	; 0x05
    43d6:	9e 81       	ldd	r25, Y+6	; 0x06
    43d8:	20 e1       	ldi	r18, 0x10	; 16
    43da:	fc 01       	movw	r30, r24
    43dc:	20 83       	st	Z, r18
    43de:	8d 81       	ldd	r24, Y+5	; 0x05
    43e0:	9e 81       	ldd	r25, Y+6	; 0x06
    43e2:	01 97       	sbiw	r24, 0x01	; 1
    43e4:	8d 83       	std	Y+5, r24	; 0x05
    43e6:	9e 83       	std	Y+6, r25	; 0x06
    43e8:	8d 81       	ldd	r24, Y+5	; 0x05
    43ea:	9e 81       	ldd	r25, Y+6	; 0x06
    43ec:	21 e1       	ldi	r18, 0x11	; 17
    43ee:	fc 01       	movw	r30, r24
    43f0:	20 83       	st	Z, r18
    43f2:	8d 81       	ldd	r24, Y+5	; 0x05
    43f4:	9e 81       	ldd	r25, Y+6	; 0x06
    43f6:	01 97       	sbiw	r24, 0x01	; 1
    43f8:	8d 83       	std	Y+5, r24	; 0x05
    43fa:	9e 83       	std	Y+6, r25	; 0x06
    43fc:	8d 81       	ldd	r24, Y+5	; 0x05
    43fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4400:	22 e1       	ldi	r18, 0x12	; 18
    4402:	fc 01       	movw	r30, r24
    4404:	20 83       	st	Z, r18
    4406:	8d 81       	ldd	r24, Y+5	; 0x05
    4408:	9e 81       	ldd	r25, Y+6	; 0x06
    440a:	01 97       	sbiw	r24, 0x01	; 1
    440c:	8d 83       	std	Y+5, r24	; 0x05
    440e:	9e 83       	std	Y+6, r25	; 0x06
    4410:	8d 81       	ldd	r24, Y+5	; 0x05
    4412:	9e 81       	ldd	r25, Y+6	; 0x06
    4414:	23 e1       	ldi	r18, 0x13	; 19
    4416:	fc 01       	movw	r30, r24
    4418:	20 83       	st	Z, r18
    441a:	8d 81       	ldd	r24, Y+5	; 0x05
    441c:	9e 81       	ldd	r25, Y+6	; 0x06
    441e:	01 97       	sbiw	r24, 0x01	; 1
    4420:	8d 83       	std	Y+5, r24	; 0x05
    4422:	9e 83       	std	Y+6, r25	; 0x06
    4424:	8d 81       	ldd	r24, Y+5	; 0x05
    4426:	9e 81       	ldd	r25, Y+6	; 0x06
    4428:	24 e1       	ldi	r18, 0x14	; 20
    442a:	fc 01       	movw	r30, r24
    442c:	20 83       	st	Z, r18
    442e:	8d 81       	ldd	r24, Y+5	; 0x05
    4430:	9e 81       	ldd	r25, Y+6	; 0x06
    4432:	01 97       	sbiw	r24, 0x01	; 1
    4434:	8d 83       	std	Y+5, r24	; 0x05
    4436:	9e 83       	std	Y+6, r25	; 0x06
    4438:	8d 81       	ldd	r24, Y+5	; 0x05
    443a:	9e 81       	ldd	r25, Y+6	; 0x06
    443c:	25 e1       	ldi	r18, 0x15	; 21
    443e:	fc 01       	movw	r30, r24
    4440:	20 83       	st	Z, r18
    4442:	8d 81       	ldd	r24, Y+5	; 0x05
    4444:	9e 81       	ldd	r25, Y+6	; 0x06
    4446:	01 97       	sbiw	r24, 0x01	; 1
    4448:	8d 83       	std	Y+5, r24	; 0x05
    444a:	9e 83       	std	Y+6, r25	; 0x06
    444c:	8d 81       	ldd	r24, Y+5	; 0x05
    444e:	9e 81       	ldd	r25, Y+6	; 0x06
    4450:	26 e1       	ldi	r18, 0x16	; 22
    4452:	fc 01       	movw	r30, r24
    4454:	20 83       	st	Z, r18
    4456:	8d 81       	ldd	r24, Y+5	; 0x05
    4458:	9e 81       	ldd	r25, Y+6	; 0x06
    445a:	01 97       	sbiw	r24, 0x01	; 1
    445c:	8d 83       	std	Y+5, r24	; 0x05
    445e:	9e 83       	std	Y+6, r25	; 0x06
    4460:	8d 81       	ldd	r24, Y+5	; 0x05
    4462:	9e 81       	ldd	r25, Y+6	; 0x06
    4464:	27 e1       	ldi	r18, 0x17	; 23
    4466:	fc 01       	movw	r30, r24
    4468:	20 83       	st	Z, r18
    446a:	8d 81       	ldd	r24, Y+5	; 0x05
    446c:	9e 81       	ldd	r25, Y+6	; 0x06
    446e:	01 97       	sbiw	r24, 0x01	; 1
    4470:	8d 83       	std	Y+5, r24	; 0x05
    4472:	9e 83       	std	Y+6, r25	; 0x06
    4474:	8d 81       	ldd	r24, Y+5	; 0x05
    4476:	9e 81       	ldd	r25, Y+6	; 0x06
    4478:	28 e1       	ldi	r18, 0x18	; 24
    447a:	fc 01       	movw	r30, r24
    447c:	20 83       	st	Z, r18
    447e:	8d 81       	ldd	r24, Y+5	; 0x05
    4480:	9e 81       	ldd	r25, Y+6	; 0x06
    4482:	01 97       	sbiw	r24, 0x01	; 1
    4484:	8d 83       	std	Y+5, r24	; 0x05
    4486:	9e 83       	std	Y+6, r25	; 0x06
    4488:	8d 81       	ldd	r24, Y+5	; 0x05
    448a:	9e 81       	ldd	r25, Y+6	; 0x06
    448c:	29 e1       	ldi	r18, 0x19	; 25
    448e:	fc 01       	movw	r30, r24
    4490:	20 83       	st	Z, r18
    4492:	8d 81       	ldd	r24, Y+5	; 0x05
    4494:	9e 81       	ldd	r25, Y+6	; 0x06
    4496:	01 97       	sbiw	r24, 0x01	; 1
    4498:	8d 83       	std	Y+5, r24	; 0x05
    449a:	9e 83       	std	Y+6, r25	; 0x06
    449c:	8d 81       	ldd	r24, Y+5	; 0x05
    449e:	9e 81       	ldd	r25, Y+6	; 0x06
    44a0:	20 e2       	ldi	r18, 0x20	; 32
    44a2:	fc 01       	movw	r30, r24
    44a4:	20 83       	st	Z, r18
    44a6:	8d 81       	ldd	r24, Y+5	; 0x05
    44a8:	9e 81       	ldd	r25, Y+6	; 0x06
    44aa:	01 97       	sbiw	r24, 0x01	; 1
    44ac:	8d 83       	std	Y+5, r24	; 0x05
    44ae:	9e 83       	std	Y+6, r25	; 0x06
    44b0:	8d 81       	ldd	r24, Y+5	; 0x05
    44b2:	9e 81       	ldd	r25, Y+6	; 0x06
    44b4:	21 e2       	ldi	r18, 0x21	; 33
    44b6:	fc 01       	movw	r30, r24
    44b8:	20 83       	st	Z, r18
    44ba:	8d 81       	ldd	r24, Y+5	; 0x05
    44bc:	9e 81       	ldd	r25, Y+6	; 0x06
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	8d 83       	std	Y+5, r24	; 0x05
    44c2:	9e 83       	std	Y+6, r25	; 0x06
    44c4:	8d 81       	ldd	r24, Y+5	; 0x05
    44c6:	9e 81       	ldd	r25, Y+6	; 0x06
    44c8:	22 e2       	ldi	r18, 0x22	; 34
    44ca:	fc 01       	movw	r30, r24
    44cc:	20 83       	st	Z, r18
    44ce:	8d 81       	ldd	r24, Y+5	; 0x05
    44d0:	9e 81       	ldd	r25, Y+6	; 0x06
    44d2:	01 97       	sbiw	r24, 0x01	; 1
    44d4:	8d 83       	std	Y+5, r24	; 0x05
    44d6:	9e 83       	std	Y+6, r25	; 0x06
    44d8:	8d 81       	ldd	r24, Y+5	; 0x05
    44da:	9e 81       	ldd	r25, Y+6	; 0x06
    44dc:	23 e2       	ldi	r18, 0x23	; 35
    44de:	fc 01       	movw	r30, r24
    44e0:	20 83       	st	Z, r18
    44e2:	8d 81       	ldd	r24, Y+5	; 0x05
    44e4:	9e 81       	ldd	r25, Y+6	; 0x06
    44e6:	01 97       	sbiw	r24, 0x01	; 1
    44e8:	8d 83       	std	Y+5, r24	; 0x05
    44ea:	9e 83       	std	Y+6, r25	; 0x06
    44ec:	89 85       	ldd	r24, Y+9	; 0x09
    44ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f0:	cc 01       	movw	r24, r24
    44f2:	a0 e0       	ldi	r26, 0x00	; 0
    44f4:	b0 e0       	ldi	r27, 0x00	; 0
    44f6:	89 83       	std	Y+1, r24	; 0x01
    44f8:	9a 83       	std	Y+2, r25	; 0x02
    44fa:	ab 83       	std	Y+3, r26	; 0x03
    44fc:	bc 83       	std	Y+4, r27	; 0x04
    44fe:	29 81       	ldd	r18, Y+1	; 0x01
    4500:	8d 81       	ldd	r24, Y+5	; 0x05
    4502:	9e 81       	ldd	r25, Y+6	; 0x06
    4504:	fc 01       	movw	r30, r24
    4506:	20 83       	st	Z, r18
    4508:	8d 81       	ldd	r24, Y+5	; 0x05
    450a:	9e 81       	ldd	r25, Y+6	; 0x06
    450c:	01 97       	sbiw	r24, 0x01	; 1
    450e:	8d 83       	std	Y+5, r24	; 0x05
    4510:	9e 83       	std	Y+6, r25	; 0x06
    4512:	89 81       	ldd	r24, Y+1	; 0x01
    4514:	9a 81       	ldd	r25, Y+2	; 0x02
    4516:	ab 81       	ldd	r26, Y+3	; 0x03
    4518:	bc 81       	ldd	r27, Y+4	; 0x04
    451a:	89 2f       	mov	r24, r25
    451c:	9a 2f       	mov	r25, r26
    451e:	ab 2f       	mov	r26, r27
    4520:	bb 27       	eor	r27, r27
    4522:	89 83       	std	Y+1, r24	; 0x01
    4524:	9a 83       	std	Y+2, r25	; 0x02
    4526:	ab 83       	std	Y+3, r26	; 0x03
    4528:	bc 83       	std	Y+4, r27	; 0x04
    452a:	29 81       	ldd	r18, Y+1	; 0x01
    452c:	8d 81       	ldd	r24, Y+5	; 0x05
    452e:	9e 81       	ldd	r25, Y+6	; 0x06
    4530:	fc 01       	movw	r30, r24
    4532:	20 83       	st	Z, r18
    4534:	8d 81       	ldd	r24, Y+5	; 0x05
    4536:	9e 81       	ldd	r25, Y+6	; 0x06
    4538:	01 97       	sbiw	r24, 0x01	; 1
    453a:	8d 83       	std	Y+5, r24	; 0x05
    453c:	9e 83       	std	Y+6, r25	; 0x06
    453e:	8d 81       	ldd	r24, Y+5	; 0x05
    4540:	9e 81       	ldd	r25, Y+6	; 0x06
    4542:	26 e2       	ldi	r18, 0x26	; 38
    4544:	fc 01       	movw	r30, r24
    4546:	20 83       	st	Z, r18
    4548:	8d 81       	ldd	r24, Y+5	; 0x05
    454a:	9e 81       	ldd	r25, Y+6	; 0x06
    454c:	01 97       	sbiw	r24, 0x01	; 1
    454e:	8d 83       	std	Y+5, r24	; 0x05
    4550:	9e 83       	std	Y+6, r25	; 0x06
    4552:	8d 81       	ldd	r24, Y+5	; 0x05
    4554:	9e 81       	ldd	r25, Y+6	; 0x06
    4556:	27 e2       	ldi	r18, 0x27	; 39
    4558:	fc 01       	movw	r30, r24
    455a:	20 83       	st	Z, r18
    455c:	8d 81       	ldd	r24, Y+5	; 0x05
    455e:	9e 81       	ldd	r25, Y+6	; 0x06
    4560:	01 97       	sbiw	r24, 0x01	; 1
    4562:	8d 83       	std	Y+5, r24	; 0x05
    4564:	9e 83       	std	Y+6, r25	; 0x06
    4566:	8d 81       	ldd	r24, Y+5	; 0x05
    4568:	9e 81       	ldd	r25, Y+6	; 0x06
    456a:	28 e2       	ldi	r18, 0x28	; 40
    456c:	fc 01       	movw	r30, r24
    456e:	20 83       	st	Z, r18
    4570:	8d 81       	ldd	r24, Y+5	; 0x05
    4572:	9e 81       	ldd	r25, Y+6	; 0x06
    4574:	01 97       	sbiw	r24, 0x01	; 1
    4576:	8d 83       	std	Y+5, r24	; 0x05
    4578:	9e 83       	std	Y+6, r25	; 0x06
    457a:	8d 81       	ldd	r24, Y+5	; 0x05
    457c:	9e 81       	ldd	r25, Y+6	; 0x06
    457e:	29 e2       	ldi	r18, 0x29	; 41
    4580:	fc 01       	movw	r30, r24
    4582:	20 83       	st	Z, r18
    4584:	8d 81       	ldd	r24, Y+5	; 0x05
    4586:	9e 81       	ldd	r25, Y+6	; 0x06
    4588:	01 97       	sbiw	r24, 0x01	; 1
    458a:	8d 83       	std	Y+5, r24	; 0x05
    458c:	9e 83       	std	Y+6, r25	; 0x06
    458e:	8d 81       	ldd	r24, Y+5	; 0x05
    4590:	9e 81       	ldd	r25, Y+6	; 0x06
    4592:	20 e3       	ldi	r18, 0x30	; 48
    4594:	fc 01       	movw	r30, r24
    4596:	20 83       	st	Z, r18
    4598:	8d 81       	ldd	r24, Y+5	; 0x05
    459a:	9e 81       	ldd	r25, Y+6	; 0x06
    459c:	01 97       	sbiw	r24, 0x01	; 1
    459e:	8d 83       	std	Y+5, r24	; 0x05
    45a0:	9e 83       	std	Y+6, r25	; 0x06
    45a2:	8d 81       	ldd	r24, Y+5	; 0x05
    45a4:	9e 81       	ldd	r25, Y+6	; 0x06
    45a6:	2a 96       	adiw	r28, 0x0a	; 10
    45a8:	cd bf       	out	0x3d, r28	; 61
    45aa:	de bf       	out	0x3e, r29	; 62
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	08 95       	ret

000045b2 <xPortStartScheduler>:
    45b2:	cf 93       	push	r28
    45b4:	df 93       	push	r29
    45b6:	cd b7       	in	r28, 0x3d	; 61
    45b8:	de b7       	in	r29, 0x3e	; 62
    45ba:	0e 94 20 24 	call	0x4840	; 0x4840 <prvSetupTimerInterrupt>
    45be:	a0 91 a6 2c 	lds	r26, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    45c2:	b0 91 a7 2c 	lds	r27, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    45c6:	0d 90       	ld	r0, X+
    45c8:	0d be       	out	0x3d, r0	; 61
    45ca:	0d 90       	ld	r0, X+
    45cc:	0e be       	out	0x3e, r0	; 62
    45ce:	ef 91       	pop	r30
    45d0:	df 91       	pop	r29
    45d2:	cf 91       	pop	r28
    45d4:	bf 91       	pop	r27
    45d6:	af 91       	pop	r26
    45d8:	9f 91       	pop	r25
    45da:	8f 91       	pop	r24
    45dc:	7f 91       	pop	r23
    45de:	6f 91       	pop	r22
    45e0:	5f 91       	pop	r21
    45e2:	4f 91       	pop	r20
    45e4:	3f 91       	pop	r19
    45e6:	2f 91       	pop	r18
    45e8:	1f 91       	pop	r17
    45ea:	0f 91       	pop	r16
    45ec:	ff 90       	pop	r15
    45ee:	ef 90       	pop	r14
    45f0:	df 90       	pop	r13
    45f2:	cf 90       	pop	r12
    45f4:	bf 90       	pop	r11
    45f6:	af 90       	pop	r10
    45f8:	9f 90       	pop	r9
    45fa:	8f 90       	pop	r8
    45fc:	7f 90       	pop	r7
    45fe:	6f 90       	pop	r6
    4600:	5f 90       	pop	r5
    4602:	4f 90       	pop	r4
    4604:	3f 90       	pop	r3
    4606:	2f 90       	pop	r2
    4608:	1f 90       	pop	r1
    460a:	0f 90       	pop	r0
    460c:	ff 91       	pop	r31
    460e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4612:	ff 91       	pop	r31
    4614:	ff bf       	out	0x3f, r31	; 63
    4616:	ff 91       	pop	r31
    4618:	08 95       	ret
    461a:	81 e0       	ldi	r24, 0x01	; 1
    461c:	df 91       	pop	r29
    461e:	cf 91       	pop	r28
    4620:	08 95       	ret

00004622 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    4622:	ff 93       	push	r31
    4624:	ff b7       	in	r31, 0x3f	; 63
    4626:	ff 93       	push	r31
    4628:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    462c:	ff 93       	push	r31
    462e:	f8 7f       	andi	r31, 0xF8	; 248
    4630:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4634:	0f 92       	push	r0
    4636:	1f 92       	push	r1
    4638:	11 24       	eor	r1, r1
    463a:	2f 92       	push	r2
    463c:	3f 92       	push	r3
    463e:	4f 92       	push	r4
    4640:	5f 92       	push	r5
    4642:	6f 92       	push	r6
    4644:	7f 92       	push	r7
    4646:	8f 92       	push	r8
    4648:	9f 92       	push	r9
    464a:	af 92       	push	r10
    464c:	bf 92       	push	r11
    464e:	cf 92       	push	r12
    4650:	df 92       	push	r13
    4652:	ef 92       	push	r14
    4654:	ff 92       	push	r15
    4656:	0f 93       	push	r16
    4658:	1f 93       	push	r17
    465a:	2f 93       	push	r18
    465c:	3f 93       	push	r19
    465e:	4f 93       	push	r20
    4660:	5f 93       	push	r21
    4662:	6f 93       	push	r22
    4664:	7f 93       	push	r23
    4666:	8f 93       	push	r24
    4668:	9f 93       	push	r25
    466a:	af 93       	push	r26
    466c:	bf 93       	push	r27
    466e:	cf 93       	push	r28
    4670:	df 93       	push	r29
    4672:	ef 93       	push	r30
    4674:	a0 91 a6 2c 	lds	r26, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    4678:	b0 91 a7 2c 	lds	r27, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    467c:	0d b6       	in	r0, 0x3d	; 61
    467e:	0d 92       	st	X+, r0
    4680:	0e b6       	in	r0, 0x3e	; 62
    4682:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    4684:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    4688:	a0 91 a6 2c 	lds	r26, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    468c:	b0 91 a7 2c 	lds	r27, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    4690:	0d 90       	ld	r0, X+
    4692:	0d be       	out	0x3d, r0	; 61
    4694:	0d 90       	ld	r0, X+
    4696:	0e be       	out	0x3e, r0	; 62
    4698:	ef 91       	pop	r30
    469a:	df 91       	pop	r29
    469c:	cf 91       	pop	r28
    469e:	bf 91       	pop	r27
    46a0:	af 91       	pop	r26
    46a2:	9f 91       	pop	r25
    46a4:	8f 91       	pop	r24
    46a6:	7f 91       	pop	r23
    46a8:	6f 91       	pop	r22
    46aa:	5f 91       	pop	r21
    46ac:	4f 91       	pop	r20
    46ae:	3f 91       	pop	r19
    46b0:	2f 91       	pop	r18
    46b2:	1f 91       	pop	r17
    46b4:	0f 91       	pop	r16
    46b6:	ff 90       	pop	r15
    46b8:	ef 90       	pop	r14
    46ba:	df 90       	pop	r13
    46bc:	cf 90       	pop	r12
    46be:	bf 90       	pop	r11
    46c0:	af 90       	pop	r10
    46c2:	9f 90       	pop	r9
    46c4:	8f 90       	pop	r8
    46c6:	7f 90       	pop	r7
    46c8:	6f 90       	pop	r6
    46ca:	5f 90       	pop	r5
    46cc:	4f 90       	pop	r4
    46ce:	3f 90       	pop	r3
    46d0:	2f 90       	pop	r2
    46d2:	1f 90       	pop	r1
    46d4:	0f 90       	pop	r0
    46d6:	ff 91       	pop	r31
    46d8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    46dc:	ff 91       	pop	r31
    46de:	ff bf       	out	0x3f, r31	; 63
    46e0:	ff 91       	pop	r31
	asm volatile ( "ret" );
    46e2:	08 95       	ret
	...

000046e6 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    46e6:	1f 93       	push	r17
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    46ec:	1f 92       	push	r1
    46ee:	cd b7       	in	r28, 0x3d	; 61
    46f0:	de b7       	in	r29, 0x3e	; 62
    46f2:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    46f4:	80 91 64 2d 	lds	r24, 0x2D64	; 0x802d64 <intTaskSwitchPending>
    46f8:	98 2f       	mov	r25, r24
    46fa:	89 81       	ldd	r24, Y+1	; 0x01
    46fc:	89 2b       	or	r24, r25
    46fe:	80 93 64 2d 	sts	0x2D64, r24	; 0x802d64 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    4702:	80 ea       	ldi	r24, 0xA0	; 160
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	fc 01       	movw	r30, r24
    4708:	80 81       	ld	r24, Z
    470a:	81 30       	cpi	r24, 0x01	; 1
    470c:	61 f0       	breq	.+24     	; 0x4726 <portTaskSwitchContext+0x40>
    470e:	80 ea       	ldi	r24, 0xA0	; 160
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	fc 01       	movw	r30, r24
    4714:	80 81       	ld	r24, Z
    4716:	82 30       	cpi	r24, 0x02	; 2
    4718:	31 f0       	breq	.+12     	; 0x4726 <portTaskSwitchContext+0x40>
    471a:	80 ea       	ldi	r24, 0xA0	; 160
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	fc 01       	movw	r30, r24
    4720:	80 81       	ld	r24, Z
    4722:	84 30       	cpi	r24, 0x04	; 4
    4724:	79 f4       	brne	.+30     	; 0x4744 <portTaskSwitchContext+0x5e>
    4726:	80 91 64 2d 	lds	r24, 0x2D64	; 0x802d64 <intTaskSwitchPending>
    472a:	88 23       	and	r24, r24
    472c:	59 f0       	breq	.+22     	; 0x4744 <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    472e:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <_portSetInterruptMaskFromIsr>
    4732:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    4734:	10 92 64 2d 	sts	0x2D64, r1	; 0x802d64 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    4738:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    473c:	80 ea       	ldi	r24, 0xA0	; 160
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	fc 01       	movw	r30, r24
    4742:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    4744:	00 00       	nop
    4746:	0f 90       	pop	r0
    4748:	df 91       	pop	r29
    474a:	cf 91       	pop	r28
    474c:	1f 91       	pop	r17
    474e:	08 95       	ret

00004750 <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    4750:	1f 93       	push	r17
    4752:	cf 93       	push	r28
    4754:	df 93       	push	r29
    4756:	cd b7       	in	r28, 0x3d	; 61
    4758:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    475a:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <_portSetInterruptMaskFromIsr>
    475e:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    4760:	0e 94 90 2c 	call	0x5920	; 0x5920 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    4764:	80 ea       	ldi	r24, 0xA0	; 160
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	fc 01       	movw	r30, r24
    476a:	12 83       	std	Z+2, r17	; 0x02
	}
    476c:	00 00       	nop
    476e:	df 91       	pop	r29
    4770:	cf 91       	pop	r28
    4772:	1f 91       	pop	r17
    4774:	08 95       	ret

00004776 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    4776:	ff 93       	push	r31
    4778:	ff b7       	in	r31, 0x3f	; 63
    477a:	ff 93       	push	r31
    477c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4780:	ff 93       	push	r31
    4782:	f8 7f       	andi	r31, 0xF8	; 248
    4784:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4788:	0f 92       	push	r0
    478a:	1f 92       	push	r1
    478c:	11 24       	eor	r1, r1
    478e:	2f 92       	push	r2
    4790:	3f 92       	push	r3
    4792:	4f 92       	push	r4
    4794:	5f 92       	push	r5
    4796:	6f 92       	push	r6
    4798:	7f 92       	push	r7
    479a:	8f 92       	push	r8
    479c:	9f 92       	push	r9
    479e:	af 92       	push	r10
    47a0:	bf 92       	push	r11
    47a2:	cf 92       	push	r12
    47a4:	df 92       	push	r13
    47a6:	ef 92       	push	r14
    47a8:	ff 92       	push	r15
    47aa:	0f 93       	push	r16
    47ac:	1f 93       	push	r17
    47ae:	2f 93       	push	r18
    47b0:	3f 93       	push	r19
    47b2:	4f 93       	push	r20
    47b4:	5f 93       	push	r21
    47b6:	6f 93       	push	r22
    47b8:	7f 93       	push	r23
    47ba:	8f 93       	push	r24
    47bc:	9f 93       	push	r25
    47be:	af 93       	push	r26
    47c0:	bf 93       	push	r27
    47c2:	cf 93       	push	r28
    47c4:	df 93       	push	r29
    47c6:	ef 93       	push	r30
    47c8:	a0 91 a6 2c 	lds	r26, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    47cc:	b0 91 a7 2c 	lds	r27, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    47d0:	0d b6       	in	r0, 0x3d	; 61
    47d2:	0d 92       	st	X+, r0
    47d4:	0e b6       	in	r0, 0x3e	; 62
    47d6:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    47d8:	0e 94 a8 23 	call	0x4750	; 0x4750 <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    47dc:	81 e0       	ldi	r24, 0x01	; 1
    47de:	0e 94 73 23 	call	0x46e6	; 0x46e6 <portTaskSwitchContext>
    47e2:	a0 91 a6 2c 	lds	r26, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    47e6:	b0 91 a7 2c 	lds	r27, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    47ea:	0d 90       	ld	r0, X+
    47ec:	0d be       	out	0x3d, r0	; 61
    47ee:	0d 90       	ld	r0, X+
    47f0:	0e be       	out	0x3e, r0	; 62
    47f2:	ef 91       	pop	r30
    47f4:	df 91       	pop	r29
    47f6:	cf 91       	pop	r28
    47f8:	bf 91       	pop	r27
    47fa:	af 91       	pop	r26
    47fc:	9f 91       	pop	r25
    47fe:	8f 91       	pop	r24
    4800:	7f 91       	pop	r23
    4802:	6f 91       	pop	r22
    4804:	5f 91       	pop	r21
    4806:	4f 91       	pop	r20
    4808:	3f 91       	pop	r19
    480a:	2f 91       	pop	r18
    480c:	1f 91       	pop	r17
    480e:	0f 91       	pop	r16
    4810:	ff 90       	pop	r15
    4812:	ef 90       	pop	r14
    4814:	df 90       	pop	r13
    4816:	cf 90       	pop	r12
    4818:	bf 90       	pop	r11
    481a:	af 90       	pop	r10
    481c:	9f 90       	pop	r9
    481e:	8f 90       	pop	r8
    4820:	7f 90       	pop	r7
    4822:	6f 90       	pop	r6
    4824:	5f 90       	pop	r5
    4826:	4f 90       	pop	r4
    4828:	3f 90       	pop	r3
    482a:	2f 90       	pop	r2
    482c:	1f 90       	pop	r1
    482e:	0f 90       	pop	r0
    4830:	ff 91       	pop	r31
    4832:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4836:	ff 91       	pop	r31
    4838:	ff bf       	out	0x3f, r31	; 63
    483a:	ff 91       	pop	r31
    483c:	18 95       	reti
	...

00004840 <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    4840:	cf 93       	push	r28
    4842:	df 93       	push	r29
    4844:	00 d0       	rcall	.+0      	; 0x4846 <prvSetupTimerInterrupt+0x6>
    4846:	1f 92       	push	r1
    4848:	cd b7       	in	r28, 0x3d	; 61
    484a:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    484c:	80 e0       	ldi	r24, 0x00	; 0
    484e:	9d e7       	ldi	r25, 0x7D	; 125
    4850:	a0 e0       	ldi	r26, 0x00	; 0
    4852:	b0 e0       	ldi	r27, 0x00	; 0
    4854:	89 83       	std	Y+1, r24	; 0x01
    4856:	9a 83       	std	Y+2, r25	; 0x02
    4858:	ab 83       	std	Y+3, r26	; 0x03
    485a:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    485c:	89 81       	ldd	r24, Y+1	; 0x01
    485e:	9a 81       	ldd	r25, Y+2	; 0x02
    4860:	ab 81       	ldd	r26, Y+3	; 0x03
    4862:	bc 81       	ldd	r27, Y+4	; 0x04
    4864:	68 94       	set
    4866:	15 f8       	bld	r1, 5
    4868:	b6 95       	lsr	r27
    486a:	a7 95       	ror	r26
    486c:	97 95       	ror	r25
    486e:	87 95       	ror	r24
    4870:	16 94       	lsr	r1
    4872:	d1 f7       	brne	.-12     	; 0x4868 <prvSetupTimerInterrupt+0x28>
    4874:	89 83       	std	Y+1, r24	; 0x01
    4876:	9a 83       	std	Y+2, r25	; 0x02
    4878:	ab 83       	std	Y+3, r26	; 0x03
    487a:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    487c:	89 81       	ldd	r24, Y+1	; 0x01
    487e:	9a 81       	ldd	r25, Y+2	; 0x02
    4880:	ab 81       	ldd	r26, Y+3	; 0x03
    4882:	bc 81       	ldd	r27, Y+4	; 0x04
    4884:	01 97       	sbiw	r24, 0x01	; 1
    4886:	a1 09       	sbc	r26, r1
    4888:	b1 09       	sbc	r27, r1
    488a:	89 83       	std	Y+1, r24	; 0x01
    488c:	9a 83       	std	Y+2, r25	; 0x02
    488e:	ab 83       	std	Y+3, r26	; 0x03
    4890:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    4892:	80 e0       	ldi	r24, 0x00	; 0
    4894:	98 e0       	ldi	r25, 0x08	; 8
    4896:	29 81       	ldd	r18, Y+1	; 0x01
    4898:	3a 81       	ldd	r19, Y+2	; 0x02
    489a:	fc 01       	movw	r30, r24
    489c:	26 a3       	std	Z+38, r18	; 0x26
    489e:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    48a0:	65 e0       	ldi	r22, 0x05	; 5
    48a2:	80 e0       	ldi	r24, 0x00	; 0
    48a4:	98 e0       	ldi	r25, 0x08	; 8
    48a6:	0e 94 4d 1b 	call	0x369a	; 0x369a <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    48aa:	61 e0       	ldi	r22, 0x01	; 1
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	98 e0       	ldi	r25, 0x08	; 8
    48b0:	0e 94 85 1b 	call	0x370a	; 0x370a <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    48b4:	00 00       	nop
    48b6:	24 96       	adiw	r28, 0x04	; 4
    48b8:	cd bf       	out	0x3d, r28	; 61
    48ba:	de bf       	out	0x3e, r29	; 62
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	08 95       	ret

000048c2 <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    48c2:	cf 93       	push	r28
    48c4:	df 93       	push	r29
    48c6:	cd b7       	in	r28, 0x3d	; 61
    48c8:	de b7       	in	r29, 0x3e	; 62
    48ca:	25 97       	sbiw	r28, 0x05	; 5
    48cc:	cd bf       	out	0x3d, r28	; 61
    48ce:	de bf       	out	0x3e, r29	; 62
    48d0:	8b 83       	std	Y+3, r24	; 0x03
    48d2:	9c 83       	std	Y+4, r25	; 0x04
    48d4:	6d 83       	std	Y+5, r22	; 0x05
    48d6:	8b 81       	ldd	r24, Y+3	; 0x03
    48d8:	9c 81       	ldd	r25, Y+4	; 0x04
    48da:	89 83       	std	Y+1, r24	; 0x01
    48dc:	9a 83       	std	Y+2, r25	; 0x02
    48de:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    48e2:	ff 93       	push	r31
    48e4:	f8 7f       	andi	r31, 0xF8	; 248
    48e6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    48ea:	89 81       	ldd	r24, Y+1	; 0x01
    48ec:	9a 81       	ldd	r25, Y+2	; 0x02
    48ee:	fc 01       	movw	r30, r24
    48f0:	80 81       	ld	r24, Z
    48f2:	91 81       	ldd	r25, Z+1	; 0x01
    48f4:	29 81       	ldd	r18, Y+1	; 0x01
    48f6:	3a 81       	ldd	r19, Y+2	; 0x02
    48f8:	f9 01       	movw	r30, r18
    48fa:	27 8d       	ldd	r18, Z+31	; 0x1f
    48fc:	42 2f       	mov	r20, r18
    48fe:	50 e0       	ldi	r21, 0x00	; 0
    4900:	29 81       	ldd	r18, Y+1	; 0x01
    4902:	3a 81       	ldd	r19, Y+2	; 0x02
    4904:	f9 01       	movw	r30, r18
    4906:	20 a1       	ldd	r18, Z+32	; 0x20
    4908:	22 2f       	mov	r18, r18
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	42 9f       	mul	r20, r18
    490e:	b0 01       	movw	r22, r0
    4910:	43 9f       	mul	r20, r19
    4912:	70 0d       	add	r23, r0
    4914:	52 9f       	mul	r21, r18
    4916:	70 0d       	add	r23, r0
    4918:	11 24       	eor	r1, r1
    491a:	9b 01       	movw	r18, r22
    491c:	28 0f       	add	r18, r24
    491e:	39 1f       	adc	r19, r25
    4920:	89 81       	ldd	r24, Y+1	; 0x01
    4922:	9a 81       	ldd	r25, Y+2	; 0x02
    4924:	fc 01       	movw	r30, r24
    4926:	22 83       	std	Z+2, r18	; 0x02
    4928:	33 83       	std	Z+3, r19	; 0x03
    492a:	89 81       	ldd	r24, Y+1	; 0x01
    492c:	9a 81       	ldd	r25, Y+2	; 0x02
    492e:	fc 01       	movw	r30, r24
    4930:	16 8e       	std	Z+30, r1	; 0x1e
    4932:	89 81       	ldd	r24, Y+1	; 0x01
    4934:	9a 81       	ldd	r25, Y+2	; 0x02
    4936:	fc 01       	movw	r30, r24
    4938:	20 81       	ld	r18, Z
    493a:	31 81       	ldd	r19, Z+1	; 0x01
    493c:	89 81       	ldd	r24, Y+1	; 0x01
    493e:	9a 81       	ldd	r25, Y+2	; 0x02
    4940:	fc 01       	movw	r30, r24
    4942:	24 83       	std	Z+4, r18	; 0x04
    4944:	35 83       	std	Z+5, r19	; 0x05
    4946:	89 81       	ldd	r24, Y+1	; 0x01
    4948:	9a 81       	ldd	r25, Y+2	; 0x02
    494a:	fc 01       	movw	r30, r24
    494c:	80 81       	ld	r24, Z
    494e:	91 81       	ldd	r25, Z+1	; 0x01
    4950:	29 81       	ldd	r18, Y+1	; 0x01
    4952:	3a 81       	ldd	r19, Y+2	; 0x02
    4954:	f9 01       	movw	r30, r18
    4956:	27 8d       	ldd	r18, Z+31	; 0x1f
    4958:	22 2f       	mov	r18, r18
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	a9 01       	movw	r20, r18
    495e:	41 50       	subi	r20, 0x01	; 1
    4960:	51 09       	sbc	r21, r1
    4962:	29 81       	ldd	r18, Y+1	; 0x01
    4964:	3a 81       	ldd	r19, Y+2	; 0x02
    4966:	f9 01       	movw	r30, r18
    4968:	20 a1       	ldd	r18, Z+32	; 0x20
    496a:	22 2f       	mov	r18, r18
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	42 9f       	mul	r20, r18
    4970:	b0 01       	movw	r22, r0
    4972:	43 9f       	mul	r20, r19
    4974:	70 0d       	add	r23, r0
    4976:	52 9f       	mul	r21, r18
    4978:	70 0d       	add	r23, r0
    497a:	11 24       	eor	r1, r1
    497c:	9b 01       	movw	r18, r22
    497e:	28 0f       	add	r18, r24
    4980:	39 1f       	adc	r19, r25
    4982:	89 81       	ldd	r24, Y+1	; 0x01
    4984:	9a 81       	ldd	r25, Y+2	; 0x02
    4986:	fc 01       	movw	r30, r24
    4988:	26 83       	std	Z+6, r18	; 0x06
    498a:	37 83       	std	Z+7, r19	; 0x07
    498c:	89 81       	ldd	r24, Y+1	; 0x01
    498e:	9a 81       	ldd	r25, Y+2	; 0x02
    4990:	2f ef       	ldi	r18, 0xFF	; 255
    4992:	fc 01       	movw	r30, r24
    4994:	21 a3       	std	Z+33, r18	; 0x21
    4996:	89 81       	ldd	r24, Y+1	; 0x01
    4998:	9a 81       	ldd	r25, Y+2	; 0x02
    499a:	2f ef       	ldi	r18, 0xFF	; 255
    499c:	fc 01       	movw	r30, r24
    499e:	22 a3       	std	Z+34, r18	; 0x22
    49a0:	8d 81       	ldd	r24, Y+5	; 0x05
    49a2:	88 23       	and	r24, r24
    49a4:	81 f4       	brne	.+32     	; 0x49c6 <xQueueGenericReset+0x104>
    49a6:	89 81       	ldd	r24, Y+1	; 0x01
    49a8:	9a 81       	ldd	r25, Y+2	; 0x02
    49aa:	fc 01       	movw	r30, r24
    49ac:	80 85       	ldd	r24, Z+8	; 0x08
    49ae:	88 23       	and	r24, r24
    49b0:	a1 f0       	breq	.+40     	; 0x49da <xQueueGenericReset+0x118>
    49b2:	89 81       	ldd	r24, Y+1	; 0x01
    49b4:	9a 81       	ldd	r25, Y+2	; 0x02
    49b6:	08 96       	adiw	r24, 0x08	; 8
    49b8:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <xTaskRemoveFromEventList>
    49bc:	88 23       	and	r24, r24
    49be:	69 f0       	breq	.+26     	; 0x49da <xQueueGenericReset+0x118>
    49c0:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    49c4:	0a c0       	rjmp	.+20     	; 0x49da <xQueueGenericReset+0x118>
    49c6:	89 81       	ldd	r24, Y+1	; 0x01
    49c8:	9a 81       	ldd	r25, Y+2	; 0x02
    49ca:	08 96       	adiw	r24, 0x08	; 8
    49cc:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <vListInitialise>
    49d0:	89 81       	ldd	r24, Y+1	; 0x01
    49d2:	9a 81       	ldd	r25, Y+2	; 0x02
    49d4:	43 96       	adiw	r24, 0x13	; 19
    49d6:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <vListInitialise>
    49da:	ff 91       	pop	r31
    49dc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    49e0:	81 e0       	ldi	r24, 0x01	; 1
    49e2:	25 96       	adiw	r28, 0x05	; 5
    49e4:	cd bf       	out	0x3d, r28	; 61
    49e6:	de bf       	out	0x3e, r29	; 62
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	08 95       	ret

000049ee <xQueueGenericCreate>:
    49ee:	0f 93       	push	r16
    49f0:	1f 93       	push	r17
    49f2:	cf 93       	push	r28
    49f4:	df 93       	push	r29
    49f6:	cd b7       	in	r28, 0x3d	; 61
    49f8:	de b7       	in	r29, 0x3e	; 62
    49fa:	29 97       	sbiw	r28, 0x09	; 9
    49fc:	cd bf       	out	0x3d, r28	; 61
    49fe:	de bf       	out	0x3e, r29	; 62
    4a00:	8f 83       	std	Y+7, r24	; 0x07
    4a02:	68 87       	std	Y+8, r22	; 0x08
    4a04:	49 87       	std	Y+9, r20	; 0x09
    4a06:	88 85       	ldd	r24, Y+8	; 0x08
    4a08:	88 23       	and	r24, r24
    4a0a:	19 f4       	brne	.+6      	; 0x4a12 <xQueueGenericCreate+0x24>
    4a0c:	19 82       	std	Y+1, r1	; 0x01
    4a0e:	1a 82       	std	Y+2, r1	; 0x02
    4a10:	0f c0       	rjmp	.+30     	; 0x4a30 <xQueueGenericCreate+0x42>
    4a12:	8f 81       	ldd	r24, Y+7	; 0x07
    4a14:	48 2f       	mov	r20, r24
    4a16:	50 e0       	ldi	r21, 0x00	; 0
    4a18:	88 85       	ldd	r24, Y+8	; 0x08
    4a1a:	28 2f       	mov	r18, r24
    4a1c:	30 e0       	ldi	r19, 0x00	; 0
    4a1e:	42 9f       	mul	r20, r18
    4a20:	c0 01       	movw	r24, r0
    4a22:	43 9f       	mul	r20, r19
    4a24:	90 0d       	add	r25, r0
    4a26:	52 9f       	mul	r21, r18
    4a28:	90 0d       	add	r25, r0
    4a2a:	11 24       	eor	r1, r1
    4a2c:	89 83       	std	Y+1, r24	; 0x01
    4a2e:	9a 83       	std	Y+2, r25	; 0x02
    4a30:	89 81       	ldd	r24, Y+1	; 0x01
    4a32:	9a 81       	ldd	r25, Y+2	; 0x02
    4a34:	85 96       	adiw	r24, 0x25	; 37
    4a36:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <pvPortMalloc>
    4a3a:	8b 83       	std	Y+3, r24	; 0x03
    4a3c:	9c 83       	std	Y+4, r25	; 0x04
    4a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a40:	9c 81       	ldd	r25, Y+4	; 0x04
    4a42:	89 2b       	or	r24, r25
    4a44:	81 f0       	breq	.+32     	; 0x4a66 <xQueueGenericCreate+0x78>
    4a46:	8b 81       	ldd	r24, Y+3	; 0x03
    4a48:	9c 81       	ldd	r25, Y+4	; 0x04
    4a4a:	85 96       	adiw	r24, 0x25	; 37
    4a4c:	8d 83       	std	Y+5, r24	; 0x05
    4a4e:	9e 83       	std	Y+6, r25	; 0x06
    4a50:	2b 81       	ldd	r18, Y+3	; 0x03
    4a52:	3c 81       	ldd	r19, Y+4	; 0x04
    4a54:	8d 81       	ldd	r24, Y+5	; 0x05
    4a56:	9e 81       	ldd	r25, Y+6	; 0x06
    4a58:	89 01       	movw	r16, r18
    4a5a:	29 85       	ldd	r18, Y+9	; 0x09
    4a5c:	ac 01       	movw	r20, r24
    4a5e:	68 85       	ldd	r22, Y+8	; 0x08
    4a60:	8f 81       	ldd	r24, Y+7	; 0x07
    4a62:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <prvInitialiseNewQueue>
    4a66:	8b 81       	ldd	r24, Y+3	; 0x03
    4a68:	9c 81       	ldd	r25, Y+4	; 0x04
    4a6a:	29 96       	adiw	r28, 0x09	; 9
    4a6c:	cd bf       	out	0x3d, r28	; 61
    4a6e:	de bf       	out	0x3e, r29	; 62
    4a70:	df 91       	pop	r29
    4a72:	cf 91       	pop	r28
    4a74:	1f 91       	pop	r17
    4a76:	0f 91       	pop	r16
    4a78:	08 95       	ret

00004a7a <prvInitialiseNewQueue>:
    4a7a:	0f 93       	push	r16
    4a7c:	1f 93       	push	r17
    4a7e:	cf 93       	push	r28
    4a80:	df 93       	push	r29
    4a82:	cd b7       	in	r28, 0x3d	; 61
    4a84:	de b7       	in	r29, 0x3e	; 62
    4a86:	27 97       	sbiw	r28, 0x07	; 7
    4a88:	cd bf       	out	0x3d, r28	; 61
    4a8a:	de bf       	out	0x3e, r29	; 62
    4a8c:	89 83       	std	Y+1, r24	; 0x01
    4a8e:	6a 83       	std	Y+2, r22	; 0x02
    4a90:	4b 83       	std	Y+3, r20	; 0x03
    4a92:	5c 83       	std	Y+4, r21	; 0x04
    4a94:	2d 83       	std	Y+5, r18	; 0x05
    4a96:	0e 83       	std	Y+6, r16	; 0x06
    4a98:	1f 83       	std	Y+7, r17	; 0x07
    4a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9c:	88 23       	and	r24, r24
    4a9e:	41 f4       	brne	.+16     	; 0x4ab0 <prvInitialiseNewQueue+0x36>
    4aa0:	8e 81       	ldd	r24, Y+6	; 0x06
    4aa2:	9f 81       	ldd	r25, Y+7	; 0x07
    4aa4:	2e 81       	ldd	r18, Y+6	; 0x06
    4aa6:	3f 81       	ldd	r19, Y+7	; 0x07
    4aa8:	fc 01       	movw	r30, r24
    4aaa:	20 83       	st	Z, r18
    4aac:	31 83       	std	Z+1, r19	; 0x01
    4aae:	07 c0       	rjmp	.+14     	; 0x4abe <prvInitialiseNewQueue+0x44>
    4ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    4ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    4ab4:	2b 81       	ldd	r18, Y+3	; 0x03
    4ab6:	3c 81       	ldd	r19, Y+4	; 0x04
    4ab8:	fc 01       	movw	r30, r24
    4aba:	20 83       	st	Z, r18
    4abc:	31 83       	std	Z+1, r19	; 0x01
    4abe:	8e 81       	ldd	r24, Y+6	; 0x06
    4ac0:	9f 81       	ldd	r25, Y+7	; 0x07
    4ac2:	29 81       	ldd	r18, Y+1	; 0x01
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	27 8f       	std	Z+31, r18	; 0x1f
    4ac8:	8e 81       	ldd	r24, Y+6	; 0x06
    4aca:	9f 81       	ldd	r25, Y+7	; 0x07
    4acc:	2a 81       	ldd	r18, Y+2	; 0x02
    4ace:	fc 01       	movw	r30, r24
    4ad0:	20 a3       	std	Z+32, r18	; 0x20
    4ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    4ad4:	9f 81       	ldd	r25, Y+7	; 0x07
    4ad6:	61 e0       	ldi	r22, 0x01	; 1
    4ad8:	0e 94 61 24 	call	0x48c2	; 0x48c2 <xQueueGenericReset>
    4adc:	8e 81       	ldd	r24, Y+6	; 0x06
    4ade:	9f 81       	ldd	r25, Y+7	; 0x07
    4ae0:	2d 81       	ldd	r18, Y+5	; 0x05
    4ae2:	fc 01       	movw	r30, r24
    4ae4:	24 a3       	std	Z+36, r18	; 0x24
    4ae6:	00 00       	nop
    4ae8:	27 96       	adiw	r28, 0x07	; 7
    4aea:	cd bf       	out	0x3d, r28	; 61
    4aec:	de bf       	out	0x3e, r29	; 62
    4aee:	df 91       	pop	r29
    4af0:	cf 91       	pop	r28
    4af2:	1f 91       	pop	r17
    4af4:	0f 91       	pop	r16
    4af6:	08 95       	ret

00004af8 <xQueueGenericSend>:
    4af8:	0f 93       	push	r16
    4afa:	cf 93       	push	r28
    4afc:	df 93       	push	r29
    4afe:	cd b7       	in	r28, 0x3d	; 61
    4b00:	de b7       	in	r29, 0x3e	; 62
    4b02:	62 97       	sbiw	r28, 0x12	; 18
    4b04:	cd bf       	out	0x3d, r28	; 61
    4b06:	de bf       	out	0x3e, r29	; 62
    4b08:	8a 87       	std	Y+10, r24	; 0x0a
    4b0a:	9b 87       	std	Y+11, r25	; 0x0b
    4b0c:	6c 87       	std	Y+12, r22	; 0x0c
    4b0e:	7d 87       	std	Y+13, r23	; 0x0d
    4b10:	2e 87       	std	Y+14, r18	; 0x0e
    4b12:	3f 87       	std	Y+15, r19	; 0x0f
    4b14:	48 8b       	std	Y+16, r20	; 0x10
    4b16:	59 8b       	std	Y+17, r21	; 0x11
    4b18:	0a 8b       	std	Y+18, r16	; 0x12
    4b1a:	19 82       	std	Y+1, r1	; 0x01
    4b1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b20:	8a 83       	std	Y+2, r24	; 0x02
    4b22:	9b 83       	std	Y+3, r25	; 0x03
    4b24:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4b28:	ff 93       	push	r31
    4b2a:	f8 7f       	andi	r31, 0xF8	; 248
    4b2c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4b30:	8a 81       	ldd	r24, Y+2	; 0x02
    4b32:	9b 81       	ldd	r25, Y+3	; 0x03
    4b34:	fc 01       	movw	r30, r24
    4b36:	26 8d       	ldd	r18, Z+30	; 0x1e
    4b38:	8a 81       	ldd	r24, Y+2	; 0x02
    4b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b3c:	fc 01       	movw	r30, r24
    4b3e:	87 8d       	ldd	r24, Z+31	; 0x1f
    4b40:	28 17       	cp	r18, r24
    4b42:	18 f0       	brcs	.+6      	; 0x4b4a <xQueueGenericSend+0x52>
    4b44:	8a 89       	ldd	r24, Y+18	; 0x12
    4b46:	82 30       	cpi	r24, 0x02	; 2
    4b48:	19 f5       	brne	.+70     	; 0x4b90 <xQueueGenericSend+0x98>
    4b4a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b4c:	3d 85       	ldd	r19, Y+13	; 0x0d
    4b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b50:	9b 81       	ldd	r25, Y+3	; 0x03
    4b52:	4a 89       	ldd	r20, Y+18	; 0x12
    4b54:	b9 01       	movw	r22, r18
    4b56:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <prvCopyDataToQueue>
    4b5a:	8c 83       	std	Y+4, r24	; 0x04
    4b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b60:	fc 01       	movw	r30, r24
    4b62:	83 89       	ldd	r24, Z+19	; 0x13
    4b64:	88 23       	and	r24, r24
    4b66:	51 f0       	breq	.+20     	; 0x4b7c <xQueueGenericSend+0x84>
    4b68:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b6c:	43 96       	adiw	r24, 0x13	; 19
    4b6e:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <xTaskRemoveFromEventList>
    4b72:	88 23       	and	r24, r24
    4b74:	41 f0       	breq	.+16     	; 0x4b86 <xQueueGenericSend+0x8e>
    4b76:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    4b7a:	05 c0       	rjmp	.+10     	; 0x4b86 <xQueueGenericSend+0x8e>
    4b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4b7e:	88 23       	and	r24, r24
    4b80:	11 f0       	breq	.+4      	; 0x4b86 <xQueueGenericSend+0x8e>
    4b82:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    4b86:	ff 91       	pop	r31
    4b88:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	6f c0       	rjmp	.+222    	; 0x4c6e <xQueueGenericSend+0x176>
    4b90:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b92:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b94:	a8 89       	ldd	r26, Y+16	; 0x10
    4b96:	b9 89       	ldd	r27, Y+17	; 0x11
    4b98:	89 2b       	or	r24, r25
    4b9a:	8a 2b       	or	r24, r26
    4b9c:	8b 2b       	or	r24, r27
    4b9e:	29 f4       	brne	.+10     	; 0x4baa <xQueueGenericSend+0xb2>
    4ba0:	ff 91       	pop	r31
    4ba2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4ba6:	80 e0       	ldi	r24, 0x00	; 0
    4ba8:	62 c0       	rjmp	.+196    	; 0x4c6e <xQueueGenericSend+0x176>
    4baa:	89 81       	ldd	r24, Y+1	; 0x01
    4bac:	88 23       	and	r24, r24
    4bae:	31 f4       	brne	.+12     	; 0x4bbc <xQueueGenericSend+0xc4>
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	05 96       	adiw	r24, 0x05	; 5
    4bb4:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <vTaskInternalSetTimeOutState>
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	89 83       	std	Y+1, r24	; 0x01
    4bbc:	ff 91       	pop	r31
    4bbe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4bc2:	0e 94 c5 2b 	call	0x578a	; 0x578a <vTaskSuspendAll>
    4bc6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4bca:	ff 93       	push	r31
    4bcc:	f8 7f       	andi	r31, 0xF8	; 248
    4bce:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    4bd6:	fc 01       	movw	r30, r24
    4bd8:	81 a1       	ldd	r24, Z+33	; 0x21
    4bda:	8f 3f       	cpi	r24, 0xFF	; 255
    4bdc:	21 f4       	brne	.+8      	; 0x4be6 <xQueueGenericSend+0xee>
    4bde:	8a 81       	ldd	r24, Y+2	; 0x02
    4be0:	9b 81       	ldd	r25, Y+3	; 0x03
    4be2:	fc 01       	movw	r30, r24
    4be4:	11 a2       	std	Z+33, r1	; 0x21
    4be6:	8a 81       	ldd	r24, Y+2	; 0x02
    4be8:	9b 81       	ldd	r25, Y+3	; 0x03
    4bea:	fc 01       	movw	r30, r24
    4bec:	82 a1       	ldd	r24, Z+34	; 0x22
    4bee:	8f 3f       	cpi	r24, 0xFF	; 255
    4bf0:	21 f4       	brne	.+8      	; 0x4bfa <xQueueGenericSend+0x102>
    4bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	12 a2       	std	Z+34, r1	; 0x22
    4bfa:	ff 91       	pop	r31
    4bfc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4c00:	9e 01       	movw	r18, r28
    4c02:	22 5f       	subi	r18, 0xF2	; 242
    4c04:	3f 4f       	sbci	r19, 0xFF	; 255
    4c06:	ce 01       	movw	r24, r28
    4c08:	05 96       	adiw	r24, 0x05	; 5
    4c0a:	b9 01       	movw	r22, r18
    4c0c:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <xTaskCheckForTimeOut>
    4c10:	88 23       	and	r24, r24
    4c12:	31 f5       	brne	.+76     	; 0x4c60 <xQueueGenericSend+0x168>
    4c14:	8a 81       	ldd	r24, Y+2	; 0x02
    4c16:	9b 81       	ldd	r25, Y+3	; 0x03
    4c18:	0e 94 05 29 	call	0x520a	; 0x520a <prvIsQueueFull>
    4c1c:	88 23       	and	r24, r24
    4c1e:	c9 f0       	breq	.+50     	; 0x4c52 <xQueueGenericSend+0x15a>
    4c20:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c22:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c24:	a8 89       	ldd	r26, Y+16	; 0x10
    4c26:	b9 89       	ldd	r27, Y+17	; 0x11
    4c28:	2a 81       	ldd	r18, Y+2	; 0x02
    4c2a:	3b 81       	ldd	r19, Y+3	; 0x03
    4c2c:	28 5f       	subi	r18, 0xF8	; 248
    4c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c30:	ac 01       	movw	r20, r24
    4c32:	bd 01       	movw	r22, r26
    4c34:	c9 01       	movw	r24, r18
    4c36:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <vTaskPlaceOnEventList>
    4c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c3e:	0e 94 7f 28 	call	0x50fe	; 0x50fe <prvUnlockQueue>
    4c42:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    4c46:	88 23       	and	r24, r24
    4c48:	09 f0       	breq	.+2      	; 0x4c4c <xQueueGenericSend+0x154>
    4c4a:	6c cf       	rjmp	.-296    	; 0x4b24 <xQueueGenericSend+0x2c>
    4c4c:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    4c50:	69 cf       	rjmp	.-302    	; 0x4b24 <xQueueGenericSend+0x2c>
    4c52:	8a 81       	ldd	r24, Y+2	; 0x02
    4c54:	9b 81       	ldd	r25, Y+3	; 0x03
    4c56:	0e 94 7f 28 	call	0x50fe	; 0x50fe <prvUnlockQueue>
    4c5a:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    4c5e:	62 cf       	rjmp	.-316    	; 0x4b24 <xQueueGenericSend+0x2c>
    4c60:	8a 81       	ldd	r24, Y+2	; 0x02
    4c62:	9b 81       	ldd	r25, Y+3	; 0x03
    4c64:	0e 94 7f 28 	call	0x50fe	; 0x50fe <prvUnlockQueue>
    4c68:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    4c6c:	80 e0       	ldi	r24, 0x00	; 0
    4c6e:	62 96       	adiw	r28, 0x12	; 18
    4c70:	cd bf       	out	0x3d, r28	; 61
    4c72:	de bf       	out	0x3e, r29	; 62
    4c74:	df 91       	pop	r29
    4c76:	cf 91       	pop	r28
    4c78:	0f 91       	pop	r16
    4c7a:	08 95       	ret

00004c7c <xQueueGenericSendFromISR>:
    4c7c:	cf 93       	push	r28
    4c7e:	df 93       	push	r29
    4c80:	cd b7       	in	r28, 0x3d	; 61
    4c82:	de b7       	in	r29, 0x3e	; 62
    4c84:	2c 97       	sbiw	r28, 0x0c	; 12
    4c86:	cd bf       	out	0x3d, r28	; 61
    4c88:	de bf       	out	0x3e, r29	; 62
    4c8a:	8e 83       	std	Y+6, r24	; 0x06
    4c8c:	9f 83       	std	Y+7, r25	; 0x07
    4c8e:	68 87       	std	Y+8, r22	; 0x08
    4c90:	79 87       	std	Y+9, r23	; 0x09
    4c92:	4a 87       	std	Y+10, r20	; 0x0a
    4c94:	5b 87       	std	Y+11, r21	; 0x0b
    4c96:	2c 87       	std	Y+12, r18	; 0x0c
    4c98:	8e 81       	ldd	r24, Y+6	; 0x06
    4c9a:	9f 81       	ldd	r25, Y+7	; 0x07
    4c9c:	8a 83       	std	Y+2, r24	; 0x02
    4c9e:	9b 83       	std	Y+3, r25	; 0x03
    4ca0:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <_portSetInterruptMaskFromIsr>
    4ca4:	8c 83       	std	Y+4, r24	; 0x04
    4ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    4caa:	fc 01       	movw	r30, r24
    4cac:	26 8d       	ldd	r18, Z+30	; 0x1e
    4cae:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	87 8d       	ldd	r24, Z+31	; 0x1f
    4cb6:	28 17       	cp	r18, r24
    4cb8:	18 f0       	brcs	.+6      	; 0x4cc0 <xQueueGenericSendFromISR+0x44>
    4cba:	8c 85       	ldd	r24, Y+12	; 0x0c
    4cbc:	82 30       	cpi	r24, 0x02	; 2
    4cbe:	89 f5       	brne	.+98     	; 0x4d22 <xQueueGenericSendFromISR+0xa6>
    4cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    4cc4:	fc 01       	movw	r30, r24
    4cc6:	82 a1       	ldd	r24, Z+34	; 0x22
    4cc8:	8d 83       	std	Y+5, r24	; 0x05
    4cca:	28 85       	ldd	r18, Y+8	; 0x08
    4ccc:	39 85       	ldd	r19, Y+9	; 0x09
    4cce:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd0:	9b 81       	ldd	r25, Y+3	; 0x03
    4cd2:	4c 85       	ldd	r20, Y+12	; 0x0c
    4cd4:	b9 01       	movw	r22, r18
    4cd6:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <prvCopyDataToQueue>
    4cda:	8d 81       	ldd	r24, Y+5	; 0x05
    4cdc:	8f 3f       	cpi	r24, 0xFF	; 255
    4cde:	b9 f4       	brne	.+46     	; 0x4d0e <xQueueGenericSendFromISR+0x92>
    4ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ce4:	fc 01       	movw	r30, r24
    4ce6:	83 89       	ldd	r24, Z+19	; 0x13
    4ce8:	88 23       	and	r24, r24
    4cea:	c1 f0       	breq	.+48     	; 0x4d1c <xQueueGenericSendFromISR+0xa0>
    4cec:	8a 81       	ldd	r24, Y+2	; 0x02
    4cee:	9b 81       	ldd	r25, Y+3	; 0x03
    4cf0:	43 96       	adiw	r24, 0x13	; 19
    4cf2:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <xTaskRemoveFromEventList>
    4cf6:	88 23       	and	r24, r24
    4cf8:	89 f0       	breq	.+34     	; 0x4d1c <xQueueGenericSendFromISR+0xa0>
    4cfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cfc:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cfe:	89 2b       	or	r24, r25
    4d00:	69 f0       	breq	.+26     	; 0x4d1c <xQueueGenericSendFromISR+0xa0>
    4d02:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d04:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d06:	21 e0       	ldi	r18, 0x01	; 1
    4d08:	fc 01       	movw	r30, r24
    4d0a:	20 83       	st	Z, r18
    4d0c:	07 c0       	rjmp	.+14     	; 0x4d1c <xQueueGenericSendFromISR+0xa0>
    4d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d10:	8f 5f       	subi	r24, 0xFF	; 255
    4d12:	28 2f       	mov	r18, r24
    4d14:	8a 81       	ldd	r24, Y+2	; 0x02
    4d16:	9b 81       	ldd	r25, Y+3	; 0x03
    4d18:	fc 01       	movw	r30, r24
    4d1a:	22 a3       	std	Z+34, r18	; 0x22
    4d1c:	81 e0       	ldi	r24, 0x01	; 1
    4d1e:	89 83       	std	Y+1, r24	; 0x01
    4d20:	01 c0       	rjmp	.+2      	; 0x4d24 <xQueueGenericSendFromISR+0xa8>
    4d22:	19 82       	std	Y+1, r1	; 0x01
    4d24:	80 ea       	ldi	r24, 0xA0	; 160
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	2c 81       	ldd	r18, Y+4	; 0x04
    4d2a:	fc 01       	movw	r30, r24
    4d2c:	22 83       	std	Z+2, r18	; 0x02
    4d2e:	89 81       	ldd	r24, Y+1	; 0x01
    4d30:	2c 96       	adiw	r28, 0x0c	; 12
    4d32:	cd bf       	out	0x3d, r28	; 61
    4d34:	de bf       	out	0x3e, r29	; 62
    4d36:	df 91       	pop	r29
    4d38:	cf 91       	pop	r28
    4d3a:	08 95       	ret

00004d3c <xQueueReceive>:
    4d3c:	cf 93       	push	r28
    4d3e:	df 93       	push	r29
    4d40:	cd b7       	in	r28, 0x3d	; 61
    4d42:	de b7       	in	r29, 0x3e	; 62
    4d44:	61 97       	sbiw	r28, 0x11	; 17
    4d46:	cd bf       	out	0x3d, r28	; 61
    4d48:	de bf       	out	0x3e, r29	; 62
    4d4a:	8a 87       	std	Y+10, r24	; 0x0a
    4d4c:	9b 87       	std	Y+11, r25	; 0x0b
    4d4e:	6c 87       	std	Y+12, r22	; 0x0c
    4d50:	7d 87       	std	Y+13, r23	; 0x0d
    4d52:	2e 87       	std	Y+14, r18	; 0x0e
    4d54:	3f 87       	std	Y+15, r19	; 0x0f
    4d56:	48 8b       	std	Y+16, r20	; 0x10
    4d58:	59 8b       	std	Y+17, r21	; 0x11
    4d5a:	19 82       	std	Y+1, r1	; 0x01
    4d5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d60:	8a 83       	std	Y+2, r24	; 0x02
    4d62:	9b 83       	std	Y+3, r25	; 0x03
    4d64:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4d68:	ff 93       	push	r31
    4d6a:	f8 7f       	andi	r31, 0xF8	; 248
    4d6c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4d70:	8a 81       	ldd	r24, Y+2	; 0x02
    4d72:	9b 81       	ldd	r25, Y+3	; 0x03
    4d74:	fc 01       	movw	r30, r24
    4d76:	86 8d       	ldd	r24, Z+30	; 0x1e
    4d78:	8c 83       	std	Y+4, r24	; 0x04
    4d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    4d7c:	88 23       	and	r24, r24
    4d7e:	11 f1       	breq	.+68     	; 0x4dc4 <xQueueReceive+0x88>
    4d80:	2c 85       	ldd	r18, Y+12	; 0x0c
    4d82:	3d 85       	ldd	r19, Y+13	; 0x0d
    4d84:	8a 81       	ldd	r24, Y+2	; 0x02
    4d86:	9b 81       	ldd	r25, Y+3	; 0x03
    4d88:	b9 01       	movw	r22, r18
    4d8a:	0e 94 2f 28 	call	0x505e	; 0x505e <prvCopyDataFromQueue>
    4d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    4d90:	2f ef       	ldi	r18, 0xFF	; 255
    4d92:	28 0f       	add	r18, r24
    4d94:	8a 81       	ldd	r24, Y+2	; 0x02
    4d96:	9b 81       	ldd	r25, Y+3	; 0x03
    4d98:	fc 01       	movw	r30, r24
    4d9a:	26 8f       	std	Z+30, r18	; 0x1e
    4d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    4da0:	fc 01       	movw	r30, r24
    4da2:	80 85       	ldd	r24, Z+8	; 0x08
    4da4:	88 23       	and	r24, r24
    4da6:	49 f0       	breq	.+18     	; 0x4dba <xQueueReceive+0x7e>
    4da8:	8a 81       	ldd	r24, Y+2	; 0x02
    4daa:	9b 81       	ldd	r25, Y+3	; 0x03
    4dac:	08 96       	adiw	r24, 0x08	; 8
    4dae:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <xTaskRemoveFromEventList>
    4db2:	88 23       	and	r24, r24
    4db4:	11 f0       	breq	.+4      	; 0x4dba <xQueueReceive+0x7e>
    4db6:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    4dba:	ff 91       	pop	r31
    4dbc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4dc0:	81 e0       	ldi	r24, 0x01	; 1
    4dc2:	76 c0       	rjmp	.+236    	; 0x4eb0 <xQueueReceive+0x174>
    4dc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4dc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    4dc8:	a8 89       	ldd	r26, Y+16	; 0x10
    4dca:	b9 89       	ldd	r27, Y+17	; 0x11
    4dcc:	89 2b       	or	r24, r25
    4dce:	8a 2b       	or	r24, r26
    4dd0:	8b 2b       	or	r24, r27
    4dd2:	29 f4       	brne	.+10     	; 0x4dde <xQueueReceive+0xa2>
    4dd4:	ff 91       	pop	r31
    4dd6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4dda:	80 e0       	ldi	r24, 0x00	; 0
    4ddc:	69 c0       	rjmp	.+210    	; 0x4eb0 <xQueueReceive+0x174>
    4dde:	89 81       	ldd	r24, Y+1	; 0x01
    4de0:	88 23       	and	r24, r24
    4de2:	31 f4       	brne	.+12     	; 0x4df0 <xQueueReceive+0xb4>
    4de4:	ce 01       	movw	r24, r28
    4de6:	05 96       	adiw	r24, 0x05	; 5
    4de8:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <vTaskInternalSetTimeOutState>
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	89 83       	std	Y+1, r24	; 0x01
    4df0:	ff 91       	pop	r31
    4df2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4df6:	0e 94 c5 2b 	call	0x578a	; 0x578a <vTaskSuspendAll>
    4dfa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4dfe:	ff 93       	push	r31
    4e00:	f8 7f       	andi	r31, 0xF8	; 248
    4e02:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4e06:	8a 81       	ldd	r24, Y+2	; 0x02
    4e08:	9b 81       	ldd	r25, Y+3	; 0x03
    4e0a:	fc 01       	movw	r30, r24
    4e0c:	81 a1       	ldd	r24, Z+33	; 0x21
    4e0e:	8f 3f       	cpi	r24, 0xFF	; 255
    4e10:	21 f4       	brne	.+8      	; 0x4e1a <xQueueReceive+0xde>
    4e12:	8a 81       	ldd	r24, Y+2	; 0x02
    4e14:	9b 81       	ldd	r25, Y+3	; 0x03
    4e16:	fc 01       	movw	r30, r24
    4e18:	11 a2       	std	Z+33, r1	; 0x21
    4e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e1e:	fc 01       	movw	r30, r24
    4e20:	82 a1       	ldd	r24, Z+34	; 0x22
    4e22:	8f 3f       	cpi	r24, 0xFF	; 255
    4e24:	21 f4       	brne	.+8      	; 0x4e2e <xQueueReceive+0xf2>
    4e26:	8a 81       	ldd	r24, Y+2	; 0x02
    4e28:	9b 81       	ldd	r25, Y+3	; 0x03
    4e2a:	fc 01       	movw	r30, r24
    4e2c:	12 a2       	std	Z+34, r1	; 0x22
    4e2e:	ff 91       	pop	r31
    4e30:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4e34:	9e 01       	movw	r18, r28
    4e36:	22 5f       	subi	r18, 0xF2	; 242
    4e38:	3f 4f       	sbci	r19, 0xFF	; 255
    4e3a:	ce 01       	movw	r24, r28
    4e3c:	05 96       	adiw	r24, 0x05	; 5
    4e3e:	b9 01       	movw	r22, r18
    4e40:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <xTaskCheckForTimeOut>
    4e44:	88 23       	and	r24, r24
    4e46:	31 f5       	brne	.+76     	; 0x4e94 <xQueueReceive+0x158>
    4e48:	8a 81       	ldd	r24, Y+2	; 0x02
    4e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    4e4c:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <prvIsQueueEmpty>
    4e50:	88 23       	and	r24, r24
    4e52:	c9 f0       	breq	.+50     	; 0x4e86 <xQueueReceive+0x14a>
    4e54:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e56:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e58:	a8 89       	ldd	r26, Y+16	; 0x10
    4e5a:	b9 89       	ldd	r27, Y+17	; 0x11
    4e5c:	2a 81       	ldd	r18, Y+2	; 0x02
    4e5e:	3b 81       	ldd	r19, Y+3	; 0x03
    4e60:	2d 5e       	subi	r18, 0xED	; 237
    4e62:	3f 4f       	sbci	r19, 0xFF	; 255
    4e64:	ac 01       	movw	r20, r24
    4e66:	bd 01       	movw	r22, r26
    4e68:	c9 01       	movw	r24, r18
    4e6a:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <vTaskPlaceOnEventList>
    4e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e70:	9b 81       	ldd	r25, Y+3	; 0x03
    4e72:	0e 94 7f 28 	call	0x50fe	; 0x50fe <prvUnlockQueue>
    4e76:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    4e7a:	88 23       	and	r24, r24
    4e7c:	09 f0       	breq	.+2      	; 0x4e80 <xQueueReceive+0x144>
    4e7e:	72 cf       	rjmp	.-284    	; 0x4d64 <xQueueReceive+0x28>
    4e80:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    4e84:	6f cf       	rjmp	.-290    	; 0x4d64 <xQueueReceive+0x28>
    4e86:	8a 81       	ldd	r24, Y+2	; 0x02
    4e88:	9b 81       	ldd	r25, Y+3	; 0x03
    4e8a:	0e 94 7f 28 	call	0x50fe	; 0x50fe <prvUnlockQueue>
    4e8e:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    4e92:	68 cf       	rjmp	.-304    	; 0x4d64 <xQueueReceive+0x28>
    4e94:	8a 81       	ldd	r24, Y+2	; 0x02
    4e96:	9b 81       	ldd	r25, Y+3	; 0x03
    4e98:	0e 94 7f 28 	call	0x50fe	; 0x50fe <prvUnlockQueue>
    4e9c:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    4ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ea4:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <prvIsQueueEmpty>
    4ea8:	88 23       	and	r24, r24
    4eaa:	09 f4       	brne	.+2      	; 0x4eae <xQueueReceive+0x172>
    4eac:	5b cf       	rjmp	.-330    	; 0x4d64 <xQueueReceive+0x28>
    4eae:	80 e0       	ldi	r24, 0x00	; 0
    4eb0:	61 96       	adiw	r28, 0x11	; 17
    4eb2:	cd bf       	out	0x3d, r28	; 61
    4eb4:	de bf       	out	0x3e, r29	; 62
    4eb6:	df 91       	pop	r29
    4eb8:	cf 91       	pop	r28
    4eba:	08 95       	ret

00004ebc <uxQueueMessagesWaiting>:
    4ebc:	cf 93       	push	r28
    4ebe:	df 93       	push	r29
    4ec0:	00 d0       	rcall	.+0      	; 0x4ec2 <uxQueueMessagesWaiting+0x6>
    4ec2:	cd b7       	in	r28, 0x3d	; 61
    4ec4:	de b7       	in	r29, 0x3e	; 62
    4ec6:	8a 83       	std	Y+2, r24	; 0x02
    4ec8:	9b 83       	std	Y+3, r25	; 0x03
    4eca:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4ece:	ff 93       	push	r31
    4ed0:	f8 7f       	andi	r31, 0xF8	; 248
    4ed2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    4eda:	fc 01       	movw	r30, r24
    4edc:	86 8d       	ldd	r24, Z+30	; 0x1e
    4ede:	89 83       	std	Y+1, r24	; 0x01
    4ee0:	ff 91       	pop	r31
    4ee2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4ee6:	89 81       	ldd	r24, Y+1	; 0x01
    4ee8:	23 96       	adiw	r28, 0x03	; 3
    4eea:	cd bf       	out	0x3d, r28	; 61
    4eec:	de bf       	out	0x3e, r29	; 62
    4eee:	df 91       	pop	r29
    4ef0:	cf 91       	pop	r28
    4ef2:	08 95       	ret

00004ef4 <prvCopyDataToQueue>:
    4ef4:	cf 93       	push	r28
    4ef6:	df 93       	push	r29
    4ef8:	cd b7       	in	r28, 0x3d	; 61
    4efa:	de b7       	in	r29, 0x3e	; 62
    4efc:	27 97       	sbiw	r28, 0x07	; 7
    4efe:	cd bf       	out	0x3d, r28	; 61
    4f00:	de bf       	out	0x3e, r29	; 62
    4f02:	8b 83       	std	Y+3, r24	; 0x03
    4f04:	9c 83       	std	Y+4, r25	; 0x04
    4f06:	6d 83       	std	Y+5, r22	; 0x05
    4f08:	7e 83       	std	Y+6, r23	; 0x06
    4f0a:	4f 83       	std	Y+7, r20	; 0x07
    4f0c:	1a 82       	std	Y+2, r1	; 0x02
    4f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f10:	9c 81       	ldd	r25, Y+4	; 0x04
    4f12:	fc 01       	movw	r30, r24
    4f14:	86 8d       	ldd	r24, Z+30	; 0x1e
    4f16:	89 83       	std	Y+1, r24	; 0x01
    4f18:	8b 81       	ldd	r24, Y+3	; 0x03
    4f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f1c:	fc 01       	movw	r30, r24
    4f1e:	80 a1       	ldd	r24, Z+32	; 0x20
    4f20:	88 23       	and	r24, r24
    4f22:	09 f4       	brne	.+2      	; 0x4f26 <prvCopyDataToQueue+0x32>
    4f24:	8e c0       	rjmp	.+284    	; 0x5042 <prvCopyDataToQueue+0x14e>
    4f26:	8f 81       	ldd	r24, Y+7	; 0x07
    4f28:	88 23       	and	r24, r24
    4f2a:	d9 f5       	brne	.+118    	; 0x4fa2 <prvCopyDataToQueue+0xae>
    4f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f30:	fc 01       	movw	r30, r24
    4f32:	80 a1       	ldd	r24, Z+32	; 0x20
    4f34:	48 2f       	mov	r20, r24
    4f36:	50 e0       	ldi	r21, 0x00	; 0
    4f38:	8b 81       	ldd	r24, Y+3	; 0x03
    4f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f3c:	fc 01       	movw	r30, r24
    4f3e:	84 81       	ldd	r24, Z+4	; 0x04
    4f40:	95 81       	ldd	r25, Z+5	; 0x05
    4f42:	2d 81       	ldd	r18, Y+5	; 0x05
    4f44:	3e 81       	ldd	r19, Y+6	; 0x06
    4f46:	b9 01       	movw	r22, r18
    4f48:	0e 94 c9 4c 	call	0x9992	; 0x9992 <memcpy>
    4f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f50:	fc 01       	movw	r30, r24
    4f52:	24 81       	ldd	r18, Z+4	; 0x04
    4f54:	35 81       	ldd	r19, Z+5	; 0x05
    4f56:	8b 81       	ldd	r24, Y+3	; 0x03
    4f58:	9c 81       	ldd	r25, Y+4	; 0x04
    4f5a:	fc 01       	movw	r30, r24
    4f5c:	80 a1       	ldd	r24, Z+32	; 0x20
    4f5e:	88 2f       	mov	r24, r24
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	28 0f       	add	r18, r24
    4f64:	39 1f       	adc	r19, r25
    4f66:	8b 81       	ldd	r24, Y+3	; 0x03
    4f68:	9c 81       	ldd	r25, Y+4	; 0x04
    4f6a:	fc 01       	movw	r30, r24
    4f6c:	24 83       	std	Z+4, r18	; 0x04
    4f6e:	35 83       	std	Z+5, r19	; 0x05
    4f70:	8b 81       	ldd	r24, Y+3	; 0x03
    4f72:	9c 81       	ldd	r25, Y+4	; 0x04
    4f74:	fc 01       	movw	r30, r24
    4f76:	24 81       	ldd	r18, Z+4	; 0x04
    4f78:	35 81       	ldd	r19, Z+5	; 0x05
    4f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7e:	fc 01       	movw	r30, r24
    4f80:	82 81       	ldd	r24, Z+2	; 0x02
    4f82:	93 81       	ldd	r25, Z+3	; 0x03
    4f84:	28 17       	cp	r18, r24
    4f86:	39 07       	cpc	r19, r25
    4f88:	08 f4       	brcc	.+2      	; 0x4f8c <prvCopyDataToQueue+0x98>
    4f8a:	5b c0       	rjmp	.+182    	; 0x5042 <prvCopyDataToQueue+0x14e>
    4f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f90:	fc 01       	movw	r30, r24
    4f92:	20 81       	ld	r18, Z
    4f94:	31 81       	ldd	r19, Z+1	; 0x01
    4f96:	8b 81       	ldd	r24, Y+3	; 0x03
    4f98:	9c 81       	ldd	r25, Y+4	; 0x04
    4f9a:	fc 01       	movw	r30, r24
    4f9c:	24 83       	std	Z+4, r18	; 0x04
    4f9e:	35 83       	std	Z+5, r19	; 0x05
    4fa0:	50 c0       	rjmp	.+160    	; 0x5042 <prvCopyDataToQueue+0x14e>
    4fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    4fa6:	fc 01       	movw	r30, r24
    4fa8:	80 a1       	ldd	r24, Z+32	; 0x20
    4faa:	48 2f       	mov	r20, r24
    4fac:	50 e0       	ldi	r21, 0x00	; 0
    4fae:	8b 81       	ldd	r24, Y+3	; 0x03
    4fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    4fb2:	fc 01       	movw	r30, r24
    4fb4:	86 81       	ldd	r24, Z+6	; 0x06
    4fb6:	97 81       	ldd	r25, Z+7	; 0x07
    4fb8:	2d 81       	ldd	r18, Y+5	; 0x05
    4fba:	3e 81       	ldd	r19, Y+6	; 0x06
    4fbc:	b9 01       	movw	r22, r18
    4fbe:	0e 94 c9 4c 	call	0x9992	; 0x9992 <memcpy>
    4fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    4fc6:	fc 01       	movw	r30, r24
    4fc8:	26 81       	ldd	r18, Z+6	; 0x06
    4fca:	37 81       	ldd	r19, Z+7	; 0x07
    4fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    4fce:	9c 81       	ldd	r25, Y+4	; 0x04
    4fd0:	fc 01       	movw	r30, r24
    4fd2:	80 a1       	ldd	r24, Z+32	; 0x20
    4fd4:	88 2f       	mov	r24, r24
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	91 95       	neg	r25
    4fda:	81 95       	neg	r24
    4fdc:	91 09       	sbc	r25, r1
    4fde:	28 0f       	add	r18, r24
    4fe0:	39 1f       	adc	r19, r25
    4fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe6:	fc 01       	movw	r30, r24
    4fe8:	26 83       	std	Z+6, r18	; 0x06
    4fea:	37 83       	std	Z+7, r19	; 0x07
    4fec:	8b 81       	ldd	r24, Y+3	; 0x03
    4fee:	9c 81       	ldd	r25, Y+4	; 0x04
    4ff0:	fc 01       	movw	r30, r24
    4ff2:	26 81       	ldd	r18, Z+6	; 0x06
    4ff4:	37 81       	ldd	r19, Z+7	; 0x07
    4ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    4ffa:	fc 01       	movw	r30, r24
    4ffc:	80 81       	ld	r24, Z
    4ffe:	91 81       	ldd	r25, Z+1	; 0x01
    5000:	28 17       	cp	r18, r24
    5002:	39 07       	cpc	r19, r25
    5004:	a8 f4       	brcc	.+42     	; 0x5030 <prvCopyDataToQueue+0x13c>
    5006:	8b 81       	ldd	r24, Y+3	; 0x03
    5008:	9c 81       	ldd	r25, Y+4	; 0x04
    500a:	fc 01       	movw	r30, r24
    500c:	22 81       	ldd	r18, Z+2	; 0x02
    500e:	33 81       	ldd	r19, Z+3	; 0x03
    5010:	8b 81       	ldd	r24, Y+3	; 0x03
    5012:	9c 81       	ldd	r25, Y+4	; 0x04
    5014:	fc 01       	movw	r30, r24
    5016:	80 a1       	ldd	r24, Z+32	; 0x20
    5018:	88 2f       	mov	r24, r24
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	91 95       	neg	r25
    501e:	81 95       	neg	r24
    5020:	91 09       	sbc	r25, r1
    5022:	28 0f       	add	r18, r24
    5024:	39 1f       	adc	r19, r25
    5026:	8b 81       	ldd	r24, Y+3	; 0x03
    5028:	9c 81       	ldd	r25, Y+4	; 0x04
    502a:	fc 01       	movw	r30, r24
    502c:	26 83       	std	Z+6, r18	; 0x06
    502e:	37 83       	std	Z+7, r19	; 0x07
    5030:	8f 81       	ldd	r24, Y+7	; 0x07
    5032:	82 30       	cpi	r24, 0x02	; 2
    5034:	31 f4       	brne	.+12     	; 0x5042 <prvCopyDataToQueue+0x14e>
    5036:	89 81       	ldd	r24, Y+1	; 0x01
    5038:	88 23       	and	r24, r24
    503a:	19 f0       	breq	.+6      	; 0x5042 <prvCopyDataToQueue+0x14e>
    503c:	89 81       	ldd	r24, Y+1	; 0x01
    503e:	81 50       	subi	r24, 0x01	; 1
    5040:	89 83       	std	Y+1, r24	; 0x01
    5042:	89 81       	ldd	r24, Y+1	; 0x01
    5044:	21 e0       	ldi	r18, 0x01	; 1
    5046:	28 0f       	add	r18, r24
    5048:	8b 81       	ldd	r24, Y+3	; 0x03
    504a:	9c 81       	ldd	r25, Y+4	; 0x04
    504c:	fc 01       	movw	r30, r24
    504e:	26 8f       	std	Z+30, r18	; 0x1e
    5050:	8a 81       	ldd	r24, Y+2	; 0x02
    5052:	27 96       	adiw	r28, 0x07	; 7
    5054:	cd bf       	out	0x3d, r28	; 61
    5056:	de bf       	out	0x3e, r29	; 62
    5058:	df 91       	pop	r29
    505a:	cf 91       	pop	r28
    505c:	08 95       	ret

0000505e <prvCopyDataFromQueue>:
    505e:	cf 93       	push	r28
    5060:	df 93       	push	r29
    5062:	00 d0       	rcall	.+0      	; 0x5064 <prvCopyDataFromQueue+0x6>
    5064:	1f 92       	push	r1
    5066:	cd b7       	in	r28, 0x3d	; 61
    5068:	de b7       	in	r29, 0x3e	; 62
    506a:	89 83       	std	Y+1, r24	; 0x01
    506c:	9a 83       	std	Y+2, r25	; 0x02
    506e:	6b 83       	std	Y+3, r22	; 0x03
    5070:	7c 83       	std	Y+4, r23	; 0x04
    5072:	89 81       	ldd	r24, Y+1	; 0x01
    5074:	9a 81       	ldd	r25, Y+2	; 0x02
    5076:	fc 01       	movw	r30, r24
    5078:	80 a1       	ldd	r24, Z+32	; 0x20
    507a:	88 23       	and	r24, r24
    507c:	c9 f1       	breq	.+114    	; 0x50f0 <prvCopyDataFromQueue+0x92>
    507e:	89 81       	ldd	r24, Y+1	; 0x01
    5080:	9a 81       	ldd	r25, Y+2	; 0x02
    5082:	fc 01       	movw	r30, r24
    5084:	26 81       	ldd	r18, Z+6	; 0x06
    5086:	37 81       	ldd	r19, Z+7	; 0x07
    5088:	89 81       	ldd	r24, Y+1	; 0x01
    508a:	9a 81       	ldd	r25, Y+2	; 0x02
    508c:	fc 01       	movw	r30, r24
    508e:	80 a1       	ldd	r24, Z+32	; 0x20
    5090:	88 2f       	mov	r24, r24
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	28 0f       	add	r18, r24
    5096:	39 1f       	adc	r19, r25
    5098:	89 81       	ldd	r24, Y+1	; 0x01
    509a:	9a 81       	ldd	r25, Y+2	; 0x02
    509c:	fc 01       	movw	r30, r24
    509e:	26 83       	std	Z+6, r18	; 0x06
    50a0:	37 83       	std	Z+7, r19	; 0x07
    50a2:	89 81       	ldd	r24, Y+1	; 0x01
    50a4:	9a 81       	ldd	r25, Y+2	; 0x02
    50a6:	fc 01       	movw	r30, r24
    50a8:	26 81       	ldd	r18, Z+6	; 0x06
    50aa:	37 81       	ldd	r19, Z+7	; 0x07
    50ac:	89 81       	ldd	r24, Y+1	; 0x01
    50ae:	9a 81       	ldd	r25, Y+2	; 0x02
    50b0:	fc 01       	movw	r30, r24
    50b2:	82 81       	ldd	r24, Z+2	; 0x02
    50b4:	93 81       	ldd	r25, Z+3	; 0x03
    50b6:	28 17       	cp	r18, r24
    50b8:	39 07       	cpc	r19, r25
    50ba:	50 f0       	brcs	.+20     	; 0x50d0 <prvCopyDataFromQueue+0x72>
    50bc:	89 81       	ldd	r24, Y+1	; 0x01
    50be:	9a 81       	ldd	r25, Y+2	; 0x02
    50c0:	fc 01       	movw	r30, r24
    50c2:	20 81       	ld	r18, Z
    50c4:	31 81       	ldd	r19, Z+1	; 0x01
    50c6:	89 81       	ldd	r24, Y+1	; 0x01
    50c8:	9a 81       	ldd	r25, Y+2	; 0x02
    50ca:	fc 01       	movw	r30, r24
    50cc:	26 83       	std	Z+6, r18	; 0x06
    50ce:	37 83       	std	Z+7, r19	; 0x07
    50d0:	89 81       	ldd	r24, Y+1	; 0x01
    50d2:	9a 81       	ldd	r25, Y+2	; 0x02
    50d4:	fc 01       	movw	r30, r24
    50d6:	80 a1       	ldd	r24, Z+32	; 0x20
    50d8:	48 2f       	mov	r20, r24
    50da:	50 e0       	ldi	r21, 0x00	; 0
    50dc:	89 81       	ldd	r24, Y+1	; 0x01
    50de:	9a 81       	ldd	r25, Y+2	; 0x02
    50e0:	fc 01       	movw	r30, r24
    50e2:	26 81       	ldd	r18, Z+6	; 0x06
    50e4:	37 81       	ldd	r19, Z+7	; 0x07
    50e6:	8b 81       	ldd	r24, Y+3	; 0x03
    50e8:	9c 81       	ldd	r25, Y+4	; 0x04
    50ea:	b9 01       	movw	r22, r18
    50ec:	0e 94 c9 4c 	call	0x9992	; 0x9992 <memcpy>
    50f0:	00 00       	nop
    50f2:	24 96       	adiw	r28, 0x04	; 4
    50f4:	cd bf       	out	0x3d, r28	; 61
    50f6:	de bf       	out	0x3e, r29	; 62
    50f8:	df 91       	pop	r29
    50fa:	cf 91       	pop	r28
    50fc:	08 95       	ret

000050fe <prvUnlockQueue>:
    50fe:	cf 93       	push	r28
    5100:	df 93       	push	r29
    5102:	00 d0       	rcall	.+0      	; 0x5104 <prvUnlockQueue+0x6>
    5104:	1f 92       	push	r1
    5106:	cd b7       	in	r28, 0x3d	; 61
    5108:	de b7       	in	r29, 0x3e	; 62
    510a:	8b 83       	std	Y+3, r24	; 0x03
    510c:	9c 83       	std	Y+4, r25	; 0x04
    510e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5112:	ff 93       	push	r31
    5114:	f8 7f       	andi	r31, 0xF8	; 248
    5116:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    511a:	8b 81       	ldd	r24, Y+3	; 0x03
    511c:	9c 81       	ldd	r25, Y+4	; 0x04
    511e:	fc 01       	movw	r30, r24
    5120:	82 a1       	ldd	r24, Z+34	; 0x22
    5122:	89 83       	std	Y+1, r24	; 0x01
    5124:	12 c0       	rjmp	.+36     	; 0x514a <prvUnlockQueue+0x4c>
    5126:	8b 81       	ldd	r24, Y+3	; 0x03
    5128:	9c 81       	ldd	r25, Y+4	; 0x04
    512a:	fc 01       	movw	r30, r24
    512c:	83 89       	ldd	r24, Z+19	; 0x13
    512e:	88 23       	and	r24, r24
    5130:	81 f0       	breq	.+32     	; 0x5152 <prvUnlockQueue+0x54>
    5132:	8b 81       	ldd	r24, Y+3	; 0x03
    5134:	9c 81       	ldd	r25, Y+4	; 0x04
    5136:	43 96       	adiw	r24, 0x13	; 19
    5138:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <xTaskRemoveFromEventList>
    513c:	88 23       	and	r24, r24
    513e:	11 f0       	breq	.+4      	; 0x5144 <prvUnlockQueue+0x46>
    5140:	0e 94 a1 30 	call	0x6142	; 0x6142 <vTaskMissedYield>
    5144:	89 81       	ldd	r24, Y+1	; 0x01
    5146:	81 50       	subi	r24, 0x01	; 1
    5148:	89 83       	std	Y+1, r24	; 0x01
    514a:	89 81       	ldd	r24, Y+1	; 0x01
    514c:	18 16       	cp	r1, r24
    514e:	5c f3       	brlt	.-42     	; 0x5126 <prvUnlockQueue+0x28>
    5150:	01 c0       	rjmp	.+2      	; 0x5154 <prvUnlockQueue+0x56>
    5152:	00 00       	nop
    5154:	8b 81       	ldd	r24, Y+3	; 0x03
    5156:	9c 81       	ldd	r25, Y+4	; 0x04
    5158:	2f ef       	ldi	r18, 0xFF	; 255
    515a:	fc 01       	movw	r30, r24
    515c:	22 a3       	std	Z+34, r18	; 0x22
    515e:	ff 91       	pop	r31
    5160:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5164:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5168:	ff 93       	push	r31
    516a:	f8 7f       	andi	r31, 0xF8	; 248
    516c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5170:	8b 81       	ldd	r24, Y+3	; 0x03
    5172:	9c 81       	ldd	r25, Y+4	; 0x04
    5174:	fc 01       	movw	r30, r24
    5176:	81 a1       	ldd	r24, Z+33	; 0x21
    5178:	8a 83       	std	Y+2, r24	; 0x02
    517a:	12 c0       	rjmp	.+36     	; 0x51a0 <prvUnlockQueue+0xa2>
    517c:	8b 81       	ldd	r24, Y+3	; 0x03
    517e:	9c 81       	ldd	r25, Y+4	; 0x04
    5180:	fc 01       	movw	r30, r24
    5182:	80 85       	ldd	r24, Z+8	; 0x08
    5184:	88 23       	and	r24, r24
    5186:	81 f0       	breq	.+32     	; 0x51a8 <prvUnlockQueue+0xaa>
    5188:	8b 81       	ldd	r24, Y+3	; 0x03
    518a:	9c 81       	ldd	r25, Y+4	; 0x04
    518c:	08 96       	adiw	r24, 0x08	; 8
    518e:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <xTaskRemoveFromEventList>
    5192:	88 23       	and	r24, r24
    5194:	11 f0       	breq	.+4      	; 0x519a <prvUnlockQueue+0x9c>
    5196:	0e 94 a1 30 	call	0x6142	; 0x6142 <vTaskMissedYield>
    519a:	8a 81       	ldd	r24, Y+2	; 0x02
    519c:	81 50       	subi	r24, 0x01	; 1
    519e:	8a 83       	std	Y+2, r24	; 0x02
    51a0:	8a 81       	ldd	r24, Y+2	; 0x02
    51a2:	18 16       	cp	r1, r24
    51a4:	5c f3       	brlt	.-42     	; 0x517c <prvUnlockQueue+0x7e>
    51a6:	01 c0       	rjmp	.+2      	; 0x51aa <prvUnlockQueue+0xac>
    51a8:	00 00       	nop
    51aa:	8b 81       	ldd	r24, Y+3	; 0x03
    51ac:	9c 81       	ldd	r25, Y+4	; 0x04
    51ae:	2f ef       	ldi	r18, 0xFF	; 255
    51b0:	fc 01       	movw	r30, r24
    51b2:	21 a3       	std	Z+33, r18	; 0x21
    51b4:	ff 91       	pop	r31
    51b6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    51ba:	00 00       	nop
    51bc:	24 96       	adiw	r28, 0x04	; 4
    51be:	cd bf       	out	0x3d, r28	; 61
    51c0:	de bf       	out	0x3e, r29	; 62
    51c2:	df 91       	pop	r29
    51c4:	cf 91       	pop	r28
    51c6:	08 95       	ret

000051c8 <prvIsQueueEmpty>:
    51c8:	cf 93       	push	r28
    51ca:	df 93       	push	r29
    51cc:	00 d0       	rcall	.+0      	; 0x51ce <prvIsQueueEmpty+0x6>
    51ce:	cd b7       	in	r28, 0x3d	; 61
    51d0:	de b7       	in	r29, 0x3e	; 62
    51d2:	8a 83       	std	Y+2, r24	; 0x02
    51d4:	9b 83       	std	Y+3, r25	; 0x03
    51d6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    51da:	ff 93       	push	r31
    51dc:	f8 7f       	andi	r31, 0xF8	; 248
    51de:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    51e2:	8a 81       	ldd	r24, Y+2	; 0x02
    51e4:	9b 81       	ldd	r25, Y+3	; 0x03
    51e6:	fc 01       	movw	r30, r24
    51e8:	86 8d       	ldd	r24, Z+30	; 0x1e
    51ea:	88 23       	and	r24, r24
    51ec:	19 f4       	brne	.+6      	; 0x51f4 <prvIsQueueEmpty+0x2c>
    51ee:	81 e0       	ldi	r24, 0x01	; 1
    51f0:	89 83       	std	Y+1, r24	; 0x01
    51f2:	01 c0       	rjmp	.+2      	; 0x51f6 <prvIsQueueEmpty+0x2e>
    51f4:	19 82       	std	Y+1, r1	; 0x01
    51f6:	ff 91       	pop	r31
    51f8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    51fc:	89 81       	ldd	r24, Y+1	; 0x01
    51fe:	23 96       	adiw	r28, 0x03	; 3
    5200:	cd bf       	out	0x3d, r28	; 61
    5202:	de bf       	out	0x3e, r29	; 62
    5204:	df 91       	pop	r29
    5206:	cf 91       	pop	r28
    5208:	08 95       	ret

0000520a <prvIsQueueFull>:
    520a:	cf 93       	push	r28
    520c:	df 93       	push	r29
    520e:	00 d0       	rcall	.+0      	; 0x5210 <prvIsQueueFull+0x6>
    5210:	cd b7       	in	r28, 0x3d	; 61
    5212:	de b7       	in	r29, 0x3e	; 62
    5214:	8a 83       	std	Y+2, r24	; 0x02
    5216:	9b 83       	std	Y+3, r25	; 0x03
    5218:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    521c:	ff 93       	push	r31
    521e:	f8 7f       	andi	r31, 0xF8	; 248
    5220:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5224:	8a 81       	ldd	r24, Y+2	; 0x02
    5226:	9b 81       	ldd	r25, Y+3	; 0x03
    5228:	fc 01       	movw	r30, r24
    522a:	26 8d       	ldd	r18, Z+30	; 0x1e
    522c:	8a 81       	ldd	r24, Y+2	; 0x02
    522e:	9b 81       	ldd	r25, Y+3	; 0x03
    5230:	fc 01       	movw	r30, r24
    5232:	87 8d       	ldd	r24, Z+31	; 0x1f
    5234:	28 17       	cp	r18, r24
    5236:	19 f4       	brne	.+6      	; 0x523e <prvIsQueueFull+0x34>
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	89 83       	std	Y+1, r24	; 0x01
    523c:	01 c0       	rjmp	.+2      	; 0x5240 <prvIsQueueFull+0x36>
    523e:	19 82       	std	Y+1, r1	; 0x01
    5240:	ff 91       	pop	r31
    5242:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5246:	89 81       	ldd	r24, Y+1	; 0x01
    5248:	23 96       	adiw	r28, 0x03	; 3
    524a:	cd bf       	out	0x3d, r28	; 61
    524c:	de bf       	out	0x3e, r29	; 62
    524e:	df 91       	pop	r29
    5250:	cf 91       	pop	r28
    5252:	08 95       	ret

00005254 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    5254:	cf 93       	push	r28
    5256:	df 93       	push	r29
    5258:	cd b7       	in	r28, 0x3d	; 61
    525a:	de b7       	in	r29, 0x3e	; 62
    525c:	29 97       	sbiw	r28, 0x09	; 9
    525e:	cd bf       	out	0x3d, r28	; 61
    5260:	de bf       	out	0x3e, r29	; 62
    5262:	8b 83       	std	Y+3, r24	; 0x03
    5264:	9c 83       	std	Y+4, r25	; 0x04
    5266:	4d 83       	std	Y+5, r20	; 0x05
    5268:	5e 83       	std	Y+6, r21	; 0x06
    526a:	6f 83       	std	Y+7, r22	; 0x07
    526c:	78 87       	std	Y+8, r23	; 0x08
    526e:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5270:	8b 81       	ldd	r24, Y+3	; 0x03
    5272:	9c 81       	ldd	r25, Y+4	; 0x04
    5274:	89 83       	std	Y+1, r24	; 0x01
    5276:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    5278:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    527c:	ff 93       	push	r31
    527e:	f8 7f       	andi	r31, 0xF8	; 248
    5280:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5284:	89 81       	ldd	r24, Y+1	; 0x01
    5286:	9a 81       	ldd	r25, Y+2	; 0x02
    5288:	fc 01       	movw	r30, r24
    528a:	81 a1       	ldd	r24, Z+33	; 0x21
    528c:	8f 3f       	cpi	r24, 0xFF	; 255
    528e:	21 f4       	brne	.+8      	; 0x5298 <vQueueWaitForMessageRestricted+0x44>
    5290:	89 81       	ldd	r24, Y+1	; 0x01
    5292:	9a 81       	ldd	r25, Y+2	; 0x02
    5294:	fc 01       	movw	r30, r24
    5296:	11 a2       	std	Z+33, r1	; 0x21
    5298:	89 81       	ldd	r24, Y+1	; 0x01
    529a:	9a 81       	ldd	r25, Y+2	; 0x02
    529c:	fc 01       	movw	r30, r24
    529e:	82 a1       	ldd	r24, Z+34	; 0x22
    52a0:	8f 3f       	cpi	r24, 0xFF	; 255
    52a2:	21 f4       	brne	.+8      	; 0x52ac <vQueueWaitForMessageRestricted+0x58>
    52a4:	89 81       	ldd	r24, Y+1	; 0x01
    52a6:	9a 81       	ldd	r25, Y+2	; 0x02
    52a8:	fc 01       	movw	r30, r24
    52aa:	12 a2       	std	Z+34, r1	; 0x22
    52ac:	ff 91       	pop	r31
    52ae:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    52b2:	89 81       	ldd	r24, Y+1	; 0x01
    52b4:	9a 81       	ldd	r25, Y+2	; 0x02
    52b6:	fc 01       	movw	r30, r24
    52b8:	86 8d       	ldd	r24, Z+30	; 0x1e
    52ba:	88 23       	and	r24, r24
    52bc:	71 f4       	brne	.+28     	; 0x52da <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    52be:	89 81       	ldd	r24, Y+1	; 0x01
    52c0:	9a 81       	ldd	r25, Y+2	; 0x02
    52c2:	fc 01       	movw	r30, r24
    52c4:	73 96       	adiw	r30, 0x13	; 19
    52c6:	8d 81       	ldd	r24, Y+5	; 0x05
    52c8:	9e 81       	ldd	r25, Y+6	; 0x06
    52ca:	af 81       	ldd	r26, Y+7	; 0x07
    52cc:	b8 85       	ldd	r27, Y+8	; 0x08
    52ce:	29 85       	ldd	r18, Y+9	; 0x09
    52d0:	ac 01       	movw	r20, r24
    52d2:	bd 01       	movw	r22, r26
    52d4:	cf 01       	movw	r24, r30
    52d6:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    52da:	89 81       	ldd	r24, Y+1	; 0x01
    52dc:	9a 81       	ldd	r25, Y+2	; 0x02
    52de:	0e 94 7f 28 	call	0x50fe	; 0x50fe <prvUnlockQueue>
	}
    52e2:	00 00       	nop
    52e4:	29 96       	adiw	r28, 0x09	; 9
    52e6:	cd bf       	out	0x3d, r28	; 61
    52e8:	de bf       	out	0x3e, r29	; 62
    52ea:	df 91       	pop	r29
    52ec:	cf 91       	pop	r28
    52ee:	08 95       	ret

000052f0 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    52f0:	8f 92       	push	r8
    52f2:	9f 92       	push	r9
    52f4:	af 92       	push	r10
    52f6:	bf 92       	push	r11
    52f8:	cf 92       	push	r12
    52fa:	df 92       	push	r13
    52fc:	ef 92       	push	r14
    52fe:	ff 92       	push	r15
    5300:	0f 93       	push	r16
    5302:	1f 93       	push	r17
    5304:	cf 93       	push	r28
    5306:	df 93       	push	r29
    5308:	cd b7       	in	r28, 0x3d	; 61
    530a:	de b7       	in	r29, 0x3e	; 62
    530c:	60 97       	sbiw	r28, 0x10	; 16
    530e:	cd bf       	out	0x3d, r28	; 61
    5310:	de bf       	out	0x3e, r29	; 62
    5312:	8e 83       	std	Y+6, r24	; 0x06
    5314:	9f 83       	std	Y+7, r25	; 0x07
    5316:	68 87       	std	Y+8, r22	; 0x08
    5318:	79 87       	std	Y+9, r23	; 0x09
    531a:	4a 87       	std	Y+10, r20	; 0x0a
    531c:	5b 87       	std	Y+11, r21	; 0x0b
    531e:	2c 87       	std	Y+12, r18	; 0x0c
    5320:	3d 87       	std	Y+13, r19	; 0x0d
    5322:	0e 87       	std	Y+14, r16	; 0x0e
    5324:	ef 86       	std	Y+15, r14	; 0x0f
    5326:	f8 8a       	std	Y+16, r15	; 0x10
    5328:	8a 85       	ldd	r24, Y+10	; 0x0a
    532a:	9b 85       	ldd	r25, Y+11	; 0x0b
    532c:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <pvPortMalloc>
    5330:	8c 83       	std	Y+4, r24	; 0x04
    5332:	9d 83       	std	Y+5, r25	; 0x05
    5334:	8c 81       	ldd	r24, Y+4	; 0x04
    5336:	9d 81       	ldd	r25, Y+5	; 0x05
    5338:	89 2b       	or	r24, r25
    533a:	b9 f0       	breq	.+46     	; 0x536a <xTaskCreate+0x7a>
    533c:	8c e2       	ldi	r24, 0x2C	; 44
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <pvPortMalloc>
    5344:	89 83       	std	Y+1, r24	; 0x01
    5346:	9a 83       	std	Y+2, r25	; 0x02
    5348:	89 81       	ldd	r24, Y+1	; 0x01
    534a:	9a 81       	ldd	r25, Y+2	; 0x02
    534c:	89 2b       	or	r24, r25
    534e:	41 f0       	breq	.+16     	; 0x5360 <xTaskCreate+0x70>
    5350:	89 81       	ldd	r24, Y+1	; 0x01
    5352:	9a 81       	ldd	r25, Y+2	; 0x02
    5354:	2c 81       	ldd	r18, Y+4	; 0x04
    5356:	3d 81       	ldd	r19, Y+5	; 0x05
    5358:	fc 01       	movw	r30, r24
    535a:	23 8f       	std	Z+27, r18	; 0x1b
    535c:	34 8f       	std	Z+28, r19	; 0x1c
    535e:	07 c0       	rjmp	.+14     	; 0x536e <xTaskCreate+0x7e>
    5360:	8c 81       	ldd	r24, Y+4	; 0x04
    5362:	9d 81       	ldd	r25, Y+5	; 0x05
    5364:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <vPortFree>
    5368:	02 c0       	rjmp	.+4      	; 0x536e <xTaskCreate+0x7e>
    536a:	19 82       	std	Y+1, r1	; 0x01
    536c:	1a 82       	std	Y+2, r1	; 0x02
    536e:	89 81       	ldd	r24, Y+1	; 0x01
    5370:	9a 81       	ldd	r25, Y+2	; 0x02
    5372:	89 2b       	or	r24, r25
    5374:	09 f1       	breq	.+66     	; 0x53b8 <xTaskCreate+0xc8>
    5376:	8a 85       	ldd	r24, Y+10	; 0x0a
    5378:	9b 85       	ldd	r25, Y+11	; 0x0b
    537a:	cc 01       	movw	r24, r24
    537c:	a0 e0       	ldi	r26, 0x00	; 0
    537e:	b0 e0       	ldi	r27, 0x00	; 0
    5380:	09 81       	ldd	r16, Y+1	; 0x01
    5382:	1a 81       	ldd	r17, Y+2	; 0x02
    5384:	4f 85       	ldd	r20, Y+15	; 0x0f
    5386:	58 89       	ldd	r21, Y+16	; 0x10
    5388:	2c 85       	ldd	r18, Y+12	; 0x0c
    538a:	3d 85       	ldd	r19, Y+13	; 0x0d
    538c:	68 85       	ldd	r22, Y+8	; 0x08
    538e:	79 85       	ldd	r23, Y+9	; 0x09
    5390:	ee 81       	ldd	r30, Y+6	; 0x06
    5392:	ff 81       	ldd	r31, Y+7	; 0x07
    5394:	81 2c       	mov	r8, r1
    5396:	91 2c       	mov	r9, r1
    5398:	58 01       	movw	r10, r16
    539a:	6a 01       	movw	r12, r20
    539c:	ee 84       	ldd	r14, Y+14	; 0x0e
    539e:	89 01       	movw	r16, r18
    53a0:	9c 01       	movw	r18, r24
    53a2:	ad 01       	movw	r20, r26
    53a4:	cf 01       	movw	r24, r30
    53a6:	0e 94 ef 29 	call	0x53de	; 0x53de <prvInitialiseNewTask>
    53aa:	89 81       	ldd	r24, Y+1	; 0x01
    53ac:	9a 81       	ldd	r25, Y+2	; 0x02
    53ae:	0e 94 c5 2a 	call	0x558a	; 0x558a <prvAddNewTaskToReadyList>
    53b2:	81 e0       	ldi	r24, 0x01	; 1
    53b4:	8b 83       	std	Y+3, r24	; 0x03
    53b6:	02 c0       	rjmp	.+4      	; 0x53bc <xTaskCreate+0xcc>
    53b8:	8f ef       	ldi	r24, 0xFF	; 255
    53ba:	8b 83       	std	Y+3, r24	; 0x03
    53bc:	8b 81       	ldd	r24, Y+3	; 0x03
    53be:	60 96       	adiw	r28, 0x10	; 16
    53c0:	cd bf       	out	0x3d, r28	; 61
    53c2:	de bf       	out	0x3e, r29	; 62
    53c4:	df 91       	pop	r29
    53c6:	cf 91       	pop	r28
    53c8:	1f 91       	pop	r17
    53ca:	0f 91       	pop	r16
    53cc:	ff 90       	pop	r15
    53ce:	ef 90       	pop	r14
    53d0:	df 90       	pop	r13
    53d2:	cf 90       	pop	r12
    53d4:	bf 90       	pop	r11
    53d6:	af 90       	pop	r10
    53d8:	9f 90       	pop	r9
    53da:	8f 90       	pop	r8
    53dc:	08 95       	ret

000053de <prvInitialiseNewTask>:
    53de:	8f 92       	push	r8
    53e0:	9f 92       	push	r9
    53e2:	af 92       	push	r10
    53e4:	bf 92       	push	r11
    53e6:	cf 92       	push	r12
    53e8:	df 92       	push	r13
    53ea:	ef 92       	push	r14
    53ec:	ff 92       	push	r15
    53ee:	0f 93       	push	r16
    53f0:	1f 93       	push	r17
    53f2:	cf 93       	push	r28
    53f4:	df 93       	push	r29
    53f6:	cd b7       	in	r28, 0x3d	; 61
    53f8:	de b7       	in	r29, 0x3e	; 62
    53fa:	64 97       	sbiw	r28, 0x14	; 20
    53fc:	cd bf       	out	0x3d, r28	; 61
    53fe:	de bf       	out	0x3e, r29	; 62
    5400:	8c 83       	std	Y+4, r24	; 0x04
    5402:	9d 83       	std	Y+5, r25	; 0x05
    5404:	6e 83       	std	Y+6, r22	; 0x06
    5406:	7f 83       	std	Y+7, r23	; 0x07
    5408:	28 87       	std	Y+8, r18	; 0x08
    540a:	39 87       	std	Y+9, r19	; 0x09
    540c:	4a 87       	std	Y+10, r20	; 0x0a
    540e:	5b 87       	std	Y+11, r21	; 0x0b
    5410:	0c 87       	std	Y+12, r16	; 0x0c
    5412:	1d 87       	std	Y+13, r17	; 0x0d
    5414:	ee 86       	std	Y+14, r14	; 0x0e
    5416:	cf 86       	std	Y+15, r12	; 0x0f
    5418:	d8 8a       	std	Y+16, r13	; 0x10
    541a:	a9 8a       	std	Y+17, r10	; 0x11
    541c:	ba 8a       	std	Y+18, r11	; 0x12
    541e:	8b 8a       	std	Y+19, r8	; 0x13
    5420:	9c 8a       	std	Y+20, r9	; 0x14
    5422:	28 85       	ldd	r18, Y+8	; 0x08
    5424:	39 85       	ldd	r19, Y+9	; 0x09
    5426:	89 89       	ldd	r24, Y+17	; 0x11
    5428:	9a 89       	ldd	r25, Y+18	; 0x12
    542a:	fc 01       	movw	r30, r24
    542c:	83 8d       	ldd	r24, Z+27	; 0x1b
    542e:	94 8d       	ldd	r25, Z+28	; 0x1c
    5430:	a9 01       	movw	r20, r18
    5432:	65 ea       	ldi	r22, 0xA5	; 165
    5434:	70 e0       	ldi	r23, 0x00	; 0
    5436:	0e 94 d2 4c 	call	0x99a4	; 0x99a4 <memset>
    543a:	89 89       	ldd	r24, Y+17	; 0x11
    543c:	9a 89       	ldd	r25, Y+18	; 0x12
    543e:	fc 01       	movw	r30, r24
    5440:	23 8d       	ldd	r18, Z+27	; 0x1b
    5442:	34 8d       	ldd	r19, Z+28	; 0x1c
    5444:	88 85       	ldd	r24, Y+8	; 0x08
    5446:	99 85       	ldd	r25, Y+9	; 0x09
    5448:	01 97       	sbiw	r24, 0x01	; 1
    544a:	82 0f       	add	r24, r18
    544c:	93 1f       	adc	r25, r19
    544e:	8a 83       	std	Y+2, r24	; 0x02
    5450:	9b 83       	std	Y+3, r25	; 0x03
    5452:	19 82       	std	Y+1, r1	; 0x01
    5454:	21 c0       	rjmp	.+66     	; 0x5498 <prvInitialiseNewTask+0xba>
    5456:	89 81       	ldd	r24, Y+1	; 0x01
    5458:	88 2f       	mov	r24, r24
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	29 81       	ldd	r18, Y+1	; 0x01
    545e:	22 2f       	mov	r18, r18
    5460:	30 e0       	ldi	r19, 0x00	; 0
    5462:	4e 81       	ldd	r20, Y+6	; 0x06
    5464:	5f 81       	ldd	r21, Y+7	; 0x07
    5466:	24 0f       	add	r18, r20
    5468:	35 1f       	adc	r19, r21
    546a:	f9 01       	movw	r30, r18
    546c:	40 81       	ld	r20, Z
    546e:	29 89       	ldd	r18, Y+17	; 0x11
    5470:	3a 89       	ldd	r19, Y+18	; 0x12
    5472:	82 0f       	add	r24, r18
    5474:	93 1f       	adc	r25, r19
    5476:	4d 96       	adiw	r24, 0x1d	; 29
    5478:	fc 01       	movw	r30, r24
    547a:	40 83       	st	Z, r20
    547c:	89 81       	ldd	r24, Y+1	; 0x01
    547e:	88 2f       	mov	r24, r24
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	2e 81       	ldd	r18, Y+6	; 0x06
    5484:	3f 81       	ldd	r19, Y+7	; 0x07
    5486:	82 0f       	add	r24, r18
    5488:	93 1f       	adc	r25, r19
    548a:	fc 01       	movw	r30, r24
    548c:	80 81       	ld	r24, Z
    548e:	88 23       	and	r24, r24
    5490:	39 f0       	breq	.+14     	; 0x54a0 <prvInitialiseNewTask+0xc2>
    5492:	89 81       	ldd	r24, Y+1	; 0x01
    5494:	8f 5f       	subi	r24, 0xFF	; 255
    5496:	89 83       	std	Y+1, r24	; 0x01
    5498:	89 81       	ldd	r24, Y+1	; 0x01
    549a:	88 30       	cpi	r24, 0x08	; 8
    549c:	e0 f2       	brcs	.-72     	; 0x5456 <prvInitialiseNewTask+0x78>
    549e:	01 c0       	rjmp	.+2      	; 0x54a2 <prvInitialiseNewTask+0xc4>
    54a0:	00 00       	nop
    54a2:	89 89       	ldd	r24, Y+17	; 0x11
    54a4:	9a 89       	ldd	r25, Y+18	; 0x12
    54a6:	fc 01       	movw	r30, r24
    54a8:	14 a2       	std	Z+36, r1	; 0x24
    54aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    54ac:	84 30       	cpi	r24, 0x04	; 4
    54ae:	10 f0       	brcs	.+4      	; 0x54b4 <prvInitialiseNewTask+0xd6>
    54b0:	83 e0       	ldi	r24, 0x03	; 3
    54b2:	8e 87       	std	Y+14, r24	; 0x0e
    54b4:	89 89       	ldd	r24, Y+17	; 0x11
    54b6:	9a 89       	ldd	r25, Y+18	; 0x12
    54b8:	2e 85       	ldd	r18, Y+14	; 0x0e
    54ba:	fc 01       	movw	r30, r24
    54bc:	22 8f       	std	Z+26, r18	; 0x1a
    54be:	89 89       	ldd	r24, Y+17	; 0x11
    54c0:	9a 89       	ldd	r25, Y+18	; 0x12
    54c2:	02 96       	adiw	r24, 0x02	; 2
    54c4:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <vListInitialiseItem>
    54c8:	89 89       	ldd	r24, Y+17	; 0x11
    54ca:	9a 89       	ldd	r25, Y+18	; 0x12
    54cc:	0e 96       	adiw	r24, 0x0e	; 14
    54ce:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <vListInitialiseItem>
    54d2:	89 89       	ldd	r24, Y+17	; 0x11
    54d4:	9a 89       	ldd	r25, Y+18	; 0x12
    54d6:	29 89       	ldd	r18, Y+17	; 0x11
    54d8:	3a 89       	ldd	r19, Y+18	; 0x12
    54da:	fc 01       	movw	r30, r24
    54dc:	22 87       	std	Z+10, r18	; 0x0a
    54de:	33 87       	std	Z+11, r19	; 0x0b
    54e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    54e2:	88 2f       	mov	r24, r24
    54e4:	90 e0       	ldi	r25, 0x00	; 0
    54e6:	a0 e0       	ldi	r26, 0x00	; 0
    54e8:	b0 e0       	ldi	r27, 0x00	; 0
    54ea:	24 e0       	ldi	r18, 0x04	; 4
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	40 e0       	ldi	r20, 0x00	; 0
    54f0:	50 e0       	ldi	r21, 0x00	; 0
    54f2:	79 01       	movw	r14, r18
    54f4:	8a 01       	movw	r16, r20
    54f6:	e8 1a       	sub	r14, r24
    54f8:	f9 0a       	sbc	r15, r25
    54fa:	0a 0b       	sbc	r16, r26
    54fc:	1b 0b       	sbc	r17, r27
    54fe:	d8 01       	movw	r26, r16
    5500:	c7 01       	movw	r24, r14
    5502:	29 89       	ldd	r18, Y+17	; 0x11
    5504:	3a 89       	ldd	r19, Y+18	; 0x12
    5506:	f9 01       	movw	r30, r18
    5508:	86 87       	std	Z+14, r24	; 0x0e
    550a:	97 87       	std	Z+15, r25	; 0x0f
    550c:	a0 8b       	std	Z+16, r26	; 0x10
    550e:	b1 8b       	std	Z+17, r27	; 0x11
    5510:	89 89       	ldd	r24, Y+17	; 0x11
    5512:	9a 89       	ldd	r25, Y+18	; 0x12
    5514:	29 89       	ldd	r18, Y+17	; 0x11
    5516:	3a 89       	ldd	r19, Y+18	; 0x12
    5518:	fc 01       	movw	r30, r24
    551a:	26 8b       	std	Z+22, r18	; 0x16
    551c:	37 8b       	std	Z+23, r19	; 0x17
    551e:	89 89       	ldd	r24, Y+17	; 0x11
    5520:	9a 89       	ldd	r25, Y+18	; 0x12
    5522:	fc 01       	movw	r30, r24
    5524:	17 a2       	std	Z+39, r1	; 0x27
    5526:	10 a6       	std	Z+40, r1	; 0x28
    5528:	11 a6       	std	Z+41, r1	; 0x29
    552a:	12 a6       	std	Z+42, r1	; 0x2a
    552c:	89 89       	ldd	r24, Y+17	; 0x11
    552e:	9a 89       	ldd	r25, Y+18	; 0x12
    5530:	fc 01       	movw	r30, r24
    5532:	13 a6       	std	Z+43, r1	; 0x2b
    5534:	4c 85       	ldd	r20, Y+12	; 0x0c
    5536:	5d 85       	ldd	r21, Y+13	; 0x0d
    5538:	2c 81       	ldd	r18, Y+4	; 0x04
    553a:	3d 81       	ldd	r19, Y+5	; 0x05
    553c:	8a 81       	ldd	r24, Y+2	; 0x02
    553e:	9b 81       	ldd	r25, Y+3	; 0x03
    5540:	b9 01       	movw	r22, r18
    5542:	0e 94 00 21 	call	0x4200	; 0x4200 <pxPortInitialiseStack>
    5546:	9c 01       	movw	r18, r24
    5548:	89 89       	ldd	r24, Y+17	; 0x11
    554a:	9a 89       	ldd	r25, Y+18	; 0x12
    554c:	fc 01       	movw	r30, r24
    554e:	20 83       	st	Z, r18
    5550:	31 83       	std	Z+1, r19	; 0x01
    5552:	8f 85       	ldd	r24, Y+15	; 0x0f
    5554:	98 89       	ldd	r25, Y+16	; 0x10
    5556:	89 2b       	or	r24, r25
    5558:	39 f0       	breq	.+14     	; 0x5568 <prvInitialiseNewTask+0x18a>
    555a:	8f 85       	ldd	r24, Y+15	; 0x0f
    555c:	98 89       	ldd	r25, Y+16	; 0x10
    555e:	29 89       	ldd	r18, Y+17	; 0x11
    5560:	3a 89       	ldd	r19, Y+18	; 0x12
    5562:	fc 01       	movw	r30, r24
    5564:	20 83       	st	Z, r18
    5566:	31 83       	std	Z+1, r19	; 0x01
    5568:	00 00       	nop
    556a:	64 96       	adiw	r28, 0x14	; 20
    556c:	cd bf       	out	0x3d, r28	; 61
    556e:	de bf       	out	0x3e, r29	; 62
    5570:	df 91       	pop	r29
    5572:	cf 91       	pop	r28
    5574:	1f 91       	pop	r17
    5576:	0f 91       	pop	r16
    5578:	ff 90       	pop	r15
    557a:	ef 90       	pop	r14
    557c:	df 90       	pop	r13
    557e:	cf 90       	pop	r12
    5580:	bf 90       	pop	r11
    5582:	af 90       	pop	r10
    5584:	9f 90       	pop	r9
    5586:	8f 90       	pop	r8
    5588:	08 95       	ret

0000558a <prvAddNewTaskToReadyList>:
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
    558e:	1f 92       	push	r1
    5590:	1f 92       	push	r1
    5592:	cd b7       	in	r28, 0x3d	; 61
    5594:	de b7       	in	r29, 0x3e	; 62
    5596:	89 83       	std	Y+1, r24	; 0x01
    5598:	9a 83       	std	Y+2, r25	; 0x02
    559a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    559e:	ff 93       	push	r31
    55a0:	f8 7f       	andi	r31, 0xF8	; 248
    55a2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    55a6:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <uxCurrentNumberOfTasks>
    55aa:	8f 5f       	subi	r24, 0xFF	; 255
    55ac:	80 93 04 2d 	sts	0x2D04, r24	; 0x802d04 <uxCurrentNumberOfTasks>
    55b0:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    55b4:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    55b8:	89 2b       	or	r24, r25
    55ba:	69 f4       	brne	.+26     	; 0x55d6 <prvAddNewTaskToReadyList+0x4c>
    55bc:	89 81       	ldd	r24, Y+1	; 0x01
    55be:	9a 81       	ldd	r25, Y+2	; 0x02
    55c0:	80 93 a6 2c 	sts	0x2CA6, r24	; 0x802ca6 <pxCurrentTCB>
    55c4:	90 93 a7 2c 	sts	0x2CA7, r25	; 0x802ca7 <pxCurrentTCB+0x1>
    55c8:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <uxCurrentNumberOfTasks>
    55cc:	81 30       	cpi	r24, 0x01	; 1
    55ce:	c9 f4       	brne	.+50     	; 0x5602 <prvAddNewTaskToReadyList+0x78>
    55d0:	0e 94 bf 30 	call	0x617e	; 0x617e <prvInitialiseTaskLists>
    55d4:	16 c0       	rjmp	.+44     	; 0x5602 <prvAddNewTaskToReadyList+0x78>
    55d6:	80 91 0a 2d 	lds	r24, 0x2D0A	; 0x802d0a <xSchedulerRunning>
    55da:	88 23       	and	r24, r24
    55dc:	91 f4       	brne	.+36     	; 0x5602 <prvAddNewTaskToReadyList+0x78>
    55de:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    55e2:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    55e6:	fc 01       	movw	r30, r24
    55e8:	22 8d       	ldd	r18, Z+26	; 0x1a
    55ea:	89 81       	ldd	r24, Y+1	; 0x01
    55ec:	9a 81       	ldd	r25, Y+2	; 0x02
    55ee:	fc 01       	movw	r30, r24
    55f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    55f2:	82 17       	cp	r24, r18
    55f4:	30 f0       	brcs	.+12     	; 0x5602 <prvAddNewTaskToReadyList+0x78>
    55f6:	89 81       	ldd	r24, Y+1	; 0x01
    55f8:	9a 81       	ldd	r25, Y+2	; 0x02
    55fa:	80 93 a6 2c 	sts	0x2CA6, r24	; 0x802ca6 <pxCurrentTCB>
    55fe:	90 93 a7 2c 	sts	0x2CA7, r25	; 0x802ca7 <pxCurrentTCB+0x1>
    5602:	80 91 0e 2d 	lds	r24, 0x2D0E	; 0x802d0e <uxTaskNumber>
    5606:	8f 5f       	subi	r24, 0xFF	; 255
    5608:	80 93 0e 2d 	sts	0x2D0E, r24	; 0x802d0e <uxTaskNumber>
    560c:	20 91 0e 2d 	lds	r18, 0x2D0E	; 0x802d0e <uxTaskNumber>
    5610:	89 81       	ldd	r24, Y+1	; 0x01
    5612:	9a 81       	ldd	r25, Y+2	; 0x02
    5614:	fc 01       	movw	r30, r24
    5616:	25 a3       	std	Z+37, r18	; 0x25
    5618:	89 81       	ldd	r24, Y+1	; 0x01
    561a:	9a 81       	ldd	r25, Y+2	; 0x02
    561c:	fc 01       	movw	r30, r24
    561e:	92 8d       	ldd	r25, Z+26	; 0x1a
    5620:	80 91 09 2d 	lds	r24, 0x2D09	; 0x802d09 <uxTopReadyPriority>
    5624:	89 17       	cp	r24, r25
    5626:	30 f4       	brcc	.+12     	; 0x5634 <prvAddNewTaskToReadyList+0xaa>
    5628:	89 81       	ldd	r24, Y+1	; 0x01
    562a:	9a 81       	ldd	r25, Y+2	; 0x02
    562c:	fc 01       	movw	r30, r24
    562e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5630:	80 93 09 2d 	sts	0x2D09, r24	; 0x802d09 <uxTopReadyPriority>
    5634:	89 81       	ldd	r24, Y+1	; 0x01
    5636:	9a 81       	ldd	r25, Y+2	; 0x02
    5638:	ac 01       	movw	r20, r24
    563a:	4e 5f       	subi	r20, 0xFE	; 254
    563c:	5f 4f       	sbci	r21, 0xFF	; 255
    563e:	89 81       	ldd	r24, Y+1	; 0x01
    5640:	9a 81       	ldd	r25, Y+2	; 0x02
    5642:	fc 01       	movw	r30, r24
    5644:	82 8d       	ldd	r24, Z+26	; 0x1a
    5646:	28 2f       	mov	r18, r24
    5648:	30 e0       	ldi	r19, 0x00	; 0
    564a:	6b e0       	ldi	r22, 0x0B	; 11
    564c:	62 9f       	mul	r22, r18
    564e:	c0 01       	movw	r24, r0
    5650:	63 9f       	mul	r22, r19
    5652:	90 0d       	add	r25, r0
    5654:	11 24       	eor	r1, r1
    5656:	88 55       	subi	r24, 0x58	; 88
    5658:	93 4d       	sbci	r25, 0xD3	; 211
    565a:	ba 01       	movw	r22, r20
    565c:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vListInsertEnd>
    5660:	ff 91       	pop	r31
    5662:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5666:	80 91 0a 2d 	lds	r24, 0x2D0A	; 0x802d0a <xSchedulerRunning>
    566a:	88 23       	and	r24, r24
    566c:	71 f0       	breq	.+28     	; 0x568a <prvAddNewTaskToReadyList+0x100>
    566e:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5672:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5676:	fc 01       	movw	r30, r24
    5678:	22 8d       	ldd	r18, Z+26	; 0x1a
    567a:	89 81       	ldd	r24, Y+1	; 0x01
    567c:	9a 81       	ldd	r25, Y+2	; 0x02
    567e:	fc 01       	movw	r30, r24
    5680:	82 8d       	ldd	r24, Z+26	; 0x1a
    5682:	28 17       	cp	r18, r24
    5684:	10 f4       	brcc	.+4      	; 0x568a <prvAddNewTaskToReadyList+0x100>
    5686:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    568a:	00 00       	nop
    568c:	0f 90       	pop	r0
    568e:	0f 90       	pop	r0
    5690:	df 91       	pop	r29
    5692:	cf 91       	pop	r28
    5694:	08 95       	ret

00005696 <vTaskDelay>:
    5696:	cf 93       	push	r28
    5698:	df 93       	push	r29
    569a:	cd b7       	in	r28, 0x3d	; 61
    569c:	de b7       	in	r29, 0x3e	; 62
    569e:	25 97       	sbiw	r28, 0x05	; 5
    56a0:	cd bf       	out	0x3d, r28	; 61
    56a2:	de bf       	out	0x3e, r29	; 62
    56a4:	6a 83       	std	Y+2, r22	; 0x02
    56a6:	7b 83       	std	Y+3, r23	; 0x03
    56a8:	8c 83       	std	Y+4, r24	; 0x04
    56aa:	9d 83       	std	Y+5, r25	; 0x05
    56ac:	19 82       	std	Y+1, r1	; 0x01
    56ae:	8a 81       	ldd	r24, Y+2	; 0x02
    56b0:	9b 81       	ldd	r25, Y+3	; 0x03
    56b2:	ac 81       	ldd	r26, Y+4	; 0x04
    56b4:	bd 81       	ldd	r27, Y+5	; 0x05
    56b6:	89 2b       	or	r24, r25
    56b8:	8a 2b       	or	r24, r26
    56ba:	8b 2b       	or	r24, r27
    56bc:	71 f0       	breq	.+28     	; 0x56da <vTaskDelay+0x44>
    56be:	0e 94 c5 2b 	call	0x578a	; 0x578a <vTaskSuspendAll>
    56c2:	8a 81       	ldd	r24, Y+2	; 0x02
    56c4:	9b 81       	ldd	r25, Y+3	; 0x03
    56c6:	ac 81       	ldd	r26, Y+4	; 0x04
    56c8:	bd 81       	ldd	r27, Y+5	; 0x05
    56ca:	40 e0       	ldi	r20, 0x00	; 0
    56cc:	bc 01       	movw	r22, r24
    56ce:	cd 01       	movw	r24, r26
    56d0:	0e 94 9c 31 	call	0x6338	; 0x6338 <prvAddCurrentTaskToDelayedList>
    56d4:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    56d8:	89 83       	std	Y+1, r24	; 0x01
    56da:	89 81       	ldd	r24, Y+1	; 0x01
    56dc:	88 23       	and	r24, r24
    56de:	11 f4       	brne	.+4      	; 0x56e4 <vTaskDelay+0x4e>
    56e0:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    56e4:	00 00       	nop
    56e6:	25 96       	adiw	r28, 0x05	; 5
    56e8:	cd bf       	out	0x3d, r28	; 61
    56ea:	de bf       	out	0x3e, r29	; 62
    56ec:	df 91       	pop	r29
    56ee:	cf 91       	pop	r28
    56f0:	08 95       	ret

000056f2 <vTaskStartScheduler>:
    56f2:	ef 92       	push	r14
    56f4:	ff 92       	push	r15
    56f6:	0f 93       	push	r16
    56f8:	cf 93       	push	r28
    56fa:	df 93       	push	r29
    56fc:	1f 92       	push	r1
    56fe:	cd b7       	in	r28, 0x3d	; 61
    5700:	de b7       	in	r29, 0x3e	; 62
    5702:	0f 2e       	mov	r0, r31
    5704:	f3 e1       	ldi	r31, 0x13	; 19
    5706:	ef 2e       	mov	r14, r31
    5708:	fd e2       	ldi	r31, 0x2D	; 45
    570a:	ff 2e       	mov	r15, r31
    570c:	f0 2d       	mov	r31, r0
    570e:	00 e0       	ldi	r16, 0x00	; 0
    5710:	20 e0       	ldi	r18, 0x00	; 0
    5712:	30 e0       	ldi	r19, 0x00	; 0
    5714:	48 ec       	ldi	r20, 0xC8	; 200
    5716:	50 e0       	ldi	r21, 0x00	; 0
    5718:	60 e0       	ldi	r22, 0x00	; 0
    571a:	70 e2       	ldi	r23, 0x20	; 32
    571c:	8c ea       	ldi	r24, 0xAC	; 172
    571e:	90 e3       	ldi	r25, 0x30	; 48
    5720:	0e 94 78 29 	call	0x52f0	; 0x52f0 <xTaskCreate>
    5724:	89 83       	std	Y+1, r24	; 0x01
    5726:	89 81       	ldd	r24, Y+1	; 0x01
    5728:	81 30       	cpi	r24, 0x01	; 1
    572a:	19 f4       	brne	.+6      	; 0x5732 <vTaskStartScheduler+0x40>
    572c:	0e 94 3d 32 	call	0x647a	; 0x647a <xTimerCreateTimerTask>
    5730:	89 83       	std	Y+1, r24	; 0x01
    5732:	89 81       	ldd	r24, Y+1	; 0x01
    5734:	81 30       	cpi	r24, 0x01	; 1
    5736:	09 f5       	brne	.+66     	; 0x577a <vTaskStartScheduler+0x88>
    5738:	80 ea       	ldi	r24, 0xA0	; 160
    573a:	90 e0       	ldi	r25, 0x00	; 0
    573c:	20 ea       	ldi	r18, 0xA0	; 160
    573e:	30 e0       	ldi	r19, 0x00	; 0
    5740:	f9 01       	movw	r30, r18
    5742:	22 81       	ldd	r18, Z+2	; 0x02
    5744:	28 7f       	andi	r18, 0xF8	; 248
    5746:	fc 01       	movw	r30, r24
    5748:	22 83       	std	Z+2, r18	; 0x02
    574a:	8f ef       	ldi	r24, 0xFF	; 255
    574c:	9f ef       	ldi	r25, 0xFF	; 255
    574e:	dc 01       	movw	r26, r24
    5750:	80 93 0f 2d 	sts	0x2D0F, r24	; 0x802d0f <xNextTaskUnblockTime>
    5754:	90 93 10 2d 	sts	0x2D10, r25	; 0x802d10 <xNextTaskUnblockTime+0x1>
    5758:	a0 93 11 2d 	sts	0x2D11, r26	; 0x802d11 <xNextTaskUnblockTime+0x2>
    575c:	b0 93 12 2d 	sts	0x2D12, r27	; 0x802d12 <xNextTaskUnblockTime+0x3>
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	80 93 0a 2d 	sts	0x2D0A, r24	; 0x802d0a <xSchedulerRunning>
    5766:	10 92 05 2d 	sts	0x2D05, r1	; 0x802d05 <xTickCount>
    576a:	10 92 06 2d 	sts	0x2D06, r1	; 0x802d06 <xTickCount+0x1>
    576e:	10 92 07 2d 	sts	0x2D07, r1	; 0x802d07 <xTickCount+0x2>
    5772:	10 92 08 2d 	sts	0x2D08, r1	; 0x802d08 <xTickCount+0x3>
    5776:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <xPortStartScheduler>
    577a:	00 00       	nop
    577c:	0f 90       	pop	r0
    577e:	df 91       	pop	r29
    5780:	cf 91       	pop	r28
    5782:	0f 91       	pop	r16
    5784:	ff 90       	pop	r15
    5786:	ef 90       	pop	r14
    5788:	08 95       	ret

0000578a <vTaskSuspendAll>:
    578a:	cf 93       	push	r28
    578c:	df 93       	push	r29
    578e:	cd b7       	in	r28, 0x3d	; 61
    5790:	de b7       	in	r29, 0x3e	; 62
    5792:	80 91 15 2d 	lds	r24, 0x2D15	; 0x802d15 <uxSchedulerSuspended>
    5796:	8f 5f       	subi	r24, 0xFF	; 255
    5798:	80 93 15 2d 	sts	0x2D15, r24	; 0x802d15 <uxSchedulerSuspended>
    579c:	00 00       	nop
    579e:	df 91       	pop	r29
    57a0:	cf 91       	pop	r28
    57a2:	08 95       	ret

000057a4 <xTaskResumeAll>:
    57a4:	cf 93       	push	r28
    57a6:	df 93       	push	r29
    57a8:	00 d0       	rcall	.+0      	; 0x57aa <xTaskResumeAll+0x6>
    57aa:	1f 92       	push	r1
    57ac:	cd b7       	in	r28, 0x3d	; 61
    57ae:	de b7       	in	r29, 0x3e	; 62
    57b0:	19 82       	std	Y+1, r1	; 0x01
    57b2:	1a 82       	std	Y+2, r1	; 0x02
    57b4:	1b 82       	std	Y+3, r1	; 0x03
    57b6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    57ba:	ff 93       	push	r31
    57bc:	f8 7f       	andi	r31, 0xF8	; 248
    57be:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    57c2:	80 91 15 2d 	lds	r24, 0x2D15	; 0x802d15 <uxSchedulerSuspended>
    57c6:	81 50       	subi	r24, 0x01	; 1
    57c8:	80 93 15 2d 	sts	0x2D15, r24	; 0x802d15 <uxSchedulerSuspended>
    57cc:	80 91 15 2d 	lds	r24, 0x2D15	; 0x802d15 <uxSchedulerSuspended>
    57d0:	88 23       	and	r24, r24
    57d2:	09 f0       	breq	.+2      	; 0x57d6 <xTaskResumeAll+0x32>
    57d4:	74 c0       	rjmp	.+232    	; 0x58be <xTaskResumeAll+0x11a>
    57d6:	80 91 04 2d 	lds	r24, 0x2D04	; 0x802d04 <uxCurrentNumberOfTasks>
    57da:	88 23       	and	r24, r24
    57dc:	09 f4       	brne	.+2      	; 0x57e0 <xTaskResumeAll+0x3c>
    57de:	6f c0       	rjmp	.+222    	; 0x58be <xTaskResumeAll+0x11a>
    57e0:	46 c0       	rjmp	.+140    	; 0x586e <xTaskResumeAll+0xca>
    57e2:	80 91 f5 2c 	lds	r24, 0x2CF5	; 0x802cf5 <xPendingReadyList+0x7>
    57e6:	90 91 f6 2c 	lds	r25, 0x2CF6	; 0x802cf6 <xPendingReadyList+0x8>
    57ea:	fc 01       	movw	r30, r24
    57ec:	80 85       	ldd	r24, Z+8	; 0x08
    57ee:	91 85       	ldd	r25, Z+9	; 0x09
    57f0:	89 83       	std	Y+1, r24	; 0x01
    57f2:	9a 83       	std	Y+2, r25	; 0x02
    57f4:	89 81       	ldd	r24, Y+1	; 0x01
    57f6:	9a 81       	ldd	r25, Y+2	; 0x02
    57f8:	0e 96       	adiw	r24, 0x0e	; 14
    57fa:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
    57fe:	89 81       	ldd	r24, Y+1	; 0x01
    5800:	9a 81       	ldd	r25, Y+2	; 0x02
    5802:	02 96       	adiw	r24, 0x02	; 2
    5804:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
    5808:	89 81       	ldd	r24, Y+1	; 0x01
    580a:	9a 81       	ldd	r25, Y+2	; 0x02
    580c:	fc 01       	movw	r30, r24
    580e:	92 8d       	ldd	r25, Z+26	; 0x1a
    5810:	80 91 09 2d 	lds	r24, 0x2D09	; 0x802d09 <uxTopReadyPriority>
    5814:	89 17       	cp	r24, r25
    5816:	30 f4       	brcc	.+12     	; 0x5824 <xTaskResumeAll+0x80>
    5818:	89 81       	ldd	r24, Y+1	; 0x01
    581a:	9a 81       	ldd	r25, Y+2	; 0x02
    581c:	fc 01       	movw	r30, r24
    581e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5820:	80 93 09 2d 	sts	0x2D09, r24	; 0x802d09 <uxTopReadyPriority>
    5824:	89 81       	ldd	r24, Y+1	; 0x01
    5826:	9a 81       	ldd	r25, Y+2	; 0x02
    5828:	ac 01       	movw	r20, r24
    582a:	4e 5f       	subi	r20, 0xFE	; 254
    582c:	5f 4f       	sbci	r21, 0xFF	; 255
    582e:	89 81       	ldd	r24, Y+1	; 0x01
    5830:	9a 81       	ldd	r25, Y+2	; 0x02
    5832:	fc 01       	movw	r30, r24
    5834:	82 8d       	ldd	r24, Z+26	; 0x1a
    5836:	28 2f       	mov	r18, r24
    5838:	30 e0       	ldi	r19, 0x00	; 0
    583a:	6b e0       	ldi	r22, 0x0B	; 11
    583c:	62 9f       	mul	r22, r18
    583e:	c0 01       	movw	r24, r0
    5840:	63 9f       	mul	r22, r19
    5842:	90 0d       	add	r25, r0
    5844:	11 24       	eor	r1, r1
    5846:	88 55       	subi	r24, 0x58	; 88
    5848:	93 4d       	sbci	r25, 0xD3	; 211
    584a:	ba 01       	movw	r22, r20
    584c:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vListInsertEnd>
    5850:	89 81       	ldd	r24, Y+1	; 0x01
    5852:	9a 81       	ldd	r25, Y+2	; 0x02
    5854:	fc 01       	movw	r30, r24
    5856:	22 8d       	ldd	r18, Z+26	; 0x1a
    5858:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    585c:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5860:	fc 01       	movw	r30, r24
    5862:	82 8d       	ldd	r24, Z+26	; 0x1a
    5864:	28 17       	cp	r18, r24
    5866:	18 f0       	brcs	.+6      	; 0x586e <xTaskResumeAll+0xca>
    5868:	81 e0       	ldi	r24, 0x01	; 1
    586a:	80 93 0c 2d 	sts	0x2D0C, r24	; 0x802d0c <xYieldPending>
    586e:	80 91 ee 2c 	lds	r24, 0x2CEE	; 0x802cee <xPendingReadyList>
    5872:	88 23       	and	r24, r24
    5874:	09 f0       	breq	.+2      	; 0x5878 <xTaskResumeAll+0xd4>
    5876:	b5 cf       	rjmp	.-150    	; 0x57e2 <xTaskResumeAll+0x3e>
    5878:	89 81       	ldd	r24, Y+1	; 0x01
    587a:	9a 81       	ldd	r25, Y+2	; 0x02
    587c:	89 2b       	or	r24, r25
    587e:	11 f0       	breq	.+4      	; 0x5884 <xTaskResumeAll+0xe0>
    5880:	0e 94 02 31 	call	0x6204	; 0x6204 <prvResetNextTaskUnblockTime>
    5884:	80 91 0b 2d 	lds	r24, 0x2D0B	; 0x802d0b <uxPendedTicks>
    5888:	8c 83       	std	Y+4, r24	; 0x04
    588a:	8c 81       	ldd	r24, Y+4	; 0x04
    588c:	88 23       	and	r24, r24
    588e:	79 f0       	breq	.+30     	; 0x58ae <xTaskResumeAll+0x10a>
    5890:	0e 94 90 2c 	call	0x5920	; 0x5920 <xTaskIncrementTick>
    5894:	88 23       	and	r24, r24
    5896:	19 f0       	breq	.+6      	; 0x589e <xTaskResumeAll+0xfa>
    5898:	81 e0       	ldi	r24, 0x01	; 1
    589a:	80 93 0c 2d 	sts	0x2D0C, r24	; 0x802d0c <xYieldPending>
    589e:	8c 81       	ldd	r24, Y+4	; 0x04
    58a0:	81 50       	subi	r24, 0x01	; 1
    58a2:	8c 83       	std	Y+4, r24	; 0x04
    58a4:	8c 81       	ldd	r24, Y+4	; 0x04
    58a6:	88 23       	and	r24, r24
    58a8:	99 f7       	brne	.-26     	; 0x5890 <xTaskResumeAll+0xec>
    58aa:	10 92 0b 2d 	sts	0x2D0B, r1	; 0x802d0b <uxPendedTicks>
    58ae:	80 91 0c 2d 	lds	r24, 0x2D0C	; 0x802d0c <xYieldPending>
    58b2:	88 23       	and	r24, r24
    58b4:	21 f0       	breq	.+8      	; 0x58be <xTaskResumeAll+0x11a>
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	8b 83       	std	Y+3, r24	; 0x03
    58ba:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    58be:	ff 91       	pop	r31
    58c0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    58c4:	8b 81       	ldd	r24, Y+3	; 0x03
    58c6:	24 96       	adiw	r28, 0x04	; 4
    58c8:	cd bf       	out	0x3d, r28	; 61
    58ca:	de bf       	out	0x3e, r29	; 62
    58cc:	df 91       	pop	r29
    58ce:	cf 91       	pop	r28
    58d0:	08 95       	ret

000058d2 <xTaskGetTickCount>:
    58d2:	cf 93       	push	r28
    58d4:	df 93       	push	r29
    58d6:	00 d0       	rcall	.+0      	; 0x58d8 <xTaskGetTickCount+0x6>
    58d8:	1f 92       	push	r1
    58da:	cd b7       	in	r28, 0x3d	; 61
    58dc:	de b7       	in	r29, 0x3e	; 62
    58de:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    58e2:	ff 93       	push	r31
    58e4:	f8 7f       	andi	r31, 0xF8	; 248
    58e6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    58ea:	80 91 05 2d 	lds	r24, 0x2D05	; 0x802d05 <xTickCount>
    58ee:	90 91 06 2d 	lds	r25, 0x2D06	; 0x802d06 <xTickCount+0x1>
    58f2:	a0 91 07 2d 	lds	r26, 0x2D07	; 0x802d07 <xTickCount+0x2>
    58f6:	b0 91 08 2d 	lds	r27, 0x2D08	; 0x802d08 <xTickCount+0x3>
    58fa:	89 83       	std	Y+1, r24	; 0x01
    58fc:	9a 83       	std	Y+2, r25	; 0x02
    58fe:	ab 83       	std	Y+3, r26	; 0x03
    5900:	bc 83       	std	Y+4, r27	; 0x04
    5902:	ff 91       	pop	r31
    5904:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5908:	89 81       	ldd	r24, Y+1	; 0x01
    590a:	9a 81       	ldd	r25, Y+2	; 0x02
    590c:	ab 81       	ldd	r26, Y+3	; 0x03
    590e:	bc 81       	ldd	r27, Y+4	; 0x04
    5910:	bc 01       	movw	r22, r24
    5912:	cd 01       	movw	r24, r26
    5914:	24 96       	adiw	r28, 0x04	; 4
    5916:	cd bf       	out	0x3d, r28	; 61
    5918:	de bf       	out	0x3e, r29	; 62
    591a:	df 91       	pop	r29
    591c:	cf 91       	pop	r28
    591e:	08 95       	ret

00005920 <xTaskIncrementTick>:
    5920:	cf 93       	push	r28
    5922:	df 93       	push	r29
    5924:	cd b7       	in	r28, 0x3d	; 61
    5926:	de b7       	in	r29, 0x3e	; 62
    5928:	2d 97       	sbiw	r28, 0x0d	; 13
    592a:	cd bf       	out	0x3d, r28	; 61
    592c:	de bf       	out	0x3e, r29	; 62
    592e:	19 82       	std	Y+1, r1	; 0x01
    5930:	80 91 15 2d 	lds	r24, 0x2D15	; 0x802d15 <uxSchedulerSuspended>
    5934:	88 23       	and	r24, r24
    5936:	09 f0       	breq	.+2      	; 0x593a <xTaskIncrementTick+0x1a>
    5938:	f1 c0       	rjmp	.+482    	; 0x5b1c <xTaskIncrementTick+0x1fc>
    593a:	80 91 05 2d 	lds	r24, 0x2D05	; 0x802d05 <xTickCount>
    593e:	90 91 06 2d 	lds	r25, 0x2D06	; 0x802d06 <xTickCount+0x1>
    5942:	a0 91 07 2d 	lds	r26, 0x2D07	; 0x802d07 <xTickCount+0x2>
    5946:	b0 91 08 2d 	lds	r27, 0x2D08	; 0x802d08 <xTickCount+0x3>
    594a:	01 96       	adiw	r24, 0x01	; 1
    594c:	a1 1d       	adc	r26, r1
    594e:	b1 1d       	adc	r27, r1
    5950:	8a 83       	std	Y+2, r24	; 0x02
    5952:	9b 83       	std	Y+3, r25	; 0x03
    5954:	ac 83       	std	Y+4, r26	; 0x04
    5956:	bd 83       	std	Y+5, r27	; 0x05
    5958:	8a 81       	ldd	r24, Y+2	; 0x02
    595a:	9b 81       	ldd	r25, Y+3	; 0x03
    595c:	ac 81       	ldd	r26, Y+4	; 0x04
    595e:	bd 81       	ldd	r27, Y+5	; 0x05
    5960:	80 93 05 2d 	sts	0x2D05, r24	; 0x802d05 <xTickCount>
    5964:	90 93 06 2d 	sts	0x2D06, r25	; 0x802d06 <xTickCount+0x1>
    5968:	a0 93 07 2d 	sts	0x2D07, r26	; 0x802d07 <xTickCount+0x2>
    596c:	b0 93 08 2d 	sts	0x2D08, r27	; 0x802d08 <xTickCount+0x3>
    5970:	8a 81       	ldd	r24, Y+2	; 0x02
    5972:	9b 81       	ldd	r25, Y+3	; 0x03
    5974:	ac 81       	ldd	r26, Y+4	; 0x04
    5976:	bd 81       	ldd	r27, Y+5	; 0x05
    5978:	89 2b       	or	r24, r25
    597a:	8a 2b       	or	r24, r26
    597c:	8b 2b       	or	r24, r27
    597e:	d9 f4       	brne	.+54     	; 0x59b6 <xTaskIncrementTick+0x96>
    5980:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <pxDelayedTaskList>
    5984:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <pxDelayedTaskList+0x1>
    5988:	8e 83       	std	Y+6, r24	; 0x06
    598a:	9f 83       	std	Y+7, r25	; 0x07
    598c:	80 91 ec 2c 	lds	r24, 0x2CEC	; 0x802cec <pxOverflowDelayedTaskList>
    5990:	90 91 ed 2c 	lds	r25, 0x2CED	; 0x802ced <pxOverflowDelayedTaskList+0x1>
    5994:	80 93 ea 2c 	sts	0x2CEA, r24	; 0x802cea <pxDelayedTaskList>
    5998:	90 93 eb 2c 	sts	0x2CEB, r25	; 0x802ceb <pxDelayedTaskList+0x1>
    599c:	8e 81       	ldd	r24, Y+6	; 0x06
    599e:	9f 81       	ldd	r25, Y+7	; 0x07
    59a0:	80 93 ec 2c 	sts	0x2CEC, r24	; 0x802cec <pxOverflowDelayedTaskList>
    59a4:	90 93 ed 2c 	sts	0x2CED, r25	; 0x802ced <pxOverflowDelayedTaskList+0x1>
    59a8:	80 91 0d 2d 	lds	r24, 0x2D0D	; 0x802d0d <xNumOfOverflows>
    59ac:	8f 5f       	subi	r24, 0xFF	; 255
    59ae:	80 93 0d 2d 	sts	0x2D0D, r24	; 0x802d0d <xNumOfOverflows>
    59b2:	0e 94 02 31 	call	0x6204	; 0x6204 <prvResetNextTaskUnblockTime>
    59b6:	80 91 0f 2d 	lds	r24, 0x2D0F	; 0x802d0f <xNextTaskUnblockTime>
    59ba:	90 91 10 2d 	lds	r25, 0x2D10	; 0x802d10 <xNextTaskUnblockTime+0x1>
    59be:	a0 91 11 2d 	lds	r26, 0x2D11	; 0x802d11 <xNextTaskUnblockTime+0x2>
    59c2:	b0 91 12 2d 	lds	r27, 0x2D12	; 0x802d12 <xNextTaskUnblockTime+0x3>
    59c6:	2a 81       	ldd	r18, Y+2	; 0x02
    59c8:	3b 81       	ldd	r19, Y+3	; 0x03
    59ca:	4c 81       	ldd	r20, Y+4	; 0x04
    59cc:	5d 81       	ldd	r21, Y+5	; 0x05
    59ce:	28 17       	cp	r18, r24
    59d0:	39 07       	cpc	r19, r25
    59d2:	4a 07       	cpc	r20, r26
    59d4:	5b 07       	cpc	r21, r27
    59d6:	08 f4       	brcc	.+2      	; 0x59da <xTaskIncrementTick+0xba>
    59d8:	8a c0       	rjmp	.+276    	; 0x5aee <xTaskIncrementTick+0x1ce>
    59da:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <pxDelayedTaskList>
    59de:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <pxDelayedTaskList+0x1>
    59e2:	fc 01       	movw	r30, r24
    59e4:	80 81       	ld	r24, Z
    59e6:	88 23       	and	r24, r24
    59e8:	61 f4       	brne	.+24     	; 0x5a02 <xTaskIncrementTick+0xe2>
    59ea:	8f ef       	ldi	r24, 0xFF	; 255
    59ec:	9f ef       	ldi	r25, 0xFF	; 255
    59ee:	dc 01       	movw	r26, r24
    59f0:	80 93 0f 2d 	sts	0x2D0F, r24	; 0x802d0f <xNextTaskUnblockTime>
    59f4:	90 93 10 2d 	sts	0x2D10, r25	; 0x802d10 <xNextTaskUnblockTime+0x1>
    59f8:	a0 93 11 2d 	sts	0x2D11, r26	; 0x802d11 <xNextTaskUnblockTime+0x2>
    59fc:	b0 93 12 2d 	sts	0x2D12, r27	; 0x802d12 <xNextTaskUnblockTime+0x3>
    5a00:	76 c0       	rjmp	.+236    	; 0x5aee <xTaskIncrementTick+0x1ce>
    5a02:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <pxDelayedTaskList>
    5a06:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <pxDelayedTaskList+0x1>
    5a0a:	fc 01       	movw	r30, r24
    5a0c:	87 81       	ldd	r24, Z+7	; 0x07
    5a0e:	90 85       	ldd	r25, Z+8	; 0x08
    5a10:	fc 01       	movw	r30, r24
    5a12:	80 85       	ldd	r24, Z+8	; 0x08
    5a14:	91 85       	ldd	r25, Z+9	; 0x09
    5a16:	88 87       	std	Y+8, r24	; 0x08
    5a18:	99 87       	std	Y+9, r25	; 0x09
    5a1a:	88 85       	ldd	r24, Y+8	; 0x08
    5a1c:	99 85       	ldd	r25, Y+9	; 0x09
    5a1e:	fc 01       	movw	r30, r24
    5a20:	82 81       	ldd	r24, Z+2	; 0x02
    5a22:	93 81       	ldd	r25, Z+3	; 0x03
    5a24:	a4 81       	ldd	r26, Z+4	; 0x04
    5a26:	b5 81       	ldd	r27, Z+5	; 0x05
    5a28:	8a 87       	std	Y+10, r24	; 0x0a
    5a2a:	9b 87       	std	Y+11, r25	; 0x0b
    5a2c:	ac 87       	std	Y+12, r26	; 0x0c
    5a2e:	bd 87       	std	Y+13, r27	; 0x0d
    5a30:	2a 81       	ldd	r18, Y+2	; 0x02
    5a32:	3b 81       	ldd	r19, Y+3	; 0x03
    5a34:	4c 81       	ldd	r20, Y+4	; 0x04
    5a36:	5d 81       	ldd	r21, Y+5	; 0x05
    5a38:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5a3c:	ac 85       	ldd	r26, Y+12	; 0x0c
    5a3e:	bd 85       	ldd	r27, Y+13	; 0x0d
    5a40:	28 17       	cp	r18, r24
    5a42:	39 07       	cpc	r19, r25
    5a44:	4a 07       	cpc	r20, r26
    5a46:	5b 07       	cpc	r21, r27
    5a48:	68 f4       	brcc	.+26     	; 0x5a64 <xTaskIncrementTick+0x144>
    5a4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5a4e:	ac 85       	ldd	r26, Y+12	; 0x0c
    5a50:	bd 85       	ldd	r27, Y+13	; 0x0d
    5a52:	80 93 0f 2d 	sts	0x2D0F, r24	; 0x802d0f <xNextTaskUnblockTime>
    5a56:	90 93 10 2d 	sts	0x2D10, r25	; 0x802d10 <xNextTaskUnblockTime+0x1>
    5a5a:	a0 93 11 2d 	sts	0x2D11, r26	; 0x802d11 <xNextTaskUnblockTime+0x2>
    5a5e:	b0 93 12 2d 	sts	0x2D12, r27	; 0x802d12 <xNextTaskUnblockTime+0x3>
    5a62:	45 c0       	rjmp	.+138    	; 0x5aee <xTaskIncrementTick+0x1ce>
    5a64:	88 85       	ldd	r24, Y+8	; 0x08
    5a66:	99 85       	ldd	r25, Y+9	; 0x09
    5a68:	02 96       	adiw	r24, 0x02	; 2
    5a6a:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
    5a6e:	88 85       	ldd	r24, Y+8	; 0x08
    5a70:	99 85       	ldd	r25, Y+9	; 0x09
    5a72:	fc 01       	movw	r30, r24
    5a74:	80 8d       	ldd	r24, Z+24	; 0x18
    5a76:	91 8d       	ldd	r25, Z+25	; 0x19
    5a78:	89 2b       	or	r24, r25
    5a7a:	29 f0       	breq	.+10     	; 0x5a86 <xTaskIncrementTick+0x166>
    5a7c:	88 85       	ldd	r24, Y+8	; 0x08
    5a7e:	99 85       	ldd	r25, Y+9	; 0x09
    5a80:	0e 96       	adiw	r24, 0x0e	; 14
    5a82:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
    5a86:	88 85       	ldd	r24, Y+8	; 0x08
    5a88:	99 85       	ldd	r25, Y+9	; 0x09
    5a8a:	fc 01       	movw	r30, r24
    5a8c:	92 8d       	ldd	r25, Z+26	; 0x1a
    5a8e:	80 91 09 2d 	lds	r24, 0x2D09	; 0x802d09 <uxTopReadyPriority>
    5a92:	89 17       	cp	r24, r25
    5a94:	30 f4       	brcc	.+12     	; 0x5aa2 <xTaskIncrementTick+0x182>
    5a96:	88 85       	ldd	r24, Y+8	; 0x08
    5a98:	99 85       	ldd	r25, Y+9	; 0x09
    5a9a:	fc 01       	movw	r30, r24
    5a9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a9e:	80 93 09 2d 	sts	0x2D09, r24	; 0x802d09 <uxTopReadyPriority>
    5aa2:	88 85       	ldd	r24, Y+8	; 0x08
    5aa4:	99 85       	ldd	r25, Y+9	; 0x09
    5aa6:	ac 01       	movw	r20, r24
    5aa8:	4e 5f       	subi	r20, 0xFE	; 254
    5aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    5aac:	88 85       	ldd	r24, Y+8	; 0x08
    5aae:	99 85       	ldd	r25, Y+9	; 0x09
    5ab0:	fc 01       	movw	r30, r24
    5ab2:	82 8d       	ldd	r24, Z+26	; 0x1a
    5ab4:	28 2f       	mov	r18, r24
    5ab6:	30 e0       	ldi	r19, 0x00	; 0
    5ab8:	6b e0       	ldi	r22, 0x0B	; 11
    5aba:	62 9f       	mul	r22, r18
    5abc:	c0 01       	movw	r24, r0
    5abe:	63 9f       	mul	r22, r19
    5ac0:	90 0d       	add	r25, r0
    5ac2:	11 24       	eor	r1, r1
    5ac4:	88 55       	subi	r24, 0x58	; 88
    5ac6:	93 4d       	sbci	r25, 0xD3	; 211
    5ac8:	ba 01       	movw	r22, r20
    5aca:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vListInsertEnd>
    5ace:	88 85       	ldd	r24, Y+8	; 0x08
    5ad0:	99 85       	ldd	r25, Y+9	; 0x09
    5ad2:	fc 01       	movw	r30, r24
    5ad4:	22 8d       	ldd	r18, Z+26	; 0x1a
    5ad6:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5ada:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5ade:	fc 01       	movw	r30, r24
    5ae0:	82 8d       	ldd	r24, Z+26	; 0x1a
    5ae2:	28 17       	cp	r18, r24
    5ae4:	08 f4       	brcc	.+2      	; 0x5ae8 <xTaskIncrementTick+0x1c8>
    5ae6:	79 cf       	rjmp	.-270    	; 0x59da <xTaskIncrementTick+0xba>
    5ae8:	81 e0       	ldi	r24, 0x01	; 1
    5aea:	89 83       	std	Y+1, r24	; 0x01
    5aec:	76 cf       	rjmp	.-276    	; 0x59da <xTaskIncrementTick+0xba>
    5aee:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5af2:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5af6:	fc 01       	movw	r30, r24
    5af8:	82 8d       	ldd	r24, Z+26	; 0x1a
    5afa:	28 2f       	mov	r18, r24
    5afc:	30 e0       	ldi	r19, 0x00	; 0
    5afe:	4b e0       	ldi	r20, 0x0B	; 11
    5b00:	42 9f       	mul	r20, r18
    5b02:	c0 01       	movw	r24, r0
    5b04:	43 9f       	mul	r20, r19
    5b06:	90 0d       	add	r25, r0
    5b08:	11 24       	eor	r1, r1
    5b0a:	88 55       	subi	r24, 0x58	; 88
    5b0c:	93 4d       	sbci	r25, 0xD3	; 211
    5b0e:	fc 01       	movw	r30, r24
    5b10:	80 81       	ld	r24, Z
    5b12:	82 30       	cpi	r24, 0x02	; 2
    5b14:	40 f0       	brcs	.+16     	; 0x5b26 <xTaskIncrementTick+0x206>
    5b16:	81 e0       	ldi	r24, 0x01	; 1
    5b18:	89 83       	std	Y+1, r24	; 0x01
    5b1a:	05 c0       	rjmp	.+10     	; 0x5b26 <xTaskIncrementTick+0x206>
    5b1c:	80 91 0b 2d 	lds	r24, 0x2D0B	; 0x802d0b <uxPendedTicks>
    5b20:	8f 5f       	subi	r24, 0xFF	; 255
    5b22:	80 93 0b 2d 	sts	0x2D0B, r24	; 0x802d0b <uxPendedTicks>
    5b26:	80 91 0c 2d 	lds	r24, 0x2D0C	; 0x802d0c <xYieldPending>
    5b2a:	88 23       	and	r24, r24
    5b2c:	11 f0       	breq	.+4      	; 0x5b32 <xTaskIncrementTick+0x212>
    5b2e:	81 e0       	ldi	r24, 0x01	; 1
    5b30:	89 83       	std	Y+1, r24	; 0x01
    5b32:	89 81       	ldd	r24, Y+1	; 0x01
    5b34:	2d 96       	adiw	r28, 0x0d	; 13
    5b36:	cd bf       	out	0x3d, r28	; 61
    5b38:	de bf       	out	0x3e, r29	; 62
    5b3a:	df 91       	pop	r29
    5b3c:	cf 91       	pop	r28
    5b3e:	08 95       	ret

00005b40 <vTaskSwitchContext>:
    5b40:	cf 93       	push	r28
    5b42:	df 93       	push	r29
    5b44:	cd b7       	in	r28, 0x3d	; 61
    5b46:	de b7       	in	r29, 0x3e	; 62
    5b48:	29 97       	sbiw	r28, 0x09	; 9
    5b4a:	cd bf       	out	0x3d, r28	; 61
    5b4c:	de bf       	out	0x3e, r29	; 62
    5b4e:	80 91 15 2d 	lds	r24, 0x2D15	; 0x802d15 <uxSchedulerSuspended>
    5b52:	88 23       	and	r24, r24
    5b54:	21 f0       	breq	.+8      	; 0x5b5e <vTaskSwitchContext+0x1e>
    5b56:	81 e0       	ldi	r24, 0x01	; 1
    5b58:	80 93 0c 2d 	sts	0x2D0C, r24	; 0x802d0c <xYieldPending>
    5b5c:	ba c0       	rjmp	.+372    	; 0x5cd2 <vTaskSwitchContext+0x192>
    5b5e:	10 92 0c 2d 	sts	0x2D0C, r1	; 0x802d0c <xYieldPending>
    5b62:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5b66:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5b6a:	fc 01       	movw	r30, r24
    5b6c:	83 8d       	ldd	r24, Z+27	; 0x1b
    5b6e:	94 8d       	ldd	r25, Z+28	; 0x1c
    5b70:	8a 83       	std	Y+2, r24	; 0x02
    5b72:	9b 83       	std	Y+3, r25	; 0x03
    5b74:	85 ea       	ldi	r24, 0xA5	; 165
    5b76:	95 ea       	ldi	r25, 0xA5	; 165
    5b78:	dc 01       	movw	r26, r24
    5b7a:	8c 83       	std	Y+4, r24	; 0x04
    5b7c:	9d 83       	std	Y+5, r25	; 0x05
    5b7e:	ae 83       	std	Y+6, r26	; 0x06
    5b80:	bf 83       	std	Y+7, r27	; 0x07
    5b82:	8a 81       	ldd	r24, Y+2	; 0x02
    5b84:	9b 81       	ldd	r25, Y+3	; 0x03
    5b86:	fc 01       	movw	r30, r24
    5b88:	20 81       	ld	r18, Z
    5b8a:	31 81       	ldd	r19, Z+1	; 0x01
    5b8c:	42 81       	ldd	r20, Z+2	; 0x02
    5b8e:	53 81       	ldd	r21, Z+3	; 0x03
    5b90:	8c 81       	ldd	r24, Y+4	; 0x04
    5b92:	9d 81       	ldd	r25, Y+5	; 0x05
    5b94:	ae 81       	ldd	r26, Y+6	; 0x06
    5b96:	bf 81       	ldd	r27, Y+7	; 0x07
    5b98:	28 17       	cp	r18, r24
    5b9a:	39 07       	cpc	r19, r25
    5b9c:	4a 07       	cpc	r20, r26
    5b9e:	5b 07       	cpc	r21, r27
    5ba0:	99 f5       	brne	.+102    	; 0x5c08 <vTaskSwitchContext+0xc8>
    5ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ba6:	04 96       	adiw	r24, 0x04	; 4
    5ba8:	fc 01       	movw	r30, r24
    5baa:	20 81       	ld	r18, Z
    5bac:	31 81       	ldd	r19, Z+1	; 0x01
    5bae:	42 81       	ldd	r20, Z+2	; 0x02
    5bb0:	53 81       	ldd	r21, Z+3	; 0x03
    5bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    5bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    5bb6:	ae 81       	ldd	r26, Y+6	; 0x06
    5bb8:	bf 81       	ldd	r27, Y+7	; 0x07
    5bba:	28 17       	cp	r18, r24
    5bbc:	39 07       	cpc	r19, r25
    5bbe:	4a 07       	cpc	r20, r26
    5bc0:	5b 07       	cpc	r21, r27
    5bc2:	11 f5       	brne	.+68     	; 0x5c08 <vTaskSwitchContext+0xc8>
    5bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    5bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    5bc8:	08 96       	adiw	r24, 0x08	; 8
    5bca:	fc 01       	movw	r30, r24
    5bcc:	20 81       	ld	r18, Z
    5bce:	31 81       	ldd	r19, Z+1	; 0x01
    5bd0:	42 81       	ldd	r20, Z+2	; 0x02
    5bd2:	53 81       	ldd	r21, Z+3	; 0x03
    5bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    5bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    5bd8:	ae 81       	ldd	r26, Y+6	; 0x06
    5bda:	bf 81       	ldd	r27, Y+7	; 0x07
    5bdc:	28 17       	cp	r18, r24
    5bde:	39 07       	cpc	r19, r25
    5be0:	4a 07       	cpc	r20, r26
    5be2:	5b 07       	cpc	r21, r27
    5be4:	89 f4       	brne	.+34     	; 0x5c08 <vTaskSwitchContext+0xc8>
    5be6:	8a 81       	ldd	r24, Y+2	; 0x02
    5be8:	9b 81       	ldd	r25, Y+3	; 0x03
    5bea:	0c 96       	adiw	r24, 0x0c	; 12
    5bec:	fc 01       	movw	r30, r24
    5bee:	20 81       	ld	r18, Z
    5bf0:	31 81       	ldd	r19, Z+1	; 0x01
    5bf2:	42 81       	ldd	r20, Z+2	; 0x02
    5bf4:	53 81       	ldd	r21, Z+3	; 0x03
    5bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    5bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    5bfa:	ae 81       	ldd	r26, Y+6	; 0x06
    5bfc:	bf 81       	ldd	r27, Y+7	; 0x07
    5bfe:	28 17       	cp	r18, r24
    5c00:	39 07       	cpc	r19, r25
    5c02:	4a 07       	cpc	r20, r26
    5c04:	5b 07       	cpc	r21, r27
    5c06:	71 f0       	breq	.+28     	; 0x5c24 <vTaskSwitchContext+0xe4>
    5c08:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5c0c:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5c10:	9c 01       	movw	r18, r24
    5c12:	23 5e       	subi	r18, 0xE3	; 227
    5c14:	3f 4f       	sbci	r19, 0xFF	; 255
    5c16:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5c1a:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5c1e:	b9 01       	movw	r22, r18
    5c20:	0e 94 a1 1b 	call	0x3742	; 0x3742 <vApplicationStackOverflowHook>
    5c24:	80 91 09 2d 	lds	r24, 0x2D09	; 0x802d09 <uxTopReadyPriority>
    5c28:	89 83       	std	Y+1, r24	; 0x01
    5c2a:	03 c0       	rjmp	.+6      	; 0x5c32 <vTaskSwitchContext+0xf2>
    5c2c:	89 81       	ldd	r24, Y+1	; 0x01
    5c2e:	81 50       	subi	r24, 0x01	; 1
    5c30:	89 83       	std	Y+1, r24	; 0x01
    5c32:	89 81       	ldd	r24, Y+1	; 0x01
    5c34:	28 2f       	mov	r18, r24
    5c36:	30 e0       	ldi	r19, 0x00	; 0
    5c38:	4b e0       	ldi	r20, 0x0B	; 11
    5c3a:	42 9f       	mul	r20, r18
    5c3c:	c0 01       	movw	r24, r0
    5c3e:	43 9f       	mul	r20, r19
    5c40:	90 0d       	add	r25, r0
    5c42:	11 24       	eor	r1, r1
    5c44:	88 55       	subi	r24, 0x58	; 88
    5c46:	93 4d       	sbci	r25, 0xD3	; 211
    5c48:	fc 01       	movw	r30, r24
    5c4a:	80 81       	ld	r24, Z
    5c4c:	88 23       	and	r24, r24
    5c4e:	71 f3       	breq	.-36     	; 0x5c2c <vTaskSwitchContext+0xec>
    5c50:	89 81       	ldd	r24, Y+1	; 0x01
    5c52:	28 2f       	mov	r18, r24
    5c54:	30 e0       	ldi	r19, 0x00	; 0
    5c56:	4b e0       	ldi	r20, 0x0B	; 11
    5c58:	42 9f       	mul	r20, r18
    5c5a:	c0 01       	movw	r24, r0
    5c5c:	43 9f       	mul	r20, r19
    5c5e:	90 0d       	add	r25, r0
    5c60:	11 24       	eor	r1, r1
    5c62:	88 55       	subi	r24, 0x58	; 88
    5c64:	93 4d       	sbci	r25, 0xD3	; 211
    5c66:	88 87       	std	Y+8, r24	; 0x08
    5c68:	99 87       	std	Y+9, r25	; 0x09
    5c6a:	88 85       	ldd	r24, Y+8	; 0x08
    5c6c:	99 85       	ldd	r25, Y+9	; 0x09
    5c6e:	fc 01       	movw	r30, r24
    5c70:	81 81       	ldd	r24, Z+1	; 0x01
    5c72:	92 81       	ldd	r25, Z+2	; 0x02
    5c74:	fc 01       	movw	r30, r24
    5c76:	24 81       	ldd	r18, Z+4	; 0x04
    5c78:	35 81       	ldd	r19, Z+5	; 0x05
    5c7a:	88 85       	ldd	r24, Y+8	; 0x08
    5c7c:	99 85       	ldd	r25, Y+9	; 0x09
    5c7e:	fc 01       	movw	r30, r24
    5c80:	21 83       	std	Z+1, r18	; 0x01
    5c82:	32 83       	std	Z+2, r19	; 0x02
    5c84:	88 85       	ldd	r24, Y+8	; 0x08
    5c86:	99 85       	ldd	r25, Y+9	; 0x09
    5c88:	fc 01       	movw	r30, r24
    5c8a:	21 81       	ldd	r18, Z+1	; 0x01
    5c8c:	32 81       	ldd	r19, Z+2	; 0x02
    5c8e:	88 85       	ldd	r24, Y+8	; 0x08
    5c90:	99 85       	ldd	r25, Y+9	; 0x09
    5c92:	03 96       	adiw	r24, 0x03	; 3
    5c94:	28 17       	cp	r18, r24
    5c96:	39 07       	cpc	r19, r25
    5c98:	69 f4       	brne	.+26     	; 0x5cb4 <vTaskSwitchContext+0x174>
    5c9a:	88 85       	ldd	r24, Y+8	; 0x08
    5c9c:	99 85       	ldd	r25, Y+9	; 0x09
    5c9e:	fc 01       	movw	r30, r24
    5ca0:	81 81       	ldd	r24, Z+1	; 0x01
    5ca2:	92 81       	ldd	r25, Z+2	; 0x02
    5ca4:	fc 01       	movw	r30, r24
    5ca6:	24 81       	ldd	r18, Z+4	; 0x04
    5ca8:	35 81       	ldd	r19, Z+5	; 0x05
    5caa:	88 85       	ldd	r24, Y+8	; 0x08
    5cac:	99 85       	ldd	r25, Y+9	; 0x09
    5cae:	fc 01       	movw	r30, r24
    5cb0:	21 83       	std	Z+1, r18	; 0x01
    5cb2:	32 83       	std	Z+2, r19	; 0x02
    5cb4:	88 85       	ldd	r24, Y+8	; 0x08
    5cb6:	99 85       	ldd	r25, Y+9	; 0x09
    5cb8:	fc 01       	movw	r30, r24
    5cba:	81 81       	ldd	r24, Z+1	; 0x01
    5cbc:	92 81       	ldd	r25, Z+2	; 0x02
    5cbe:	fc 01       	movw	r30, r24
    5cc0:	80 85       	ldd	r24, Z+8	; 0x08
    5cc2:	91 85       	ldd	r25, Z+9	; 0x09
    5cc4:	80 93 a6 2c 	sts	0x2CA6, r24	; 0x802ca6 <pxCurrentTCB>
    5cc8:	90 93 a7 2c 	sts	0x2CA7, r25	; 0x802ca7 <pxCurrentTCB+0x1>
    5ccc:	89 81       	ldd	r24, Y+1	; 0x01
    5cce:	80 93 09 2d 	sts	0x2D09, r24	; 0x802d09 <uxTopReadyPriority>
    5cd2:	00 00       	nop
    5cd4:	29 96       	adiw	r28, 0x09	; 9
    5cd6:	cd bf       	out	0x3d, r28	; 61
    5cd8:	de bf       	out	0x3e, r29	; 62
    5cda:	df 91       	pop	r29
    5cdc:	cf 91       	pop	r28
    5cde:	08 95       	ret

00005ce0 <vTaskPlaceOnEventList>:
    5ce0:	cf 93       	push	r28
    5ce2:	df 93       	push	r29
    5ce4:	00 d0       	rcall	.+0      	; 0x5ce6 <vTaskPlaceOnEventList+0x6>
    5ce6:	00 d0       	rcall	.+0      	; 0x5ce8 <vTaskPlaceOnEventList+0x8>
    5ce8:	cd b7       	in	r28, 0x3d	; 61
    5cea:	de b7       	in	r29, 0x3e	; 62
    5cec:	89 83       	std	Y+1, r24	; 0x01
    5cee:	9a 83       	std	Y+2, r25	; 0x02
    5cf0:	4b 83       	std	Y+3, r20	; 0x03
    5cf2:	5c 83       	std	Y+4, r21	; 0x04
    5cf4:	6d 83       	std	Y+5, r22	; 0x05
    5cf6:	7e 83       	std	Y+6, r23	; 0x06
    5cf8:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5cfc:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5d00:	9c 01       	movw	r18, r24
    5d02:	22 5f       	subi	r18, 0xF2	; 242
    5d04:	3f 4f       	sbci	r19, 0xFF	; 255
    5d06:	89 81       	ldd	r24, Y+1	; 0x01
    5d08:	9a 81       	ldd	r25, Y+2	; 0x02
    5d0a:	b9 01       	movw	r22, r18
    5d0c:	0e 94 12 20 	call	0x4024	; 0x4024 <vListInsert>
    5d10:	8b 81       	ldd	r24, Y+3	; 0x03
    5d12:	9c 81       	ldd	r25, Y+4	; 0x04
    5d14:	ad 81       	ldd	r26, Y+5	; 0x05
    5d16:	be 81       	ldd	r27, Y+6	; 0x06
    5d18:	41 e0       	ldi	r20, 0x01	; 1
    5d1a:	bc 01       	movw	r22, r24
    5d1c:	cd 01       	movw	r24, r26
    5d1e:	0e 94 9c 31 	call	0x6338	; 0x6338 <prvAddCurrentTaskToDelayedList>
    5d22:	00 00       	nop
    5d24:	26 96       	adiw	r28, 0x06	; 6
    5d26:	cd bf       	out	0x3d, r28	; 61
    5d28:	de bf       	out	0x3e, r29	; 62
    5d2a:	df 91       	pop	r29
    5d2c:	cf 91       	pop	r28
    5d2e:	08 95       	ret

00005d30 <vTaskPlaceOnUnorderedEventList>:
    5d30:	0f 93       	push	r16
    5d32:	1f 93       	push	r17
    5d34:	cf 93       	push	r28
    5d36:	df 93       	push	r29
    5d38:	cd b7       	in	r28, 0x3d	; 61
    5d3a:	de b7       	in	r29, 0x3e	; 62
    5d3c:	2a 97       	sbiw	r28, 0x0a	; 10
    5d3e:	cd bf       	out	0x3d, r28	; 61
    5d40:	de bf       	out	0x3e, r29	; 62
    5d42:	89 83       	std	Y+1, r24	; 0x01
    5d44:	9a 83       	std	Y+2, r25	; 0x02
    5d46:	4b 83       	std	Y+3, r20	; 0x03
    5d48:	5c 83       	std	Y+4, r21	; 0x04
    5d4a:	6d 83       	std	Y+5, r22	; 0x05
    5d4c:	7e 83       	std	Y+6, r23	; 0x06
    5d4e:	0f 83       	std	Y+7, r16	; 0x07
    5d50:	18 87       	std	Y+8, r17	; 0x08
    5d52:	29 87       	std	Y+9, r18	; 0x09
    5d54:	3a 87       	std	Y+10, r19	; 0x0a
    5d56:	20 91 a6 2c 	lds	r18, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5d5a:	30 91 a7 2c 	lds	r19, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    5d60:	9c 81       	ldd	r25, Y+4	; 0x04
    5d62:	ad 81       	ldd	r26, Y+5	; 0x05
    5d64:	be 81       	ldd	r27, Y+6	; 0x06
    5d66:	b0 68       	ori	r27, 0x80	; 128
    5d68:	f9 01       	movw	r30, r18
    5d6a:	86 87       	std	Z+14, r24	; 0x0e
    5d6c:	97 87       	std	Z+15, r25	; 0x0f
    5d6e:	a0 8b       	std	Z+16, r26	; 0x10
    5d70:	b1 8b       	std	Z+17, r27	; 0x11
    5d72:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5d76:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5d7a:	9c 01       	movw	r18, r24
    5d7c:	22 5f       	subi	r18, 0xF2	; 242
    5d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d80:	89 81       	ldd	r24, Y+1	; 0x01
    5d82:	9a 81       	ldd	r25, Y+2	; 0x02
    5d84:	b9 01       	movw	r22, r18
    5d86:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vListInsertEnd>
    5d8a:	8f 81       	ldd	r24, Y+7	; 0x07
    5d8c:	98 85       	ldd	r25, Y+8	; 0x08
    5d8e:	a9 85       	ldd	r26, Y+9	; 0x09
    5d90:	ba 85       	ldd	r27, Y+10	; 0x0a
    5d92:	41 e0       	ldi	r20, 0x01	; 1
    5d94:	bc 01       	movw	r22, r24
    5d96:	cd 01       	movw	r24, r26
    5d98:	0e 94 9c 31 	call	0x6338	; 0x6338 <prvAddCurrentTaskToDelayedList>
    5d9c:	00 00       	nop
    5d9e:	2a 96       	adiw	r28, 0x0a	; 10
    5da0:	cd bf       	out	0x3d, r28	; 61
    5da2:	de bf       	out	0x3e, r29	; 62
    5da4:	df 91       	pop	r29
    5da6:	cf 91       	pop	r28
    5da8:	1f 91       	pop	r17
    5daa:	0f 91       	pop	r16
    5dac:	08 95       	ret

00005dae <vTaskPlaceOnEventListRestricted>:
    5dae:	cf 93       	push	r28
    5db0:	df 93       	push	r29
    5db2:	cd b7       	in	r28, 0x3d	; 61
    5db4:	de b7       	in	r29, 0x3e	; 62
    5db6:	27 97       	sbiw	r28, 0x07	; 7
    5db8:	cd bf       	out	0x3d, r28	; 61
    5dba:	de bf       	out	0x3e, r29	; 62
    5dbc:	89 83       	std	Y+1, r24	; 0x01
    5dbe:	9a 83       	std	Y+2, r25	; 0x02
    5dc0:	4b 83       	std	Y+3, r20	; 0x03
    5dc2:	5c 83       	std	Y+4, r21	; 0x04
    5dc4:	6d 83       	std	Y+5, r22	; 0x05
    5dc6:	7e 83       	std	Y+6, r23	; 0x06
    5dc8:	2f 83       	std	Y+7, r18	; 0x07
    5dca:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5dce:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5dd2:	9c 01       	movw	r18, r24
    5dd4:	22 5f       	subi	r18, 0xF2	; 242
    5dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    5dd8:	89 81       	ldd	r24, Y+1	; 0x01
    5dda:	9a 81       	ldd	r25, Y+2	; 0x02
    5ddc:	b9 01       	movw	r22, r18
    5dde:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vListInsertEnd>
    5de2:	8f 81       	ldd	r24, Y+7	; 0x07
    5de4:	88 23       	and	r24, r24
    5de6:	39 f0       	breq	.+14     	; 0x5df6 <vTaskPlaceOnEventListRestricted+0x48>
    5de8:	8f ef       	ldi	r24, 0xFF	; 255
    5dea:	9f ef       	ldi	r25, 0xFF	; 255
    5dec:	dc 01       	movw	r26, r24
    5dee:	8b 83       	std	Y+3, r24	; 0x03
    5df0:	9c 83       	std	Y+4, r25	; 0x04
    5df2:	ad 83       	std	Y+5, r26	; 0x05
    5df4:	be 83       	std	Y+6, r27	; 0x06
    5df6:	8b 81       	ldd	r24, Y+3	; 0x03
    5df8:	9c 81       	ldd	r25, Y+4	; 0x04
    5dfa:	ad 81       	ldd	r26, Y+5	; 0x05
    5dfc:	be 81       	ldd	r27, Y+6	; 0x06
    5dfe:	4f 81       	ldd	r20, Y+7	; 0x07
    5e00:	bc 01       	movw	r22, r24
    5e02:	cd 01       	movw	r24, r26
    5e04:	0e 94 9c 31 	call	0x6338	; 0x6338 <prvAddCurrentTaskToDelayedList>
    5e08:	00 00       	nop
    5e0a:	27 96       	adiw	r28, 0x07	; 7
    5e0c:	cd bf       	out	0x3d, r28	; 61
    5e0e:	de bf       	out	0x3e, r29	; 62
    5e10:	df 91       	pop	r29
    5e12:	cf 91       	pop	r28
    5e14:	08 95       	ret

00005e16 <xTaskRemoveFromEventList>:
    5e16:	cf 93       	push	r28
    5e18:	df 93       	push	r29
    5e1a:	cd b7       	in	r28, 0x3d	; 61
    5e1c:	de b7       	in	r29, 0x3e	; 62
    5e1e:	25 97       	sbiw	r28, 0x05	; 5
    5e20:	cd bf       	out	0x3d, r28	; 61
    5e22:	de bf       	out	0x3e, r29	; 62
    5e24:	8c 83       	std	Y+4, r24	; 0x04
    5e26:	9d 83       	std	Y+5, r25	; 0x05
    5e28:	8c 81       	ldd	r24, Y+4	; 0x04
    5e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    5e2c:	fc 01       	movw	r30, r24
    5e2e:	87 81       	ldd	r24, Z+7	; 0x07
    5e30:	90 85       	ldd	r25, Z+8	; 0x08
    5e32:	fc 01       	movw	r30, r24
    5e34:	80 85       	ldd	r24, Z+8	; 0x08
    5e36:	91 85       	ldd	r25, Z+9	; 0x09
    5e38:	8a 83       	std	Y+2, r24	; 0x02
    5e3a:	9b 83       	std	Y+3, r25	; 0x03
    5e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    5e40:	0e 96       	adiw	r24, 0x0e	; 14
    5e42:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
    5e46:	80 91 15 2d 	lds	r24, 0x2D15	; 0x802d15 <uxSchedulerSuspended>
    5e4a:	88 23       	and	r24, r24
    5e4c:	51 f5       	brne	.+84     	; 0x5ea2 <xTaskRemoveFromEventList+0x8c>
    5e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e50:	9b 81       	ldd	r25, Y+3	; 0x03
    5e52:	02 96       	adiw	r24, 0x02	; 2
    5e54:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
    5e58:	8a 81       	ldd	r24, Y+2	; 0x02
    5e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    5e5c:	fc 01       	movw	r30, r24
    5e5e:	92 8d       	ldd	r25, Z+26	; 0x1a
    5e60:	80 91 09 2d 	lds	r24, 0x2D09	; 0x802d09 <uxTopReadyPriority>
    5e64:	89 17       	cp	r24, r25
    5e66:	30 f4       	brcc	.+12     	; 0x5e74 <xTaskRemoveFromEventList+0x5e>
    5e68:	8a 81       	ldd	r24, Y+2	; 0x02
    5e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    5e6c:	fc 01       	movw	r30, r24
    5e6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5e70:	80 93 09 2d 	sts	0x2D09, r24	; 0x802d09 <uxTopReadyPriority>
    5e74:	8a 81       	ldd	r24, Y+2	; 0x02
    5e76:	9b 81       	ldd	r25, Y+3	; 0x03
    5e78:	ac 01       	movw	r20, r24
    5e7a:	4e 5f       	subi	r20, 0xFE	; 254
    5e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e80:	9b 81       	ldd	r25, Y+3	; 0x03
    5e82:	fc 01       	movw	r30, r24
    5e84:	82 8d       	ldd	r24, Z+26	; 0x1a
    5e86:	28 2f       	mov	r18, r24
    5e88:	30 e0       	ldi	r19, 0x00	; 0
    5e8a:	6b e0       	ldi	r22, 0x0B	; 11
    5e8c:	62 9f       	mul	r22, r18
    5e8e:	c0 01       	movw	r24, r0
    5e90:	63 9f       	mul	r22, r19
    5e92:	90 0d       	add	r25, r0
    5e94:	11 24       	eor	r1, r1
    5e96:	88 55       	subi	r24, 0x58	; 88
    5e98:	93 4d       	sbci	r25, 0xD3	; 211
    5e9a:	ba 01       	movw	r22, r20
    5e9c:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vListInsertEnd>
    5ea0:	08 c0       	rjmp	.+16     	; 0x5eb2 <xTaskRemoveFromEventList+0x9c>
    5ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ea6:	0e 96       	adiw	r24, 0x0e	; 14
    5ea8:	bc 01       	movw	r22, r24
    5eaa:	8e ee       	ldi	r24, 0xEE	; 238
    5eac:	9c e2       	ldi	r25, 0x2C	; 44
    5eae:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vListInsertEnd>
    5eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    5eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    5eb6:	fc 01       	movw	r30, r24
    5eb8:	22 8d       	ldd	r18, Z+26	; 0x1a
    5eba:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5ebe:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5ec2:	fc 01       	movw	r30, r24
    5ec4:	82 8d       	ldd	r24, Z+26	; 0x1a
    5ec6:	82 17       	cp	r24, r18
    5ec8:	30 f4       	brcc	.+12     	; 0x5ed6 <xTaskRemoveFromEventList+0xc0>
    5eca:	81 e0       	ldi	r24, 0x01	; 1
    5ecc:	89 83       	std	Y+1, r24	; 0x01
    5ece:	81 e0       	ldi	r24, 0x01	; 1
    5ed0:	80 93 0c 2d 	sts	0x2D0C, r24	; 0x802d0c <xYieldPending>
    5ed4:	01 c0       	rjmp	.+2      	; 0x5ed8 <xTaskRemoveFromEventList+0xc2>
    5ed6:	19 82       	std	Y+1, r1	; 0x01
    5ed8:	89 81       	ldd	r24, Y+1	; 0x01
    5eda:	25 96       	adiw	r28, 0x05	; 5
    5edc:	cd bf       	out	0x3d, r28	; 61
    5ede:	de bf       	out	0x3e, r29	; 62
    5ee0:	df 91       	pop	r29
    5ee2:	cf 91       	pop	r28
    5ee4:	08 95       	ret

00005ee6 <vTaskRemoveFromUnorderedEventList>:
    5ee6:	cf 93       	push	r28
    5ee8:	df 93       	push	r29
    5eea:	cd b7       	in	r28, 0x3d	; 61
    5eec:	de b7       	in	r29, 0x3e	; 62
    5eee:	28 97       	sbiw	r28, 0x08	; 8
    5ef0:	cd bf       	out	0x3d, r28	; 61
    5ef2:	de bf       	out	0x3e, r29	; 62
    5ef4:	8b 83       	std	Y+3, r24	; 0x03
    5ef6:	9c 83       	std	Y+4, r25	; 0x04
    5ef8:	4d 83       	std	Y+5, r20	; 0x05
    5efa:	5e 83       	std	Y+6, r21	; 0x06
    5efc:	6f 83       	std	Y+7, r22	; 0x07
    5efe:	78 87       	std	Y+8, r23	; 0x08
    5f00:	8d 81       	ldd	r24, Y+5	; 0x05
    5f02:	9e 81       	ldd	r25, Y+6	; 0x06
    5f04:	af 81       	ldd	r26, Y+7	; 0x07
    5f06:	b8 85       	ldd	r27, Y+8	; 0x08
    5f08:	b0 68       	ori	r27, 0x80	; 128
    5f0a:	2b 81       	ldd	r18, Y+3	; 0x03
    5f0c:	3c 81       	ldd	r19, Y+4	; 0x04
    5f0e:	f9 01       	movw	r30, r18
    5f10:	80 83       	st	Z, r24
    5f12:	91 83       	std	Z+1, r25	; 0x01
    5f14:	a2 83       	std	Z+2, r26	; 0x02
    5f16:	b3 83       	std	Z+3, r27	; 0x03
    5f18:	8b 81       	ldd	r24, Y+3	; 0x03
    5f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    5f1c:	fc 01       	movw	r30, r24
    5f1e:	80 85       	ldd	r24, Z+8	; 0x08
    5f20:	91 85       	ldd	r25, Z+9	; 0x09
    5f22:	89 83       	std	Y+1, r24	; 0x01
    5f24:	9a 83       	std	Y+2, r25	; 0x02
    5f26:	8b 81       	ldd	r24, Y+3	; 0x03
    5f28:	9c 81       	ldd	r25, Y+4	; 0x04
    5f2a:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
    5f2e:	89 81       	ldd	r24, Y+1	; 0x01
    5f30:	9a 81       	ldd	r25, Y+2	; 0x02
    5f32:	02 96       	adiw	r24, 0x02	; 2
    5f34:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
    5f38:	89 81       	ldd	r24, Y+1	; 0x01
    5f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    5f3c:	fc 01       	movw	r30, r24
    5f3e:	92 8d       	ldd	r25, Z+26	; 0x1a
    5f40:	80 91 09 2d 	lds	r24, 0x2D09	; 0x802d09 <uxTopReadyPriority>
    5f44:	89 17       	cp	r24, r25
    5f46:	30 f4       	brcc	.+12     	; 0x5f54 <vTaskRemoveFromUnorderedEventList+0x6e>
    5f48:	89 81       	ldd	r24, Y+1	; 0x01
    5f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    5f4c:	fc 01       	movw	r30, r24
    5f4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5f50:	80 93 09 2d 	sts	0x2D09, r24	; 0x802d09 <uxTopReadyPriority>
    5f54:	89 81       	ldd	r24, Y+1	; 0x01
    5f56:	9a 81       	ldd	r25, Y+2	; 0x02
    5f58:	ac 01       	movw	r20, r24
    5f5a:	4e 5f       	subi	r20, 0xFE	; 254
    5f5c:	5f 4f       	sbci	r21, 0xFF	; 255
    5f5e:	89 81       	ldd	r24, Y+1	; 0x01
    5f60:	9a 81       	ldd	r25, Y+2	; 0x02
    5f62:	fc 01       	movw	r30, r24
    5f64:	82 8d       	ldd	r24, Z+26	; 0x1a
    5f66:	28 2f       	mov	r18, r24
    5f68:	30 e0       	ldi	r19, 0x00	; 0
    5f6a:	6b e0       	ldi	r22, 0x0B	; 11
    5f6c:	62 9f       	mul	r22, r18
    5f6e:	c0 01       	movw	r24, r0
    5f70:	63 9f       	mul	r22, r19
    5f72:	90 0d       	add	r25, r0
    5f74:	11 24       	eor	r1, r1
    5f76:	88 55       	subi	r24, 0x58	; 88
    5f78:	93 4d       	sbci	r25, 0xD3	; 211
    5f7a:	ba 01       	movw	r22, r20
    5f7c:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vListInsertEnd>
    5f80:	89 81       	ldd	r24, Y+1	; 0x01
    5f82:	9a 81       	ldd	r25, Y+2	; 0x02
    5f84:	fc 01       	movw	r30, r24
    5f86:	22 8d       	ldd	r18, Z+26	; 0x1a
    5f88:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    5f8c:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    5f90:	fc 01       	movw	r30, r24
    5f92:	82 8d       	ldd	r24, Z+26	; 0x1a
    5f94:	82 17       	cp	r24, r18
    5f96:	18 f4       	brcc	.+6      	; 0x5f9e <vTaskRemoveFromUnorderedEventList+0xb8>
    5f98:	81 e0       	ldi	r24, 0x01	; 1
    5f9a:	80 93 0c 2d 	sts	0x2D0C, r24	; 0x802d0c <xYieldPending>
    5f9e:	00 00       	nop
    5fa0:	28 96       	adiw	r28, 0x08	; 8
    5fa2:	cd bf       	out	0x3d, r28	; 61
    5fa4:	de bf       	out	0x3e, r29	; 62
    5fa6:	df 91       	pop	r29
    5fa8:	cf 91       	pop	r28
    5faa:	08 95       	ret

00005fac <vTaskInternalSetTimeOutState>:
    5fac:	cf 93       	push	r28
    5fae:	df 93       	push	r29
    5fb0:	1f 92       	push	r1
    5fb2:	1f 92       	push	r1
    5fb4:	cd b7       	in	r28, 0x3d	; 61
    5fb6:	de b7       	in	r29, 0x3e	; 62
    5fb8:	89 83       	std	Y+1, r24	; 0x01
    5fba:	9a 83       	std	Y+2, r25	; 0x02
    5fbc:	20 91 0d 2d 	lds	r18, 0x2D0D	; 0x802d0d <xNumOfOverflows>
    5fc0:	89 81       	ldd	r24, Y+1	; 0x01
    5fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc4:	fc 01       	movw	r30, r24
    5fc6:	20 83       	st	Z, r18
    5fc8:	80 91 05 2d 	lds	r24, 0x2D05	; 0x802d05 <xTickCount>
    5fcc:	90 91 06 2d 	lds	r25, 0x2D06	; 0x802d06 <xTickCount+0x1>
    5fd0:	a0 91 07 2d 	lds	r26, 0x2D07	; 0x802d07 <xTickCount+0x2>
    5fd4:	b0 91 08 2d 	lds	r27, 0x2D08	; 0x802d08 <xTickCount+0x3>
    5fd8:	29 81       	ldd	r18, Y+1	; 0x01
    5fda:	3a 81       	ldd	r19, Y+2	; 0x02
    5fdc:	f9 01       	movw	r30, r18
    5fde:	81 83       	std	Z+1, r24	; 0x01
    5fe0:	92 83       	std	Z+2, r25	; 0x02
    5fe2:	a3 83       	std	Z+3, r26	; 0x03
    5fe4:	b4 83       	std	Z+4, r27	; 0x04
    5fe6:	00 00       	nop
    5fe8:	0f 90       	pop	r0
    5fea:	0f 90       	pop	r0
    5fec:	df 91       	pop	r29
    5fee:	cf 91       	pop	r28
    5ff0:	08 95       	ret

00005ff2 <xTaskCheckForTimeOut>:
    5ff2:	ef 92       	push	r14
    5ff4:	ff 92       	push	r15
    5ff6:	0f 93       	push	r16
    5ff8:	1f 93       	push	r17
    5ffa:	cf 93       	push	r28
    5ffc:	df 93       	push	r29
    5ffe:	cd b7       	in	r28, 0x3d	; 61
    6000:	de b7       	in	r29, 0x3e	; 62
    6002:	2d 97       	sbiw	r28, 0x0d	; 13
    6004:	cd bf       	out	0x3d, r28	; 61
    6006:	de bf       	out	0x3e, r29	; 62
    6008:	8a 87       	std	Y+10, r24	; 0x0a
    600a:	9b 87       	std	Y+11, r25	; 0x0b
    600c:	6c 87       	std	Y+12, r22	; 0x0c
    600e:	7d 87       	std	Y+13, r23	; 0x0d
    6010:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    6014:	ff 93       	push	r31
    6016:	f8 7f       	andi	r31, 0xF8	; 248
    6018:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    601c:	80 91 05 2d 	lds	r24, 0x2D05	; 0x802d05 <xTickCount>
    6020:	90 91 06 2d 	lds	r25, 0x2D06	; 0x802d06 <xTickCount+0x1>
    6024:	a0 91 07 2d 	lds	r26, 0x2D07	; 0x802d07 <xTickCount+0x2>
    6028:	b0 91 08 2d 	lds	r27, 0x2D08	; 0x802d08 <xTickCount+0x3>
    602c:	8a 83       	std	Y+2, r24	; 0x02
    602e:	9b 83       	std	Y+3, r25	; 0x03
    6030:	ac 83       	std	Y+4, r26	; 0x04
    6032:	bd 83       	std	Y+5, r27	; 0x05
    6034:	8a 85       	ldd	r24, Y+10	; 0x0a
    6036:	9b 85       	ldd	r25, Y+11	; 0x0b
    6038:	fc 01       	movw	r30, r24
    603a:	81 81       	ldd	r24, Z+1	; 0x01
    603c:	92 81       	ldd	r25, Z+2	; 0x02
    603e:	a3 81       	ldd	r26, Z+3	; 0x03
    6040:	b4 81       	ldd	r27, Z+4	; 0x04
    6042:	2a 81       	ldd	r18, Y+2	; 0x02
    6044:	3b 81       	ldd	r19, Y+3	; 0x03
    6046:	4c 81       	ldd	r20, Y+4	; 0x04
    6048:	5d 81       	ldd	r21, Y+5	; 0x05
    604a:	79 01       	movw	r14, r18
    604c:	8a 01       	movw	r16, r20
    604e:	e8 1a       	sub	r14, r24
    6050:	f9 0a       	sbc	r15, r25
    6052:	0a 0b       	sbc	r16, r26
    6054:	1b 0b       	sbc	r17, r27
    6056:	d8 01       	movw	r26, r16
    6058:	c7 01       	movw	r24, r14
    605a:	8e 83       	std	Y+6, r24	; 0x06
    605c:	9f 83       	std	Y+7, r25	; 0x07
    605e:	a8 87       	std	Y+8, r26	; 0x08
    6060:	b9 87       	std	Y+9, r27	; 0x09
    6062:	8c 85       	ldd	r24, Y+12	; 0x0c
    6064:	9d 85       	ldd	r25, Y+13	; 0x0d
    6066:	fc 01       	movw	r30, r24
    6068:	80 81       	ld	r24, Z
    606a:	91 81       	ldd	r25, Z+1	; 0x01
    606c:	a2 81       	ldd	r26, Z+2	; 0x02
    606e:	b3 81       	ldd	r27, Z+3	; 0x03
    6070:	8f 3f       	cpi	r24, 0xFF	; 255
    6072:	9f 4f       	sbci	r25, 0xFF	; 255
    6074:	af 4f       	sbci	r26, 0xFF	; 255
    6076:	bf 4f       	sbci	r27, 0xFF	; 255
    6078:	11 f4       	brne	.+4      	; 0x607e <xTaskCheckForTimeOut+0x8c>
    607a:	19 82       	std	Y+1, r1	; 0x01
    607c:	54 c0       	rjmp	.+168    	; 0x6126 <xTaskCheckForTimeOut+0x134>
    607e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6080:	9b 85       	ldd	r25, Y+11	; 0x0b
    6082:	fc 01       	movw	r30, r24
    6084:	90 81       	ld	r25, Z
    6086:	80 91 0d 2d 	lds	r24, 0x2D0D	; 0x802d0d <xNumOfOverflows>
    608a:	98 17       	cp	r25, r24
    608c:	99 f0       	breq	.+38     	; 0x60b4 <xTaskCheckForTimeOut+0xc2>
    608e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6090:	9b 85       	ldd	r25, Y+11	; 0x0b
    6092:	fc 01       	movw	r30, r24
    6094:	21 81       	ldd	r18, Z+1	; 0x01
    6096:	32 81       	ldd	r19, Z+2	; 0x02
    6098:	43 81       	ldd	r20, Z+3	; 0x03
    609a:	54 81       	ldd	r21, Z+4	; 0x04
    609c:	8a 81       	ldd	r24, Y+2	; 0x02
    609e:	9b 81       	ldd	r25, Y+3	; 0x03
    60a0:	ac 81       	ldd	r26, Y+4	; 0x04
    60a2:	bd 81       	ldd	r27, Y+5	; 0x05
    60a4:	82 17       	cp	r24, r18
    60a6:	93 07       	cpc	r25, r19
    60a8:	a4 07       	cpc	r26, r20
    60aa:	b5 07       	cpc	r27, r21
    60ac:	18 f0       	brcs	.+6      	; 0x60b4 <xTaskCheckForTimeOut+0xc2>
    60ae:	81 e0       	ldi	r24, 0x01	; 1
    60b0:	89 83       	std	Y+1, r24	; 0x01
    60b2:	39 c0       	rjmp	.+114    	; 0x6126 <xTaskCheckForTimeOut+0x134>
    60b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    60b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    60b8:	fc 01       	movw	r30, r24
    60ba:	20 81       	ld	r18, Z
    60bc:	31 81       	ldd	r19, Z+1	; 0x01
    60be:	42 81       	ldd	r20, Z+2	; 0x02
    60c0:	53 81       	ldd	r21, Z+3	; 0x03
    60c2:	8e 81       	ldd	r24, Y+6	; 0x06
    60c4:	9f 81       	ldd	r25, Y+7	; 0x07
    60c6:	a8 85       	ldd	r26, Y+8	; 0x08
    60c8:	b9 85       	ldd	r27, Y+9	; 0x09
    60ca:	82 17       	cp	r24, r18
    60cc:	93 07       	cpc	r25, r19
    60ce:	a4 07       	cpc	r26, r20
    60d0:	b5 07       	cpc	r27, r21
    60d2:	00 f5       	brcc	.+64     	; 0x6114 <xTaskCheckForTimeOut+0x122>
    60d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    60d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    60d8:	fc 01       	movw	r30, r24
    60da:	20 81       	ld	r18, Z
    60dc:	31 81       	ldd	r19, Z+1	; 0x01
    60de:	42 81       	ldd	r20, Z+2	; 0x02
    60e0:	53 81       	ldd	r21, Z+3	; 0x03
    60e2:	8e 81       	ldd	r24, Y+6	; 0x06
    60e4:	9f 81       	ldd	r25, Y+7	; 0x07
    60e6:	a8 85       	ldd	r26, Y+8	; 0x08
    60e8:	b9 85       	ldd	r27, Y+9	; 0x09
    60ea:	79 01       	movw	r14, r18
    60ec:	8a 01       	movw	r16, r20
    60ee:	e8 1a       	sub	r14, r24
    60f0:	f9 0a       	sbc	r15, r25
    60f2:	0a 0b       	sbc	r16, r26
    60f4:	1b 0b       	sbc	r17, r27
    60f6:	d8 01       	movw	r26, r16
    60f8:	c7 01       	movw	r24, r14
    60fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    60fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    60fe:	f9 01       	movw	r30, r18
    6100:	80 83       	st	Z, r24
    6102:	91 83       	std	Z+1, r25	; 0x01
    6104:	a2 83       	std	Z+2, r26	; 0x02
    6106:	b3 83       	std	Z+3, r27	; 0x03
    6108:	8a 85       	ldd	r24, Y+10	; 0x0a
    610a:	9b 85       	ldd	r25, Y+11	; 0x0b
    610c:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <vTaskInternalSetTimeOutState>
    6110:	19 82       	std	Y+1, r1	; 0x01
    6112:	09 c0       	rjmp	.+18     	; 0x6126 <xTaskCheckForTimeOut+0x134>
    6114:	8c 85       	ldd	r24, Y+12	; 0x0c
    6116:	9d 85       	ldd	r25, Y+13	; 0x0d
    6118:	fc 01       	movw	r30, r24
    611a:	10 82       	st	Z, r1
    611c:	11 82       	std	Z+1, r1	; 0x01
    611e:	12 82       	std	Z+2, r1	; 0x02
    6120:	13 82       	std	Z+3, r1	; 0x03
    6122:	81 e0       	ldi	r24, 0x01	; 1
    6124:	89 83       	std	Y+1, r24	; 0x01
    6126:	ff 91       	pop	r31
    6128:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    612c:	89 81       	ldd	r24, Y+1	; 0x01
    612e:	2d 96       	adiw	r28, 0x0d	; 13
    6130:	cd bf       	out	0x3d, r28	; 61
    6132:	de bf       	out	0x3e, r29	; 62
    6134:	df 91       	pop	r29
    6136:	cf 91       	pop	r28
    6138:	1f 91       	pop	r17
    613a:	0f 91       	pop	r16
    613c:	ff 90       	pop	r15
    613e:	ef 90       	pop	r14
    6140:	08 95       	ret

00006142 <vTaskMissedYield>:
    6142:	cf 93       	push	r28
    6144:	df 93       	push	r29
    6146:	cd b7       	in	r28, 0x3d	; 61
    6148:	de b7       	in	r29, 0x3e	; 62
    614a:	81 e0       	ldi	r24, 0x01	; 1
    614c:	80 93 0c 2d 	sts	0x2D0C, r24	; 0x802d0c <xYieldPending>
    6150:	00 00       	nop
    6152:	df 91       	pop	r29
    6154:	cf 91       	pop	r28
    6156:	08 95       	ret

00006158 <prvIdleTask>:
    6158:	cf 93       	push	r28
    615a:	df 93       	push	r29
    615c:	1f 92       	push	r1
    615e:	1f 92       	push	r1
    6160:	cd b7       	in	r28, 0x3d	; 61
    6162:	de b7       	in	r29, 0x3e	; 62
    6164:	89 83       	std	Y+1, r24	; 0x01
    6166:	9a 83       	std	Y+2, r25	; 0x02
    6168:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <prvCheckTasksWaitingTermination>
    616c:	80 91 a8 2c 	lds	r24, 0x2CA8	; 0x802ca8 <pxReadyTasksLists>
    6170:	82 30       	cpi	r24, 0x02	; 2
    6172:	10 f0       	brcs	.+4      	; 0x6178 <prvIdleTask+0x20>
    6174:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    6178:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <vApplicationIdleHook>
    617c:	f5 cf       	rjmp	.-22     	; 0x6168 <prvIdleTask+0x10>

0000617e <prvInitialiseTaskLists>:
    617e:	cf 93       	push	r28
    6180:	df 93       	push	r29
    6182:	1f 92       	push	r1
    6184:	cd b7       	in	r28, 0x3d	; 61
    6186:	de b7       	in	r29, 0x3e	; 62
    6188:	19 82       	std	Y+1, r1	; 0x01
    618a:	10 c0       	rjmp	.+32     	; 0x61ac <prvInitialiseTaskLists+0x2e>
    618c:	89 81       	ldd	r24, Y+1	; 0x01
    618e:	28 2f       	mov	r18, r24
    6190:	30 e0       	ldi	r19, 0x00	; 0
    6192:	4b e0       	ldi	r20, 0x0B	; 11
    6194:	42 9f       	mul	r20, r18
    6196:	c0 01       	movw	r24, r0
    6198:	43 9f       	mul	r20, r19
    619a:	90 0d       	add	r25, r0
    619c:	11 24       	eor	r1, r1
    619e:	88 55       	subi	r24, 0x58	; 88
    61a0:	93 4d       	sbci	r25, 0xD3	; 211
    61a2:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <vListInitialise>
    61a6:	89 81       	ldd	r24, Y+1	; 0x01
    61a8:	8f 5f       	subi	r24, 0xFF	; 255
    61aa:	89 83       	std	Y+1, r24	; 0x01
    61ac:	89 81       	ldd	r24, Y+1	; 0x01
    61ae:	84 30       	cpi	r24, 0x04	; 4
    61b0:	68 f3       	brcs	.-38     	; 0x618c <prvInitialiseTaskLists+0xe>
    61b2:	84 ed       	ldi	r24, 0xD4	; 212
    61b4:	9c e2       	ldi	r25, 0x2C	; 44
    61b6:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <vListInitialise>
    61ba:	8f ed       	ldi	r24, 0xDF	; 223
    61bc:	9c e2       	ldi	r25, 0x2C	; 44
    61be:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <vListInitialise>
    61c2:	8e ee       	ldi	r24, 0xEE	; 238
    61c4:	9c e2       	ldi	r25, 0x2C	; 44
    61c6:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <vListInitialise>
    61ca:	89 ef       	ldi	r24, 0xF9	; 249
    61cc:	9c e2       	ldi	r25, 0x2C	; 44
    61ce:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <vListInitialise>
    61d2:	84 ed       	ldi	r24, 0xD4	; 212
    61d4:	9c e2       	ldi	r25, 0x2C	; 44
    61d6:	80 93 ea 2c 	sts	0x2CEA, r24	; 0x802cea <pxDelayedTaskList>
    61da:	90 93 eb 2c 	sts	0x2CEB, r25	; 0x802ceb <pxDelayedTaskList+0x1>
    61de:	8f ed       	ldi	r24, 0xDF	; 223
    61e0:	9c e2       	ldi	r25, 0x2C	; 44
    61e2:	80 93 ec 2c 	sts	0x2CEC, r24	; 0x802cec <pxOverflowDelayedTaskList>
    61e6:	90 93 ed 2c 	sts	0x2CED, r25	; 0x802ced <pxOverflowDelayedTaskList+0x1>
    61ea:	00 00       	nop
    61ec:	0f 90       	pop	r0
    61ee:	df 91       	pop	r29
    61f0:	cf 91       	pop	r28
    61f2:	08 95       	ret

000061f4 <prvCheckTasksWaitingTermination>:
    61f4:	cf 93       	push	r28
    61f6:	df 93       	push	r29
    61f8:	cd b7       	in	r28, 0x3d	; 61
    61fa:	de b7       	in	r29, 0x3e	; 62
    61fc:	00 00       	nop
    61fe:	df 91       	pop	r29
    6200:	cf 91       	pop	r28
    6202:	08 95       	ret

00006204 <prvResetNextTaskUnblockTime>:
    6204:	cf 93       	push	r28
    6206:	df 93       	push	r29
    6208:	1f 92       	push	r1
    620a:	1f 92       	push	r1
    620c:	cd b7       	in	r28, 0x3d	; 61
    620e:	de b7       	in	r29, 0x3e	; 62
    6210:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <pxDelayedTaskList>
    6214:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <pxDelayedTaskList+0x1>
    6218:	fc 01       	movw	r30, r24
    621a:	80 81       	ld	r24, Z
    621c:	88 23       	and	r24, r24
    621e:	61 f4       	brne	.+24     	; 0x6238 <prvResetNextTaskUnblockTime+0x34>
    6220:	8f ef       	ldi	r24, 0xFF	; 255
    6222:	9f ef       	ldi	r25, 0xFF	; 255
    6224:	dc 01       	movw	r26, r24
    6226:	80 93 0f 2d 	sts	0x2D0F, r24	; 0x802d0f <xNextTaskUnblockTime>
    622a:	90 93 10 2d 	sts	0x2D10, r25	; 0x802d10 <xNextTaskUnblockTime+0x1>
    622e:	a0 93 11 2d 	sts	0x2D11, r26	; 0x802d11 <xNextTaskUnblockTime+0x2>
    6232:	b0 93 12 2d 	sts	0x2D12, r27	; 0x802d12 <xNextTaskUnblockTime+0x3>
    6236:	1b c0       	rjmp	.+54     	; 0x626e <prvResetNextTaskUnblockTime+0x6a>
    6238:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <pxDelayedTaskList>
    623c:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <pxDelayedTaskList+0x1>
    6240:	fc 01       	movw	r30, r24
    6242:	87 81       	ldd	r24, Z+7	; 0x07
    6244:	90 85       	ldd	r25, Z+8	; 0x08
    6246:	fc 01       	movw	r30, r24
    6248:	80 85       	ldd	r24, Z+8	; 0x08
    624a:	91 85       	ldd	r25, Z+9	; 0x09
    624c:	89 83       	std	Y+1, r24	; 0x01
    624e:	9a 83       	std	Y+2, r25	; 0x02
    6250:	89 81       	ldd	r24, Y+1	; 0x01
    6252:	9a 81       	ldd	r25, Y+2	; 0x02
    6254:	fc 01       	movw	r30, r24
    6256:	82 81       	ldd	r24, Z+2	; 0x02
    6258:	93 81       	ldd	r25, Z+3	; 0x03
    625a:	a4 81       	ldd	r26, Z+4	; 0x04
    625c:	b5 81       	ldd	r27, Z+5	; 0x05
    625e:	80 93 0f 2d 	sts	0x2D0F, r24	; 0x802d0f <xNextTaskUnblockTime>
    6262:	90 93 10 2d 	sts	0x2D10, r25	; 0x802d10 <xNextTaskUnblockTime+0x1>
    6266:	a0 93 11 2d 	sts	0x2D11, r26	; 0x802d11 <xNextTaskUnblockTime+0x2>
    626a:	b0 93 12 2d 	sts	0x2D12, r27	; 0x802d12 <xNextTaskUnblockTime+0x3>
    626e:	00 00       	nop
    6270:	0f 90       	pop	r0
    6272:	0f 90       	pop	r0
    6274:	df 91       	pop	r29
    6276:	cf 91       	pop	r28
    6278:	08 95       	ret

0000627a <xTaskGetSchedulerState>:
    627a:	cf 93       	push	r28
    627c:	df 93       	push	r29
    627e:	1f 92       	push	r1
    6280:	cd b7       	in	r28, 0x3d	; 61
    6282:	de b7       	in	r29, 0x3e	; 62
    6284:	80 91 0a 2d 	lds	r24, 0x2D0A	; 0x802d0a <xSchedulerRunning>
    6288:	88 23       	and	r24, r24
    628a:	19 f4       	brne	.+6      	; 0x6292 <xTaskGetSchedulerState+0x18>
    628c:	81 e0       	ldi	r24, 0x01	; 1
    628e:	89 83       	std	Y+1, r24	; 0x01
    6290:	08 c0       	rjmp	.+16     	; 0x62a2 <xTaskGetSchedulerState+0x28>
    6292:	80 91 15 2d 	lds	r24, 0x2D15	; 0x802d15 <uxSchedulerSuspended>
    6296:	88 23       	and	r24, r24
    6298:	19 f4       	brne	.+6      	; 0x62a0 <xTaskGetSchedulerState+0x26>
    629a:	82 e0       	ldi	r24, 0x02	; 2
    629c:	89 83       	std	Y+1, r24	; 0x01
    629e:	01 c0       	rjmp	.+2      	; 0x62a2 <xTaskGetSchedulerState+0x28>
    62a0:	19 82       	std	Y+1, r1	; 0x01
    62a2:	89 81       	ldd	r24, Y+1	; 0x01
    62a4:	0f 90       	pop	r0
    62a6:	df 91       	pop	r29
    62a8:	cf 91       	pop	r28
    62aa:	08 95       	ret

000062ac <uxTaskResetEventItemValue>:
    62ac:	ef 92       	push	r14
    62ae:	ff 92       	push	r15
    62b0:	0f 93       	push	r16
    62b2:	1f 93       	push	r17
    62b4:	cf 93       	push	r28
    62b6:	df 93       	push	r29
    62b8:	00 d0       	rcall	.+0      	; 0x62ba <uxTaskResetEventItemValue+0xe>
    62ba:	1f 92       	push	r1
    62bc:	cd b7       	in	r28, 0x3d	; 61
    62be:	de b7       	in	r29, 0x3e	; 62
    62c0:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    62c4:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    62c8:	fc 01       	movw	r30, r24
    62ca:	86 85       	ldd	r24, Z+14	; 0x0e
    62cc:	97 85       	ldd	r25, Z+15	; 0x0f
    62ce:	a0 89       	ldd	r26, Z+16	; 0x10
    62d0:	b1 89       	ldd	r27, Z+17	; 0x11
    62d2:	89 83       	std	Y+1, r24	; 0x01
    62d4:	9a 83       	std	Y+2, r25	; 0x02
    62d6:	ab 83       	std	Y+3, r26	; 0x03
    62d8:	bc 83       	std	Y+4, r27	; 0x04
    62da:	60 91 a6 2c 	lds	r22, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    62de:	70 91 a7 2c 	lds	r23, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    62e2:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    62e6:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    62ea:	fc 01       	movw	r30, r24
    62ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    62ee:	88 2f       	mov	r24, r24
    62f0:	90 e0       	ldi	r25, 0x00	; 0
    62f2:	a0 e0       	ldi	r26, 0x00	; 0
    62f4:	b0 e0       	ldi	r27, 0x00	; 0
    62f6:	24 e0       	ldi	r18, 0x04	; 4
    62f8:	30 e0       	ldi	r19, 0x00	; 0
    62fa:	40 e0       	ldi	r20, 0x00	; 0
    62fc:	50 e0       	ldi	r21, 0x00	; 0
    62fe:	79 01       	movw	r14, r18
    6300:	8a 01       	movw	r16, r20
    6302:	e8 1a       	sub	r14, r24
    6304:	f9 0a       	sbc	r15, r25
    6306:	0a 0b       	sbc	r16, r26
    6308:	1b 0b       	sbc	r17, r27
    630a:	d8 01       	movw	r26, r16
    630c:	c7 01       	movw	r24, r14
    630e:	fb 01       	movw	r30, r22
    6310:	86 87       	std	Z+14, r24	; 0x0e
    6312:	97 87       	std	Z+15, r25	; 0x0f
    6314:	a0 8b       	std	Z+16, r26	; 0x10
    6316:	b1 8b       	std	Z+17, r27	; 0x11
    6318:	89 81       	ldd	r24, Y+1	; 0x01
    631a:	9a 81       	ldd	r25, Y+2	; 0x02
    631c:	ab 81       	ldd	r26, Y+3	; 0x03
    631e:	bc 81       	ldd	r27, Y+4	; 0x04
    6320:	bc 01       	movw	r22, r24
    6322:	cd 01       	movw	r24, r26
    6324:	24 96       	adiw	r28, 0x04	; 4
    6326:	cd bf       	out	0x3d, r28	; 61
    6328:	de bf       	out	0x3e, r29	; 62
    632a:	df 91       	pop	r29
    632c:	cf 91       	pop	r28
    632e:	1f 91       	pop	r17
    6330:	0f 91       	pop	r16
    6332:	ff 90       	pop	r15
    6334:	ef 90       	pop	r14
    6336:	08 95       	ret

00006338 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    6338:	cf 93       	push	r28
    633a:	df 93       	push	r29
    633c:	cd b7       	in	r28, 0x3d	; 61
    633e:	de b7       	in	r29, 0x3e	; 62
    6340:	2d 97       	sbiw	r28, 0x0d	; 13
    6342:	cd bf       	out	0x3d, r28	; 61
    6344:	de bf       	out	0x3e, r29	; 62
    6346:	69 87       	std	Y+9, r22	; 0x09
    6348:	7a 87       	std	Y+10, r23	; 0x0a
    634a:	8b 87       	std	Y+11, r24	; 0x0b
    634c:	9c 87       	std	Y+12, r25	; 0x0c
    634e:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    6350:	80 91 05 2d 	lds	r24, 0x2D05	; 0x802d05 <xTickCount>
    6354:	90 91 06 2d 	lds	r25, 0x2D06	; 0x802d06 <xTickCount+0x1>
    6358:	a0 91 07 2d 	lds	r26, 0x2D07	; 0x802d07 <xTickCount+0x2>
    635c:	b0 91 08 2d 	lds	r27, 0x2D08	; 0x802d08 <xTickCount+0x3>
    6360:	89 83       	std	Y+1, r24	; 0x01
    6362:	9a 83       	std	Y+2, r25	; 0x02
    6364:	ab 83       	std	Y+3, r26	; 0x03
    6366:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6368:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    636c:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    6370:	02 96       	adiw	r24, 0x02	; 2
    6372:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    6376:	89 85       	ldd	r24, Y+9	; 0x09
    6378:	9a 85       	ldd	r25, Y+10	; 0x0a
    637a:	ab 85       	ldd	r26, Y+11	; 0x0b
    637c:	bc 85       	ldd	r27, Y+12	; 0x0c
    637e:	8f 3f       	cpi	r24, 0xFF	; 255
    6380:	9f 4f       	sbci	r25, 0xFF	; 255
    6382:	af 4f       	sbci	r26, 0xFF	; 255
    6384:	bf 4f       	sbci	r27, 0xFF	; 255
    6386:	71 f4       	brne	.+28     	; 0x63a4 <prvAddCurrentTaskToDelayedList+0x6c>
    6388:	8d 85       	ldd	r24, Y+13	; 0x0d
    638a:	88 23       	and	r24, r24
    638c:	59 f0       	breq	.+22     	; 0x63a4 <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    638e:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    6392:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    6396:	02 96       	adiw	r24, 0x02	; 2
    6398:	bc 01       	movw	r22, r24
    639a:	89 ef       	ldi	r24, 0xF9	; 249
    639c:	9c e2       	ldi	r25, 0x2C	; 44
    639e:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    63a2:	64 c0       	rjmp	.+200    	; 0x646c <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    63a4:	29 81       	ldd	r18, Y+1	; 0x01
    63a6:	3a 81       	ldd	r19, Y+2	; 0x02
    63a8:	4b 81       	ldd	r20, Y+3	; 0x03
    63aa:	5c 81       	ldd	r21, Y+4	; 0x04
    63ac:	89 85       	ldd	r24, Y+9	; 0x09
    63ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    63b0:	ab 85       	ldd	r26, Y+11	; 0x0b
    63b2:	bc 85       	ldd	r27, Y+12	; 0x0c
    63b4:	82 0f       	add	r24, r18
    63b6:	93 1f       	adc	r25, r19
    63b8:	a4 1f       	adc	r26, r20
    63ba:	b5 1f       	adc	r27, r21
    63bc:	8d 83       	std	Y+5, r24	; 0x05
    63be:	9e 83       	std	Y+6, r25	; 0x06
    63c0:	af 83       	std	Y+7, r26	; 0x07
    63c2:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    63c4:	20 91 a6 2c 	lds	r18, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    63c8:	30 91 a7 2c 	lds	r19, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    63cc:	8d 81       	ldd	r24, Y+5	; 0x05
    63ce:	9e 81       	ldd	r25, Y+6	; 0x06
    63d0:	af 81       	ldd	r26, Y+7	; 0x07
    63d2:	b8 85       	ldd	r27, Y+8	; 0x08
    63d4:	f9 01       	movw	r30, r18
    63d6:	82 83       	std	Z+2, r24	; 0x02
    63d8:	93 83       	std	Z+3, r25	; 0x03
    63da:	a4 83       	std	Z+4, r26	; 0x04
    63dc:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    63de:	2d 81       	ldd	r18, Y+5	; 0x05
    63e0:	3e 81       	ldd	r19, Y+6	; 0x06
    63e2:	4f 81       	ldd	r20, Y+7	; 0x07
    63e4:	58 85       	ldd	r21, Y+8	; 0x08
    63e6:	89 81       	ldd	r24, Y+1	; 0x01
    63e8:	9a 81       	ldd	r25, Y+2	; 0x02
    63ea:	ab 81       	ldd	r26, Y+3	; 0x03
    63ec:	bc 81       	ldd	r27, Y+4	; 0x04
    63ee:	28 17       	cp	r18, r24
    63f0:	39 07       	cpc	r19, r25
    63f2:	4a 07       	cpc	r20, r26
    63f4:	5b 07       	cpc	r21, r27
    63f6:	78 f4       	brcc	.+30     	; 0x6416 <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    63f8:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    63fc:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    6400:	9c 01       	movw	r18, r24
    6402:	2e 5f       	subi	r18, 0xFE	; 254
    6404:	3f 4f       	sbci	r19, 0xFF	; 255
    6406:	80 91 ec 2c 	lds	r24, 0x2CEC	; 0x802cec <pxOverflowDelayedTaskList>
    640a:	90 91 ed 2c 	lds	r25, 0x2CED	; 0x802ced <pxOverflowDelayedTaskList+0x1>
    640e:	b9 01       	movw	r22, r18
    6410:	0e 94 12 20 	call	0x4024	; 0x4024 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    6414:	2b c0       	rjmp	.+86     	; 0x646c <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    6416:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxCurrentTCB>
    641a:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxCurrentTCB+0x1>
    641e:	9c 01       	movw	r18, r24
    6420:	2e 5f       	subi	r18, 0xFE	; 254
    6422:	3f 4f       	sbci	r19, 0xFF	; 255
    6424:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <pxDelayedTaskList>
    6428:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <pxDelayedTaskList+0x1>
    642c:	b9 01       	movw	r22, r18
    642e:	0e 94 12 20 	call	0x4024	; 0x4024 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    6432:	80 91 0f 2d 	lds	r24, 0x2D0F	; 0x802d0f <xNextTaskUnblockTime>
    6436:	90 91 10 2d 	lds	r25, 0x2D10	; 0x802d10 <xNextTaskUnblockTime+0x1>
    643a:	a0 91 11 2d 	lds	r26, 0x2D11	; 0x802d11 <xNextTaskUnblockTime+0x2>
    643e:	b0 91 12 2d 	lds	r27, 0x2D12	; 0x802d12 <xNextTaskUnblockTime+0x3>
    6442:	2d 81       	ldd	r18, Y+5	; 0x05
    6444:	3e 81       	ldd	r19, Y+6	; 0x06
    6446:	4f 81       	ldd	r20, Y+7	; 0x07
    6448:	58 85       	ldd	r21, Y+8	; 0x08
    644a:	28 17       	cp	r18, r24
    644c:	39 07       	cpc	r19, r25
    644e:	4a 07       	cpc	r20, r26
    6450:	5b 07       	cpc	r21, r27
    6452:	60 f4       	brcc	.+24     	; 0x646c <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    6454:	8d 81       	ldd	r24, Y+5	; 0x05
    6456:	9e 81       	ldd	r25, Y+6	; 0x06
    6458:	af 81       	ldd	r26, Y+7	; 0x07
    645a:	b8 85       	ldd	r27, Y+8	; 0x08
    645c:	80 93 0f 2d 	sts	0x2D0F, r24	; 0x802d0f <xNextTaskUnblockTime>
    6460:	90 93 10 2d 	sts	0x2D10, r25	; 0x802d10 <xNextTaskUnblockTime+0x1>
    6464:	a0 93 11 2d 	sts	0x2D11, r26	; 0x802d11 <xNextTaskUnblockTime+0x2>
    6468:	b0 93 12 2d 	sts	0x2D12, r27	; 0x802d12 <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    646c:	00 00       	nop
    646e:	2d 96       	adiw	r28, 0x0d	; 13
    6470:	cd bf       	out	0x3d, r28	; 61
    6472:	de bf       	out	0x3e, r29	; 62
    6474:	df 91       	pop	r29
    6476:	cf 91       	pop	r28
    6478:	08 95       	ret

0000647a <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    647a:	ef 92       	push	r14
    647c:	ff 92       	push	r15
    647e:	0f 93       	push	r16
    6480:	cf 93       	push	r28
    6482:	df 93       	push	r29
    6484:	1f 92       	push	r1
    6486:	cd b7       	in	r28, 0x3d	; 61
    6488:	de b7       	in	r29, 0x3e	; 62
    648a:	19 82       	std	Y+1, r1	; 0x01
    648c:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <prvCheckForValidListAndQueue>
    6490:	80 91 30 2d 	lds	r24, 0x2D30	; 0x802d30 <xTimerQueue>
    6494:	90 91 31 2d 	lds	r25, 0x2D31	; 0x802d31 <xTimerQueue+0x1>
    6498:	89 2b       	or	r24, r25
    649a:	91 f0       	breq	.+36     	; 0x64c0 <xTimerCreateTimerTask+0x46>
    649c:	0f 2e       	mov	r0, r31
    649e:	f2 e3       	ldi	r31, 0x32	; 50
    64a0:	ef 2e       	mov	r14, r31
    64a2:	fd e2       	ldi	r31, 0x2D	; 45
    64a4:	ff 2e       	mov	r15, r31
    64a6:	f0 2d       	mov	r31, r0
    64a8:	03 e0       	ldi	r16, 0x03	; 3
    64aa:	20 e0       	ldi	r18, 0x00	; 0
    64ac:	30 e0       	ldi	r19, 0x00	; 0
    64ae:	48 ec       	ldi	r20, 0xC8	; 200
    64b0:	50 e0       	ldi	r21, 0x00	; 0
    64b2:	65 e0       	ldi	r22, 0x05	; 5
    64b4:	70 e2       	ldi	r23, 0x20	; 32
    64b6:	83 e5       	ldi	r24, 0x53	; 83
    64b8:	93 e3       	ldi	r25, 0x33	; 51
    64ba:	0e 94 78 29 	call	0x52f0	; 0x52f0 <xTaskCreate>
    64be:	89 83       	std	Y+1, r24	; 0x01
    64c0:	89 81       	ldd	r24, Y+1	; 0x01
    64c2:	0f 90       	pop	r0
    64c4:	df 91       	pop	r29
    64c6:	cf 91       	pop	r28
    64c8:	0f 91       	pop	r16
    64ca:	ff 90       	pop	r15
    64cc:	ef 90       	pop	r14
    64ce:	08 95       	ret

000064d0 <xTimerGenericCommand>:
    64d0:	cf 92       	push	r12
    64d2:	df 92       	push	r13
    64d4:	ef 92       	push	r14
    64d6:	ff 92       	push	r15
    64d8:	0f 93       	push	r16
    64da:	1f 93       	push	r17
    64dc:	cf 93       	push	r28
    64de:	df 93       	push	r29
    64e0:	cd b7       	in	r28, 0x3d	; 61
    64e2:	de b7       	in	r29, 0x3e	; 62
    64e4:	67 97       	sbiw	r28, 0x17	; 23
    64e6:	cd bf       	out	0x3d, r28	; 61
    64e8:	de bf       	out	0x3e, r29	; 62
    64ea:	8b 87       	std	Y+11, r24	; 0x0b
    64ec:	9c 87       	std	Y+12, r25	; 0x0c
    64ee:	6d 87       	std	Y+13, r22	; 0x0d
    64f0:	2e 87       	std	Y+14, r18	; 0x0e
    64f2:	3f 87       	std	Y+15, r19	; 0x0f
    64f4:	48 8b       	std	Y+16, r20	; 0x10
    64f6:	59 8b       	std	Y+17, r21	; 0x11
    64f8:	0a 8b       	std	Y+18, r16	; 0x12
    64fa:	1b 8b       	std	Y+19, r17	; 0x13
    64fc:	cc 8a       	std	Y+20, r12	; 0x14
    64fe:	dd 8a       	std	Y+21, r13	; 0x15
    6500:	ee 8a       	std	Y+22, r14	; 0x16
    6502:	ff 8a       	std	Y+23, r15	; 0x17
    6504:	19 82       	std	Y+1, r1	; 0x01
    6506:	80 91 30 2d 	lds	r24, 0x2D30	; 0x802d30 <xTimerQueue>
    650a:	90 91 31 2d 	lds	r25, 0x2D31	; 0x802d31 <xTimerQueue+0x1>
    650e:	89 2b       	or	r24, r25
    6510:	09 f4       	brne	.+2      	; 0x6514 <xTimerGenericCommand+0x44>
    6512:	44 c0       	rjmp	.+136    	; 0x659c <xTimerGenericCommand+0xcc>
    6514:	8d 85       	ldd	r24, Y+13	; 0x0d
    6516:	8a 83       	std	Y+2, r24	; 0x02
    6518:	8e 85       	ldd	r24, Y+14	; 0x0e
    651a:	9f 85       	ldd	r25, Y+15	; 0x0f
    651c:	a8 89       	ldd	r26, Y+16	; 0x10
    651e:	b9 89       	ldd	r27, Y+17	; 0x11
    6520:	8b 83       	std	Y+3, r24	; 0x03
    6522:	9c 83       	std	Y+4, r25	; 0x04
    6524:	ad 83       	std	Y+5, r26	; 0x05
    6526:	be 83       	std	Y+6, r27	; 0x06
    6528:	8b 85       	ldd	r24, Y+11	; 0x0b
    652a:	9c 85       	ldd	r25, Y+12	; 0x0c
    652c:	8f 83       	std	Y+7, r24	; 0x07
    652e:	98 87       	std	Y+8, r25	; 0x08
    6530:	8d 85       	ldd	r24, Y+13	; 0x0d
    6532:	86 30       	cpi	r24, 0x06	; 6
    6534:	34 f5       	brge	.+76     	; 0x6582 <xTimerGenericCommand+0xb2>
    6536:	0e 94 3d 31 	call	0x627a	; 0x627a <xTaskGetSchedulerState>
    653a:	82 30       	cpi	r24, 0x02	; 2
    653c:	99 f4       	brne	.+38     	; 0x6564 <xTimerGenericCommand+0x94>
    653e:	e0 91 30 2d 	lds	r30, 0x2D30	; 0x802d30 <xTimerQueue>
    6542:	f0 91 31 2d 	lds	r31, 0x2D31	; 0x802d31 <xTimerQueue+0x1>
    6546:	8c 89       	ldd	r24, Y+20	; 0x14
    6548:	9d 89       	ldd	r25, Y+21	; 0x15
    654a:	ae 89       	ldd	r26, Y+22	; 0x16
    654c:	bf 89       	ldd	r27, Y+23	; 0x17
    654e:	be 01       	movw	r22, r28
    6550:	6e 5f       	subi	r22, 0xFE	; 254
    6552:	7f 4f       	sbci	r23, 0xFF	; 255
    6554:	00 e0       	ldi	r16, 0x00	; 0
    6556:	9c 01       	movw	r18, r24
    6558:	ad 01       	movw	r20, r26
    655a:	cf 01       	movw	r24, r30
    655c:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <xQueueGenericSend>
    6560:	89 83       	std	Y+1, r24	; 0x01
    6562:	1c c0       	rjmp	.+56     	; 0x659c <xTimerGenericCommand+0xcc>
    6564:	80 91 30 2d 	lds	r24, 0x2D30	; 0x802d30 <xTimerQueue>
    6568:	90 91 31 2d 	lds	r25, 0x2D31	; 0x802d31 <xTimerQueue+0x1>
    656c:	be 01       	movw	r22, r28
    656e:	6e 5f       	subi	r22, 0xFE	; 254
    6570:	7f 4f       	sbci	r23, 0xFF	; 255
    6572:	00 e0       	ldi	r16, 0x00	; 0
    6574:	20 e0       	ldi	r18, 0x00	; 0
    6576:	30 e0       	ldi	r19, 0x00	; 0
    6578:	a9 01       	movw	r20, r18
    657a:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <xQueueGenericSend>
    657e:	89 83       	std	Y+1, r24	; 0x01
    6580:	0d c0       	rjmp	.+26     	; 0x659c <xTimerGenericCommand+0xcc>
    6582:	80 91 30 2d 	lds	r24, 0x2D30	; 0x802d30 <xTimerQueue>
    6586:	90 91 31 2d 	lds	r25, 0x2D31	; 0x802d31 <xTimerQueue+0x1>
    658a:	4a 89       	ldd	r20, Y+18	; 0x12
    658c:	5b 89       	ldd	r21, Y+19	; 0x13
    658e:	be 01       	movw	r22, r28
    6590:	6e 5f       	subi	r22, 0xFE	; 254
    6592:	7f 4f       	sbci	r23, 0xFF	; 255
    6594:	20 e0       	ldi	r18, 0x00	; 0
    6596:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <xQueueGenericSendFromISR>
    659a:	89 83       	std	Y+1, r24	; 0x01
    659c:	89 81       	ldd	r24, Y+1	; 0x01
    659e:	67 96       	adiw	r28, 0x17	; 23
    65a0:	cd bf       	out	0x3d, r28	; 61
    65a2:	de bf       	out	0x3e, r29	; 62
    65a4:	df 91       	pop	r29
    65a6:	cf 91       	pop	r28
    65a8:	1f 91       	pop	r17
    65aa:	0f 91       	pop	r16
    65ac:	ff 90       	pop	r15
    65ae:	ef 90       	pop	r14
    65b0:	df 90       	pop	r13
    65b2:	cf 90       	pop	r12
    65b4:	08 95       	ret

000065b6 <prvProcessExpiredTimer>:
    65b6:	cf 92       	push	r12
    65b8:	df 92       	push	r13
    65ba:	ef 92       	push	r14
    65bc:	ff 92       	push	r15
    65be:	0f 93       	push	r16
    65c0:	1f 93       	push	r17
    65c2:	cf 93       	push	r28
    65c4:	df 93       	push	r29
    65c6:	cd b7       	in	r28, 0x3d	; 61
    65c8:	de b7       	in	r29, 0x3e	; 62
    65ca:	2b 97       	sbiw	r28, 0x0b	; 11
    65cc:	cd bf       	out	0x3d, r28	; 61
    65ce:	de bf       	out	0x3e, r29	; 62
    65d0:	6c 83       	std	Y+4, r22	; 0x04
    65d2:	7d 83       	std	Y+5, r23	; 0x05
    65d4:	8e 83       	std	Y+6, r24	; 0x06
    65d6:	9f 83       	std	Y+7, r25	; 0x07
    65d8:	28 87       	std	Y+8, r18	; 0x08
    65da:	39 87       	std	Y+9, r19	; 0x09
    65dc:	4a 87       	std	Y+10, r20	; 0x0a
    65de:	5b 87       	std	Y+11, r21	; 0x0b
    65e0:	80 91 2c 2d 	lds	r24, 0x2D2C	; 0x802d2c <pxCurrentTimerList>
    65e4:	90 91 2d 2d 	lds	r25, 0x2D2D	; 0x802d2d <pxCurrentTimerList+0x1>
    65e8:	fc 01       	movw	r30, r24
    65ea:	87 81       	ldd	r24, Z+7	; 0x07
    65ec:	90 85       	ldd	r25, Z+8	; 0x08
    65ee:	fc 01       	movw	r30, r24
    65f0:	80 85       	ldd	r24, Z+8	; 0x08
    65f2:	91 85       	ldd	r25, Z+9	; 0x09
    65f4:	89 83       	std	Y+1, r24	; 0x01
    65f6:	9a 83       	std	Y+2, r25	; 0x02
    65f8:	89 81       	ldd	r24, Y+1	; 0x01
    65fa:	9a 81       	ldd	r25, Y+2	; 0x02
    65fc:	02 96       	adiw	r24, 0x02	; 2
    65fe:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
    6602:	89 81       	ldd	r24, Y+1	; 0x01
    6604:	9a 81       	ldd	r25, Y+2	; 0x02
    6606:	fc 01       	movw	r30, r24
    6608:	82 89       	ldd	r24, Z+18	; 0x12
    660a:	81 30       	cpi	r24, 0x01	; 1
    660c:	b1 f5       	brne	.+108    	; 0x667a <prvProcessExpiredTimer+0xc4>
    660e:	89 81       	ldd	r24, Y+1	; 0x01
    6610:	9a 81       	ldd	r25, Y+2	; 0x02
    6612:	fc 01       	movw	r30, r24
    6614:	26 85       	ldd	r18, Z+14	; 0x0e
    6616:	37 85       	ldd	r19, Z+15	; 0x0f
    6618:	40 89       	ldd	r20, Z+16	; 0x10
    661a:	51 89       	ldd	r21, Z+17	; 0x11
    661c:	8c 81       	ldd	r24, Y+4	; 0x04
    661e:	9d 81       	ldd	r25, Y+5	; 0x05
    6620:	ae 81       	ldd	r26, Y+6	; 0x06
    6622:	bf 81       	ldd	r27, Y+7	; 0x07
    6624:	82 0f       	add	r24, r18
    6626:	93 1f       	adc	r25, r19
    6628:	a4 1f       	adc	r26, r20
    662a:	b5 1f       	adc	r27, r21
    662c:	ec 80       	ldd	r14, Y+4	; 0x04
    662e:	fd 80       	ldd	r15, Y+5	; 0x05
    6630:	0e 81       	ldd	r16, Y+6	; 0x06
    6632:	1f 81       	ldd	r17, Y+7	; 0x07
    6634:	28 85       	ldd	r18, Y+8	; 0x08
    6636:	39 85       	ldd	r19, Y+9	; 0x09
    6638:	4a 85       	ldd	r20, Y+10	; 0x0a
    663a:	5b 85       	ldd	r21, Y+11	; 0x0b
    663c:	e9 81       	ldd	r30, Y+1	; 0x01
    663e:	fa 81       	ldd	r31, Y+2	; 0x02
    6640:	67 01       	movw	r12, r14
    6642:	78 01       	movw	r14, r16
    6644:	89 01       	movw	r16, r18
    6646:	9a 01       	movw	r18, r20
    6648:	ac 01       	movw	r20, r24
    664a:	bd 01       	movw	r22, r26
    664c:	cf 01       	movw	r24, r30
    664e:	0e 94 71 34 	call	0x68e2	; 0x68e2 <prvInsertTimerInActiveList>
    6652:	88 23       	and	r24, r24
    6654:	91 f0       	breq	.+36     	; 0x667a <prvProcessExpiredTimer+0xc4>
    6656:	8c 81       	ldd	r24, Y+4	; 0x04
    6658:	9d 81       	ldd	r25, Y+5	; 0x05
    665a:	ae 81       	ldd	r26, Y+6	; 0x06
    665c:	bf 81       	ldd	r27, Y+7	; 0x07
    665e:	e9 81       	ldd	r30, Y+1	; 0x01
    6660:	fa 81       	ldd	r31, Y+2	; 0x02
    6662:	c1 2c       	mov	r12, r1
    6664:	d1 2c       	mov	r13, r1
    6666:	76 01       	movw	r14, r12
    6668:	00 e0       	ldi	r16, 0x00	; 0
    666a:	10 e0       	ldi	r17, 0x00	; 0
    666c:	9c 01       	movw	r18, r24
    666e:	ad 01       	movw	r20, r26
    6670:	60 e0       	ldi	r22, 0x00	; 0
    6672:	cf 01       	movw	r24, r30
    6674:	0e 94 68 32 	call	0x64d0	; 0x64d0 <xTimerGenericCommand>
    6678:	8b 83       	std	Y+3, r24	; 0x03
    667a:	89 81       	ldd	r24, Y+1	; 0x01
    667c:	9a 81       	ldd	r25, Y+2	; 0x02
    667e:	fc 01       	movw	r30, r24
    6680:	25 89       	ldd	r18, Z+21	; 0x15
    6682:	36 89       	ldd	r19, Z+22	; 0x16
    6684:	89 81       	ldd	r24, Y+1	; 0x01
    6686:	9a 81       	ldd	r25, Y+2	; 0x02
    6688:	f9 01       	movw	r30, r18
    668a:	19 95       	eicall
    668c:	00 00       	nop
    668e:	2b 96       	adiw	r28, 0x0b	; 11
    6690:	cd bf       	out	0x3d, r28	; 61
    6692:	de bf       	out	0x3e, r29	; 62
    6694:	df 91       	pop	r29
    6696:	cf 91       	pop	r28
    6698:	1f 91       	pop	r17
    669a:	0f 91       	pop	r16
    669c:	ff 90       	pop	r15
    669e:	ef 90       	pop	r14
    66a0:	df 90       	pop	r13
    66a2:	cf 90       	pop	r12
    66a4:	08 95       	ret

000066a6 <prvTimerTask>:
    66a6:	cf 93       	push	r28
    66a8:	df 93       	push	r29
    66aa:	cd b7       	in	r28, 0x3d	; 61
    66ac:	de b7       	in	r29, 0x3e	; 62
    66ae:	27 97       	sbiw	r28, 0x07	; 7
    66b0:	cd bf       	out	0x3d, r28	; 61
    66b2:	de bf       	out	0x3e, r29	; 62
    66b4:	8e 83       	std	Y+6, r24	; 0x06
    66b6:	9f 83       	std	Y+7, r25	; 0x07
    66b8:	ce 01       	movw	r24, r28
    66ba:	05 96       	adiw	r24, 0x05	; 5
    66bc:	0e 94 ee 33 	call	0x67dc	; 0x67dc <prvGetNextExpireTime>
    66c0:	dc 01       	movw	r26, r24
    66c2:	cb 01       	movw	r24, r22
    66c4:	89 83       	std	Y+1, r24	; 0x01
    66c6:	9a 83       	std	Y+2, r25	; 0x02
    66c8:	ab 83       	std	Y+3, r26	; 0x03
    66ca:	bc 83       	std	Y+4, r27	; 0x04
    66cc:	2d 81       	ldd	r18, Y+5	; 0x05
    66ce:	89 81       	ldd	r24, Y+1	; 0x01
    66d0:	9a 81       	ldd	r25, Y+2	; 0x02
    66d2:	ab 81       	ldd	r26, Y+3	; 0x03
    66d4:	bc 81       	ldd	r27, Y+4	; 0x04
    66d6:	42 2f       	mov	r20, r18
    66d8:	bc 01       	movw	r22, r24
    66da:	cd 01       	movw	r24, r26
    66dc:	0e 94 73 33 	call	0x66e6	; 0x66e6 <prvProcessTimerOrBlockTask>
    66e0:	0e 94 0a 35 	call	0x6a14	; 0x6a14 <prvProcessReceivedCommands>
    66e4:	e9 cf       	rjmp	.-46     	; 0x66b8 <prvTimerTask+0x12>

000066e6 <prvProcessTimerOrBlockTask>:
    66e6:	ef 92       	push	r14
    66e8:	ff 92       	push	r15
    66ea:	0f 93       	push	r16
    66ec:	1f 93       	push	r17
    66ee:	cf 93       	push	r28
    66f0:	df 93       	push	r29
    66f2:	cd b7       	in	r28, 0x3d	; 61
    66f4:	de b7       	in	r29, 0x3e	; 62
    66f6:	2a 97       	sbiw	r28, 0x0a	; 10
    66f8:	cd bf       	out	0x3d, r28	; 61
    66fa:	de bf       	out	0x3e, r29	; 62
    66fc:	6e 83       	std	Y+6, r22	; 0x06
    66fe:	7f 83       	std	Y+7, r23	; 0x07
    6700:	88 87       	std	Y+8, r24	; 0x08
    6702:	99 87       	std	Y+9, r25	; 0x09
    6704:	4a 87       	std	Y+10, r20	; 0x0a
    6706:	0e 94 c5 2b 	call	0x578a	; 0x578a <vTaskSuspendAll>
    670a:	ce 01       	movw	r24, r28
    670c:	05 96       	adiw	r24, 0x05	; 5
    670e:	0e 94 2c 34 	call	0x6858	; 0x6858 <prvSampleTimeNow>
    6712:	dc 01       	movw	r26, r24
    6714:	cb 01       	movw	r24, r22
    6716:	89 83       	std	Y+1, r24	; 0x01
    6718:	9a 83       	std	Y+2, r25	; 0x02
    671a:	ab 83       	std	Y+3, r26	; 0x03
    671c:	bc 83       	std	Y+4, r27	; 0x04
    671e:	8d 81       	ldd	r24, Y+5	; 0x05
    6720:	88 23       	and	r24, r24
    6722:	09 f0       	breq	.+2      	; 0x6726 <prvProcessTimerOrBlockTask+0x40>
    6724:	4e c0       	rjmp	.+156    	; 0x67c2 <prvProcessTimerOrBlockTask+0xdc>
    6726:	8a 85       	ldd	r24, Y+10	; 0x0a
    6728:	88 23       	and	r24, r24
    672a:	e1 f4       	brne	.+56     	; 0x6764 <prvProcessTimerOrBlockTask+0x7e>
    672c:	2e 81       	ldd	r18, Y+6	; 0x06
    672e:	3f 81       	ldd	r19, Y+7	; 0x07
    6730:	48 85       	ldd	r20, Y+8	; 0x08
    6732:	59 85       	ldd	r21, Y+9	; 0x09
    6734:	89 81       	ldd	r24, Y+1	; 0x01
    6736:	9a 81       	ldd	r25, Y+2	; 0x02
    6738:	ab 81       	ldd	r26, Y+3	; 0x03
    673a:	bc 81       	ldd	r27, Y+4	; 0x04
    673c:	82 17       	cp	r24, r18
    673e:	93 07       	cpc	r25, r19
    6740:	a4 07       	cpc	r26, r20
    6742:	b5 07       	cpc	r27, r21
    6744:	78 f0       	brcs	.+30     	; 0x6764 <prvProcessTimerOrBlockTask+0x7e>
    6746:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    674a:	29 81       	ldd	r18, Y+1	; 0x01
    674c:	3a 81       	ldd	r19, Y+2	; 0x02
    674e:	4b 81       	ldd	r20, Y+3	; 0x03
    6750:	5c 81       	ldd	r21, Y+4	; 0x04
    6752:	8e 81       	ldd	r24, Y+6	; 0x06
    6754:	9f 81       	ldd	r25, Y+7	; 0x07
    6756:	a8 85       	ldd	r26, Y+8	; 0x08
    6758:	b9 85       	ldd	r27, Y+9	; 0x09
    675a:	bc 01       	movw	r22, r24
    675c:	cd 01       	movw	r24, r26
    675e:	0e 94 db 32 	call	0x65b6	; 0x65b6 <prvProcessExpiredTimer>
    6762:	31 c0       	rjmp	.+98     	; 0x67c6 <prvProcessTimerOrBlockTask+0xe0>
    6764:	8a 85       	ldd	r24, Y+10	; 0x0a
    6766:	88 23       	and	r24, r24
    6768:	59 f0       	breq	.+22     	; 0x6780 <prvProcessTimerOrBlockTask+0x9a>
    676a:	80 91 2e 2d 	lds	r24, 0x2D2E	; 0x802d2e <pxOverflowTimerList>
    676e:	90 91 2f 2d 	lds	r25, 0x2D2F	; 0x802d2f <pxOverflowTimerList+0x1>
    6772:	fc 01       	movw	r30, r24
    6774:	90 81       	ld	r25, Z
    6776:	81 e0       	ldi	r24, 0x01	; 1
    6778:	99 23       	and	r25, r25
    677a:	09 f0       	breq	.+2      	; 0x677e <prvProcessTimerOrBlockTask+0x98>
    677c:	80 e0       	ldi	r24, 0x00	; 0
    677e:	8a 87       	std	Y+10, r24	; 0x0a
    6780:	2e 81       	ldd	r18, Y+6	; 0x06
    6782:	3f 81       	ldd	r19, Y+7	; 0x07
    6784:	48 85       	ldd	r20, Y+8	; 0x08
    6786:	59 85       	ldd	r21, Y+9	; 0x09
    6788:	89 81       	ldd	r24, Y+1	; 0x01
    678a:	9a 81       	ldd	r25, Y+2	; 0x02
    678c:	ab 81       	ldd	r26, Y+3	; 0x03
    678e:	bc 81       	ldd	r27, Y+4	; 0x04
    6790:	79 01       	movw	r14, r18
    6792:	8a 01       	movw	r16, r20
    6794:	e8 1a       	sub	r14, r24
    6796:	f9 0a       	sbc	r15, r25
    6798:	0a 0b       	sbc	r16, r26
    679a:	1b 0b       	sbc	r17, r27
    679c:	d8 01       	movw	r26, r16
    679e:	c7 01       	movw	r24, r14
    67a0:	e0 91 30 2d 	lds	r30, 0x2D30	; 0x802d30 <xTimerQueue>
    67a4:	f0 91 31 2d 	lds	r31, 0x2D31	; 0x802d31 <xTimerQueue+0x1>
    67a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    67aa:	ac 01       	movw	r20, r24
    67ac:	bd 01       	movw	r22, r26
    67ae:	cf 01       	movw	r24, r30
    67b0:	0e 94 2a 29 	call	0x5254	; 0x5254 <vQueueWaitForMessageRestricted>
    67b4:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    67b8:	88 23       	and	r24, r24
    67ba:	29 f4       	brne	.+10     	; 0x67c6 <prvProcessTimerOrBlockTask+0xe0>
    67bc:	0e 94 11 23 	call	0x4622	; 0x4622 <vPortYield>
    67c0:	02 c0       	rjmp	.+4      	; 0x67c6 <prvProcessTimerOrBlockTask+0xe0>
    67c2:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <xTaskResumeAll>
    67c6:	00 00       	nop
    67c8:	2a 96       	adiw	r28, 0x0a	; 10
    67ca:	cd bf       	out	0x3d, r28	; 61
    67cc:	de bf       	out	0x3e, r29	; 62
    67ce:	df 91       	pop	r29
    67d0:	cf 91       	pop	r28
    67d2:	1f 91       	pop	r17
    67d4:	0f 91       	pop	r16
    67d6:	ff 90       	pop	r15
    67d8:	ef 90       	pop	r14
    67da:	08 95       	ret

000067dc <prvGetNextExpireTime>:
    67dc:	cf 93       	push	r28
    67de:	df 93       	push	r29
    67e0:	00 d0       	rcall	.+0      	; 0x67e2 <prvGetNextExpireTime+0x6>
    67e2:	00 d0       	rcall	.+0      	; 0x67e4 <prvGetNextExpireTime+0x8>
    67e4:	cd b7       	in	r28, 0x3d	; 61
    67e6:	de b7       	in	r29, 0x3e	; 62
    67e8:	8d 83       	std	Y+5, r24	; 0x05
    67ea:	9e 83       	std	Y+6, r25	; 0x06
    67ec:	80 91 2c 2d 	lds	r24, 0x2D2C	; 0x802d2c <pxCurrentTimerList>
    67f0:	90 91 2d 2d 	lds	r25, 0x2D2D	; 0x802d2d <pxCurrentTimerList+0x1>
    67f4:	fc 01       	movw	r30, r24
    67f6:	90 81       	ld	r25, Z
    67f8:	81 e0       	ldi	r24, 0x01	; 1
    67fa:	99 23       	and	r25, r25
    67fc:	09 f0       	breq	.+2      	; 0x6800 <prvGetNextExpireTime+0x24>
    67fe:	80 e0       	ldi	r24, 0x00	; 0
    6800:	28 2f       	mov	r18, r24
    6802:	8d 81       	ldd	r24, Y+5	; 0x05
    6804:	9e 81       	ldd	r25, Y+6	; 0x06
    6806:	fc 01       	movw	r30, r24
    6808:	20 83       	st	Z, r18
    680a:	8d 81       	ldd	r24, Y+5	; 0x05
    680c:	9e 81       	ldd	r25, Y+6	; 0x06
    680e:	fc 01       	movw	r30, r24
    6810:	80 81       	ld	r24, Z
    6812:	88 23       	and	r24, r24
    6814:	89 f4       	brne	.+34     	; 0x6838 <prvGetNextExpireTime+0x5c>
    6816:	80 91 2c 2d 	lds	r24, 0x2D2C	; 0x802d2c <pxCurrentTimerList>
    681a:	90 91 2d 2d 	lds	r25, 0x2D2D	; 0x802d2d <pxCurrentTimerList+0x1>
    681e:	fc 01       	movw	r30, r24
    6820:	87 81       	ldd	r24, Z+7	; 0x07
    6822:	90 85       	ldd	r25, Z+8	; 0x08
    6824:	fc 01       	movw	r30, r24
    6826:	80 81       	ld	r24, Z
    6828:	91 81       	ldd	r25, Z+1	; 0x01
    682a:	a2 81       	ldd	r26, Z+2	; 0x02
    682c:	b3 81       	ldd	r27, Z+3	; 0x03
    682e:	89 83       	std	Y+1, r24	; 0x01
    6830:	9a 83       	std	Y+2, r25	; 0x02
    6832:	ab 83       	std	Y+3, r26	; 0x03
    6834:	bc 83       	std	Y+4, r27	; 0x04
    6836:	04 c0       	rjmp	.+8      	; 0x6840 <prvGetNextExpireTime+0x64>
    6838:	19 82       	std	Y+1, r1	; 0x01
    683a:	1a 82       	std	Y+2, r1	; 0x02
    683c:	1b 82       	std	Y+3, r1	; 0x03
    683e:	1c 82       	std	Y+4, r1	; 0x04
    6840:	89 81       	ldd	r24, Y+1	; 0x01
    6842:	9a 81       	ldd	r25, Y+2	; 0x02
    6844:	ab 81       	ldd	r26, Y+3	; 0x03
    6846:	bc 81       	ldd	r27, Y+4	; 0x04
    6848:	bc 01       	movw	r22, r24
    684a:	cd 01       	movw	r24, r26
    684c:	26 96       	adiw	r28, 0x06	; 6
    684e:	cd bf       	out	0x3d, r28	; 61
    6850:	de bf       	out	0x3e, r29	; 62
    6852:	df 91       	pop	r29
    6854:	cf 91       	pop	r28
    6856:	08 95       	ret

00006858 <prvSampleTimeNow>:
    6858:	cf 93       	push	r28
    685a:	df 93       	push	r29
    685c:	00 d0       	rcall	.+0      	; 0x685e <prvSampleTimeNow+0x6>
    685e:	00 d0       	rcall	.+0      	; 0x6860 <prvSampleTimeNow+0x8>
    6860:	cd b7       	in	r28, 0x3d	; 61
    6862:	de b7       	in	r29, 0x3e	; 62
    6864:	8d 83       	std	Y+5, r24	; 0x05
    6866:	9e 83       	std	Y+6, r25	; 0x06
    6868:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <xTaskGetTickCount>
    686c:	dc 01       	movw	r26, r24
    686e:	cb 01       	movw	r24, r22
    6870:	89 83       	std	Y+1, r24	; 0x01
    6872:	9a 83       	std	Y+2, r25	; 0x02
    6874:	ab 83       	std	Y+3, r26	; 0x03
    6876:	bc 83       	std	Y+4, r27	; 0x04
    6878:	80 91 34 2d 	lds	r24, 0x2D34	; 0x802d34 <xLastTime.4745>
    687c:	90 91 35 2d 	lds	r25, 0x2D35	; 0x802d35 <xLastTime.4745+0x1>
    6880:	a0 91 36 2d 	lds	r26, 0x2D36	; 0x802d36 <xLastTime.4745+0x2>
    6884:	b0 91 37 2d 	lds	r27, 0x2D37	; 0x802d37 <xLastTime.4745+0x3>
    6888:	29 81       	ldd	r18, Y+1	; 0x01
    688a:	3a 81       	ldd	r19, Y+2	; 0x02
    688c:	4b 81       	ldd	r20, Y+3	; 0x03
    688e:	5c 81       	ldd	r21, Y+4	; 0x04
    6890:	28 17       	cp	r18, r24
    6892:	39 07       	cpc	r19, r25
    6894:	4a 07       	cpc	r20, r26
    6896:	5b 07       	cpc	r21, r27
    6898:	40 f4       	brcc	.+16     	; 0x68aa <prvSampleTimeNow+0x52>
    689a:	0e 94 14 36 	call	0x6c28	; 0x6c28 <prvSwitchTimerLists>
    689e:	8d 81       	ldd	r24, Y+5	; 0x05
    68a0:	9e 81       	ldd	r25, Y+6	; 0x06
    68a2:	21 e0       	ldi	r18, 0x01	; 1
    68a4:	fc 01       	movw	r30, r24
    68a6:	20 83       	st	Z, r18
    68a8:	04 c0       	rjmp	.+8      	; 0x68b2 <prvSampleTimeNow+0x5a>
    68aa:	8d 81       	ldd	r24, Y+5	; 0x05
    68ac:	9e 81       	ldd	r25, Y+6	; 0x06
    68ae:	fc 01       	movw	r30, r24
    68b0:	10 82       	st	Z, r1
    68b2:	89 81       	ldd	r24, Y+1	; 0x01
    68b4:	9a 81       	ldd	r25, Y+2	; 0x02
    68b6:	ab 81       	ldd	r26, Y+3	; 0x03
    68b8:	bc 81       	ldd	r27, Y+4	; 0x04
    68ba:	80 93 34 2d 	sts	0x2D34, r24	; 0x802d34 <xLastTime.4745>
    68be:	90 93 35 2d 	sts	0x2D35, r25	; 0x802d35 <xLastTime.4745+0x1>
    68c2:	a0 93 36 2d 	sts	0x2D36, r26	; 0x802d36 <xLastTime.4745+0x2>
    68c6:	b0 93 37 2d 	sts	0x2D37, r27	; 0x802d37 <xLastTime.4745+0x3>
    68ca:	89 81       	ldd	r24, Y+1	; 0x01
    68cc:	9a 81       	ldd	r25, Y+2	; 0x02
    68ce:	ab 81       	ldd	r26, Y+3	; 0x03
    68d0:	bc 81       	ldd	r27, Y+4	; 0x04
    68d2:	bc 01       	movw	r22, r24
    68d4:	cd 01       	movw	r24, r26
    68d6:	26 96       	adiw	r28, 0x06	; 6
    68d8:	cd bf       	out	0x3d, r28	; 61
    68da:	de bf       	out	0x3e, r29	; 62
    68dc:	df 91       	pop	r29
    68de:	cf 91       	pop	r28
    68e0:	08 95       	ret

000068e2 <prvInsertTimerInActiveList>:
    68e2:	cf 92       	push	r12
    68e4:	df 92       	push	r13
    68e6:	ef 92       	push	r14
    68e8:	ff 92       	push	r15
    68ea:	0f 93       	push	r16
    68ec:	1f 93       	push	r17
    68ee:	cf 93       	push	r28
    68f0:	df 93       	push	r29
    68f2:	cd b7       	in	r28, 0x3d	; 61
    68f4:	de b7       	in	r29, 0x3e	; 62
    68f6:	2f 97       	sbiw	r28, 0x0f	; 15
    68f8:	cd bf       	out	0x3d, r28	; 61
    68fa:	de bf       	out	0x3e, r29	; 62
    68fc:	8a 83       	std	Y+2, r24	; 0x02
    68fe:	9b 83       	std	Y+3, r25	; 0x03
    6900:	4c 83       	std	Y+4, r20	; 0x04
    6902:	5d 83       	std	Y+5, r21	; 0x05
    6904:	6e 83       	std	Y+6, r22	; 0x06
    6906:	7f 83       	std	Y+7, r23	; 0x07
    6908:	08 87       	std	Y+8, r16	; 0x08
    690a:	19 87       	std	Y+9, r17	; 0x09
    690c:	2a 87       	std	Y+10, r18	; 0x0a
    690e:	3b 87       	std	Y+11, r19	; 0x0b
    6910:	cc 86       	std	Y+12, r12	; 0x0c
    6912:	dd 86       	std	Y+13, r13	; 0x0d
    6914:	ee 86       	std	Y+14, r14	; 0x0e
    6916:	ff 86       	std	Y+15, r15	; 0x0f
    6918:	19 82       	std	Y+1, r1	; 0x01
    691a:	2a 81       	ldd	r18, Y+2	; 0x02
    691c:	3b 81       	ldd	r19, Y+3	; 0x03
    691e:	8c 81       	ldd	r24, Y+4	; 0x04
    6920:	9d 81       	ldd	r25, Y+5	; 0x05
    6922:	ae 81       	ldd	r26, Y+6	; 0x06
    6924:	bf 81       	ldd	r27, Y+7	; 0x07
    6926:	f9 01       	movw	r30, r18
    6928:	82 83       	std	Z+2, r24	; 0x02
    692a:	93 83       	std	Z+3, r25	; 0x03
    692c:	a4 83       	std	Z+4, r26	; 0x04
    692e:	b5 83       	std	Z+5, r27	; 0x05
    6930:	8a 81       	ldd	r24, Y+2	; 0x02
    6932:	9b 81       	ldd	r25, Y+3	; 0x03
    6934:	2a 81       	ldd	r18, Y+2	; 0x02
    6936:	3b 81       	ldd	r19, Y+3	; 0x03
    6938:	fc 01       	movw	r30, r24
    693a:	22 87       	std	Z+10, r18	; 0x0a
    693c:	33 87       	std	Z+11, r19	; 0x0b
    693e:	2c 81       	ldd	r18, Y+4	; 0x04
    6940:	3d 81       	ldd	r19, Y+5	; 0x05
    6942:	4e 81       	ldd	r20, Y+6	; 0x06
    6944:	5f 81       	ldd	r21, Y+7	; 0x07
    6946:	88 85       	ldd	r24, Y+8	; 0x08
    6948:	99 85       	ldd	r25, Y+9	; 0x09
    694a:	aa 85       	ldd	r26, Y+10	; 0x0a
    694c:	bb 85       	ldd	r27, Y+11	; 0x0b
    694e:	82 17       	cp	r24, r18
    6950:	93 07       	cpc	r25, r19
    6952:	a4 07       	cpc	r26, r20
    6954:	b5 07       	cpc	r27, r21
    6956:	40 f1       	brcs	.+80     	; 0x69a8 <prvInsertTimerInActiveList+0xc6>
    6958:	28 85       	ldd	r18, Y+8	; 0x08
    695a:	39 85       	ldd	r19, Y+9	; 0x09
    695c:	4a 85       	ldd	r20, Y+10	; 0x0a
    695e:	5b 85       	ldd	r21, Y+11	; 0x0b
    6960:	8c 85       	ldd	r24, Y+12	; 0x0c
    6962:	9d 85       	ldd	r25, Y+13	; 0x0d
    6964:	ae 85       	ldd	r26, Y+14	; 0x0e
    6966:	bf 85       	ldd	r27, Y+15	; 0x0f
    6968:	28 1b       	sub	r18, r24
    696a:	39 0b       	sbc	r19, r25
    696c:	4a 0b       	sbc	r20, r26
    696e:	5b 0b       	sbc	r21, r27
    6970:	8a 81       	ldd	r24, Y+2	; 0x02
    6972:	9b 81       	ldd	r25, Y+3	; 0x03
    6974:	fc 01       	movw	r30, r24
    6976:	86 85       	ldd	r24, Z+14	; 0x0e
    6978:	97 85       	ldd	r25, Z+15	; 0x0f
    697a:	a0 89       	ldd	r26, Z+16	; 0x10
    697c:	b1 89       	ldd	r27, Z+17	; 0x11
    697e:	28 17       	cp	r18, r24
    6980:	39 07       	cpc	r19, r25
    6982:	4a 07       	cpc	r20, r26
    6984:	5b 07       	cpc	r21, r27
    6986:	18 f0       	brcs	.+6      	; 0x698e <prvInsertTimerInActiveList+0xac>
    6988:	81 e0       	ldi	r24, 0x01	; 1
    698a:	89 83       	std	Y+1, r24	; 0x01
    698c:	36 c0       	rjmp	.+108    	; 0x69fa <prvInsertTimerInActiveList+0x118>
    698e:	8a 81       	ldd	r24, Y+2	; 0x02
    6990:	9b 81       	ldd	r25, Y+3	; 0x03
    6992:	9c 01       	movw	r18, r24
    6994:	2e 5f       	subi	r18, 0xFE	; 254
    6996:	3f 4f       	sbci	r19, 0xFF	; 255
    6998:	80 91 2e 2d 	lds	r24, 0x2D2E	; 0x802d2e <pxOverflowTimerList>
    699c:	90 91 2f 2d 	lds	r25, 0x2D2F	; 0x802d2f <pxOverflowTimerList+0x1>
    69a0:	b9 01       	movw	r22, r18
    69a2:	0e 94 12 20 	call	0x4024	; 0x4024 <vListInsert>
    69a6:	29 c0       	rjmp	.+82     	; 0x69fa <prvInsertTimerInActiveList+0x118>
    69a8:	28 85       	ldd	r18, Y+8	; 0x08
    69aa:	39 85       	ldd	r19, Y+9	; 0x09
    69ac:	4a 85       	ldd	r20, Y+10	; 0x0a
    69ae:	5b 85       	ldd	r21, Y+11	; 0x0b
    69b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    69b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    69b4:	ae 85       	ldd	r26, Y+14	; 0x0e
    69b6:	bf 85       	ldd	r27, Y+15	; 0x0f
    69b8:	28 17       	cp	r18, r24
    69ba:	39 07       	cpc	r19, r25
    69bc:	4a 07       	cpc	r20, r26
    69be:	5b 07       	cpc	r21, r27
    69c0:	80 f4       	brcc	.+32     	; 0x69e2 <prvInsertTimerInActiveList+0x100>
    69c2:	2c 81       	ldd	r18, Y+4	; 0x04
    69c4:	3d 81       	ldd	r19, Y+5	; 0x05
    69c6:	4e 81       	ldd	r20, Y+6	; 0x06
    69c8:	5f 81       	ldd	r21, Y+7	; 0x07
    69ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    69cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    69ce:	ae 85       	ldd	r26, Y+14	; 0x0e
    69d0:	bf 85       	ldd	r27, Y+15	; 0x0f
    69d2:	28 17       	cp	r18, r24
    69d4:	39 07       	cpc	r19, r25
    69d6:	4a 07       	cpc	r20, r26
    69d8:	5b 07       	cpc	r21, r27
    69da:	18 f0       	brcs	.+6      	; 0x69e2 <prvInsertTimerInActiveList+0x100>
    69dc:	81 e0       	ldi	r24, 0x01	; 1
    69de:	89 83       	std	Y+1, r24	; 0x01
    69e0:	0c c0       	rjmp	.+24     	; 0x69fa <prvInsertTimerInActiveList+0x118>
    69e2:	8a 81       	ldd	r24, Y+2	; 0x02
    69e4:	9b 81       	ldd	r25, Y+3	; 0x03
    69e6:	9c 01       	movw	r18, r24
    69e8:	2e 5f       	subi	r18, 0xFE	; 254
    69ea:	3f 4f       	sbci	r19, 0xFF	; 255
    69ec:	80 91 2c 2d 	lds	r24, 0x2D2C	; 0x802d2c <pxCurrentTimerList>
    69f0:	90 91 2d 2d 	lds	r25, 0x2D2D	; 0x802d2d <pxCurrentTimerList+0x1>
    69f4:	b9 01       	movw	r22, r18
    69f6:	0e 94 12 20 	call	0x4024	; 0x4024 <vListInsert>
    69fa:	89 81       	ldd	r24, Y+1	; 0x01
    69fc:	2f 96       	adiw	r28, 0x0f	; 15
    69fe:	cd bf       	out	0x3d, r28	; 61
    6a00:	de bf       	out	0x3e, r29	; 62
    6a02:	df 91       	pop	r29
    6a04:	cf 91       	pop	r28
    6a06:	1f 91       	pop	r17
    6a08:	0f 91       	pop	r16
    6a0a:	ff 90       	pop	r15
    6a0c:	ef 90       	pop	r14
    6a0e:	df 90       	pop	r13
    6a10:	cf 90       	pop	r12
    6a12:	08 95       	ret

00006a14 <prvProcessReceivedCommands>:
    6a14:	cf 92       	push	r12
    6a16:	df 92       	push	r13
    6a18:	ef 92       	push	r14
    6a1a:	ff 92       	push	r15
    6a1c:	0f 93       	push	r16
    6a1e:	1f 93       	push	r17
    6a20:	cf 93       	push	r28
    6a22:	df 93       	push	r29
    6a24:	cd b7       	in	r28, 0x3d	; 61
    6a26:	de b7       	in	r29, 0x3e	; 62
    6a28:	65 97       	sbiw	r28, 0x15	; 21
    6a2a:	cd bf       	out	0x3d, r28	; 61
    6a2c:	de bf       	out	0x3e, r29	; 62
    6a2e:	e0 c0       	rjmp	.+448    	; 0x6bf0 <prvProcessReceivedCommands+0x1dc>
    6a30:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a32:	88 23       	and	r24, r24
    6a34:	fc f4       	brge	.+62     	; 0x6a74 <prvProcessReceivedCommands+0x60>
    6a36:	ce 01       	movw	r24, r28
    6a38:	0a 96       	adiw	r24, 0x0a	; 10
    6a3a:	01 96       	adiw	r24, 0x01	; 1
    6a3c:	89 83       	std	Y+1, r24	; 0x01
    6a3e:	9a 83       	std	Y+2, r25	; 0x02
    6a40:	89 81       	ldd	r24, Y+1	; 0x01
    6a42:	9a 81       	ldd	r25, Y+2	; 0x02
    6a44:	fc 01       	movw	r30, r24
    6a46:	20 81       	ld	r18, Z
    6a48:	31 81       	ldd	r19, Z+1	; 0x01
    6a4a:	89 81       	ldd	r24, Y+1	; 0x01
    6a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    6a4e:	fc 01       	movw	r30, r24
    6a50:	84 81       	ldd	r24, Z+4	; 0x04
    6a52:	95 81       	ldd	r25, Z+5	; 0x05
    6a54:	a6 81       	ldd	r26, Z+6	; 0x06
    6a56:	b7 81       	ldd	r27, Z+7	; 0x07
    6a58:	49 81       	ldd	r20, Y+1	; 0x01
    6a5a:	5a 81       	ldd	r21, Y+2	; 0x02
    6a5c:	fa 01       	movw	r30, r20
    6a5e:	02 80       	ldd	r0, Z+2	; 0x02
    6a60:	f3 81       	ldd	r31, Z+3	; 0x03
    6a62:	e0 2d       	mov	r30, r0
    6a64:	ec 8b       	std	Y+20, r30	; 0x14
    6a66:	fd 8b       	std	Y+21, r31	; 0x15
    6a68:	ac 01       	movw	r20, r24
    6a6a:	bd 01       	movw	r22, r26
    6a6c:	8c 89       	ldd	r24, Y+20	; 0x14
    6a6e:	9d 89       	ldd	r25, Y+21	; 0x15
    6a70:	f9 01       	movw	r30, r18
    6a72:	19 95       	eicall
    6a74:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a76:	88 23       	and	r24, r24
    6a78:	0c f4       	brge	.+2      	; 0x6a7c <prvProcessReceivedCommands+0x68>
    6a7a:	ba c0       	rjmp	.+372    	; 0x6bf0 <prvProcessReceivedCommands+0x1dc>
    6a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a7e:	98 89       	ldd	r25, Y+16	; 0x10
    6a80:	8b 83       	std	Y+3, r24	; 0x03
    6a82:	9c 83       	std	Y+4, r25	; 0x04
    6a84:	8b 81       	ldd	r24, Y+3	; 0x03
    6a86:	9c 81       	ldd	r25, Y+4	; 0x04
    6a88:	fc 01       	movw	r30, r24
    6a8a:	84 85       	ldd	r24, Z+12	; 0x0c
    6a8c:	95 85       	ldd	r25, Z+13	; 0x0d
    6a8e:	89 2b       	or	r24, r25
    6a90:	29 f0       	breq	.+10     	; 0x6a9c <prvProcessReceivedCommands+0x88>
    6a92:	8b 81       	ldd	r24, Y+3	; 0x03
    6a94:	9c 81       	ldd	r25, Y+4	; 0x04
    6a96:	02 96       	adiw	r24, 0x02	; 2
    6a98:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
    6a9c:	ce 01       	movw	r24, r28
    6a9e:	43 96       	adiw	r24, 0x13	; 19
    6aa0:	0e 94 2c 34 	call	0x6858	; 0x6858 <prvSampleTimeNow>
    6aa4:	dc 01       	movw	r26, r24
    6aa6:	cb 01       	movw	r24, r22
    6aa8:	8d 83       	std	Y+5, r24	; 0x05
    6aaa:	9e 83       	std	Y+6, r25	; 0x06
    6aac:	af 83       	std	Y+7, r26	; 0x07
    6aae:	b8 87       	std	Y+8, r27	; 0x08
    6ab0:	8a 85       	ldd	r24, Y+10	; 0x0a
    6ab2:	08 2e       	mov	r0, r24
    6ab4:	00 0c       	add	r0, r0
    6ab6:	99 0b       	sbc	r25, r25
    6ab8:	09 2e       	mov	r0, r25
    6aba:	00 0c       	add	r0, r0
    6abc:	aa 0b       	sbc	r26, r26
    6abe:	bb 0b       	sbc	r27, r27
    6ac0:	40 e0       	ldi	r20, 0x00	; 0
    6ac2:	50 e0       	ldi	r21, 0x00	; 0
    6ac4:	29 e0       	ldi	r18, 0x09	; 9
    6ac6:	30 e0       	ldi	r19, 0x00	; 0
    6ac8:	84 1b       	sub	r24, r20
    6aca:	95 0b       	sbc	r25, r21
    6acc:	28 17       	cp	r18, r24
    6ace:	39 07       	cpc	r19, r25
    6ad0:	08 f4       	brcc	.+2      	; 0x6ad4 <prvProcessReceivedCommands+0xc0>
    6ad2:	8d c0       	rjmp	.+282    	; 0x6bee <prvProcessReceivedCommands+0x1da>
    6ad4:	fc 01       	movw	r30, r24
    6ad6:	88 27       	eor	r24, r24
    6ad8:	e2 50       	subi	r30, 0x02	; 2
    6ada:	ff 4f       	sbci	r31, 0xFF	; 255
    6adc:	8f 4f       	sbci	r24, 0xFF	; 255
    6ade:	0c 94 05 4b 	jmp	0x960a	; 0x960a <__tablejump2__>
    6ae2:	eb 84       	ldd	r14, Y+11	; 0x0b
    6ae4:	fc 84       	ldd	r15, Y+12	; 0x0c
    6ae6:	0d 85       	ldd	r16, Y+13	; 0x0d
    6ae8:	1e 85       	ldd	r17, Y+14	; 0x0e
    6aea:	2b 85       	ldd	r18, Y+11	; 0x0b
    6aec:	3c 85       	ldd	r19, Y+12	; 0x0c
    6aee:	4d 85       	ldd	r20, Y+13	; 0x0d
    6af0:	5e 85       	ldd	r21, Y+14	; 0x0e
    6af2:	8b 81       	ldd	r24, Y+3	; 0x03
    6af4:	9c 81       	ldd	r25, Y+4	; 0x04
    6af6:	fc 01       	movw	r30, r24
    6af8:	86 85       	ldd	r24, Z+14	; 0x0e
    6afa:	97 85       	ldd	r25, Z+15	; 0x0f
    6afc:	a0 89       	ldd	r26, Z+16	; 0x10
    6afe:	b1 89       	ldd	r27, Z+17	; 0x11
    6b00:	82 0f       	add	r24, r18
    6b02:	93 1f       	adc	r25, r19
    6b04:	a4 1f       	adc	r26, r20
    6b06:	b5 1f       	adc	r27, r21
    6b08:	2d 81       	ldd	r18, Y+5	; 0x05
    6b0a:	3e 81       	ldd	r19, Y+6	; 0x06
    6b0c:	4f 81       	ldd	r20, Y+7	; 0x07
    6b0e:	58 85       	ldd	r21, Y+8	; 0x08
    6b10:	eb 81       	ldd	r30, Y+3	; 0x03
    6b12:	fc 81       	ldd	r31, Y+4	; 0x04
    6b14:	67 01       	movw	r12, r14
    6b16:	78 01       	movw	r14, r16
    6b18:	89 01       	movw	r16, r18
    6b1a:	9a 01       	movw	r18, r20
    6b1c:	ac 01       	movw	r20, r24
    6b1e:	bd 01       	movw	r22, r26
    6b20:	cf 01       	movw	r24, r30
    6b22:	0e 94 71 34 	call	0x68e2	; 0x68e2 <prvInsertTimerInActiveList>
    6b26:	88 23       	and	r24, r24
    6b28:	09 f4       	brne	.+2      	; 0x6b2c <prvProcessReceivedCommands+0x118>
    6b2a:	62 c0       	rjmp	.+196    	; 0x6bf0 <prvProcessReceivedCommands+0x1dc>
    6b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    6b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    6b30:	fc 01       	movw	r30, r24
    6b32:	25 89       	ldd	r18, Z+21	; 0x15
    6b34:	36 89       	ldd	r19, Z+22	; 0x16
    6b36:	8b 81       	ldd	r24, Y+3	; 0x03
    6b38:	9c 81       	ldd	r25, Y+4	; 0x04
    6b3a:	f9 01       	movw	r30, r18
    6b3c:	19 95       	eicall
    6b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b40:	9c 81       	ldd	r25, Y+4	; 0x04
    6b42:	fc 01       	movw	r30, r24
    6b44:	82 89       	ldd	r24, Z+18	; 0x12
    6b46:	81 30       	cpi	r24, 0x01	; 1
    6b48:	09 f0       	breq	.+2      	; 0x6b4c <prvProcessReceivedCommands+0x138>
    6b4a:	52 c0       	rjmp	.+164    	; 0x6bf0 <prvProcessReceivedCommands+0x1dc>
    6b4c:	2b 85       	ldd	r18, Y+11	; 0x0b
    6b4e:	3c 85       	ldd	r19, Y+12	; 0x0c
    6b50:	4d 85       	ldd	r20, Y+13	; 0x0d
    6b52:	5e 85       	ldd	r21, Y+14	; 0x0e
    6b54:	8b 81       	ldd	r24, Y+3	; 0x03
    6b56:	9c 81       	ldd	r25, Y+4	; 0x04
    6b58:	fc 01       	movw	r30, r24
    6b5a:	86 85       	ldd	r24, Z+14	; 0x0e
    6b5c:	97 85       	ldd	r25, Z+15	; 0x0f
    6b5e:	a0 89       	ldd	r26, Z+16	; 0x10
    6b60:	b1 89       	ldd	r27, Z+17	; 0x11
    6b62:	82 0f       	add	r24, r18
    6b64:	93 1f       	adc	r25, r19
    6b66:	a4 1f       	adc	r26, r20
    6b68:	b5 1f       	adc	r27, r21
    6b6a:	eb 81       	ldd	r30, Y+3	; 0x03
    6b6c:	fc 81       	ldd	r31, Y+4	; 0x04
    6b6e:	c1 2c       	mov	r12, r1
    6b70:	d1 2c       	mov	r13, r1
    6b72:	76 01       	movw	r14, r12
    6b74:	00 e0       	ldi	r16, 0x00	; 0
    6b76:	10 e0       	ldi	r17, 0x00	; 0
    6b78:	9c 01       	movw	r18, r24
    6b7a:	ad 01       	movw	r20, r26
    6b7c:	60 e0       	ldi	r22, 0x00	; 0
    6b7e:	cf 01       	movw	r24, r30
    6b80:	0e 94 68 32 	call	0x64d0	; 0x64d0 <xTimerGenericCommand>
    6b84:	89 87       	std	Y+9, r24	; 0x09
    6b86:	34 c0       	rjmp	.+104    	; 0x6bf0 <prvProcessReceivedCommands+0x1dc>
    6b88:	8b 85       	ldd	r24, Y+11	; 0x0b
    6b8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    6b8c:	ad 85       	ldd	r26, Y+13	; 0x0d
    6b8e:	be 85       	ldd	r27, Y+14	; 0x0e
    6b90:	2b 81       	ldd	r18, Y+3	; 0x03
    6b92:	3c 81       	ldd	r19, Y+4	; 0x04
    6b94:	f9 01       	movw	r30, r18
    6b96:	86 87       	std	Z+14, r24	; 0x0e
    6b98:	97 87       	std	Z+15, r25	; 0x0f
    6b9a:	a0 8b       	std	Z+16, r26	; 0x10
    6b9c:	b1 8b       	std	Z+17, r27	; 0x11
    6b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    6ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    6ba2:	fc 01       	movw	r30, r24
    6ba4:	26 85       	ldd	r18, Z+14	; 0x0e
    6ba6:	37 85       	ldd	r19, Z+15	; 0x0f
    6ba8:	40 89       	ldd	r20, Z+16	; 0x10
    6baa:	51 89       	ldd	r21, Z+17	; 0x11
    6bac:	8d 81       	ldd	r24, Y+5	; 0x05
    6bae:	9e 81       	ldd	r25, Y+6	; 0x06
    6bb0:	af 81       	ldd	r26, Y+7	; 0x07
    6bb2:	b8 85       	ldd	r27, Y+8	; 0x08
    6bb4:	82 0f       	add	r24, r18
    6bb6:	93 1f       	adc	r25, r19
    6bb8:	a4 1f       	adc	r26, r20
    6bba:	b5 1f       	adc	r27, r21
    6bbc:	ed 80       	ldd	r14, Y+5	; 0x05
    6bbe:	fe 80       	ldd	r15, Y+6	; 0x06
    6bc0:	0f 81       	ldd	r16, Y+7	; 0x07
    6bc2:	18 85       	ldd	r17, Y+8	; 0x08
    6bc4:	2d 81       	ldd	r18, Y+5	; 0x05
    6bc6:	3e 81       	ldd	r19, Y+6	; 0x06
    6bc8:	4f 81       	ldd	r20, Y+7	; 0x07
    6bca:	58 85       	ldd	r21, Y+8	; 0x08
    6bcc:	eb 81       	ldd	r30, Y+3	; 0x03
    6bce:	fc 81       	ldd	r31, Y+4	; 0x04
    6bd0:	67 01       	movw	r12, r14
    6bd2:	78 01       	movw	r14, r16
    6bd4:	89 01       	movw	r16, r18
    6bd6:	9a 01       	movw	r18, r20
    6bd8:	ac 01       	movw	r20, r24
    6bda:	bd 01       	movw	r22, r26
    6bdc:	cf 01       	movw	r24, r30
    6bde:	0e 94 71 34 	call	0x68e2	; 0x68e2 <prvInsertTimerInActiveList>
    6be2:	06 c0       	rjmp	.+12     	; 0x6bf0 <prvProcessReceivedCommands+0x1dc>
    6be4:	8b 81       	ldd	r24, Y+3	; 0x03
    6be6:	9c 81       	ldd	r25, Y+4	; 0x04
    6be8:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <vPortFree>
    6bec:	01 c0       	rjmp	.+2      	; 0x6bf0 <prvProcessReceivedCommands+0x1dc>
    6bee:	00 00       	nop
    6bf0:	80 91 30 2d 	lds	r24, 0x2D30	; 0x802d30 <xTimerQueue>
    6bf4:	90 91 31 2d 	lds	r25, 0x2D31	; 0x802d31 <xTimerQueue+0x1>
    6bf8:	be 01       	movw	r22, r28
    6bfa:	66 5f       	subi	r22, 0xF6	; 246
    6bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    6bfe:	20 e0       	ldi	r18, 0x00	; 0
    6c00:	30 e0       	ldi	r19, 0x00	; 0
    6c02:	a9 01       	movw	r20, r18
    6c04:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <xQueueReceive>
    6c08:	88 23       	and	r24, r24
    6c0a:	09 f0       	breq	.+2      	; 0x6c0e <prvProcessReceivedCommands+0x1fa>
    6c0c:	11 cf       	rjmp	.-478    	; 0x6a30 <prvProcessReceivedCommands+0x1c>
    6c0e:	00 00       	nop
    6c10:	65 96       	adiw	r28, 0x15	; 21
    6c12:	cd bf       	out	0x3d, r28	; 61
    6c14:	de bf       	out	0x3e, r29	; 62
    6c16:	df 91       	pop	r29
    6c18:	cf 91       	pop	r28
    6c1a:	1f 91       	pop	r17
    6c1c:	0f 91       	pop	r16
    6c1e:	ff 90       	pop	r15
    6c20:	ef 90       	pop	r14
    6c22:	df 90       	pop	r13
    6c24:	cf 90       	pop	r12
    6c26:	08 95       	ret

00006c28 <prvSwitchTimerLists>:
    6c28:	cf 92       	push	r12
    6c2a:	df 92       	push	r13
    6c2c:	ef 92       	push	r14
    6c2e:	ff 92       	push	r15
    6c30:	0f 93       	push	r16
    6c32:	1f 93       	push	r17
    6c34:	cf 93       	push	r28
    6c36:	df 93       	push	r29
    6c38:	cd b7       	in	r28, 0x3d	; 61
    6c3a:	de b7       	in	r29, 0x3e	; 62
    6c3c:	2d 97       	sbiw	r28, 0x0d	; 13
    6c3e:	cd bf       	out	0x3d, r28	; 61
    6c40:	de bf       	out	0x3e, r29	; 62
    6c42:	82 c0       	rjmp	.+260    	; 0x6d48 <prvSwitchTimerLists+0x120>
    6c44:	80 91 2c 2d 	lds	r24, 0x2D2C	; 0x802d2c <pxCurrentTimerList>
    6c48:	90 91 2d 2d 	lds	r25, 0x2D2D	; 0x802d2d <pxCurrentTimerList+0x1>
    6c4c:	fc 01       	movw	r30, r24
    6c4e:	87 81       	ldd	r24, Z+7	; 0x07
    6c50:	90 85       	ldd	r25, Z+8	; 0x08
    6c52:	fc 01       	movw	r30, r24
    6c54:	80 81       	ld	r24, Z
    6c56:	91 81       	ldd	r25, Z+1	; 0x01
    6c58:	a2 81       	ldd	r26, Z+2	; 0x02
    6c5a:	b3 81       	ldd	r27, Z+3	; 0x03
    6c5c:	89 83       	std	Y+1, r24	; 0x01
    6c5e:	9a 83       	std	Y+2, r25	; 0x02
    6c60:	ab 83       	std	Y+3, r26	; 0x03
    6c62:	bc 83       	std	Y+4, r27	; 0x04
    6c64:	80 91 2c 2d 	lds	r24, 0x2D2C	; 0x802d2c <pxCurrentTimerList>
    6c68:	90 91 2d 2d 	lds	r25, 0x2D2D	; 0x802d2d <pxCurrentTimerList+0x1>
    6c6c:	fc 01       	movw	r30, r24
    6c6e:	87 81       	ldd	r24, Z+7	; 0x07
    6c70:	90 85       	ldd	r25, Z+8	; 0x08
    6c72:	fc 01       	movw	r30, r24
    6c74:	80 85       	ldd	r24, Z+8	; 0x08
    6c76:	91 85       	ldd	r25, Z+9	; 0x09
    6c78:	8d 83       	std	Y+5, r24	; 0x05
    6c7a:	9e 83       	std	Y+6, r25	; 0x06
    6c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    6c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    6c80:	02 96       	adiw	r24, 0x02	; 2
    6c82:	0e 94 93 20 	call	0x4126	; 0x4126 <uxListRemove>
    6c86:	8d 81       	ldd	r24, Y+5	; 0x05
    6c88:	9e 81       	ldd	r25, Y+6	; 0x06
    6c8a:	fc 01       	movw	r30, r24
    6c8c:	25 89       	ldd	r18, Z+21	; 0x15
    6c8e:	36 89       	ldd	r19, Z+22	; 0x16
    6c90:	8d 81       	ldd	r24, Y+5	; 0x05
    6c92:	9e 81       	ldd	r25, Y+6	; 0x06
    6c94:	f9 01       	movw	r30, r18
    6c96:	19 95       	eicall
    6c98:	8d 81       	ldd	r24, Y+5	; 0x05
    6c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    6c9c:	fc 01       	movw	r30, r24
    6c9e:	82 89       	ldd	r24, Z+18	; 0x12
    6ca0:	81 30       	cpi	r24, 0x01	; 1
    6ca2:	09 f0       	breq	.+2      	; 0x6ca6 <prvSwitchTimerLists+0x7e>
    6ca4:	51 c0       	rjmp	.+162    	; 0x6d48 <prvSwitchTimerLists+0x120>
    6ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    6ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    6caa:	fc 01       	movw	r30, r24
    6cac:	26 85       	ldd	r18, Z+14	; 0x0e
    6cae:	37 85       	ldd	r19, Z+15	; 0x0f
    6cb0:	40 89       	ldd	r20, Z+16	; 0x10
    6cb2:	51 89       	ldd	r21, Z+17	; 0x11
    6cb4:	89 81       	ldd	r24, Y+1	; 0x01
    6cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    6cb8:	ab 81       	ldd	r26, Y+3	; 0x03
    6cba:	bc 81       	ldd	r27, Y+4	; 0x04
    6cbc:	82 0f       	add	r24, r18
    6cbe:	93 1f       	adc	r25, r19
    6cc0:	a4 1f       	adc	r26, r20
    6cc2:	b5 1f       	adc	r27, r21
    6cc4:	8f 83       	std	Y+7, r24	; 0x07
    6cc6:	98 87       	std	Y+8, r25	; 0x08
    6cc8:	a9 87       	std	Y+9, r26	; 0x09
    6cca:	ba 87       	std	Y+10, r27	; 0x0a
    6ccc:	2f 81       	ldd	r18, Y+7	; 0x07
    6cce:	38 85       	ldd	r19, Y+8	; 0x08
    6cd0:	49 85       	ldd	r20, Y+9	; 0x09
    6cd2:	5a 85       	ldd	r21, Y+10	; 0x0a
    6cd4:	89 81       	ldd	r24, Y+1	; 0x01
    6cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    6cd8:	ab 81       	ldd	r26, Y+3	; 0x03
    6cda:	bc 81       	ldd	r27, Y+4	; 0x04
    6cdc:	82 17       	cp	r24, r18
    6cde:	93 07       	cpc	r25, r19
    6ce0:	a4 07       	cpc	r26, r20
    6ce2:	b5 07       	cpc	r27, r21
    6ce4:	f8 f4       	brcc	.+62     	; 0x6d24 <prvSwitchTimerLists+0xfc>
    6ce6:	2d 81       	ldd	r18, Y+5	; 0x05
    6ce8:	3e 81       	ldd	r19, Y+6	; 0x06
    6cea:	8f 81       	ldd	r24, Y+7	; 0x07
    6cec:	98 85       	ldd	r25, Y+8	; 0x08
    6cee:	a9 85       	ldd	r26, Y+9	; 0x09
    6cf0:	ba 85       	ldd	r27, Y+10	; 0x0a
    6cf2:	f9 01       	movw	r30, r18
    6cf4:	82 83       	std	Z+2, r24	; 0x02
    6cf6:	93 83       	std	Z+3, r25	; 0x03
    6cf8:	a4 83       	std	Z+4, r26	; 0x04
    6cfa:	b5 83       	std	Z+5, r27	; 0x05
    6cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    6cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    6d00:	2d 81       	ldd	r18, Y+5	; 0x05
    6d02:	3e 81       	ldd	r19, Y+6	; 0x06
    6d04:	fc 01       	movw	r30, r24
    6d06:	22 87       	std	Z+10, r18	; 0x0a
    6d08:	33 87       	std	Z+11, r19	; 0x0b
    6d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    6d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    6d0e:	9c 01       	movw	r18, r24
    6d10:	2e 5f       	subi	r18, 0xFE	; 254
    6d12:	3f 4f       	sbci	r19, 0xFF	; 255
    6d14:	80 91 2c 2d 	lds	r24, 0x2D2C	; 0x802d2c <pxCurrentTimerList>
    6d18:	90 91 2d 2d 	lds	r25, 0x2D2D	; 0x802d2d <pxCurrentTimerList+0x1>
    6d1c:	b9 01       	movw	r22, r18
    6d1e:	0e 94 12 20 	call	0x4024	; 0x4024 <vListInsert>
    6d22:	12 c0       	rjmp	.+36     	; 0x6d48 <prvSwitchTimerLists+0x120>
    6d24:	89 81       	ldd	r24, Y+1	; 0x01
    6d26:	9a 81       	ldd	r25, Y+2	; 0x02
    6d28:	ab 81       	ldd	r26, Y+3	; 0x03
    6d2a:	bc 81       	ldd	r27, Y+4	; 0x04
    6d2c:	ed 81       	ldd	r30, Y+5	; 0x05
    6d2e:	fe 81       	ldd	r31, Y+6	; 0x06
    6d30:	c1 2c       	mov	r12, r1
    6d32:	d1 2c       	mov	r13, r1
    6d34:	76 01       	movw	r14, r12
    6d36:	00 e0       	ldi	r16, 0x00	; 0
    6d38:	10 e0       	ldi	r17, 0x00	; 0
    6d3a:	9c 01       	movw	r18, r24
    6d3c:	ad 01       	movw	r20, r26
    6d3e:	60 e0       	ldi	r22, 0x00	; 0
    6d40:	cf 01       	movw	r24, r30
    6d42:	0e 94 68 32 	call	0x64d0	; 0x64d0 <xTimerGenericCommand>
    6d46:	8b 87       	std	Y+11, r24	; 0x0b
    6d48:	80 91 2c 2d 	lds	r24, 0x2D2C	; 0x802d2c <pxCurrentTimerList>
    6d4c:	90 91 2d 2d 	lds	r25, 0x2D2D	; 0x802d2d <pxCurrentTimerList+0x1>
    6d50:	fc 01       	movw	r30, r24
    6d52:	80 81       	ld	r24, Z
    6d54:	88 23       	and	r24, r24
    6d56:	09 f0       	breq	.+2      	; 0x6d5a <prvSwitchTimerLists+0x132>
    6d58:	75 cf       	rjmp	.-278    	; 0x6c44 <prvSwitchTimerLists+0x1c>
    6d5a:	80 91 2c 2d 	lds	r24, 0x2D2C	; 0x802d2c <pxCurrentTimerList>
    6d5e:	90 91 2d 2d 	lds	r25, 0x2D2D	; 0x802d2d <pxCurrentTimerList+0x1>
    6d62:	8c 87       	std	Y+12, r24	; 0x0c
    6d64:	9d 87       	std	Y+13, r25	; 0x0d
    6d66:	80 91 2e 2d 	lds	r24, 0x2D2E	; 0x802d2e <pxOverflowTimerList>
    6d6a:	90 91 2f 2d 	lds	r25, 0x2D2F	; 0x802d2f <pxOverflowTimerList+0x1>
    6d6e:	80 93 2c 2d 	sts	0x2D2C, r24	; 0x802d2c <pxCurrentTimerList>
    6d72:	90 93 2d 2d 	sts	0x2D2D, r25	; 0x802d2d <pxCurrentTimerList+0x1>
    6d76:	8c 85       	ldd	r24, Y+12	; 0x0c
    6d78:	9d 85       	ldd	r25, Y+13	; 0x0d
    6d7a:	80 93 2e 2d 	sts	0x2D2E, r24	; 0x802d2e <pxOverflowTimerList>
    6d7e:	90 93 2f 2d 	sts	0x2D2F, r25	; 0x802d2f <pxOverflowTimerList+0x1>
    6d82:	00 00       	nop
    6d84:	2d 96       	adiw	r28, 0x0d	; 13
    6d86:	cd bf       	out	0x3d, r28	; 61
    6d88:	de bf       	out	0x3e, r29	; 62
    6d8a:	df 91       	pop	r29
    6d8c:	cf 91       	pop	r28
    6d8e:	1f 91       	pop	r17
    6d90:	0f 91       	pop	r16
    6d92:	ff 90       	pop	r15
    6d94:	ef 90       	pop	r14
    6d96:	df 90       	pop	r13
    6d98:	cf 90       	pop	r12
    6d9a:	08 95       	ret

00006d9c <prvCheckForValidListAndQueue>:
    6d9c:	cf 93       	push	r28
    6d9e:	df 93       	push	r29
    6da0:	cd b7       	in	r28, 0x3d	; 61
    6da2:	de b7       	in	r29, 0x3e	; 62
    6da4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    6da8:	ff 93       	push	r31
    6daa:	f8 7f       	andi	r31, 0xF8	; 248
    6dac:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    6db0:	80 91 30 2d 	lds	r24, 0x2D30	; 0x802d30 <xTimerQueue>
    6db4:	90 91 31 2d 	lds	r25, 0x2D31	; 0x802d31 <xTimerQueue+0x1>
    6db8:	89 2b       	or	r24, r25
    6dba:	e9 f4       	brne	.+58     	; 0x6df6 <prvCheckForValidListAndQueue+0x5a>
    6dbc:	86 e1       	ldi	r24, 0x16	; 22
    6dbe:	9d e2       	ldi	r25, 0x2D	; 45
    6dc0:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <vListInitialise>
    6dc4:	81 e2       	ldi	r24, 0x21	; 33
    6dc6:	9d e2       	ldi	r25, 0x2D	; 45
    6dc8:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <vListInitialise>
    6dcc:	86 e1       	ldi	r24, 0x16	; 22
    6dce:	9d e2       	ldi	r25, 0x2D	; 45
    6dd0:	80 93 2c 2d 	sts	0x2D2C, r24	; 0x802d2c <pxCurrentTimerList>
    6dd4:	90 93 2d 2d 	sts	0x2D2D, r25	; 0x802d2d <pxCurrentTimerList+0x1>
    6dd8:	81 e2       	ldi	r24, 0x21	; 33
    6dda:	9d e2       	ldi	r25, 0x2D	; 45
    6ddc:	80 93 2e 2d 	sts	0x2D2E, r24	; 0x802d2e <pxOverflowTimerList>
    6de0:	90 93 2f 2d 	sts	0x2D2F, r25	; 0x802d2f <pxOverflowTimerList+0x1>
    6de4:	40 e0       	ldi	r20, 0x00	; 0
    6de6:	69 e0       	ldi	r22, 0x09	; 9
    6de8:	85 e0       	ldi	r24, 0x05	; 5
    6dea:	0e 94 f7 24 	call	0x49ee	; 0x49ee <xQueueGenericCreate>
    6dee:	80 93 30 2d 	sts	0x2D30, r24	; 0x802d30 <xTimerQueue>
    6df2:	90 93 31 2d 	sts	0x2D31, r25	; 0x802d31 <xTimerQueue+0x1>
    6df6:	ff 91       	pop	r31
    6df8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    6dfc:	00 00       	nop
    6dfe:	df 91       	pop	r29
    6e00:	cf 91       	pop	r28
    6e02:	08 95       	ret

00006e04 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    6e04:	0f 93       	push	r16
    6e06:	1f 93       	push	r17
    6e08:	cf 93       	push	r28
    6e0a:	df 93       	push	r29
    6e0c:	cd b7       	in	r28, 0x3d	; 61
    6e0e:	de b7       	in	r29, 0x3e	; 62
    6e10:	64 97       	sbiw	r28, 0x14	; 20
    6e12:	cd bf       	out	0x3d, r28	; 61
    6e14:	de bf       	out	0x3e, r29	; 62
    6e16:	8b 87       	std	Y+11, r24	; 0x0b
    6e18:	9c 87       	std	Y+12, r25	; 0x0c
    6e1a:	6d 87       	std	Y+13, r22	; 0x0d
    6e1c:	7e 87       	std	Y+14, r23	; 0x0e
    6e1e:	2f 87       	std	Y+15, r18	; 0x0f
    6e20:	38 8b       	std	Y+16, r19	; 0x10
    6e22:	49 8b       	std	Y+17, r20	; 0x11
    6e24:	5a 8b       	std	Y+18, r21	; 0x12
    6e26:	0b 8b       	std	Y+19, r16	; 0x13
    6e28:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    6e2a:	8e ef       	ldi	r24, 0xFE	; 254
    6e2c:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    6e2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6e30:	9c 85       	ldd	r25, Y+12	; 0x0c
    6e32:	8b 83       	std	Y+3, r24	; 0x03
    6e34:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    6e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e3a:	8d 83       	std	Y+5, r24	; 0x05
    6e3c:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    6e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6e40:	98 89       	ldd	r25, Y+16	; 0x10
    6e42:	a9 89       	ldd	r26, Y+17	; 0x11
    6e44:	ba 89       	ldd	r27, Y+18	; 0x12
    6e46:	8f 83       	std	Y+7, r24	; 0x07
    6e48:	98 87       	std	Y+8, r25	; 0x08
    6e4a:	a9 87       	std	Y+9, r26	; 0x09
    6e4c:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    6e4e:	80 91 30 2d 	lds	r24, 0x2D30	; 0x802d30 <xTimerQueue>
    6e52:	90 91 31 2d 	lds	r25, 0x2D31	; 0x802d31 <xTimerQueue+0x1>
    6e56:	4b 89       	ldd	r20, Y+19	; 0x13
    6e58:	5c 89       	ldd	r21, Y+20	; 0x14
    6e5a:	be 01       	movw	r22, r28
    6e5c:	6e 5f       	subi	r22, 0xFE	; 254
    6e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    6e60:	20 e0       	ldi	r18, 0x00	; 0
    6e62:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <xQueueGenericSendFromISR>
    6e66:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    6e68:	89 81       	ldd	r24, Y+1	; 0x01
	}
    6e6a:	64 96       	adiw	r28, 0x14	; 20
    6e6c:	cd bf       	out	0x3d, r28	; 61
    6e6e:	de bf       	out	0x3e, r29	; 62
    6e70:	df 91       	pop	r29
    6e72:	cf 91       	pop	r28
    6e74:	1f 91       	pop	r17
    6e76:	0f 91       	pop	r16
    6e78:	08 95       	ret

00006e7a <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    6e7a:	cf 93       	push	r28
    6e7c:	df 93       	push	r29
    6e7e:	cd b7       	in	r28, 0x3d	; 61
    6e80:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    6e82:	80 e5       	ldi	r24, 0x50	; 80
    6e84:	90 e0       	ldi	r25, 0x00	; 0
    6e86:	20 e5       	ldi	r18, 0x50	; 80
    6e88:	30 e0       	ldi	r19, 0x00	; 0
    6e8a:	f9 01       	movw	r30, r18
    6e8c:	20 81       	ld	r18, Z
    6e8e:	21 60       	ori	r18, 0x01	; 1
    6e90:	fc 01       	movw	r30, r24
    6e92:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    6e94:	80 e5       	ldi	r24, 0x50	; 80
    6e96:	90 e0       	ldi	r25, 0x00	; 0
    6e98:	fc 01       	movw	r30, r24
    6e9a:	81 81       	ldd	r24, Z+1	; 0x01
    6e9c:	88 2f       	mov	r24, r24
    6e9e:	90 e0       	ldi	r25, 0x00	; 0
    6ea0:	81 70       	andi	r24, 0x01	; 1
    6ea2:	99 27       	eor	r25, r25
    6ea4:	89 2b       	or	r24, r25
    6ea6:	b1 f3       	breq	.-20     	; 0x6e94 <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    6ea8:	80 e0       	ldi	r24, 0x00	; 0
    6eaa:	0e 94 2b 1b 	call	0x3656	; 0x3656 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    6eae:	8e e1       	ldi	r24, 0x1E	; 30
    6eb0:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    6eb4:	60 e0       	ldi	r22, 0x00	; 0
    6eb6:	80 e0       	ldi	r24, 0x00	; 0
    6eb8:	0e 94 14 1b 	call	0x3628	; 0x3628 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    6ebc:	43 e0       	ldi	r20, 0x03	; 3
    6ebe:	60 e0       	ldi	r22, 0x00	; 0
    6ec0:	80 e4       	ldi	r24, 0x40	; 64
    6ec2:	0e 94 bf 1a 	call	0x357e	; 0x357e <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    6ec6:	80 e5       	ldi	r24, 0x50	; 80
    6ec8:	90 e0       	ldi	r25, 0x00	; 0
    6eca:	20 e5       	ldi	r18, 0x50	; 80
    6ecc:	30 e0       	ldi	r19, 0x00	; 0
    6ece:	f9 01       	movw	r30, r18
    6ed0:	20 81       	ld	r18, Z
    6ed2:	28 60       	ori	r18, 0x08	; 8
    6ed4:	fc 01       	movw	r30, r24
    6ed6:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    6ed8:	80 e5       	ldi	r24, 0x50	; 80
    6eda:	90 e0       	ldi	r25, 0x00	; 0
    6edc:	fc 01       	movw	r30, r24
    6ede:	81 81       	ldd	r24, Z+1	; 0x01
    6ee0:	88 2f       	mov	r24, r24
    6ee2:	90 e0       	ldi	r25, 0x00	; 0
    6ee4:	88 70       	andi	r24, 0x08	; 8
    6ee6:	99 27       	eor	r25, r25
    6ee8:	89 2b       	or	r24, r25
    6eea:	b1 f3       	breq	.-20     	; 0x6ed8 <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    6eec:	64 e0       	ldi	r22, 0x04	; 4
    6eee:	80 ec       	ldi	r24, 0xC0	; 192
    6ef0:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    6ef4:	80 e5       	ldi	r24, 0x50	; 80
    6ef6:	90 e0       	ldi	r25, 0x00	; 0
    6ef8:	20 e5       	ldi	r18, 0x50	; 80
    6efa:	30 e0       	ldi	r19, 0x00	; 0
    6efc:	f9 01       	movw	r30, r18
    6efe:	20 81       	ld	r18, Z
    6f00:	20 61       	ori	r18, 0x10	; 16
    6f02:	fc 01       	movw	r30, r24
    6f04:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    6f06:	60 e0       	ldi	r22, 0x00	; 0
    6f08:	80 e0       	ldi	r24, 0x00	; 0
    6f0a:	0e 94 14 1b 	call	0x3628	; 0x3628 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    6f0e:	80 e5       	ldi	r24, 0x50	; 80
    6f10:	90 e0       	ldi	r25, 0x00	; 0
    6f12:	fc 01       	movw	r30, r24
    6f14:	81 81       	ldd	r24, Z+1	; 0x01
    6f16:	88 2f       	mov	r24, r24
    6f18:	90 e0       	ldi	r25, 0x00	; 0
    6f1a:	80 71       	andi	r24, 0x10	; 16
    6f1c:	99 27       	eor	r25, r25
    6f1e:	89 2b       	or	r24, r25
    6f20:	b1 f3       	breq	.-20     	; 0x6f0e <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    6f22:	84 e0       	ldi	r24, 0x04	; 4
    6f24:	0e 94 2b 1b 	call	0x3656	; 0x3656 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    6f28:	87 e0       	ldi	r24, 0x07	; 7
    6f2a:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <CLKSYS_Disable>
    6f2e:	00 00       	nop
    6f30:	df 91       	pop	r29
    6f32:	cf 91       	pop	r28
    6f34:	08 95       	ret

00006f36 <vApplicationIdleHook>:
long i;
long Timems;


void vApplicationIdleHook( void )
{	
    6f36:	cf 93       	push	r28
    6f38:	df 93       	push	r29
    6f3a:	cd b7       	in	r28, 0x3d	; 61
    6f3c:	de b7       	in	r29, 0x3e	; 62
	
}
    6f3e:	00 00       	nop
    6f40:	df 91       	pop	r29
    6f42:	cf 91       	pop	r28
    6f44:	08 95       	ret

00006f46 <main>:

int main(void)
{
    6f46:	ef 92       	push	r14
    6f48:	ff 92       	push	r15
    6f4a:	0f 93       	push	r16
    6f4c:	cf 93       	push	r28
    6f4e:	df 93       	push	r29
    6f50:	cd b7       	in	r28, 0x3d	; 61
    6f52:	de b7       	in	r29, 0x3e	; 62
	vInitClock();
    6f54:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <vInitClock>
	vInitDisplay();
    6f58:	0e 94 c5 3c 	call	0x798a	; 0x798a <vInitDisplay>
	egPiStates = xEventGroupCreate();
    6f5c:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <xEventGroupCreate>
    6f60:	80 93 6d 2d 	sts	0x2D6D, r24	; 0x802d6d <egPiStates>
    6f64:	90 93 6e 2d 	sts	0x2D6E, r25	; 0x802d6e <egPiStates+0x1>
	
	xTaskCreate( vButton, (const char *) "Button", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    6f68:	e1 2c       	mov	r14, r1
    6f6a:	f1 2c       	mov	r15, r1
    6f6c:	03 e0       	ldi	r16, 0x03	; 3
    6f6e:	20 e0       	ldi	r18, 0x00	; 0
    6f70:	30 e0       	ldi	r19, 0x00	; 0
    6f72:	48 ec       	ldi	r20, 0xC8	; 200
    6f74:	50 e0       	ldi	r21, 0x00	; 0
    6f76:	6d e0       	ldi	r22, 0x0D	; 13
    6f78:	70 e2       	ldi	r23, 0x20	; 32
    6f7a:	88 e2       	ldi	r24, 0x28	; 40
    6f7c:	99 e3       	ldi	r25, 0x39	; 57
    6f7e:	0e 94 78 29 	call	0x52f0	; 0x52f0 <xTaskCreate>
	xTaskCreate( vGUI, (const char *) "GUITask", configMINIMAL_STACK_SIZE+400, NULL, 2, NULL);
    6f82:	e1 2c       	mov	r14, r1
    6f84:	f1 2c       	mov	r15, r1
    6f86:	02 e0       	ldi	r16, 0x02	; 2
    6f88:	20 e0       	ldi	r18, 0x00	; 0
    6f8a:	30 e0       	ldi	r19, 0x00	; 0
    6f8c:	48 e5       	ldi	r20, 0x58	; 88
    6f8e:	52 e0       	ldi	r21, 0x02	; 2
    6f90:	64 e1       	ldi	r22, 0x14	; 20
    6f92:	70 e2       	ldi	r23, 0x20	; 32
    6f94:	8a ee       	ldi	r24, 0xEA	; 234
    6f96:	97 e3       	ldi	r25, 0x37	; 55
    6f98:	0e 94 78 29 	call	0x52f0	; 0x52f0 <xTaskCreate>
	xTaskCreate( vCalc, (const char *) "Calc", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    6f9c:	e1 2c       	mov	r14, r1
    6f9e:	f1 2c       	mov	r15, r1
    6fa0:	01 e0       	ldi	r16, 0x01	; 1
    6fa2:	20 e0       	ldi	r18, 0x00	; 0
    6fa4:	30 e0       	ldi	r19, 0x00	; 0
    6fa6:	48 ec       	ldi	r20, 0xC8	; 200
    6fa8:	50 e0       	ldi	r21, 0x00	; 0
    6faa:	6c e1       	ldi	r22, 0x1C	; 28
    6fac:	70 e2       	ldi	r23, 0x20	; 32
    6fae:	84 e7       	ldi	r24, 0x74	; 116
    6fb0:	99 e3       	ldi	r25, 0x39	; 57
    6fb2:	0e 94 78 29 	call	0x52f0	; 0x52f0 <xTaskCreate>

	PORTF.DIRSET = PIN0_bm;						//LED1
    6fb6:	80 ea       	ldi	r24, 0xA0	; 160
    6fb8:	96 e0       	ldi	r25, 0x06	; 6
    6fba:	21 e0       	ldi	r18, 0x01	; 1
    6fbc:	fc 01       	movw	r30, r24
    6fbe:	21 83       	std	Z+1, r18	; 0x01
	
	vTaskStartScheduler();
    6fc0:	0e 94 79 2b 	call	0x56f2	; 0x56f2 <vTaskStartScheduler>
	return 0;
    6fc4:	80 e0       	ldi	r24, 0x00	; 0
    6fc6:	90 e0       	ldi	r25, 0x00	; 0
}
    6fc8:	df 91       	pop	r29
    6fca:	cf 91       	pop	r28
    6fcc:	0f 91       	pop	r16
    6fce:	ff 90       	pop	r15
    6fd0:	ef 90       	pop	r14
    6fd2:	08 95       	ret

00006fd4 <vGUI>:

void vGUI(void *pvParameters) {
    6fd4:	6f 92       	push	r6
    6fd6:	7f 92       	push	r7
    6fd8:	8f 92       	push	r8
    6fda:	9f 92       	push	r9
    6fdc:	af 92       	push	r10
    6fde:	bf 92       	push	r11
    6fe0:	cf 92       	push	r12
    6fe2:	df 92       	push	r13
    6fe4:	ef 92       	push	r14
    6fe6:	ff 92       	push	r15
    6fe8:	0f 93       	push	r16
    6fea:	1f 93       	push	r17
    6fec:	cf 93       	push	r28
    6fee:	df 93       	push	r29
    6ff0:	cd b7       	in	r28, 0x3d	; 61
    6ff2:	de b7       	in	r29, 0x3e	; 62
    6ff4:	a7 97       	sbiw	r28, 0x27	; 39
    6ff6:	cd bf       	out	0x3d, r28	; 61
    6ff8:	de bf       	out	0x3e, r29	; 62
    6ffa:	8e a3       	std	Y+38, r24	; 0x26
    6ffc:	9f a3       	std	Y+39, r25	; 0x27
	char Pi[15] = "";			
    6ffe:	1b 82       	std	Y+3, r1	; 0x03
    7000:	1c 82       	std	Y+4, r1	; 0x04
    7002:	2d e0       	ldi	r18, 0x0D	; 13
    7004:	ce 01       	movw	r24, r28
    7006:	05 96       	adiw	r24, 0x05	; 5
    7008:	fc 01       	movw	r30, r24
    700a:	32 2f       	mov	r19, r18
    700c:	11 92       	st	Z+, r1
    700e:	3a 95       	dec	r19
    7010:	e9 f7       	brne	.-6      	; 0x700c <vGUI+0x38>
	char Iter[15] = "";
    7012:	1a 8a       	std	Y+18, r1	; 0x12
    7014:	1b 8a       	std	Y+19, r1	; 0x13
    7016:	2d e0       	ldi	r18, 0x0D	; 13
    7018:	ce 01       	movw	r24, r28
    701a:	44 96       	adiw	r24, 0x14	; 20
    701c:	fc 01       	movw	r30, r24
    701e:	32 2f       	mov	r19, r18
    7020:	11 92       	st	Z+, r1
    7022:	3a 95       	dec	r19
    7024:	e9 f7       	brne	.-6      	; 0x7020 <vGUI+0x4c>
	char sTime[5] = "";
    7026:	19 a2       	std	Y+33, r1	; 0x21
    7028:	1a a2       	std	Y+34, r1	; 0x22
    702a:	23 e0       	ldi	r18, 0x03	; 3
    702c:	ce 01       	movw	r24, r28
    702e:	83 96       	adiw	r24, 0x23	; 35
    7030:	fc 01       	movw	r30, r24
    7032:	32 2f       	mov	r19, r18
    7034:	11 92       	st	Z+, r1
    7036:	3a 95       	dec	r19
    7038:	e9 f7       	brne	.-6      	; 0x7034 <vGUI+0x60>
	for(;;) {
		
		xEventGroupClearBits(egPiStates, FINISHCALC);
    703a:	80 91 6d 2d 	lds	r24, 0x2D6D	; 0x802d6d <egPiStates>
    703e:	90 91 6e 2d 	lds	r25, 0x2D6E	; 0x802d6e <egPiStates+0x1>
    7042:	48 e0       	ldi	r20, 0x08	; 8
    7044:	50 e0       	ldi	r21, 0x00	; 0
    7046:	60 e0       	ldi	r22, 0x00	; 0
    7048:	70 e0       	ldi	r23, 0x00	; 0
    704a:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <xEventGroupClearBits>
		if (dPi4 != 1) {
    704e:	a0 90 65 2d 	lds	r10, 0x2D65	; 0x802d65 <dPi4>
    7052:	b0 90 66 2d 	lds	r11, 0x2D66	; 0x802d66 <dPi4+0x1>
    7056:	c0 90 67 2d 	lds	r12, 0x2D67	; 0x802d67 <dPi4+0x2>
    705a:	d0 90 68 2d 	lds	r13, 0x2D68	; 0x802d68 <dPi4+0x3>
    705e:	e0 90 69 2d 	lds	r14, 0x2D69	; 0x802d69 <dPi4+0x4>
    7062:	f0 90 6a 2d 	lds	r15, 0x2D6A	; 0x802d6a <dPi4+0x5>
    7066:	00 91 6b 2d 	lds	r16, 0x2D6B	; 0x802d6b <dPi4+0x6>
    706a:	10 91 6c 2d 	lds	r17, 0x2D6C	; 0x802d6c <dPi4+0x7>
    706e:	2a 2d       	mov	r18, r10
    7070:	3b 2d       	mov	r19, r11
    7072:	4c 2d       	mov	r20, r12
    7074:	5d 2d       	mov	r21, r13
    7076:	6e 2d       	mov	r22, r14
    7078:	7f 2d       	mov	r23, r15
    707a:	80 2f       	mov	r24, r16
    707c:	91 2f       	mov	r25, r17
    707e:	a1 e0       	ldi	r26, 0x01	; 1
    7080:	0e 94 cb 4b 	call	0x9796	; 0x9796 <__cmpdi2_s8>
    7084:	49 f1       	breq	.+82     	; 0x70d8 <vGUI+0x104>
			char* stempResult = f_to_string(dPi4, 10, 10);
    7086:	60 90 65 2d 	lds	r6, 0x2D65	; 0x802d65 <dPi4>
    708a:	70 90 66 2d 	lds	r7, 0x2D66	; 0x802d66 <dPi4+0x1>
    708e:	80 90 67 2d 	lds	r8, 0x2D67	; 0x802d67 <dPi4+0x2>
    7092:	90 90 68 2d 	lds	r9, 0x2D68	; 0x802d68 <dPi4+0x3>
    7096:	a0 90 69 2d 	lds	r10, 0x2D69	; 0x802d69 <dPi4+0x4>
    709a:	b0 90 6a 2d 	lds	r11, 0x2D6A	; 0x802d6a <dPi4+0x5>
    709e:	c0 90 6b 2d 	lds	r12, 0x2D6B	; 0x802d6b <dPi4+0x6>
    70a2:	d0 90 6c 2d 	lds	r13, 0x2D6C	; 0x802d6c <dPi4+0x7>
    70a6:	0f 2e       	mov	r0, r31
    70a8:	fa e0       	ldi	r31, 0x0A	; 10
    70aa:	ef 2e       	mov	r14, r31
    70ac:	f0 2d       	mov	r31, r0
    70ae:	0a e0       	ldi	r16, 0x0A	; 10
    70b0:	26 2d       	mov	r18, r6
    70b2:	37 2d       	mov	r19, r7
    70b4:	48 2d       	mov	r20, r8
    70b6:	59 2d       	mov	r21, r9
    70b8:	6a 2d       	mov	r22, r10
    70ba:	7b 2d       	mov	r23, r11
    70bc:	8c 2d       	mov	r24, r12
    70be:	9d 2d       	mov	r25, r13
    70c0:	0e 94 98 15 	call	0x2b30	; 0x2b30 <f_to_string>
    70c4:	89 83       	std	Y+1, r24	; 0x01
    70c6:	9a 83       	std	Y+2, r25	; 0x02
			sprintf(Pi, "%s", stempResult);	
    70c8:	29 81       	ldd	r18, Y+1	; 0x01
    70ca:	3a 81       	ldd	r19, Y+2	; 0x02
    70cc:	ce 01       	movw	r24, r28
    70ce:	03 96       	adiw	r24, 0x03	; 3
    70d0:	b9 01       	movw	r22, r18
    70d2:	0e 94 d9 4c 	call	0x99b2	; 0x99b2 <strcpy>
    70d6:	0a c0       	rjmp	.+20     	; 0x70ec <vGUI+0x118>
		}
		else {
			sprintf(Pi, "press start");
    70d8:	ce 01       	movw	r24, r28
    70da:	03 96       	adiw	r24, 0x03	; 3
    70dc:	2c e0       	ldi	r18, 0x0C	; 12
    70de:	e1 e2       	ldi	r30, 0x21	; 33
    70e0:	f0 e2       	ldi	r31, 0x20	; 32
    70e2:	dc 01       	movw	r26, r24
    70e4:	01 90       	ld	r0, Z+
    70e6:	0d 92       	st	X+, r0
    70e8:	2a 95       	dec	r18
    70ea:	e1 f7       	brne	.-8      	; 0x70e4 <vGUI+0x110>
		}
		sprintf(Iter, "%ld", i);
    70ec:	80 91 6f 2d 	lds	r24, 0x2D6F	; 0x802d6f <i>
    70f0:	90 91 70 2d 	lds	r25, 0x2D70	; 0x802d70 <i+0x1>
    70f4:	a0 91 71 2d 	lds	r26, 0x2D71	; 0x802d71 <i+0x2>
    70f8:	b0 91 72 2d 	lds	r27, 0x2D72	; 0x802d72 <i+0x3>
    70fc:	2b 2f       	mov	r18, r27
    70fe:	2f 93       	push	r18
    7100:	2a 2f       	mov	r18, r26
    7102:	2f 93       	push	r18
    7104:	29 2f       	mov	r18, r25
    7106:	2f 93       	push	r18
    7108:	8f 93       	push	r24
    710a:	8d e2       	ldi	r24, 0x2D	; 45
    710c:	90 e2       	ldi	r25, 0x20	; 32
    710e:	89 2f       	mov	r24, r25
    7110:	8f 93       	push	r24
    7112:	8d e2       	ldi	r24, 0x2D	; 45
    7114:	90 e2       	ldi	r25, 0x20	; 32
    7116:	8f 93       	push	r24
    7118:	ce 01       	movw	r24, r28
    711a:	42 96       	adiw	r24, 0x12	; 18
    711c:	29 2f       	mov	r18, r25
    711e:	2f 93       	push	r18
    7120:	8f 93       	push	r24
    7122:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <sprintf>
    7126:	8d b7       	in	r24, 0x3d	; 61
    7128:	9e b7       	in	r25, 0x3e	; 62
    712a:	08 96       	adiw	r24, 0x08	; 8
    712c:	cd bf       	out	0x3d, r28	; 61
    712e:	de bf       	out	0x3e, r29	; 62
		sprintf(sTime, "%ld", Timems);
    7130:	80 91 73 2d 	lds	r24, 0x2D73	; 0x802d73 <Timems>
    7134:	90 91 74 2d 	lds	r25, 0x2D74	; 0x802d74 <Timems+0x1>
    7138:	a0 91 75 2d 	lds	r26, 0x2D75	; 0x802d75 <Timems+0x2>
    713c:	b0 91 76 2d 	lds	r27, 0x2D76	; 0x802d76 <Timems+0x3>
    7140:	2b 2f       	mov	r18, r27
    7142:	2f 93       	push	r18
    7144:	2a 2f       	mov	r18, r26
    7146:	2f 93       	push	r18
    7148:	29 2f       	mov	r18, r25
    714a:	2f 93       	push	r18
    714c:	8f 93       	push	r24
    714e:	8d e2       	ldi	r24, 0x2D	; 45
    7150:	90 e2       	ldi	r25, 0x20	; 32
    7152:	89 2f       	mov	r24, r25
    7154:	8f 93       	push	r24
    7156:	8d e2       	ldi	r24, 0x2D	; 45
    7158:	90 e2       	ldi	r25, 0x20	; 32
    715a:	8f 93       	push	r24
    715c:	ce 01       	movw	r24, r28
    715e:	81 96       	adiw	r24, 0x21	; 33
    7160:	29 2f       	mov	r18, r25
    7162:	2f 93       	push	r18
    7164:	8f 93       	push	r24
    7166:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <sprintf>
    716a:	ed b7       	in	r30, 0x3d	; 61
    716c:	fe b7       	in	r31, 0x3e	; 62
    716e:	38 96       	adiw	r30, 0x08	; 8
    7170:	cd bf       	out	0x3d, r28	; 61
    7172:	de bf       	out	0x3e, r29	; 62
		vDisplayClear();
    7174:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <vDisplayClear>
		vDisplayWriteStringAtPos(0,0,"PI Calculator");
    7178:	81 e3       	ldi	r24, 0x31	; 49
    717a:	90 e2       	ldi	r25, 0x20	; 32
    717c:	89 2f       	mov	r24, r25
    717e:	8f 93       	push	r24
    7180:	81 e3       	ldi	r24, 0x31	; 49
    7182:	90 e2       	ldi	r25, 0x20	; 32
    7184:	8f 93       	push	r24
    7186:	1f 92       	push	r1
    7188:	1f 92       	push	r1
    718a:	1f 92       	push	r1
    718c:	1f 92       	push	r1
    718e:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <vDisplayWriteStringAtPos>
    7192:	0f 90       	pop	r0
    7194:	0f 90       	pop	r0
    7196:	0f 90       	pop	r0
    7198:	0f 90       	pop	r0
    719a:	0f 90       	pop	r0
    719c:	0f 90       	pop	r0
		vDisplayWriteStringAtPos(1,0,"%s", Iter);
    719e:	ce 01       	movw	r24, r28
    71a0:	42 96       	adiw	r24, 0x12	; 18
    71a2:	29 2f       	mov	r18, r25
    71a4:	2f 93       	push	r18
    71a6:	8f 93       	push	r24
    71a8:	8f e3       	ldi	r24, 0x3F	; 63
    71aa:	90 e2       	ldi	r25, 0x20	; 32
    71ac:	89 2f       	mov	r24, r25
    71ae:	8f 93       	push	r24
    71b0:	8f e3       	ldi	r24, 0x3F	; 63
    71b2:	90 e2       	ldi	r25, 0x20	; 32
    71b4:	8f 93       	push	r24
    71b6:	1f 92       	push	r1
    71b8:	1f 92       	push	r1
    71ba:	1f 92       	push	r1
    71bc:	81 e0       	ldi	r24, 0x01	; 1
    71be:	8f 93       	push	r24
    71c0:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <vDisplayWriteStringAtPos>
    71c4:	8d b7       	in	r24, 0x3d	; 61
    71c6:	9e b7       	in	r25, 0x3e	; 62
    71c8:	08 96       	adiw	r24, 0x08	; 8
    71ca:	cd bf       	out	0x3d, r28	; 61
    71cc:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(2,0,"Pi: %s", Pi);
    71ce:	ce 01       	movw	r24, r28
    71d0:	03 96       	adiw	r24, 0x03	; 3
    71d2:	29 2f       	mov	r18, r25
    71d4:	2f 93       	push	r18
    71d6:	8f 93       	push	r24
    71d8:	82 e4       	ldi	r24, 0x42	; 66
    71da:	90 e2       	ldi	r25, 0x20	; 32
    71dc:	89 2f       	mov	r24, r25
    71de:	8f 93       	push	r24
    71e0:	82 e4       	ldi	r24, 0x42	; 66
    71e2:	90 e2       	ldi	r25, 0x20	; 32
    71e4:	8f 93       	push	r24
    71e6:	1f 92       	push	r1
    71e8:	1f 92       	push	r1
    71ea:	1f 92       	push	r1
    71ec:	82 e0       	ldi	r24, 0x02	; 2
    71ee:	8f 93       	push	r24
    71f0:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <vDisplayWriteStringAtPos>
    71f4:	ed b7       	in	r30, 0x3d	; 61
    71f6:	fe b7       	in	r31, 0x3e	; 62
    71f8:	38 96       	adiw	r30, 0x08	; 8
    71fa:	cd bf       	out	0x3d, r28	; 61
    71fc:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(3,0,"Zeit: %s ms",sTime);
    71fe:	ce 01       	movw	r24, r28
    7200:	81 96       	adiw	r24, 0x21	; 33
    7202:	29 2f       	mov	r18, r25
    7204:	2f 93       	push	r18
    7206:	8f 93       	push	r24
    7208:	89 e4       	ldi	r24, 0x49	; 73
    720a:	90 e2       	ldi	r25, 0x20	; 32
    720c:	89 2f       	mov	r24, r25
    720e:	8f 93       	push	r24
    7210:	89 e4       	ldi	r24, 0x49	; 73
    7212:	90 e2       	ldi	r25, 0x20	; 32
    7214:	8f 93       	push	r24
    7216:	1f 92       	push	r1
    7218:	1f 92       	push	r1
    721a:	1f 92       	push	r1
    721c:	83 e0       	ldi	r24, 0x03	; 3
    721e:	8f 93       	push	r24
    7220:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <vDisplayWriteStringAtPos>
    7224:	8d b7       	in	r24, 0x3d	; 61
    7226:	9e b7       	in	r25, 0x3e	; 62
    7228:	08 96       	adiw	r24, 0x08	; 8
    722a:	cd bf       	out	0x3d, r28	; 61
    722c:	de bf       	out	0x3e, r29	; 62
		xEventGroupSetBits(egPiStates, FINISHCALC);
    722e:	80 91 6d 2d 	lds	r24, 0x2D6D	; 0x802d6d <egPiStates>
    7232:	90 91 6e 2d 	lds	r25, 0x2D6E	; 0x802d6e <egPiStates+0x1>
    7236:	48 e0       	ldi	r20, 0x08	; 8
    7238:	50 e0       	ldi	r21, 0x00	; 0
    723a:	60 e0       	ldi	r22, 0x00	; 0
    723c:	70 e0       	ldi	r23, 0x00	; 0
    723e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <xEventGroupSetBits>
		
		vTaskDelay(500 / portTICK_RATE_MS);
    7242:	64 ef       	ldi	r22, 0xF4	; 244
    7244:	71 e0       	ldi	r23, 0x01	; 1
    7246:	80 e0       	ldi	r24, 0x00	; 0
    7248:	90 e0       	ldi	r25, 0x00	; 0
    724a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <vTaskDelay>
	}
    724e:	f5 ce       	rjmp	.-534    	; 0x703a <vGUI+0x66>

00007250 <vButton>:
}

void vButton(void *pvParameters) {
    7250:	cf 93       	push	r28
    7252:	df 93       	push	r29
    7254:	1f 92       	push	r1
    7256:	1f 92       	push	r1
    7258:	cd b7       	in	r28, 0x3d	; 61
    725a:	de b7       	in	r29, 0x3e	; 62
    725c:	89 83       	std	Y+1, r24	; 0x01
    725e:	9a 83       	std	Y+2, r25	; 0x02
	initButtons();
    7260:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <initButtons>
	
	while (1) {
		updateButtons();
    7264:	0e 94 78 19 	call	0x32f0	; 0x32f0 <updateButtons>
		if (getButtonPress(BUTTON1) == SHORT_PRESSED) {
    7268:	80 e0       	ldi	r24, 0x00	; 0
    726a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <getButtonPress>
    726e:	81 30       	cpi	r24, 0x01	; 1
    7270:	79 f4       	brne	.+30     	; 0x7290 <vButton+0x40>
			xEventGroupSetBits(egPiStates, STARTCALC);
    7272:	80 91 6d 2d 	lds	r24, 0x2D6D	; 0x802d6d <egPiStates>
    7276:	90 91 6e 2d 	lds	r25, 0x2D6E	; 0x802d6e <egPiStates+0x1>
    727a:	41 e0       	ldi	r20, 0x01	; 1
    727c:	50 e0       	ldi	r21, 0x00	; 0
    727e:	60 e0       	ldi	r22, 0x00	; 0
    7280:	70 e0       	ldi	r23, 0x00	; 0
    7282:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <xEventGroupSetBits>
			TCD0.CTRLA = TC_CLKSEL_DIV1_gc ;						// Timer starten
    7286:	80 e0       	ldi	r24, 0x00	; 0
    7288:	99 e0       	ldi	r25, 0x09	; 9
    728a:	21 e0       	ldi	r18, 0x01	; 1
    728c:	fc 01       	movw	r30, r24
    728e:	20 83       	st	Z, r18
		}

		if (getButtonPress(BUTTON2) == SHORT_PRESSED) {
    7290:	81 e0       	ldi	r24, 0x01	; 1
    7292:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <getButtonPress>
    7296:	81 30       	cpi	r24, 0x01	; 1
    7298:	71 f4       	brne	.+28     	; 0x72b6 <vButton+0x66>
			xEventGroupClearBits(egPiStates, STARTCALC);
    729a:	80 91 6d 2d 	lds	r24, 0x2D6D	; 0x802d6d <egPiStates>
    729e:	90 91 6e 2d 	lds	r25, 0x2D6E	; 0x802d6e <egPiStates+0x1>
    72a2:	41 e0       	ldi	r20, 0x01	; 1
    72a4:	50 e0       	ldi	r21, 0x00	; 0
    72a6:	60 e0       	ldi	r22, 0x00	; 0
    72a8:	70 e0       	ldi	r23, 0x00	; 0
    72aa:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <xEventGroupClearBits>
			TCD0.CTRLA = TC_CLKSEL_OFF_gc ;							// Timer stoppen
    72ae:	80 e0       	ldi	r24, 0x00	; 0
    72b0:	99 e0       	ldi	r25, 0x09	; 9
    72b2:	fc 01       	movw	r30, r24
    72b4:	10 82       	st	Z, r1
		}
		
		if (getButtonPress(BUTTON3) == SHORT_PRESSED) {
    72b6:	82 e0       	ldi	r24, 0x02	; 2
    72b8:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <getButtonPress>
    72bc:	81 30       	cpi	r24, 0x01	; 1
    72be:	51 f4       	brne	.+20     	; 0x72d4 <vButton+0x84>
			xEventGroupSetBits(egPiStates, RESETCALC);
    72c0:	80 91 6d 2d 	lds	r24, 0x2D6D	; 0x802d6d <egPiStates>
    72c4:	90 91 6e 2d 	lds	r25, 0x2D6E	; 0x802d6e <egPiStates+0x1>
    72c8:	44 e0       	ldi	r20, 0x04	; 4
    72ca:	50 e0       	ldi	r21, 0x00	; 0
    72cc:	60 e0       	ldi	r22, 0x00	; 0
    72ce:	70 e0       	ldi	r23, 0x00	; 0
    72d0:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <xEventGroupSetBits>
		}		

		if (getButtonPress(BUTTON4) == SHORT_PRESSED) {
    72d4:	83 e0       	ldi	r24, 0x03	; 3
    72d6:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <getButtonPress>

		}

		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    72da:	6a e0       	ldi	r22, 0x0A	; 10
    72dc:	70 e0       	ldi	r23, 0x00	; 0
    72de:	80 e0       	ldi	r24, 0x00	; 0
    72e0:	90 e0       	ldi	r25, 0x00	; 0
    72e2:	0e 94 4b 2b 	call	0x5696	; 0x5696 <vTaskDelay>
	}
    72e6:	be cf       	rjmp	.-132    	; 0x7264 <vButton+0x14>

000072e8 <vCalc>:
}

void vCalc(void *pvParameters) {
    72e8:	af 92       	push	r10
    72ea:	bf 92       	push	r11
    72ec:	cf 92       	push	r12
    72ee:	df 92       	push	r13
    72f0:	ef 92       	push	r14
    72f2:	ff 92       	push	r15
    72f4:	0f 93       	push	r16
    72f6:	1f 93       	push	r17
    72f8:	cf 93       	push	r28
    72fa:	df 93       	push	r29
    72fc:	00 d0       	rcall	.+0      	; 0x72fe <vCalc+0x16>
    72fe:	1f 92       	push	r1
    7300:	cd b7       	in	r28, 0x3d	; 61
    7302:	de b7       	in	r29, 0x3e	; 62
    7304:	8b 83       	std	Y+3, r24	; 0x03
    7306:	9c 83       	std	Y+4, r25	; 0x04
	dPi4 = f_sd(1);
    7308:	60 e0       	ldi	r22, 0x00	; 0
    730a:	70 e0       	ldi	r23, 0x00	; 0
    730c:	80 e8       	ldi	r24, 0x80	; 128
    730e:	9f e3       	ldi	r25, 0x3F	; 63
    7310:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <f_sd>
    7314:	a2 2e       	mov	r10, r18
    7316:	b3 2e       	mov	r11, r19
    7318:	c4 2e       	mov	r12, r20
    731a:	d5 2e       	mov	r13, r21
    731c:	e6 2e       	mov	r14, r22
    731e:	f7 2e       	mov	r15, r23
    7320:	08 2f       	mov	r16, r24
    7322:	19 2f       	mov	r17, r25
    7324:	a0 92 65 2d 	sts	0x2D65, r10	; 0x802d65 <dPi4>
    7328:	b0 92 66 2d 	sts	0x2D66, r11	; 0x802d66 <dPi4+0x1>
    732c:	c0 92 67 2d 	sts	0x2D67, r12	; 0x802d67 <dPi4+0x2>
    7330:	d0 92 68 2d 	sts	0x2D68, r13	; 0x802d68 <dPi4+0x3>
    7334:	e0 92 69 2d 	sts	0x2D69, r14	; 0x802d69 <dPi4+0x4>
    7338:	f0 92 6a 2d 	sts	0x2D6A, r15	; 0x802d6a <dPi4+0x5>
    733c:	00 93 6b 2d 	sts	0x2D6B, r16	; 0x802d6b <dPi4+0x6>
    7340:	10 93 6c 2d 	sts	0x2D6C, r17	; 0x802d6c <dPi4+0x7>
	uint16_t calcstate = 0x0000;
    7344:	19 82       	std	Y+1, r1	; 0x01
    7346:	1a 82       	std	Y+2, r1	; 0x02
	i = 0;
    7348:	10 92 6f 2d 	sts	0x2D6F, r1	; 0x802d6f <i>
    734c:	10 92 70 2d 	sts	0x2D70, r1	; 0x802d70 <i+0x1>
    7350:	10 92 71 2d 	sts	0x2D71, r1	; 0x802d71 <i+0x2>
    7354:	10 92 72 2d 	sts	0x2D72, r1	; 0x802d72 <i+0x3>
	
	
	TCD0.CTRLA = TC_CLKSEL_OFF_gc ;
    7358:	80 e0       	ldi	r24, 0x00	; 0
    735a:	99 e0       	ldi	r25, 0x09	; 9
    735c:	fc 01       	movw	r30, r24
    735e:	10 82       	st	Z, r1
	TCD0.CTRLB = 0x00;
    7360:	80 e0       	ldi	r24, 0x00	; 0
    7362:	99 e0       	ldi	r25, 0x09	; 9
    7364:	fc 01       	movw	r30, r24
    7366:	11 82       	std	Z+1, r1	; 0x01
	TCD0.INTCTRLA = 0x03;
    7368:	80 e0       	ldi	r24, 0x00	; 0
    736a:	99 e0       	ldi	r25, 0x09	; 9
    736c:	23 e0       	ldi	r18, 0x03	; 3
    736e:	fc 01       	movw	r30, r24
    7370:	26 83       	std	Z+6, r18	; 0x06
	TCD0.PER = 32000-1;							// Zeit mit KO kontrollieren, allenfalls hier korrigieren
    7372:	80 e0       	ldi	r24, 0x00	; 0
    7374:	99 e0       	ldi	r25, 0x09	; 9
    7376:	2f ef       	ldi	r18, 0xFF	; 255
    7378:	3c e7       	ldi	r19, 0x7C	; 124
    737a:	fc 01       	movw	r30, r24
    737c:	26 a3       	std	Z+38, r18	; 0x26
    737e:	37 a3       	std	Z+39, r19	; 0x27
	
	for(;;) {
		
		calcstate = xEventGroupGetBits(egPiStates);
    7380:	80 91 6d 2d 	lds	r24, 0x2D6D	; 0x802d6d <egPiStates>
    7384:	90 91 6e 2d 	lds	r25, 0x2D6E	; 0x802d6e <egPiStates+0x1>
    7388:	40 e0       	ldi	r20, 0x00	; 0
    738a:	50 e0       	ldi	r21, 0x00	; 0
    738c:	ba 01       	movw	r22, r20
    738e:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <xEventGroupClearBits>
    7392:	dc 01       	movw	r26, r24
    7394:	cb 01       	movw	r24, r22
    7396:	89 83       	std	Y+1, r24	; 0x01
    7398:	9a 83       	std	Y+2, r25	; 0x02
		
		if (calcstate & FINISHCALC) {
    739a:	89 81       	ldd	r24, Y+1	; 0x01
    739c:	9a 81       	ldd	r25, Y+2	; 0x02
    739e:	88 70       	andi	r24, 0x08	; 8
    73a0:	99 27       	eor	r25, r25
    73a2:	89 2b       	or	r24, r25
    73a4:	09 f4       	brne	.+2      	; 0x73a8 <vCalc+0xc0>
    73a6:	e5 c0       	rjmp	.+458    	; 0x7572 <vCalc+0x28a>
			if (calcstate & STARTCALC) {
    73a8:	89 81       	ldd	r24, Y+1	; 0x01
    73aa:	9a 81       	ldd	r25, Y+2	; 0x02
    73ac:	81 70       	andi	r24, 0x01	; 1
    73ae:	99 27       	eor	r25, r25
    73b0:	89 2b       	or	r24, r25
    73b2:	09 f4       	brne	.+2      	; 0x73b6 <vCalc+0xce>
    73b4:	de c0       	rjmp	.+444    	; 0x7572 <vCalc+0x28a>
				dPi4 = dPi4 - (1.0/(3+4*i)) + (1.0/(5+4*i));
    73b6:	a0 90 65 2d 	lds	r10, 0x2D65	; 0x802d65 <dPi4>
    73ba:	b0 90 66 2d 	lds	r11, 0x2D66	; 0x802d66 <dPi4+0x1>
    73be:	c0 90 67 2d 	lds	r12, 0x2D67	; 0x802d67 <dPi4+0x2>
    73c2:	d0 90 68 2d 	lds	r13, 0x2D68	; 0x802d68 <dPi4+0x3>
    73c6:	e0 90 69 2d 	lds	r14, 0x2D69	; 0x802d69 <dPi4+0x4>
    73ca:	f0 90 6a 2d 	lds	r15, 0x2D6A	; 0x802d6a <dPi4+0x5>
    73ce:	00 91 6b 2d 	lds	r16, 0x2D6B	; 0x802d6b <dPi4+0x6>
    73d2:	10 91 6c 2d 	lds	r17, 0x2D6C	; 0x802d6c <dPi4+0x7>
    73d6:	2a 2d       	mov	r18, r10
    73d8:	3b 2d       	mov	r19, r11
    73da:	4c 2d       	mov	r20, r12
    73dc:	5d 2d       	mov	r21, r13
    73de:	6e 2d       	mov	r22, r14
    73e0:	7f 2d       	mov	r23, r15
    73e2:	80 2f       	mov	r24, r16
    73e4:	91 2f       	mov	r25, r17
    73e6:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__floatundisf>
    73ea:	6b 01       	movw	r12, r22
    73ec:	7c 01       	movw	r14, r24
    73ee:	80 91 6f 2d 	lds	r24, 0x2D6F	; 0x802d6f <i>
    73f2:	90 91 70 2d 	lds	r25, 0x2D70	; 0x802d70 <i+0x1>
    73f6:	a0 91 71 2d 	lds	r26, 0x2D71	; 0x802d71 <i+0x2>
    73fa:	b0 91 72 2d 	lds	r27, 0x2D72	; 0x802d72 <i+0x3>
    73fe:	88 0f       	add	r24, r24
    7400:	99 1f       	adc	r25, r25
    7402:	aa 1f       	adc	r26, r26
    7404:	bb 1f       	adc	r27, r27
    7406:	88 0f       	add	r24, r24
    7408:	99 1f       	adc	r25, r25
    740a:	aa 1f       	adc	r26, r26
    740c:	bb 1f       	adc	r27, r27
    740e:	03 96       	adiw	r24, 0x03	; 3
    7410:	a1 1d       	adc	r26, r1
    7412:	b1 1d       	adc	r27, r1
    7414:	bc 01       	movw	r22, r24
    7416:	cd 01       	movw	r24, r26
    7418:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <__floatsisf>
    741c:	dc 01       	movw	r26, r24
    741e:	cb 01       	movw	r24, r22
    7420:	9c 01       	movw	r18, r24
    7422:	ad 01       	movw	r20, r26
    7424:	60 e0       	ldi	r22, 0x00	; 0
    7426:	70 e0       	ldi	r23, 0x00	; 0
    7428:	80 e8       	ldi	r24, 0x80	; 128
    742a:	9f e3       	ldi	r25, 0x3F	; 63
    742c:	0e 94 ed 44 	call	0x89da	; 0x89da <__divsf3>
    7430:	dc 01       	movw	r26, r24
    7432:	cb 01       	movw	r24, r22
    7434:	9c 01       	movw	r18, r24
    7436:	ad 01       	movw	r20, r26
    7438:	c7 01       	movw	r24, r14
    743a:	b6 01       	movw	r22, r12
    743c:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <__subsf3>
    7440:	dc 01       	movw	r26, r24
    7442:	cb 01       	movw	r24, r22
    7444:	6c 01       	movw	r12, r24
    7446:	7d 01       	movw	r14, r26
    7448:	80 91 6f 2d 	lds	r24, 0x2D6F	; 0x802d6f <i>
    744c:	90 91 70 2d 	lds	r25, 0x2D70	; 0x802d70 <i+0x1>
    7450:	a0 91 71 2d 	lds	r26, 0x2D71	; 0x802d71 <i+0x2>
    7454:	b0 91 72 2d 	lds	r27, 0x2D72	; 0x802d72 <i+0x3>
    7458:	88 0f       	add	r24, r24
    745a:	99 1f       	adc	r25, r25
    745c:	aa 1f       	adc	r26, r26
    745e:	bb 1f       	adc	r27, r27
    7460:	88 0f       	add	r24, r24
    7462:	99 1f       	adc	r25, r25
    7464:	aa 1f       	adc	r26, r26
    7466:	bb 1f       	adc	r27, r27
    7468:	05 96       	adiw	r24, 0x05	; 5
    746a:	a1 1d       	adc	r26, r1
    746c:	b1 1d       	adc	r27, r1
    746e:	bc 01       	movw	r22, r24
    7470:	cd 01       	movw	r24, r26
    7472:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <__floatsisf>
    7476:	dc 01       	movw	r26, r24
    7478:	cb 01       	movw	r24, r22
    747a:	9c 01       	movw	r18, r24
    747c:	ad 01       	movw	r20, r26
    747e:	60 e0       	ldi	r22, 0x00	; 0
    7480:	70 e0       	ldi	r23, 0x00	; 0
    7482:	80 e8       	ldi	r24, 0x80	; 128
    7484:	9f e3       	ldi	r25, 0x3F	; 63
    7486:	0e 94 ed 44 	call	0x89da	; 0x89da <__divsf3>
    748a:	dc 01       	movw	r26, r24
    748c:	cb 01       	movw	r24, r22
    748e:	9c 01       	movw	r18, r24
    7490:	ad 01       	movw	r20, r26
    7492:	c7 01       	movw	r24, r14
    7494:	b6 01       	movw	r22, r12
    7496:	0e 94 7c 44 	call	0x88f8	; 0x88f8 <__addsf3>
    749a:	dc 01       	movw	r26, r24
    749c:	cb 01       	movw	r24, r22
    749e:	bc 01       	movw	r22, r24
    74a0:	cd 01       	movw	r24, r26
    74a2:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <__fixunssfdi>
    74a6:	a2 2e       	mov	r10, r18
    74a8:	b3 2e       	mov	r11, r19
    74aa:	c4 2e       	mov	r12, r20
    74ac:	d5 2e       	mov	r13, r21
    74ae:	e6 2e       	mov	r14, r22
    74b0:	f7 2e       	mov	r15, r23
    74b2:	08 2f       	mov	r16, r24
    74b4:	19 2f       	mov	r17, r25
    74b6:	a0 92 65 2d 	sts	0x2D65, r10	; 0x802d65 <dPi4>
    74ba:	b0 92 66 2d 	sts	0x2D66, r11	; 0x802d66 <dPi4+0x1>
    74be:	c0 92 67 2d 	sts	0x2D67, r12	; 0x802d67 <dPi4+0x2>
    74c2:	d0 92 68 2d 	sts	0x2D68, r13	; 0x802d68 <dPi4+0x3>
    74c6:	e0 92 69 2d 	sts	0x2D69, r14	; 0x802d69 <dPi4+0x4>
    74ca:	f0 92 6a 2d 	sts	0x2D6A, r15	; 0x802d6a <dPi4+0x5>
    74ce:	00 93 6b 2d 	sts	0x2D6B, r16	; 0x802d6b <dPi4+0x6>
    74d2:	10 93 6c 2d 	sts	0x2D6C, r17	; 0x802d6c <dPi4+0x7>
				dPi4 = 3.141578965423658;
    74d6:	83 e0       	ldi	r24, 0x03	; 3
    74d8:	80 93 65 2d 	sts	0x2D65, r24	; 0x802d65 <dPi4>
    74dc:	10 92 66 2d 	sts	0x2D66, r1	; 0x802d66 <dPi4+0x1>
    74e0:	10 92 67 2d 	sts	0x2D67, r1	; 0x802d67 <dPi4+0x2>
    74e4:	10 92 68 2d 	sts	0x2D68, r1	; 0x802d68 <dPi4+0x3>
    74e8:	10 92 69 2d 	sts	0x2D69, r1	; 0x802d69 <dPi4+0x4>
    74ec:	10 92 6a 2d 	sts	0x2D6A, r1	; 0x802d6a <dPi4+0x5>
    74f0:	10 92 6b 2d 	sts	0x2D6B, r1	; 0x802d6b <dPi4+0x6>
    74f4:	10 92 6c 2d 	sts	0x2D6C, r1	; 0x802d6c <dPi4+0x7>
				i++;
    74f8:	80 91 6f 2d 	lds	r24, 0x2D6F	; 0x802d6f <i>
    74fc:	90 91 70 2d 	lds	r25, 0x2D70	; 0x802d70 <i+0x1>
    7500:	a0 91 71 2d 	lds	r26, 0x2D71	; 0x802d71 <i+0x2>
    7504:	b0 91 72 2d 	lds	r27, 0x2D72	; 0x802d72 <i+0x3>
    7508:	01 96       	adiw	r24, 0x01	; 1
    750a:	a1 1d       	adc	r26, r1
    750c:	b1 1d       	adc	r27, r1
    750e:	80 93 6f 2d 	sts	0x2D6F, r24	; 0x802d6f <i>
    7512:	90 93 70 2d 	sts	0x2D70, r25	; 0x802d70 <i+0x1>
    7516:	a0 93 71 2d 	sts	0x2D71, r26	; 0x802d71 <i+0x2>
    751a:	b0 93 72 2d 	sts	0x2D72, r27	; 0x802d72 <i+0x3>
				if (dPi4 < 0.7854 ) {
    751e:	a0 90 65 2d 	lds	r10, 0x2D65	; 0x802d65 <dPi4>
    7522:	b0 90 66 2d 	lds	r11, 0x2D66	; 0x802d66 <dPi4+0x1>
    7526:	c0 90 67 2d 	lds	r12, 0x2D67	; 0x802d67 <dPi4+0x2>
    752a:	d0 90 68 2d 	lds	r13, 0x2D68	; 0x802d68 <dPi4+0x3>
    752e:	e0 90 69 2d 	lds	r14, 0x2D69	; 0x802d69 <dPi4+0x4>
    7532:	f0 90 6a 2d 	lds	r15, 0x2D6A	; 0x802d6a <dPi4+0x5>
    7536:	00 91 6b 2d 	lds	r16, 0x2D6B	; 0x802d6b <dPi4+0x6>
    753a:	10 91 6c 2d 	lds	r17, 0x2D6C	; 0x802d6c <dPi4+0x7>
    753e:	2a 2d       	mov	r18, r10
    7540:	3b 2d       	mov	r19, r11
    7542:	4c 2d       	mov	r20, r12
    7544:	5d 2d       	mov	r21, r13
    7546:	6e 2d       	mov	r22, r14
    7548:	7f 2d       	mov	r23, r15
    754a:	80 2f       	mov	r24, r16
    754c:	91 2f       	mov	r25, r17
    754e:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__floatundisf>
    7552:	dc 01       	movw	r26, r24
    7554:	cb 01       	movw	r24, r22
    7556:	29 ef       	ldi	r18, 0xF9	; 249
    7558:	3f e0       	ldi	r19, 0x0F	; 15
    755a:	49 e4       	ldi	r20, 0x49	; 73
    755c:	5f e3       	ldi	r21, 0x3F	; 63
    755e:	bc 01       	movw	r22, r24
    7560:	cd 01       	movw	r24, r26
    7562:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <__cmpsf2>
    7566:	88 23       	and	r24, r24
    7568:	24 f4       	brge	.+8      	; 0x7572 <vCalc+0x28a>
					TCD0.CTRLA = TC_CLKSEL_OFF_gc ;
    756a:	80 e0       	ldi	r24, 0x00	; 0
    756c:	99 e0       	ldi	r25, 0x09	; 9
    756e:	fc 01       	movw	r30, r24
    7570:	10 82       	st	Z, r1
				}
			}
		}

		if (calcstate & RESETCALC) {
    7572:	89 81       	ldd	r24, Y+1	; 0x01
    7574:	9a 81       	ldd	r25, Y+2	; 0x02
    7576:	84 70       	andi	r24, 0x04	; 4
    7578:	99 27       	eor	r25, r25
    757a:	89 2b       	or	r24, r25
    757c:	09 f4       	brne	.+2      	; 0x7580 <vCalc+0x298>
    757e:	00 cf       	rjmp	.-512    	; 0x7380 <vCalc+0x98>
			dPi4 = 1;
    7580:	81 e0       	ldi	r24, 0x01	; 1
    7582:	80 93 65 2d 	sts	0x2D65, r24	; 0x802d65 <dPi4>
    7586:	10 92 66 2d 	sts	0x2D66, r1	; 0x802d66 <dPi4+0x1>
    758a:	10 92 67 2d 	sts	0x2D67, r1	; 0x802d67 <dPi4+0x2>
    758e:	10 92 68 2d 	sts	0x2D68, r1	; 0x802d68 <dPi4+0x3>
    7592:	10 92 69 2d 	sts	0x2D69, r1	; 0x802d69 <dPi4+0x4>
    7596:	10 92 6a 2d 	sts	0x2D6A, r1	; 0x802d6a <dPi4+0x5>
    759a:	10 92 6b 2d 	sts	0x2D6B, r1	; 0x802d6b <dPi4+0x6>
    759e:	10 92 6c 2d 	sts	0x2D6C, r1	; 0x802d6c <dPi4+0x7>
			i = 0;
    75a2:	10 92 6f 2d 	sts	0x2D6F, r1	; 0x802d6f <i>
    75a6:	10 92 70 2d 	sts	0x2D70, r1	; 0x802d70 <i+0x1>
    75aa:	10 92 71 2d 	sts	0x2D71, r1	; 0x802d71 <i+0x2>
    75ae:	10 92 72 2d 	sts	0x2D72, r1	; 0x802d72 <i+0x3>
			Timems = 0;
    75b2:	10 92 73 2d 	sts	0x2D73, r1	; 0x802d73 <Timems>
    75b6:	10 92 74 2d 	sts	0x2D74, r1	; 0x802d74 <Timems+0x1>
    75ba:	10 92 75 2d 	sts	0x2D75, r1	; 0x802d75 <Timems+0x2>
    75be:	10 92 76 2d 	sts	0x2D76, r1	; 0x802d76 <Timems+0x3>
			xEventGroupClearBits(egPiStates, RESETCALC);
    75c2:	80 91 6d 2d 	lds	r24, 0x2D6D	; 0x802d6d <egPiStates>
    75c6:	90 91 6e 2d 	lds	r25, 0x2D6E	; 0x802d6e <egPiStates+0x1>
    75ca:	44 e0       	ldi	r20, 0x04	; 4
    75cc:	50 e0       	ldi	r21, 0x00	; 0
    75ce:	60 e0       	ldi	r22, 0x00	; 0
    75d0:	70 e0       	ldi	r23, 0x00	; 0
    75d2:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <xEventGroupClearBits>
			TCD0.CTRLA = TC_CLKSEL_DIV1_gc ;						// Timer starten
    75d6:	80 e0       	ldi	r24, 0x00	; 0
    75d8:	99 e0       	ldi	r25, 0x09	; 9
    75da:	21 e0       	ldi	r18, 0x01	; 1
    75dc:	fc 01       	movw	r30, r24
    75de:	20 83       	st	Z, r18
		}
	}
    75e0:	cf ce       	rjmp	.-610    	; 0x7380 <vCalc+0x98>

000075e2 <__vector_77>:
}
	

ISR(TCD0_OVF_vect)
{
    75e2:	1f 92       	push	r1
    75e4:	0f 92       	push	r0
    75e6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    75ea:	0f 92       	push	r0
    75ec:	11 24       	eor	r1, r1
    75ee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    75f2:	0f 92       	push	r0
    75f4:	2f 93       	push	r18
    75f6:	8f 93       	push	r24
    75f8:	9f 93       	push	r25
    75fa:	af 93       	push	r26
    75fc:	bf 93       	push	r27
    75fe:	ef 93       	push	r30
    7600:	ff 93       	push	r31
    7602:	cf 93       	push	r28
    7604:	df 93       	push	r29
    7606:	cd b7       	in	r28, 0x3d	; 61
    7608:	de b7       	in	r29, 0x3e	; 62
	Timems++;
    760a:	80 91 73 2d 	lds	r24, 0x2D73	; 0x802d73 <Timems>
    760e:	90 91 74 2d 	lds	r25, 0x2D74	; 0x802d74 <Timems+0x1>
    7612:	a0 91 75 2d 	lds	r26, 0x2D75	; 0x802d75 <Timems+0x2>
    7616:	b0 91 76 2d 	lds	r27, 0x2D76	; 0x802d76 <Timems+0x3>
    761a:	01 96       	adiw	r24, 0x01	; 1
    761c:	a1 1d       	adc	r26, r1
    761e:	b1 1d       	adc	r27, r1
    7620:	80 93 73 2d 	sts	0x2D73, r24	; 0x802d73 <Timems>
    7624:	90 93 74 2d 	sts	0x2D74, r25	; 0x802d74 <Timems+0x1>
    7628:	a0 93 75 2d 	sts	0x2D75, r26	; 0x802d75 <Timems+0x2>
    762c:	b0 93 76 2d 	sts	0x2D76, r27	; 0x802d76 <Timems+0x3>
	PORTF.OUTTGL = PIN0_bm;			//LED1
    7630:	80 ea       	ldi	r24, 0xA0	; 160
    7632:	96 e0       	ldi	r25, 0x06	; 6
    7634:	21 e0       	ldi	r18, 0x01	; 1
    7636:	fc 01       	movw	r30, r24
    7638:	27 83       	std	Z+7, r18	; 0x07
    763a:	00 00       	nop
    763c:	df 91       	pop	r29
    763e:	cf 91       	pop	r28
    7640:	ff 91       	pop	r31
    7642:	ef 91       	pop	r30
    7644:	bf 91       	pop	r27
    7646:	af 91       	pop	r26
    7648:	9f 91       	pop	r25
    764a:	8f 91       	pop	r24
    764c:	2f 91       	pop	r18
    764e:	0f 90       	pop	r0
    7650:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7654:	0f 90       	pop	r0
    7656:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    765a:	0f 90       	pop	r0
    765c:	1f 90       	pop	r1
    765e:	18 95       	reti

00007660 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    7660:	1f 92       	push	r1
    7662:	0f 92       	push	r0
    7664:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7668:	0f 92       	push	r0
    766a:	11 24       	eor	r1, r1
    766c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7670:	0f 92       	push	r0
    7672:	2f 93       	push	r18
    7674:	3f 93       	push	r19
    7676:	4f 93       	push	r20
    7678:	5f 93       	push	r21
    767a:	6f 93       	push	r22
    767c:	7f 93       	push	r23
    767e:	8f 93       	push	r24
    7680:	9f 93       	push	r25
    7682:	af 93       	push	r26
    7684:	bf 93       	push	r27
    7686:	ef 93       	push	r30
    7688:	ff 93       	push	r31
    768a:	cf 93       	push	r28
    768c:	df 93       	push	r29
    768e:	1f 92       	push	r1
    7690:	cd b7       	in	r28, 0x3d	; 61
    7692:	de b7       	in	r29, 0x3e	; 62
    7694:	19 82       	std	Y+1, r1	; 0x01
    7696:	80 91 79 2d 	lds	r24, 0x2D79	; 0x802d79 <egDisplayTiming>
    769a:	90 91 7a 2d 	lds	r25, 0x2D7A	; 0x802d7a <egDisplayTiming+0x1>
    769e:	9e 01       	movw	r18, r28
    76a0:	2f 5f       	subi	r18, 0xFF	; 255
    76a2:	3f 4f       	sbci	r19, 0xFF	; 255
    76a4:	41 e0       	ldi	r20, 0x01	; 1
    76a6:	50 e0       	ldi	r21, 0x00	; 0
    76a8:	60 e0       	ldi	r22, 0x00	; 0
    76aa:	70 e0       	ldi	r23, 0x00	; 0
    76ac:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <xEventGroupSetBitsFromISR>
    76b0:	60 e0       	ldi	r22, 0x00	; 0
    76b2:	80 e0       	ldi	r24, 0x00	; 0
    76b4:	9b e0       	ldi	r25, 0x0B	; 11
    76b6:	0e 94 4d 1b 	call	0x369a	; 0x369a <TC0_ConfigClockSource>
    76ba:	80 e0       	ldi	r24, 0x00	; 0
    76bc:	9b e0       	ldi	r25, 0x0B	; 11
    76be:	fc 01       	movw	r30, r24
    76c0:	16 82       	std	Z+6, r1	; 0x06
    76c2:	00 00       	nop
    76c4:	0f 90       	pop	r0
    76c6:	df 91       	pop	r29
    76c8:	cf 91       	pop	r28
    76ca:	ff 91       	pop	r31
    76cc:	ef 91       	pop	r30
    76ce:	bf 91       	pop	r27
    76d0:	af 91       	pop	r26
    76d2:	9f 91       	pop	r25
    76d4:	8f 91       	pop	r24
    76d6:	7f 91       	pop	r23
    76d8:	6f 91       	pop	r22
    76da:	5f 91       	pop	r21
    76dc:	4f 91       	pop	r20
    76de:	3f 91       	pop	r19
    76e0:	2f 91       	pop	r18
    76e2:	0f 90       	pop	r0
    76e4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    76e8:	0f 90       	pop	r0
    76ea:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    76ee:	0f 90       	pop	r0
    76f0:	1f 90       	pop	r1
    76f2:	18 95       	reti

000076f4 <delayUS>:
    76f4:	cf 92       	push	r12
    76f6:	df 92       	push	r13
    76f8:	ef 92       	push	r14
    76fa:	ff 92       	push	r15
    76fc:	0f 93       	push	r16
    76fe:	cf 93       	push	r28
    7700:	df 93       	push	r29
    7702:	00 d0       	rcall	.+0      	; 0x7704 <delayUS+0x10>
    7704:	1f 92       	push	r1
    7706:	cd b7       	in	r28, 0x3d	; 61
    7708:	de b7       	in	r29, 0x3e	; 62
    770a:	69 83       	std	Y+1, r22	; 0x01
    770c:	7a 83       	std	Y+2, r23	; 0x02
    770e:	8b 83       	std	Y+3, r24	; 0x03
    7710:	9c 83       	std	Y+4, r25	; 0x04
    7712:	89 81       	ldd	r24, Y+1	; 0x01
    7714:	9a 81       	ldd	r25, Y+2	; 0x02
    7716:	ab 81       	ldd	r26, Y+3	; 0x03
    7718:	bc 81       	ldd	r27, Y+4	; 0x04
    771a:	02 97       	sbiw	r24, 0x02	; 2
    771c:	a1 05       	cpc	r26, r1
    771e:	b1 05       	cpc	r27, r1
    7720:	40 f4       	brcc	.+16     	; 0x7732 <delayUS+0x3e>
    7722:	82 e0       	ldi	r24, 0x02	; 2
    7724:	90 e0       	ldi	r25, 0x00	; 0
    7726:	a0 e0       	ldi	r26, 0x00	; 0
    7728:	b0 e0       	ldi	r27, 0x00	; 0
    772a:	89 83       	std	Y+1, r24	; 0x01
    772c:	9a 83       	std	Y+2, r25	; 0x02
    772e:	ab 83       	std	Y+3, r26	; 0x03
    7730:	bc 83       	std	Y+4, r27	; 0x04
    7732:	80 e0       	ldi	r24, 0x00	; 0
    7734:	9b e0       	ldi	r25, 0x0B	; 11
    7736:	21 e0       	ldi	r18, 0x01	; 1
    7738:	fc 01       	movw	r30, r24
    773a:	26 83       	std	Z+6, r18	; 0x06
    773c:	80 e0       	ldi	r24, 0x00	; 0
    773e:	9b e0       	ldi	r25, 0x0B	; 11
    7740:	fc 01       	movw	r30, r24
    7742:	10 a2       	std	Z+32, r1	; 0x20
    7744:	11 a2       	std	Z+33, r1	; 0x21
    7746:	60 e0       	ldi	r22, 0x00	; 0
    7748:	80 e0       	ldi	r24, 0x00	; 0
    774a:	9b e0       	ldi	r25, 0x0B	; 11
    774c:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <TC0_ConfigWGM>
    7750:	89 81       	ldd	r24, Y+1	; 0x01
    7752:	9a 81       	ldd	r25, Y+2	; 0x02
    7754:	ab 81       	ldd	r26, Y+3	; 0x03
    7756:	bc 81       	ldd	r27, Y+4	; 0x04
    7758:	8e 3f       	cpi	r24, 0xFE	; 254
    775a:	9f 4f       	sbci	r25, 0xFF	; 255
    775c:	a1 05       	cpc	r26, r1
    775e:	b1 05       	cpc	r27, r1
    7760:	98 f4       	brcc	.+38     	; 0x7788 <delayUS+0x94>
    7762:	20 e0       	ldi	r18, 0x00	; 0
    7764:	3b e0       	ldi	r19, 0x0B	; 11
    7766:	89 81       	ldd	r24, Y+1	; 0x01
    7768:	9a 81       	ldd	r25, Y+2	; 0x02
    776a:	ab 81       	ldd	r26, Y+3	; 0x03
    776c:	bc 81       	ldd	r27, Y+4	; 0x04
    776e:	b6 95       	lsr	r27
    7770:	a7 95       	ror	r26
    7772:	97 95       	ror	r25
    7774:	87 95       	ror	r24
    7776:	f9 01       	movw	r30, r18
    7778:	86 a3       	std	Z+38, r24	; 0x26
    777a:	97 a3       	std	Z+39, r25	; 0x27
    777c:	65 e0       	ldi	r22, 0x05	; 5
    777e:	80 e0       	ldi	r24, 0x00	; 0
    7780:	9b e0       	ldi	r25, 0x0B	; 11
    7782:	0e 94 4d 1b 	call	0x369a	; 0x369a <TC0_ConfigClockSource>
    7786:	1f c0       	rjmp	.+62     	; 0x77c6 <delayUS+0xd2>
    7788:	89 81       	ldd	r24, Y+1	; 0x01
    778a:	9a 81       	ldd	r25, Y+2	; 0x02
    778c:	ab 81       	ldd	r26, Y+3	; 0x03
    778e:	bc 81       	ldd	r27, Y+4	; 0x04
    7790:	80 34       	cpi	r24, 0x40	; 64
    7792:	92 44       	sbci	r25, 0x42	; 66
    7794:	af 40       	sbci	r26, 0x0F	; 15
    7796:	b1 05       	cpc	r27, r1
    7798:	b0 f4       	brcc	.+44     	; 0x77c6 <delayUS+0xd2>
    779a:	20 e0       	ldi	r18, 0x00	; 0
    779c:	3b e0       	ldi	r19, 0x0B	; 11
    779e:	89 81       	ldd	r24, Y+1	; 0x01
    77a0:	9a 81       	ldd	r25, Y+2	; 0x02
    77a2:	ab 81       	ldd	r26, Y+3	; 0x03
    77a4:	bc 81       	ldd	r27, Y+4	; 0x04
    77a6:	68 94       	set
    77a8:	14 f8       	bld	r1, 4
    77aa:	b6 95       	lsr	r27
    77ac:	a7 95       	ror	r26
    77ae:	97 95       	ror	r25
    77b0:	87 95       	ror	r24
    77b2:	16 94       	lsr	r1
    77b4:	d1 f7       	brne	.-12     	; 0x77aa <delayUS+0xb6>
    77b6:	f9 01       	movw	r30, r18
    77b8:	86 a3       	std	Z+38, r24	; 0x26
    77ba:	97 a3       	std	Z+39, r25	; 0x27
    77bc:	67 e0       	ldi	r22, 0x07	; 7
    77be:	80 e0       	ldi	r24, 0x00	; 0
    77c0:	9b e0       	ldi	r25, 0x0B	; 11
    77c2:	0e 94 4d 1b 	call	0x369a	; 0x369a <TC0_ConfigClockSource>
    77c6:	80 91 79 2d 	lds	r24, 0x2D79	; 0x802d79 <egDisplayTiming>
    77ca:	90 91 7a 2d 	lds	r25, 0x2D7A	; 0x802d7a <egDisplayTiming+0x1>
    77ce:	0f 2e       	mov	r0, r31
    77d0:	f4 ef       	ldi	r31, 0xF4	; 244
    77d2:	cf 2e       	mov	r12, r31
    77d4:	dd 24       	eor	r13, r13
    77d6:	d3 94       	inc	r13
    77d8:	e1 2c       	mov	r14, r1
    77da:	f1 2c       	mov	r15, r1
    77dc:	f0 2d       	mov	r31, r0
    77de:	00 e0       	ldi	r16, 0x00	; 0
    77e0:	21 e0       	ldi	r18, 0x01	; 1
    77e2:	41 e0       	ldi	r20, 0x01	; 1
    77e4:	50 e0       	ldi	r21, 0x00	; 0
    77e6:	60 e0       	ldi	r22, 0x00	; 0
    77e8:	70 e0       	ldi	r23, 0x00	; 0
    77ea:	0e 94 0e 1c 	call	0x381c	; 0x381c <xEventGroupWaitBits>
    77ee:	00 00       	nop
    77f0:	24 96       	adiw	r28, 0x04	; 4
    77f2:	cd bf       	out	0x3d, r28	; 61
    77f4:	de bf       	out	0x3e, r29	; 62
    77f6:	df 91       	pop	r29
    77f8:	cf 91       	pop	r28
    77fa:	0f 91       	pop	r16
    77fc:	ff 90       	pop	r15
    77fe:	ef 90       	pop	r14
    7800:	df 90       	pop	r13
    7802:	cf 90       	pop	r12
    7804:	08 95       	ret

00007806 <setPort>:
    7806:	cf 93       	push	r28
    7808:	df 93       	push	r29
    780a:	1f 92       	push	r1
    780c:	cd b7       	in	r28, 0x3d	; 61
    780e:	de b7       	in	r29, 0x3e	; 62
    7810:	89 83       	std	Y+1, r24	; 0x01
    7812:	89 81       	ldd	r24, Y+1	; 0x01
    7814:	8f 70       	andi	r24, 0x0F	; 15
    7816:	89 83       	std	Y+1, r24	; 0x01
    7818:	89 81       	ldd	r24, Y+1	; 0x01
    781a:	82 95       	swap	r24
    781c:	80 7f       	andi	r24, 0xF0	; 240
    781e:	89 83       	std	Y+1, r24	; 0x01
    7820:	80 e0       	ldi	r24, 0x00	; 0
    7822:	96 e0       	ldi	r25, 0x06	; 6
    7824:	20 e0       	ldi	r18, 0x00	; 0
    7826:	36 e0       	ldi	r19, 0x06	; 6
    7828:	f9 01       	movw	r30, r18
    782a:	34 81       	ldd	r19, Z+4	; 0x04
    782c:	29 81       	ldd	r18, Y+1	; 0x01
    782e:	2f 60       	ori	r18, 0x0F	; 15
    7830:	23 23       	and	r18, r19
    7832:	fc 01       	movw	r30, r24
    7834:	24 83       	std	Z+4, r18	; 0x04
    7836:	80 e0       	ldi	r24, 0x00	; 0
    7838:	96 e0       	ldi	r25, 0x06	; 6
    783a:	20 e0       	ldi	r18, 0x00	; 0
    783c:	36 e0       	ldi	r19, 0x06	; 6
    783e:	f9 01       	movw	r30, r18
    7840:	34 81       	ldd	r19, Z+4	; 0x04
    7842:	29 81       	ldd	r18, Y+1	; 0x01
    7844:	23 2b       	or	r18, r19
    7846:	fc 01       	movw	r30, r24
    7848:	24 83       	std	Z+4, r18	; 0x04
    784a:	00 00       	nop
    784c:	0f 90       	pop	r0
    784e:	df 91       	pop	r29
    7850:	cf 91       	pop	r28
    7852:	08 95       	ret

00007854 <setRS>:
    7854:	cf 93       	push	r28
    7856:	df 93       	push	r29
    7858:	1f 92       	push	r1
    785a:	cd b7       	in	r28, 0x3d	; 61
    785c:	de b7       	in	r29, 0x3e	; 62
    785e:	89 83       	std	Y+1, r24	; 0x01
    7860:	89 81       	ldd	r24, Y+1	; 0x01
    7862:	88 23       	and	r24, r24
    7864:	31 f0       	breq	.+12     	; 0x7872 <setRS+0x1e>
    7866:	80 e6       	ldi	r24, 0x60	; 96
    7868:	96 e0       	ldi	r25, 0x06	; 6
    786a:	21 e0       	ldi	r18, 0x01	; 1
    786c:	fc 01       	movw	r30, r24
    786e:	25 83       	std	Z+5, r18	; 0x05
    7870:	05 c0       	rjmp	.+10     	; 0x787c <setRS+0x28>
    7872:	80 e6       	ldi	r24, 0x60	; 96
    7874:	96 e0       	ldi	r25, 0x06	; 6
    7876:	21 e0       	ldi	r18, 0x01	; 1
    7878:	fc 01       	movw	r30, r24
    787a:	26 83       	std	Z+6, r18	; 0x06
    787c:	00 00       	nop
    787e:	0f 90       	pop	r0
    7880:	df 91       	pop	r29
    7882:	cf 91       	pop	r28
    7884:	08 95       	ret

00007886 <setRW>:
    7886:	cf 93       	push	r28
    7888:	df 93       	push	r29
    788a:	1f 92       	push	r1
    788c:	cd b7       	in	r28, 0x3d	; 61
    788e:	de b7       	in	r29, 0x3e	; 62
    7890:	89 83       	std	Y+1, r24	; 0x01
    7892:	89 81       	ldd	r24, Y+1	; 0x01
    7894:	88 23       	and	r24, r24
    7896:	31 f0       	breq	.+12     	; 0x78a4 <setRW+0x1e>
    7898:	80 e6       	ldi	r24, 0x60	; 96
    789a:	96 e0       	ldi	r25, 0x06	; 6
    789c:	22 e0       	ldi	r18, 0x02	; 2
    789e:	fc 01       	movw	r30, r24
    78a0:	25 83       	std	Z+5, r18	; 0x05
    78a2:	05 c0       	rjmp	.+10     	; 0x78ae <setRW+0x28>
    78a4:	80 e6       	ldi	r24, 0x60	; 96
    78a6:	96 e0       	ldi	r25, 0x06	; 6
    78a8:	22 e0       	ldi	r18, 0x02	; 2
    78aa:	fc 01       	movw	r30, r24
    78ac:	26 83       	std	Z+6, r18	; 0x06
    78ae:	00 00       	nop
    78b0:	0f 90       	pop	r0
    78b2:	df 91       	pop	r29
    78b4:	cf 91       	pop	r28
    78b6:	08 95       	ret

000078b8 <setE>:
    78b8:	cf 93       	push	r28
    78ba:	df 93       	push	r29
    78bc:	1f 92       	push	r1
    78be:	cd b7       	in	r28, 0x3d	; 61
    78c0:	de b7       	in	r29, 0x3e	; 62
    78c2:	89 83       	std	Y+1, r24	; 0x01
    78c4:	89 81       	ldd	r24, Y+1	; 0x01
    78c6:	88 23       	and	r24, r24
    78c8:	31 f0       	breq	.+12     	; 0x78d6 <setE+0x1e>
    78ca:	80 e6       	ldi	r24, 0x60	; 96
    78cc:	96 e0       	ldi	r25, 0x06	; 6
    78ce:	24 e0       	ldi	r18, 0x04	; 4
    78d0:	fc 01       	movw	r30, r24
    78d2:	25 83       	std	Z+5, r18	; 0x05
    78d4:	05 c0       	rjmp	.+10     	; 0x78e0 <setE+0x28>
    78d6:	80 e6       	ldi	r24, 0x60	; 96
    78d8:	96 e0       	ldi	r25, 0x06	; 6
    78da:	24 e0       	ldi	r18, 0x04	; 4
    78dc:	fc 01       	movw	r30, r24
    78de:	26 83       	std	Z+6, r18	; 0x06
    78e0:	00 00       	nop
    78e2:	0f 90       	pop	r0
    78e4:	df 91       	pop	r29
    78e6:	cf 91       	pop	r28
    78e8:	08 95       	ret

000078ea <Nybble>:
    78ea:	cf 93       	push	r28
    78ec:	df 93       	push	r29
    78ee:	cd b7       	in	r28, 0x3d	; 61
    78f0:	de b7       	in	r29, 0x3e	; 62
    78f2:	81 e0       	ldi	r24, 0x01	; 1
    78f4:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <setE>
    78f8:	61 e0       	ldi	r22, 0x01	; 1
    78fa:	70 e0       	ldi	r23, 0x00	; 0
    78fc:	80 e0       	ldi	r24, 0x00	; 0
    78fe:	90 e0       	ldi	r25, 0x00	; 0
    7900:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <delayUS>
    7904:	80 e0       	ldi	r24, 0x00	; 0
    7906:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <setE>
    790a:	00 00       	nop
    790c:	df 91       	pop	r29
    790e:	cf 91       	pop	r28
    7910:	08 95       	ret

00007912 <command>:
    7912:	cf 93       	push	r28
    7914:	df 93       	push	r29
    7916:	1f 92       	push	r1
    7918:	cd b7       	in	r28, 0x3d	; 61
    791a:	de b7       	in	r29, 0x3e	; 62
    791c:	89 83       	std	Y+1, r24	; 0x01
    791e:	89 81       	ldd	r24, Y+1	; 0x01
    7920:	82 95       	swap	r24
    7922:	8f 70       	andi	r24, 0x0F	; 15
    7924:	0e 94 03 3c 	call	0x7806	; 0x7806 <setPort>
    7928:	80 e0       	ldi	r24, 0x00	; 0
    792a:	0e 94 2a 3c 	call	0x7854	; 0x7854 <setRS>
    792e:	80 e0       	ldi	r24, 0x00	; 0
    7930:	0e 94 43 3c 	call	0x7886	; 0x7886 <setRW>
    7934:	0e 94 75 3c 	call	0x78ea	; 0x78ea <Nybble>
    7938:	89 81       	ldd	r24, Y+1	; 0x01
    793a:	8f 70       	andi	r24, 0x0F	; 15
    793c:	0e 94 03 3c 	call	0x7806	; 0x7806 <setPort>
    7940:	0e 94 75 3c 	call	0x78ea	; 0x78ea <Nybble>
    7944:	00 00       	nop
    7946:	0f 90       	pop	r0
    7948:	df 91       	pop	r29
    794a:	cf 91       	pop	r28
    794c:	08 95       	ret

0000794e <write>:
    794e:	cf 93       	push	r28
    7950:	df 93       	push	r29
    7952:	1f 92       	push	r1
    7954:	cd b7       	in	r28, 0x3d	; 61
    7956:	de b7       	in	r29, 0x3e	; 62
    7958:	89 83       	std	Y+1, r24	; 0x01
    795a:	89 81       	ldd	r24, Y+1	; 0x01
    795c:	82 95       	swap	r24
    795e:	8f 70       	andi	r24, 0x0F	; 15
    7960:	0e 94 03 3c 	call	0x7806	; 0x7806 <setPort>
    7964:	81 e0       	ldi	r24, 0x01	; 1
    7966:	0e 94 2a 3c 	call	0x7854	; 0x7854 <setRS>
    796a:	80 e0       	ldi	r24, 0x00	; 0
    796c:	0e 94 43 3c 	call	0x7886	; 0x7886 <setRW>
    7970:	0e 94 75 3c 	call	0x78ea	; 0x78ea <Nybble>
    7974:	89 81       	ldd	r24, Y+1	; 0x01
    7976:	8f 70       	andi	r24, 0x0F	; 15
    7978:	0e 94 03 3c 	call	0x7806	; 0x7806 <setPort>
    797c:	0e 94 75 3c 	call	0x78ea	; 0x78ea <Nybble>
    7980:	00 00       	nop
    7982:	0f 90       	pop	r0
    7984:	df 91       	pop	r29
    7986:	cf 91       	pop	r28
    7988:	08 95       	ret

0000798a <vInitDisplay>:
 
 void vInitDisplay() {
    798a:	ef 92       	push	r14
    798c:	ff 92       	push	r15
    798e:	0f 93       	push	r16
    7990:	cf 93       	push	r28
    7992:	df 93       	push	r29
    7994:	cd b7       	in	r28, 0x3d	; 61
    7996:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    7998:	80 e0       	ldi	r24, 0x00	; 0
    799a:	96 e0       	ldi	r25, 0x06	; 6
    799c:	20 e1       	ldi	r18, 0x10	; 16
    799e:	fc 01       	movw	r30, r24
    79a0:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    79a2:	80 e0       	ldi	r24, 0x00	; 0
    79a4:	96 e0       	ldi	r25, 0x06	; 6
    79a6:	20 e2       	ldi	r18, 0x20	; 32
    79a8:	fc 01       	movw	r30, r24
    79aa:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    79ac:	80 e0       	ldi	r24, 0x00	; 0
    79ae:	96 e0       	ldi	r25, 0x06	; 6
    79b0:	20 e4       	ldi	r18, 0x40	; 64
    79b2:	fc 01       	movw	r30, r24
    79b4:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    79b6:	80 e0       	ldi	r24, 0x00	; 0
    79b8:	96 e0       	ldi	r25, 0x06	; 6
    79ba:	20 e8       	ldi	r18, 0x80	; 128
    79bc:	fc 01       	movw	r30, r24
    79be:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    79c0:	80 e6       	ldi	r24, 0x60	; 96
    79c2:	96 e0       	ldi	r25, 0x06	; 6
    79c4:	21 e0       	ldi	r18, 0x01	; 1
    79c6:	fc 01       	movw	r30, r24
    79c8:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    79ca:	80 e6       	ldi	r24, 0x60	; 96
    79cc:	96 e0       	ldi	r25, 0x06	; 6
    79ce:	22 e0       	ldi	r18, 0x02	; 2
    79d0:	fc 01       	movw	r30, r24
    79d2:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    79d4:	80 e6       	ldi	r24, 0x60	; 96
    79d6:	96 e0       	ldi	r25, 0x06	; 6
    79d8:	24 e0       	ldi	r18, 0x04	; 4
    79da:	fc 01       	movw	r30, r24
    79dc:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    79de:	80 e0       	ldi	r24, 0x00	; 0
    79e0:	96 e0       	ldi	r25, 0x06	; 6
    79e2:	20 e0       	ldi	r18, 0x00	; 0
    79e4:	36 e0       	ldi	r19, 0x06	; 6
    79e6:	f9 01       	movw	r30, r18
    79e8:	24 81       	ldd	r18, Z+4	; 0x04
    79ea:	2f 70       	andi	r18, 0x0F	; 15
    79ec:	fc 01       	movw	r30, r24
    79ee:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    79f0:	80 e6       	ldi	r24, 0x60	; 96
    79f2:	96 e0       	ldi	r25, 0x06	; 6
    79f4:	20 e6       	ldi	r18, 0x60	; 96
    79f6:	36 e0       	ldi	r19, 0x06	; 6
    79f8:	f9 01       	movw	r30, r18
    79fa:	24 81       	ldd	r18, Z+4	; 0x04
    79fc:	28 7f       	andi	r18, 0xF8	; 248
    79fe:	fc 01       	movw	r30, r24
    7a00:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    7a02:	40 e0       	ldi	r20, 0x00	; 0
    7a04:	66 e1       	ldi	r22, 0x16	; 22
    7a06:	88 e0       	ldi	r24, 0x08	; 8
    7a08:	0e 94 f7 24 	call	0x49ee	; 0x49ee <xQueueGenericCreate>
    7a0c:	80 93 77 2d 	sts	0x2D77, r24	; 0x802d77 <displayLineQueue>
    7a10:	90 93 78 2d 	sts	0x2D78, r25	; 0x802d78 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    7a14:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <xEventGroupCreate>
    7a18:	80 93 79 2d 	sts	0x2D79, r24	; 0x802d79 <egDisplayTiming>
    7a1c:	90 93 7a 2d 	sts	0x2D7A, r25	; 0x802d7a <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);	//von Hand auf Prio 2 gestellt
    7a20:	e1 2c       	mov	r14, r1
    7a22:	f1 2c       	mov	r15, r1
    7a24:	02 e0       	ldi	r16, 0x02	; 2
    7a26:	20 e0       	ldi	r18, 0x00	; 0
    7a28:	30 e0       	ldi	r19, 0x00	; 0
    7a2a:	4e e5       	ldi	r20, 0x5E	; 94
    7a2c:	51 e0       	ldi	r21, 0x01	; 1
    7a2e:	65 e5       	ldi	r22, 0x55	; 85
    7a30:	70 e2       	ldi	r23, 0x20	; 32
    7a32:	83 ec       	ldi	r24, 0xC3	; 195
    7a34:	9d e3       	ldi	r25, 0x3D	; 61
    7a36:	0e 94 78 29 	call	0x52f0	; 0x52f0 <xTaskCreate>
 }
    7a3a:	00 00       	nop
    7a3c:	df 91       	pop	r29
    7a3e:	cf 91       	pop	r28
    7a40:	0f 91       	pop	r16
    7a42:	ff 90       	pop	r15
    7a44:	ef 90       	pop	r14
    7a46:	08 95       	ret

00007a48 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    7a48:	cf 93       	push	r28
    7a4a:	df 93       	push	r29
    7a4c:	00 d0       	rcall	.+0      	; 0x7a4e <_displaySetPos+0x6>
    7a4e:	1f 92       	push	r1
    7a50:	cd b7       	in	r28, 0x3d	; 61
    7a52:	de b7       	in	r29, 0x3e	; 62
    7a54:	89 83       	std	Y+1, r24	; 0x01
    7a56:	9a 83       	std	Y+2, r25	; 0x02
    7a58:	6b 83       	std	Y+3, r22	; 0x03
    7a5a:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    7a5c:	89 81       	ldd	r24, Y+1	; 0x01
    7a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    7a60:	81 30       	cpi	r24, 0x01	; 1
    7a62:	91 05       	cpc	r25, r1
    7a64:	89 f0       	breq	.+34     	; 0x7a88 <_displaySetPos+0x40>
    7a66:	82 30       	cpi	r24, 0x02	; 2
    7a68:	91 05       	cpc	r25, r1
    7a6a:	1c f4       	brge	.+6      	; 0x7a72 <_displaySetPos+0x2a>
    7a6c:	89 2b       	or	r24, r25
    7a6e:	39 f0       	breq	.+14     	; 0x7a7e <_displaySetPos+0x36>
    7a70:	1a c0       	rjmp	.+52     	; 0x7aa6 <_displaySetPos+0x5e>
    7a72:	82 30       	cpi	r24, 0x02	; 2
    7a74:	91 05       	cpc	r25, r1
    7a76:	69 f0       	breq	.+26     	; 0x7a92 <_displaySetPos+0x4a>
    7a78:	03 97       	sbiw	r24, 0x03	; 3
    7a7a:	81 f0       	breq	.+32     	; 0x7a9c <_displaySetPos+0x54>
    7a7c:	14 c0       	rjmp	.+40     	; 0x7aa6 <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    7a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    7a80:	80 58       	subi	r24, 0x80	; 128
    7a82:	0e 94 89 3c 	call	0x7912	; 0x7912 <command>
		 break;
    7a86:	0f c0       	rjmp	.+30     	; 0x7aa6 <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    7a88:	8b 81       	ldd	r24, Y+3	; 0x03
    7a8a:	80 54       	subi	r24, 0x40	; 64
    7a8c:	0e 94 89 3c 	call	0x7912	; 0x7912 <command>
		 break;
    7a90:	0a c0       	rjmp	.+20     	; 0x7aa6 <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    7a92:	8b 81       	ldd	r24, Y+3	; 0x03
    7a94:	8c 56       	subi	r24, 0x6C	; 108
    7a96:	0e 94 89 3c 	call	0x7912	; 0x7912 <command>
		 break;
    7a9a:	05 c0       	rjmp	.+10     	; 0x7aa6 <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    7a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    7a9e:	8c 52       	subi	r24, 0x2C	; 44
    7aa0:	0e 94 89 3c 	call	0x7912	; 0x7912 <command>
		 break;
    7aa4:	00 00       	nop
	 }
	 delayUS(39);
    7aa6:	67 e2       	ldi	r22, 0x27	; 39
    7aa8:	70 e0       	ldi	r23, 0x00	; 0
    7aaa:	80 e0       	ldi	r24, 0x00	; 0
    7aac:	90 e0       	ldi	r25, 0x00	; 0
    7aae:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <delayUS>
 }
    7ab2:	00 00       	nop
    7ab4:	24 96       	adiw	r28, 0x04	; 4
    7ab6:	cd bf       	out	0x3d, r28	; 61
    7ab8:	de bf       	out	0x3e, r29	; 62
    7aba:	df 91       	pop	r29
    7abc:	cf 91       	pop	r28
    7abe:	08 95       	ret

00007ac0 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    7ac0:	cf 93       	push	r28
    7ac2:	df 93       	push	r29
    7ac4:	1f 92       	push	r1
    7ac6:	cd b7       	in	r28, 0x3d	; 61
    7ac8:	de b7       	in	r29, 0x3e	; 62
    7aca:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    7acc:	89 81       	ldd	r24, Y+1	; 0x01
    7ace:	0e 94 a7 3c 	call	0x794e	; 0x794e <write>
	 delayUS(43);
    7ad2:	6b e2       	ldi	r22, 0x2B	; 43
    7ad4:	70 e0       	ldi	r23, 0x00	; 0
    7ad6:	80 e0       	ldi	r24, 0x00	; 0
    7ad8:	90 e0       	ldi	r25, 0x00	; 0
    7ada:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <delayUS>
 }
    7ade:	00 00       	nop
    7ae0:	0f 90       	pop	r0
    7ae2:	df 91       	pop	r29
    7ae4:	cf 91       	pop	r28
    7ae6:	08 95       	ret

00007ae8 <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    7ae8:	cf 93       	push	r28
    7aea:	df 93       	push	r29
    7aec:	00 d0       	rcall	.+0      	; 0x7aee <_displayWriteString+0x6>
    7aee:	1f 92       	push	r1
    7af0:	cd b7       	in	r28, 0x3d	; 61
    7af2:	de b7       	in	r29, 0x3e	; 62
    7af4:	8b 83       	std	Y+3, r24	; 0x03
    7af6:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    7af8:	19 82       	std	Y+1, r1	; 0x01
    7afa:	1a 82       	std	Y+2, r1	; 0x02
    7afc:	19 c0       	rjmp	.+50     	; 0x7b30 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    7afe:	89 81       	ldd	r24, Y+1	; 0x01
    7b00:	9a 81       	ldd	r25, Y+2	; 0x02
    7b02:	2b 81       	ldd	r18, Y+3	; 0x03
    7b04:	3c 81       	ldd	r19, Y+4	; 0x04
    7b06:	82 0f       	add	r24, r18
    7b08:	93 1f       	adc	r25, r19
    7b0a:	fc 01       	movw	r30, r24
    7b0c:	80 81       	ld	r24, Z
    7b0e:	88 23       	and	r24, r24
    7b10:	a1 f0       	breq	.+40     	; 0x7b3a <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    7b12:	89 81       	ldd	r24, Y+1	; 0x01
    7b14:	9a 81       	ldd	r25, Y+2	; 0x02
    7b16:	2b 81       	ldd	r18, Y+3	; 0x03
    7b18:	3c 81       	ldd	r19, Y+4	; 0x04
    7b1a:	82 0f       	add	r24, r18
    7b1c:	93 1f       	adc	r25, r19
    7b1e:	fc 01       	movw	r30, r24
    7b20:	80 81       	ld	r24, Z
    7b22:	0e 94 60 3d 	call	0x7ac0	; 0x7ac0 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    7b26:	89 81       	ldd	r24, Y+1	; 0x01
    7b28:	9a 81       	ldd	r25, Y+2	; 0x02
    7b2a:	01 96       	adiw	r24, 0x01	; 1
    7b2c:	89 83       	std	Y+1, r24	; 0x01
    7b2e:	9a 83       	std	Y+2, r25	; 0x02
    7b30:	89 81       	ldd	r24, Y+1	; 0x01
    7b32:	9a 81       	ldd	r25, Y+2	; 0x02
    7b34:	44 97       	sbiw	r24, 0x14	; 20
    7b36:	1c f3       	brlt	.-58     	; 0x7afe <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    7b38:	01 c0       	rjmp	.+2      	; 0x7b3c <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    7b3a:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    7b3c:	00 00       	nop
    7b3e:	24 96       	adiw	r28, 0x04	; 4
    7b40:	cd bf       	out	0x3d, r28	; 61
    7b42:	de bf       	out	0x3e, r29	; 62
    7b44:	df 91       	pop	r29
    7b46:	cf 91       	pop	r28
    7b48:	08 95       	ret

00007b4a <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    7b4a:	cf 93       	push	r28
    7b4c:	df 93       	push	r29
    7b4e:	00 d0       	rcall	.+0      	; 0x7b50 <_displayWriteStringAtPos+0x6>
    7b50:	00 d0       	rcall	.+0      	; 0x7b52 <_displayWriteStringAtPos+0x8>
    7b52:	cd b7       	in	r28, 0x3d	; 61
    7b54:	de b7       	in	r29, 0x3e	; 62
    7b56:	89 83       	std	Y+1, r24	; 0x01
    7b58:	9a 83       	std	Y+2, r25	; 0x02
    7b5a:	6b 83       	std	Y+3, r22	; 0x03
    7b5c:	7c 83       	std	Y+4, r23	; 0x04
    7b5e:	4d 83       	std	Y+5, r20	; 0x05
    7b60:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    7b62:	2b 81       	ldd	r18, Y+3	; 0x03
    7b64:	3c 81       	ldd	r19, Y+4	; 0x04
    7b66:	89 81       	ldd	r24, Y+1	; 0x01
    7b68:	9a 81       	ldd	r25, Y+2	; 0x02
    7b6a:	b9 01       	movw	r22, r18
    7b6c:	0e 94 24 3d 	call	0x7a48	; 0x7a48 <_displaySetPos>
	 _displayWriteString(s);
    7b70:	8d 81       	ldd	r24, Y+5	; 0x05
    7b72:	9e 81       	ldd	r25, Y+6	; 0x06
    7b74:	0e 94 74 3d 	call	0x7ae8	; 0x7ae8 <_displayWriteString>
 }
    7b78:	00 00       	nop
    7b7a:	26 96       	adiw	r28, 0x06	; 6
    7b7c:	cd bf       	out	0x3d, r28	; 61
    7b7e:	de bf       	out	0x3e, r29	; 62
    7b80:	df 91       	pop	r29
    7b82:	cf 91       	pop	r28
    7b84:	08 95       	ret

00007b86 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    7b86:	cf 93       	push	r28
    7b88:	df 93       	push	r29
    7b8a:	cd b7       	in	r28, 0x3d	; 61
    7b8c:	de b7       	in	r29, 0x3e	; 62
    7b8e:	c0 57       	subi	r28, 0x70	; 112
    7b90:	d1 09       	sbc	r29, r1
    7b92:	cd bf       	out	0x3d, r28	; 61
    7b94:	de bf       	out	0x3e, r29	; 62
    7b96:	9e 01       	movw	r18, r28
    7b98:	21 59       	subi	r18, 0x91	; 145
    7b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    7b9c:	f9 01       	movw	r30, r18
    7b9e:	80 83       	st	Z, r24
    7ba0:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    7ba2:	19 82       	std	Y+1, r1	; 0x01
    7ba4:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    7ba6:	1b 82       	std	Y+3, r1	; 0x03
    7ba8:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    7baa:	1d 82       	std	Y+5, r1	; 0x05
    7bac:	1e 82       	std	Y+6, r1	; 0x06
    7bae:	26 c0       	rjmp	.+76     	; 0x7bfc <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    7bb0:	1f 82       	std	Y+7, r1	; 0x07
    7bb2:	18 86       	std	Y+8, r1	; 0x08
    7bb4:	1a c0       	rjmp	.+52     	; 0x7bea <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    7bb6:	2d 81       	ldd	r18, Y+5	; 0x05
    7bb8:	3e 81       	ldd	r19, Y+6	; 0x06
    7bba:	44 e1       	ldi	r20, 0x14	; 20
    7bbc:	42 9f       	mul	r20, r18
    7bbe:	c0 01       	movw	r24, r0
    7bc0:	43 9f       	mul	r20, r19
    7bc2:	90 0d       	add	r25, r0
    7bc4:	11 24       	eor	r1, r1
    7bc6:	9e 01       	movw	r18, r28
    7bc8:	2f 5f       	subi	r18, 0xFF	; 255
    7bca:	3f 4f       	sbci	r19, 0xFF	; 255
    7bcc:	28 0f       	add	r18, r24
    7bce:	39 1f       	adc	r19, r25
    7bd0:	8f 81       	ldd	r24, Y+7	; 0x07
    7bd2:	98 85       	ldd	r25, Y+8	; 0x08
    7bd4:	82 0f       	add	r24, r18
    7bd6:	93 1f       	adc	r25, r19
    7bd8:	08 96       	adiw	r24, 0x08	; 8
    7bda:	20 e2       	ldi	r18, 0x20	; 32
    7bdc:	fc 01       	movw	r30, r24
    7bde:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    7be0:	8f 81       	ldd	r24, Y+7	; 0x07
    7be2:	98 85       	ldd	r25, Y+8	; 0x08
    7be4:	01 96       	adiw	r24, 0x01	; 1
    7be6:	8f 83       	std	Y+7, r24	; 0x07
    7be8:	98 87       	std	Y+8, r25	; 0x08
    7bea:	8f 81       	ldd	r24, Y+7	; 0x07
    7bec:	98 85       	ldd	r25, Y+8	; 0x08
    7bee:	44 97       	sbiw	r24, 0x14	; 20
    7bf0:	14 f3       	brlt	.-60     	; 0x7bb6 <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    7bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    7bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    7bf6:	01 96       	adiw	r24, 0x01	; 1
    7bf8:	8d 83       	std	Y+5, r24	; 0x05
    7bfa:	9e 83       	std	Y+6, r25	; 0x06
    7bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    7bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    7c00:	04 97       	sbiw	r24, 0x04	; 4
    7c02:	b4 f2       	brlt	.-84     	; 0x7bb0 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    7c04:	60 e4       	ldi	r22, 0x40	; 64
    7c06:	7c e9       	ldi	r23, 0x9C	; 156
    7c08:	80 e0       	ldi	r24, 0x00	; 0
    7c0a:	90 e0       	ldi	r25, 0x00	; 0
    7c0c:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <delayUS>
	 setPort(0x03);
    7c10:	83 e0       	ldi	r24, 0x03	; 3
    7c12:	0e 94 03 3c 	call	0x7806	; 0x7806 <setPort>
	 delayUS(5000);
    7c16:	68 e8       	ldi	r22, 0x88	; 136
    7c18:	73 e1       	ldi	r23, 0x13	; 19
    7c1a:	80 e0       	ldi	r24, 0x00	; 0
    7c1c:	90 e0       	ldi	r25, 0x00	; 0
    7c1e:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <delayUS>
	 Nybble();
    7c22:	0e 94 75 3c 	call	0x78ea	; 0x78ea <Nybble>
	 delayUS(160);
    7c26:	60 ea       	ldi	r22, 0xA0	; 160
    7c28:	70 e0       	ldi	r23, 0x00	; 0
    7c2a:	80 e0       	ldi	r24, 0x00	; 0
    7c2c:	90 e0       	ldi	r25, 0x00	; 0
    7c2e:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <delayUS>
	 Nybble();
    7c32:	0e 94 75 3c 	call	0x78ea	; 0x78ea <Nybble>
	 delayUS(160);
    7c36:	60 ea       	ldi	r22, 0xA0	; 160
    7c38:	70 e0       	ldi	r23, 0x00	; 0
    7c3a:	80 e0       	ldi	r24, 0x00	; 0
    7c3c:	90 e0       	ldi	r25, 0x00	; 0
    7c3e:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <delayUS>
	 Nybble();
    7c42:	0e 94 75 3c 	call	0x78ea	; 0x78ea <Nybble>
	 delayUS(160);
    7c46:	60 ea       	ldi	r22, 0xA0	; 160
    7c48:	70 e0       	ldi	r23, 0x00	; 0
    7c4a:	80 e0       	ldi	r24, 0x00	; 0
    7c4c:	90 e0       	ldi	r25, 0x00	; 0
    7c4e:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <delayUS>
	 setPort(0x02);
    7c52:	82 e0       	ldi	r24, 0x02	; 2
    7c54:	0e 94 03 3c 	call	0x7806	; 0x7806 <setPort>
	 Nybble();
    7c58:	0e 94 75 3c 	call	0x78ea	; 0x78ea <Nybble>
	 command(0x28);
    7c5c:	88 e2       	ldi	r24, 0x28	; 40
    7c5e:	0e 94 89 3c 	call	0x7912	; 0x7912 <command>
	 command(0x10);
    7c62:	80 e1       	ldi	r24, 0x10	; 16
    7c64:	0e 94 89 3c 	call	0x7912	; 0x7912 <command>
	 command(0x0C); //Cursor and Blinking off
    7c68:	8c e0       	ldi	r24, 0x0C	; 12
    7c6a:	0e 94 89 3c 	call	0x7912	; 0x7912 <command>
	 command(0x06);
    7c6e:	86 e0       	ldi	r24, 0x06	; 6
    7c70:	0e 94 89 3c 	call	0x7912	; 0x7912 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    7c74:	68 ec       	ldi	r22, 0xC8	; 200
    7c76:	70 e0       	ldi	r23, 0x00	; 0
    7c78:	80 e0       	ldi	r24, 0x00	; 0
    7c7a:	90 e0       	ldi	r25, 0x00	; 0
    7c7c:	0e 94 4b 2b 	call	0x5696	; 0x5696 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    7c80:	80 91 79 2d 	lds	r24, 0x2D79	; 0x802d79 <egDisplayTiming>
    7c84:	90 91 7a 2d 	lds	r25, 0x2D7A	; 0x802d7a <egDisplayTiming+0x1>
    7c88:	40 e0       	ldi	r20, 0x00	; 0
    7c8a:	50 e0       	ldi	r21, 0x00	; 0
    7c8c:	ba 01       	movw	r22, r20
    7c8e:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <xEventGroupClearBits>
    7c92:	dc 01       	movw	r26, r24
    7c94:	cb 01       	movw	r24, r22
    7c96:	89 2b       	or	r24, r25
    7c98:	8a 2b       	or	r24, r26
    7c9a:	8b 2b       	or	r24, r27
    7c9c:	09 f4       	brne	.+2      	; 0x7ca0 <vDisplayUpdateTask+0x11a>
    7c9e:	96 c0       	rjmp	.+300    	; 0x7dcc <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    7ca0:	80 91 79 2d 	lds	r24, 0x2D79	; 0x802d79 <egDisplayTiming>
    7ca4:	90 91 7a 2d 	lds	r25, 0x2D7A	; 0x802d7a <egDisplayTiming+0x1>
    7ca8:	42 e0       	ldi	r20, 0x02	; 2
    7caa:	50 e0       	ldi	r21, 0x00	; 0
    7cac:	60 e0       	ldi	r22, 0x00	; 0
    7cae:	70 e0       	ldi	r23, 0x00	; 0
    7cb0:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    7cb4:	19 82       	std	Y+1, r1	; 0x01
    7cb6:	1a 82       	std	Y+2, r1	; 0x02
    7cb8:	26 c0       	rjmp	.+76     	; 0x7d06 <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    7cba:	1b 82       	std	Y+3, r1	; 0x03
    7cbc:	1c 82       	std	Y+4, r1	; 0x04
    7cbe:	1a c0       	rjmp	.+52     	; 0x7cf4 <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    7cc0:	29 81       	ldd	r18, Y+1	; 0x01
    7cc2:	3a 81       	ldd	r19, Y+2	; 0x02
    7cc4:	44 e1       	ldi	r20, 0x14	; 20
    7cc6:	42 9f       	mul	r20, r18
    7cc8:	c0 01       	movw	r24, r0
    7cca:	43 9f       	mul	r20, r19
    7ccc:	90 0d       	add	r25, r0
    7cce:	11 24       	eor	r1, r1
    7cd0:	9e 01       	movw	r18, r28
    7cd2:	2f 5f       	subi	r18, 0xFF	; 255
    7cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    7cd6:	28 0f       	add	r18, r24
    7cd8:	39 1f       	adc	r19, r25
    7cda:	8b 81       	ldd	r24, Y+3	; 0x03
    7cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    7cde:	82 0f       	add	r24, r18
    7ce0:	93 1f       	adc	r25, r19
    7ce2:	08 96       	adiw	r24, 0x08	; 8
    7ce4:	20 e2       	ldi	r18, 0x20	; 32
    7ce6:	fc 01       	movw	r30, r24
    7ce8:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    7cea:	8b 81       	ldd	r24, Y+3	; 0x03
    7cec:	9c 81       	ldd	r25, Y+4	; 0x04
    7cee:	01 96       	adiw	r24, 0x01	; 1
    7cf0:	8b 83       	std	Y+3, r24	; 0x03
    7cf2:	9c 83       	std	Y+4, r25	; 0x04
    7cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    7cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    7cf8:	44 97       	sbiw	r24, 0x14	; 20
    7cfa:	14 f3       	brlt	.-60     	; 0x7cc0 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    7cfc:	89 81       	ldd	r24, Y+1	; 0x01
    7cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    7d00:	01 96       	adiw	r24, 0x01	; 1
    7d02:	89 83       	std	Y+1, r24	; 0x01
    7d04:	9a 83       	std	Y+2, r25	; 0x02
    7d06:	89 81       	ldd	r24, Y+1	; 0x01
    7d08:	9a 81       	ldd	r25, Y+2	; 0x02
    7d0a:	04 97       	sbiw	r24, 0x04	; 4
    7d0c:	b4 f2       	brlt	.-84     	; 0x7cba <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    7d0e:	5e c0       	rjmp	.+188    	; 0x7dcc <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    7d10:	80 91 77 2d 	lds	r24, 0x2D77	; 0x802d77 <displayLineQueue>
    7d14:	90 91 78 2d 	lds	r25, 0x2D78	; 0x802d78 <displayLineQueue+0x1>
    7d18:	be 01       	movw	r22, r28
    7d1a:	67 5a       	subi	r22, 0xA7	; 167
    7d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    7d1e:	2f ef       	ldi	r18, 0xFF	; 255
    7d20:	3f ef       	ldi	r19, 0xFF	; 255
    7d22:	a9 01       	movw	r20, r18
    7d24:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <xQueueReceive>
    7d28:	88 23       	and	r24, r24
    7d2a:	09 f4       	brne	.+2      	; 0x7d2e <vDisplayUpdateTask+0x1a8>
    7d2c:	4f c0       	rjmp	.+158    	; 0x7dcc <vDisplayUpdateTask+0x246>
				i=0;			
    7d2e:	19 82       	std	Y+1, r1	; 0x01
    7d30:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    7d32:	32 c0       	rjmp	.+100    	; 0x7d98 <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    7d34:	ce 01       	movw	r24, r28
    7d36:	87 5a       	subi	r24, 0xA7	; 167
    7d38:	9f 4f       	sbci	r25, 0xFF	; 255
    7d3a:	fc 01       	movw	r30, r24
    7d3c:	80 81       	ld	r24, Z
    7d3e:	48 2f       	mov	r20, r24
    7d40:	50 e0       	ldi	r21, 0x00	; 0
    7d42:	ce 01       	movw	r24, r28
    7d44:	87 5a       	subi	r24, 0xA7	; 167
    7d46:	9f 4f       	sbci	r25, 0xFF	; 255
    7d48:	fc 01       	movw	r30, r24
    7d4a:	81 81       	ldd	r24, Z+1	; 0x01
    7d4c:	28 2f       	mov	r18, r24
    7d4e:	30 e0       	ldi	r19, 0x00	; 0
    7d50:	89 81       	ldd	r24, Y+1	; 0x01
    7d52:	9a 81       	ldd	r25, Y+2	; 0x02
    7d54:	82 0f       	add	r24, r18
    7d56:	93 1f       	adc	r25, r19
    7d58:	be 01       	movw	r22, r28
    7d5a:	67 5a       	subi	r22, 0xA7	; 167
    7d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    7d5e:	29 81       	ldd	r18, Y+1	; 0x01
    7d60:	3a 81       	ldd	r19, Y+2	; 0x02
    7d62:	26 0f       	add	r18, r22
    7d64:	37 1f       	adc	r19, r23
    7d66:	2e 5f       	subi	r18, 0xFE	; 254
    7d68:	3f 4f       	sbci	r19, 0xFF	; 255
    7d6a:	f9 01       	movw	r30, r18
    7d6c:	60 81       	ld	r22, Z
    7d6e:	74 e1       	ldi	r23, 0x14	; 20
    7d70:	74 9f       	mul	r23, r20
    7d72:	90 01       	movw	r18, r0
    7d74:	75 9f       	mul	r23, r21
    7d76:	30 0d       	add	r19, r0
    7d78:	11 24       	eor	r1, r1
    7d7a:	ae 01       	movw	r20, r28
    7d7c:	4f 5f       	subi	r20, 0xFF	; 255
    7d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    7d80:	24 0f       	add	r18, r20
    7d82:	35 1f       	adc	r19, r21
    7d84:	82 0f       	add	r24, r18
    7d86:	93 1f       	adc	r25, r19
    7d88:	08 96       	adiw	r24, 0x08	; 8
    7d8a:	fc 01       	movw	r30, r24
    7d8c:	60 83       	st	Z, r22
					i++;
    7d8e:	89 81       	ldd	r24, Y+1	; 0x01
    7d90:	9a 81       	ldd	r25, Y+2	; 0x02
    7d92:	01 96       	adiw	r24, 0x01	; 1
    7d94:	89 83       	std	Y+1, r24	; 0x01
    7d96:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    7d98:	ce 01       	movw	r24, r28
    7d9a:	87 5a       	subi	r24, 0xA7	; 167
    7d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d9e:	fc 01       	movw	r30, r24
    7da0:	81 81       	ldd	r24, Z+1	; 0x01
    7da2:	28 2f       	mov	r18, r24
    7da4:	30 e0       	ldi	r19, 0x00	; 0
    7da6:	89 81       	ldd	r24, Y+1	; 0x01
    7da8:	9a 81       	ldd	r25, Y+2	; 0x02
    7daa:	82 0f       	add	r24, r18
    7dac:	93 1f       	adc	r25, r19
    7dae:	44 97       	sbiw	r24, 0x14	; 20
    7db0:	6c f4       	brge	.+26     	; 0x7dcc <vDisplayUpdateTask+0x246>
    7db2:	9e 01       	movw	r18, r28
    7db4:	27 5a       	subi	r18, 0xA7	; 167
    7db6:	3f 4f       	sbci	r19, 0xFF	; 255
    7db8:	89 81       	ldd	r24, Y+1	; 0x01
    7dba:	9a 81       	ldd	r25, Y+2	; 0x02
    7dbc:	82 0f       	add	r24, r18
    7dbe:	93 1f       	adc	r25, r19
    7dc0:	02 96       	adiw	r24, 0x02	; 2
    7dc2:	fc 01       	movw	r30, r24
    7dc4:	80 81       	ld	r24, Z
    7dc6:	88 23       	and	r24, r24
    7dc8:	09 f0       	breq	.+2      	; 0x7dcc <vDisplayUpdateTask+0x246>
    7dca:	b4 cf       	rjmp	.-152    	; 0x7d34 <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    7dcc:	80 91 77 2d 	lds	r24, 0x2D77	; 0x802d77 <displayLineQueue>
    7dd0:	90 91 78 2d 	lds	r25, 0x2D78	; 0x802d78 <displayLineQueue+0x1>
    7dd4:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <uxQueueMessagesWaiting>
    7dd8:	88 23       	and	r24, r24
    7dda:	09 f0       	breq	.+2      	; 0x7dde <vDisplayUpdateTask+0x258>
    7ddc:	99 cf       	rjmp	.-206    	; 0x7d10 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    7dde:	19 82       	std	Y+1, r1	; 0x01
    7de0:	1a 82       	std	Y+2, r1	; 0x02
    7de2:	19 c0       	rjmp	.+50     	; 0x7e16 <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    7de4:	9e 01       	movw	r18, r28
    7de6:	27 5f       	subi	r18, 0xF7	; 247
    7de8:	3f 4f       	sbci	r19, 0xFF	; 255
    7dea:	49 81       	ldd	r20, Y+1	; 0x01
    7dec:	5a 81       	ldd	r21, Y+2	; 0x02
    7dee:	64 e1       	ldi	r22, 0x14	; 20
    7df0:	64 9f       	mul	r22, r20
    7df2:	c0 01       	movw	r24, r0
    7df4:	65 9f       	mul	r22, r21
    7df6:	90 0d       	add	r25, r0
    7df8:	11 24       	eor	r1, r1
    7dfa:	28 0f       	add	r18, r24
    7dfc:	39 1f       	adc	r19, r25
    7dfe:	89 81       	ldd	r24, Y+1	; 0x01
    7e00:	9a 81       	ldd	r25, Y+2	; 0x02
    7e02:	a9 01       	movw	r20, r18
    7e04:	60 e0       	ldi	r22, 0x00	; 0
    7e06:	70 e0       	ldi	r23, 0x00	; 0
    7e08:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    7e0c:	89 81       	ldd	r24, Y+1	; 0x01
    7e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    7e10:	01 96       	adiw	r24, 0x01	; 1
    7e12:	89 83       	std	Y+1, r24	; 0x01
    7e14:	9a 83       	std	Y+2, r25	; 0x02
    7e16:	89 81       	ldd	r24, Y+1	; 0x01
    7e18:	9a 81       	ldd	r25, Y+2	; 0x02
    7e1a:	04 97       	sbiw	r24, 0x04	; 4
    7e1c:	1c f3       	brlt	.-58     	; 0x7de4 <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    7e1e:	2a cf       	rjmp	.-428    	; 0x7c74 <vDisplayUpdateTask+0xee>

00007e20 <vDisplayClear>:
 }
 

void vDisplayClear() {
    7e20:	cf 93       	push	r28
    7e22:	df 93       	push	r29
    7e24:	cd b7       	in	r28, 0x3d	; 61
    7e26:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    7e28:	80 91 79 2d 	lds	r24, 0x2D79	; 0x802d79 <egDisplayTiming>
    7e2c:	90 91 7a 2d 	lds	r25, 0x2D7A	; 0x802d7a <egDisplayTiming+0x1>
    7e30:	42 e0       	ldi	r20, 0x02	; 2
    7e32:	50 e0       	ldi	r21, 0x00	; 0
    7e34:	60 e0       	ldi	r22, 0x00	; 0
    7e36:	70 e0       	ldi	r23, 0x00	; 0
    7e38:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <xEventGroupSetBits>
}
    7e3c:	00 00       	nop
    7e3e:	df 91       	pop	r29
    7e40:	cf 91       	pop	r28
    7e42:	08 95       	ret

00007e44 <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    7e44:	cf 93       	push	r28
    7e46:	df 93       	push	r29
    7e48:	1f 92       	push	r1
    7e4a:	1f 92       	push	r1
    7e4c:	cd b7       	in	r28, 0x3d	; 61
    7e4e:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    7e50:	ce 01       	movw	r24, r28
    7e52:	0e 96       	adiw	r24, 0x0e	; 14
    7e54:	89 83       	std	Y+1, r24	; 0x01
    7e56:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    7e58:	29 81       	ldd	r18, Y+1	; 0x01
    7e5a:	3a 81       	ldd	r19, Y+2	; 0x02
    7e5c:	4c 85       	ldd	r20, Y+12	; 0x0c
    7e5e:	5d 85       	ldd	r21, Y+13	; 0x0d
    7e60:	6a 85       	ldd	r22, Y+10	; 0x0a
    7e62:	7b 85       	ldd	r23, Y+11	; 0x0b
    7e64:	88 85       	ldd	r24, Y+8	; 0x08
    7e66:	99 85       	ldd	r25, Y+9	; 0x09
    7e68:	0e 94 3c 3f 	call	0x7e78	; 0x7e78 <display_vprintf>
	va_end(arg);	
}
    7e6c:	00 00       	nop
    7e6e:	0f 90       	pop	r0
    7e70:	0f 90       	pop	r0
    7e72:	df 91       	pop	r29
    7e74:	cf 91       	pop	r28
    7e76:	08 95       	ret

00007e78 <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    7e78:	0f 93       	push	r16
    7e7a:	cf 93       	push	r28
    7e7c:	df 93       	push	r29
    7e7e:	cd b7       	in	r28, 0x3d	; 61
    7e80:	de b7       	in	r29, 0x3e	; 62
    7e82:	ec 97       	sbiw	r28, 0x3c	; 60
    7e84:	cd bf       	out	0x3d, r28	; 61
    7e86:	de bf       	out	0x3e, r29	; 62
    7e88:	8d ab       	std	Y+53, r24	; 0x35
    7e8a:	9e ab       	std	Y+54, r25	; 0x36
    7e8c:	6f ab       	std	Y+55, r22	; 0x37
    7e8e:	78 af       	std	Y+56, r23	; 0x38
    7e90:	49 af       	std	Y+57, r20	; 0x39
    7e92:	5a af       	std	Y+58, r21	; 0x3a
    7e94:	2b af       	std	Y+59, r18	; 0x3b
    7e96:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    7e98:	19 82       	std	Y+1, r1	; 0x01
    7e9a:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    7e9c:	1b 82       	std	Y+3, r1	; 0x03
    7e9e:	1c 82       	std	Y+4, r1	; 0x04
    7ea0:	0b c0       	rjmp	.+22     	; 0x7eb8 <display_vprintf+0x40>
		buffer[i] = 0x00;
    7ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    7ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    7ea6:	88 5c       	subi	r24, 0xC8	; 200
    7ea8:	92 4d       	sbci	r25, 0xD2	; 210
    7eaa:	fc 01       	movw	r30, r24
    7eac:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    7eae:	8b 81       	ldd	r24, Y+3	; 0x03
    7eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    7eb2:	01 96       	adiw	r24, 0x01	; 1
    7eb4:	8b 83       	std	Y+3, r24	; 0x03
    7eb6:	9c 83       	std	Y+4, r25	; 0x04
    7eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    7eba:	9c 81       	ldd	r25, Y+4	; 0x04
    7ebc:	44 97       	sbiw	r24, 0x14	; 20
    7ebe:	8c f3       	brlt	.-30     	; 0x7ea2 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    7ec0:	1d 82       	std	Y+5, r1	; 0x05
    7ec2:	1e 82       	std	Y+6, r1	; 0x06
    7ec4:	0b c0       	rjmp	.+22     	; 0x7edc <display_vprintf+0x64>
		str[i] = 0x00;
    7ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    7ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    7eca:	84 5b       	subi	r24, 0xB4	; 180
    7ecc:	92 4d       	sbci	r25, 0xD2	; 210
    7ece:	fc 01       	movw	r30, r24
    7ed0:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    7ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    7ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    7ed6:	01 96       	adiw	r24, 0x01	; 1
    7ed8:	8d 83       	std	Y+5, r24	; 0x05
    7eda:	9e 83       	std	Y+6, r25	; 0x06
    7edc:	8d 81       	ldd	r24, Y+5	; 0x05
    7ede:	9e 81       	ldd	r25, Y+6	; 0x06
    7ee0:	44 97       	sbiw	r24, 0x14	; 20
    7ee2:	8c f3       	brlt	.-30     	; 0x7ec6 <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    7ee4:	be c1       	rjmp	.+892    	; 0x8262 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    7ee6:	8d 89       	ldd	r24, Y+21	; 0x15
    7ee8:	85 32       	cpi	r24, 0x25	; 37
    7eea:	09 f0       	breq	.+2      	; 0x7eee <display_vprintf+0x76>
    7eec:	a0 c1       	rjmp	.+832    	; 0x822e <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    7eee:	89 ad       	ldd	r24, Y+57	; 0x39
    7ef0:	9a ad       	ldd	r25, Y+58	; 0x3a
    7ef2:	9c 01       	movw	r18, r24
    7ef4:	2f 5f       	subi	r18, 0xFF	; 255
    7ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    7ef8:	29 af       	std	Y+57, r18	; 0x39
    7efa:	3a af       	std	Y+58, r19	; 0x3a
    7efc:	fc 01       	movw	r30, r24
    7efe:	80 81       	ld	r24, Z
    7f00:	8d 8b       	std	Y+21, r24	; 0x15
    7f02:	8d 89       	ldd	r24, Y+21	; 0x15
    7f04:	88 2f       	mov	r24, r24
    7f06:	90 e0       	ldi	r25, 0x00	; 0
    7f08:	85 36       	cpi	r24, 0x65	; 101
    7f0a:	91 05       	cpc	r25, r1
    7f0c:	09 f4       	brne	.+2      	; 0x7f10 <display_vprintf+0x98>
    7f0e:	46 c1       	rjmp	.+652    	; 0x819c <display_vprintf+0x324>
    7f10:	86 36       	cpi	r24, 0x66	; 102
    7f12:	91 05       	cpc	r25, r1
    7f14:	54 f4       	brge	.+20     	; 0x7f2a <display_vprintf+0xb2>
    7f16:	83 36       	cpi	r24, 0x63	; 99
    7f18:	91 05       	cpc	r25, r1
    7f1a:	01 f1       	breq	.+64     	; 0x7f5c <display_vprintf+0xe4>
    7f1c:	84 36       	cpi	r24, 0x64	; 100
    7f1e:	91 05       	cpc	r25, r1
    7f20:	0c f0       	brlt	.+2      	; 0x7f24 <display_vprintf+0xac>
    7f22:	70 c0       	rjmp	.+224    	; 0x8004 <display_vprintf+0x18c>
    7f24:	85 97       	sbiw	r24, 0x25	; 37
    7f26:	69 f0       	breq	.+26     	; 0x7f42 <display_vprintf+0xca>
    7f28:	9c c1       	rjmp	.+824    	; 0x8262 <display_vprintf+0x3ea>
    7f2a:	83 37       	cpi	r24, 0x73	; 115
    7f2c:	91 05       	cpc	r25, r1
    7f2e:	71 f1       	breq	.+92     	; 0x7f8c <display_vprintf+0x114>
    7f30:	88 37       	cpi	r24, 0x78	; 120
    7f32:	91 05       	cpc	r25, r1
    7f34:	09 f4       	brne	.+2      	; 0x7f38 <display_vprintf+0xc0>
    7f36:	a8 c0       	rjmp	.+336    	; 0x8088 <display_vprintf+0x210>
    7f38:	86 36       	cpi	r24, 0x66	; 102
    7f3a:	91 05       	cpc	r25, r1
    7f3c:	09 f4       	brne	.+2      	; 0x7f40 <display_vprintf+0xc8>
    7f3e:	e6 c0       	rjmp	.+460    	; 0x810c <display_vprintf+0x294>
    7f40:	90 c1       	rjmp	.+800    	; 0x8262 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    7f42:	89 81       	ldd	r24, Y+1	; 0x01
    7f44:	9a 81       	ldd	r25, Y+2	; 0x02
    7f46:	84 5b       	subi	r24, 0xB4	; 180
    7f48:	92 4d       	sbci	r25, 0xD2	; 210
    7f4a:	25 e2       	ldi	r18, 0x25	; 37
    7f4c:	fc 01       	movw	r30, r24
    7f4e:	20 83       	st	Z, r18
				length++;
    7f50:	89 81       	ldd	r24, Y+1	; 0x01
    7f52:	9a 81       	ldd	r25, Y+2	; 0x02
    7f54:	01 96       	adiw	r24, 0x01	; 1
    7f56:	89 83       	std	Y+1, r24	; 0x01
    7f58:	9a 83       	std	Y+2, r25	; 0x02
				break;
    7f5a:	83 c1       	rjmp	.+774    	; 0x8262 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    7f5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    7f5e:	9c ad       	ldd	r25, Y+60	; 0x3c
    7f60:	9c 01       	movw	r18, r24
    7f62:	2e 5f       	subi	r18, 0xFE	; 254
    7f64:	3f 4f       	sbci	r19, 0xFF	; 255
    7f66:	2b af       	std	Y+59, r18	; 0x3b
    7f68:	3c af       	std	Y+60, r19	; 0x3c
    7f6a:	fc 01       	movw	r30, r24
    7f6c:	80 81       	ld	r24, Z
    7f6e:	91 81       	ldd	r25, Z+1	; 0x01
    7f70:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    7f72:	89 81       	ldd	r24, Y+1	; 0x01
    7f74:	9a 81       	ldd	r25, Y+2	; 0x02
    7f76:	84 5b       	subi	r24, 0xB4	; 180
    7f78:	92 4d       	sbci	r25, 0xD2	; 210
    7f7a:	2e 89       	ldd	r18, Y+22	; 0x16
    7f7c:	fc 01       	movw	r30, r24
    7f7e:	20 83       	st	Z, r18
				length++;
    7f80:	89 81       	ldd	r24, Y+1	; 0x01
    7f82:	9a 81       	ldd	r25, Y+2	; 0x02
    7f84:	01 96       	adiw	r24, 0x01	; 1
    7f86:	89 83       	std	Y+1, r24	; 0x01
    7f88:	9a 83       	std	Y+2, r25	; 0x02
				break;
    7f8a:	6b c1       	rjmp	.+726    	; 0x8262 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    7f8c:	8b ad       	ldd	r24, Y+59	; 0x3b
    7f8e:	9c ad       	ldd	r25, Y+60	; 0x3c
    7f90:	9c 01       	movw	r18, r24
    7f92:	2e 5f       	subi	r18, 0xFE	; 254
    7f94:	3f 4f       	sbci	r19, 0xFF	; 255
    7f96:	2b af       	std	Y+59, r18	; 0x3b
    7f98:	3c af       	std	Y+60, r19	; 0x3c
    7f9a:	fc 01       	movw	r30, r24
    7f9c:	80 81       	ld	r24, Z
    7f9e:	91 81       	ldd	r25, Z+1	; 0x01
    7fa0:	8f 8b       	std	Y+23, r24	; 0x17
    7fa2:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    7fa4:	1f 82       	std	Y+7, r1	; 0x07
    7fa6:	18 86       	std	Y+8, r1	; 0x08
    7fa8:	17 c0       	rjmp	.+46     	; 0x7fd8 <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    7faa:	29 81       	ldd	r18, Y+1	; 0x01
    7fac:	3a 81       	ldd	r19, Y+2	; 0x02
    7fae:	8f 81       	ldd	r24, Y+7	; 0x07
    7fb0:	98 85       	ldd	r25, Y+8	; 0x08
    7fb2:	82 0f       	add	r24, r18
    7fb4:	93 1f       	adc	r25, r19
    7fb6:	2f 81       	ldd	r18, Y+7	; 0x07
    7fb8:	38 85       	ldd	r19, Y+8	; 0x08
    7fba:	4f 89       	ldd	r20, Y+23	; 0x17
    7fbc:	58 8d       	ldd	r21, Y+24	; 0x18
    7fbe:	24 0f       	add	r18, r20
    7fc0:	35 1f       	adc	r19, r21
    7fc2:	f9 01       	movw	r30, r18
    7fc4:	20 81       	ld	r18, Z
    7fc6:	84 5b       	subi	r24, 0xB4	; 180
    7fc8:	92 4d       	sbci	r25, 0xD2	; 210
    7fca:	fc 01       	movw	r30, r24
    7fcc:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    7fce:	8f 81       	ldd	r24, Y+7	; 0x07
    7fd0:	98 85       	ldd	r25, Y+8	; 0x08
    7fd2:	01 96       	adiw	r24, 0x01	; 1
    7fd4:	8f 83       	std	Y+7, r24	; 0x07
    7fd6:	98 87       	std	Y+8, r25	; 0x08
    7fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    7fda:	98 8d       	ldd	r25, Y+24	; 0x18
    7fdc:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    7fe0:	9c 01       	movw	r18, r24
    7fe2:	8f 81       	ldd	r24, Y+7	; 0x07
    7fe4:	98 85       	ldd	r25, Y+8	; 0x08
    7fe6:	82 17       	cp	r24, r18
    7fe8:	93 07       	cpc	r25, r19
    7fea:	f8 f2       	brcs	.-66     	; 0x7faa <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    7fec:	8f 89       	ldd	r24, Y+23	; 0x17
    7fee:	98 8d       	ldd	r25, Y+24	; 0x18
    7ff0:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    7ff4:	9c 01       	movw	r18, r24
    7ff6:	89 81       	ldd	r24, Y+1	; 0x01
    7ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    7ffa:	82 0f       	add	r24, r18
    7ffc:	93 1f       	adc	r25, r19
    7ffe:	89 83       	std	Y+1, r24	; 0x01
    8000:	9a 83       	std	Y+2, r25	; 0x02
				break;
    8002:	2f c1       	rjmp	.+606    	; 0x8262 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    8004:	8b ad       	ldd	r24, Y+59	; 0x3b
    8006:	9c ad       	ldd	r25, Y+60	; 0x3c
    8008:	9c 01       	movw	r18, r24
    800a:	2e 5f       	subi	r18, 0xFE	; 254
    800c:	3f 4f       	sbci	r19, 0xFF	; 255
    800e:	2b af       	std	Y+59, r18	; 0x3b
    8010:	3c af       	std	Y+60, r19	; 0x3c
    8012:	fc 01       	movw	r30, r24
    8014:	80 81       	ld	r24, Z
    8016:	91 81       	ldd	r25, Z+1	; 0x01
    8018:	89 8f       	std	Y+25, r24	; 0x19
    801a:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    801c:	89 8d       	ldd	r24, Y+25	; 0x19
    801e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    8020:	4a e0       	ldi	r20, 0x0A	; 10
    8022:	50 e0       	ldi	r21, 0x00	; 0
    8024:	68 e3       	ldi	r22, 0x38	; 56
    8026:	7d e2       	ldi	r23, 0x2D	; 45
    8028:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    802c:	19 86       	std	Y+9, r1	; 0x09
    802e:	1a 86       	std	Y+10, r1	; 0x0a
    8030:	15 c0       	rjmp	.+42     	; 0x805c <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    8032:	29 81       	ldd	r18, Y+1	; 0x01
    8034:	3a 81       	ldd	r19, Y+2	; 0x02
    8036:	89 85       	ldd	r24, Y+9	; 0x09
    8038:	9a 85       	ldd	r25, Y+10	; 0x0a
    803a:	82 0f       	add	r24, r18
    803c:	93 1f       	adc	r25, r19
    803e:	29 85       	ldd	r18, Y+9	; 0x09
    8040:	3a 85       	ldd	r19, Y+10	; 0x0a
    8042:	28 5c       	subi	r18, 0xC8	; 200
    8044:	32 4d       	sbci	r19, 0xD2	; 210
    8046:	f9 01       	movw	r30, r18
    8048:	20 81       	ld	r18, Z
    804a:	84 5b       	subi	r24, 0xB4	; 180
    804c:	92 4d       	sbci	r25, 0xD2	; 210
    804e:	fc 01       	movw	r30, r24
    8050:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    8052:	89 85       	ldd	r24, Y+9	; 0x09
    8054:	9a 85       	ldd	r25, Y+10	; 0x0a
    8056:	01 96       	adiw	r24, 0x01	; 1
    8058:	89 87       	std	Y+9, r24	; 0x09
    805a:	9a 87       	std	Y+10, r25	; 0x0a
    805c:	88 e3       	ldi	r24, 0x38	; 56
    805e:	9d e2       	ldi	r25, 0x2D	; 45
    8060:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    8064:	9c 01       	movw	r18, r24
    8066:	89 85       	ldd	r24, Y+9	; 0x09
    8068:	9a 85       	ldd	r25, Y+10	; 0x0a
    806a:	82 17       	cp	r24, r18
    806c:	93 07       	cpc	r25, r19
    806e:	08 f3       	brcs	.-62     	; 0x8032 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    8070:	88 e3       	ldi	r24, 0x38	; 56
    8072:	9d e2       	ldi	r25, 0x2D	; 45
    8074:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    8078:	9c 01       	movw	r18, r24
    807a:	89 81       	ldd	r24, Y+1	; 0x01
    807c:	9a 81       	ldd	r25, Y+2	; 0x02
    807e:	82 0f       	add	r24, r18
    8080:	93 1f       	adc	r25, r19
    8082:	89 83       	std	Y+1, r24	; 0x01
    8084:	9a 83       	std	Y+2, r25	; 0x02
				break;
    8086:	ed c0       	rjmp	.+474    	; 0x8262 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    8088:	8b ad       	ldd	r24, Y+59	; 0x3b
    808a:	9c ad       	ldd	r25, Y+60	; 0x3c
    808c:	9c 01       	movw	r18, r24
    808e:	2e 5f       	subi	r18, 0xFE	; 254
    8090:	3f 4f       	sbci	r19, 0xFF	; 255
    8092:	2b af       	std	Y+59, r18	; 0x3b
    8094:	3c af       	std	Y+60, r19	; 0x3c
    8096:	fc 01       	movw	r30, r24
    8098:	80 81       	ld	r24, Z
    809a:	91 81       	ldd	r25, Z+1	; 0x01
    809c:	89 8f       	std	Y+25, r24	; 0x19
    809e:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    80a0:	89 8d       	ldd	r24, Y+25	; 0x19
    80a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    80a4:	40 e1       	ldi	r20, 0x10	; 16
    80a6:	50 e0       	ldi	r21, 0x00	; 0
    80a8:	68 e3       	ldi	r22, 0x38	; 56
    80aa:	7d e2       	ldi	r23, 0x2D	; 45
    80ac:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    80b0:	1b 86       	std	Y+11, r1	; 0x0b
    80b2:	1c 86       	std	Y+12, r1	; 0x0c
    80b4:	15 c0       	rjmp	.+42     	; 0x80e0 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    80b6:	29 81       	ldd	r18, Y+1	; 0x01
    80b8:	3a 81       	ldd	r19, Y+2	; 0x02
    80ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    80bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    80be:	82 0f       	add	r24, r18
    80c0:	93 1f       	adc	r25, r19
    80c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    80c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    80c6:	28 5c       	subi	r18, 0xC8	; 200
    80c8:	32 4d       	sbci	r19, 0xD2	; 210
    80ca:	f9 01       	movw	r30, r18
    80cc:	20 81       	ld	r18, Z
    80ce:	84 5b       	subi	r24, 0xB4	; 180
    80d0:	92 4d       	sbci	r25, 0xD2	; 210
    80d2:	fc 01       	movw	r30, r24
    80d4:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    80d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    80d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    80da:	01 96       	adiw	r24, 0x01	; 1
    80dc:	8b 87       	std	Y+11, r24	; 0x0b
    80de:	9c 87       	std	Y+12, r25	; 0x0c
    80e0:	88 e3       	ldi	r24, 0x38	; 56
    80e2:	9d e2       	ldi	r25, 0x2D	; 45
    80e4:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    80e8:	9c 01       	movw	r18, r24
    80ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    80ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    80ee:	82 17       	cp	r24, r18
    80f0:	93 07       	cpc	r25, r19
    80f2:	08 f3       	brcs	.-62     	; 0x80b6 <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    80f4:	88 e3       	ldi	r24, 0x38	; 56
    80f6:	9d e2       	ldi	r25, 0x2D	; 45
    80f8:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    80fc:	9c 01       	movw	r18, r24
    80fe:	89 81       	ldd	r24, Y+1	; 0x01
    8100:	9a 81       	ldd	r25, Y+2	; 0x02
    8102:	82 0f       	add	r24, r18
    8104:	93 1f       	adc	r25, r19
    8106:	89 83       	std	Y+1, r24	; 0x01
    8108:	9a 83       	std	Y+2, r25	; 0x02
				break;
    810a:	ab c0       	rjmp	.+342    	; 0x8262 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    810c:	8b ad       	ldd	r24, Y+59	; 0x3b
    810e:	9c ad       	ldd	r25, Y+60	; 0x3c
    8110:	9c 01       	movw	r18, r24
    8112:	2c 5f       	subi	r18, 0xFC	; 252
    8114:	3f 4f       	sbci	r19, 0xFF	; 255
    8116:	2b af       	std	Y+59, r18	; 0x3b
    8118:	3c af       	std	Y+60, r19	; 0x3c
    811a:	fc 01       	movw	r30, r24
    811c:	80 81       	ld	r24, Z
    811e:	91 81       	ldd	r25, Z+1	; 0x01
    8120:	a2 81       	ldd	r26, Z+2	; 0x02
    8122:	b3 81       	ldd	r27, Z+3	; 0x03
    8124:	8b 8f       	std	Y+27, r24	; 0x1b
    8126:	9c 8f       	std	Y+28, r25	; 0x1c
    8128:	ad 8f       	std	Y+29, r26	; 0x1d
    812a:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    812c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    812e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8130:	ad 8d       	ldd	r26, Y+29	; 0x1d
    8132:	be 8d       	ldd	r27, Y+30	; 0x1e
    8134:	ac 01       	movw	r20, r24
    8136:	bd 01       	movw	r22, r26
    8138:	88 e3       	ldi	r24, 0x38	; 56
    813a:	9d e2       	ldi	r25, 0x2D	; 45
    813c:	0e 94 0b 42 	call	0x8416	; 0x8416 <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    8140:	1d 86       	std	Y+13, r1	; 0x0d
    8142:	1e 86       	std	Y+14, r1	; 0x0e
    8144:	15 c0       	rjmp	.+42     	; 0x8170 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    8146:	29 81       	ldd	r18, Y+1	; 0x01
    8148:	3a 81       	ldd	r19, Y+2	; 0x02
    814a:	8d 85       	ldd	r24, Y+13	; 0x0d
    814c:	9e 85       	ldd	r25, Y+14	; 0x0e
    814e:	82 0f       	add	r24, r18
    8150:	93 1f       	adc	r25, r19
    8152:	2d 85       	ldd	r18, Y+13	; 0x0d
    8154:	3e 85       	ldd	r19, Y+14	; 0x0e
    8156:	28 5c       	subi	r18, 0xC8	; 200
    8158:	32 4d       	sbci	r19, 0xD2	; 210
    815a:	f9 01       	movw	r30, r18
    815c:	20 81       	ld	r18, Z
    815e:	84 5b       	subi	r24, 0xB4	; 180
    8160:	92 4d       	sbci	r25, 0xD2	; 210
    8162:	fc 01       	movw	r30, r24
    8164:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    8166:	8d 85       	ldd	r24, Y+13	; 0x0d
    8168:	9e 85       	ldd	r25, Y+14	; 0x0e
    816a:	01 96       	adiw	r24, 0x01	; 1
    816c:	8d 87       	std	Y+13, r24	; 0x0d
    816e:	9e 87       	std	Y+14, r25	; 0x0e
    8170:	88 e3       	ldi	r24, 0x38	; 56
    8172:	9d e2       	ldi	r25, 0x2D	; 45
    8174:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    8178:	9c 01       	movw	r18, r24
    817a:	8d 85       	ldd	r24, Y+13	; 0x0d
    817c:	9e 85       	ldd	r25, Y+14	; 0x0e
    817e:	82 17       	cp	r24, r18
    8180:	93 07       	cpc	r25, r19
    8182:	08 f3       	brcs	.-62     	; 0x8146 <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    8184:	88 e3       	ldi	r24, 0x38	; 56
    8186:	9d e2       	ldi	r25, 0x2D	; 45
    8188:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    818c:	9c 01       	movw	r18, r24
    818e:	89 81       	ldd	r24, Y+1	; 0x01
    8190:	9a 81       	ldd	r25, Y+2	; 0x02
    8192:	82 0f       	add	r24, r18
    8194:	93 1f       	adc	r25, r19
    8196:	89 83       	std	Y+1, r24	; 0x01
    8198:	9a 83       	std	Y+2, r25	; 0x02
				break;
    819a:	63 c0       	rjmp	.+198    	; 0x8262 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    819c:	8b ad       	ldd	r24, Y+59	; 0x3b
    819e:	9c ad       	ldd	r25, Y+60	; 0x3c
    81a0:	9c 01       	movw	r18, r24
    81a2:	2c 5f       	subi	r18, 0xFC	; 252
    81a4:	3f 4f       	sbci	r19, 0xFF	; 255
    81a6:	2b af       	std	Y+59, r18	; 0x3b
    81a8:	3c af       	std	Y+60, r19	; 0x3c
    81aa:	fc 01       	movw	r30, r24
    81ac:	80 81       	ld	r24, Z
    81ae:	91 81       	ldd	r25, Z+1	; 0x01
    81b0:	a2 81       	ldd	r26, Z+2	; 0x02
    81b2:	b3 81       	ldd	r27, Z+3	; 0x03
    81b4:	8b 8f       	std	Y+27, r24	; 0x1b
    81b6:	9c 8f       	std	Y+28, r25	; 0x1c
    81b8:	ad 8f       	std	Y+29, r26	; 0x1d
    81ba:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    81bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    81be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    81c0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    81c2:	be 8d       	ldd	r27, Y+30	; 0x1e
    81c4:	ac 01       	movw	r20, r24
    81c6:	bd 01       	movw	r22, r26
    81c8:	88 e3       	ldi	r24, 0x38	; 56
    81ca:	9d e2       	ldi	r25, 0x2D	; 45
    81cc:	0e 94 5a 43 	call	0x86b4	; 0x86b4 <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    81d0:	1f 86       	std	Y+15, r1	; 0x0f
    81d2:	18 8a       	std	Y+16, r1	; 0x10
    81d4:	15 c0       	rjmp	.+42     	; 0x8200 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    81d6:	29 81       	ldd	r18, Y+1	; 0x01
    81d8:	3a 81       	ldd	r19, Y+2	; 0x02
    81da:	8f 85       	ldd	r24, Y+15	; 0x0f
    81dc:	98 89       	ldd	r25, Y+16	; 0x10
    81de:	82 0f       	add	r24, r18
    81e0:	93 1f       	adc	r25, r19
    81e2:	2f 85       	ldd	r18, Y+15	; 0x0f
    81e4:	38 89       	ldd	r19, Y+16	; 0x10
    81e6:	28 5c       	subi	r18, 0xC8	; 200
    81e8:	32 4d       	sbci	r19, 0xD2	; 210
    81ea:	f9 01       	movw	r30, r18
    81ec:	20 81       	ld	r18, Z
    81ee:	84 5b       	subi	r24, 0xB4	; 180
    81f0:	92 4d       	sbci	r25, 0xD2	; 210
    81f2:	fc 01       	movw	r30, r24
    81f4:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    81f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    81f8:	98 89       	ldd	r25, Y+16	; 0x10
    81fa:	01 96       	adiw	r24, 0x01	; 1
    81fc:	8f 87       	std	Y+15, r24	; 0x0f
    81fe:	98 8b       	std	Y+16, r25	; 0x10
    8200:	88 e3       	ldi	r24, 0x38	; 56
    8202:	9d e2       	ldi	r25, 0x2D	; 45
    8204:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    8208:	9c 01       	movw	r18, r24
    820a:	8f 85       	ldd	r24, Y+15	; 0x0f
    820c:	98 89       	ldd	r25, Y+16	; 0x10
    820e:	82 17       	cp	r24, r18
    8210:	93 07       	cpc	r25, r19
    8212:	08 f3       	brcs	.-62     	; 0x81d6 <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    8214:	88 e3       	ldi	r24, 0x38	; 56
    8216:	9d e2       	ldi	r25, 0x2D	; 45
    8218:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <strlen>
    821c:	9c 01       	movw	r18, r24
    821e:	89 81       	ldd	r24, Y+1	; 0x01
    8220:	9a 81       	ldd	r25, Y+2	; 0x02
    8222:	82 0f       	add	r24, r18
    8224:	93 1f       	adc	r25, r19
    8226:	89 83       	std	Y+1, r24	; 0x01
    8228:	9a 83       	std	Y+2, r25	; 0x02
				break;
    822a:	00 00       	nop
    822c:	1a c0       	rjmp	.+52     	; 0x8262 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    822e:	89 81       	ldd	r24, Y+1	; 0x01
    8230:	9a 81       	ldd	r25, Y+2	; 0x02
    8232:	84 5b       	subi	r24, 0xB4	; 180
    8234:	92 4d       	sbci	r25, 0xD2	; 210
    8236:	2d 89       	ldd	r18, Y+21	; 0x15
    8238:	fc 01       	movw	r30, r24
    823a:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    823c:	89 81       	ldd	r24, Y+1	; 0x01
    823e:	9a 81       	ldd	r25, Y+2	; 0x02
    8240:	84 5b       	subi	r24, 0xB4	; 180
    8242:	92 4d       	sbci	r25, 0xD2	; 210
    8244:	fc 01       	movw	r30, r24
    8246:	80 81       	ld	r24, Z
    8248:	8a 30       	cpi	r24, 0x0A	; 10
    824a:	31 f4       	brne	.+12     	; 0x8258 <display_vprintf+0x3e0>
				str[length] = '\0';				
    824c:	89 81       	ldd	r24, Y+1	; 0x01
    824e:	9a 81       	ldd	r25, Y+2	; 0x02
    8250:	84 5b       	subi	r24, 0xB4	; 180
    8252:	92 4d       	sbci	r25, 0xD2	; 210
    8254:	fc 01       	movw	r30, r24
    8256:	10 82       	st	Z, r1
			}
			length++;
    8258:	89 81       	ldd	r24, Y+1	; 0x01
    825a:	9a 81       	ldd	r25, Y+2	; 0x02
    825c:	01 96       	adiw	r24, 0x01	; 1
    825e:	89 83       	std	Y+1, r24	; 0x01
    8260:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    8262:	89 ad       	ldd	r24, Y+57	; 0x39
    8264:	9a ad       	ldd	r25, Y+58	; 0x3a
    8266:	9c 01       	movw	r18, r24
    8268:	2f 5f       	subi	r18, 0xFF	; 255
    826a:	3f 4f       	sbci	r19, 0xFF	; 255
    826c:	29 af       	std	Y+57, r18	; 0x39
    826e:	3a af       	std	Y+58, r19	; 0x3a
    8270:	fc 01       	movw	r30, r24
    8272:	80 81       	ld	r24, Z
    8274:	8d 8b       	std	Y+21, r24	; 0x15
    8276:	8d 89       	ldd	r24, Y+21	; 0x15
    8278:	88 23       	and	r24, r24
    827a:	09 f0       	breq	.+2      	; 0x827e <display_vprintf+0x406>
    827c:	34 ce       	rjmp	.-920    	; 0x7ee6 <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    827e:	29 81       	ldd	r18, Y+1	; 0x01
    8280:	3a 81       	ldd	r19, Y+2	; 0x02
    8282:	8f a9       	ldd	r24, Y+55	; 0x37
    8284:	98 ad       	ldd	r25, Y+56	; 0x38
    8286:	82 0f       	add	r24, r18
    8288:	93 1f       	adc	r25, r19
    828a:	44 97       	sbiw	r24, 0x14	; 20
    828c:	54 f0       	brlt	.+20     	; 0x82a2 <display_vprintf+0x42a>
		length = 20-pos;
    828e:	24 e1       	ldi	r18, 0x14	; 20
    8290:	30 e0       	ldi	r19, 0x00	; 0
    8292:	8f a9       	ldd	r24, Y+55	; 0x37
    8294:	98 ad       	ldd	r25, Y+56	; 0x38
    8296:	a9 01       	movw	r20, r18
    8298:	48 1b       	sub	r20, r24
    829a:	59 0b       	sbc	r21, r25
    829c:	ca 01       	movw	r24, r20
    829e:	89 83       	std	Y+1, r24	; 0x01
    82a0:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    82a2:	19 8a       	std	Y+17, r1	; 0x11
    82a4:	1a 8a       	std	Y+18, r1	; 0x12
    82a6:	0e c0       	rjmp	.+28     	; 0x82c4 <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    82a8:	9e 01       	movw	r18, r28
    82aa:	2f 5d       	subi	r18, 0xDF	; 223
    82ac:	3f 4f       	sbci	r19, 0xFF	; 255
    82ae:	89 89       	ldd	r24, Y+17	; 0x11
    82b0:	9a 89       	ldd	r25, Y+18	; 0x12
    82b2:	82 0f       	add	r24, r18
    82b4:	93 1f       	adc	r25, r19
    82b6:	fc 01       	movw	r30, r24
    82b8:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    82ba:	89 89       	ldd	r24, Y+17	; 0x11
    82bc:	9a 89       	ldd	r25, Y+18	; 0x12
    82be:	01 96       	adiw	r24, 0x01	; 1
    82c0:	89 8b       	std	Y+17, r24	; 0x11
    82c2:	9a 8b       	std	Y+18, r25	; 0x12
    82c4:	89 89       	ldd	r24, Y+17	; 0x11
    82c6:	9a 89       	ldd	r25, Y+18	; 0x12
    82c8:	44 97       	sbiw	r24, 0x14	; 20
    82ca:	74 f3       	brlt	.-36     	; 0x82a8 <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    82cc:	8d a9       	ldd	r24, Y+53	; 0x35
    82ce:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    82d0:	8f a9       	ldd	r24, Y+55	; 0x37
    82d2:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    82d4:	1b 8a       	std	Y+19, r1	; 0x13
    82d6:	1c 8a       	std	Y+20, r1	; 0x14
    82d8:	14 c0       	rjmp	.+40     	; 0x8302 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    82da:	8b 89       	ldd	r24, Y+19	; 0x13
    82dc:	9c 89       	ldd	r25, Y+20	; 0x14
    82de:	84 5b       	subi	r24, 0xB4	; 180
    82e0:	92 4d       	sbci	r25, 0xD2	; 210
    82e2:	fc 01       	movw	r30, r24
    82e4:	40 81       	ld	r20, Z
    82e6:	9e 01       	movw	r18, r28
    82e8:	2f 5d       	subi	r18, 0xDF	; 223
    82ea:	3f 4f       	sbci	r19, 0xFF	; 255
    82ec:	8b 89       	ldd	r24, Y+19	; 0x13
    82ee:	9c 89       	ldd	r25, Y+20	; 0x14
    82f0:	82 0f       	add	r24, r18
    82f2:	93 1f       	adc	r25, r19
    82f4:	fc 01       	movw	r30, r24
    82f6:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    82f8:	8b 89       	ldd	r24, Y+19	; 0x13
    82fa:	9c 89       	ldd	r25, Y+20	; 0x14
    82fc:	01 96       	adiw	r24, 0x01	; 1
    82fe:	8b 8b       	std	Y+19, r24	; 0x13
    8300:	9c 8b       	std	Y+20, r25	; 0x14
    8302:	2b 89       	ldd	r18, Y+19	; 0x13
    8304:	3c 89       	ldd	r19, Y+20	; 0x14
    8306:	89 81       	ldd	r24, Y+1	; 0x01
    8308:	9a 81       	ldd	r25, Y+2	; 0x02
    830a:	28 17       	cp	r18, r24
    830c:	39 07       	cpc	r19, r25
    830e:	2c f3       	brlt	.-54     	; 0x82da <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    8310:	80 91 77 2d 	lds	r24, 0x2D77	; 0x802d77 <displayLineQueue>
    8314:	90 91 78 2d 	lds	r25, 0x2D78	; 0x802d78 <displayLineQueue+0x1>
    8318:	be 01       	movw	r22, r28
    831a:	61 5e       	subi	r22, 0xE1	; 225
    831c:	7f 4f       	sbci	r23, 0xFF	; 255
    831e:	00 e0       	ldi	r16, 0x00	; 0
    8320:	2f ef       	ldi	r18, 0xFF	; 255
    8322:	3f ef       	ldi	r19, 0xFF	; 255
    8324:	a9 01       	movw	r20, r18
    8326:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <xQueueGenericSend>
	
	
	return length;
    832a:	89 81       	ldd	r24, Y+1	; 0x01
    832c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    832e:	ec 96       	adiw	r28, 0x3c	; 60
    8330:	cd bf       	out	0x3d, r28	; 61
    8332:	de bf       	out	0x3e, r29	; 62
    8334:	df 91       	pop	r29
    8336:	cf 91       	pop	r28
    8338:	0f 91       	pop	r16
    833a:	08 95       	ret

0000833c <normalize>:

static int normalize(double *val) {
    833c:	cf 93       	push	r28
    833e:	df 93       	push	r29
    8340:	cd b7       	in	r28, 0x3d	; 61
    8342:	de b7       	in	r29, 0x3e	; 62
    8344:	28 97       	sbiw	r28, 0x08	; 8
    8346:	cd bf       	out	0x3d, r28	; 61
    8348:	de bf       	out	0x3e, r29	; 62
    834a:	8f 83       	std	Y+7, r24	; 0x07
    834c:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    834e:	19 82       	std	Y+1, r1	; 0x01
    8350:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    8352:	8f 81       	ldd	r24, Y+7	; 0x07
    8354:	98 85       	ldd	r25, Y+8	; 0x08
    8356:	fc 01       	movw	r30, r24
    8358:	80 81       	ld	r24, Z
    835a:	91 81       	ldd	r25, Z+1	; 0x01
    835c:	a2 81       	ldd	r26, Z+2	; 0x02
    835e:	b3 81       	ldd	r27, Z+3	; 0x03
    8360:	8b 83       	std	Y+3, r24	; 0x03
    8362:	9c 83       	std	Y+4, r25	; 0x04
    8364:	ad 83       	std	Y+5, r26	; 0x05
    8366:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    8368:	15 c0       	rjmp	.+42     	; 0x8394 <normalize+0x58>
        value /= 10.0;
    836a:	20 e0       	ldi	r18, 0x00	; 0
    836c:	30 e0       	ldi	r19, 0x00	; 0
    836e:	40 e2       	ldi	r20, 0x20	; 32
    8370:	51 e4       	ldi	r21, 0x41	; 65
    8372:	6b 81       	ldd	r22, Y+3	; 0x03
    8374:	7c 81       	ldd	r23, Y+4	; 0x04
    8376:	8d 81       	ldd	r24, Y+5	; 0x05
    8378:	9e 81       	ldd	r25, Y+6	; 0x06
    837a:	0e 94 ed 44 	call	0x89da	; 0x89da <__divsf3>
    837e:	dc 01       	movw	r26, r24
    8380:	cb 01       	movw	r24, r22
    8382:	8b 83       	std	Y+3, r24	; 0x03
    8384:	9c 83       	std	Y+4, r25	; 0x04
    8386:	ad 83       	std	Y+5, r26	; 0x05
    8388:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    838a:	89 81       	ldd	r24, Y+1	; 0x01
    838c:	9a 81       	ldd	r25, Y+2	; 0x02
    838e:	01 96       	adiw	r24, 0x01	; 1
    8390:	89 83       	std	Y+1, r24	; 0x01
    8392:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    8394:	20 e0       	ldi	r18, 0x00	; 0
    8396:	30 e0       	ldi	r19, 0x00	; 0
    8398:	40 e8       	ldi	r20, 0x80	; 128
    839a:	5f e3       	ldi	r21, 0x3F	; 63
    839c:	6b 81       	ldd	r22, Y+3	; 0x03
    839e:	7c 81       	ldd	r23, Y+4	; 0x04
    83a0:	8d 81       	ldd	r24, Y+5	; 0x05
    83a2:	9e 81       	ldd	r25, Y+6	; 0x06
    83a4:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <__gesf2>
    83a8:	88 23       	and	r24, r24
    83aa:	fc f6       	brge	.-66     	; 0x836a <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    83ac:	15 c0       	rjmp	.+42     	; 0x83d8 <normalize+0x9c>
        value *= 10.0;
    83ae:	20 e0       	ldi	r18, 0x00	; 0
    83b0:	30 e0       	ldi	r19, 0x00	; 0
    83b2:	40 e2       	ldi	r20, 0x20	; 32
    83b4:	51 e4       	ldi	r21, 0x41	; 65
    83b6:	6b 81       	ldd	r22, Y+3	; 0x03
    83b8:	7c 81       	ldd	r23, Y+4	; 0x04
    83ba:	8d 81       	ldd	r24, Y+5	; 0x05
    83bc:	9e 81       	ldd	r25, Y+6	; 0x06
    83be:	0e 94 d6 46 	call	0x8dac	; 0x8dac <__mulsf3>
    83c2:	dc 01       	movw	r26, r24
    83c4:	cb 01       	movw	r24, r22
    83c6:	8b 83       	std	Y+3, r24	; 0x03
    83c8:	9c 83       	std	Y+4, r25	; 0x04
    83ca:	ad 83       	std	Y+5, r26	; 0x05
    83cc:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    83ce:	89 81       	ldd	r24, Y+1	; 0x01
    83d0:	9a 81       	ldd	r25, Y+2	; 0x02
    83d2:	01 97       	sbiw	r24, 0x01	; 1
    83d4:	89 83       	std	Y+1, r24	; 0x01
    83d6:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    83d8:	2d ec       	ldi	r18, 0xCD	; 205
    83da:	3c ec       	ldi	r19, 0xCC	; 204
    83dc:	4c ec       	ldi	r20, 0xCC	; 204
    83de:	5d e3       	ldi	r21, 0x3D	; 61
    83e0:	6b 81       	ldd	r22, Y+3	; 0x03
    83e2:	7c 81       	ldd	r23, Y+4	; 0x04
    83e4:	8d 81       	ldd	r24, Y+5	; 0x05
    83e6:	9e 81       	ldd	r25, Y+6	; 0x06
    83e8:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <__cmpsf2>
    83ec:	88 23       	and	r24, r24
    83ee:	fc f2       	brlt	.-66     	; 0x83ae <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    83f0:	2f 81       	ldd	r18, Y+7	; 0x07
    83f2:	38 85       	ldd	r19, Y+8	; 0x08
    83f4:	8b 81       	ldd	r24, Y+3	; 0x03
    83f6:	9c 81       	ldd	r25, Y+4	; 0x04
    83f8:	ad 81       	ldd	r26, Y+5	; 0x05
    83fa:	be 81       	ldd	r27, Y+6	; 0x06
    83fc:	f9 01       	movw	r30, r18
    83fe:	80 83       	st	Z, r24
    8400:	91 83       	std	Z+1, r25	; 0x01
    8402:	a2 83       	std	Z+2, r26	; 0x02
    8404:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    8406:	89 81       	ldd	r24, Y+1	; 0x01
    8408:	9a 81       	ldd	r25, Y+2	; 0x02
}
    840a:	28 96       	adiw	r28, 0x08	; 8
    840c:	cd bf       	out	0x3d, r28	; 61
    840e:	de bf       	out	0x3e, r29	; 62
    8410:	df 91       	pop	r29
    8412:	cf 91       	pop	r28
    8414:	08 95       	ret

00008416 <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    8416:	cf 92       	push	r12
    8418:	df 92       	push	r13
    841a:	ef 92       	push	r14
    841c:	ff 92       	push	r15
    841e:	cf 93       	push	r28
    8420:	df 93       	push	r29
    8422:	cd b7       	in	r28, 0x3d	; 61
    8424:	de b7       	in	r29, 0x3e	; 62
    8426:	2e 97       	sbiw	r28, 0x0e	; 14
    8428:	cd bf       	out	0x3d, r28	; 61
    842a:	de bf       	out	0x3e, r29	; 62
    842c:	89 87       	std	Y+9, r24	; 0x09
    842e:	9a 87       	std	Y+10, r25	; 0x0a
    8430:	4b 87       	std	Y+11, r20	; 0x0b
    8432:	5c 87       	std	Y+12, r21	; 0x0c
    8434:	6d 87       	std	Y+13, r22	; 0x0d
    8436:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    8438:	19 82       	std	Y+1, r1	; 0x01
    843a:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    843c:	1b 82       	std	Y+3, r1	; 0x03
    843e:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    8440:	8b 85       	ldd	r24, Y+11	; 0x0b
    8442:	9c 85       	ldd	r25, Y+12	; 0x0c
    8444:	ad 85       	ldd	r26, Y+13	; 0x0d
    8446:	be 85       	ldd	r27, Y+14	; 0x0e
    8448:	20 e0       	ldi	r18, 0x00	; 0
    844a:	30 e0       	ldi	r19, 0x00	; 0
    844c:	a9 01       	movw	r20, r18
    844e:	bc 01       	movw	r22, r24
    8450:	cd 01       	movw	r24, r26
    8452:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <__cmpsf2>
    8456:	88 23       	and	r24, r24
    8458:	59 f4       	brne	.+22     	; 0x8470 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    845a:	89 85       	ldd	r24, Y+9	; 0x09
    845c:	9a 85       	ldd	r25, Y+10	; 0x0a
    845e:	20 e3       	ldi	r18, 0x30	; 48
    8460:	fc 01       	movw	r30, r24
    8462:	20 83       	st	Z, r18
        buffer[1] = '\0';
    8464:	89 85       	ldd	r24, Y+9	; 0x09
    8466:	9a 85       	ldd	r25, Y+10	; 0x0a
    8468:	01 96       	adiw	r24, 0x01	; 1
    846a:	fc 01       	movw	r30, r24
    846c:	10 82       	st	Z, r1
        return;
    846e:	18 c1       	rjmp	.+560    	; 0x86a0 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    8470:	8b 85       	ldd	r24, Y+11	; 0x0b
    8472:	9c 85       	ldd	r25, Y+12	; 0x0c
    8474:	ad 85       	ldd	r26, Y+13	; 0x0d
    8476:	be 85       	ldd	r27, Y+14	; 0x0e
    8478:	20 e0       	ldi	r18, 0x00	; 0
    847a:	30 e0       	ldi	r19, 0x00	; 0
    847c:	a9 01       	movw	r20, r18
    847e:	bc 01       	movw	r22, r24
    8480:	cd 01       	movw	r24, r26
    8482:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <__cmpsf2>
    8486:	88 23       	and	r24, r24
    8488:	9c f4       	brge	.+38     	; 0x84b0 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    848a:	89 85       	ldd	r24, Y+9	; 0x09
    848c:	9a 85       	ldd	r25, Y+10	; 0x0a
    848e:	9c 01       	movw	r18, r24
    8490:	2f 5f       	subi	r18, 0xFF	; 255
    8492:	3f 4f       	sbci	r19, 0xFF	; 255
    8494:	29 87       	std	Y+9, r18	; 0x09
    8496:	3a 87       	std	Y+10, r19	; 0x0a
    8498:	2d e2       	ldi	r18, 0x2D	; 45
    849a:	fc 01       	movw	r30, r24
    849c:	20 83       	st	Z, r18
        value = -value;
    849e:	8b 85       	ldd	r24, Y+11	; 0x0b
    84a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    84a2:	ad 85       	ldd	r26, Y+13	; 0x0d
    84a4:	be 85       	ldd	r27, Y+14	; 0x0e
    84a6:	b0 58       	subi	r27, 0x80	; 128
    84a8:	8b 87       	std	Y+11, r24	; 0x0b
    84aa:	9c 87       	std	Y+12, r25	; 0x0c
    84ac:	ad 87       	std	Y+13, r26	; 0x0d
    84ae:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    84b0:	ce 01       	movw	r24, r28
    84b2:	0b 96       	adiw	r24, 0x0b	; 11
    84b4:	0e 94 9e 41 	call	0x833c	; 0x833c <normalize>
    84b8:	89 83       	std	Y+1, r24	; 0x01
    84ba:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    84bc:	53 c0       	rjmp	.+166    	; 0x8564 <ftoa_fixed+0x14e>
        int digit = value * 10;
    84be:	8b 85       	ldd	r24, Y+11	; 0x0b
    84c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    84c2:	ad 85       	ldd	r26, Y+13	; 0x0d
    84c4:	be 85       	ldd	r27, Y+14	; 0x0e
    84c6:	20 e0       	ldi	r18, 0x00	; 0
    84c8:	30 e0       	ldi	r19, 0x00	; 0
    84ca:	40 e2       	ldi	r20, 0x20	; 32
    84cc:	51 e4       	ldi	r21, 0x41	; 65
    84ce:	bc 01       	movw	r22, r24
    84d0:	cd 01       	movw	r24, r26
    84d2:	0e 94 d6 46 	call	0x8dac	; 0x8dac <__mulsf3>
    84d6:	dc 01       	movw	r26, r24
    84d8:	cb 01       	movw	r24, r22
    84da:	bc 01       	movw	r22, r24
    84dc:	cd 01       	movw	r24, r26
    84de:	0e 94 9b 45 	call	0x8b36	; 0x8b36 <__fixsfsi>
    84e2:	dc 01       	movw	r26, r24
    84e4:	cb 01       	movw	r24, r22
    84e6:	8d 83       	std	Y+5, r24	; 0x05
    84e8:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    84ea:	89 85       	ldd	r24, Y+9	; 0x09
    84ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    84ee:	9c 01       	movw	r18, r24
    84f0:	2f 5f       	subi	r18, 0xFF	; 255
    84f2:	3f 4f       	sbci	r19, 0xFF	; 255
    84f4:	29 87       	std	Y+9, r18	; 0x09
    84f6:	3a 87       	std	Y+10, r19	; 0x0a
    84f8:	2d 81       	ldd	r18, Y+5	; 0x05
    84fa:	20 5d       	subi	r18, 0xD0	; 208
    84fc:	fc 01       	movw	r30, r24
    84fe:	20 83       	st	Z, r18
        value = value * 10 - digit;
    8500:	8b 85       	ldd	r24, Y+11	; 0x0b
    8502:	9c 85       	ldd	r25, Y+12	; 0x0c
    8504:	ad 85       	ldd	r26, Y+13	; 0x0d
    8506:	be 85       	ldd	r27, Y+14	; 0x0e
    8508:	20 e0       	ldi	r18, 0x00	; 0
    850a:	30 e0       	ldi	r19, 0x00	; 0
    850c:	40 e2       	ldi	r20, 0x20	; 32
    850e:	51 e4       	ldi	r21, 0x41	; 65
    8510:	bc 01       	movw	r22, r24
    8512:	cd 01       	movw	r24, r26
    8514:	0e 94 d6 46 	call	0x8dac	; 0x8dac <__mulsf3>
    8518:	dc 01       	movw	r26, r24
    851a:	cb 01       	movw	r24, r22
    851c:	6c 01       	movw	r12, r24
    851e:	7d 01       	movw	r14, r26
    8520:	8d 81       	ldd	r24, Y+5	; 0x05
    8522:	9e 81       	ldd	r25, Y+6	; 0x06
    8524:	09 2e       	mov	r0, r25
    8526:	00 0c       	add	r0, r0
    8528:	aa 0b       	sbc	r26, r26
    852a:	bb 0b       	sbc	r27, r27
    852c:	bc 01       	movw	r22, r24
    852e:	cd 01       	movw	r24, r26
    8530:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <__floatsisf>
    8534:	dc 01       	movw	r26, r24
    8536:	cb 01       	movw	r24, r22
    8538:	9c 01       	movw	r18, r24
    853a:	ad 01       	movw	r20, r26
    853c:	c7 01       	movw	r24, r14
    853e:	b6 01       	movw	r22, r12
    8540:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <__subsf3>
    8544:	dc 01       	movw	r26, r24
    8546:	cb 01       	movw	r24, r22
    8548:	8b 87       	std	Y+11, r24	; 0x0b
    854a:	9c 87       	std	Y+12, r25	; 0x0c
    854c:	ad 87       	std	Y+13, r26	; 0x0d
    854e:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    8550:	8b 81       	ldd	r24, Y+3	; 0x03
    8552:	9c 81       	ldd	r25, Y+4	; 0x04
    8554:	01 96       	adiw	r24, 0x01	; 1
    8556:	8b 83       	std	Y+3, r24	; 0x03
    8558:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    855a:	89 81       	ldd	r24, Y+1	; 0x01
    855c:	9a 81       	ldd	r25, Y+2	; 0x02
    855e:	01 97       	sbiw	r24, 0x01	; 1
    8560:	89 83       	std	Y+1, r24	; 0x01
    8562:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    8564:	89 81       	ldd	r24, Y+1	; 0x01
    8566:	9a 81       	ldd	r25, Y+2	; 0x02
    8568:	18 16       	cp	r1, r24
    856a:	19 06       	cpc	r1, r25
    856c:	0c f4       	brge	.+2      	; 0x8570 <ftoa_fixed+0x15a>
    856e:	a7 cf       	rjmp	.-178    	; 0x84be <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    8570:	8b 81       	ldd	r24, Y+3	; 0x03
    8572:	9c 81       	ldd	r25, Y+4	; 0x04
    8574:	89 2b       	or	r24, r25
    8576:	51 f4       	brne	.+20     	; 0x858c <ftoa_fixed+0x176>
        *buffer++ = '0';
    8578:	89 85       	ldd	r24, Y+9	; 0x09
    857a:	9a 85       	ldd	r25, Y+10	; 0x0a
    857c:	9c 01       	movw	r18, r24
    857e:	2f 5f       	subi	r18, 0xFF	; 255
    8580:	3f 4f       	sbci	r19, 0xFF	; 255
    8582:	29 87       	std	Y+9, r18	; 0x09
    8584:	3a 87       	std	Y+10, r19	; 0x0a
    8586:	20 e3       	ldi	r18, 0x30	; 48
    8588:	fc 01       	movw	r30, r24
    858a:	20 83       	st	Z, r18

    *buffer++ = '.';
    858c:	89 85       	ldd	r24, Y+9	; 0x09
    858e:	9a 85       	ldd	r25, Y+10	; 0x0a
    8590:	9c 01       	movw	r18, r24
    8592:	2f 5f       	subi	r18, 0xFF	; 255
    8594:	3f 4f       	sbci	r19, 0xFF	; 255
    8596:	29 87       	std	Y+9, r18	; 0x09
    8598:	3a 87       	std	Y+10, r19	; 0x0a
    859a:	2e e2       	ldi	r18, 0x2E	; 46
    859c:	fc 01       	movw	r30, r24
    859e:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    85a0:	14 c0       	rjmp	.+40     	; 0x85ca <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    85a2:	89 85       	ldd	r24, Y+9	; 0x09
    85a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    85a6:	9c 01       	movw	r18, r24
    85a8:	2f 5f       	subi	r18, 0xFF	; 255
    85aa:	3f 4f       	sbci	r19, 0xFF	; 255
    85ac:	29 87       	std	Y+9, r18	; 0x09
    85ae:	3a 87       	std	Y+10, r19	; 0x0a
    85b0:	20 e3       	ldi	r18, 0x30	; 48
    85b2:	fc 01       	movw	r30, r24
    85b4:	20 83       	st	Z, r18
        --exponent;
    85b6:	89 81       	ldd	r24, Y+1	; 0x01
    85b8:	9a 81       	ldd	r25, Y+2	; 0x02
    85ba:	01 97       	sbiw	r24, 0x01	; 1
    85bc:	89 83       	std	Y+1, r24	; 0x01
    85be:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    85c0:	8b 81       	ldd	r24, Y+3	; 0x03
    85c2:	9c 81       	ldd	r25, Y+4	; 0x04
    85c4:	01 96       	adiw	r24, 0x01	; 1
    85c6:	8b 83       	std	Y+3, r24	; 0x03
    85c8:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    85ca:	89 81       	ldd	r24, Y+1	; 0x01
    85cc:	9a 81       	ldd	r25, Y+2	; 0x02
    85ce:	99 23       	and	r25, r25
    85d0:	0c f0       	brlt	.+2      	; 0x85d4 <ftoa_fixed+0x1be>
    85d2:	58 c0       	rjmp	.+176    	; 0x8684 <ftoa_fixed+0x26e>
    85d4:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <width.5062>
    85d8:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <width.5062+0x1>
    85dc:	2b 81       	ldd	r18, Y+3	; 0x03
    85de:	3c 81       	ldd	r19, Y+4	; 0x04
    85e0:	28 17       	cp	r18, r24
    85e2:	39 07       	cpc	r19, r25
    85e4:	f4 f2       	brlt	.-68     	; 0x85a2 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    85e6:	4e c0       	rjmp	.+156    	; 0x8684 <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    85e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    85ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    85ec:	ad 85       	ldd	r26, Y+13	; 0x0d
    85ee:	be 85       	ldd	r27, Y+14	; 0x0e
    85f0:	20 e0       	ldi	r18, 0x00	; 0
    85f2:	30 e0       	ldi	r19, 0x00	; 0
    85f4:	40 e2       	ldi	r20, 0x20	; 32
    85f6:	51 e4       	ldi	r21, 0x41	; 65
    85f8:	bc 01       	movw	r22, r24
    85fa:	cd 01       	movw	r24, r26
    85fc:	0e 94 d6 46 	call	0x8dac	; 0x8dac <__mulsf3>
    8600:	dc 01       	movw	r26, r24
    8602:	cb 01       	movw	r24, r22
    8604:	bc 01       	movw	r22, r24
    8606:	cd 01       	movw	r24, r26
    8608:	0e 94 9b 45 	call	0x8b36	; 0x8b36 <__fixsfsi>
    860c:	dc 01       	movw	r26, r24
    860e:	cb 01       	movw	r24, r22
    8610:	8f 83       	std	Y+7, r24	; 0x07
    8612:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    8614:	89 85       	ldd	r24, Y+9	; 0x09
    8616:	9a 85       	ldd	r25, Y+10	; 0x0a
    8618:	9c 01       	movw	r18, r24
    861a:	2f 5f       	subi	r18, 0xFF	; 255
    861c:	3f 4f       	sbci	r19, 0xFF	; 255
    861e:	29 87       	std	Y+9, r18	; 0x09
    8620:	3a 87       	std	Y+10, r19	; 0x0a
    8622:	2f 81       	ldd	r18, Y+7	; 0x07
    8624:	20 5d       	subi	r18, 0xD0	; 208
    8626:	fc 01       	movw	r30, r24
    8628:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    862a:	8b 85       	ldd	r24, Y+11	; 0x0b
    862c:	9c 85       	ldd	r25, Y+12	; 0x0c
    862e:	ad 85       	ldd	r26, Y+13	; 0x0d
    8630:	be 85       	ldd	r27, Y+14	; 0x0e
    8632:	20 e0       	ldi	r18, 0x00	; 0
    8634:	30 e0       	ldi	r19, 0x00	; 0
    8636:	40 e2       	ldi	r20, 0x20	; 32
    8638:	51 e4       	ldi	r21, 0x41	; 65
    863a:	bc 01       	movw	r22, r24
    863c:	cd 01       	movw	r24, r26
    863e:	0e 94 d6 46 	call	0x8dac	; 0x8dac <__mulsf3>
    8642:	dc 01       	movw	r26, r24
    8644:	cb 01       	movw	r24, r22
    8646:	6c 01       	movw	r12, r24
    8648:	7d 01       	movw	r14, r26
    864a:	8f 81       	ldd	r24, Y+7	; 0x07
    864c:	98 85       	ldd	r25, Y+8	; 0x08
    864e:	09 2e       	mov	r0, r25
    8650:	00 0c       	add	r0, r0
    8652:	aa 0b       	sbc	r26, r26
    8654:	bb 0b       	sbc	r27, r27
    8656:	bc 01       	movw	r22, r24
    8658:	cd 01       	movw	r24, r26
    865a:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <__floatsisf>
    865e:	dc 01       	movw	r26, r24
    8660:	cb 01       	movw	r24, r22
    8662:	9c 01       	movw	r18, r24
    8664:	ad 01       	movw	r20, r26
    8666:	c7 01       	movw	r24, r14
    8668:	b6 01       	movw	r22, r12
    866a:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <__subsf3>
    866e:	dc 01       	movw	r26, r24
    8670:	cb 01       	movw	r24, r22
    8672:	8b 87       	std	Y+11, r24	; 0x0b
    8674:	9c 87       	std	Y+12, r25	; 0x0c
    8676:	ad 87       	std	Y+13, r26	; 0x0d
    8678:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    867a:	8b 81       	ldd	r24, Y+3	; 0x03
    867c:	9c 81       	ldd	r25, Y+4	; 0x04
    867e:	01 96       	adiw	r24, 0x01	; 1
    8680:	8b 83       	std	Y+3, r24	; 0x03
    8682:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    8684:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <width.5062>
    8688:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <width.5062+0x1>
    868c:	2b 81       	ldd	r18, Y+3	; 0x03
    868e:	3c 81       	ldd	r19, Y+4	; 0x04
    8690:	28 17       	cp	r18, r24
    8692:	39 07       	cpc	r19, r25
    8694:	0c f4       	brge	.+2      	; 0x8698 <ftoa_fixed+0x282>
    8696:	a8 cf       	rjmp	.-176    	; 0x85e8 <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    8698:	89 85       	ldd	r24, Y+9	; 0x09
    869a:	9a 85       	ldd	r25, Y+10	; 0x0a
    869c:	fc 01       	movw	r30, r24
    869e:	10 82       	st	Z, r1
}
    86a0:	2e 96       	adiw	r28, 0x0e	; 14
    86a2:	cd bf       	out	0x3d, r28	; 61
    86a4:	de bf       	out	0x3e, r29	; 62
    86a6:	df 91       	pop	r29
    86a8:	cf 91       	pop	r28
    86aa:	ff 90       	pop	r15
    86ac:	ef 90       	pop	r14
    86ae:	df 90       	pop	r13
    86b0:	cf 90       	pop	r12
    86b2:	08 95       	ret

000086b4 <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    86b4:	cf 92       	push	r12
    86b6:	df 92       	push	r13
    86b8:	ef 92       	push	r14
    86ba:	ff 92       	push	r15
    86bc:	cf 93       	push	r28
    86be:	df 93       	push	r29
    86c0:	cd b7       	in	r28, 0x3d	; 61
    86c2:	de b7       	in	r29, 0x3e	; 62
    86c4:	2e 97       	sbiw	r28, 0x0e	; 14
    86c6:	cd bf       	out	0x3d, r28	; 61
    86c8:	de bf       	out	0x3e, r29	; 62
    86ca:	89 87       	std	Y+9, r24	; 0x09
    86cc:	9a 87       	std	Y+10, r25	; 0x0a
    86ce:	4b 87       	std	Y+11, r20	; 0x0b
    86d0:	5c 87       	std	Y+12, r21	; 0x0c
    86d2:	6d 87       	std	Y+13, r22	; 0x0d
    86d4:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    86d6:	1b 82       	std	Y+3, r1	; 0x03
    86d8:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    86da:	8b 85       	ldd	r24, Y+11	; 0x0b
    86dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    86de:	ad 85       	ldd	r26, Y+13	; 0x0d
    86e0:	be 85       	ldd	r27, Y+14	; 0x0e
    86e2:	20 e0       	ldi	r18, 0x00	; 0
    86e4:	30 e0       	ldi	r19, 0x00	; 0
    86e6:	a9 01       	movw	r20, r18
    86e8:	bc 01       	movw	r22, r24
    86ea:	cd 01       	movw	r24, r26
    86ec:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <__cmpsf2>
    86f0:	88 23       	and	r24, r24
    86f2:	59 f4       	brne	.+22     	; 0x870a <ftoa_sci+0x56>
        buffer[0] = '0';
    86f4:	89 85       	ldd	r24, Y+9	; 0x09
    86f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    86f8:	20 e3       	ldi	r18, 0x30	; 48
    86fa:	fc 01       	movw	r30, r24
    86fc:	20 83       	st	Z, r18
        buffer[1] = '\0';
    86fe:	89 85       	ldd	r24, Y+9	; 0x09
    8700:	9a 85       	ldd	r25, Y+10	; 0x0a
    8702:	01 96       	adiw	r24, 0x01	; 1
    8704:	fc 01       	movw	r30, r24
    8706:	10 82       	st	Z, r1
        return;
    8708:	ec c0       	rjmp	.+472    	; 0x88e2 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    870a:	8b 85       	ldd	r24, Y+11	; 0x0b
    870c:	9c 85       	ldd	r25, Y+12	; 0x0c
    870e:	ad 85       	ldd	r26, Y+13	; 0x0d
    8710:	be 85       	ldd	r27, Y+14	; 0x0e
    8712:	20 e0       	ldi	r18, 0x00	; 0
    8714:	30 e0       	ldi	r19, 0x00	; 0
    8716:	a9 01       	movw	r20, r18
    8718:	bc 01       	movw	r22, r24
    871a:	cd 01       	movw	r24, r26
    871c:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <__cmpsf2>
    8720:	88 23       	and	r24, r24
    8722:	9c f4       	brge	.+38     	; 0x874a <ftoa_sci+0x96>
        *buffer++ = '-';
    8724:	89 85       	ldd	r24, Y+9	; 0x09
    8726:	9a 85       	ldd	r25, Y+10	; 0x0a
    8728:	9c 01       	movw	r18, r24
    872a:	2f 5f       	subi	r18, 0xFF	; 255
    872c:	3f 4f       	sbci	r19, 0xFF	; 255
    872e:	29 87       	std	Y+9, r18	; 0x09
    8730:	3a 87       	std	Y+10, r19	; 0x0a
    8732:	2d e2       	ldi	r18, 0x2D	; 45
    8734:	fc 01       	movw	r30, r24
    8736:	20 83       	st	Z, r18
        value = -value;
    8738:	8b 85       	ldd	r24, Y+11	; 0x0b
    873a:	9c 85       	ldd	r25, Y+12	; 0x0c
    873c:	ad 85       	ldd	r26, Y+13	; 0x0d
    873e:	be 85       	ldd	r27, Y+14	; 0x0e
    8740:	b0 58       	subi	r27, 0x80	; 128
    8742:	8b 87       	std	Y+11, r24	; 0x0b
    8744:	9c 87       	std	Y+12, r25	; 0x0c
    8746:	ad 87       	std	Y+13, r26	; 0x0d
    8748:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    874a:	ce 01       	movw	r24, r28
    874c:	0b 96       	adiw	r24, 0x0b	; 11
    874e:	0e 94 9e 41 	call	0x833c	; 0x833c <normalize>
    8752:	8b 83       	std	Y+3, r24	; 0x03
    8754:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    8756:	8b 85       	ldd	r24, Y+11	; 0x0b
    8758:	9c 85       	ldd	r25, Y+12	; 0x0c
    875a:	ad 85       	ldd	r26, Y+13	; 0x0d
    875c:	be 85       	ldd	r27, Y+14	; 0x0e
    875e:	20 e0       	ldi	r18, 0x00	; 0
    8760:	30 e0       	ldi	r19, 0x00	; 0
    8762:	40 e2       	ldi	r20, 0x20	; 32
    8764:	51 e4       	ldi	r21, 0x41	; 65
    8766:	bc 01       	movw	r22, r24
    8768:	cd 01       	movw	r24, r26
    876a:	0e 94 d6 46 	call	0x8dac	; 0x8dac <__mulsf3>
    876e:	dc 01       	movw	r26, r24
    8770:	cb 01       	movw	r24, r22
    8772:	bc 01       	movw	r22, r24
    8774:	cd 01       	movw	r24, r26
    8776:	0e 94 9b 45 	call	0x8b36	; 0x8b36 <__fixsfsi>
    877a:	dc 01       	movw	r26, r24
    877c:	cb 01       	movw	r24, r22
    877e:	8d 83       	std	Y+5, r24	; 0x05
    8780:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    8782:	89 85       	ldd	r24, Y+9	; 0x09
    8784:	9a 85       	ldd	r25, Y+10	; 0x0a
    8786:	9c 01       	movw	r18, r24
    8788:	2f 5f       	subi	r18, 0xFF	; 255
    878a:	3f 4f       	sbci	r19, 0xFF	; 255
    878c:	29 87       	std	Y+9, r18	; 0x09
    878e:	3a 87       	std	Y+10, r19	; 0x0a
    8790:	2d 81       	ldd	r18, Y+5	; 0x05
    8792:	20 5d       	subi	r18, 0xD0	; 208
    8794:	fc 01       	movw	r30, r24
    8796:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    8798:	8b 85       	ldd	r24, Y+11	; 0x0b
    879a:	9c 85       	ldd	r25, Y+12	; 0x0c
    879c:	ad 85       	ldd	r26, Y+13	; 0x0d
    879e:	be 85       	ldd	r27, Y+14	; 0x0e
    87a0:	20 e0       	ldi	r18, 0x00	; 0
    87a2:	30 e0       	ldi	r19, 0x00	; 0
    87a4:	40 e2       	ldi	r20, 0x20	; 32
    87a6:	51 e4       	ldi	r21, 0x41	; 65
    87a8:	bc 01       	movw	r22, r24
    87aa:	cd 01       	movw	r24, r26
    87ac:	0e 94 d6 46 	call	0x8dac	; 0x8dac <__mulsf3>
    87b0:	dc 01       	movw	r26, r24
    87b2:	cb 01       	movw	r24, r22
    87b4:	6c 01       	movw	r12, r24
    87b6:	7d 01       	movw	r14, r26
    87b8:	8d 81       	ldd	r24, Y+5	; 0x05
    87ba:	9e 81       	ldd	r25, Y+6	; 0x06
    87bc:	09 2e       	mov	r0, r25
    87be:	00 0c       	add	r0, r0
    87c0:	aa 0b       	sbc	r26, r26
    87c2:	bb 0b       	sbc	r27, r27
    87c4:	bc 01       	movw	r22, r24
    87c6:	cd 01       	movw	r24, r26
    87c8:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <__floatsisf>
    87cc:	dc 01       	movw	r26, r24
    87ce:	cb 01       	movw	r24, r22
    87d0:	9c 01       	movw	r18, r24
    87d2:	ad 01       	movw	r20, r26
    87d4:	c7 01       	movw	r24, r14
    87d6:	b6 01       	movw	r22, r12
    87d8:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <__subsf3>
    87dc:	dc 01       	movw	r26, r24
    87de:	cb 01       	movw	r24, r22
    87e0:	8b 87       	std	Y+11, r24	; 0x0b
    87e2:	9c 87       	std	Y+12, r25	; 0x0c
    87e4:	ad 87       	std	Y+13, r26	; 0x0d
    87e6:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    87e8:	8b 81       	ldd	r24, Y+3	; 0x03
    87ea:	9c 81       	ldd	r25, Y+4	; 0x04
    87ec:	01 97       	sbiw	r24, 0x01	; 1
    87ee:	8b 83       	std	Y+3, r24	; 0x03
    87f0:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    87f2:	89 85       	ldd	r24, Y+9	; 0x09
    87f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    87f6:	9c 01       	movw	r18, r24
    87f8:	2f 5f       	subi	r18, 0xFF	; 255
    87fa:	3f 4f       	sbci	r19, 0xFF	; 255
    87fc:	29 87       	std	Y+9, r18	; 0x09
    87fe:	3a 87       	std	Y+10, r19	; 0x0a
    8800:	2e e2       	ldi	r18, 0x2E	; 46
    8802:	fc 01       	movw	r30, r24
    8804:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    8806:	19 82       	std	Y+1, r1	; 0x01
    8808:	1a 82       	std	Y+2, r1	; 0x02
    880a:	4e c0       	rjmp	.+156    	; 0x88a8 <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    880c:	8b 85       	ldd	r24, Y+11	; 0x0b
    880e:	9c 85       	ldd	r25, Y+12	; 0x0c
    8810:	ad 85       	ldd	r26, Y+13	; 0x0d
    8812:	be 85       	ldd	r27, Y+14	; 0x0e
    8814:	20 e0       	ldi	r18, 0x00	; 0
    8816:	30 e0       	ldi	r19, 0x00	; 0
    8818:	40 e2       	ldi	r20, 0x20	; 32
    881a:	51 e4       	ldi	r21, 0x41	; 65
    881c:	bc 01       	movw	r22, r24
    881e:	cd 01       	movw	r24, r26
    8820:	0e 94 d6 46 	call	0x8dac	; 0x8dac <__mulsf3>
    8824:	dc 01       	movw	r26, r24
    8826:	cb 01       	movw	r24, r22
    8828:	bc 01       	movw	r22, r24
    882a:	cd 01       	movw	r24, r26
    882c:	0e 94 9b 45 	call	0x8b36	; 0x8b36 <__fixsfsi>
    8830:	dc 01       	movw	r26, r24
    8832:	cb 01       	movw	r24, r22
    8834:	8f 83       	std	Y+7, r24	; 0x07
    8836:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    8838:	89 85       	ldd	r24, Y+9	; 0x09
    883a:	9a 85       	ldd	r25, Y+10	; 0x0a
    883c:	9c 01       	movw	r18, r24
    883e:	2f 5f       	subi	r18, 0xFF	; 255
    8840:	3f 4f       	sbci	r19, 0xFF	; 255
    8842:	29 87       	std	Y+9, r18	; 0x09
    8844:	3a 87       	std	Y+10, r19	; 0x0a
    8846:	2f 81       	ldd	r18, Y+7	; 0x07
    8848:	20 5d       	subi	r18, 0xD0	; 208
    884a:	fc 01       	movw	r30, r24
    884c:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    884e:	8b 85       	ldd	r24, Y+11	; 0x0b
    8850:	9c 85       	ldd	r25, Y+12	; 0x0c
    8852:	ad 85       	ldd	r26, Y+13	; 0x0d
    8854:	be 85       	ldd	r27, Y+14	; 0x0e
    8856:	20 e0       	ldi	r18, 0x00	; 0
    8858:	30 e0       	ldi	r19, 0x00	; 0
    885a:	40 e2       	ldi	r20, 0x20	; 32
    885c:	51 e4       	ldi	r21, 0x41	; 65
    885e:	bc 01       	movw	r22, r24
    8860:	cd 01       	movw	r24, r26
    8862:	0e 94 d6 46 	call	0x8dac	; 0x8dac <__mulsf3>
    8866:	dc 01       	movw	r26, r24
    8868:	cb 01       	movw	r24, r22
    886a:	6c 01       	movw	r12, r24
    886c:	7d 01       	movw	r14, r26
    886e:	8f 81       	ldd	r24, Y+7	; 0x07
    8870:	98 85       	ldd	r25, Y+8	; 0x08
    8872:	09 2e       	mov	r0, r25
    8874:	00 0c       	add	r0, r0
    8876:	aa 0b       	sbc	r26, r26
    8878:	bb 0b       	sbc	r27, r27
    887a:	bc 01       	movw	r22, r24
    887c:	cd 01       	movw	r24, r26
    887e:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <__floatsisf>
    8882:	dc 01       	movw	r26, r24
    8884:	cb 01       	movw	r24, r22
    8886:	9c 01       	movw	r18, r24
    8888:	ad 01       	movw	r20, r26
    888a:	c7 01       	movw	r24, r14
    888c:	b6 01       	movw	r22, r12
    888e:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <__subsf3>
    8892:	dc 01       	movw	r26, r24
    8894:	cb 01       	movw	r24, r22
    8896:	8b 87       	std	Y+11, r24	; 0x0b
    8898:	9c 87       	std	Y+12, r25	; 0x0c
    889a:	ad 87       	std	Y+13, r26	; 0x0d
    889c:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    889e:	89 81       	ldd	r24, Y+1	; 0x01
    88a0:	9a 81       	ldd	r25, Y+2	; 0x02
    88a2:	01 96       	adiw	r24, 0x01	; 1
    88a4:	89 83       	std	Y+1, r24	; 0x01
    88a6:	9a 83       	std	Y+2, r25	; 0x02
    88a8:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <width.5079>
    88ac:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <width.5079+0x1>
    88b0:	29 81       	ldd	r18, Y+1	; 0x01
    88b2:	3a 81       	ldd	r19, Y+2	; 0x02
    88b4:	28 17       	cp	r18, r24
    88b6:	39 07       	cpc	r19, r25
    88b8:	0c f4       	brge	.+2      	; 0x88bc <ftoa_sci+0x208>
    88ba:	a8 cf       	rjmp	.-176    	; 0x880c <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    88bc:	89 85       	ldd	r24, Y+9	; 0x09
    88be:	9a 85       	ldd	r25, Y+10	; 0x0a
    88c0:	9c 01       	movw	r18, r24
    88c2:	2f 5f       	subi	r18, 0xFF	; 255
    88c4:	3f 4f       	sbci	r19, 0xFF	; 255
    88c6:	29 87       	std	Y+9, r18	; 0x09
    88c8:	3a 87       	std	Y+10, r19	; 0x0a
    88ca:	25 e6       	ldi	r18, 0x65	; 101
    88cc:	fc 01       	movw	r30, r24
    88ce:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    88d0:	29 85       	ldd	r18, Y+9	; 0x09
    88d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    88d4:	8b 81       	ldd	r24, Y+3	; 0x03
    88d6:	9c 81       	ldd	r25, Y+4	; 0x04
    88d8:	4a e0       	ldi	r20, 0x0A	; 10
    88da:	50 e0       	ldi	r21, 0x00	; 0
    88dc:	b9 01       	movw	r22, r18
    88de:	0e 94 f4 4c 	call	0x99e8	; 0x99e8 <itoa>
}
    88e2:	2e 96       	adiw	r28, 0x0e	; 14
    88e4:	cd bf       	out	0x3d, r28	; 61
    88e6:	de bf       	out	0x3e, r29	; 62
    88e8:	df 91       	pop	r29
    88ea:	cf 91       	pop	r28
    88ec:	ff 90       	pop	r15
    88ee:	ef 90       	pop	r14
    88f0:	df 90       	pop	r13
    88f2:	cf 90       	pop	r12
    88f4:	08 95       	ret

000088f6 <__subsf3>:
    88f6:	50 58       	subi	r21, 0x80	; 128

000088f8 <__addsf3>:
    88f8:	bb 27       	eor	r27, r27
    88fa:	aa 27       	eor	r26, r26
    88fc:	0e 94 93 44 	call	0x8926	; 0x8926 <__addsf3x>
    8900:	0c 94 97 46 	jmp	0x8d2e	; 0x8d2e <__fp_round>
    8904:	0e 94 89 46 	call	0x8d12	; 0x8d12 <__fp_pscA>
    8908:	38 f0       	brcs	.+14     	; 0x8918 <__addsf3+0x20>
    890a:	0e 94 90 46 	call	0x8d20	; 0x8d20 <__fp_pscB>
    890e:	20 f0       	brcs	.+8      	; 0x8918 <__addsf3+0x20>
    8910:	39 f4       	brne	.+14     	; 0x8920 <__addsf3+0x28>
    8912:	9f 3f       	cpi	r25, 0xFF	; 255
    8914:	19 f4       	brne	.+6      	; 0x891c <__addsf3+0x24>
    8916:	26 f4       	brtc	.+8      	; 0x8920 <__addsf3+0x28>
    8918:	0c 94 76 46 	jmp	0x8cec	; 0x8cec <__fp_nan>
    891c:	0e f4       	brtc	.+2      	; 0x8920 <__addsf3+0x28>
    891e:	e0 95       	com	r30
    8920:	e7 fb       	bst	r30, 7
    8922:	0c 94 70 46 	jmp	0x8ce0	; 0x8ce0 <__fp_inf>

00008926 <__addsf3x>:
    8926:	e9 2f       	mov	r30, r25
    8928:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <__fp_split3>
    892c:	58 f3       	brcs	.-42     	; 0x8904 <__addsf3+0xc>
    892e:	ba 17       	cp	r27, r26
    8930:	62 07       	cpc	r22, r18
    8932:	73 07       	cpc	r23, r19
    8934:	84 07       	cpc	r24, r20
    8936:	95 07       	cpc	r25, r21
    8938:	20 f0       	brcs	.+8      	; 0x8942 <__addsf3x+0x1c>
    893a:	79 f4       	brne	.+30     	; 0x895a <__addsf3x+0x34>
    893c:	a6 f5       	brtc	.+104    	; 0x89a6 <__addsf3x+0x80>
    893e:	0c 94 ca 46 	jmp	0x8d94	; 0x8d94 <__fp_zero>
    8942:	0e f4       	brtc	.+2      	; 0x8946 <__addsf3x+0x20>
    8944:	e0 95       	com	r30
    8946:	0b 2e       	mov	r0, r27
    8948:	ba 2f       	mov	r27, r26
    894a:	a0 2d       	mov	r26, r0
    894c:	0b 01       	movw	r0, r22
    894e:	b9 01       	movw	r22, r18
    8950:	90 01       	movw	r18, r0
    8952:	0c 01       	movw	r0, r24
    8954:	ca 01       	movw	r24, r20
    8956:	a0 01       	movw	r20, r0
    8958:	11 24       	eor	r1, r1
    895a:	ff 27       	eor	r31, r31
    895c:	59 1b       	sub	r21, r25
    895e:	99 f0       	breq	.+38     	; 0x8986 <__addsf3x+0x60>
    8960:	59 3f       	cpi	r21, 0xF9	; 249
    8962:	50 f4       	brcc	.+20     	; 0x8978 <__addsf3x+0x52>
    8964:	50 3e       	cpi	r21, 0xE0	; 224
    8966:	68 f1       	brcs	.+90     	; 0x89c2 <__addsf3x+0x9c>
    8968:	1a 16       	cp	r1, r26
    896a:	f0 40       	sbci	r31, 0x00	; 0
    896c:	a2 2f       	mov	r26, r18
    896e:	23 2f       	mov	r18, r19
    8970:	34 2f       	mov	r19, r20
    8972:	44 27       	eor	r20, r20
    8974:	58 5f       	subi	r21, 0xF8	; 248
    8976:	f3 cf       	rjmp	.-26     	; 0x895e <__addsf3x+0x38>
    8978:	46 95       	lsr	r20
    897a:	37 95       	ror	r19
    897c:	27 95       	ror	r18
    897e:	a7 95       	ror	r26
    8980:	f0 40       	sbci	r31, 0x00	; 0
    8982:	53 95       	inc	r21
    8984:	c9 f7       	brne	.-14     	; 0x8978 <__addsf3x+0x52>
    8986:	7e f4       	brtc	.+30     	; 0x89a6 <__addsf3x+0x80>
    8988:	1f 16       	cp	r1, r31
    898a:	ba 0b       	sbc	r27, r26
    898c:	62 0b       	sbc	r22, r18
    898e:	73 0b       	sbc	r23, r19
    8990:	84 0b       	sbc	r24, r20
    8992:	ba f0       	brmi	.+46     	; 0x89c2 <__addsf3x+0x9c>
    8994:	91 50       	subi	r25, 0x01	; 1
    8996:	a1 f0       	breq	.+40     	; 0x89c0 <__addsf3x+0x9a>
    8998:	ff 0f       	add	r31, r31
    899a:	bb 1f       	adc	r27, r27
    899c:	66 1f       	adc	r22, r22
    899e:	77 1f       	adc	r23, r23
    89a0:	88 1f       	adc	r24, r24
    89a2:	c2 f7       	brpl	.-16     	; 0x8994 <__addsf3x+0x6e>
    89a4:	0e c0       	rjmp	.+28     	; 0x89c2 <__addsf3x+0x9c>
    89a6:	ba 0f       	add	r27, r26
    89a8:	62 1f       	adc	r22, r18
    89aa:	73 1f       	adc	r23, r19
    89ac:	84 1f       	adc	r24, r20
    89ae:	48 f4       	brcc	.+18     	; 0x89c2 <__addsf3x+0x9c>
    89b0:	87 95       	ror	r24
    89b2:	77 95       	ror	r23
    89b4:	67 95       	ror	r22
    89b6:	b7 95       	ror	r27
    89b8:	f7 95       	ror	r31
    89ba:	9e 3f       	cpi	r25, 0xFE	; 254
    89bc:	08 f0       	brcs	.+2      	; 0x89c0 <__addsf3x+0x9a>
    89be:	b0 cf       	rjmp	.-160    	; 0x8920 <__addsf3+0x28>
    89c0:	93 95       	inc	r25
    89c2:	88 0f       	add	r24, r24
    89c4:	08 f0       	brcs	.+2      	; 0x89c8 <__addsf3x+0xa2>
    89c6:	99 27       	eor	r25, r25
    89c8:	ee 0f       	add	r30, r30
    89ca:	97 95       	ror	r25
    89cc:	87 95       	ror	r24
    89ce:	08 95       	ret

000089d0 <__cmpsf2>:
    89d0:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <__fp_cmp>
    89d4:	08 f4       	brcc	.+2      	; 0x89d8 <__cmpsf2+0x8>
    89d6:	81 e0       	ldi	r24, 0x01	; 1
    89d8:	08 95       	ret

000089da <__divsf3>:
    89da:	0e 94 01 45 	call	0x8a02	; 0x8a02 <__divsf3x>
    89de:	0c 94 97 46 	jmp	0x8d2e	; 0x8d2e <__fp_round>
    89e2:	0e 94 90 46 	call	0x8d20	; 0x8d20 <__fp_pscB>
    89e6:	58 f0       	brcs	.+22     	; 0x89fe <__divsf3+0x24>
    89e8:	0e 94 89 46 	call	0x8d12	; 0x8d12 <__fp_pscA>
    89ec:	40 f0       	brcs	.+16     	; 0x89fe <__divsf3+0x24>
    89ee:	29 f4       	brne	.+10     	; 0x89fa <__divsf3+0x20>
    89f0:	5f 3f       	cpi	r21, 0xFF	; 255
    89f2:	29 f0       	breq	.+10     	; 0x89fe <__divsf3+0x24>
    89f4:	0c 94 70 46 	jmp	0x8ce0	; 0x8ce0 <__fp_inf>
    89f8:	51 11       	cpse	r21, r1
    89fa:	0c 94 cb 46 	jmp	0x8d96	; 0x8d96 <__fp_szero>
    89fe:	0c 94 76 46 	jmp	0x8cec	; 0x8cec <__fp_nan>

00008a02 <__divsf3x>:
    8a02:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <__fp_split3>
    8a06:	68 f3       	brcs	.-38     	; 0x89e2 <__divsf3+0x8>

00008a08 <__divsf3_pse>:
    8a08:	99 23       	and	r25, r25
    8a0a:	b1 f3       	breq	.-20     	; 0x89f8 <__divsf3+0x1e>
    8a0c:	55 23       	and	r21, r21
    8a0e:	91 f3       	breq	.-28     	; 0x89f4 <__divsf3+0x1a>
    8a10:	95 1b       	sub	r25, r21
    8a12:	55 0b       	sbc	r21, r21
    8a14:	bb 27       	eor	r27, r27
    8a16:	aa 27       	eor	r26, r26
    8a18:	62 17       	cp	r22, r18
    8a1a:	73 07       	cpc	r23, r19
    8a1c:	84 07       	cpc	r24, r20
    8a1e:	38 f0       	brcs	.+14     	; 0x8a2e <__divsf3_pse+0x26>
    8a20:	9f 5f       	subi	r25, 0xFF	; 255
    8a22:	5f 4f       	sbci	r21, 0xFF	; 255
    8a24:	22 0f       	add	r18, r18
    8a26:	33 1f       	adc	r19, r19
    8a28:	44 1f       	adc	r20, r20
    8a2a:	aa 1f       	adc	r26, r26
    8a2c:	a9 f3       	breq	.-22     	; 0x8a18 <__divsf3_pse+0x10>
    8a2e:	35 d0       	rcall	.+106    	; 0x8a9a <__divsf3_pse+0x92>
    8a30:	0e 2e       	mov	r0, r30
    8a32:	3a f0       	brmi	.+14     	; 0x8a42 <__divsf3_pse+0x3a>
    8a34:	e0 e8       	ldi	r30, 0x80	; 128
    8a36:	32 d0       	rcall	.+100    	; 0x8a9c <__divsf3_pse+0x94>
    8a38:	91 50       	subi	r25, 0x01	; 1
    8a3a:	50 40       	sbci	r21, 0x00	; 0
    8a3c:	e6 95       	lsr	r30
    8a3e:	00 1c       	adc	r0, r0
    8a40:	ca f7       	brpl	.-14     	; 0x8a34 <__divsf3_pse+0x2c>
    8a42:	2b d0       	rcall	.+86     	; 0x8a9a <__divsf3_pse+0x92>
    8a44:	fe 2f       	mov	r31, r30
    8a46:	29 d0       	rcall	.+82     	; 0x8a9a <__divsf3_pse+0x92>
    8a48:	66 0f       	add	r22, r22
    8a4a:	77 1f       	adc	r23, r23
    8a4c:	88 1f       	adc	r24, r24
    8a4e:	bb 1f       	adc	r27, r27
    8a50:	26 17       	cp	r18, r22
    8a52:	37 07       	cpc	r19, r23
    8a54:	48 07       	cpc	r20, r24
    8a56:	ab 07       	cpc	r26, r27
    8a58:	b0 e8       	ldi	r27, 0x80	; 128
    8a5a:	09 f0       	breq	.+2      	; 0x8a5e <__divsf3_pse+0x56>
    8a5c:	bb 0b       	sbc	r27, r27
    8a5e:	80 2d       	mov	r24, r0
    8a60:	bf 01       	movw	r22, r30
    8a62:	ff 27       	eor	r31, r31
    8a64:	93 58       	subi	r25, 0x83	; 131
    8a66:	5f 4f       	sbci	r21, 0xFF	; 255
    8a68:	3a f0       	brmi	.+14     	; 0x8a78 <__divsf3_pse+0x70>
    8a6a:	9e 3f       	cpi	r25, 0xFE	; 254
    8a6c:	51 05       	cpc	r21, r1
    8a6e:	78 f0       	brcs	.+30     	; 0x8a8e <__divsf3_pse+0x86>
    8a70:	0c 94 70 46 	jmp	0x8ce0	; 0x8ce0 <__fp_inf>
    8a74:	0c 94 cb 46 	jmp	0x8d96	; 0x8d96 <__fp_szero>
    8a78:	5f 3f       	cpi	r21, 0xFF	; 255
    8a7a:	e4 f3       	brlt	.-8      	; 0x8a74 <__divsf3_pse+0x6c>
    8a7c:	98 3e       	cpi	r25, 0xE8	; 232
    8a7e:	d4 f3       	brlt	.-12     	; 0x8a74 <__divsf3_pse+0x6c>
    8a80:	86 95       	lsr	r24
    8a82:	77 95       	ror	r23
    8a84:	67 95       	ror	r22
    8a86:	b7 95       	ror	r27
    8a88:	f7 95       	ror	r31
    8a8a:	9f 5f       	subi	r25, 0xFF	; 255
    8a8c:	c9 f7       	brne	.-14     	; 0x8a80 <__divsf3_pse+0x78>
    8a8e:	88 0f       	add	r24, r24
    8a90:	91 1d       	adc	r25, r1
    8a92:	96 95       	lsr	r25
    8a94:	87 95       	ror	r24
    8a96:	97 f9       	bld	r25, 7
    8a98:	08 95       	ret
    8a9a:	e1 e0       	ldi	r30, 0x01	; 1
    8a9c:	66 0f       	add	r22, r22
    8a9e:	77 1f       	adc	r23, r23
    8aa0:	88 1f       	adc	r24, r24
    8aa2:	bb 1f       	adc	r27, r27
    8aa4:	62 17       	cp	r22, r18
    8aa6:	73 07       	cpc	r23, r19
    8aa8:	84 07       	cpc	r24, r20
    8aaa:	ba 07       	cpc	r27, r26
    8aac:	20 f0       	brcs	.+8      	; 0x8ab6 <__divsf3_pse+0xae>
    8aae:	62 1b       	sub	r22, r18
    8ab0:	73 0b       	sbc	r23, r19
    8ab2:	84 0b       	sbc	r24, r20
    8ab4:	ba 0b       	sbc	r27, r26
    8ab6:	ee 1f       	adc	r30, r30
    8ab8:	88 f7       	brcc	.-30     	; 0x8a9c <__divsf3_pse+0x94>
    8aba:	e0 95       	com	r30
    8abc:	08 95       	ret

00008abe <__fixsfdi>:
    8abe:	be e3       	ldi	r27, 0x3E	; 62
    8ac0:	04 d0       	rcall	.+8      	; 0x8aca <__fixunssfdi+0x2>
    8ac2:	08 f4       	brcc	.+2      	; 0x8ac6 <__fixsfdi+0x8>
    8ac4:	90 e8       	ldi	r25, 0x80	; 128
    8ac6:	08 95       	ret

00008ac8 <__fixunssfdi>:
    8ac8:	bf e3       	ldi	r27, 0x3F	; 63
    8aca:	22 27       	eor	r18, r18
    8acc:	33 27       	eor	r19, r19
    8ace:	a9 01       	movw	r20, r18
    8ad0:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <__fp_splitA>
    8ad4:	60 f1       	brcs	.+88     	; 0x8b2e <__fixunssfdi+0x66>
    8ad6:	9f 57       	subi	r25, 0x7F	; 127
    8ad8:	48 f1       	brcs	.+82     	; 0x8b2c <__fixunssfdi+0x64>
    8ada:	b9 17       	cp	r27, r25
    8adc:	40 f1       	brcs	.+80     	; 0x8b2e <__fixunssfdi+0x66>
    8ade:	bf e3       	ldi	r27, 0x3F	; 63
    8ae0:	b9 1b       	sub	r27, r25
    8ae2:	99 27       	eor	r25, r25
    8ae4:	b8 50       	subi	r27, 0x08	; 8
    8ae6:	3a f4       	brpl	.+14     	; 0x8af6 <__fixunssfdi+0x2e>
    8ae8:	66 0f       	add	r22, r22
    8aea:	77 1f       	adc	r23, r23
    8aec:	88 1f       	adc	r24, r24
    8aee:	99 1f       	adc	r25, r25
    8af0:	b3 95       	inc	r27
    8af2:	d2 f3       	brmi	.-12     	; 0x8ae8 <__fixunssfdi+0x20>
    8af4:	16 c0       	rjmp	.+44     	; 0x8b22 <__fixunssfdi+0x5a>
    8af6:	b8 50       	subi	r27, 0x08	; 8
    8af8:	4a f0       	brmi	.+18     	; 0x8b0c <__fixunssfdi+0x44>
    8afa:	23 2f       	mov	r18, r19
    8afc:	34 2f       	mov	r19, r20
    8afe:	45 2f       	mov	r20, r21
    8b00:	56 2f       	mov	r21, r22
    8b02:	67 2f       	mov	r22, r23
    8b04:	78 2f       	mov	r23, r24
    8b06:	88 27       	eor	r24, r24
    8b08:	b8 50       	subi	r27, 0x08	; 8
    8b0a:	ba f7       	brpl	.-18     	; 0x8afa <__fixunssfdi+0x32>
    8b0c:	b8 5f       	subi	r27, 0xF8	; 248
    8b0e:	49 f0       	breq	.+18     	; 0x8b22 <__fixunssfdi+0x5a>
    8b10:	86 95       	lsr	r24
    8b12:	77 95       	ror	r23
    8b14:	67 95       	ror	r22
    8b16:	57 95       	ror	r21
    8b18:	47 95       	ror	r20
    8b1a:	37 95       	ror	r19
    8b1c:	27 95       	ror	r18
    8b1e:	ba 95       	dec	r27
    8b20:	b9 f7       	brne	.-18     	; 0x8b10 <__fixunssfdi+0x48>
    8b22:	16 f4       	brtc	.+4      	; 0x8b28 <__fixunssfdi+0x60>
    8b24:	0e 94 79 46 	call	0x8cf2	; 0x8cf2 <__fp_negdi>
    8b28:	88 94       	clc
    8b2a:	08 95       	ret
    8b2c:	88 94       	clc
    8b2e:	60 e0       	ldi	r22, 0x00	; 0
    8b30:	70 e0       	ldi	r23, 0x00	; 0
    8b32:	cb 01       	movw	r24, r22
    8b34:	08 95       	ret

00008b36 <__fixsfsi>:
    8b36:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <__fixunssfsi>
    8b3a:	68 94       	set
    8b3c:	b1 11       	cpse	r27, r1
    8b3e:	0c 94 cb 46 	jmp	0x8d96	; 0x8d96 <__fp_szero>
    8b42:	08 95       	ret

00008b44 <__fixunssfsi>:
    8b44:	0e 94 b0 46 	call	0x8d60	; 0x8d60 <__fp_splitA>
    8b48:	88 f0       	brcs	.+34     	; 0x8b6c <__fixunssfsi+0x28>
    8b4a:	9f 57       	subi	r25, 0x7F	; 127
    8b4c:	98 f0       	brcs	.+38     	; 0x8b74 <__fixunssfsi+0x30>
    8b4e:	b9 2f       	mov	r27, r25
    8b50:	99 27       	eor	r25, r25
    8b52:	b7 51       	subi	r27, 0x17	; 23
    8b54:	b0 f0       	brcs	.+44     	; 0x8b82 <__fixunssfsi+0x3e>
    8b56:	e1 f0       	breq	.+56     	; 0x8b90 <__fixunssfsi+0x4c>
    8b58:	66 0f       	add	r22, r22
    8b5a:	77 1f       	adc	r23, r23
    8b5c:	88 1f       	adc	r24, r24
    8b5e:	99 1f       	adc	r25, r25
    8b60:	1a f0       	brmi	.+6      	; 0x8b68 <__fixunssfsi+0x24>
    8b62:	ba 95       	dec	r27
    8b64:	c9 f7       	brne	.-14     	; 0x8b58 <__fixunssfsi+0x14>
    8b66:	14 c0       	rjmp	.+40     	; 0x8b90 <__fixunssfsi+0x4c>
    8b68:	b1 30       	cpi	r27, 0x01	; 1
    8b6a:	91 f0       	breq	.+36     	; 0x8b90 <__fixunssfsi+0x4c>
    8b6c:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <__fp_zero>
    8b70:	b1 e0       	ldi	r27, 0x01	; 1
    8b72:	08 95       	ret
    8b74:	0c 94 ca 46 	jmp	0x8d94	; 0x8d94 <__fp_zero>
    8b78:	67 2f       	mov	r22, r23
    8b7a:	78 2f       	mov	r23, r24
    8b7c:	88 27       	eor	r24, r24
    8b7e:	b8 5f       	subi	r27, 0xF8	; 248
    8b80:	39 f0       	breq	.+14     	; 0x8b90 <__fixunssfsi+0x4c>
    8b82:	b9 3f       	cpi	r27, 0xF9	; 249
    8b84:	cc f3       	brlt	.-14     	; 0x8b78 <__fixunssfsi+0x34>
    8b86:	86 95       	lsr	r24
    8b88:	77 95       	ror	r23
    8b8a:	67 95       	ror	r22
    8b8c:	b3 95       	inc	r27
    8b8e:	d9 f7       	brne	.-10     	; 0x8b86 <__fixunssfsi+0x42>
    8b90:	3e f4       	brtc	.+14     	; 0x8ba0 <__fixunssfsi+0x5c>
    8b92:	90 95       	com	r25
    8b94:	80 95       	com	r24
    8b96:	70 95       	com	r23
    8b98:	61 95       	neg	r22
    8b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    8b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    8b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    8ba0:	08 95       	ret

00008ba2 <__floatunsisf>:
    8ba2:	e8 94       	clt
    8ba4:	09 c0       	rjmp	.+18     	; 0x8bb8 <__floatsisf+0x12>

00008ba6 <__floatsisf>:
    8ba6:	97 fb       	bst	r25, 7
    8ba8:	3e f4       	brtc	.+14     	; 0x8bb8 <__floatsisf+0x12>
    8baa:	90 95       	com	r25
    8bac:	80 95       	com	r24
    8bae:	70 95       	com	r23
    8bb0:	61 95       	neg	r22
    8bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    8bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    8bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    8bb8:	99 23       	and	r25, r25
    8bba:	a9 f0       	breq	.+42     	; 0x8be6 <__floatsisf+0x40>
    8bbc:	f9 2f       	mov	r31, r25
    8bbe:	96 e9       	ldi	r25, 0x96	; 150
    8bc0:	bb 27       	eor	r27, r27
    8bc2:	93 95       	inc	r25
    8bc4:	f6 95       	lsr	r31
    8bc6:	87 95       	ror	r24
    8bc8:	77 95       	ror	r23
    8bca:	67 95       	ror	r22
    8bcc:	b7 95       	ror	r27
    8bce:	f1 11       	cpse	r31, r1
    8bd0:	f8 cf       	rjmp	.-16     	; 0x8bc2 <__floatsisf+0x1c>
    8bd2:	fa f4       	brpl	.+62     	; 0x8c12 <__floatsisf+0x6c>
    8bd4:	bb 0f       	add	r27, r27
    8bd6:	11 f4       	brne	.+4      	; 0x8bdc <__floatsisf+0x36>
    8bd8:	60 ff       	sbrs	r22, 0
    8bda:	1b c0       	rjmp	.+54     	; 0x8c12 <__floatsisf+0x6c>
    8bdc:	6f 5f       	subi	r22, 0xFF	; 255
    8bde:	7f 4f       	sbci	r23, 0xFF	; 255
    8be0:	8f 4f       	sbci	r24, 0xFF	; 255
    8be2:	9f 4f       	sbci	r25, 0xFF	; 255
    8be4:	16 c0       	rjmp	.+44     	; 0x8c12 <__floatsisf+0x6c>
    8be6:	88 23       	and	r24, r24
    8be8:	11 f0       	breq	.+4      	; 0x8bee <__floatsisf+0x48>
    8bea:	96 e9       	ldi	r25, 0x96	; 150
    8bec:	11 c0       	rjmp	.+34     	; 0x8c10 <__floatsisf+0x6a>
    8bee:	77 23       	and	r23, r23
    8bf0:	21 f0       	breq	.+8      	; 0x8bfa <__floatsisf+0x54>
    8bf2:	9e e8       	ldi	r25, 0x8E	; 142
    8bf4:	87 2f       	mov	r24, r23
    8bf6:	76 2f       	mov	r23, r22
    8bf8:	05 c0       	rjmp	.+10     	; 0x8c04 <__floatsisf+0x5e>
    8bfa:	66 23       	and	r22, r22
    8bfc:	71 f0       	breq	.+28     	; 0x8c1a <__floatsisf+0x74>
    8bfe:	96 e8       	ldi	r25, 0x86	; 134
    8c00:	86 2f       	mov	r24, r22
    8c02:	70 e0       	ldi	r23, 0x00	; 0
    8c04:	60 e0       	ldi	r22, 0x00	; 0
    8c06:	2a f0       	brmi	.+10     	; 0x8c12 <__floatsisf+0x6c>
    8c08:	9a 95       	dec	r25
    8c0a:	66 0f       	add	r22, r22
    8c0c:	77 1f       	adc	r23, r23
    8c0e:	88 1f       	adc	r24, r24
    8c10:	da f7       	brpl	.-10     	; 0x8c08 <__floatsisf+0x62>
    8c12:	88 0f       	add	r24, r24
    8c14:	96 95       	lsr	r25
    8c16:	87 95       	ror	r24
    8c18:	97 f9       	bld	r25, 7
    8c1a:	08 95       	ret

00008c1c <__floatundisf>:
    8c1c:	e8 94       	clt

00008c1e <__fp_di2sf>:
    8c1e:	f9 2f       	mov	r31, r25
    8c20:	96 eb       	ldi	r25, 0xB6	; 182
    8c22:	ff 23       	and	r31, r31
    8c24:	81 f0       	breq	.+32     	; 0x8c46 <__fp_di2sf+0x28>
    8c26:	12 16       	cp	r1, r18
    8c28:	13 06       	cpc	r1, r19
    8c2a:	14 06       	cpc	r1, r20
    8c2c:	44 0b       	sbc	r20, r20
    8c2e:	93 95       	inc	r25
    8c30:	f6 95       	lsr	r31
    8c32:	87 95       	ror	r24
    8c34:	77 95       	ror	r23
    8c36:	67 95       	ror	r22
    8c38:	57 95       	ror	r21
    8c3a:	40 40       	sbci	r20, 0x00	; 0
    8c3c:	ff 23       	and	r31, r31
    8c3e:	b9 f7       	brne	.-18     	; 0x8c2e <__fp_di2sf+0x10>
    8c40:	1b c0       	rjmp	.+54     	; 0x8c78 <__fp_di2sf+0x5a>
    8c42:	99 27       	eor	r25, r25
    8c44:	08 95       	ret
    8c46:	88 23       	and	r24, r24
    8c48:	51 f4       	brne	.+20     	; 0x8c5e <__fp_di2sf+0x40>
    8c4a:	98 50       	subi	r25, 0x08	; 8
    8c4c:	d2 f7       	brpl	.-12     	; 0x8c42 <__fp_di2sf+0x24>
    8c4e:	87 2b       	or	r24, r23
    8c50:	76 2f       	mov	r23, r22
    8c52:	65 2f       	mov	r22, r21
    8c54:	54 2f       	mov	r21, r20
    8c56:	43 2f       	mov	r20, r19
    8c58:	32 2f       	mov	r19, r18
    8c5a:	20 e0       	ldi	r18, 0x00	; 0
    8c5c:	b1 f3       	breq	.-20     	; 0x8c4a <__fp_di2sf+0x2c>
    8c5e:	12 16       	cp	r1, r18
    8c60:	13 06       	cpc	r1, r19
    8c62:	14 06       	cpc	r1, r20
    8c64:	44 0b       	sbc	r20, r20
    8c66:	88 23       	and	r24, r24
    8c68:	3a f0       	brmi	.+14     	; 0x8c78 <__fp_di2sf+0x5a>
    8c6a:	9a 95       	dec	r25
    8c6c:	44 0f       	add	r20, r20
    8c6e:	55 1f       	adc	r21, r21
    8c70:	66 1f       	adc	r22, r22
    8c72:	77 1f       	adc	r23, r23
    8c74:	88 1f       	adc	r24, r24
    8c76:	ca f7       	brpl	.-14     	; 0x8c6a <__fp_di2sf+0x4c>
    8c78:	55 23       	and	r21, r21
    8c7a:	4a f4       	brpl	.+18     	; 0x8c8e <__fp_di2sf+0x70>
    8c7c:	44 0f       	add	r20, r20
    8c7e:	55 1f       	adc	r21, r21
    8c80:	11 f4       	brne	.+4      	; 0x8c86 <__fp_di2sf+0x68>
    8c82:	60 ff       	sbrs	r22, 0
    8c84:	04 c0       	rjmp	.+8      	; 0x8c8e <__fp_di2sf+0x70>
    8c86:	6f 5f       	subi	r22, 0xFF	; 255
    8c88:	7f 4f       	sbci	r23, 0xFF	; 255
    8c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    8c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    8c8e:	88 0f       	add	r24, r24
    8c90:	96 95       	lsr	r25
    8c92:	87 95       	ror	r24
    8c94:	97 f9       	bld	r25, 7
    8c96:	08 95       	ret

00008c98 <__fp_cmp>:
    8c98:	99 0f       	add	r25, r25
    8c9a:	00 08       	sbc	r0, r0
    8c9c:	55 0f       	add	r21, r21
    8c9e:	aa 0b       	sbc	r26, r26
    8ca0:	e0 e8       	ldi	r30, 0x80	; 128
    8ca2:	fe ef       	ldi	r31, 0xFE	; 254
    8ca4:	16 16       	cp	r1, r22
    8ca6:	17 06       	cpc	r1, r23
    8ca8:	e8 07       	cpc	r30, r24
    8caa:	f9 07       	cpc	r31, r25
    8cac:	c0 f0       	brcs	.+48     	; 0x8cde <__fp_cmp+0x46>
    8cae:	12 16       	cp	r1, r18
    8cb0:	13 06       	cpc	r1, r19
    8cb2:	e4 07       	cpc	r30, r20
    8cb4:	f5 07       	cpc	r31, r21
    8cb6:	98 f0       	brcs	.+38     	; 0x8cde <__fp_cmp+0x46>
    8cb8:	62 1b       	sub	r22, r18
    8cba:	73 0b       	sbc	r23, r19
    8cbc:	84 0b       	sbc	r24, r20
    8cbe:	95 0b       	sbc	r25, r21
    8cc0:	39 f4       	brne	.+14     	; 0x8cd0 <__fp_cmp+0x38>
    8cc2:	0a 26       	eor	r0, r26
    8cc4:	61 f0       	breq	.+24     	; 0x8cde <__fp_cmp+0x46>
    8cc6:	23 2b       	or	r18, r19
    8cc8:	24 2b       	or	r18, r20
    8cca:	25 2b       	or	r18, r21
    8ccc:	21 f4       	brne	.+8      	; 0x8cd6 <__fp_cmp+0x3e>
    8cce:	08 95       	ret
    8cd0:	0a 26       	eor	r0, r26
    8cd2:	09 f4       	brne	.+2      	; 0x8cd6 <__fp_cmp+0x3e>
    8cd4:	a1 40       	sbci	r26, 0x01	; 1
    8cd6:	a6 95       	lsr	r26
    8cd8:	8f ef       	ldi	r24, 0xFF	; 255
    8cda:	81 1d       	adc	r24, r1
    8cdc:	81 1d       	adc	r24, r1
    8cde:	08 95       	ret

00008ce0 <__fp_inf>:
    8ce0:	97 f9       	bld	r25, 7
    8ce2:	9f 67       	ori	r25, 0x7F	; 127
    8ce4:	80 e8       	ldi	r24, 0x80	; 128
    8ce6:	70 e0       	ldi	r23, 0x00	; 0
    8ce8:	60 e0       	ldi	r22, 0x00	; 0
    8cea:	08 95       	ret

00008cec <__fp_nan>:
    8cec:	9f ef       	ldi	r25, 0xFF	; 255
    8cee:	80 ec       	ldi	r24, 0xC0	; 192
    8cf0:	08 95       	ret

00008cf2 <__fp_negdi>:
    8cf2:	90 95       	com	r25
    8cf4:	80 95       	com	r24
    8cf6:	70 95       	com	r23
    8cf8:	60 95       	com	r22
    8cfa:	50 95       	com	r21
    8cfc:	40 95       	com	r20
    8cfe:	30 95       	com	r19
    8d00:	21 95       	neg	r18
    8d02:	3f 4f       	sbci	r19, 0xFF	; 255
    8d04:	4f 4f       	sbci	r20, 0xFF	; 255
    8d06:	5f 4f       	sbci	r21, 0xFF	; 255
    8d08:	6f 4f       	sbci	r22, 0xFF	; 255
    8d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    8d0c:	8f 4f       	sbci	r24, 0xFF	; 255
    8d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    8d10:	08 95       	ret

00008d12 <__fp_pscA>:
    8d12:	00 24       	eor	r0, r0
    8d14:	0a 94       	dec	r0
    8d16:	16 16       	cp	r1, r22
    8d18:	17 06       	cpc	r1, r23
    8d1a:	18 06       	cpc	r1, r24
    8d1c:	09 06       	cpc	r0, r25
    8d1e:	08 95       	ret

00008d20 <__fp_pscB>:
    8d20:	00 24       	eor	r0, r0
    8d22:	0a 94       	dec	r0
    8d24:	12 16       	cp	r1, r18
    8d26:	13 06       	cpc	r1, r19
    8d28:	14 06       	cpc	r1, r20
    8d2a:	05 06       	cpc	r0, r21
    8d2c:	08 95       	ret

00008d2e <__fp_round>:
    8d2e:	09 2e       	mov	r0, r25
    8d30:	03 94       	inc	r0
    8d32:	00 0c       	add	r0, r0
    8d34:	11 f4       	brne	.+4      	; 0x8d3a <__fp_round+0xc>
    8d36:	88 23       	and	r24, r24
    8d38:	52 f0       	brmi	.+20     	; 0x8d4e <__fp_round+0x20>
    8d3a:	bb 0f       	add	r27, r27
    8d3c:	40 f4       	brcc	.+16     	; 0x8d4e <__fp_round+0x20>
    8d3e:	bf 2b       	or	r27, r31
    8d40:	11 f4       	brne	.+4      	; 0x8d46 <__fp_round+0x18>
    8d42:	60 ff       	sbrs	r22, 0
    8d44:	04 c0       	rjmp	.+8      	; 0x8d4e <__fp_round+0x20>
    8d46:	6f 5f       	subi	r22, 0xFF	; 255
    8d48:	7f 4f       	sbci	r23, 0xFF	; 255
    8d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    8d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    8d4e:	08 95       	ret

00008d50 <__fp_split3>:
    8d50:	57 fd       	sbrc	r21, 7
    8d52:	90 58       	subi	r25, 0x80	; 128
    8d54:	44 0f       	add	r20, r20
    8d56:	55 1f       	adc	r21, r21
    8d58:	59 f0       	breq	.+22     	; 0x8d70 <__fp_splitA+0x10>
    8d5a:	5f 3f       	cpi	r21, 0xFF	; 255
    8d5c:	71 f0       	breq	.+28     	; 0x8d7a <__fp_splitA+0x1a>
    8d5e:	47 95       	ror	r20

00008d60 <__fp_splitA>:
    8d60:	88 0f       	add	r24, r24
    8d62:	97 fb       	bst	r25, 7
    8d64:	99 1f       	adc	r25, r25
    8d66:	61 f0       	breq	.+24     	; 0x8d80 <__fp_splitA+0x20>
    8d68:	9f 3f       	cpi	r25, 0xFF	; 255
    8d6a:	79 f0       	breq	.+30     	; 0x8d8a <__fp_splitA+0x2a>
    8d6c:	87 95       	ror	r24
    8d6e:	08 95       	ret
    8d70:	12 16       	cp	r1, r18
    8d72:	13 06       	cpc	r1, r19
    8d74:	14 06       	cpc	r1, r20
    8d76:	55 1f       	adc	r21, r21
    8d78:	f2 cf       	rjmp	.-28     	; 0x8d5e <__fp_split3+0xe>
    8d7a:	46 95       	lsr	r20
    8d7c:	f1 df       	rcall	.-30     	; 0x8d60 <__fp_splitA>
    8d7e:	08 c0       	rjmp	.+16     	; 0x8d90 <__fp_splitA+0x30>
    8d80:	16 16       	cp	r1, r22
    8d82:	17 06       	cpc	r1, r23
    8d84:	18 06       	cpc	r1, r24
    8d86:	99 1f       	adc	r25, r25
    8d88:	f1 cf       	rjmp	.-30     	; 0x8d6c <__fp_splitA+0xc>
    8d8a:	86 95       	lsr	r24
    8d8c:	71 05       	cpc	r23, r1
    8d8e:	61 05       	cpc	r22, r1
    8d90:	08 94       	sec
    8d92:	08 95       	ret

00008d94 <__fp_zero>:
    8d94:	e8 94       	clt

00008d96 <__fp_szero>:
    8d96:	bb 27       	eor	r27, r27
    8d98:	66 27       	eor	r22, r22
    8d9a:	77 27       	eor	r23, r23
    8d9c:	cb 01       	movw	r24, r22
    8d9e:	97 f9       	bld	r25, 7
    8da0:	08 95       	ret

00008da2 <__gesf2>:
    8da2:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <__fp_cmp>
    8da6:	08 f4       	brcc	.+2      	; 0x8daa <__gesf2+0x8>
    8da8:	8f ef       	ldi	r24, 0xFF	; 255
    8daa:	08 95       	ret

00008dac <__mulsf3>:
    8dac:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__mulsf3x>
    8db0:	0c 94 97 46 	jmp	0x8d2e	; 0x8d2e <__fp_round>
    8db4:	0e 94 89 46 	call	0x8d12	; 0x8d12 <__fp_pscA>
    8db8:	38 f0       	brcs	.+14     	; 0x8dc8 <__mulsf3+0x1c>
    8dba:	0e 94 90 46 	call	0x8d20	; 0x8d20 <__fp_pscB>
    8dbe:	20 f0       	brcs	.+8      	; 0x8dc8 <__mulsf3+0x1c>
    8dc0:	95 23       	and	r25, r21
    8dc2:	11 f0       	breq	.+4      	; 0x8dc8 <__mulsf3+0x1c>
    8dc4:	0c 94 70 46 	jmp	0x8ce0	; 0x8ce0 <__fp_inf>
    8dc8:	0c 94 76 46 	jmp	0x8cec	; 0x8cec <__fp_nan>
    8dcc:	11 24       	eor	r1, r1
    8dce:	0c 94 cb 46 	jmp	0x8d96	; 0x8d96 <__fp_szero>

00008dd2 <__mulsf3x>:
    8dd2:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <__fp_split3>
    8dd6:	70 f3       	brcs	.-36     	; 0x8db4 <__mulsf3+0x8>

00008dd8 <__mulsf3_pse>:
    8dd8:	95 9f       	mul	r25, r21
    8dda:	c1 f3       	breq	.-16     	; 0x8dcc <__mulsf3+0x20>
    8ddc:	95 0f       	add	r25, r21
    8dde:	50 e0       	ldi	r21, 0x00	; 0
    8de0:	55 1f       	adc	r21, r21
    8de2:	62 9f       	mul	r22, r18
    8de4:	f0 01       	movw	r30, r0
    8de6:	72 9f       	mul	r23, r18
    8de8:	bb 27       	eor	r27, r27
    8dea:	f0 0d       	add	r31, r0
    8dec:	b1 1d       	adc	r27, r1
    8dee:	63 9f       	mul	r22, r19
    8df0:	aa 27       	eor	r26, r26
    8df2:	f0 0d       	add	r31, r0
    8df4:	b1 1d       	adc	r27, r1
    8df6:	aa 1f       	adc	r26, r26
    8df8:	64 9f       	mul	r22, r20
    8dfa:	66 27       	eor	r22, r22
    8dfc:	b0 0d       	add	r27, r0
    8dfe:	a1 1d       	adc	r26, r1
    8e00:	66 1f       	adc	r22, r22
    8e02:	82 9f       	mul	r24, r18
    8e04:	22 27       	eor	r18, r18
    8e06:	b0 0d       	add	r27, r0
    8e08:	a1 1d       	adc	r26, r1
    8e0a:	62 1f       	adc	r22, r18
    8e0c:	73 9f       	mul	r23, r19
    8e0e:	b0 0d       	add	r27, r0
    8e10:	a1 1d       	adc	r26, r1
    8e12:	62 1f       	adc	r22, r18
    8e14:	83 9f       	mul	r24, r19
    8e16:	a0 0d       	add	r26, r0
    8e18:	61 1d       	adc	r22, r1
    8e1a:	22 1f       	adc	r18, r18
    8e1c:	74 9f       	mul	r23, r20
    8e1e:	33 27       	eor	r19, r19
    8e20:	a0 0d       	add	r26, r0
    8e22:	61 1d       	adc	r22, r1
    8e24:	23 1f       	adc	r18, r19
    8e26:	84 9f       	mul	r24, r20
    8e28:	60 0d       	add	r22, r0
    8e2a:	21 1d       	adc	r18, r1
    8e2c:	82 2f       	mov	r24, r18
    8e2e:	76 2f       	mov	r23, r22
    8e30:	6a 2f       	mov	r22, r26
    8e32:	11 24       	eor	r1, r1
    8e34:	9f 57       	subi	r25, 0x7F	; 127
    8e36:	50 40       	sbci	r21, 0x00	; 0
    8e38:	9a f0       	brmi	.+38     	; 0x8e60 <__mulsf3_pse+0x88>
    8e3a:	f1 f0       	breq	.+60     	; 0x8e78 <__mulsf3_pse+0xa0>
    8e3c:	88 23       	and	r24, r24
    8e3e:	4a f0       	brmi	.+18     	; 0x8e52 <__mulsf3_pse+0x7a>
    8e40:	ee 0f       	add	r30, r30
    8e42:	ff 1f       	adc	r31, r31
    8e44:	bb 1f       	adc	r27, r27
    8e46:	66 1f       	adc	r22, r22
    8e48:	77 1f       	adc	r23, r23
    8e4a:	88 1f       	adc	r24, r24
    8e4c:	91 50       	subi	r25, 0x01	; 1
    8e4e:	50 40       	sbci	r21, 0x00	; 0
    8e50:	a9 f7       	brne	.-22     	; 0x8e3c <__mulsf3_pse+0x64>
    8e52:	9e 3f       	cpi	r25, 0xFE	; 254
    8e54:	51 05       	cpc	r21, r1
    8e56:	80 f0       	brcs	.+32     	; 0x8e78 <__mulsf3_pse+0xa0>
    8e58:	0c 94 70 46 	jmp	0x8ce0	; 0x8ce0 <__fp_inf>
    8e5c:	0c 94 cb 46 	jmp	0x8d96	; 0x8d96 <__fp_szero>
    8e60:	5f 3f       	cpi	r21, 0xFF	; 255
    8e62:	e4 f3       	brlt	.-8      	; 0x8e5c <__mulsf3_pse+0x84>
    8e64:	98 3e       	cpi	r25, 0xE8	; 232
    8e66:	d4 f3       	brlt	.-12     	; 0x8e5c <__mulsf3_pse+0x84>
    8e68:	86 95       	lsr	r24
    8e6a:	77 95       	ror	r23
    8e6c:	67 95       	ror	r22
    8e6e:	b7 95       	ror	r27
    8e70:	f7 95       	ror	r31
    8e72:	e7 95       	ror	r30
    8e74:	9f 5f       	subi	r25, 0xFF	; 255
    8e76:	c1 f7       	brne	.-16     	; 0x8e68 <__mulsf3_pse+0x90>
    8e78:	fe 2b       	or	r31, r30
    8e7a:	88 0f       	add	r24, r24
    8e7c:	91 1d       	adc	r25, r1
    8e7e:	96 95       	lsr	r25
    8e80:	87 95       	ror	r24
    8e82:	97 f9       	bld	r25, 7
    8e84:	08 95       	ret

00008e86 <vfprintf>:
    8e86:	2f 92       	push	r2
    8e88:	3f 92       	push	r3
    8e8a:	4f 92       	push	r4
    8e8c:	5f 92       	push	r5
    8e8e:	6f 92       	push	r6
    8e90:	7f 92       	push	r7
    8e92:	8f 92       	push	r8
    8e94:	9f 92       	push	r9
    8e96:	af 92       	push	r10
    8e98:	bf 92       	push	r11
    8e9a:	cf 92       	push	r12
    8e9c:	df 92       	push	r13
    8e9e:	ef 92       	push	r14
    8ea0:	ff 92       	push	r15
    8ea2:	0f 93       	push	r16
    8ea4:	1f 93       	push	r17
    8ea6:	cf 93       	push	r28
    8ea8:	df 93       	push	r29
    8eaa:	cd b7       	in	r28, 0x3d	; 61
    8eac:	de b7       	in	r29, 0x3e	; 62
    8eae:	60 97       	sbiw	r28, 0x10	; 16
    8eb0:	cd bf       	out	0x3d, r28	; 61
    8eb2:	de bf       	out	0x3e, r29	; 62
    8eb4:	7c 01       	movw	r14, r24
    8eb6:	1b 01       	movw	r2, r22
    8eb8:	6a 01       	movw	r12, r20
    8eba:	fc 01       	movw	r30, r24
    8ebc:	16 82       	std	Z+6, r1	; 0x06
    8ebe:	17 82       	std	Z+7, r1	; 0x07
    8ec0:	83 81       	ldd	r24, Z+3	; 0x03
    8ec2:	81 ff       	sbrs	r24, 1
    8ec4:	44 c3       	rjmp	.+1672   	; 0x954e <vfprintf+0x6c8>
    8ec6:	9e 01       	movw	r18, r28
    8ec8:	2f 5f       	subi	r18, 0xFF	; 255
    8eca:	3f 4f       	sbci	r19, 0xFF	; 255
    8ecc:	39 01       	movw	r6, r18
    8ece:	f7 01       	movw	r30, r14
    8ed0:	93 81       	ldd	r25, Z+3	; 0x03
    8ed2:	f1 01       	movw	r30, r2
    8ed4:	93 fd       	sbrc	r25, 3
    8ed6:	85 91       	lpm	r24, Z+
    8ed8:	93 ff       	sbrs	r25, 3
    8eda:	81 91       	ld	r24, Z+
    8edc:	1f 01       	movw	r2, r30
    8ede:	88 23       	and	r24, r24
    8ee0:	09 f4       	brne	.+2      	; 0x8ee4 <vfprintf+0x5e>
    8ee2:	31 c3       	rjmp	.+1634   	; 0x9546 <vfprintf+0x6c0>
    8ee4:	85 32       	cpi	r24, 0x25	; 37
    8ee6:	39 f4       	brne	.+14     	; 0x8ef6 <vfprintf+0x70>
    8ee8:	93 fd       	sbrc	r25, 3
    8eea:	85 91       	lpm	r24, Z+
    8eec:	93 ff       	sbrs	r25, 3
    8eee:	81 91       	ld	r24, Z+
    8ef0:	1f 01       	movw	r2, r30
    8ef2:	85 32       	cpi	r24, 0x25	; 37
    8ef4:	39 f4       	brne	.+14     	; 0x8f04 <vfprintf+0x7e>
    8ef6:	b7 01       	movw	r22, r14
    8ef8:	90 e0       	ldi	r25, 0x00	; 0
    8efa:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    8efe:	56 01       	movw	r10, r12
    8f00:	65 01       	movw	r12, r10
    8f02:	e5 cf       	rjmp	.-54     	; 0x8ece <vfprintf+0x48>
    8f04:	10 e0       	ldi	r17, 0x00	; 0
    8f06:	51 2c       	mov	r5, r1
    8f08:	91 2c       	mov	r9, r1
    8f0a:	ff e1       	ldi	r31, 0x1F	; 31
    8f0c:	f9 15       	cp	r31, r9
    8f0e:	d8 f0       	brcs	.+54     	; 0x8f46 <vfprintf+0xc0>
    8f10:	8b 32       	cpi	r24, 0x2B	; 43
    8f12:	79 f0       	breq	.+30     	; 0x8f32 <vfprintf+0xac>
    8f14:	38 f4       	brcc	.+14     	; 0x8f24 <vfprintf+0x9e>
    8f16:	80 32       	cpi	r24, 0x20	; 32
    8f18:	79 f0       	breq	.+30     	; 0x8f38 <vfprintf+0xb2>
    8f1a:	83 32       	cpi	r24, 0x23	; 35
    8f1c:	a1 f4       	brne	.+40     	; 0x8f46 <vfprintf+0xc0>
    8f1e:	f9 2d       	mov	r31, r9
    8f20:	f0 61       	ori	r31, 0x10	; 16
    8f22:	2e c0       	rjmp	.+92     	; 0x8f80 <vfprintf+0xfa>
    8f24:	8d 32       	cpi	r24, 0x2D	; 45
    8f26:	61 f0       	breq	.+24     	; 0x8f40 <vfprintf+0xba>
    8f28:	80 33       	cpi	r24, 0x30	; 48
    8f2a:	69 f4       	brne	.+26     	; 0x8f46 <vfprintf+0xc0>
    8f2c:	29 2d       	mov	r18, r9
    8f2e:	21 60       	ori	r18, 0x01	; 1
    8f30:	2d c0       	rjmp	.+90     	; 0x8f8c <vfprintf+0x106>
    8f32:	39 2d       	mov	r19, r9
    8f34:	32 60       	ori	r19, 0x02	; 2
    8f36:	93 2e       	mov	r9, r19
    8f38:	89 2d       	mov	r24, r9
    8f3a:	84 60       	ori	r24, 0x04	; 4
    8f3c:	98 2e       	mov	r9, r24
    8f3e:	2a c0       	rjmp	.+84     	; 0x8f94 <vfprintf+0x10e>
    8f40:	e9 2d       	mov	r30, r9
    8f42:	e8 60       	ori	r30, 0x08	; 8
    8f44:	15 c0       	rjmp	.+42     	; 0x8f70 <vfprintf+0xea>
    8f46:	97 fc       	sbrc	r9, 7
    8f48:	2d c0       	rjmp	.+90     	; 0x8fa4 <vfprintf+0x11e>
    8f4a:	20 ed       	ldi	r18, 0xD0	; 208
    8f4c:	28 0f       	add	r18, r24
    8f4e:	2a 30       	cpi	r18, 0x0A	; 10
    8f50:	88 f4       	brcc	.+34     	; 0x8f74 <vfprintf+0xee>
    8f52:	96 fe       	sbrs	r9, 6
    8f54:	06 c0       	rjmp	.+12     	; 0x8f62 <vfprintf+0xdc>
    8f56:	3a e0       	ldi	r19, 0x0A	; 10
    8f58:	13 9f       	mul	r17, r19
    8f5a:	20 0d       	add	r18, r0
    8f5c:	11 24       	eor	r1, r1
    8f5e:	12 2f       	mov	r17, r18
    8f60:	19 c0       	rjmp	.+50     	; 0x8f94 <vfprintf+0x10e>
    8f62:	8a e0       	ldi	r24, 0x0A	; 10
    8f64:	58 9e       	mul	r5, r24
    8f66:	20 0d       	add	r18, r0
    8f68:	11 24       	eor	r1, r1
    8f6a:	52 2e       	mov	r5, r18
    8f6c:	e9 2d       	mov	r30, r9
    8f6e:	e0 62       	ori	r30, 0x20	; 32
    8f70:	9e 2e       	mov	r9, r30
    8f72:	10 c0       	rjmp	.+32     	; 0x8f94 <vfprintf+0x10e>
    8f74:	8e 32       	cpi	r24, 0x2E	; 46
    8f76:	31 f4       	brne	.+12     	; 0x8f84 <vfprintf+0xfe>
    8f78:	96 fc       	sbrc	r9, 6
    8f7a:	e5 c2       	rjmp	.+1482   	; 0x9546 <vfprintf+0x6c0>
    8f7c:	f9 2d       	mov	r31, r9
    8f7e:	f0 64       	ori	r31, 0x40	; 64
    8f80:	9f 2e       	mov	r9, r31
    8f82:	08 c0       	rjmp	.+16     	; 0x8f94 <vfprintf+0x10e>
    8f84:	8c 36       	cpi	r24, 0x6C	; 108
    8f86:	21 f4       	brne	.+8      	; 0x8f90 <vfprintf+0x10a>
    8f88:	29 2d       	mov	r18, r9
    8f8a:	20 68       	ori	r18, 0x80	; 128
    8f8c:	92 2e       	mov	r9, r18
    8f8e:	02 c0       	rjmp	.+4      	; 0x8f94 <vfprintf+0x10e>
    8f90:	88 36       	cpi	r24, 0x68	; 104
    8f92:	41 f4       	brne	.+16     	; 0x8fa4 <vfprintf+0x11e>
    8f94:	f1 01       	movw	r30, r2
    8f96:	93 fd       	sbrc	r25, 3
    8f98:	85 91       	lpm	r24, Z+
    8f9a:	93 ff       	sbrs	r25, 3
    8f9c:	81 91       	ld	r24, Z+
    8f9e:	1f 01       	movw	r2, r30
    8fa0:	81 11       	cpse	r24, r1
    8fa2:	b3 cf       	rjmp	.-154    	; 0x8f0a <vfprintf+0x84>
    8fa4:	9b eb       	ldi	r25, 0xBB	; 187
    8fa6:	98 0f       	add	r25, r24
    8fa8:	93 30       	cpi	r25, 0x03	; 3
    8faa:	20 f4       	brcc	.+8      	; 0x8fb4 <vfprintf+0x12e>
    8fac:	99 2d       	mov	r25, r9
    8fae:	90 61       	ori	r25, 0x10	; 16
    8fb0:	80 5e       	subi	r24, 0xE0	; 224
    8fb2:	07 c0       	rjmp	.+14     	; 0x8fc2 <vfprintf+0x13c>
    8fb4:	9b e9       	ldi	r25, 0x9B	; 155
    8fb6:	98 0f       	add	r25, r24
    8fb8:	93 30       	cpi	r25, 0x03	; 3
    8fba:	08 f0       	brcs	.+2      	; 0x8fbe <vfprintf+0x138>
    8fbc:	66 c1       	rjmp	.+716    	; 0x928a <vfprintf+0x404>
    8fbe:	99 2d       	mov	r25, r9
    8fc0:	9f 7e       	andi	r25, 0xEF	; 239
    8fc2:	96 ff       	sbrs	r25, 6
    8fc4:	16 e0       	ldi	r17, 0x06	; 6
    8fc6:	9f 73       	andi	r25, 0x3F	; 63
    8fc8:	99 2e       	mov	r9, r25
    8fca:	85 36       	cpi	r24, 0x65	; 101
    8fcc:	19 f4       	brne	.+6      	; 0x8fd4 <vfprintf+0x14e>
    8fce:	90 64       	ori	r25, 0x40	; 64
    8fd0:	99 2e       	mov	r9, r25
    8fd2:	08 c0       	rjmp	.+16     	; 0x8fe4 <vfprintf+0x15e>
    8fd4:	86 36       	cpi	r24, 0x66	; 102
    8fd6:	21 f4       	brne	.+8      	; 0x8fe0 <vfprintf+0x15a>
    8fd8:	39 2f       	mov	r19, r25
    8fda:	30 68       	ori	r19, 0x80	; 128
    8fdc:	93 2e       	mov	r9, r19
    8fde:	02 c0       	rjmp	.+4      	; 0x8fe4 <vfprintf+0x15e>
    8fe0:	11 11       	cpse	r17, r1
    8fe2:	11 50       	subi	r17, 0x01	; 1
    8fe4:	97 fe       	sbrs	r9, 7
    8fe6:	07 c0       	rjmp	.+14     	; 0x8ff6 <vfprintf+0x170>
    8fe8:	1c 33       	cpi	r17, 0x3C	; 60
    8fea:	50 f4       	brcc	.+20     	; 0x9000 <vfprintf+0x17a>
    8fec:	44 24       	eor	r4, r4
    8fee:	43 94       	inc	r4
    8ff0:	41 0e       	add	r4, r17
    8ff2:	27 e0       	ldi	r18, 0x07	; 7
    8ff4:	0b c0       	rjmp	.+22     	; 0x900c <vfprintf+0x186>
    8ff6:	18 30       	cpi	r17, 0x08	; 8
    8ff8:	38 f0       	brcs	.+14     	; 0x9008 <vfprintf+0x182>
    8ffa:	27 e0       	ldi	r18, 0x07	; 7
    8ffc:	17 e0       	ldi	r17, 0x07	; 7
    8ffe:	05 c0       	rjmp	.+10     	; 0x900a <vfprintf+0x184>
    9000:	27 e0       	ldi	r18, 0x07	; 7
    9002:	9c e3       	ldi	r25, 0x3C	; 60
    9004:	49 2e       	mov	r4, r25
    9006:	02 c0       	rjmp	.+4      	; 0x900c <vfprintf+0x186>
    9008:	21 2f       	mov	r18, r17
    900a:	41 2c       	mov	r4, r1
    900c:	56 01       	movw	r10, r12
    900e:	84 e0       	ldi	r24, 0x04	; 4
    9010:	a8 0e       	add	r10, r24
    9012:	b1 1c       	adc	r11, r1
    9014:	f6 01       	movw	r30, r12
    9016:	60 81       	ld	r22, Z
    9018:	71 81       	ldd	r23, Z+1	; 0x01
    901a:	82 81       	ldd	r24, Z+2	; 0x02
    901c:	93 81       	ldd	r25, Z+3	; 0x03
    901e:	04 2d       	mov	r16, r4
    9020:	a3 01       	movw	r20, r6
    9022:	0e 94 e6 4b 	call	0x97cc	; 0x97cc <__ftoa_engine>
    9026:	6c 01       	movw	r12, r24
    9028:	f9 81       	ldd	r31, Y+1	; 0x01
    902a:	fc 87       	std	Y+12, r31	; 0x0c
    902c:	f0 ff       	sbrs	r31, 0
    902e:	02 c0       	rjmp	.+4      	; 0x9034 <vfprintf+0x1ae>
    9030:	f3 ff       	sbrs	r31, 3
    9032:	06 c0       	rjmp	.+12     	; 0x9040 <vfprintf+0x1ba>
    9034:	91 fc       	sbrc	r9, 1
    9036:	06 c0       	rjmp	.+12     	; 0x9044 <vfprintf+0x1be>
    9038:	92 fe       	sbrs	r9, 2
    903a:	06 c0       	rjmp	.+12     	; 0x9048 <vfprintf+0x1c2>
    903c:	00 e2       	ldi	r16, 0x20	; 32
    903e:	05 c0       	rjmp	.+10     	; 0x904a <vfprintf+0x1c4>
    9040:	0d e2       	ldi	r16, 0x2D	; 45
    9042:	03 c0       	rjmp	.+6      	; 0x904a <vfprintf+0x1c4>
    9044:	0b e2       	ldi	r16, 0x2B	; 43
    9046:	01 c0       	rjmp	.+2      	; 0x904a <vfprintf+0x1c4>
    9048:	00 e0       	ldi	r16, 0x00	; 0
    904a:	8c 85       	ldd	r24, Y+12	; 0x0c
    904c:	8c 70       	andi	r24, 0x0C	; 12
    904e:	19 f0       	breq	.+6      	; 0x9056 <vfprintf+0x1d0>
    9050:	01 11       	cpse	r16, r1
    9052:	5a c2       	rjmp	.+1204   	; 0x9508 <vfprintf+0x682>
    9054:	9b c2       	rjmp	.+1334   	; 0x958c <vfprintf+0x706>
    9056:	97 fe       	sbrs	r9, 7
    9058:	10 c0       	rjmp	.+32     	; 0x907a <vfprintf+0x1f4>
    905a:	4c 0c       	add	r4, r12
    905c:	fc 85       	ldd	r31, Y+12	; 0x0c
    905e:	f4 ff       	sbrs	r31, 4
    9060:	04 c0       	rjmp	.+8      	; 0x906a <vfprintf+0x1e4>
    9062:	8a 81       	ldd	r24, Y+2	; 0x02
    9064:	81 33       	cpi	r24, 0x31	; 49
    9066:	09 f4       	brne	.+2      	; 0x906a <vfprintf+0x1e4>
    9068:	4a 94       	dec	r4
    906a:	14 14       	cp	r1, r4
    906c:	74 f5       	brge	.+92     	; 0x90ca <vfprintf+0x244>
    906e:	28 e0       	ldi	r18, 0x08	; 8
    9070:	24 15       	cp	r18, r4
    9072:	78 f5       	brcc	.+94     	; 0x90d2 <vfprintf+0x24c>
    9074:	88 e0       	ldi	r24, 0x08	; 8
    9076:	48 2e       	mov	r4, r24
    9078:	2c c0       	rjmp	.+88     	; 0x90d2 <vfprintf+0x24c>
    907a:	96 fc       	sbrc	r9, 6
    907c:	2a c0       	rjmp	.+84     	; 0x90d2 <vfprintf+0x24c>
    907e:	81 2f       	mov	r24, r17
    9080:	90 e0       	ldi	r25, 0x00	; 0
    9082:	8c 15       	cp	r24, r12
    9084:	9d 05       	cpc	r25, r13
    9086:	9c f0       	brlt	.+38     	; 0x90ae <vfprintf+0x228>
    9088:	3c ef       	ldi	r19, 0xFC	; 252
    908a:	c3 16       	cp	r12, r19
    908c:	3f ef       	ldi	r19, 0xFF	; 255
    908e:	d3 06       	cpc	r13, r19
    9090:	74 f0       	brlt	.+28     	; 0x90ae <vfprintf+0x228>
    9092:	89 2d       	mov	r24, r9
    9094:	80 68       	ori	r24, 0x80	; 128
    9096:	98 2e       	mov	r9, r24
    9098:	0a c0       	rjmp	.+20     	; 0x90ae <vfprintf+0x228>
    909a:	e2 e0       	ldi	r30, 0x02	; 2
    909c:	f0 e0       	ldi	r31, 0x00	; 0
    909e:	ec 0f       	add	r30, r28
    90a0:	fd 1f       	adc	r31, r29
    90a2:	e1 0f       	add	r30, r17
    90a4:	f1 1d       	adc	r31, r1
    90a6:	80 81       	ld	r24, Z
    90a8:	80 33       	cpi	r24, 0x30	; 48
    90aa:	19 f4       	brne	.+6      	; 0x90b2 <vfprintf+0x22c>
    90ac:	11 50       	subi	r17, 0x01	; 1
    90ae:	11 11       	cpse	r17, r1
    90b0:	f4 cf       	rjmp	.-24     	; 0x909a <vfprintf+0x214>
    90b2:	97 fe       	sbrs	r9, 7
    90b4:	0e c0       	rjmp	.+28     	; 0x90d2 <vfprintf+0x24c>
    90b6:	44 24       	eor	r4, r4
    90b8:	43 94       	inc	r4
    90ba:	41 0e       	add	r4, r17
    90bc:	81 2f       	mov	r24, r17
    90be:	90 e0       	ldi	r25, 0x00	; 0
    90c0:	c8 16       	cp	r12, r24
    90c2:	d9 06       	cpc	r13, r25
    90c4:	2c f4       	brge	.+10     	; 0x90d0 <vfprintf+0x24a>
    90c6:	1c 19       	sub	r17, r12
    90c8:	04 c0       	rjmp	.+8      	; 0x90d2 <vfprintf+0x24c>
    90ca:	44 24       	eor	r4, r4
    90cc:	43 94       	inc	r4
    90ce:	01 c0       	rjmp	.+2      	; 0x90d2 <vfprintf+0x24c>
    90d0:	10 e0       	ldi	r17, 0x00	; 0
    90d2:	97 fe       	sbrs	r9, 7
    90d4:	06 c0       	rjmp	.+12     	; 0x90e2 <vfprintf+0x25c>
    90d6:	1c 14       	cp	r1, r12
    90d8:	1d 04       	cpc	r1, r13
    90da:	34 f4       	brge	.+12     	; 0x90e8 <vfprintf+0x262>
    90dc:	c6 01       	movw	r24, r12
    90de:	01 96       	adiw	r24, 0x01	; 1
    90e0:	05 c0       	rjmp	.+10     	; 0x90ec <vfprintf+0x266>
    90e2:	85 e0       	ldi	r24, 0x05	; 5
    90e4:	90 e0       	ldi	r25, 0x00	; 0
    90e6:	02 c0       	rjmp	.+4      	; 0x90ec <vfprintf+0x266>
    90e8:	81 e0       	ldi	r24, 0x01	; 1
    90ea:	90 e0       	ldi	r25, 0x00	; 0
    90ec:	01 11       	cpse	r16, r1
    90ee:	01 96       	adiw	r24, 0x01	; 1
    90f0:	11 23       	and	r17, r17
    90f2:	31 f0       	breq	.+12     	; 0x9100 <vfprintf+0x27a>
    90f4:	21 2f       	mov	r18, r17
    90f6:	30 e0       	ldi	r19, 0x00	; 0
    90f8:	2f 5f       	subi	r18, 0xFF	; 255
    90fa:	3f 4f       	sbci	r19, 0xFF	; 255
    90fc:	82 0f       	add	r24, r18
    90fe:	93 1f       	adc	r25, r19
    9100:	25 2d       	mov	r18, r5
    9102:	30 e0       	ldi	r19, 0x00	; 0
    9104:	82 17       	cp	r24, r18
    9106:	93 07       	cpc	r25, r19
    9108:	14 f4       	brge	.+4      	; 0x910e <vfprintf+0x288>
    910a:	58 1a       	sub	r5, r24
    910c:	01 c0       	rjmp	.+2      	; 0x9110 <vfprintf+0x28a>
    910e:	51 2c       	mov	r5, r1
    9110:	89 2d       	mov	r24, r9
    9112:	89 70       	andi	r24, 0x09	; 9
    9114:	49 f4       	brne	.+18     	; 0x9128 <vfprintf+0x2a2>
    9116:	55 20       	and	r5, r5
    9118:	39 f0       	breq	.+14     	; 0x9128 <vfprintf+0x2a2>
    911a:	b7 01       	movw	r22, r14
    911c:	80 e2       	ldi	r24, 0x20	; 32
    911e:	90 e0       	ldi	r25, 0x00	; 0
    9120:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9124:	5a 94       	dec	r5
    9126:	f7 cf       	rjmp	.-18     	; 0x9116 <vfprintf+0x290>
    9128:	00 23       	and	r16, r16
    912a:	29 f0       	breq	.+10     	; 0x9136 <vfprintf+0x2b0>
    912c:	b7 01       	movw	r22, r14
    912e:	80 2f       	mov	r24, r16
    9130:	90 e0       	ldi	r25, 0x00	; 0
    9132:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9136:	93 fc       	sbrc	r9, 3
    9138:	09 c0       	rjmp	.+18     	; 0x914c <vfprintf+0x2c6>
    913a:	55 20       	and	r5, r5
    913c:	39 f0       	breq	.+14     	; 0x914c <vfprintf+0x2c6>
    913e:	b7 01       	movw	r22, r14
    9140:	80 e3       	ldi	r24, 0x30	; 48
    9142:	90 e0       	ldi	r25, 0x00	; 0
    9144:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9148:	5a 94       	dec	r5
    914a:	f7 cf       	rjmp	.-18     	; 0x913a <vfprintf+0x2b4>
    914c:	97 fe       	sbrs	r9, 7
    914e:	4c c0       	rjmp	.+152    	; 0x91e8 <vfprintf+0x362>
    9150:	46 01       	movw	r8, r12
    9152:	d7 fe       	sbrs	r13, 7
    9154:	02 c0       	rjmp	.+4      	; 0x915a <vfprintf+0x2d4>
    9156:	81 2c       	mov	r8, r1
    9158:	91 2c       	mov	r9, r1
    915a:	c6 01       	movw	r24, r12
    915c:	88 19       	sub	r24, r8
    915e:	99 09       	sbc	r25, r9
    9160:	f3 01       	movw	r30, r6
    9162:	e8 0f       	add	r30, r24
    9164:	f9 1f       	adc	r31, r25
    9166:	ed 87       	std	Y+13, r30	; 0x0d
    9168:	fe 87       	std	Y+14, r31	; 0x0e
    916a:	96 01       	movw	r18, r12
    916c:	24 19       	sub	r18, r4
    916e:	31 09       	sbc	r19, r1
    9170:	2f 87       	std	Y+15, r18	; 0x0f
    9172:	38 8b       	std	Y+16, r19	; 0x10
    9174:	01 2f       	mov	r16, r17
    9176:	10 e0       	ldi	r17, 0x00	; 0
    9178:	11 95       	neg	r17
    917a:	01 95       	neg	r16
    917c:	11 09       	sbc	r17, r1
    917e:	3f ef       	ldi	r19, 0xFF	; 255
    9180:	83 16       	cp	r8, r19
    9182:	93 06       	cpc	r9, r19
    9184:	29 f4       	brne	.+10     	; 0x9190 <vfprintf+0x30a>
    9186:	b7 01       	movw	r22, r14
    9188:	8e e2       	ldi	r24, 0x2E	; 46
    918a:	90 e0       	ldi	r25, 0x00	; 0
    918c:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9190:	c8 14       	cp	r12, r8
    9192:	d9 04       	cpc	r13, r9
    9194:	4c f0       	brlt	.+18     	; 0x91a8 <vfprintf+0x322>
    9196:	8f 85       	ldd	r24, Y+15	; 0x0f
    9198:	98 89       	ldd	r25, Y+16	; 0x10
    919a:	88 15       	cp	r24, r8
    919c:	99 05       	cpc	r25, r9
    919e:	24 f4       	brge	.+8      	; 0x91a8 <vfprintf+0x322>
    91a0:	ed 85       	ldd	r30, Y+13	; 0x0d
    91a2:	fe 85       	ldd	r31, Y+14	; 0x0e
    91a4:	81 81       	ldd	r24, Z+1	; 0x01
    91a6:	01 c0       	rjmp	.+2      	; 0x91aa <vfprintf+0x324>
    91a8:	80 e3       	ldi	r24, 0x30	; 48
    91aa:	f1 e0       	ldi	r31, 0x01	; 1
    91ac:	8f 1a       	sub	r8, r31
    91ae:	91 08       	sbc	r9, r1
    91b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    91b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    91b4:	2f 5f       	subi	r18, 0xFF	; 255
    91b6:	3f 4f       	sbci	r19, 0xFF	; 255
    91b8:	2d 87       	std	Y+13, r18	; 0x0d
    91ba:	3e 87       	std	Y+14, r19	; 0x0e
    91bc:	80 16       	cp	r8, r16
    91be:	91 06       	cpc	r9, r17
    91c0:	2c f0       	brlt	.+10     	; 0x91cc <vfprintf+0x346>
    91c2:	b7 01       	movw	r22, r14
    91c4:	90 e0       	ldi	r25, 0x00	; 0
    91c6:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    91ca:	d9 cf       	rjmp	.-78     	; 0x917e <vfprintf+0x2f8>
    91cc:	c8 14       	cp	r12, r8
    91ce:	d9 04       	cpc	r13, r9
    91d0:	41 f4       	brne	.+16     	; 0x91e2 <vfprintf+0x35c>
    91d2:	9a 81       	ldd	r25, Y+2	; 0x02
    91d4:	96 33       	cpi	r25, 0x36	; 54
    91d6:	20 f4       	brcc	.+8      	; 0x91e0 <vfprintf+0x35a>
    91d8:	95 33       	cpi	r25, 0x35	; 53
    91da:	19 f4       	brne	.+6      	; 0x91e2 <vfprintf+0x35c>
    91dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    91de:	34 ff       	sbrs	r19, 4
    91e0:	81 e3       	ldi	r24, 0x31	; 49
    91e2:	b7 01       	movw	r22, r14
    91e4:	90 e0       	ldi	r25, 0x00	; 0
    91e6:	4e c0       	rjmp	.+156    	; 0x9284 <vfprintf+0x3fe>
    91e8:	8a 81       	ldd	r24, Y+2	; 0x02
    91ea:	81 33       	cpi	r24, 0x31	; 49
    91ec:	19 f0       	breq	.+6      	; 0x91f4 <vfprintf+0x36e>
    91ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    91f0:	9f 7e       	andi	r25, 0xEF	; 239
    91f2:	9c 87       	std	Y+12, r25	; 0x0c
    91f4:	b7 01       	movw	r22, r14
    91f6:	90 e0       	ldi	r25, 0x00	; 0
    91f8:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    91fc:	11 11       	cpse	r17, r1
    91fe:	05 c0       	rjmp	.+10     	; 0x920a <vfprintf+0x384>
    9200:	94 fc       	sbrc	r9, 4
    9202:	18 c0       	rjmp	.+48     	; 0x9234 <vfprintf+0x3ae>
    9204:	85 e6       	ldi	r24, 0x65	; 101
    9206:	90 e0       	ldi	r25, 0x00	; 0
    9208:	17 c0       	rjmp	.+46     	; 0x9238 <vfprintf+0x3b2>
    920a:	b7 01       	movw	r22, r14
    920c:	8e e2       	ldi	r24, 0x2E	; 46
    920e:	90 e0       	ldi	r25, 0x00	; 0
    9210:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9214:	1e 5f       	subi	r17, 0xFE	; 254
    9216:	82 e0       	ldi	r24, 0x02	; 2
    9218:	01 e0       	ldi	r16, 0x01	; 1
    921a:	08 0f       	add	r16, r24
    921c:	f3 01       	movw	r30, r6
    921e:	e8 0f       	add	r30, r24
    9220:	f1 1d       	adc	r31, r1
    9222:	80 81       	ld	r24, Z
    9224:	b7 01       	movw	r22, r14
    9226:	90 e0       	ldi	r25, 0x00	; 0
    9228:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    922c:	80 2f       	mov	r24, r16
    922e:	01 13       	cpse	r16, r17
    9230:	f3 cf       	rjmp	.-26     	; 0x9218 <vfprintf+0x392>
    9232:	e6 cf       	rjmp	.-52     	; 0x9200 <vfprintf+0x37a>
    9234:	85 e4       	ldi	r24, 0x45	; 69
    9236:	90 e0       	ldi	r25, 0x00	; 0
    9238:	b7 01       	movw	r22, r14
    923a:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    923e:	d7 fc       	sbrc	r13, 7
    9240:	06 c0       	rjmp	.+12     	; 0x924e <vfprintf+0x3c8>
    9242:	c1 14       	cp	r12, r1
    9244:	d1 04       	cpc	r13, r1
    9246:	41 f4       	brne	.+16     	; 0x9258 <vfprintf+0x3d2>
    9248:	ec 85       	ldd	r30, Y+12	; 0x0c
    924a:	e4 ff       	sbrs	r30, 4
    924c:	05 c0       	rjmp	.+10     	; 0x9258 <vfprintf+0x3d2>
    924e:	d1 94       	neg	r13
    9250:	c1 94       	neg	r12
    9252:	d1 08       	sbc	r13, r1
    9254:	8d e2       	ldi	r24, 0x2D	; 45
    9256:	01 c0       	rjmp	.+2      	; 0x925a <vfprintf+0x3d4>
    9258:	8b e2       	ldi	r24, 0x2B	; 43
    925a:	b7 01       	movw	r22, r14
    925c:	90 e0       	ldi	r25, 0x00	; 0
    925e:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9262:	80 e3       	ldi	r24, 0x30	; 48
    9264:	2a e0       	ldi	r18, 0x0A	; 10
    9266:	c2 16       	cp	r12, r18
    9268:	d1 04       	cpc	r13, r1
    926a:	2c f0       	brlt	.+10     	; 0x9276 <vfprintf+0x3f0>
    926c:	8f 5f       	subi	r24, 0xFF	; 255
    926e:	fa e0       	ldi	r31, 0x0A	; 10
    9270:	cf 1a       	sub	r12, r31
    9272:	d1 08       	sbc	r13, r1
    9274:	f7 cf       	rjmp	.-18     	; 0x9264 <vfprintf+0x3de>
    9276:	b7 01       	movw	r22, r14
    9278:	90 e0       	ldi	r25, 0x00	; 0
    927a:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    927e:	b7 01       	movw	r22, r14
    9280:	c6 01       	movw	r24, r12
    9282:	c0 96       	adiw	r24, 0x30	; 48
    9284:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9288:	54 c1       	rjmp	.+680    	; 0x9532 <vfprintf+0x6ac>
    928a:	83 36       	cpi	r24, 0x63	; 99
    928c:	31 f0       	breq	.+12     	; 0x929a <vfprintf+0x414>
    928e:	83 37       	cpi	r24, 0x73	; 115
    9290:	79 f0       	breq	.+30     	; 0x92b0 <vfprintf+0x42a>
    9292:	83 35       	cpi	r24, 0x53	; 83
    9294:	09 f0       	breq	.+2      	; 0x9298 <vfprintf+0x412>
    9296:	56 c0       	rjmp	.+172    	; 0x9344 <vfprintf+0x4be>
    9298:	20 c0       	rjmp	.+64     	; 0x92da <vfprintf+0x454>
    929a:	56 01       	movw	r10, r12
    929c:	32 e0       	ldi	r19, 0x02	; 2
    929e:	a3 0e       	add	r10, r19
    92a0:	b1 1c       	adc	r11, r1
    92a2:	f6 01       	movw	r30, r12
    92a4:	80 81       	ld	r24, Z
    92a6:	89 83       	std	Y+1, r24	; 0x01
    92a8:	01 e0       	ldi	r16, 0x01	; 1
    92aa:	10 e0       	ldi	r17, 0x00	; 0
    92ac:	63 01       	movw	r12, r6
    92ae:	12 c0       	rjmp	.+36     	; 0x92d4 <vfprintf+0x44e>
    92b0:	56 01       	movw	r10, r12
    92b2:	f2 e0       	ldi	r31, 0x02	; 2
    92b4:	af 0e       	add	r10, r31
    92b6:	b1 1c       	adc	r11, r1
    92b8:	f6 01       	movw	r30, r12
    92ba:	c0 80       	ld	r12, Z
    92bc:	d1 80       	ldd	r13, Z+1	; 0x01
    92be:	96 fe       	sbrs	r9, 6
    92c0:	03 c0       	rjmp	.+6      	; 0x92c8 <vfprintf+0x442>
    92c2:	61 2f       	mov	r22, r17
    92c4:	70 e0       	ldi	r23, 0x00	; 0
    92c6:	02 c0       	rjmp	.+4      	; 0x92cc <vfprintf+0x446>
    92c8:	6f ef       	ldi	r22, 0xFF	; 255
    92ca:	7f ef       	ldi	r23, 0xFF	; 255
    92cc:	c6 01       	movw	r24, r12
    92ce:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <strnlen>
    92d2:	8c 01       	movw	r16, r24
    92d4:	f9 2d       	mov	r31, r9
    92d6:	ff 77       	andi	r31, 0x7F	; 127
    92d8:	14 c0       	rjmp	.+40     	; 0x9302 <vfprintf+0x47c>
    92da:	56 01       	movw	r10, r12
    92dc:	22 e0       	ldi	r18, 0x02	; 2
    92de:	a2 0e       	add	r10, r18
    92e0:	b1 1c       	adc	r11, r1
    92e2:	f6 01       	movw	r30, r12
    92e4:	c0 80       	ld	r12, Z
    92e6:	d1 80       	ldd	r13, Z+1	; 0x01
    92e8:	96 fe       	sbrs	r9, 6
    92ea:	03 c0       	rjmp	.+6      	; 0x92f2 <vfprintf+0x46c>
    92ec:	61 2f       	mov	r22, r17
    92ee:	70 e0       	ldi	r23, 0x00	; 0
    92f0:	02 c0       	rjmp	.+4      	; 0x92f6 <vfprintf+0x470>
    92f2:	6f ef       	ldi	r22, 0xFF	; 255
    92f4:	7f ef       	ldi	r23, 0xFF	; 255
    92f6:	c6 01       	movw	r24, r12
    92f8:	0e 94 be 4c 	call	0x997c	; 0x997c <strnlen_P>
    92fc:	8c 01       	movw	r16, r24
    92fe:	f9 2d       	mov	r31, r9
    9300:	f0 68       	ori	r31, 0x80	; 128
    9302:	9f 2e       	mov	r9, r31
    9304:	f3 fd       	sbrc	r31, 3
    9306:	1a c0       	rjmp	.+52     	; 0x933c <vfprintf+0x4b6>
    9308:	85 2d       	mov	r24, r5
    930a:	90 e0       	ldi	r25, 0x00	; 0
    930c:	08 17       	cp	r16, r24
    930e:	19 07       	cpc	r17, r25
    9310:	a8 f4       	brcc	.+42     	; 0x933c <vfprintf+0x4b6>
    9312:	b7 01       	movw	r22, r14
    9314:	80 e2       	ldi	r24, 0x20	; 32
    9316:	90 e0       	ldi	r25, 0x00	; 0
    9318:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    931c:	5a 94       	dec	r5
    931e:	f4 cf       	rjmp	.-24     	; 0x9308 <vfprintf+0x482>
    9320:	f6 01       	movw	r30, r12
    9322:	97 fc       	sbrc	r9, 7
    9324:	85 91       	lpm	r24, Z+
    9326:	97 fe       	sbrs	r9, 7
    9328:	81 91       	ld	r24, Z+
    932a:	6f 01       	movw	r12, r30
    932c:	b7 01       	movw	r22, r14
    932e:	90 e0       	ldi	r25, 0x00	; 0
    9330:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9334:	51 10       	cpse	r5, r1
    9336:	5a 94       	dec	r5
    9338:	01 50       	subi	r16, 0x01	; 1
    933a:	11 09       	sbc	r17, r1
    933c:	01 15       	cp	r16, r1
    933e:	11 05       	cpc	r17, r1
    9340:	79 f7       	brne	.-34     	; 0x9320 <vfprintf+0x49a>
    9342:	f7 c0       	rjmp	.+494    	; 0x9532 <vfprintf+0x6ac>
    9344:	84 36       	cpi	r24, 0x64	; 100
    9346:	11 f0       	breq	.+4      	; 0x934c <vfprintf+0x4c6>
    9348:	89 36       	cpi	r24, 0x69	; 105
    934a:	61 f5       	brne	.+88     	; 0x93a4 <vfprintf+0x51e>
    934c:	56 01       	movw	r10, r12
    934e:	97 fe       	sbrs	r9, 7
    9350:	09 c0       	rjmp	.+18     	; 0x9364 <vfprintf+0x4de>
    9352:	24 e0       	ldi	r18, 0x04	; 4
    9354:	a2 0e       	add	r10, r18
    9356:	b1 1c       	adc	r11, r1
    9358:	f6 01       	movw	r30, r12
    935a:	60 81       	ld	r22, Z
    935c:	71 81       	ldd	r23, Z+1	; 0x01
    935e:	82 81       	ldd	r24, Z+2	; 0x02
    9360:	93 81       	ldd	r25, Z+3	; 0x03
    9362:	0a c0       	rjmp	.+20     	; 0x9378 <vfprintf+0x4f2>
    9364:	f2 e0       	ldi	r31, 0x02	; 2
    9366:	af 0e       	add	r10, r31
    9368:	b1 1c       	adc	r11, r1
    936a:	f6 01       	movw	r30, r12
    936c:	60 81       	ld	r22, Z
    936e:	71 81       	ldd	r23, Z+1	; 0x01
    9370:	07 2e       	mov	r0, r23
    9372:	00 0c       	add	r0, r0
    9374:	88 0b       	sbc	r24, r24
    9376:	99 0b       	sbc	r25, r25
    9378:	f9 2d       	mov	r31, r9
    937a:	ff 76       	andi	r31, 0x6F	; 111
    937c:	9f 2e       	mov	r9, r31
    937e:	97 ff       	sbrs	r25, 7
    9380:	09 c0       	rjmp	.+18     	; 0x9394 <vfprintf+0x50e>
    9382:	90 95       	com	r25
    9384:	80 95       	com	r24
    9386:	70 95       	com	r23
    9388:	61 95       	neg	r22
    938a:	7f 4f       	sbci	r23, 0xFF	; 255
    938c:	8f 4f       	sbci	r24, 0xFF	; 255
    938e:	9f 4f       	sbci	r25, 0xFF	; 255
    9390:	f0 68       	ori	r31, 0x80	; 128
    9392:	9f 2e       	mov	r9, r31
    9394:	2a e0       	ldi	r18, 0x0A	; 10
    9396:	30 e0       	ldi	r19, 0x00	; 0
    9398:	a3 01       	movw	r20, r6
    939a:	0e 94 89 4d 	call	0x9b12	; 0x9b12 <__ultoa_invert>
    939e:	c8 2e       	mov	r12, r24
    93a0:	c6 18       	sub	r12, r6
    93a2:	3f c0       	rjmp	.+126    	; 0x9422 <vfprintf+0x59c>
    93a4:	09 2d       	mov	r16, r9
    93a6:	85 37       	cpi	r24, 0x75	; 117
    93a8:	21 f4       	brne	.+8      	; 0x93b2 <vfprintf+0x52c>
    93aa:	0f 7e       	andi	r16, 0xEF	; 239
    93ac:	2a e0       	ldi	r18, 0x0A	; 10
    93ae:	30 e0       	ldi	r19, 0x00	; 0
    93b0:	1d c0       	rjmp	.+58     	; 0x93ec <vfprintf+0x566>
    93b2:	09 7f       	andi	r16, 0xF9	; 249
    93b4:	8f 36       	cpi	r24, 0x6F	; 111
    93b6:	91 f0       	breq	.+36     	; 0x93dc <vfprintf+0x556>
    93b8:	18 f4       	brcc	.+6      	; 0x93c0 <vfprintf+0x53a>
    93ba:	88 35       	cpi	r24, 0x58	; 88
    93bc:	59 f0       	breq	.+22     	; 0x93d4 <vfprintf+0x54e>
    93be:	c3 c0       	rjmp	.+390    	; 0x9546 <vfprintf+0x6c0>
    93c0:	80 37       	cpi	r24, 0x70	; 112
    93c2:	19 f0       	breq	.+6      	; 0x93ca <vfprintf+0x544>
    93c4:	88 37       	cpi	r24, 0x78	; 120
    93c6:	11 f0       	breq	.+4      	; 0x93cc <vfprintf+0x546>
    93c8:	be c0       	rjmp	.+380    	; 0x9546 <vfprintf+0x6c0>
    93ca:	00 61       	ori	r16, 0x10	; 16
    93cc:	04 ff       	sbrs	r16, 4
    93ce:	09 c0       	rjmp	.+18     	; 0x93e2 <vfprintf+0x55c>
    93d0:	04 60       	ori	r16, 0x04	; 4
    93d2:	07 c0       	rjmp	.+14     	; 0x93e2 <vfprintf+0x55c>
    93d4:	94 fe       	sbrs	r9, 4
    93d6:	08 c0       	rjmp	.+16     	; 0x93e8 <vfprintf+0x562>
    93d8:	06 60       	ori	r16, 0x06	; 6
    93da:	06 c0       	rjmp	.+12     	; 0x93e8 <vfprintf+0x562>
    93dc:	28 e0       	ldi	r18, 0x08	; 8
    93de:	30 e0       	ldi	r19, 0x00	; 0
    93e0:	05 c0       	rjmp	.+10     	; 0x93ec <vfprintf+0x566>
    93e2:	20 e1       	ldi	r18, 0x10	; 16
    93e4:	30 e0       	ldi	r19, 0x00	; 0
    93e6:	02 c0       	rjmp	.+4      	; 0x93ec <vfprintf+0x566>
    93e8:	20 e1       	ldi	r18, 0x10	; 16
    93ea:	32 e0       	ldi	r19, 0x02	; 2
    93ec:	56 01       	movw	r10, r12
    93ee:	07 ff       	sbrs	r16, 7
    93f0:	09 c0       	rjmp	.+18     	; 0x9404 <vfprintf+0x57e>
    93f2:	84 e0       	ldi	r24, 0x04	; 4
    93f4:	a8 0e       	add	r10, r24
    93f6:	b1 1c       	adc	r11, r1
    93f8:	f6 01       	movw	r30, r12
    93fa:	60 81       	ld	r22, Z
    93fc:	71 81       	ldd	r23, Z+1	; 0x01
    93fe:	82 81       	ldd	r24, Z+2	; 0x02
    9400:	93 81       	ldd	r25, Z+3	; 0x03
    9402:	08 c0       	rjmp	.+16     	; 0x9414 <vfprintf+0x58e>
    9404:	f2 e0       	ldi	r31, 0x02	; 2
    9406:	af 0e       	add	r10, r31
    9408:	b1 1c       	adc	r11, r1
    940a:	f6 01       	movw	r30, r12
    940c:	60 81       	ld	r22, Z
    940e:	71 81       	ldd	r23, Z+1	; 0x01
    9410:	80 e0       	ldi	r24, 0x00	; 0
    9412:	90 e0       	ldi	r25, 0x00	; 0
    9414:	a3 01       	movw	r20, r6
    9416:	0e 94 89 4d 	call	0x9b12	; 0x9b12 <__ultoa_invert>
    941a:	c8 2e       	mov	r12, r24
    941c:	c6 18       	sub	r12, r6
    941e:	0f 77       	andi	r16, 0x7F	; 127
    9420:	90 2e       	mov	r9, r16
    9422:	96 fe       	sbrs	r9, 6
    9424:	0b c0       	rjmp	.+22     	; 0x943c <vfprintf+0x5b6>
    9426:	09 2d       	mov	r16, r9
    9428:	0e 7f       	andi	r16, 0xFE	; 254
    942a:	c1 16       	cp	r12, r17
    942c:	50 f4       	brcc	.+20     	; 0x9442 <vfprintf+0x5bc>
    942e:	94 fe       	sbrs	r9, 4
    9430:	0a c0       	rjmp	.+20     	; 0x9446 <vfprintf+0x5c0>
    9432:	92 fc       	sbrc	r9, 2
    9434:	08 c0       	rjmp	.+16     	; 0x9446 <vfprintf+0x5c0>
    9436:	09 2d       	mov	r16, r9
    9438:	0e 7e       	andi	r16, 0xEE	; 238
    943a:	05 c0       	rjmp	.+10     	; 0x9446 <vfprintf+0x5c0>
    943c:	dc 2c       	mov	r13, r12
    943e:	09 2d       	mov	r16, r9
    9440:	03 c0       	rjmp	.+6      	; 0x9448 <vfprintf+0x5c2>
    9442:	dc 2c       	mov	r13, r12
    9444:	01 c0       	rjmp	.+2      	; 0x9448 <vfprintf+0x5c2>
    9446:	d1 2e       	mov	r13, r17
    9448:	04 ff       	sbrs	r16, 4
    944a:	0d c0       	rjmp	.+26     	; 0x9466 <vfprintf+0x5e0>
    944c:	fe 01       	movw	r30, r28
    944e:	ec 0d       	add	r30, r12
    9450:	f1 1d       	adc	r31, r1
    9452:	80 81       	ld	r24, Z
    9454:	80 33       	cpi	r24, 0x30	; 48
    9456:	11 f4       	brne	.+4      	; 0x945c <vfprintf+0x5d6>
    9458:	09 7e       	andi	r16, 0xE9	; 233
    945a:	09 c0       	rjmp	.+18     	; 0x946e <vfprintf+0x5e8>
    945c:	02 ff       	sbrs	r16, 2
    945e:	06 c0       	rjmp	.+12     	; 0x946c <vfprintf+0x5e6>
    9460:	d3 94       	inc	r13
    9462:	d3 94       	inc	r13
    9464:	04 c0       	rjmp	.+8      	; 0x946e <vfprintf+0x5e8>
    9466:	80 2f       	mov	r24, r16
    9468:	86 78       	andi	r24, 0x86	; 134
    946a:	09 f0       	breq	.+2      	; 0x946e <vfprintf+0x5e8>
    946c:	d3 94       	inc	r13
    946e:	03 fd       	sbrc	r16, 3
    9470:	11 c0       	rjmp	.+34     	; 0x9494 <vfprintf+0x60e>
    9472:	00 ff       	sbrs	r16, 0
    9474:	06 c0       	rjmp	.+12     	; 0x9482 <vfprintf+0x5fc>
    9476:	1c 2d       	mov	r17, r12
    9478:	d5 14       	cp	r13, r5
    947a:	80 f4       	brcc	.+32     	; 0x949c <vfprintf+0x616>
    947c:	15 0d       	add	r17, r5
    947e:	1d 19       	sub	r17, r13
    9480:	0d c0       	rjmp	.+26     	; 0x949c <vfprintf+0x616>
    9482:	d5 14       	cp	r13, r5
    9484:	58 f4       	brcc	.+22     	; 0x949c <vfprintf+0x616>
    9486:	b7 01       	movw	r22, r14
    9488:	80 e2       	ldi	r24, 0x20	; 32
    948a:	90 e0       	ldi	r25, 0x00	; 0
    948c:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9490:	d3 94       	inc	r13
    9492:	f7 cf       	rjmp	.-18     	; 0x9482 <vfprintf+0x5fc>
    9494:	d5 14       	cp	r13, r5
    9496:	10 f4       	brcc	.+4      	; 0x949c <vfprintf+0x616>
    9498:	5d 18       	sub	r5, r13
    949a:	01 c0       	rjmp	.+2      	; 0x949e <vfprintf+0x618>
    949c:	51 2c       	mov	r5, r1
    949e:	04 ff       	sbrs	r16, 4
    94a0:	10 c0       	rjmp	.+32     	; 0x94c2 <vfprintf+0x63c>
    94a2:	b7 01       	movw	r22, r14
    94a4:	80 e3       	ldi	r24, 0x30	; 48
    94a6:	90 e0       	ldi	r25, 0x00	; 0
    94a8:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    94ac:	02 ff       	sbrs	r16, 2
    94ae:	17 c0       	rjmp	.+46     	; 0x94de <vfprintf+0x658>
    94b0:	01 fd       	sbrc	r16, 1
    94b2:	03 c0       	rjmp	.+6      	; 0x94ba <vfprintf+0x634>
    94b4:	88 e7       	ldi	r24, 0x78	; 120
    94b6:	90 e0       	ldi	r25, 0x00	; 0
    94b8:	02 c0       	rjmp	.+4      	; 0x94be <vfprintf+0x638>
    94ba:	88 e5       	ldi	r24, 0x58	; 88
    94bc:	90 e0       	ldi	r25, 0x00	; 0
    94be:	b7 01       	movw	r22, r14
    94c0:	0c c0       	rjmp	.+24     	; 0x94da <vfprintf+0x654>
    94c2:	80 2f       	mov	r24, r16
    94c4:	86 78       	andi	r24, 0x86	; 134
    94c6:	59 f0       	breq	.+22     	; 0x94de <vfprintf+0x658>
    94c8:	01 ff       	sbrs	r16, 1
    94ca:	02 c0       	rjmp	.+4      	; 0x94d0 <vfprintf+0x64a>
    94cc:	8b e2       	ldi	r24, 0x2B	; 43
    94ce:	01 c0       	rjmp	.+2      	; 0x94d2 <vfprintf+0x64c>
    94d0:	80 e2       	ldi	r24, 0x20	; 32
    94d2:	07 fd       	sbrc	r16, 7
    94d4:	8d e2       	ldi	r24, 0x2D	; 45
    94d6:	b7 01       	movw	r22, r14
    94d8:	90 e0       	ldi	r25, 0x00	; 0
    94da:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    94de:	c1 16       	cp	r12, r17
    94e0:	38 f4       	brcc	.+14     	; 0x94f0 <vfprintf+0x66a>
    94e2:	b7 01       	movw	r22, r14
    94e4:	80 e3       	ldi	r24, 0x30	; 48
    94e6:	90 e0       	ldi	r25, 0x00	; 0
    94e8:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    94ec:	11 50       	subi	r17, 0x01	; 1
    94ee:	f7 cf       	rjmp	.-18     	; 0x94de <vfprintf+0x658>
    94f0:	ca 94       	dec	r12
    94f2:	f3 01       	movw	r30, r6
    94f4:	ec 0d       	add	r30, r12
    94f6:	f1 1d       	adc	r31, r1
    94f8:	80 81       	ld	r24, Z
    94fa:	b7 01       	movw	r22, r14
    94fc:	90 e0       	ldi	r25, 0x00	; 0
    94fe:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9502:	c1 10       	cpse	r12, r1
    9504:	f5 cf       	rjmp	.-22     	; 0x94f0 <vfprintf+0x66a>
    9506:	15 c0       	rjmp	.+42     	; 0x9532 <vfprintf+0x6ac>
    9508:	f4 e0       	ldi	r31, 0x04	; 4
    950a:	f5 15       	cp	r31, r5
    950c:	60 f5       	brcc	.+88     	; 0x9566 <vfprintf+0x6e0>
    950e:	84 e0       	ldi	r24, 0x04	; 4
    9510:	58 1a       	sub	r5, r24
    9512:	93 fe       	sbrs	r9, 3
    9514:	1f c0       	rjmp	.+62     	; 0x9554 <vfprintf+0x6ce>
    9516:	01 11       	cpse	r16, r1
    9518:	27 c0       	rjmp	.+78     	; 0x9568 <vfprintf+0x6e2>
    951a:	2c 85       	ldd	r18, Y+12	; 0x0c
    951c:	23 ff       	sbrs	r18, 3
    951e:	2a c0       	rjmp	.+84     	; 0x9574 <vfprintf+0x6ee>
    9520:	0c e3       	ldi	r16, 0x3C	; 60
    9522:	12 e0       	ldi	r17, 0x02	; 2
    9524:	39 2d       	mov	r19, r9
    9526:	30 71       	andi	r19, 0x10	; 16
    9528:	93 2e       	mov	r9, r19
    952a:	f8 01       	movw	r30, r16
    952c:	84 91       	lpm	r24, Z
    952e:	81 11       	cpse	r24, r1
    9530:	24 c0       	rjmp	.+72     	; 0x957a <vfprintf+0x6f4>
    9532:	55 20       	and	r5, r5
    9534:	09 f4       	brne	.+2      	; 0x9538 <vfprintf+0x6b2>
    9536:	e4 cc       	rjmp	.-1592   	; 0x8f00 <vfprintf+0x7a>
    9538:	b7 01       	movw	r22, r14
    953a:	80 e2       	ldi	r24, 0x20	; 32
    953c:	90 e0       	ldi	r25, 0x00	; 0
    953e:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9542:	5a 94       	dec	r5
    9544:	f6 cf       	rjmp	.-20     	; 0x9532 <vfprintf+0x6ac>
    9546:	f7 01       	movw	r30, r14
    9548:	86 81       	ldd	r24, Z+6	; 0x06
    954a:	97 81       	ldd	r25, Z+7	; 0x07
    954c:	26 c0       	rjmp	.+76     	; 0x959a <vfprintf+0x714>
    954e:	8f ef       	ldi	r24, 0xFF	; 255
    9550:	9f ef       	ldi	r25, 0xFF	; 255
    9552:	23 c0       	rjmp	.+70     	; 0x959a <vfprintf+0x714>
    9554:	b7 01       	movw	r22, r14
    9556:	80 e2       	ldi	r24, 0x20	; 32
    9558:	90 e0       	ldi	r25, 0x00	; 0
    955a:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    955e:	5a 94       	dec	r5
    9560:	51 10       	cpse	r5, r1
    9562:	f8 cf       	rjmp	.-16     	; 0x9554 <vfprintf+0x6ce>
    9564:	d8 cf       	rjmp	.-80     	; 0x9516 <vfprintf+0x690>
    9566:	51 2c       	mov	r5, r1
    9568:	b7 01       	movw	r22, r14
    956a:	80 2f       	mov	r24, r16
    956c:	90 e0       	ldi	r25, 0x00	; 0
    956e:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9572:	d3 cf       	rjmp	.-90     	; 0x951a <vfprintf+0x694>
    9574:	00 e4       	ldi	r16, 0x40	; 64
    9576:	12 e0       	ldi	r17, 0x02	; 2
    9578:	d5 cf       	rjmp	.-86     	; 0x9524 <vfprintf+0x69e>
    957a:	91 10       	cpse	r9, r1
    957c:	80 52       	subi	r24, 0x20	; 32
    957e:	b7 01       	movw	r22, r14
    9580:	90 e0       	ldi	r25, 0x00	; 0
    9582:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <fputc>
    9586:	0f 5f       	subi	r16, 0xFF	; 255
    9588:	1f 4f       	sbci	r17, 0xFF	; 255
    958a:	cf cf       	rjmp	.-98     	; 0x952a <vfprintf+0x6a4>
    958c:	23 e0       	ldi	r18, 0x03	; 3
    958e:	25 15       	cp	r18, r5
    9590:	10 f4       	brcc	.+4      	; 0x9596 <vfprintf+0x710>
    9592:	83 e0       	ldi	r24, 0x03	; 3
    9594:	bd cf       	rjmp	.-134    	; 0x9510 <vfprintf+0x68a>
    9596:	51 2c       	mov	r5, r1
    9598:	c0 cf       	rjmp	.-128    	; 0x951a <vfprintf+0x694>
    959a:	60 96       	adiw	r28, 0x10	; 16
    959c:	cd bf       	out	0x3d, r28	; 61
    959e:	de bf       	out	0x3e, r29	; 62
    95a0:	df 91       	pop	r29
    95a2:	cf 91       	pop	r28
    95a4:	1f 91       	pop	r17
    95a6:	0f 91       	pop	r16
    95a8:	ff 90       	pop	r15
    95aa:	ef 90       	pop	r14
    95ac:	df 90       	pop	r13
    95ae:	cf 90       	pop	r12
    95b0:	bf 90       	pop	r11
    95b2:	af 90       	pop	r10
    95b4:	9f 90       	pop	r9
    95b6:	8f 90       	pop	r8
    95b8:	7f 90       	pop	r7
    95ba:	6f 90       	pop	r6
    95bc:	5f 90       	pop	r5
    95be:	4f 90       	pop	r4
    95c0:	3f 90       	pop	r3
    95c2:	2f 90       	pop	r2
    95c4:	08 95       	ret

000095c6 <__udivmodsi4>:
    95c6:	a1 e2       	ldi	r26, 0x21	; 33
    95c8:	1a 2e       	mov	r1, r26
    95ca:	aa 1b       	sub	r26, r26
    95cc:	bb 1b       	sub	r27, r27
    95ce:	fd 01       	movw	r30, r26
    95d0:	0d c0       	rjmp	.+26     	; 0x95ec <__udivmodsi4_ep>

000095d2 <__udivmodsi4_loop>:
    95d2:	aa 1f       	adc	r26, r26
    95d4:	bb 1f       	adc	r27, r27
    95d6:	ee 1f       	adc	r30, r30
    95d8:	ff 1f       	adc	r31, r31
    95da:	a2 17       	cp	r26, r18
    95dc:	b3 07       	cpc	r27, r19
    95de:	e4 07       	cpc	r30, r20
    95e0:	f5 07       	cpc	r31, r21
    95e2:	20 f0       	brcs	.+8      	; 0x95ec <__udivmodsi4_ep>
    95e4:	a2 1b       	sub	r26, r18
    95e6:	b3 0b       	sbc	r27, r19
    95e8:	e4 0b       	sbc	r30, r20
    95ea:	f5 0b       	sbc	r31, r21

000095ec <__udivmodsi4_ep>:
    95ec:	66 1f       	adc	r22, r22
    95ee:	77 1f       	adc	r23, r23
    95f0:	88 1f       	adc	r24, r24
    95f2:	99 1f       	adc	r25, r25
    95f4:	1a 94       	dec	r1
    95f6:	69 f7       	brne	.-38     	; 0x95d2 <__udivmodsi4_loop>
    95f8:	60 95       	com	r22
    95fa:	70 95       	com	r23
    95fc:	80 95       	com	r24
    95fe:	90 95       	com	r25
    9600:	9b 01       	movw	r18, r22
    9602:	ac 01       	movw	r20, r24
    9604:	bd 01       	movw	r22, r26
    9606:	cf 01       	movw	r24, r30
    9608:	08 95       	ret

0000960a <__tablejump2__>:
    960a:	ee 0f       	add	r30, r30
    960c:	ff 1f       	adc	r31, r31
    960e:	88 1f       	adc	r24, r24
    9610:	8b bf       	out	0x3b, r24	; 59
    9612:	07 90       	elpm	r0, Z+
    9614:	f6 91       	elpm	r31, Z
    9616:	e0 2d       	mov	r30, r0
    9618:	19 94       	eijmp

0000961a <__muldi3>:
    961a:	df 93       	push	r29
    961c:	cf 93       	push	r28
    961e:	1f 93       	push	r17
    9620:	0f 93       	push	r16
    9622:	9a 9d       	mul	r25, r10
    9624:	f0 2d       	mov	r31, r0
    9626:	21 9f       	mul	r18, r17
    9628:	f0 0d       	add	r31, r0
    962a:	8b 9d       	mul	r24, r11
    962c:	f0 0d       	add	r31, r0
    962e:	8a 9d       	mul	r24, r10
    9630:	e0 2d       	mov	r30, r0
    9632:	f1 0d       	add	r31, r1
    9634:	03 9f       	mul	r16, r19
    9636:	f0 0d       	add	r31, r0
    9638:	02 9f       	mul	r16, r18
    963a:	e0 0d       	add	r30, r0
    963c:	f1 1d       	adc	r31, r1
    963e:	4e 9d       	mul	r20, r14
    9640:	e0 0d       	add	r30, r0
    9642:	f1 1d       	adc	r31, r1
    9644:	5e 9d       	mul	r21, r14
    9646:	f0 0d       	add	r31, r0
    9648:	4f 9d       	mul	r20, r15
    964a:	f0 0d       	add	r31, r0
    964c:	7f 93       	push	r23
    964e:	6f 93       	push	r22
    9650:	bf 92       	push	r11
    9652:	af 92       	push	r10
    9654:	5f 93       	push	r21
    9656:	4f 93       	push	r20
    9658:	d5 01       	movw	r26, r10
    965a:	0e 94 d7 4b 	call	0x97ae	; 0x97ae <__umulhisi3>
    965e:	8b 01       	movw	r16, r22
    9660:	ac 01       	movw	r20, r24
    9662:	d7 01       	movw	r26, r14
    9664:	0e 94 d7 4b 	call	0x97ae	; 0x97ae <__umulhisi3>
    9668:	eb 01       	movw	r28, r22
    966a:	e8 0f       	add	r30, r24
    966c:	f9 1f       	adc	r31, r25
    966e:	d6 01       	movw	r26, r12
    9670:	0e 94 5d 4b 	call	0x96ba	; 0x96ba <__muldi3_6>
    9674:	2f 91       	pop	r18
    9676:	3f 91       	pop	r19
    9678:	d6 01       	movw	r26, r12
    967a:	0e 94 d7 4b 	call	0x97ae	; 0x97ae <__umulhisi3>
    967e:	c6 0f       	add	r28, r22
    9680:	d7 1f       	adc	r29, r23
    9682:	e8 1f       	adc	r30, r24
    9684:	f9 1f       	adc	r31, r25
    9686:	af 91       	pop	r26
    9688:	bf 91       	pop	r27
    968a:	0e 94 5d 4b 	call	0x96ba	; 0x96ba <__muldi3_6>
    968e:	2f 91       	pop	r18
    9690:	3f 91       	pop	r19
    9692:	0e 94 d7 4b 	call	0x97ae	; 0x97ae <__umulhisi3>
    9696:	c6 0f       	add	r28, r22
    9698:	d7 1f       	adc	r29, r23
    969a:	e8 1f       	adc	r30, r24
    969c:	f9 1f       	adc	r31, r25
    969e:	d6 01       	movw	r26, r12
    96a0:	0e 94 d7 4b 	call	0x97ae	; 0x97ae <__umulhisi3>
    96a4:	e6 0f       	add	r30, r22
    96a6:	f7 1f       	adc	r31, r23
    96a8:	98 01       	movw	r18, r16
    96aa:	be 01       	movw	r22, r28
    96ac:	cf 01       	movw	r24, r30
    96ae:	11 24       	eor	r1, r1
    96b0:	0f 91       	pop	r16
    96b2:	1f 91       	pop	r17
    96b4:	cf 91       	pop	r28
    96b6:	df 91       	pop	r29
    96b8:	08 95       	ret

000096ba <__muldi3_6>:
    96ba:	0e 94 d7 4b 	call	0x97ae	; 0x97ae <__umulhisi3>
    96be:	46 0f       	add	r20, r22
    96c0:	57 1f       	adc	r21, r23
    96c2:	c8 1f       	adc	r28, r24
    96c4:	d9 1f       	adc	r29, r25
    96c6:	08 f4       	brcc	.+2      	; 0x96ca <__muldi3_6+0x10>
    96c8:	31 96       	adiw	r30, 0x01	; 1
    96ca:	08 95       	ret

000096cc <__negdi2>:
    96cc:	60 95       	com	r22
    96ce:	70 95       	com	r23
    96d0:	80 95       	com	r24
    96d2:	90 95       	com	r25
    96d4:	30 95       	com	r19
    96d6:	40 95       	com	r20
    96d8:	50 95       	com	r21
    96da:	21 95       	neg	r18
    96dc:	3f 4f       	sbci	r19, 0xFF	; 255
    96de:	4f 4f       	sbci	r20, 0xFF	; 255
    96e0:	5f 4f       	sbci	r21, 0xFF	; 255
    96e2:	6f 4f       	sbci	r22, 0xFF	; 255
    96e4:	7f 4f       	sbci	r23, 0xFF	; 255
    96e6:	8f 4f       	sbci	r24, 0xFF	; 255
    96e8:	9f 4f       	sbci	r25, 0xFF	; 255
    96ea:	08 95       	ret

000096ec <__ashldi3>:
    96ec:	0f 93       	push	r16
    96ee:	08 30       	cpi	r16, 0x08	; 8
    96f0:	90 f0       	brcs	.+36     	; 0x9716 <__ashldi3+0x2a>
    96f2:	98 2f       	mov	r25, r24
    96f4:	87 2f       	mov	r24, r23
    96f6:	76 2f       	mov	r23, r22
    96f8:	65 2f       	mov	r22, r21
    96fa:	54 2f       	mov	r21, r20
    96fc:	43 2f       	mov	r20, r19
    96fe:	32 2f       	mov	r19, r18
    9700:	22 27       	eor	r18, r18
    9702:	08 50       	subi	r16, 0x08	; 8
    9704:	f4 cf       	rjmp	.-24     	; 0x96ee <__ashldi3+0x2>
    9706:	22 0f       	add	r18, r18
    9708:	33 1f       	adc	r19, r19
    970a:	44 1f       	adc	r20, r20
    970c:	55 1f       	adc	r21, r21
    970e:	66 1f       	adc	r22, r22
    9710:	77 1f       	adc	r23, r23
    9712:	88 1f       	adc	r24, r24
    9714:	99 1f       	adc	r25, r25
    9716:	0a 95       	dec	r16
    9718:	b2 f7       	brpl	.-20     	; 0x9706 <__ashldi3+0x1a>
    971a:	0f 91       	pop	r16
    971c:	08 95       	ret

0000971e <__ashrdi3>:
    971e:	97 fb       	bst	r25, 7
    9720:	10 f8       	bld	r1, 0

00009722 <__lshrdi3>:
    9722:	16 94       	lsr	r1
    9724:	00 08       	sbc	r0, r0
    9726:	0f 93       	push	r16
    9728:	08 30       	cpi	r16, 0x08	; 8
    972a:	98 f0       	brcs	.+38     	; 0x9752 <__lshrdi3+0x30>
    972c:	08 50       	subi	r16, 0x08	; 8
    972e:	23 2f       	mov	r18, r19
    9730:	34 2f       	mov	r19, r20
    9732:	45 2f       	mov	r20, r21
    9734:	56 2f       	mov	r21, r22
    9736:	67 2f       	mov	r22, r23
    9738:	78 2f       	mov	r23, r24
    973a:	89 2f       	mov	r24, r25
    973c:	90 2d       	mov	r25, r0
    973e:	f4 cf       	rjmp	.-24     	; 0x9728 <__lshrdi3+0x6>
    9740:	05 94       	asr	r0
    9742:	97 95       	ror	r25
    9744:	87 95       	ror	r24
    9746:	77 95       	ror	r23
    9748:	67 95       	ror	r22
    974a:	57 95       	ror	r21
    974c:	47 95       	ror	r20
    974e:	37 95       	ror	r19
    9750:	27 95       	ror	r18
    9752:	0a 95       	dec	r16
    9754:	aa f7       	brpl	.-22     	; 0x9740 <__lshrdi3+0x1e>
    9756:	0f 91       	pop	r16
    9758:	08 95       	ret

0000975a <__adddi3>:
    975a:	2a 0d       	add	r18, r10
    975c:	3b 1d       	adc	r19, r11
    975e:	4c 1d       	adc	r20, r12
    9760:	5d 1d       	adc	r21, r13
    9762:	6e 1d       	adc	r22, r14
    9764:	7f 1d       	adc	r23, r15
    9766:	80 1f       	adc	r24, r16
    9768:	91 1f       	adc	r25, r17
    976a:	08 95       	ret

0000976c <__adddi3_s8>:
    976c:	00 24       	eor	r0, r0
    976e:	a7 fd       	sbrc	r26, 7
    9770:	00 94       	com	r0
    9772:	2a 0f       	add	r18, r26
    9774:	30 1d       	adc	r19, r0
    9776:	40 1d       	adc	r20, r0
    9778:	50 1d       	adc	r21, r0
    977a:	60 1d       	adc	r22, r0
    977c:	70 1d       	adc	r23, r0
    977e:	80 1d       	adc	r24, r0
    9780:	90 1d       	adc	r25, r0
    9782:	08 95       	ret

00009784 <__subdi3>:
    9784:	2a 19       	sub	r18, r10
    9786:	3b 09       	sbc	r19, r11
    9788:	4c 09       	sbc	r20, r12
    978a:	5d 09       	sbc	r21, r13
    978c:	6e 09       	sbc	r22, r14
    978e:	7f 09       	sbc	r23, r15
    9790:	80 0b       	sbc	r24, r16
    9792:	91 0b       	sbc	r25, r17
    9794:	08 95       	ret

00009796 <__cmpdi2_s8>:
    9796:	00 24       	eor	r0, r0
    9798:	a7 fd       	sbrc	r26, 7
    979a:	00 94       	com	r0
    979c:	2a 17       	cp	r18, r26
    979e:	30 05       	cpc	r19, r0
    97a0:	40 05       	cpc	r20, r0
    97a2:	50 05       	cpc	r21, r0
    97a4:	60 05       	cpc	r22, r0
    97a6:	70 05       	cpc	r23, r0
    97a8:	80 05       	cpc	r24, r0
    97aa:	90 05       	cpc	r25, r0
    97ac:	08 95       	ret

000097ae <__umulhisi3>:
    97ae:	a2 9f       	mul	r26, r18
    97b0:	b0 01       	movw	r22, r0
    97b2:	b3 9f       	mul	r27, r19
    97b4:	c0 01       	movw	r24, r0
    97b6:	a3 9f       	mul	r26, r19
    97b8:	70 0d       	add	r23, r0
    97ba:	81 1d       	adc	r24, r1
    97bc:	11 24       	eor	r1, r1
    97be:	91 1d       	adc	r25, r1
    97c0:	b2 9f       	mul	r27, r18
    97c2:	70 0d       	add	r23, r0
    97c4:	81 1d       	adc	r24, r1
    97c6:	11 24       	eor	r1, r1
    97c8:	91 1d       	adc	r25, r1
    97ca:	08 95       	ret

000097cc <__ftoa_engine>:
    97cc:	28 30       	cpi	r18, 0x08	; 8
    97ce:	08 f0       	brcs	.+2      	; 0x97d2 <__ftoa_engine+0x6>
    97d0:	27 e0       	ldi	r18, 0x07	; 7
    97d2:	33 27       	eor	r19, r19
    97d4:	da 01       	movw	r26, r20
    97d6:	99 0f       	add	r25, r25
    97d8:	31 1d       	adc	r19, r1
    97da:	87 fd       	sbrc	r24, 7
    97dc:	91 60       	ori	r25, 0x01	; 1
    97de:	00 96       	adiw	r24, 0x00	; 0
    97e0:	61 05       	cpc	r22, r1
    97e2:	71 05       	cpc	r23, r1
    97e4:	39 f4       	brne	.+14     	; 0x97f4 <__ftoa_engine+0x28>
    97e6:	32 60       	ori	r19, 0x02	; 2
    97e8:	2e 5f       	subi	r18, 0xFE	; 254
    97ea:	3d 93       	st	X+, r19
    97ec:	30 e3       	ldi	r19, 0x30	; 48
    97ee:	2a 95       	dec	r18
    97f0:	e1 f7       	brne	.-8      	; 0x97ea <__ftoa_engine+0x1e>
    97f2:	08 95       	ret
    97f4:	9f 3f       	cpi	r25, 0xFF	; 255
    97f6:	30 f0       	brcs	.+12     	; 0x9804 <__ftoa_engine+0x38>
    97f8:	80 38       	cpi	r24, 0x80	; 128
    97fa:	71 05       	cpc	r23, r1
    97fc:	61 05       	cpc	r22, r1
    97fe:	09 f0       	breq	.+2      	; 0x9802 <__ftoa_engine+0x36>
    9800:	3c 5f       	subi	r19, 0xFC	; 252
    9802:	3c 5f       	subi	r19, 0xFC	; 252
    9804:	3d 93       	st	X+, r19
    9806:	91 30       	cpi	r25, 0x01	; 1
    9808:	08 f0       	brcs	.+2      	; 0x980c <__ftoa_engine+0x40>
    980a:	80 68       	ori	r24, 0x80	; 128
    980c:	91 1d       	adc	r25, r1
    980e:	df 93       	push	r29
    9810:	cf 93       	push	r28
    9812:	1f 93       	push	r17
    9814:	0f 93       	push	r16
    9816:	ff 92       	push	r15
    9818:	ef 92       	push	r14
    981a:	19 2f       	mov	r17, r25
    981c:	98 7f       	andi	r25, 0xF8	; 248
    981e:	96 95       	lsr	r25
    9820:	e9 2f       	mov	r30, r25
    9822:	96 95       	lsr	r25
    9824:	96 95       	lsr	r25
    9826:	e9 0f       	add	r30, r25
    9828:	ff 27       	eor	r31, r31
    982a:	e2 56       	subi	r30, 0x62	; 98
    982c:	fd 4f       	sbci	r31, 0xFD	; 253
    982e:	99 27       	eor	r25, r25
    9830:	33 27       	eor	r19, r19
    9832:	ee 24       	eor	r14, r14
    9834:	ff 24       	eor	r15, r15
    9836:	a7 01       	movw	r20, r14
    9838:	e7 01       	movw	r28, r14
    983a:	05 90       	lpm	r0, Z+
    983c:	08 94       	sec
    983e:	07 94       	ror	r0
    9840:	28 f4       	brcc	.+10     	; 0x984c <__ftoa_engine+0x80>
    9842:	36 0f       	add	r19, r22
    9844:	e7 1e       	adc	r14, r23
    9846:	f8 1e       	adc	r15, r24
    9848:	49 1f       	adc	r20, r25
    984a:	51 1d       	adc	r21, r1
    984c:	66 0f       	add	r22, r22
    984e:	77 1f       	adc	r23, r23
    9850:	88 1f       	adc	r24, r24
    9852:	99 1f       	adc	r25, r25
    9854:	06 94       	lsr	r0
    9856:	a1 f7       	brne	.-24     	; 0x9840 <__ftoa_engine+0x74>
    9858:	05 90       	lpm	r0, Z+
    985a:	07 94       	ror	r0
    985c:	28 f4       	brcc	.+10     	; 0x9868 <__ftoa_engine+0x9c>
    985e:	e7 0e       	add	r14, r23
    9860:	f8 1e       	adc	r15, r24
    9862:	49 1f       	adc	r20, r25
    9864:	56 1f       	adc	r21, r22
    9866:	c1 1d       	adc	r28, r1
    9868:	77 0f       	add	r23, r23
    986a:	88 1f       	adc	r24, r24
    986c:	99 1f       	adc	r25, r25
    986e:	66 1f       	adc	r22, r22
    9870:	06 94       	lsr	r0
    9872:	a1 f7       	brne	.-24     	; 0x985c <__ftoa_engine+0x90>
    9874:	05 90       	lpm	r0, Z+
    9876:	07 94       	ror	r0
    9878:	28 f4       	brcc	.+10     	; 0x9884 <__ftoa_engine+0xb8>
    987a:	f8 0e       	add	r15, r24
    987c:	49 1f       	adc	r20, r25
    987e:	56 1f       	adc	r21, r22
    9880:	c7 1f       	adc	r28, r23
    9882:	d1 1d       	adc	r29, r1
    9884:	88 0f       	add	r24, r24
    9886:	99 1f       	adc	r25, r25
    9888:	66 1f       	adc	r22, r22
    988a:	77 1f       	adc	r23, r23
    988c:	06 94       	lsr	r0
    988e:	a1 f7       	brne	.-24     	; 0x9878 <__ftoa_engine+0xac>
    9890:	05 90       	lpm	r0, Z+
    9892:	07 94       	ror	r0
    9894:	20 f4       	brcc	.+8      	; 0x989e <__ftoa_engine+0xd2>
    9896:	49 0f       	add	r20, r25
    9898:	56 1f       	adc	r21, r22
    989a:	c7 1f       	adc	r28, r23
    989c:	d8 1f       	adc	r29, r24
    989e:	99 0f       	add	r25, r25
    98a0:	66 1f       	adc	r22, r22
    98a2:	77 1f       	adc	r23, r23
    98a4:	88 1f       	adc	r24, r24
    98a6:	06 94       	lsr	r0
    98a8:	a9 f7       	brne	.-22     	; 0x9894 <__ftoa_engine+0xc8>
    98aa:	84 91       	lpm	r24, Z
    98ac:	10 95       	com	r17
    98ae:	17 70       	andi	r17, 0x07	; 7
    98b0:	41 f0       	breq	.+16     	; 0x98c2 <__ftoa_engine+0xf6>
    98b2:	d6 95       	lsr	r29
    98b4:	c7 95       	ror	r28
    98b6:	57 95       	ror	r21
    98b8:	47 95       	ror	r20
    98ba:	f7 94       	ror	r15
    98bc:	e7 94       	ror	r14
    98be:	1a 95       	dec	r17
    98c0:	c1 f7       	brne	.-16     	; 0x98b2 <__ftoa_engine+0xe6>
    98c2:	e4 e4       	ldi	r30, 0x44	; 68
    98c4:	f2 e0       	ldi	r31, 0x02	; 2
    98c6:	68 94       	set
    98c8:	15 90       	lpm	r1, Z+
    98ca:	15 91       	lpm	r17, Z+
    98cc:	35 91       	lpm	r19, Z+
    98ce:	65 91       	lpm	r22, Z+
    98d0:	95 91       	lpm	r25, Z+
    98d2:	05 90       	lpm	r0, Z+
    98d4:	7f e2       	ldi	r23, 0x2F	; 47
    98d6:	73 95       	inc	r23
    98d8:	e1 18       	sub	r14, r1
    98da:	f1 0a       	sbc	r15, r17
    98dc:	43 0b       	sbc	r20, r19
    98de:	56 0b       	sbc	r21, r22
    98e0:	c9 0b       	sbc	r28, r25
    98e2:	d0 09       	sbc	r29, r0
    98e4:	c0 f7       	brcc	.-16     	; 0x98d6 <__ftoa_engine+0x10a>
    98e6:	e1 0c       	add	r14, r1
    98e8:	f1 1e       	adc	r15, r17
    98ea:	43 1f       	adc	r20, r19
    98ec:	56 1f       	adc	r21, r22
    98ee:	c9 1f       	adc	r28, r25
    98f0:	d0 1d       	adc	r29, r0
    98f2:	7e f4       	brtc	.+30     	; 0x9912 <__ftoa_engine+0x146>
    98f4:	70 33       	cpi	r23, 0x30	; 48
    98f6:	11 f4       	brne	.+4      	; 0x98fc <__ftoa_engine+0x130>
    98f8:	8a 95       	dec	r24
    98fa:	e6 cf       	rjmp	.-52     	; 0x98c8 <__ftoa_engine+0xfc>
    98fc:	e8 94       	clt
    98fe:	01 50       	subi	r16, 0x01	; 1
    9900:	30 f0       	brcs	.+12     	; 0x990e <__ftoa_engine+0x142>
    9902:	08 0f       	add	r16, r24
    9904:	0a f4       	brpl	.+2      	; 0x9908 <__ftoa_engine+0x13c>
    9906:	00 27       	eor	r16, r16
    9908:	02 17       	cp	r16, r18
    990a:	08 f4       	brcc	.+2      	; 0x990e <__ftoa_engine+0x142>
    990c:	20 2f       	mov	r18, r16
    990e:	23 95       	inc	r18
    9910:	02 2f       	mov	r16, r18
    9912:	7a 33       	cpi	r23, 0x3A	; 58
    9914:	28 f0       	brcs	.+10     	; 0x9920 <__ftoa_engine+0x154>
    9916:	79 e3       	ldi	r23, 0x39	; 57
    9918:	7d 93       	st	X+, r23
    991a:	2a 95       	dec	r18
    991c:	e9 f7       	brne	.-6      	; 0x9918 <__ftoa_engine+0x14c>
    991e:	10 c0       	rjmp	.+32     	; 0x9940 <__ftoa_engine+0x174>
    9920:	7d 93       	st	X+, r23
    9922:	2a 95       	dec	r18
    9924:	89 f6       	brne	.-94     	; 0x98c8 <__ftoa_engine+0xfc>
    9926:	06 94       	lsr	r0
    9928:	97 95       	ror	r25
    992a:	67 95       	ror	r22
    992c:	37 95       	ror	r19
    992e:	17 95       	ror	r17
    9930:	17 94       	ror	r1
    9932:	e1 18       	sub	r14, r1
    9934:	f1 0a       	sbc	r15, r17
    9936:	43 0b       	sbc	r20, r19
    9938:	56 0b       	sbc	r21, r22
    993a:	c9 0b       	sbc	r28, r25
    993c:	d0 09       	sbc	r29, r0
    993e:	98 f0       	brcs	.+38     	; 0x9966 <__ftoa_engine+0x19a>
    9940:	23 95       	inc	r18
    9942:	7e 91       	ld	r23, -X
    9944:	73 95       	inc	r23
    9946:	7a 33       	cpi	r23, 0x3A	; 58
    9948:	08 f0       	brcs	.+2      	; 0x994c <__ftoa_engine+0x180>
    994a:	70 e3       	ldi	r23, 0x30	; 48
    994c:	7c 93       	st	X, r23
    994e:	20 13       	cpse	r18, r16
    9950:	b8 f7       	brcc	.-18     	; 0x9940 <__ftoa_engine+0x174>
    9952:	7e 91       	ld	r23, -X
    9954:	70 61       	ori	r23, 0x10	; 16
    9956:	7d 93       	st	X+, r23
    9958:	30 f0       	brcs	.+12     	; 0x9966 <__ftoa_engine+0x19a>
    995a:	83 95       	inc	r24
    995c:	71 e3       	ldi	r23, 0x31	; 49
    995e:	7d 93       	st	X+, r23
    9960:	70 e3       	ldi	r23, 0x30	; 48
    9962:	2a 95       	dec	r18
    9964:	e1 f7       	brne	.-8      	; 0x995e <__ftoa_engine+0x192>
    9966:	11 24       	eor	r1, r1
    9968:	ef 90       	pop	r14
    996a:	ff 90       	pop	r15
    996c:	0f 91       	pop	r16
    996e:	1f 91       	pop	r17
    9970:	cf 91       	pop	r28
    9972:	df 91       	pop	r29
    9974:	99 27       	eor	r25, r25
    9976:	87 fd       	sbrc	r24, 7
    9978:	90 95       	com	r25
    997a:	08 95       	ret

0000997c <strnlen_P>:
    997c:	fc 01       	movw	r30, r24
    997e:	05 90       	lpm	r0, Z+
    9980:	61 50       	subi	r22, 0x01	; 1
    9982:	70 40       	sbci	r23, 0x00	; 0
    9984:	01 10       	cpse	r0, r1
    9986:	d8 f7       	brcc	.-10     	; 0x997e <strnlen_P+0x2>
    9988:	80 95       	com	r24
    998a:	90 95       	com	r25
    998c:	8e 0f       	add	r24, r30
    998e:	9f 1f       	adc	r25, r31
    9990:	08 95       	ret

00009992 <memcpy>:
    9992:	fb 01       	movw	r30, r22
    9994:	dc 01       	movw	r26, r24
    9996:	02 c0       	rjmp	.+4      	; 0x999c <memcpy+0xa>
    9998:	01 90       	ld	r0, Z+
    999a:	0d 92       	st	X+, r0
    999c:	41 50       	subi	r20, 0x01	; 1
    999e:	50 40       	sbci	r21, 0x00	; 0
    99a0:	d8 f7       	brcc	.-10     	; 0x9998 <memcpy+0x6>
    99a2:	08 95       	ret

000099a4 <memset>:
    99a4:	dc 01       	movw	r26, r24
    99a6:	01 c0       	rjmp	.+2      	; 0x99aa <memset+0x6>
    99a8:	6d 93       	st	X+, r22
    99aa:	41 50       	subi	r20, 0x01	; 1
    99ac:	50 40       	sbci	r21, 0x00	; 0
    99ae:	e0 f7       	brcc	.-8      	; 0x99a8 <memset+0x4>
    99b0:	08 95       	ret

000099b2 <strcpy>:
    99b2:	fb 01       	movw	r30, r22
    99b4:	dc 01       	movw	r26, r24
    99b6:	01 90       	ld	r0, Z+
    99b8:	0d 92       	st	X+, r0
    99ba:	00 20       	and	r0, r0
    99bc:	e1 f7       	brne	.-8      	; 0x99b6 <strcpy+0x4>
    99be:	08 95       	ret

000099c0 <strlen>:
    99c0:	fc 01       	movw	r30, r24
    99c2:	01 90       	ld	r0, Z+
    99c4:	00 20       	and	r0, r0
    99c6:	e9 f7       	brne	.-6      	; 0x99c2 <strlen+0x2>
    99c8:	80 95       	com	r24
    99ca:	90 95       	com	r25
    99cc:	8e 0f       	add	r24, r30
    99ce:	9f 1f       	adc	r25, r31
    99d0:	08 95       	ret

000099d2 <strnlen>:
    99d2:	fc 01       	movw	r30, r24
    99d4:	61 50       	subi	r22, 0x01	; 1
    99d6:	70 40       	sbci	r23, 0x00	; 0
    99d8:	01 90       	ld	r0, Z+
    99da:	01 10       	cpse	r0, r1
    99dc:	d8 f7       	brcc	.-10     	; 0x99d4 <strnlen+0x2>
    99de:	80 95       	com	r24
    99e0:	90 95       	com	r25
    99e2:	8e 0f       	add	r24, r30
    99e4:	9f 1f       	adc	r25, r31
    99e6:	08 95       	ret

000099e8 <itoa>:
    99e8:	45 32       	cpi	r20, 0x25	; 37
    99ea:	51 05       	cpc	r21, r1
    99ec:	20 f4       	brcc	.+8      	; 0x99f6 <itoa+0xe>
    99ee:	42 30       	cpi	r20, 0x02	; 2
    99f0:	10 f0       	brcs	.+4      	; 0x99f6 <itoa+0xe>
    99f2:	0c 94 ff 4c 	jmp	0x99fe	; 0x99fe <__itoa_ncheck>
    99f6:	fb 01       	movw	r30, r22
    99f8:	10 82       	st	Z, r1
    99fa:	cb 01       	movw	r24, r22
    99fc:	08 95       	ret

000099fe <__itoa_ncheck>:
    99fe:	bb 27       	eor	r27, r27
    9a00:	4a 30       	cpi	r20, 0x0A	; 10
    9a02:	31 f4       	brne	.+12     	; 0x9a10 <__itoa_ncheck+0x12>
    9a04:	99 23       	and	r25, r25
    9a06:	22 f4       	brpl	.+8      	; 0x9a10 <__itoa_ncheck+0x12>
    9a08:	bd e2       	ldi	r27, 0x2D	; 45
    9a0a:	90 95       	com	r25
    9a0c:	81 95       	neg	r24
    9a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    9a10:	0c 94 0b 4d 	jmp	0x9a16	; 0x9a16 <__utoa_common>

00009a14 <__utoa_ncheck>:
    9a14:	bb 27       	eor	r27, r27

00009a16 <__utoa_common>:
    9a16:	fb 01       	movw	r30, r22
    9a18:	55 27       	eor	r21, r21
    9a1a:	aa 27       	eor	r26, r26
    9a1c:	88 0f       	add	r24, r24
    9a1e:	99 1f       	adc	r25, r25
    9a20:	aa 1f       	adc	r26, r26
    9a22:	a4 17       	cp	r26, r20
    9a24:	10 f0       	brcs	.+4      	; 0x9a2a <__utoa_common+0x14>
    9a26:	a4 1b       	sub	r26, r20
    9a28:	83 95       	inc	r24
    9a2a:	50 51       	subi	r21, 0x10	; 16
    9a2c:	b9 f7       	brne	.-18     	; 0x9a1c <__utoa_common+0x6>
    9a2e:	a0 5d       	subi	r26, 0xD0	; 208
    9a30:	aa 33       	cpi	r26, 0x3A	; 58
    9a32:	08 f0       	brcs	.+2      	; 0x9a36 <__utoa_common+0x20>
    9a34:	a9 5d       	subi	r26, 0xD9	; 217
    9a36:	a1 93       	st	Z+, r26
    9a38:	00 97       	sbiw	r24, 0x00	; 0
    9a3a:	79 f7       	brne	.-34     	; 0x9a1a <__utoa_common+0x4>
    9a3c:	b1 11       	cpse	r27, r1
    9a3e:	b1 93       	st	Z+, r27
    9a40:	11 92       	st	Z+, r1
    9a42:	cb 01       	movw	r24, r22
    9a44:	0c 94 e7 4d 	jmp	0x9bce	; 0x9bce <strrev>

00009a48 <fputc>:
    9a48:	0f 93       	push	r16
    9a4a:	1f 93       	push	r17
    9a4c:	cf 93       	push	r28
    9a4e:	df 93       	push	r29
    9a50:	fb 01       	movw	r30, r22
    9a52:	23 81       	ldd	r18, Z+3	; 0x03
    9a54:	21 fd       	sbrc	r18, 1
    9a56:	03 c0       	rjmp	.+6      	; 0x9a5e <fputc+0x16>
    9a58:	8f ef       	ldi	r24, 0xFF	; 255
    9a5a:	9f ef       	ldi	r25, 0xFF	; 255
    9a5c:	2c c0       	rjmp	.+88     	; 0x9ab6 <fputc+0x6e>
    9a5e:	22 ff       	sbrs	r18, 2
    9a60:	16 c0       	rjmp	.+44     	; 0x9a8e <fputc+0x46>
    9a62:	46 81       	ldd	r20, Z+6	; 0x06
    9a64:	57 81       	ldd	r21, Z+7	; 0x07
    9a66:	24 81       	ldd	r18, Z+4	; 0x04
    9a68:	35 81       	ldd	r19, Z+5	; 0x05
    9a6a:	42 17       	cp	r20, r18
    9a6c:	53 07       	cpc	r21, r19
    9a6e:	44 f4       	brge	.+16     	; 0x9a80 <fputc+0x38>
    9a70:	a0 81       	ld	r26, Z
    9a72:	b1 81       	ldd	r27, Z+1	; 0x01
    9a74:	9d 01       	movw	r18, r26
    9a76:	2f 5f       	subi	r18, 0xFF	; 255
    9a78:	3f 4f       	sbci	r19, 0xFF	; 255
    9a7a:	20 83       	st	Z, r18
    9a7c:	31 83       	std	Z+1, r19	; 0x01
    9a7e:	8c 93       	st	X, r24
    9a80:	26 81       	ldd	r18, Z+6	; 0x06
    9a82:	37 81       	ldd	r19, Z+7	; 0x07
    9a84:	2f 5f       	subi	r18, 0xFF	; 255
    9a86:	3f 4f       	sbci	r19, 0xFF	; 255
    9a88:	26 83       	std	Z+6, r18	; 0x06
    9a8a:	37 83       	std	Z+7, r19	; 0x07
    9a8c:	14 c0       	rjmp	.+40     	; 0x9ab6 <fputc+0x6e>
    9a8e:	8b 01       	movw	r16, r22
    9a90:	ec 01       	movw	r28, r24
    9a92:	fb 01       	movw	r30, r22
    9a94:	00 84       	ldd	r0, Z+8	; 0x08
    9a96:	f1 85       	ldd	r31, Z+9	; 0x09
    9a98:	e0 2d       	mov	r30, r0
    9a9a:	19 95       	eicall
    9a9c:	89 2b       	or	r24, r25
    9a9e:	e1 f6       	brne	.-72     	; 0x9a58 <fputc+0x10>
    9aa0:	d8 01       	movw	r26, r16
    9aa2:	16 96       	adiw	r26, 0x06	; 6
    9aa4:	8d 91       	ld	r24, X+
    9aa6:	9c 91       	ld	r25, X
    9aa8:	17 97       	sbiw	r26, 0x07	; 7
    9aaa:	01 96       	adiw	r24, 0x01	; 1
    9aac:	16 96       	adiw	r26, 0x06	; 6
    9aae:	8d 93       	st	X+, r24
    9ab0:	9c 93       	st	X, r25
    9ab2:	17 97       	sbiw	r26, 0x07	; 7
    9ab4:	ce 01       	movw	r24, r28
    9ab6:	df 91       	pop	r29
    9ab8:	cf 91       	pop	r28
    9aba:	1f 91       	pop	r17
    9abc:	0f 91       	pop	r16
    9abe:	08 95       	ret

00009ac0 <sprintf>:
    9ac0:	0f 93       	push	r16
    9ac2:	1f 93       	push	r17
    9ac4:	cf 93       	push	r28
    9ac6:	df 93       	push	r29
    9ac8:	cd b7       	in	r28, 0x3d	; 61
    9aca:	de b7       	in	r29, 0x3e	; 62
    9acc:	2e 97       	sbiw	r28, 0x0e	; 14
    9ace:	cd bf       	out	0x3d, r28	; 61
    9ad0:	de bf       	out	0x3e, r29	; 62
    9ad2:	0e 89       	ldd	r16, Y+22	; 0x16
    9ad4:	1f 89       	ldd	r17, Y+23	; 0x17
    9ad6:	86 e0       	ldi	r24, 0x06	; 6
    9ad8:	8c 83       	std	Y+4, r24	; 0x04
    9ada:	09 83       	std	Y+1, r16	; 0x01
    9adc:	1a 83       	std	Y+2, r17	; 0x02
    9ade:	8f ef       	ldi	r24, 0xFF	; 255
    9ae0:	9f e7       	ldi	r25, 0x7F	; 127
    9ae2:	8d 83       	std	Y+5, r24	; 0x05
    9ae4:	9e 83       	std	Y+6, r25	; 0x06
    9ae6:	ae 01       	movw	r20, r28
    9ae8:	46 5e       	subi	r20, 0xE6	; 230
    9aea:	5f 4f       	sbci	r21, 0xFF	; 255
    9aec:	68 8d       	ldd	r22, Y+24	; 0x18
    9aee:	79 8d       	ldd	r23, Y+25	; 0x19
    9af0:	ce 01       	movw	r24, r28
    9af2:	01 96       	adiw	r24, 0x01	; 1
    9af4:	0e 94 43 47 	call	0x8e86	; 0x8e86 <vfprintf>
    9af8:	ef 81       	ldd	r30, Y+7	; 0x07
    9afa:	f8 85       	ldd	r31, Y+8	; 0x08
    9afc:	e0 0f       	add	r30, r16
    9afe:	f1 1f       	adc	r31, r17
    9b00:	10 82       	st	Z, r1
    9b02:	2e 96       	adiw	r28, 0x0e	; 14
    9b04:	cd bf       	out	0x3d, r28	; 61
    9b06:	de bf       	out	0x3e, r29	; 62
    9b08:	df 91       	pop	r29
    9b0a:	cf 91       	pop	r28
    9b0c:	1f 91       	pop	r17
    9b0e:	0f 91       	pop	r16
    9b10:	08 95       	ret

00009b12 <__ultoa_invert>:
    9b12:	fa 01       	movw	r30, r20
    9b14:	aa 27       	eor	r26, r26
    9b16:	28 30       	cpi	r18, 0x08	; 8
    9b18:	51 f1       	breq	.+84     	; 0x9b6e <__ultoa_invert+0x5c>
    9b1a:	20 31       	cpi	r18, 0x10	; 16
    9b1c:	81 f1       	breq	.+96     	; 0x9b7e <__ultoa_invert+0x6c>
    9b1e:	e8 94       	clt
    9b20:	6f 93       	push	r22
    9b22:	6e 7f       	andi	r22, 0xFE	; 254
    9b24:	6e 5f       	subi	r22, 0xFE	; 254
    9b26:	7f 4f       	sbci	r23, 0xFF	; 255
    9b28:	8f 4f       	sbci	r24, 0xFF	; 255
    9b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    9b2c:	af 4f       	sbci	r26, 0xFF	; 255
    9b2e:	b1 e0       	ldi	r27, 0x01	; 1
    9b30:	3e d0       	rcall	.+124    	; 0x9bae <__ultoa_invert+0x9c>
    9b32:	b4 e0       	ldi	r27, 0x04	; 4
    9b34:	3c d0       	rcall	.+120    	; 0x9bae <__ultoa_invert+0x9c>
    9b36:	67 0f       	add	r22, r23
    9b38:	78 1f       	adc	r23, r24
    9b3a:	89 1f       	adc	r24, r25
    9b3c:	9a 1f       	adc	r25, r26
    9b3e:	a1 1d       	adc	r26, r1
    9b40:	68 0f       	add	r22, r24
    9b42:	79 1f       	adc	r23, r25
    9b44:	8a 1f       	adc	r24, r26
    9b46:	91 1d       	adc	r25, r1
    9b48:	a1 1d       	adc	r26, r1
    9b4a:	6a 0f       	add	r22, r26
    9b4c:	71 1d       	adc	r23, r1
    9b4e:	81 1d       	adc	r24, r1
    9b50:	91 1d       	adc	r25, r1
    9b52:	a1 1d       	adc	r26, r1
    9b54:	20 d0       	rcall	.+64     	; 0x9b96 <__ultoa_invert+0x84>
    9b56:	09 f4       	brne	.+2      	; 0x9b5a <__ultoa_invert+0x48>
    9b58:	68 94       	set
    9b5a:	3f 91       	pop	r19
    9b5c:	2a e0       	ldi	r18, 0x0A	; 10
    9b5e:	26 9f       	mul	r18, r22
    9b60:	11 24       	eor	r1, r1
    9b62:	30 19       	sub	r19, r0
    9b64:	30 5d       	subi	r19, 0xD0	; 208
    9b66:	31 93       	st	Z+, r19
    9b68:	de f6       	brtc	.-74     	; 0x9b20 <__ultoa_invert+0xe>
    9b6a:	cf 01       	movw	r24, r30
    9b6c:	08 95       	ret
    9b6e:	46 2f       	mov	r20, r22
    9b70:	47 70       	andi	r20, 0x07	; 7
    9b72:	40 5d       	subi	r20, 0xD0	; 208
    9b74:	41 93       	st	Z+, r20
    9b76:	b3 e0       	ldi	r27, 0x03	; 3
    9b78:	0f d0       	rcall	.+30     	; 0x9b98 <__ultoa_invert+0x86>
    9b7a:	c9 f7       	brne	.-14     	; 0x9b6e <__ultoa_invert+0x5c>
    9b7c:	f6 cf       	rjmp	.-20     	; 0x9b6a <__ultoa_invert+0x58>
    9b7e:	46 2f       	mov	r20, r22
    9b80:	4f 70       	andi	r20, 0x0F	; 15
    9b82:	40 5d       	subi	r20, 0xD0	; 208
    9b84:	4a 33       	cpi	r20, 0x3A	; 58
    9b86:	18 f0       	brcs	.+6      	; 0x9b8e <__ultoa_invert+0x7c>
    9b88:	49 5d       	subi	r20, 0xD9	; 217
    9b8a:	31 fd       	sbrc	r19, 1
    9b8c:	40 52       	subi	r20, 0x20	; 32
    9b8e:	41 93       	st	Z+, r20
    9b90:	02 d0       	rcall	.+4      	; 0x9b96 <__ultoa_invert+0x84>
    9b92:	a9 f7       	brne	.-22     	; 0x9b7e <__ultoa_invert+0x6c>
    9b94:	ea cf       	rjmp	.-44     	; 0x9b6a <__ultoa_invert+0x58>
    9b96:	b4 e0       	ldi	r27, 0x04	; 4
    9b98:	a6 95       	lsr	r26
    9b9a:	97 95       	ror	r25
    9b9c:	87 95       	ror	r24
    9b9e:	77 95       	ror	r23
    9ba0:	67 95       	ror	r22
    9ba2:	ba 95       	dec	r27
    9ba4:	c9 f7       	brne	.-14     	; 0x9b98 <__ultoa_invert+0x86>
    9ba6:	00 97       	sbiw	r24, 0x00	; 0
    9ba8:	61 05       	cpc	r22, r1
    9baa:	71 05       	cpc	r23, r1
    9bac:	08 95       	ret
    9bae:	9b 01       	movw	r18, r22
    9bb0:	ac 01       	movw	r20, r24
    9bb2:	0a 2e       	mov	r0, r26
    9bb4:	06 94       	lsr	r0
    9bb6:	57 95       	ror	r21
    9bb8:	47 95       	ror	r20
    9bba:	37 95       	ror	r19
    9bbc:	27 95       	ror	r18
    9bbe:	ba 95       	dec	r27
    9bc0:	c9 f7       	brne	.-14     	; 0x9bb4 <__ultoa_invert+0xa2>
    9bc2:	62 0f       	add	r22, r18
    9bc4:	73 1f       	adc	r23, r19
    9bc6:	84 1f       	adc	r24, r20
    9bc8:	95 1f       	adc	r25, r21
    9bca:	a0 1d       	adc	r26, r0
    9bcc:	08 95       	ret

00009bce <strrev>:
    9bce:	dc 01       	movw	r26, r24
    9bd0:	fc 01       	movw	r30, r24
    9bd2:	67 2f       	mov	r22, r23
    9bd4:	71 91       	ld	r23, Z+
    9bd6:	77 23       	and	r23, r23
    9bd8:	e1 f7       	brne	.-8      	; 0x9bd2 <strrev+0x4>
    9bda:	32 97       	sbiw	r30, 0x02	; 2
    9bdc:	04 c0       	rjmp	.+8      	; 0x9be6 <strrev+0x18>
    9bde:	7c 91       	ld	r23, X
    9be0:	6d 93       	st	X+, r22
    9be2:	70 83       	st	Z, r23
    9be4:	62 91       	ld	r22, -Z
    9be6:	ae 17       	cp	r26, r30
    9be8:	bf 07       	cpc	r27, r31
    9bea:	c8 f3       	brcs	.-14     	; 0x9bde <strrev+0x10>
    9bec:	08 95       	ret

00009bee <_exit>:
    9bee:	f8 94       	cli

00009bf0 <__stop_program>:
    9bf0:	ff cf       	rjmp	.-2      	; 0x9bf0 <__stop_program>
