
picalc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004076  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00802000  00004076  0000410a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c7b  0080205a  0080205a  00004164  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004164  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000041c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000708  00000000  00000000  00004200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dc96  00000000  00000000  00004908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004d20  00000000  00000000  0001259e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000048e7  00000000  00000000  000172be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001730  00000000  00000000  0001bba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005426  00000000  00000000  0001d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008bf9  00000000  00000000  000226fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c8  00000000  00000000  0002b2f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__ctors_end>
       4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
       8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
       c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      10:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      14:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      18:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      1c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      20:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      24:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      28:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      2c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      30:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      34:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      38:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__vector_14>
      3c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      40:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      44:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      48:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      4c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      50:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      54:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      58:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      5c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      60:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      64:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      68:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      6c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      70:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      74:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      78:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      7c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      80:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      84:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      88:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      8c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      90:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      94:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      98:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      9c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      a0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      a4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      a8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      ac:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      b0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      b4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      b8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      bc:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      c0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      c4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      c8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      cc:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      d0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      d4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      d8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      dc:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      e0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      e4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      e8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      ec:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      f0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      f4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      f8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      fc:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     100:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     104:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     108:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     10c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     110:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     114:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     118:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     11c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     120:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     124:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     128:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     12c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     130:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     134:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     138:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     13c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     140:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     144:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     148:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     14c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     150:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     154:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     158:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     15c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     160:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     164:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     168:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     16c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     170:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     174:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     178:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     17c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     180:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     184:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     188:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     18c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     190:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     194:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     198:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     19c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1a0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1a4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1a8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1ac:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1b0:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__vector_108>
     1b4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1b8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1bc:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1c0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1c4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1c8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1cc:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1d0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1d4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1d8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1dc:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1e0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1e4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1e8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1ec:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1f0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1f4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1f8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
     1fc:	15 11       	cpse	r17, r5
     1fe:	15 11       	cpse	r17, r5
     200:	15 11       	cpse	r17, r5
     202:	62 11       	cpse	r22, r2
     204:	4a 11       	cpse	r20, r10
     206:	5f 11       	cpse	r21, r15
     208:	15 11       	cpse	r17, r5
     20a:	15 11       	cpse	r17, r5
     20c:	62 11       	cpse	r22, r2
     20e:	4a 11       	cpse	r20, r10

00000210 <__trampolines_start>:
     210:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <prvTimerTask+0x212>
     214:	0c 94 b8 03 	jmp	0x770	; 0x770 <vEventGroupSetBitsCallback>
     218:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <prvTimerTask>
     21c:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <prvTimerTask+0x1e2>
     220:	0c 94 5f 11 	jmp	0x22be	; 0x22be <prvTimerTask+0x20c>
     224:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <vDisplayUpdateTask>
     228:	0c 94 15 11 	jmp	0x222a	; 0x222a <prvTimerTask+0x178>
     22c:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <vGUI>
     230:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <prvIdleTask>

00000234 <__trampolines_end>:
     234:	6e 61       	ori	r22, 0x1E	; 30
     236:	6e 00       	.word	0x006e	; ????

00000238 <__c.2332>:
     238:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     248:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     258:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     268:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     278:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     288:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     298:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     308:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     318:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     328:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000336 <__ctors_end>:
     336:	11 24       	eor	r1, r1
     338:	1f be       	out	0x3f, r1	; 63
     33a:	cf ef       	ldi	r28, 0xFF	; 255
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	df e3       	ldi	r29, 0x3F	; 63
     340:	de bf       	out	0x3e, r29	; 62
     342:	00 e0       	ldi	r16, 0x00	; 0
     344:	0c bf       	out	0x3c, r16	; 60

00000346 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     346:	e5 ed       	ldi	r30, 0xD5	; 213
     348:	fc e2       	ldi	r31, 0x2C	; 44
     34a:	8a ea       	ldi	r24, 0xAA	; 170
     34c:	90 e4       	ldi	r25, 0x40	; 64
     34e:	81 93       	st	Z+, r24
     350:	e0 30       	cpi	r30, 0x00	; 0
     352:	f9 07       	cpc	r31, r25
     354:	e0 f3       	brcs	.-8      	; 0x34e <init_mem+0x8>

00000356 <__do_copy_data>:
     356:	10 e2       	ldi	r17, 0x20	; 32
     358:	a0 e0       	ldi	r26, 0x00	; 0
     35a:	b0 e2       	ldi	r27, 0x20	; 32
     35c:	e6 e7       	ldi	r30, 0x76	; 118
     35e:	f0 e4       	ldi	r31, 0x40	; 64
     360:	00 e0       	ldi	r16, 0x00	; 0
     362:	0b bf       	out	0x3b, r16	; 59
     364:	02 c0       	rjmp	.+4      	; 0x36a <__do_copy_data+0x14>
     366:	07 90       	elpm	r0, Z+
     368:	0d 92       	st	X+, r0
     36a:	aa 35       	cpi	r26, 0x5A	; 90
     36c:	b1 07       	cpc	r27, r17
     36e:	d9 f7       	brne	.-10     	; 0x366 <__do_copy_data+0x10>

00000370 <__do_clear_bss>:
     370:	2c e2       	ldi	r18, 0x2C	; 44
     372:	aa e5       	ldi	r26, 0x5A	; 90
     374:	b0 e2       	ldi	r27, 0x20	; 32
     376:	01 c0       	rjmp	.+2      	; 0x37a <.do_clear_bss_start>

00000378 <.do_clear_bss_loop>:
     378:	1d 92       	st	X+, r1

0000037a <.do_clear_bss_start>:
     37a:	a5 3d       	cpi	r26, 0xD5	; 213
     37c:	b2 07       	cpc	r27, r18
     37e:	e1 f7       	brne	.-8      	; 0x378 <.do_clear_bss_loop>
     380:	0e 94 3b 12 	call	0x2476	; 0x2476 <main>
     384:	0c 94 39 20 	jmp	0x4072	; 0x4072 <_exit>

00000388 <__bad_interrupt>:
     388:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000038c <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     38c:	0f 93       	push	r16
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	1f 92       	push	r1
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     398:	2f b7       	in	r18, 0x3f	; 63
     39a:	29 83       	std	Y+1, r18	; 0x01
     39c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     39e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     3a0:	fc 01       	movw	r30, r24
     3a2:	08 ed       	ldi	r16, 0xD8	; 216
     3a4:	04 bf       	out	0x34, r16	; 52
     3a6:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	8f bf       	out	0x3f, r24	; 63
#endif
}
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     3b6:	61 11       	cpse	r22, r1
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <CLKSYS_XOSC_Config+0x8>
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <CLKSYS_XOSC_Config+0xa>
     3be:	90 e2       	ldi	r25, 0x20	; 32
     3c0:	84 2b       	or	r24, r20
     3c2:	89 2b       	or	r24, r25
     3c4:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     3c8:	08 95       	ret

000003ca <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     3ca:	6f 71       	andi	r22, 0x1F	; 31
     3cc:	86 2b       	or	r24, r22
     3ce:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     3d2:	08 95       	ret

000003d4 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     3d4:	e0 e5       	ldi	r30, 0x50	; 80
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	90 81       	ld	r25, Z
     3da:	28 2f       	mov	r18, r24
     3dc:	20 95       	com	r18
     3de:	92 23       	and	r25, r18
     3e0:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     3e2:	90 81       	ld	r25, Z
	return clkEnabled;
}
     3e4:	89 23       	and	r24, r25
     3e6:	08 95       	ret

000003e8 <CLKSYS_Prescalers_Config>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     3e8:	68 2b       	or	r22, r24
     3ea:	81 e4       	ldi	r24, 0x41	; 65
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 c6 01 	call	0x38c	; 0x38c <CCPWrite>
     3f2:	08 95       	ret

000003f4 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     3fc:	00 e4       	ldi	r16, 0x40	; 64
     3fe:	10 e0       	ldi	r17, 0x00	; 0
     400:	f8 01       	movw	r30, r16
     402:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
     404:	68 7f       	andi	r22, 0xF8	; 248
     406:	68 2b       	or	r22, r24
     408:	80 e4       	ldi	r24, 0x40	; 64
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 c6 01 	call	0x38c	; 0x38c <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     410:	f8 01       	movw	r30, r16
     412:	80 81       	ld	r24, Z
	return clkCtrl;
}
     414:	8c 23       	and	r24, r28
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	08 95       	ret

0000041e <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     41e:	fc 01       	movw	r30, r24
     420:	90 81       	ld	r25, Z
     422:	90 7f       	andi	r25, 0xF0	; 240
     424:	69 2b       	or	r22, r25
     426:	60 83       	st	Z, r22
     428:	08 95       	ret

0000042a <TC0_ConfigWGM>:
     42a:	fc 01       	movw	r30, r24
     42c:	91 81       	ldd	r25, Z+1	; 0x01
     42e:	98 7f       	andi	r25, 0xF8	; 248
     430:	69 2b       	or	r22, r25
     432:	61 83       	std	Z+1, r22	; 0x01
     434:	08 95       	ret

00000436 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     436:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     438:	96 81       	ldd	r25, Z+6	; 0x06
     43a:	9c 7f       	andi	r25, 0xFC	; 252
     43c:	69 2b       	or	r22, r25
     43e:	66 83       	std	Z+6, r22	; 0x06
     440:	08 95       	ret

00000442 <software_reset>:
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     442:	00 00       	nop
     444:	88 ed       	ldi	r24, 0xD8	; 216
     446:	84 bf       	out	0x34, r24	; 52
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     44e:	08 95       	ret

00000450 <vApplicationStackOverflowHook>:
     450:	0e 94 21 02 	call	0x442	; 0x442 <software_reset>
     454:	08 95       	ret

00000456 <xEventGroupCreate>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	80 e1       	ldi	r24, 0x10	; 16
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 c8 03 	call	0x790	; 0x790 <pvPortMalloc>
     462:	ec 01       	movw	r28, r24
     464:	00 97       	sbiw	r24, 0x00	; 0
     466:	41 f0       	breq	.+16     	; 0x478 <xEventGroupCreate+0x22>
     468:	fc 01       	movw	r30, r24
     46a:	11 92       	st	Z+, r1
     46c:	11 92       	st	Z+, r1
     46e:	11 92       	st	Z+, r1
     470:	11 92       	st	Z+, r1
     472:	cf 01       	movw	r24, r30
     474:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
     478:	ce 01       	movw	r24, r28
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <xEventGroupWaitBits>:
     480:	2f 92       	push	r2
     482:	3f 92       	push	r3
     484:	4f 92       	push	r4
     486:	5f 92       	push	r5
     488:	6f 92       	push	r6
     48a:	7f 92       	push	r7
     48c:	8f 92       	push	r8
     48e:	9f 92       	push	r9
     490:	af 92       	push	r10
     492:	bf 92       	push	r11
     494:	cf 92       	push	r12
     496:	df 92       	push	r13
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	ec 01       	movw	r28, r24
     4a6:	4a 01       	movw	r8, r20
     4a8:	5b 01       	movw	r10, r22
     4aa:	62 2e       	mov	r6, r18
     4ac:	70 2e       	mov	r7, r16
     4ae:	0e 94 3c 0b 	call	0x1678	; 0x1678 <vTaskSuspendAll>
     4b2:	28 80       	ld	r2, Y
     4b4:	39 80       	ldd	r3, Y+1	; 0x01
     4b6:	4a 80       	ldd	r4, Y+2	; 0x02
     4b8:	5b 80       	ldd	r5, Y+3	; 0x03
     4ba:	01 11       	cpse	r16, r1
     4bc:	0d c0       	rjmp	.+26     	; 0x4d8 <xEventGroupWaitBits+0x58>
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	b2 01       	movw	r22, r4
     4c2:	a1 01       	movw	r20, r2
     4c4:	48 21       	and	r20, r8
     4c6:	59 21       	and	r21, r9
     4c8:	6a 21       	and	r22, r10
     4ca:	7b 21       	and	r23, r11
     4cc:	45 2b       	or	r20, r21
     4ce:	46 2b       	or	r20, r22
     4d0:	47 2b       	or	r20, r23
     4d2:	79 f4       	brne	.+30     	; 0x4f2 <xEventGroupWaitBits+0x72>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <xEventGroupWaitBits+0x72>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	b2 01       	movw	r22, r4
     4dc:	a1 01       	movw	r20, r2
     4de:	48 21       	and	r20, r8
     4e0:	59 21       	and	r21, r9
     4e2:	6a 21       	and	r22, r10
     4e4:	7b 21       	and	r23, r11
     4e6:	48 15       	cp	r20, r8
     4e8:	59 05       	cpc	r21, r9
     4ea:	6a 05       	cpc	r22, r10
     4ec:	7b 05       	cpc	r23, r11
     4ee:	09 f0       	breq	.+2      	; 0x4f2 <xEventGroupWaitBits+0x72>
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	88 23       	and	r24, r24
     4f4:	81 f0       	breq	.+32     	; 0x516 <xEventGroupWaitBits+0x96>
     4f6:	66 20       	and	r6, r6
     4f8:	09 f4       	brne	.+2      	; 0x4fc <xEventGroupWaitBits+0x7c>
     4fa:	70 c0       	rjmp	.+224    	; 0x5dc <xEventGroupWaitBits+0x15c>
     4fc:	80 94       	com	r8
     4fe:	90 94       	com	r9
     500:	a0 94       	com	r10
     502:	b0 94       	com	r11
     504:	82 20       	and	r8, r2
     506:	93 20       	and	r9, r3
     508:	a4 20       	and	r10, r4
     50a:	b5 20       	and	r11, r5
     50c:	88 82       	st	Y, r8
     50e:	99 82       	std	Y+1, r9	; 0x01
     510:	aa 82       	std	Y+2, r10	; 0x02
     512:	bb 82       	std	Y+3, r11	; 0x03
     514:	63 c0       	rjmp	.+198    	; 0x5dc <xEventGroupWaitBits+0x15c>
     516:	c1 14       	cp	r12, r1
     518:	d1 04       	cpc	r13, r1
     51a:	e1 04       	cpc	r14, r1
     51c:	f1 04       	cpc	r15, r1
     51e:	09 f4       	brne	.+2      	; 0x522 <xEventGroupWaitBits+0xa2>
     520:	5d c0       	rjmp	.+186    	; 0x5dc <xEventGroupWaitBits+0x15c>
     522:	66 20       	and	r6, r6
     524:	29 f0       	breq	.+10     	; 0x530 <xEventGroupWaitBits+0xb0>
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	71 e0       	ldi	r23, 0x01	; 1
     52e:	03 c0       	rjmp	.+6      	; 0x536 <xEventGroupWaitBits+0xb6>
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	ba 01       	movw	r22, r20
     536:	71 10       	cpse	r7, r1
     538:	74 60       	ori	r23, 0x04	; 4
     53a:	48 29       	or	r20, r8
     53c:	59 29       	or	r21, r9
     53e:	6a 29       	or	r22, r10
     540:	7b 29       	or	r23, r11
     542:	97 01       	movw	r18, r14
     544:	86 01       	movw	r16, r12
     546:	ce 01       	movw	r24, r28
     548:	04 96       	adiw	r24, 0x04	; 4
     54a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <vTaskPlaceOnUnorderedEventList>
     54e:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
     552:	81 11       	cpse	r24, r1
     554:	02 c0       	rjmp	.+4      	; 0x55a <xEventGroupWaitBits+0xda>
     556:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
     55a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <uxTaskResetEventItemValue>
     55e:	91 fd       	sbrc	r25, 1
     560:	39 c0       	rjmp	.+114    	; 0x5d4 <xEventGroupWaitBits+0x154>
     562:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     566:	ff 93       	push	r31
     568:	f8 7f       	andi	r31, 0xF8	; 248
     56a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     56e:	68 81       	ld	r22, Y
     570:	79 81       	ldd	r23, Y+1	; 0x01
     572:	8a 81       	ldd	r24, Y+2	; 0x02
     574:	9b 81       	ldd	r25, Y+3	; 0x03
     576:	71 10       	cpse	r7, r1
     578:	0d c0       	rjmp	.+26     	; 0x594 <xEventGroupWaitBits+0x114>
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	75 01       	movw	r14, r10
     57e:	64 01       	movw	r12, r8
     580:	c6 22       	and	r12, r22
     582:	d7 22       	and	r13, r23
     584:	e8 22       	and	r14, r24
     586:	f9 22       	and	r15, r25
     588:	cd 28       	or	r12, r13
     58a:	ce 28       	or	r12, r14
     58c:	cf 28       	or	r12, r15
     58e:	79 f4       	brne	.+30     	; 0x5ae <xEventGroupWaitBits+0x12e>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	0d c0       	rjmp	.+26     	; 0x5ae <xEventGroupWaitBits+0x12e>
     594:	21 e0       	ldi	r18, 0x01	; 1
     596:	75 01       	movw	r14, r10
     598:	64 01       	movw	r12, r8
     59a:	c6 22       	and	r12, r22
     59c:	d7 22       	and	r13, r23
     59e:	e8 22       	and	r14, r24
     5a0:	f9 22       	and	r15, r25
     5a2:	c8 14       	cp	r12, r8
     5a4:	d9 04       	cpc	r13, r9
     5a6:	ea 04       	cpc	r14, r10
     5a8:	fb 04       	cpc	r15, r11
     5aa:	09 f0       	breq	.+2      	; 0x5ae <xEventGroupWaitBits+0x12e>
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	22 23       	and	r18, r18
     5b0:	71 f0       	breq	.+28     	; 0x5ce <xEventGroupWaitBits+0x14e>
     5b2:	66 20       	and	r6, r6
     5b4:	61 f0       	breq	.+24     	; 0x5ce <xEventGroupWaitBits+0x14e>
     5b6:	80 94       	com	r8
     5b8:	90 94       	com	r9
     5ba:	a0 94       	com	r10
     5bc:	b0 94       	com	r11
     5be:	86 22       	and	r8, r22
     5c0:	97 22       	and	r9, r23
     5c2:	a8 22       	and	r10, r24
     5c4:	b9 22       	and	r11, r25
     5c6:	88 82       	st	Y, r8
     5c8:	99 82       	std	Y+1, r9	; 0x01
     5ca:	aa 82       	std	Y+2, r10	; 0x02
     5cc:	bb 82       	std	Y+3, r11	; 0x03
     5ce:	ff 91       	pop	r31
     5d0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     5d4:	1b 01       	movw	r2, r22
     5d6:	2c 01       	movw	r4, r24
     5d8:	55 24       	eor	r5, r5
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <xEventGroupWaitBits+0x160>
     5dc:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
     5e0:	c2 01       	movw	r24, r4
     5e2:	b1 01       	movw	r22, r2
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	af 90       	pop	r10
     5f8:	9f 90       	pop	r9
     5fa:	8f 90       	pop	r8
     5fc:	7f 90       	pop	r7
     5fe:	6f 90       	pop	r6
     600:	5f 90       	pop	r5
     602:	4f 90       	pop	r4
     604:	3f 90       	pop	r3
     606:	2f 90       	pop	r2
     608:	08 95       	ret

0000060a <xEventGroupClearBits>:
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     612:	ff 93       	push	r31
     614:	f8 7f       	andi	r31, 0xF8	; 248
     616:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     61a:	fc 01       	movw	r30, r24
     61c:	00 81       	ld	r16, Z
     61e:	11 81       	ldd	r17, Z+1	; 0x01
     620:	22 81       	ldd	r18, Z+2	; 0x02
     622:	33 81       	ldd	r19, Z+3	; 0x03
     624:	40 95       	com	r20
     626:	50 95       	com	r21
     628:	60 95       	com	r22
     62a:	70 95       	com	r23
     62c:	40 23       	and	r20, r16
     62e:	51 23       	and	r21, r17
     630:	62 23       	and	r22, r18
     632:	73 23       	and	r23, r19
     634:	40 83       	st	Z, r20
     636:	51 83       	std	Z+1, r21	; 0x01
     638:	62 83       	std	Z+2, r22	; 0x02
     63a:	73 83       	std	Z+3, r23	; 0x03
     63c:	ff 91       	pop	r31
     63e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     642:	c9 01       	movw	r24, r18
     644:	b8 01       	movw	r22, r16
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <xEventGroupSetBits>:
     64c:	4f 92       	push	r4
     64e:	5f 92       	push	r5
     650:	6f 92       	push	r6
     652:	7f 92       	push	r7
     654:	af 92       	push	r10
     656:	bf 92       	push	r11
     658:	cf 92       	push	r12
     65a:	df 92       	push	r13
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
     66a:	6a 01       	movw	r12, r20
     66c:	7b 01       	movw	r14, r22
     66e:	8c 01       	movw	r16, r24
     670:	09 5f       	subi	r16, 0xF9	; 249
     672:	1f 4f       	sbci	r17, 0xFF	; 255
     674:	0e 94 3c 0b 	call	0x1678	; 0x1678 <vTaskSuspendAll>
     678:	eb 85       	ldd	r30, Y+11	; 0x0b
     67a:	fc 85       	ldd	r31, Y+12	; 0x0c
     67c:	88 81       	ld	r24, Y
     67e:	99 81       	ldd	r25, Y+1	; 0x01
     680:	aa 81       	ldd	r26, Y+2	; 0x02
     682:	bb 81       	ldd	r27, Y+3	; 0x03
     684:	c8 2a       	or	r12, r24
     686:	d9 2a       	or	r13, r25
     688:	ea 2a       	or	r14, r26
     68a:	fb 2a       	or	r15, r27
     68c:	c8 82       	st	Y, r12
     68e:	d9 82       	std	Y+1, r13	; 0x01
     690:	ea 82       	std	Y+2, r14	; 0x02
     692:	fb 82       	std	Y+3, r15	; 0x03
     694:	0e 17       	cp	r16, r30
     696:	1f 07       	cpc	r17, r31
     698:	09 f4       	brne	.+2      	; 0x69c <xEventGroupSetBits+0x50>
     69a:	42 c0       	rjmp	.+132    	; 0x720 <xEventGroupSetBits+0xd4>
     69c:	c1 2c       	mov	r12, r1
     69e:	d1 2c       	mov	r13, r1
     6a0:	76 01       	movw	r14, r12
     6a2:	a4 80       	ldd	r10, Z+4	; 0x04
     6a4:	b5 80       	ldd	r11, Z+5	; 0x05
     6a6:	80 81       	ld	r24, Z
     6a8:	91 81       	ldd	r25, Z+1	; 0x01
     6aa:	a2 81       	ldd	r26, Z+2	; 0x02
     6ac:	b3 81       	ldd	r27, Z+3	; 0x03
     6ae:	ac 01       	movw	r20, r24
     6b0:	bd 01       	movw	r22, r26
     6b2:	77 27       	eor	r23, r23
     6b4:	b2 fd       	sbrc	r27, 2
     6b6:	0f c0       	rjmp	.+30     	; 0x6d6 <xEventGroupSetBits+0x8a>
     6b8:	48 80       	ld	r4, Y
     6ba:	59 80       	ldd	r5, Y+1	; 0x01
     6bc:	6a 80       	ldd	r6, Y+2	; 0x02
     6be:	7b 80       	ldd	r7, Y+3	; 0x03
     6c0:	44 22       	and	r4, r20
     6c2:	55 22       	and	r5, r21
     6c4:	66 22       	and	r6, r22
     6c6:	77 22       	and	r7, r23
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	45 28       	or	r4, r5
     6cc:	46 28       	or	r4, r6
     6ce:	47 28       	or	r4, r7
     6d0:	89 f4       	brne	.+34     	; 0x6f4 <xEventGroupSetBits+0xa8>
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	0f c0       	rjmp	.+30     	; 0x6f4 <xEventGroupSetBits+0xa8>
     6d6:	48 80       	ld	r4, Y
     6d8:	59 80       	ldd	r5, Y+1	; 0x01
     6da:	6a 80       	ldd	r6, Y+2	; 0x02
     6dc:	7b 80       	ldd	r7, Y+3	; 0x03
     6de:	44 22       	and	r4, r20
     6e0:	55 22       	and	r5, r21
     6e2:	66 22       	and	r6, r22
     6e4:	77 22       	and	r7, r23
     6e6:	21 e0       	ldi	r18, 0x01	; 1
     6e8:	44 16       	cp	r4, r20
     6ea:	55 06       	cpc	r5, r21
     6ec:	66 06       	cpc	r6, r22
     6ee:	77 06       	cpc	r7, r23
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <xEventGroupSetBits+0xa8>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	22 23       	and	r18, r18
     6f6:	71 f0       	breq	.+28     	; 0x714 <xEventGroupSetBits+0xc8>
     6f8:	b0 ff       	sbrs	r27, 0
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <xEventGroupSetBits+0xb8>
     6fc:	c4 2a       	or	r12, r20
     6fe:	d5 2a       	or	r13, r21
     700:	e6 2a       	or	r14, r22
     702:	f7 2a       	or	r15, r23
     704:	48 81       	ld	r20, Y
     706:	59 81       	ldd	r21, Y+1	; 0x01
     708:	6a 81       	ldd	r22, Y+2	; 0x02
     70a:	7b 81       	ldd	r23, Y+3	; 0x03
     70c:	72 60       	ori	r23, 0x02	; 2
     70e:	cf 01       	movw	r24, r30
     710:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vTaskRemoveFromUnorderedEventList>
     714:	ea 2d       	mov	r30, r10
     716:	fb 2d       	mov	r31, r11
     718:	0e 17       	cp	r16, r30
     71a:	1f 07       	cpc	r17, r31
     71c:	11 f6       	brne	.-124    	; 0x6a2 <xEventGroupSetBits+0x56>
     71e:	03 c0       	rjmp	.+6      	; 0x726 <xEventGroupSetBits+0xda>
     720:	c1 2c       	mov	r12, r1
     722:	d1 2c       	mov	r13, r1
     724:	76 01       	movw	r14, r12
     726:	c0 94       	com	r12
     728:	d0 94       	com	r13
     72a:	e0 94       	com	r14
     72c:	f0 94       	com	r15
     72e:	88 81       	ld	r24, Y
     730:	99 81       	ldd	r25, Y+1	; 0x01
     732:	aa 81       	ldd	r26, Y+2	; 0x02
     734:	bb 81       	ldd	r27, Y+3	; 0x03
     736:	c8 22       	and	r12, r24
     738:	d9 22       	and	r13, r25
     73a:	ea 22       	and	r14, r26
     73c:	fb 22       	and	r15, r27
     73e:	c8 82       	st	Y, r12
     740:	d9 82       	std	Y+1, r13	; 0x01
     742:	ea 82       	std	Y+2, r14	; 0x02
     744:	fb 82       	std	Y+3, r15	; 0x03
     746:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
     74a:	68 81       	ld	r22, Y
     74c:	79 81       	ldd	r23, Y+1	; 0x01
     74e:	8a 81       	ldd	r24, Y+2	; 0x02
     750:	9b 81       	ldd	r25, Y+3	; 0x03
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	bf 90       	pop	r11
     764:	af 90       	pop	r10
     766:	7f 90       	pop	r7
     768:	6f 90       	pop	r6
     76a:	5f 90       	pop	r5
     76c:	4f 90       	pop	r4
     76e:	08 95       	ret

00000770 <vEventGroupSetBitsCallback>:
     770:	0e 94 26 03 	call	0x64c	; 0x64c <xEventGroupSetBits>
     774:	08 95       	ret

00000776 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     77a:	89 01       	movw	r16, r18
     77c:	9a 01       	movw	r18, r20
     77e:	ab 01       	movw	r20, r22
     780:	bc 01       	movw	r22, r24
     782:	88 eb       	ldi	r24, 0xB8	; 184
     784:	93 e0       	ldi	r25, 0x03	; 3
     786:	0e 94 88 11 	call	0x2310	; 0x2310 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	08 95       	ret

00000790 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     796:	0e 94 3c 0b 	call	0x1678	; 0x1678 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     79a:	20 91 5a 20 	lds	r18, 0x205A	; 0x80205a <__data_end>
     79e:	30 91 5b 20 	lds	r19, 0x205B	; 0x80205b <__data_end+0x1>
     7a2:	c9 01       	movw	r24, r18
     7a4:	8c 0f       	add	r24, r28
     7a6:	9d 1f       	adc	r25, r29
     7a8:	88 3b       	cpi	r24, 0xB8	; 184
     7aa:	4b e0       	ldi	r20, 0x0B	; 11
     7ac:	94 07       	cpc	r25, r20
     7ae:	58 f4       	brcc	.+22     	; 0x7c6 <pvPortMalloc+0x36>
     7b0:	28 17       	cp	r18, r24
     7b2:	39 07       	cpc	r19, r25
     7b4:	58 f4       	brcc	.+22     	; 0x7cc <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     7b6:	e9 01       	movw	r28, r18
     7b8:	c4 5a       	subi	r28, 0xA4	; 164
     7ba:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     7bc:	80 93 5a 20 	sts	0x205A, r24	; 0x80205a <__data_end>
     7c0:	90 93 5b 20 	sts	0x205B, r25	; 0x80205b <__data_end+0x1>
     7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     7c6:	c0 e0       	ldi	r28, 0x00	; 0
     7c8:	d0 e0       	ldi	r29, 0x00	; 0
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <pvPortMalloc+0x40>
     7cc:	c0 e0       	ldi	r28, 0x00	; 0
     7ce:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     7d0:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     7d4:	ce 01       	movw	r24, r28
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     7dc:	08 95       	ret

000007de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     7de:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7e0:	03 96       	adiw	r24, 0x03	; 3
     7e2:	81 83       	std	Z+1, r24	; 0x01
     7e4:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     7e6:	4f ef       	ldi	r20, 0xFF	; 255
     7e8:	5f ef       	ldi	r21, 0xFF	; 255
     7ea:	ba 01       	movw	r22, r20
     7ec:	43 83       	std	Z+3, r20	; 0x03
     7ee:	54 83       	std	Z+4, r21	; 0x04
     7f0:	65 83       	std	Z+5, r22	; 0x05
     7f2:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7f4:	87 83       	std	Z+7, r24	; 0x07
     7f6:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7f8:	81 87       	std	Z+9, r24	; 0x09
     7fa:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     7fc:	10 82       	st	Z, r1
     7fe:	08 95       	ret

00000800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     800:	fc 01       	movw	r30, r24
     802:	12 86       	std	Z+10, r1	; 0x0a
     804:	13 86       	std	Z+11, r1	; 0x0b
     806:	08 95       	ret

00000808 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	9c 01       	movw	r18, r24
     80e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     810:	dc 01       	movw	r26, r24
     812:	11 96       	adiw	r26, 0x01	; 1
     814:	cd 91       	ld	r28, X+
     816:	dc 91       	ld	r29, X
     818:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     81a:	c4 83       	std	Z+4, r28	; 0x04
     81c:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     81e:	8e 81       	ldd	r24, Y+6	; 0x06
     820:	9f 81       	ldd	r25, Y+7	; 0x07
     822:	86 83       	std	Z+6, r24	; 0x06
     824:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     826:	8e 81       	ldd	r24, Y+6	; 0x06
     828:	9f 81       	ldd	r25, Y+7	; 0x07
     82a:	dc 01       	movw	r26, r24
     82c:	14 96       	adiw	r26, 0x04	; 4
     82e:	6d 93       	st	X+, r22
     830:	7c 93       	st	X, r23
     832:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     834:	6e 83       	std	Y+6, r22	; 0x06
     836:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     838:	22 87       	std	Z+10, r18	; 0x0a
     83a:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     83c:	f9 01       	movw	r30, r18
     83e:	80 81       	ld	r24, Z
     840:	8f 5f       	subi	r24, 0xFF	; 255
     842:	80 83       	st	Z, r24
}
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     854:	08 81       	ld	r16, Y
     856:	19 81       	ldd	r17, Y+1	; 0x01
     858:	2a 81       	ldd	r18, Y+2	; 0x02
     85a:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     85c:	0f 3f       	cpi	r16, 0xFF	; 255
     85e:	4f ef       	ldi	r20, 0xFF	; 255
     860:	14 07       	cpc	r17, r20
     862:	24 07       	cpc	r18, r20
     864:	34 07       	cpc	r19, r20
     866:	21 f4       	brne	.+8      	; 0x870 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     868:	fc 01       	movw	r30, r24
     86a:	a1 85       	ldd	r26, Z+9	; 0x09
     86c:	b2 85       	ldd	r27, Z+10	; 0x0a
     86e:	11 c0       	rjmp	.+34     	; 0x892 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     870:	dc 01       	movw	r26, r24
     872:	13 96       	adiw	r26, 0x03	; 3
     874:	01 c0       	rjmp	.+2      	; 0x878 <vListInsert+0x2e>
     876:	df 01       	movw	r26, r30
     878:	14 96       	adiw	r26, 0x04	; 4
     87a:	ed 91       	ld	r30, X+
     87c:	fc 91       	ld	r31, X
     87e:	15 97       	sbiw	r26, 0x05	; 5
     880:	40 81       	ld	r20, Z
     882:	51 81       	ldd	r21, Z+1	; 0x01
     884:	62 81       	ldd	r22, Z+2	; 0x02
     886:	73 81       	ldd	r23, Z+3	; 0x03
     888:	04 17       	cp	r16, r20
     88a:	15 07       	cpc	r17, r21
     88c:	26 07       	cpc	r18, r22
     88e:	37 07       	cpc	r19, r23
     890:	90 f7       	brcc	.-28     	; 0x876 <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     892:	14 96       	adiw	r26, 0x04	; 4
     894:	ed 91       	ld	r30, X+
     896:	fc 91       	ld	r31, X
     898:	15 97       	sbiw	r26, 0x05	; 5
     89a:	ec 83       	std	Y+4, r30	; 0x04
     89c:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     89e:	c6 83       	std	Z+6, r28	; 0x06
     8a0:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     8a2:	ae 83       	std	Y+6, r26	; 0x06
     8a4:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     8a6:	14 96       	adiw	r26, 0x04	; 4
     8a8:	cd 93       	st	X+, r28
     8aa:	dc 93       	st	X, r29
     8ac:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8ae:	8a 87       	std	Y+10, r24	; 0x0a
     8b0:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 81       	ld	r18, Z
     8b6:	2f 5f       	subi	r18, 0xFF	; 255
     8b8:	20 83       	st	Z, r18
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	08 95       	ret

000008c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     8ca:	a2 85       	ldd	r26, Z+10	; 0x0a
     8cc:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     8ce:	c4 81       	ldd	r28, Z+4	; 0x04
     8d0:	d5 81       	ldd	r29, Z+5	; 0x05
     8d2:	86 81       	ldd	r24, Z+6	; 0x06
     8d4:	97 81       	ldd	r25, Z+7	; 0x07
     8d6:	8e 83       	std	Y+6, r24	; 0x06
     8d8:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     8da:	c6 81       	ldd	r28, Z+6	; 0x06
     8dc:	d7 81       	ldd	r29, Z+7	; 0x07
     8de:	84 81       	ldd	r24, Z+4	; 0x04
     8e0:	95 81       	ldd	r25, Z+5	; 0x05
     8e2:	8c 83       	std	Y+4, r24	; 0x04
     8e4:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     8e6:	11 96       	adiw	r26, 0x01	; 1
     8e8:	8d 91       	ld	r24, X+
     8ea:	9c 91       	ld	r25, X
     8ec:	12 97       	sbiw	r26, 0x02	; 2
     8ee:	e8 17       	cp	r30, r24
     8f0:	f9 07       	cpc	r31, r25
     8f2:	31 f4       	brne	.+12     	; 0x900 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     8f4:	86 81       	ldd	r24, Z+6	; 0x06
     8f6:	97 81       	ldd	r25, Z+7	; 0x07
     8f8:	11 96       	adiw	r26, 0x01	; 1
     8fa:	8d 93       	st	X+, r24
     8fc:	9c 93       	st	X, r25
     8fe:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     900:	12 86       	std	Z+10, r1	; 0x0a
     902:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     904:	8c 91       	ld	r24, X
     906:	81 50       	subi	r24, 0x01	; 1
     908:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     90a:	8c 91       	ld	r24, X
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <_portSetInterruptMaskFromIsr>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     912:	e0 ea       	ldi	r30, 0xA0	; 160
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	82 81       	ldd	r24, Z+2	; 0x02
     918:	92 81       	ldd	r25, Z+2	; 0x02
     91a:	98 7f       	andi	r25, 0xF8	; 248
     91c:	92 83       	std	Z+2, r25	; 0x02
     91e:	08 95       	ret

00000920 <pxPortInitialiseStack>:
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	31 e1       	ldi	r19, 0x11	; 17
     92a:	fc 01       	movw	r30, r24
     92c:	30 83       	st	Z, r19
     92e:	31 97       	sbiw	r30, 0x01	; 1
     930:	22 e2       	ldi	r18, 0x22	; 34
     932:	20 83       	st	Z, r18
     934:	31 97       	sbiw	r30, 0x01	; 1
     936:	a3 e3       	ldi	r26, 0x33	; 51
     938:	a0 83       	st	Z, r26
     93a:	6b 01       	movw	r12, r22
     93c:	e1 2c       	mov	r14, r1
     93e:	f1 2c       	mov	r15, r1
     940:	31 97       	sbiw	r30, 0x01	; 1
     942:	60 83       	st	Z, r22
     944:	31 97       	sbiw	r30, 0x01	; 1
     946:	d0 82       	st	Z, r13
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	e0 82       	st	Z, r14
     94c:	31 97       	sbiw	r30, 0x01	; 1
     94e:	61 e3       	ldi	r22, 0x31	; 49
     950:	60 83       	st	Z, r22
     952:	31 97       	sbiw	r30, 0x01	; 1
     954:	60 e8       	ldi	r22, 0x80	; 128
     956:	60 83       	st	Z, r22
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	67 e8       	ldi	r22, 0x87	; 135
     95c:	60 83       	st	Z, r22
     95e:	31 97       	sbiw	r30, 0x01	; 1
     960:	10 82       	st	Z, r1
     962:	31 97       	sbiw	r30, 0x01	; 1
     964:	10 82       	st	Z, r1
     966:	31 97       	sbiw	r30, 0x01	; 1
     968:	62 e0       	ldi	r22, 0x02	; 2
     96a:	60 83       	st	Z, r22
     96c:	31 97       	sbiw	r30, 0x01	; 1
     96e:	63 e0       	ldi	r22, 0x03	; 3
     970:	60 83       	st	Z, r22
     972:	31 97       	sbiw	r30, 0x01	; 1
     974:	64 e0       	ldi	r22, 0x04	; 4
     976:	60 83       	st	Z, r22
     978:	31 97       	sbiw	r30, 0x01	; 1
     97a:	65 e0       	ldi	r22, 0x05	; 5
     97c:	60 83       	st	Z, r22
     97e:	31 97       	sbiw	r30, 0x01	; 1
     980:	66 e0       	ldi	r22, 0x06	; 6
     982:	60 83       	st	Z, r22
     984:	31 97       	sbiw	r30, 0x01	; 1
     986:	67 e0       	ldi	r22, 0x07	; 7
     988:	60 83       	st	Z, r22
     98a:	31 97       	sbiw	r30, 0x01	; 1
     98c:	68 e0       	ldi	r22, 0x08	; 8
     98e:	60 83       	st	Z, r22
     990:	31 97       	sbiw	r30, 0x01	; 1
     992:	69 e0       	ldi	r22, 0x09	; 9
     994:	60 83       	st	Z, r22
     996:	31 97       	sbiw	r30, 0x01	; 1
     998:	60 e1       	ldi	r22, 0x10	; 16
     99a:	60 83       	st	Z, r22
     99c:	31 97       	sbiw	r30, 0x01	; 1
     99e:	30 83       	st	Z, r19
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	32 e1       	ldi	r19, 0x12	; 18
     9a4:	30 83       	st	Z, r19
     9a6:	31 97       	sbiw	r30, 0x01	; 1
     9a8:	33 e1       	ldi	r19, 0x13	; 19
     9aa:	30 83       	st	Z, r19
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	34 e1       	ldi	r19, 0x14	; 20
     9b0:	30 83       	st	Z, r19
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	35 e1       	ldi	r19, 0x15	; 21
     9b6:	30 83       	st	Z, r19
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	36 e1       	ldi	r19, 0x16	; 22
     9bc:	30 83       	st	Z, r19
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	37 e1       	ldi	r19, 0x17	; 23
     9c2:	30 83       	st	Z, r19
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	38 e1       	ldi	r19, 0x18	; 24
     9c8:	30 83       	st	Z, r19
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	39 e1       	ldi	r19, 0x19	; 25
     9ce:	30 83       	st	Z, r19
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	30 e2       	ldi	r19, 0x20	; 32
     9d4:	30 83       	st	Z, r19
     9d6:	31 97       	sbiw	r30, 0x01	; 1
     9d8:	31 e2       	ldi	r19, 0x21	; 33
     9da:	30 83       	st	Z, r19
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	20 83       	st	Z, r18
     9e0:	31 97       	sbiw	r30, 0x01	; 1
     9e2:	23 e2       	ldi	r18, 0x23	; 35
     9e4:	20 83       	st	Z, r18
     9e6:	6a 01       	movw	r12, r20
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	40 83       	st	Z, r20
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	d0 82       	st	Z, r13
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	26 e2       	ldi	r18, 0x26	; 38
     9f4:	20 83       	st	Z, r18
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	27 e2       	ldi	r18, 0x27	; 39
     9fa:	20 83       	st	Z, r18
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	28 e2       	ldi	r18, 0x28	; 40
     a00:	20 83       	st	Z, r18
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	29 e2       	ldi	r18, 0x29	; 41
     a06:	20 83       	st	Z, r18
     a08:	31 97       	sbiw	r30, 0x01	; 1
     a0a:	20 e3       	ldi	r18, 0x30	; 48
     a0c:	20 83       	st	Z, r18
     a0e:	88 97       	sbiw	r24, 0x28	; 40
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	08 95       	ret

00000a1a <xPortStartScheduler>:
     a1a:	83 ef       	ldi	r24, 0xF3	; 243
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     a22:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     a26:	65 e0       	ldi	r22, 0x05	; 5
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	98 e0       	ldi	r25, 0x08	; 8
     a2c:	0e 94 0f 02 	call	0x41e	; 0x41e <TC0_ConfigClockSource>
     a30:	61 e0       	ldi	r22, 0x01	; 1
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	98 e0       	ldi	r25, 0x08	; 8
     a36:	0e 94 1b 02 	call	0x436	; 0x436 <TC0_SetOverflowIntLevel>
     a3a:	a0 91 82 2c 	lds	r26, 0x2C82	; 0x802c82 <pxCurrentTCB>
     a3e:	b0 91 83 2c 	lds	r27, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
     a42:	0d 90       	ld	r0, X+
     a44:	0d be       	out	0x3d, r0	; 61
     a46:	0d 90       	ld	r0, X+
     a48:	0e be       	out	0x3e, r0	; 62
     a4a:	ef 91       	pop	r30
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	bf 91       	pop	r27
     a52:	af 91       	pop	r26
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	7f 91       	pop	r23
     a5a:	6f 91       	pop	r22
     a5c:	5f 91       	pop	r21
     a5e:	4f 91       	pop	r20
     a60:	3f 91       	pop	r19
     a62:	2f 91       	pop	r18
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	7f 90       	pop	r7
     a7a:	6f 90       	pop	r6
     a7c:	5f 90       	pop	r5
     a7e:	4f 90       	pop	r4
     a80:	3f 90       	pop	r3
     a82:	2f 90       	pop	r2
     a84:	1f 90       	pop	r1
     a86:	0f 90       	pop	r0
     a88:	ff 91       	pop	r31
     a8a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     a8e:	ff 91       	pop	r31
     a90:	ff bf       	out	0x3f, r31	; 63
     a92:	ff 91       	pop	r31
     a94:	08 95       	ret
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	08 95       	ret

00000a9a <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     a9a:	ff 93       	push	r31
     a9c:	ff b7       	in	r31, 0x3f	; 63
     a9e:	ff 93       	push	r31
     aa0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     aa4:	ff 93       	push	r31
     aa6:	f8 7f       	andi	r31, 0xF8	; 248
     aa8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     aac:	0f 92       	push	r0
     aae:	1f 92       	push	r1
     ab0:	11 24       	eor	r1, r1
     ab2:	2f 92       	push	r2
     ab4:	3f 92       	push	r3
     ab6:	4f 92       	push	r4
     ab8:	5f 92       	push	r5
     aba:	6f 92       	push	r6
     abc:	7f 92       	push	r7
     abe:	8f 92       	push	r8
     ac0:	9f 92       	push	r9
     ac2:	af 92       	push	r10
     ac4:	bf 92       	push	r11
     ac6:	cf 92       	push	r12
     ac8:	df 92       	push	r13
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	2f 93       	push	r18
     ad4:	3f 93       	push	r19
     ad6:	4f 93       	push	r20
     ad8:	5f 93       	push	r21
     ada:	6f 93       	push	r22
     adc:	7f 93       	push	r23
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	af 93       	push	r26
     ae4:	bf 93       	push	r27
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	ef 93       	push	r30
     aec:	a0 91 82 2c 	lds	r26, 0x2C82	; 0x802c82 <pxCurrentTCB>
     af0:	b0 91 83 2c 	lds	r27, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
     af4:	0d b6       	in	r0, 0x3d	; 61
     af6:	0d 92       	st	X+, r0
     af8:	0e b6       	in	r0, 0x3e	; 62
     afa:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     afc:	0e 94 c5 0c 	call	0x198a	; 0x198a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b00:	a0 91 82 2c 	lds	r26, 0x2C82	; 0x802c82 <pxCurrentTCB>
     b04:	b0 91 83 2c 	lds	r27, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
     b08:	0d 90       	ld	r0, X+
     b0a:	0d be       	out	0x3d, r0	; 61
     b0c:	0d 90       	ld	r0, X+
     b0e:	0e be       	out	0x3e, r0	; 62
     b10:	ef 91       	pop	r30
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	bf 91       	pop	r27
     b18:	af 91       	pop	r26
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	7f 91       	pop	r23
     b20:	6f 91       	pop	r22
     b22:	5f 91       	pop	r21
     b24:	4f 91       	pop	r20
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	df 90       	pop	r13
     b34:	cf 90       	pop	r12
     b36:	bf 90       	pop	r11
     b38:	af 90       	pop	r10
     b3a:	9f 90       	pop	r9
     b3c:	8f 90       	pop	r8
     b3e:	7f 90       	pop	r7
     b40:	6f 90       	pop	r6
     b42:	5f 90       	pop	r5
     b44:	4f 90       	pop	r4
     b46:	3f 90       	pop	r3
     b48:	2f 90       	pop	r2
     b4a:	1f 90       	pop	r1
     b4c:	0f 90       	pop	r0
     b4e:	ff 91       	pop	r31
     b50:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b54:	ff 91       	pop	r31
     b56:	ff bf       	out	0x3f, r31	; 63
     b58:	ff 91       	pop	r31
	asm volatile ( "ret" );
     b5a:	08 95       	ret

00000b5c <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     b5c:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     b5e:	90 91 ce 2c 	lds	r25, 0x2CCE	; 0x802cce <intTaskSwitchPending>
     b62:	89 2b       	or	r24, r25
     b64:	80 93 ce 2c 	sts	0x2CCE, r24	; 0x802cce <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     b68:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     b6c:	91 30       	cpi	r25, 0x01	; 1
     b6e:	41 f0       	breq	.+16     	; 0xb80 <portTaskSwitchContext+0x24>
     b70:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     b74:	92 30       	cpi	r25, 0x02	; 2
     b76:	21 f0       	breq	.+8      	; 0xb80 <portTaskSwitchContext+0x24>
     b78:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     b7c:	94 30       	cpi	r25, 0x04	; 4
     b7e:	59 f4       	brne	.+22     	; 0xb96 <portTaskSwitchContext+0x3a>
     b80:	88 23       	and	r24, r24
     b82:	49 f0       	breq	.+18     	; 0xb96 <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     b84:	0e 94 89 04 	call	0x912	; 0x912 <_portSetInterruptMaskFromIsr>
     b88:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     b8a:	10 92 ce 2c 	sts	0x2CCE, r1	; 0x802cce <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     b8e:	0e 94 c5 0c 	call	0x198a	; 0x198a <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     b92:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		}                                          					
	}
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     b9a:	ff 93       	push	r31
     b9c:	ff b7       	in	r31, 0x3f	; 63
     b9e:	ff 93       	push	r31
     ba0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ba4:	ff 93       	push	r31
     ba6:	f8 7f       	andi	r31, 0xF8	; 248
     ba8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     bac:	0f 92       	push	r0
     bae:	1f 92       	push	r1
     bb0:	11 24       	eor	r1, r1
     bb2:	2f 92       	push	r2
     bb4:	3f 92       	push	r3
     bb6:	4f 92       	push	r4
     bb8:	5f 92       	push	r5
     bba:	6f 92       	push	r6
     bbc:	7f 92       	push	r7
     bbe:	8f 92       	push	r8
     bc0:	9f 92       	push	r9
     bc2:	af 92       	push	r10
     bc4:	bf 92       	push	r11
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	2f 93       	push	r18
     bd4:	3f 93       	push	r19
     bd6:	4f 93       	push	r20
     bd8:	5f 93       	push	r21
     bda:	6f 93       	push	r22
     bdc:	7f 93       	push	r23
     bde:	8f 93       	push	r24
     be0:	9f 93       	push	r25
     be2:	af 93       	push	r26
     be4:	bf 93       	push	r27
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	ef 93       	push	r30
     bec:	a0 91 82 2c 	lds	r26, 0x2C82	; 0x802c82 <pxCurrentTCB>
     bf0:	b0 91 83 2c 	lds	r27, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
     bf4:	0d b6       	in	r0, 0x3d	; 61
     bf6:	0d 92       	st	X+, r0
     bf8:	0e b6       	in	r0, 0x3e	; 62
     bfa:	0d 92       	st	X+, r0
	//
	static void portTaskIncrementTick( void )
	{
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
     bfc:	0e 94 89 04 	call	0x912	; 0x912 <_portSetInterruptMaskFromIsr>
     c00:	c8 2f       	mov	r28, r24
		xTaskIncrementTick();
     c02:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
     c06:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
		portTaskIncrementTick();
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <portTaskSwitchContext>
     c10:	a0 91 82 2c 	lds	r26, 0x2C82	; 0x802c82 <pxCurrentTCB>
     c14:	b0 91 83 2c 	lds	r27, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
     c18:	0d 90       	ld	r0, X+
     c1a:	0d be       	out	0x3d, r0	; 61
     c1c:	0d 90       	ld	r0, X+
     c1e:	0e be       	out	0x3e, r0	; 62
     c20:	ef 91       	pop	r30
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	bf 91       	pop	r27
     c28:	af 91       	pop	r26
     c2a:	9f 91       	pop	r25
     c2c:	8f 91       	pop	r24
     c2e:	7f 91       	pop	r23
     c30:	6f 91       	pop	r22
     c32:	5f 91       	pop	r21
     c34:	4f 91       	pop	r20
     c36:	3f 91       	pop	r19
     c38:	2f 91       	pop	r18
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	7f 90       	pop	r7
     c50:	6f 90       	pop	r6
     c52:	5f 90       	pop	r5
     c54:	4f 90       	pop	r4
     c56:	3f 90       	pop	r3
     c58:	2f 90       	pop	r2
     c5a:	1f 90       	pop	r1
     c5c:	0f 90       	pop	r0
     c5e:	ff 91       	pop	r31
     c60:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c64:	ff 91       	pop	r31
     c66:	ff bf       	out	0x3f, r31	; 63
     c68:	ff 91       	pop	r31
     c6a:	18 95       	reti

00000c6c <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     c6c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c70:	ff 93       	push	r31
     c72:	f8 7f       	andi	r31, 0xF8	; 248
     c74:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c78:	fc 01       	movw	r30, r24
     c7a:	96 8d       	ldd	r25, Z+30	; 0x1e
     c7c:	ff 91       	pop	r31
     c7e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	91 11       	cpse	r25, r1
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	08 95       	ret

00000c8a <prvIsQueueFull>:
     c8a:	dc 01       	movw	r26, r24
     c8c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c90:	ff 93       	push	r31
     c92:	f8 7f       	andi	r31, 0xF8	; 248
     c94:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c98:	5e 96       	adiw	r26, 0x1e	; 30
     c9a:	9c 91       	ld	r25, X
     c9c:	5e 97       	sbiw	r26, 0x1e	; 30
     c9e:	ff 91       	pop	r31
     ca0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	5f 96       	adiw	r26, 0x1f	; 31
     ca8:	2c 91       	ld	r18, X
     caa:	29 13       	cpse	r18, r25
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 95       	ret

00000cb0 <prvCopyDataToQueue>:
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	ec 01       	movw	r28, r24
     cba:	04 2f       	mov	r16, r20
     cbc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     cbe:	48 a1       	ldd	r20, Y+32	; 0x20
     cc0:	44 23       	and	r20, r20
     cc2:	b9 f1       	breq	.+110    	; 0xd32 <prvCopyDataToQueue+0x82>
     cc4:	01 11       	cpse	r16, r1
     cc6:	16 c0       	rjmp	.+44     	; 0xcf4 <prvCopyDataToQueue+0x44>
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
     ccc:	9d 81       	ldd	r25, Y+5	; 0x05
     cce:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <memcpy>
     cd2:	28 a1       	ldd	r18, Y+32	; 0x20
     cd4:	8c 81       	ldd	r24, Y+4	; 0x04
     cd6:	9d 81       	ldd	r25, Y+5	; 0x05
     cd8:	82 0f       	add	r24, r18
     cda:	91 1d       	adc	r25, r1
     cdc:	8c 83       	std	Y+4, r24	; 0x04
     cde:	9d 83       	std	Y+5, r25	; 0x05
     ce0:	2a 81       	ldd	r18, Y+2	; 0x02
     ce2:	3b 81       	ldd	r19, Y+3	; 0x03
     ce4:	82 17       	cp	r24, r18
     ce6:	93 07       	cpc	r25, r19
     ce8:	20 f1       	brcs	.+72     	; 0xd32 <prvCopyDataToQueue+0x82>
     cea:	88 81       	ld	r24, Y
     cec:	99 81       	ldd	r25, Y+1	; 0x01
     cee:	8c 83       	std	Y+4, r24	; 0x04
     cf0:	9d 83       	std	Y+5, r25	; 0x05
     cf2:	1f c0       	rjmp	.+62     	; 0xd32 <prvCopyDataToQueue+0x82>
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	8e 81       	ldd	r24, Y+6	; 0x06
     cf8:	9f 81       	ldd	r25, Y+7	; 0x07
     cfa:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <memcpy>
     cfe:	88 a1       	ldd	r24, Y+32	; 0x20
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	91 95       	neg	r25
     d04:	81 95       	neg	r24
     d06:	91 09       	sbc	r25, r1
     d08:	2e 81       	ldd	r18, Y+6	; 0x06
     d0a:	3f 81       	ldd	r19, Y+7	; 0x07
     d0c:	28 0f       	add	r18, r24
     d0e:	39 1f       	adc	r19, r25
     d10:	2e 83       	std	Y+6, r18	; 0x06
     d12:	3f 83       	std	Y+7, r19	; 0x07
     d14:	48 81       	ld	r20, Y
     d16:	59 81       	ldd	r21, Y+1	; 0x01
     d18:	24 17       	cp	r18, r20
     d1a:	35 07       	cpc	r19, r21
     d1c:	30 f4       	brcc	.+12     	; 0xd2a <prvCopyDataToQueue+0x7a>
     d1e:	2a 81       	ldd	r18, Y+2	; 0x02
     d20:	3b 81       	ldd	r19, Y+3	; 0x03
     d22:	82 0f       	add	r24, r18
     d24:	93 1f       	adc	r25, r19
     d26:	8e 83       	std	Y+6, r24	; 0x06
     d28:	9f 83       	std	Y+7, r25	; 0x07
     d2a:	02 30       	cpi	r16, 0x02	; 2
     d2c:	11 f4       	brne	.+4      	; 0xd32 <prvCopyDataToQueue+0x82>
     d2e:	11 11       	cpse	r17, r1
     d30:	11 50       	subi	r17, 0x01	; 1
     d32:	1f 5f       	subi	r17, 0xFF	; 255
     d34:	1e 8f       	std	Y+30, r17	; 0x1e
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	08 95       	ret

00000d42 <prvCopyDataFromQueue>:
     d42:	fc 01       	movw	r30, r24
     d44:	40 a1       	ldd	r20, Z+32	; 0x20
     d46:	44 23       	and	r20, r20
     d48:	a9 f0       	breq	.+42     	; 0xd74 <prvCopyDataFromQueue+0x32>
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	26 81       	ldd	r18, Z+6	; 0x06
     d4e:	37 81       	ldd	r19, Z+7	; 0x07
     d50:	24 0f       	add	r18, r20
     d52:	35 1f       	adc	r19, r21
     d54:	26 83       	std	Z+6, r18	; 0x06
     d56:	37 83       	std	Z+7, r19	; 0x07
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	93 81       	ldd	r25, Z+3	; 0x03
     d5c:	28 17       	cp	r18, r24
     d5e:	39 07       	cpc	r19, r25
     d60:	20 f0       	brcs	.+8      	; 0xd6a <prvCopyDataFromQueue+0x28>
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	86 83       	std	Z+6, r24	; 0x06
     d68:	97 83       	std	Z+7, r25	; 0x07
     d6a:	cb 01       	movw	r24, r22
     d6c:	66 81       	ldd	r22, Z+6	; 0x06
     d6e:	77 81       	ldd	r23, Z+7	; 0x07
     d70:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <memcpy>
     d74:	08 95       	ret

00000d76 <prvUnlockQueue>:
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	8c 01       	movw	r16, r24
     d82:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d86:	ff 93       	push	r31
     d88:	f8 7f       	andi	r31, 0xF8	; 248
     d8a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d8e:	fc 01       	movw	r30, r24
     d90:	c2 a1       	ldd	r28, Z+34	; 0x22
     d92:	1c 16       	cp	r1, r28
     d94:	ac f4       	brge	.+42     	; 0xdc0 <prvUnlockQueue+0x4a>
     d96:	83 89       	ldd	r24, Z+19	; 0x13
     d98:	81 11       	cpse	r24, r1
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <prvUnlockQueue+0x32>
     d9c:	11 c0       	rjmp	.+34     	; 0xdc0 <prvUnlockQueue+0x4a>
     d9e:	f8 01       	movw	r30, r16
     da0:	83 89       	ldd	r24, Z+19	; 0x13
     da2:	81 11       	cpse	r24, r1
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <prvUnlockQueue+0x3a>
     da6:	0c c0       	rjmp	.+24     	; 0xdc0 <prvUnlockQueue+0x4a>
     da8:	78 01       	movw	r14, r16
     daa:	f3 e1       	ldi	r31, 0x13	; 19
     dac:	ef 0e       	add	r14, r31
     dae:	f1 1c       	adc	r15, r1
     db0:	c7 01       	movw	r24, r14
     db2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <xTaskRemoveFromEventList>
     db6:	81 11       	cpse	r24, r1
     db8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <vTaskMissedYield>
     dbc:	c1 50       	subi	r28, 0x01	; 1
     dbe:	79 f7       	brne	.-34     	; 0xd9e <prvUnlockQueue+0x28>
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	f8 01       	movw	r30, r16
     dc4:	82 a3       	std	Z+34, r24	; 0x22
     dc6:	ff 91       	pop	r31
     dc8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     dcc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     dd0:	ff 93       	push	r31
     dd2:	f8 7f       	andi	r31, 0xF8	; 248
     dd4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     dd8:	f8 01       	movw	r30, r16
     dda:	c1 a1       	ldd	r28, Z+33	; 0x21
     ddc:	1c 16       	cp	r1, r28
     dde:	ac f4       	brge	.+42     	; 0xe0a <prvUnlockQueue+0x94>
     de0:	80 85       	ldd	r24, Z+8	; 0x08
     de2:	81 11       	cpse	r24, r1
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <prvUnlockQueue+0x7c>
     de6:	11 c0       	rjmp	.+34     	; 0xe0a <prvUnlockQueue+0x94>
     de8:	f8 01       	movw	r30, r16
     dea:	80 85       	ldd	r24, Z+8	; 0x08
     dec:	81 11       	cpse	r24, r1
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <prvUnlockQueue+0x84>
     df0:	0c c0       	rjmp	.+24     	; 0xe0a <prvUnlockQueue+0x94>
     df2:	78 01       	movw	r14, r16
     df4:	f8 e0       	ldi	r31, 0x08	; 8
     df6:	ef 0e       	add	r14, r31
     df8:	f1 1c       	adc	r15, r1
     dfa:	c7 01       	movw	r24, r14
     dfc:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <xTaskRemoveFromEventList>
     e00:	81 11       	cpse	r24, r1
     e02:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <vTaskMissedYield>
     e06:	c1 50       	subi	r28, 0x01	; 1
     e08:	79 f7       	brne	.-34     	; 0xde8 <prvUnlockQueue+0x72>
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	f8 01       	movw	r30, r16
     e0e:	81 a3       	std	Z+33, r24	; 0x21
     e10:	ff 91       	pop	r31
     e12:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	08 95       	ret

00000e22 <xQueueGenericReset>:
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ec 01       	movw	r28, r24
     e28:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e2c:	ff 93       	push	r31
     e2e:	f8 7f       	andi	r31, 0xF8	; 248
     e30:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e34:	48 81       	ld	r20, Y
     e36:	59 81       	ldd	r21, Y+1	; 0x01
     e38:	28 a1       	ldd	r18, Y+32	; 0x20
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	7f 8d       	ldd	r23, Y+31	; 0x1f
     e3e:	72 9f       	mul	r23, r18
     e40:	c0 01       	movw	r24, r0
     e42:	73 9f       	mul	r23, r19
     e44:	90 0d       	add	r25, r0
     e46:	11 24       	eor	r1, r1
     e48:	fa 01       	movw	r30, r20
     e4a:	e8 0f       	add	r30, r24
     e4c:	f9 1f       	adc	r31, r25
     e4e:	ea 83       	std	Y+2, r30	; 0x02
     e50:	fb 83       	std	Y+3, r31	; 0x03
     e52:	1e 8e       	std	Y+30, r1	; 0x1e
     e54:	4c 83       	std	Y+4, r20	; 0x04
     e56:	5d 83       	std	Y+5, r21	; 0x05
     e58:	82 1b       	sub	r24, r18
     e5a:	93 0b       	sbc	r25, r19
     e5c:	84 0f       	add	r24, r20
     e5e:	95 1f       	adc	r25, r21
     e60:	8e 83       	std	Y+6, r24	; 0x06
     e62:	9f 83       	std	Y+7, r25	; 0x07
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	89 a3       	std	Y+33, r24	; 0x21
     e68:	8a a3       	std	Y+34, r24	; 0x22
     e6a:	61 11       	cpse	r22, r1
     e6c:	0c c0       	rjmp	.+24     	; 0xe86 <xQueueGenericReset+0x64>
     e6e:	88 85       	ldd	r24, Y+8	; 0x08
     e70:	88 23       	and	r24, r24
     e72:	89 f0       	breq	.+34     	; 0xe96 <xQueueGenericReset+0x74>
     e74:	ce 01       	movw	r24, r28
     e76:	08 96       	adiw	r24, 0x08	; 8
     e78:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <xTaskRemoveFromEventList>
     e7c:	88 23       	and	r24, r24
     e7e:	59 f0       	breq	.+22     	; 0xe96 <xQueueGenericReset+0x74>
     e80:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
     e84:	08 c0       	rjmp	.+16     	; 0xe96 <xQueueGenericReset+0x74>
     e86:	ce 01       	movw	r24, r28
     e88:	08 96       	adiw	r24, 0x08	; 8
     e8a:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
     e8e:	ce 01       	movw	r24, r28
     e90:	43 96       	adiw	r24, 0x13	; 19
     e92:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
     e96:	ff 91       	pop	r31
     e98:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <xQueueGenericCreate>:
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	08 2f       	mov	r16, r24
     eb0:	16 2f       	mov	r17, r22
     eb2:	f4 2e       	mov	r15, r20
     eb4:	66 23       	and	r22, r22
     eb6:	c9 f0       	breq	.+50     	; 0xeea <xQueueGenericCreate+0x46>
     eb8:	86 9f       	mul	r24, r22
     eba:	c0 01       	movw	r24, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	85 96       	adiw	r24, 0x25	; 37
     ec0:	0e 94 c8 03 	call	0x790	; 0x790 <pvPortMalloc>
     ec4:	ec 01       	movw	r28, r24
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	49 f4       	brne	.+18     	; 0xedc <xQueueGenericCreate+0x38>
     eca:	16 c0       	rjmp	.+44     	; 0xef8 <xQueueGenericCreate+0x54>
     ecc:	0f 8f       	std	Y+31, r16	; 0x1f
     ece:	18 a3       	std	Y+32, r17	; 0x20
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	ce 01       	movw	r24, r28
     ed4:	0e 94 11 07 	call	0xe22	; 0xe22 <xQueueGenericReset>
     ed8:	fc a2       	std	Y+36, r15	; 0x24
     eda:	0e c0       	rjmp	.+28     	; 0xef8 <xQueueGenericCreate+0x54>
     edc:	85 96       	adiw	r24, 0x25	; 37
     ede:	88 83       	st	Y, r24
     ee0:	99 83       	std	Y+1, r25	; 0x01
     ee2:	f4 cf       	rjmp	.-24     	; 0xecc <xQueueGenericCreate+0x28>
     ee4:	c8 83       	st	Y, r28
     ee6:	d9 83       	std	Y+1, r29	; 0x01
     ee8:	f1 cf       	rjmp	.-30     	; 0xecc <xQueueGenericCreate+0x28>
     eea:	85 e2       	ldi	r24, 0x25	; 37
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 c8 03 	call	0x790	; 0x790 <pvPortMalloc>
     ef2:	ec 01       	movw	r28, r24
     ef4:	89 2b       	or	r24, r25
     ef6:	b1 f7       	brne	.-20     	; 0xee4 <xQueueGenericCreate+0x40>
     ef8:	ce 01       	movw	r24, r28
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	08 95       	ret

00000f06 <xQueueGenericSend>:
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	29 97       	sbiw	r28, 0x09	; 9
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	7c 01       	movw	r14, r24
     f26:	5b 01       	movw	r10, r22
     f28:	2e 83       	std	Y+6, r18	; 0x06
     f2a:	3f 83       	std	Y+7, r19	; 0x07
     f2c:	48 87       	std	Y+8, r20	; 0x08
     f2e:	59 87       	std	Y+9, r21	; 0x09
     f30:	10 e0       	ldi	r17, 0x00	; 0
     f32:	6c 01       	movw	r12, r24
     f34:	88 e0       	ldi	r24, 0x08	; 8
     f36:	c8 0e       	add	r12, r24
     f38:	d1 1c       	adc	r13, r1
     f3a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f3e:	ff 93       	push	r31
     f40:	f8 7f       	andi	r31, 0xF8	; 248
     f42:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f46:	f7 01       	movw	r30, r14
     f48:	96 8d       	ldd	r25, Z+30	; 0x1e
     f4a:	87 8d       	ldd	r24, Z+31	; 0x1f
     f4c:	98 17       	cp	r25, r24
     f4e:	10 f0       	brcs	.+4      	; 0xf54 <xQueueGenericSend+0x4e>
     f50:	02 30       	cpi	r16, 0x02	; 2
     f52:	d1 f4       	brne	.+52     	; 0xf88 <xQueueGenericSend+0x82>
     f54:	40 2f       	mov	r20, r16
     f56:	b5 01       	movw	r22, r10
     f58:	c7 01       	movw	r24, r14
     f5a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <prvCopyDataToQueue>
     f5e:	f7 01       	movw	r30, r14
     f60:	93 89       	ldd	r25, Z+19	; 0x13
     f62:	99 23       	and	r25, r25
     f64:	49 f0       	breq	.+18     	; 0xf78 <xQueueGenericSend+0x72>
     f66:	c7 01       	movw	r24, r14
     f68:	43 96       	adiw	r24, 0x13	; 19
     f6a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <xTaskRemoveFromEventList>
     f6e:	88 23       	and	r24, r24
     f70:	31 f0       	breq	.+12     	; 0xf7e <xQueueGenericSend+0x78>
     f72:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <xQueueGenericSend+0x78>
     f78:	81 11       	cpse	r24, r1
     f7a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
     f7e:	ff 91       	pop	r31
     f80:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	57 c0       	rjmp	.+174    	; 0x1036 <xQueueGenericSend+0x130>
     f88:	8e 81       	ldd	r24, Y+6	; 0x06
     f8a:	9f 81       	ldd	r25, Y+7	; 0x07
     f8c:	a8 85       	ldd	r26, Y+8	; 0x08
     f8e:	b9 85       	ldd	r27, Y+9	; 0x09
     f90:	89 2b       	or	r24, r25
     f92:	8a 2b       	or	r24, r26
     f94:	8b 2b       	or	r24, r27
     f96:	29 f4       	brne	.+10     	; 0xfa2 <xQueueGenericSend+0x9c>
     f98:	ff 91       	pop	r31
     f9a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	4a c0       	rjmp	.+148    	; 0x1036 <xQueueGenericSend+0x130>
     fa2:	11 11       	cpse	r17, r1
     fa4:	05 c0       	rjmp	.+10     	; 0xfb0 <xQueueGenericSend+0xaa>
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <vTaskInternalSetTimeOutState>
     fae:	11 e0       	ldi	r17, 0x01	; 1
     fb0:	ff 91       	pop	r31
     fb2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fb6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <vTaskSuspendAll>
     fba:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fbe:	ff 93       	push	r31
     fc0:	f8 7f       	andi	r31, 0xF8	; 248
     fc2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fc6:	f7 01       	movw	r30, r14
     fc8:	81 a1       	ldd	r24, Z+33	; 0x21
     fca:	8f 3f       	cpi	r24, 0xFF	; 255
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <xQueueGenericSend+0xca>
     fce:	11 a2       	std	Z+33, r1	; 0x21
     fd0:	f7 01       	movw	r30, r14
     fd2:	82 a1       	ldd	r24, Z+34	; 0x22
     fd4:	8f 3f       	cpi	r24, 0xFF	; 255
     fd6:	09 f4       	brne	.+2      	; 0xfda <xQueueGenericSend+0xd4>
     fd8:	12 a2       	std	Z+34, r1	; 0x22
     fda:	ff 91       	pop	r31
     fdc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fe0:	be 01       	movw	r22, r28
     fe2:	6a 5f       	subi	r22, 0xFA	; 250
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	ce 01       	movw	r24, r28
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <xTaskCheckForTimeOut>
     fee:	81 11       	cpse	r24, r1
     ff0:	1c c0       	rjmp	.+56     	; 0x102a <xQueueGenericSend+0x124>
     ff2:	c7 01       	movw	r24, r14
     ff4:	0e 94 45 06 	call	0xc8a	; 0xc8a <prvIsQueueFull>
     ff8:	88 23       	and	r24, r24
     ffa:	89 f0       	breq	.+34     	; 0x101e <xQueueGenericSend+0x118>
     ffc:	4e 81       	ldd	r20, Y+6	; 0x06
     ffe:	5f 81       	ldd	r21, Y+7	; 0x07
    1000:	68 85       	ldd	r22, Y+8	; 0x08
    1002:	79 85       	ldd	r23, Y+9	; 0x09
    1004:	c6 01       	movw	r24, r12
    1006:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vTaskPlaceOnEventList>
    100a:	c7 01       	movw	r24, r14
    100c:	0e 94 bb 06 	call	0xd76	; 0xd76 <prvUnlockQueue>
    1010:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
    1014:	81 11       	cpse	r24, r1
    1016:	91 cf       	rjmp	.-222    	; 0xf3a <xQueueGenericSend+0x34>
    1018:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
    101c:	8e cf       	rjmp	.-228    	; 0xf3a <xQueueGenericSend+0x34>
    101e:	c7 01       	movw	r24, r14
    1020:	0e 94 bb 06 	call	0xd76	; 0xd76 <prvUnlockQueue>
    1024:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
    1028:	88 cf       	rjmp	.-240    	; 0xf3a <xQueueGenericSend+0x34>
    102a:	c7 01       	movw	r24, r14
    102c:	0e 94 bb 06 	call	0xd76	; 0xd76 <prvUnlockQueue>
    1030:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	29 96       	adiw	r28, 0x09	; 9
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	bf 90       	pop	r11
    104e:	af 90       	pop	r10
    1050:	08 95       	ret

00001052 <xQueueGenericSendFromISR>:
    1052:	af 92       	push	r10
    1054:	bf 92       	push	r11
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ff 92       	push	r15
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	ec 01       	movw	r28, r24
    1066:	6b 01       	movw	r12, r22
    1068:	5a 01       	movw	r10, r20
    106a:	02 2f       	mov	r16, r18
    106c:	0e 94 89 04 	call	0x912	; 0x912 <_portSetInterruptMaskFromIsr>
    1070:	f8 2e       	mov	r15, r24
    1072:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1074:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1076:	98 17       	cp	r25, r24
    1078:	10 f0       	brcs	.+4      	; 0x107e <xQueueGenericSendFromISR+0x2c>
    107a:	02 30       	cpi	r16, 0x02	; 2
    107c:	e1 f4       	brne	.+56     	; 0x10b6 <xQueueGenericSendFromISR+0x64>
    107e:	1a a1       	ldd	r17, Y+34	; 0x22
    1080:	40 2f       	mov	r20, r16
    1082:	b6 01       	movw	r22, r12
    1084:	ce 01       	movw	r24, r28
    1086:	0e 94 58 06 	call	0xcb0	; 0xcb0 <prvCopyDataToQueue>
    108a:	1f 3f       	cpi	r17, 0xFF	; 255
    108c:	81 f4       	brne	.+32     	; 0x10ae <xQueueGenericSendFromISR+0x5c>
    108e:	8b 89       	ldd	r24, Y+19	; 0x13
    1090:	88 23       	and	r24, r24
    1092:	99 f0       	breq	.+38     	; 0x10ba <xQueueGenericSendFromISR+0x68>
    1094:	ce 01       	movw	r24, r28
    1096:	43 96       	adiw	r24, 0x13	; 19
    1098:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <xTaskRemoveFromEventList>
    109c:	88 23       	and	r24, r24
    109e:	79 f0       	breq	.+30     	; 0x10be <xQueueGenericSendFromISR+0x6c>
    10a0:	a1 14       	cp	r10, r1
    10a2:	b1 04       	cpc	r11, r1
    10a4:	71 f0       	breq	.+28     	; 0x10c2 <xQueueGenericSendFromISR+0x70>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	f5 01       	movw	r30, r10
    10aa:	80 83       	st	Z, r24
    10ac:	0b c0       	rjmp	.+22     	; 0x10c4 <xQueueGenericSendFromISR+0x72>
    10ae:	1f 5f       	subi	r17, 0xFF	; 255
    10b0:	1a a3       	std	Y+34, r17	; 0x22
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <xQueueGenericSendFromISR+0x72>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <xQueueGenericSendFromISR+0x72>
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <xQueueGenericSendFromISR+0x72>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <xQueueGenericSendFromISR+0x72>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	bf 90       	pop	r11
    10d8:	af 90       	pop	r10
    10da:	08 95       	ret

000010dc <xQueueReceive>:
    10dc:	af 92       	push	r10
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	29 97       	sbiw	r28, 0x09	; 9
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	8c 01       	movw	r16, r24
    10fc:	5b 01       	movw	r10, r22
    10fe:	2e 83       	std	Y+6, r18	; 0x06
    1100:	3f 83       	std	Y+7, r19	; 0x07
    1102:	48 87       	std	Y+8, r20	; 0x08
    1104:	59 87       	std	Y+9, r21	; 0x09
    1106:	e1 2c       	mov	r14, r1
    1108:	6c 01       	movw	r12, r24
    110a:	83 e1       	ldi	r24, 0x13	; 19
    110c:	c8 0e       	add	r12, r24
    110e:	d1 1c       	adc	r13, r1
    1110:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1114:	ff 93       	push	r31
    1116:	f8 7f       	andi	r31, 0xF8	; 248
    1118:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    111c:	f8 01       	movw	r30, r16
    111e:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1120:	ff 20       	and	r15, r15
    1122:	b1 f0       	breq	.+44     	; 0x1150 <xQueueReceive+0x74>
    1124:	b5 01       	movw	r22, r10
    1126:	c8 01       	movw	r24, r16
    1128:	0e 94 a1 06 	call	0xd42	; 0xd42 <prvCopyDataFromQueue>
    112c:	fa 94       	dec	r15
    112e:	f8 01       	movw	r30, r16
    1130:	f6 8e       	std	Z+30, r15	; 0x1e
    1132:	80 85       	ldd	r24, Z+8	; 0x08
    1134:	88 23       	and	r24, r24
    1136:	39 f0       	breq	.+14     	; 0x1146 <xQueueReceive+0x6a>
    1138:	c8 01       	movw	r24, r16
    113a:	08 96       	adiw	r24, 0x08	; 8
    113c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <xTaskRemoveFromEventList>
    1140:	81 11       	cpse	r24, r1
    1142:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
    1146:	ff 91       	pop	r31
    1148:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	5e c0       	rjmp	.+188    	; 0x120c <xQueueReceive+0x130>
    1150:	8e 81       	ldd	r24, Y+6	; 0x06
    1152:	9f 81       	ldd	r25, Y+7	; 0x07
    1154:	a8 85       	ldd	r26, Y+8	; 0x08
    1156:	b9 85       	ldd	r27, Y+9	; 0x09
    1158:	89 2b       	or	r24, r25
    115a:	8a 2b       	or	r24, r26
    115c:	8b 2b       	or	r24, r27
    115e:	29 f4       	brne	.+10     	; 0x116a <xQueueReceive+0x8e>
    1160:	ff 91       	pop	r31
    1162:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	51 c0       	rjmp	.+162    	; 0x120c <xQueueReceive+0x130>
    116a:	e1 10       	cpse	r14, r1
    116c:	06 c0       	rjmp	.+12     	; 0x117a <xQueueReceive+0x9e>
    116e:	ce 01       	movw	r24, r28
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <vTaskInternalSetTimeOutState>
    1176:	ee 24       	eor	r14, r14
    1178:	e3 94       	inc	r14
    117a:	ff 91       	pop	r31
    117c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1180:	0e 94 3c 0b 	call	0x1678	; 0x1678 <vTaskSuspendAll>
    1184:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1188:	ff 93       	push	r31
    118a:	f8 7f       	andi	r31, 0xF8	; 248
    118c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1190:	f8 01       	movw	r30, r16
    1192:	81 a1       	ldd	r24, Z+33	; 0x21
    1194:	8f 3f       	cpi	r24, 0xFF	; 255
    1196:	09 f4       	brne	.+2      	; 0x119a <xQueueReceive+0xbe>
    1198:	11 a2       	std	Z+33, r1	; 0x21
    119a:	f8 01       	movw	r30, r16
    119c:	82 a1       	ldd	r24, Z+34	; 0x22
    119e:	8f 3f       	cpi	r24, 0xFF	; 255
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <xQueueReceive+0xc8>
    11a2:	12 a2       	std	Z+34, r1	; 0x22
    11a4:	ff 91       	pop	r31
    11a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11aa:	be 01       	movw	r22, r28
    11ac:	6a 5f       	subi	r22, 0xFA	; 250
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <xTaskCheckForTimeOut>
    11b8:	81 11       	cpse	r24, r1
    11ba:	1c c0       	rjmp	.+56     	; 0x11f4 <xQueueReceive+0x118>
    11bc:	c8 01       	movw	r24, r16
    11be:	0e 94 36 06 	call	0xc6c	; 0xc6c <prvIsQueueEmpty>
    11c2:	88 23       	and	r24, r24
    11c4:	89 f0       	breq	.+34     	; 0x11e8 <xQueueReceive+0x10c>
    11c6:	4e 81       	ldd	r20, Y+6	; 0x06
    11c8:	5f 81       	ldd	r21, Y+7	; 0x07
    11ca:	68 85       	ldd	r22, Y+8	; 0x08
    11cc:	79 85       	ldd	r23, Y+9	; 0x09
    11ce:	c6 01       	movw	r24, r12
    11d0:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vTaskPlaceOnEventList>
    11d4:	c8 01       	movw	r24, r16
    11d6:	0e 94 bb 06 	call	0xd76	; 0xd76 <prvUnlockQueue>
    11da:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
    11de:	81 11       	cpse	r24, r1
    11e0:	97 cf       	rjmp	.-210    	; 0x1110 <xQueueReceive+0x34>
    11e2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
    11e6:	94 cf       	rjmp	.-216    	; 0x1110 <xQueueReceive+0x34>
    11e8:	c8 01       	movw	r24, r16
    11ea:	0e 94 bb 06 	call	0xd76	; 0xd76 <prvUnlockQueue>
    11ee:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
    11f2:	8e cf       	rjmp	.-228    	; 0x1110 <xQueueReceive+0x34>
    11f4:	c8 01       	movw	r24, r16
    11f6:	0e 94 bb 06 	call	0xd76	; 0xd76 <prvUnlockQueue>
    11fa:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
    11fe:	c8 01       	movw	r24, r16
    1200:	0e 94 36 06 	call	0xc6c	; 0xc6c <prvIsQueueEmpty>
    1204:	88 23       	and	r24, r24
    1206:	09 f4       	brne	.+2      	; 0x120a <xQueueReceive+0x12e>
    1208:	83 cf       	rjmp	.-250    	; 0x1110 <xQueueReceive+0x34>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	29 96       	adiw	r28, 0x09	; 9
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	df 90       	pop	r13
    1220:	cf 90       	pop	r12
    1222:	bf 90       	pop	r11
    1224:	af 90       	pop	r10
    1226:	08 95       	ret

00001228 <uxQueueMessagesWaiting>:
    1228:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    122c:	ff 93       	push	r31
    122e:	f8 7f       	andi	r31, 0xF8	; 248
    1230:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1234:	fc 01       	movw	r30, r24
    1236:	86 8d       	ldd	r24, Z+30	; 0x1e
    1238:	ff 91       	pop	r31
    123a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    123e:	08 95       	ret

00001240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1246:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    124a:	ff 93       	push	r31
    124c:	f8 7f       	andi	r31, 0xF8	; 248
    124e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1252:	89 a1       	ldd	r24, Y+33	; 0x21
    1254:	8f 3f       	cpi	r24, 0xFF	; 255
    1256:	09 f4       	brne	.+2      	; 0x125a <vQueueWaitForMessageRestricted+0x1a>
    1258:	19 a2       	std	Y+33, r1	; 0x21
    125a:	8a a1       	ldd	r24, Y+34	; 0x22
    125c:	8f 3f       	cpi	r24, 0xFF	; 255
    125e:	09 f4       	brne	.+2      	; 0x1262 <vQueueWaitForMessageRestricted+0x22>
    1260:	1a a2       	std	Y+34, r1	; 0x22
    1262:	ff 91       	pop	r31
    1264:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1268:	8e 8d       	ldd	r24, Y+30	; 0x1e
    126a:	81 11       	cpse	r24, r1
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    126e:	ce 01       	movw	r24, r28
    1270:	43 96       	adiw	r24, 0x13	; 19
    1272:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1276:	ce 01       	movw	r24, r28
    1278:	0e 94 bb 06 	call	0xd76	; 0xd76 <prvUnlockQueue>
	}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    1282:	e0 91 3e 2c 	lds	r30, 0x2C3E	; 0x802c3e <pxDelayedTaskList>
    1286:	f0 91 3f 2c 	lds	r31, 0x2C3F	; 0x802c3f <pxDelayedTaskList+0x1>
    128a:	80 81       	ld	r24, Z
    128c:	81 11       	cpse	r24, r1
    128e:	0c c0       	rjmp	.+24     	; 0x12a8 <prvResetNextTaskUnblockTime+0x26>
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	9f ef       	ldi	r25, 0xFF	; 255
    1294:	dc 01       	movw	r26, r24
    1296:	80 93 17 2c 	sts	0x2C17, r24	; 0x802c17 <xNextTaskUnblockTime>
    129a:	90 93 18 2c 	sts	0x2C18, r25	; 0x802c18 <xNextTaskUnblockTime+0x1>
    129e:	a0 93 19 2c 	sts	0x2C19, r26	; 0x802c19 <xNextTaskUnblockTime+0x2>
    12a2:	b0 93 1a 2c 	sts	0x2C1A, r27	; 0x802c1a <xNextTaskUnblockTime+0x3>
    12a6:	08 95       	ret
    12a8:	e0 91 3e 2c 	lds	r30, 0x2C3E	; 0x802c3e <pxDelayedTaskList>
    12ac:	f0 91 3f 2c 	lds	r31, 0x2C3F	; 0x802c3f <pxDelayedTaskList+0x1>
    12b0:	07 80       	ldd	r0, Z+7	; 0x07
    12b2:	f0 85       	ldd	r31, Z+8	; 0x08
    12b4:	e0 2d       	mov	r30, r0
    12b6:	00 84       	ldd	r0, Z+8	; 0x08
    12b8:	f1 85       	ldd	r31, Z+9	; 0x09
    12ba:	e0 2d       	mov	r30, r0
    12bc:	82 81       	ldd	r24, Z+2	; 0x02
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	a4 81       	ldd	r26, Z+4	; 0x04
    12c2:	b5 81       	ldd	r27, Z+5	; 0x05
    12c4:	80 93 17 2c 	sts	0x2C17, r24	; 0x802c17 <xNextTaskUnblockTime>
    12c8:	90 93 18 2c 	sts	0x2C18, r25	; 0x802c18 <xNextTaskUnblockTime+0x1>
    12cc:	a0 93 19 2c 	sts	0x2C19, r26	; 0x802c19 <xNextTaskUnblockTime+0x2>
    12d0:	b0 93 1a 2c 	sts	0x2C1A, r27	; 0x802c1a <xNextTaskUnblockTime+0x3>
    12d4:	08 95       	ret

000012d6 <prvAddCurrentTaskToDelayedList>:
    12d6:	8f 92       	push	r8
    12d8:	9f 92       	push	r9
    12da:	af 92       	push	r10
    12dc:	bf 92       	push	r11
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	cf 93       	push	r28
    12e8:	6b 01       	movw	r12, r22
    12ea:	7c 01       	movw	r14, r24
    12ec:	c4 2f       	mov	r28, r20
    12ee:	80 90 21 2c 	lds	r8, 0x2C21	; 0x802c21 <xTickCount>
    12f2:	90 90 22 2c 	lds	r9, 0x2C22	; 0x802c22 <xTickCount+0x1>
    12f6:	a0 90 23 2c 	lds	r10, 0x2C23	; 0x802c23 <xTickCount+0x2>
    12fa:	b0 90 24 2c 	lds	r11, 0x2C24	; 0x802c24 <xTickCount+0x3>
    12fe:	80 91 82 2c 	lds	r24, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1302:	90 91 83 2c 	lds	r25, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1306:	02 96       	adiw	r24, 0x02	; 2
    1308:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	c8 16       	cp	r12, r24
    1310:	d8 06       	cpc	r13, r24
    1312:	e8 06       	cpc	r14, r24
    1314:	f8 06       	cpc	r15, r24
    1316:	69 f4       	brne	.+26     	; 0x1332 <prvAddCurrentTaskToDelayedList+0x5c>
    1318:	cc 23       	and	r28, r28
    131a:	59 f0       	breq	.+22     	; 0x1332 <prvAddCurrentTaskToDelayedList+0x5c>
    131c:	60 91 82 2c 	lds	r22, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1320:	70 91 83 2c 	lds	r23, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1324:	6e 5f       	subi	r22, 0xFE	; 254
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	86 e2       	ldi	r24, 0x26	; 38
    132a:	9c e2       	ldi	r25, 0x2C	; 44
    132c:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    1330:	3f c0       	rjmp	.+126    	; 0x13b0 <prvAddCurrentTaskToDelayedList+0xda>
    1332:	c8 0c       	add	r12, r8
    1334:	d9 1c       	adc	r13, r9
    1336:	ea 1c       	adc	r14, r10
    1338:	fb 1c       	adc	r15, r11
    133a:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    133e:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1342:	c2 82       	std	Z+2, r12	; 0x02
    1344:	d3 82       	std	Z+3, r13	; 0x03
    1346:	e4 82       	std	Z+4, r14	; 0x04
    1348:	f5 82       	std	Z+5, r15	; 0x05
    134a:	c8 14       	cp	r12, r8
    134c:	d9 04       	cpc	r13, r9
    134e:	ea 04       	cpc	r14, r10
    1350:	fb 04       	cpc	r15, r11
    1352:	68 f4       	brcc	.+26     	; 0x136e <prvAddCurrentTaskToDelayedList+0x98>
    1354:	60 91 82 2c 	lds	r22, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1358:	70 91 83 2c 	lds	r23, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    135c:	80 91 3c 2c 	lds	r24, 0x2C3C	; 0x802c3c <pxOverflowDelayedTaskList>
    1360:	90 91 3d 2c 	lds	r25, 0x2C3D	; 0x802c3d <pxOverflowDelayedTaskList+0x1>
    1364:	6e 5f       	subi	r22, 0xFE	; 254
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	0e 94 25 04 	call	0x84a	; 0x84a <vListInsert>
    136c:	21 c0       	rjmp	.+66     	; 0x13b0 <prvAddCurrentTaskToDelayedList+0xda>
    136e:	60 91 82 2c 	lds	r22, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1372:	70 91 83 2c 	lds	r23, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1376:	80 91 3e 2c 	lds	r24, 0x2C3E	; 0x802c3e <pxDelayedTaskList>
    137a:	90 91 3f 2c 	lds	r25, 0x2C3F	; 0x802c3f <pxDelayedTaskList+0x1>
    137e:	6e 5f       	subi	r22, 0xFE	; 254
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	0e 94 25 04 	call	0x84a	; 0x84a <vListInsert>
    1386:	80 91 17 2c 	lds	r24, 0x2C17	; 0x802c17 <xNextTaskUnblockTime>
    138a:	90 91 18 2c 	lds	r25, 0x2C18	; 0x802c18 <xNextTaskUnblockTime+0x1>
    138e:	a0 91 19 2c 	lds	r26, 0x2C19	; 0x802c19 <xNextTaskUnblockTime+0x2>
    1392:	b0 91 1a 2c 	lds	r27, 0x2C1A	; 0x802c1a <xNextTaskUnblockTime+0x3>
    1396:	c8 16       	cp	r12, r24
    1398:	d9 06       	cpc	r13, r25
    139a:	ea 06       	cpc	r14, r26
    139c:	fb 06       	cpc	r15, r27
    139e:	40 f4       	brcc	.+16     	; 0x13b0 <prvAddCurrentTaskToDelayedList+0xda>
    13a0:	c0 92 17 2c 	sts	0x2C17, r12	; 0x802c17 <xNextTaskUnblockTime>
    13a4:	d0 92 18 2c 	sts	0x2C18, r13	; 0x802c18 <xNextTaskUnblockTime+0x1>
    13a8:	e0 92 19 2c 	sts	0x2C19, r14	; 0x802c19 <xNextTaskUnblockTime+0x2>
    13ac:	f0 92 1a 2c 	sts	0x2C1A, r15	; 0x802c1a <xNextTaskUnblockTime+0x3>
    13b0:	cf 91       	pop	r28
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	df 90       	pop	r13
    13b8:	cf 90       	pop	r12
    13ba:	bf 90       	pop	r11
    13bc:	af 90       	pop	r10
    13be:	9f 90       	pop	r9
    13c0:	8f 90       	pop	r8
    13c2:	08 95       	ret

000013c4 <prvIdleTask>:
    13c4:	c6 e5       	ldi	r28, 0x56	; 86
    13c6:	dc e2       	ldi	r29, 0x2C	; 44
    13c8:	88 81       	ld	r24, Y
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	10 f0       	brcs	.+4      	; 0x13d2 <prvIdleTask+0xe>
    13ce:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
    13d2:	0e 94 3a 12 	call	0x2474	; 0x2474 <vApplicationIdleHook>
    13d6:	f8 cf       	rjmp	.-16     	; 0x13c8 <prvIdleTask+0x4>

000013d8 <xTaskCreate>:
    13d8:	4f 92       	push	r4
    13da:	5f 92       	push	r5
    13dc:	6f 92       	push	r6
    13de:	7f 92       	push	r7
    13e0:	8f 92       	push	r8
    13e2:	9f 92       	push	r9
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	4c 01       	movw	r8, r24
    13f8:	6b 01       	movw	r12, r22
    13fa:	5a 01       	movw	r10, r20
    13fc:	29 01       	movw	r4, r18
    13fe:	ca 01       	movw	r24, r20
    1400:	0e 94 c8 03 	call	0x790	; 0x790 <pvPortMalloc>
    1404:	3c 01       	movw	r6, r24
    1406:	89 2b       	or	r24, r25
    1408:	09 f4       	brne	.+2      	; 0x140c <xTaskCreate+0x34>
    140a:	ea c0       	rjmp	.+468    	; 0x15e0 <xTaskCreate+0x208>
    140c:	8c e2       	ldi	r24, 0x2C	; 44
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 c8 03 	call	0x790	; 0x790 <pvPortMalloc>
    1414:	ec 01       	movw	r28, r24
    1416:	89 2b       	or	r24, r25
    1418:	b1 f0       	breq	.+44     	; 0x1446 <xTaskCreate+0x6e>
    141a:	6b 8e       	std	Y+27, r6	; 0x1b
    141c:	7c 8e       	std	Y+28, r7	; 0x1c
    141e:	a5 01       	movw	r20, r10
    1420:	65 ea       	ldi	r22, 0xA5	; 165
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	c3 01       	movw	r24, r6
    1426:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <memset>
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	a2 1a       	sub	r10, r18
    142e:	b1 08       	sbc	r11, r1
    1430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1434:	a8 0e       	add	r10, r24
    1436:	b9 1e       	adc	r11, r25
    1438:	d6 01       	movw	r26, r12
    143a:	8c 91       	ld	r24, X
    143c:	8d 8f       	std	Y+29, r24	; 0x1d
    143e:	8c 91       	ld	r24, X
    1440:	81 11       	cpse	r24, r1
    1442:	05 c0       	rjmp	.+10     	; 0x144e <xTaskCreate+0x76>
    1444:	18 c0       	rjmp	.+48     	; 0x1476 <xTaskCreate+0x9e>
    1446:	c3 01       	movw	r24, r6
    1448:	0e 94 ee 03 	call	0x7dc	; 0x7dc <vPortFree>
    144c:	c9 c0       	rjmp	.+402    	; 0x15e0 <xTaskCreate+0x208>
    144e:	ae 01       	movw	r20, r28
    1450:	42 5e       	subi	r20, 0xE2	; 226
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
    1454:	f6 01       	movw	r30, r12
    1456:	31 96       	adiw	r30, 0x01	; 1
    1458:	b8 e0       	ldi	r27, 0x08	; 8
    145a:	cb 0e       	add	r12, r27
    145c:	d1 1c       	adc	r13, r1
    145e:	cf 01       	movw	r24, r30
    1460:	21 91       	ld	r18, Z+
    1462:	da 01       	movw	r26, r20
    1464:	2d 93       	st	X+, r18
    1466:	ad 01       	movw	r20, r26
    1468:	dc 01       	movw	r26, r24
    146a:	8c 91       	ld	r24, X
    146c:	88 23       	and	r24, r24
    146e:	19 f0       	breq	.+6      	; 0x1476 <xTaskCreate+0x9e>
    1470:	ec 15       	cp	r30, r12
    1472:	fd 05       	cpc	r31, r13
    1474:	a1 f7       	brne	.-24     	; 0x145e <xTaskCreate+0x86>
    1476:	1c a2       	std	Y+36, r1	; 0x24
    1478:	04 30       	cpi	r16, 0x04	; 4
    147a:	08 f0       	brcs	.+2      	; 0x147e <xTaskCreate+0xa6>
    147c:	03 e0       	ldi	r16, 0x03	; 3
    147e:	0a 8f       	std	Y+26, r16	; 0x1a
    1480:	6e 01       	movw	r12, r28
    1482:	b2 e0       	ldi	r27, 0x02	; 2
    1484:	cb 0e       	add	r12, r27
    1486:	d1 1c       	adc	r13, r1
    1488:	c6 01       	movw	r24, r12
    148a:	0e 94 00 04 	call	0x800	; 0x800 <vListInitialiseItem>
    148e:	ce 01       	movw	r24, r28
    1490:	0e 96       	adiw	r24, 0x0e	; 14
    1492:	0e 94 00 04 	call	0x800	; 0x800 <vListInitialiseItem>
    1496:	ca 87       	std	Y+10, r28	; 0x0a
    1498:	db 87       	std	Y+11, r29	; 0x0b
    149a:	84 e0       	ldi	r24, 0x04	; 4
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	a0 e0       	ldi	r26, 0x00	; 0
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	80 1b       	sub	r24, r16
    14a4:	91 09       	sbc	r25, r1
    14a6:	a1 09       	sbc	r26, r1
    14a8:	b1 09       	sbc	r27, r1
    14aa:	8e 87       	std	Y+14, r24	; 0x0e
    14ac:	9f 87       	std	Y+15, r25	; 0x0f
    14ae:	a8 8b       	std	Y+16, r26	; 0x10
    14b0:	b9 8b       	std	Y+17, r27	; 0x11
    14b2:	ce 8b       	std	Y+22, r28	; 0x16
    14b4:	df 8b       	std	Y+23, r29	; 0x17
    14b6:	1f a2       	std	Y+39, r1	; 0x27
    14b8:	18 a6       	std	Y+40, r1	; 0x28
    14ba:	19 a6       	std	Y+41, r1	; 0x29
    14bc:	1a a6       	std	Y+42, r1	; 0x2a
    14be:	1b a6       	std	Y+43, r1	; 0x2b
    14c0:	a2 01       	movw	r20, r4
    14c2:	b4 01       	movw	r22, r8
    14c4:	c5 01       	movw	r24, r10
    14c6:	0e 94 90 04 	call	0x920	; 0x920 <pxPortInitialiseStack>
    14ca:	88 83       	st	Y, r24
    14cc:	99 83       	std	Y+1, r25	; 0x01
    14ce:	e1 14       	cp	r14, r1
    14d0:	f1 04       	cpc	r15, r1
    14d2:	19 f0       	breq	.+6      	; 0x14da <xTaskCreate+0x102>
    14d4:	f7 01       	movw	r30, r14
    14d6:	c0 83       	st	Z, r28
    14d8:	d1 83       	std	Z+1, r29	; 0x01
    14da:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14de:	ff 93       	push	r31
    14e0:	f8 7f       	andi	r31, 0xF8	; 248
    14e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14e6:	80 91 25 2c 	lds	r24, 0x2C25	; 0x802c25 <uxCurrentNumberOfTasks>
    14ea:	8f 5f       	subi	r24, 0xFF	; 255
    14ec:	80 93 25 2c 	sts	0x2C25, r24	; 0x802c25 <uxCurrentNumberOfTasks>
    14f0:	80 91 82 2c 	lds	r24, 0x2C82	; 0x802c82 <pxCurrentTCB>
    14f4:	90 91 83 2c 	lds	r25, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    14f8:	89 2b       	or	r24, r25
    14fa:	a9 f5       	brne	.+106    	; 0x1566 <xTaskCreate+0x18e>
    14fc:	c0 93 82 2c 	sts	0x2C82, r28	; 0x802c82 <pxCurrentTCB>
    1500:	d0 93 83 2c 	sts	0x2C83, r29	; 0x802c83 <pxCurrentTCB+0x1>
    1504:	80 91 25 2c 	lds	r24, 0x2C25	; 0x802c25 <uxCurrentNumberOfTasks>
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	e9 f5       	brne	.+122    	; 0x1586 <xTaskCreate+0x1ae>
    150c:	86 e5       	ldi	r24, 0x56	; 86
    150e:	9c e2       	ldi	r25, 0x2C	; 44
    1510:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
    1514:	81 e6       	ldi	r24, 0x61	; 97
    1516:	9c e2       	ldi	r25, 0x2C	; 44
    1518:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
    151c:	8c e6       	ldi	r24, 0x6C	; 108
    151e:	9c e2       	ldi	r25, 0x2C	; 44
    1520:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
    1524:	87 e7       	ldi	r24, 0x77	; 119
    1526:	9c e2       	ldi	r25, 0x2C	; 44
    1528:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
    152c:	8b e4       	ldi	r24, 0x4B	; 75
    152e:	9c e2       	ldi	r25, 0x2C	; 44
    1530:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
    1534:	80 e4       	ldi	r24, 0x40	; 64
    1536:	9c e2       	ldi	r25, 0x2C	; 44
    1538:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
    153c:	81 e3       	ldi	r24, 0x31	; 49
    153e:	9c e2       	ldi	r25, 0x2C	; 44
    1540:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
    1544:	86 e2       	ldi	r24, 0x26	; 38
    1546:	9c e2       	ldi	r25, 0x2C	; 44
    1548:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
    154c:	8b e4       	ldi	r24, 0x4B	; 75
    154e:	9c e2       	ldi	r25, 0x2C	; 44
    1550:	80 93 3e 2c 	sts	0x2C3E, r24	; 0x802c3e <pxDelayedTaskList>
    1554:	90 93 3f 2c 	sts	0x2C3F, r25	; 0x802c3f <pxDelayedTaskList+0x1>
    1558:	80 e4       	ldi	r24, 0x40	; 64
    155a:	9c e2       	ldi	r25, 0x2C	; 44
    155c:	80 93 3c 2c 	sts	0x2C3C, r24	; 0x802c3c <pxOverflowDelayedTaskList>
    1560:	90 93 3d 2c 	sts	0x2C3D, r25	; 0x802c3d <pxOverflowDelayedTaskList+0x1>
    1564:	10 c0       	rjmp	.+32     	; 0x1586 <xTaskCreate+0x1ae>
    1566:	80 91 1f 2c 	lds	r24, 0x2C1F	; 0x802c1f <xSchedulerRunning>
    156a:	81 11       	cpse	r24, r1
    156c:	0c c0       	rjmp	.+24     	; 0x1586 <xTaskCreate+0x1ae>
    156e:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1572:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1576:	92 8d       	ldd	r25, Z+26	; 0x1a
    1578:	8a 8d       	ldd	r24, Y+26	; 0x1a
    157a:	89 17       	cp	r24, r25
    157c:	20 f0       	brcs	.+8      	; 0x1586 <xTaskCreate+0x1ae>
    157e:	c0 93 82 2c 	sts	0x2C82, r28	; 0x802c82 <pxCurrentTCB>
    1582:	d0 93 83 2c 	sts	0x2C83, r29	; 0x802c83 <pxCurrentTCB+0x1>
    1586:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <uxTaskNumber>
    158a:	8f 5f       	subi	r24, 0xFF	; 255
    158c:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <uxTaskNumber>
    1590:	8d a3       	std	Y+37, r24	; 0x25
    1592:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1594:	90 91 20 2c 	lds	r25, 0x2C20	; 0x802c20 <uxTopReadyPriority>
    1598:	98 17       	cp	r25, r24
    159a:	10 f4       	brcc	.+4      	; 0x15a0 <xTaskCreate+0x1c8>
    159c:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxTopReadyPriority>
    15a0:	fb e0       	ldi	r31, 0x0B	; 11
    15a2:	8f 9f       	mul	r24, r31
    15a4:	c0 01       	movw	r24, r0
    15a6:	11 24       	eor	r1, r1
    15a8:	b6 01       	movw	r22, r12
    15aa:	8a 5a       	subi	r24, 0xAA	; 170
    15ac:	93 4d       	sbci	r25, 0xD3	; 211
    15ae:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    15b2:	ff 91       	pop	r31
    15b4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    15b8:	80 91 1f 2c 	lds	r24, 0x2C1F	; 0x802c1f <xSchedulerRunning>
    15bc:	88 23       	and	r24, r24
    15be:	61 f0       	breq	.+24     	; 0x15d8 <xTaskCreate+0x200>
    15c0:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    15c4:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    15c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    15ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15cc:	98 17       	cp	r25, r24
    15ce:	30 f4       	brcc	.+12     	; 0x15dc <xTaskCreate+0x204>
    15d0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	05 c0       	rjmp	.+10     	; 0x15e2 <xTaskCreate+0x20a>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <xTaskCreate+0x20a>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <xTaskCreate+0x20a>
    15e0:	8f ef       	ldi	r24, 0xFF	; 255
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	df 90       	pop	r13
    15ee:	cf 90       	pop	r12
    15f0:	bf 90       	pop	r11
    15f2:	af 90       	pop	r10
    15f4:	9f 90       	pop	r9
    15f6:	8f 90       	pop	r8
    15f8:	7f 90       	pop	r7
    15fa:	6f 90       	pop	r6
    15fc:	5f 90       	pop	r5
    15fe:	4f 90       	pop	r4
    1600:	08 95       	ret

00001602 <vTaskStartScheduler>:
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	0f 2e       	mov	r0, r31
    160a:	f5 e1       	ldi	r31, 0x15	; 21
    160c:	ef 2e       	mov	r14, r31
    160e:	fc e2       	ldi	r31, 0x2C	; 44
    1610:	ff 2e       	mov	r15, r31
    1612:	f0 2d       	mov	r31, r0
    1614:	00 e0       	ldi	r16, 0x00	; 0
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	48 ec       	ldi	r20, 0xC8	; 200
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	70 e2       	ldi	r23, 0x20	; 32
    1622:	82 ee       	ldi	r24, 0xE2	; 226
    1624:	99 e0       	ldi	r25, 0x09	; 9
    1626:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <xTaskCreate>
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	09 f5       	brne	.+66     	; 0x1670 <vTaskStartScheduler+0x6e>
    162e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerCreateTimerTask>
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	e9 f4       	brne	.+58     	; 0x1670 <vTaskStartScheduler+0x6e>
    1636:	e0 ea       	ldi	r30, 0xA0	; 160
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	88 7f       	andi	r24, 0xF8	; 248
    163e:	82 83       	std	Z+2, r24	; 0x02
    1640:	8f ef       	ldi	r24, 0xFF	; 255
    1642:	9f ef       	ldi	r25, 0xFF	; 255
    1644:	dc 01       	movw	r26, r24
    1646:	80 93 17 2c 	sts	0x2C17, r24	; 0x802c17 <xNextTaskUnblockTime>
    164a:	90 93 18 2c 	sts	0x2C18, r25	; 0x802c18 <xNextTaskUnblockTime+0x1>
    164e:	a0 93 19 2c 	sts	0x2C19, r26	; 0x802c19 <xNextTaskUnblockTime+0x2>
    1652:	b0 93 1a 2c 	sts	0x2C1A, r27	; 0x802c1a <xNextTaskUnblockTime+0x3>
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	80 93 1f 2c 	sts	0x2C1F, r24	; 0x802c1f <xSchedulerRunning>
    165c:	10 92 21 2c 	sts	0x2C21, r1	; 0x802c21 <xTickCount>
    1660:	10 92 22 2c 	sts	0x2C22, r1	; 0x802c22 <xTickCount+0x1>
    1664:	10 92 23 2c 	sts	0x2C23, r1	; 0x802c23 <xTickCount+0x2>
    1668:	10 92 24 2c 	sts	0x2C24, r1	; 0x802c24 <xTickCount+0x3>
    166c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xPortStartScheduler>
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	08 95       	ret

00001678 <vTaskSuspendAll>:
    1678:	80 91 14 2c 	lds	r24, 0x2C14	; 0x802c14 <uxSchedulerSuspended>
    167c:	8f 5f       	subi	r24, 0xFF	; 255
    167e:	80 93 14 2c 	sts	0x2C14, r24	; 0x802c14 <uxSchedulerSuspended>
    1682:	08 95       	ret

00001684 <xTaskGetTickCount>:
    1684:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1688:	ff 93       	push	r31
    168a:	f8 7f       	andi	r31, 0xF8	; 248
    168c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1690:	60 91 21 2c 	lds	r22, 0x2C21	; 0x802c21 <xTickCount>
    1694:	70 91 22 2c 	lds	r23, 0x2C22	; 0x802c22 <xTickCount+0x1>
    1698:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <xTickCount+0x2>
    169c:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <xTickCount+0x3>
    16a0:	ff 91       	pop	r31
    16a2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16a6:	08 95       	ret

000016a8 <xTaskIncrementTick>:
    16a8:	af 92       	push	r10
    16aa:	bf 92       	push	r11
    16ac:	cf 92       	push	r12
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	80 91 14 2c 	lds	r24, 0x2C14	; 0x802c14 <uxSchedulerSuspended>
    16c0:	81 11       	cpse	r24, r1
    16c2:	ad c0       	rjmp	.+346    	; 0x181e <xTaskIncrementTick+0x176>
    16c4:	c0 90 21 2c 	lds	r12, 0x2C21	; 0x802c21 <xTickCount>
    16c8:	d0 90 22 2c 	lds	r13, 0x2C22	; 0x802c22 <xTickCount+0x1>
    16cc:	e0 90 23 2c 	lds	r14, 0x2C23	; 0x802c23 <xTickCount+0x2>
    16d0:	f0 90 24 2c 	lds	r15, 0x2C24	; 0x802c24 <xTickCount+0x3>
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	c8 1a       	sub	r12, r24
    16d8:	d8 0a       	sbc	r13, r24
    16da:	e8 0a       	sbc	r14, r24
    16dc:	f8 0a       	sbc	r15, r24
    16de:	c0 92 21 2c 	sts	0x2C21, r12	; 0x802c21 <xTickCount>
    16e2:	d0 92 22 2c 	sts	0x2C22, r13	; 0x802c22 <xTickCount+0x1>
    16e6:	e0 92 23 2c 	sts	0x2C23, r14	; 0x802c23 <xTickCount+0x2>
    16ea:	f0 92 24 2c 	sts	0x2C24, r15	; 0x802c24 <xTickCount+0x3>
    16ee:	c1 14       	cp	r12, r1
    16f0:	d1 04       	cpc	r13, r1
    16f2:	e1 04       	cpc	r14, r1
    16f4:	f1 04       	cpc	r15, r1
    16f6:	b9 f4       	brne	.+46     	; 0x1726 <xTaskIncrementTick+0x7e>
    16f8:	80 91 3e 2c 	lds	r24, 0x2C3E	; 0x802c3e <pxDelayedTaskList>
    16fc:	90 91 3f 2c 	lds	r25, 0x2C3F	; 0x802c3f <pxDelayedTaskList+0x1>
    1700:	20 91 3c 2c 	lds	r18, 0x2C3C	; 0x802c3c <pxOverflowDelayedTaskList>
    1704:	30 91 3d 2c 	lds	r19, 0x2C3D	; 0x802c3d <pxOverflowDelayedTaskList+0x1>
    1708:	20 93 3e 2c 	sts	0x2C3E, r18	; 0x802c3e <pxDelayedTaskList>
    170c:	30 93 3f 2c 	sts	0x2C3F, r19	; 0x802c3f <pxDelayedTaskList+0x1>
    1710:	80 93 3c 2c 	sts	0x2C3C, r24	; 0x802c3c <pxOverflowDelayedTaskList>
    1714:	90 93 3d 2c 	sts	0x2C3D, r25	; 0x802c3d <pxOverflowDelayedTaskList+0x1>
    1718:	80 91 1c 2c 	lds	r24, 0x2C1C	; 0x802c1c <xNumOfOverflows>
    171c:	8f 5f       	subi	r24, 0xFF	; 255
    171e:	80 93 1c 2c 	sts	0x2C1C, r24	; 0x802c1c <xNumOfOverflows>
    1722:	0e 94 41 09 	call	0x1282	; 0x1282 <prvResetNextTaskUnblockTime>
    1726:	80 91 17 2c 	lds	r24, 0x2C17	; 0x802c17 <xNextTaskUnblockTime>
    172a:	90 91 18 2c 	lds	r25, 0x2C18	; 0x802c18 <xNextTaskUnblockTime+0x1>
    172e:	a0 91 19 2c 	lds	r26, 0x2C19	; 0x802c19 <xNextTaskUnblockTime+0x2>
    1732:	b0 91 1a 2c 	lds	r27, 0x2C1A	; 0x802c1a <xNextTaskUnblockTime+0x3>
    1736:	c8 16       	cp	r12, r24
    1738:	d9 06       	cpc	r13, r25
    173a:	ea 06       	cpc	r14, r26
    173c:	fb 06       	cpc	r15, r27
    173e:	10 f4       	brcc	.+4      	; 0x1744 <xTaskIncrementTick+0x9c>
    1740:	b1 2c       	mov	r11, r1
    1742:	5c c0       	rjmp	.+184    	; 0x17fc <xTaskIncrementTick+0x154>
    1744:	b1 2c       	mov	r11, r1
    1746:	0f 2e       	mov	r0, r31
    1748:	fb e0       	ldi	r31, 0x0B	; 11
    174a:	af 2e       	mov	r10, r31
    174c:	f0 2d       	mov	r31, r0
    174e:	e0 91 3e 2c 	lds	r30, 0x2C3E	; 0x802c3e <pxDelayedTaskList>
    1752:	f0 91 3f 2c 	lds	r31, 0x2C3F	; 0x802c3f <pxDelayedTaskList+0x1>
    1756:	80 81       	ld	r24, Z
    1758:	81 11       	cpse	r24, r1
    175a:	0c c0       	rjmp	.+24     	; 0x1774 <xTaskIncrementTick+0xcc>
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	9f ef       	ldi	r25, 0xFF	; 255
    1760:	dc 01       	movw	r26, r24
    1762:	80 93 17 2c 	sts	0x2C17, r24	; 0x802c17 <xNextTaskUnblockTime>
    1766:	90 93 18 2c 	sts	0x2C18, r25	; 0x802c18 <xNextTaskUnblockTime+0x1>
    176a:	a0 93 19 2c 	sts	0x2C19, r26	; 0x802c19 <xNextTaskUnblockTime+0x2>
    176e:	b0 93 1a 2c 	sts	0x2C1A, r27	; 0x802c1a <xNextTaskUnblockTime+0x3>
    1772:	44 c0       	rjmp	.+136    	; 0x17fc <xTaskIncrementTick+0x154>
    1774:	e0 91 3e 2c 	lds	r30, 0x2C3E	; 0x802c3e <pxDelayedTaskList>
    1778:	f0 91 3f 2c 	lds	r31, 0x2C3F	; 0x802c3f <pxDelayedTaskList+0x1>
    177c:	07 80       	ldd	r0, Z+7	; 0x07
    177e:	f0 85       	ldd	r31, Z+8	; 0x08
    1780:	e0 2d       	mov	r30, r0
    1782:	c0 85       	ldd	r28, Z+8	; 0x08
    1784:	d1 85       	ldd	r29, Z+9	; 0x09
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	9b 81       	ldd	r25, Y+3	; 0x03
    178a:	ac 81       	ldd	r26, Y+4	; 0x04
    178c:	bd 81       	ldd	r27, Y+5	; 0x05
    178e:	c8 16       	cp	r12, r24
    1790:	d9 06       	cpc	r13, r25
    1792:	ea 06       	cpc	r14, r26
    1794:	fb 06       	cpc	r15, r27
    1796:	48 f4       	brcc	.+18     	; 0x17aa <xTaskIncrementTick+0x102>
    1798:	80 93 17 2c 	sts	0x2C17, r24	; 0x802c17 <xNextTaskUnblockTime>
    179c:	90 93 18 2c 	sts	0x2C18, r25	; 0x802c18 <xNextTaskUnblockTime+0x1>
    17a0:	a0 93 19 2c 	sts	0x2C19, r26	; 0x802c19 <xNextTaskUnblockTime+0x2>
    17a4:	b0 93 1a 2c 	sts	0x2C1A, r27	; 0x802c1a <xNextTaskUnblockTime+0x3>
    17a8:	29 c0       	rjmp	.+82     	; 0x17fc <xTaskIncrementTick+0x154>
    17aa:	8e 01       	movw	r16, r28
    17ac:	0e 5f       	subi	r16, 0xFE	; 254
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	c8 01       	movw	r24, r16
    17b2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    17b6:	88 8d       	ldd	r24, Y+24	; 0x18
    17b8:	99 8d       	ldd	r25, Y+25	; 0x19
    17ba:	89 2b       	or	r24, r25
    17bc:	21 f0       	breq	.+8      	; 0x17c6 <xTaskIncrementTick+0x11e>
    17be:	ce 01       	movw	r24, r28
    17c0:	0e 96       	adiw	r24, 0x0e	; 14
    17c2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    17c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17c8:	90 91 20 2c 	lds	r25, 0x2C20	; 0x802c20 <uxTopReadyPriority>
    17cc:	98 17       	cp	r25, r24
    17ce:	10 f4       	brcc	.+4      	; 0x17d4 <xTaskIncrementTick+0x12c>
    17d0:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxTopReadyPriority>
    17d4:	a8 9e       	mul	r10, r24
    17d6:	c0 01       	movw	r24, r0
    17d8:	11 24       	eor	r1, r1
    17da:	b8 01       	movw	r22, r16
    17dc:	8a 5a       	subi	r24, 0xAA	; 170
    17de:	93 4d       	sbci	r25, 0xD3	; 211
    17e0:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    17e4:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    17e8:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    17ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    17f0:	98 17       	cp	r25, r24
    17f2:	08 f4       	brcc	.+2      	; 0x17f6 <xTaskIncrementTick+0x14e>
    17f4:	ac cf       	rjmp	.-168    	; 0x174e <xTaskIncrementTick+0xa6>
    17f6:	bb 24       	eor	r11, r11
    17f8:	b3 94       	inc	r11
    17fa:	a9 cf       	rjmp	.-174    	; 0x174e <xTaskIncrementTick+0xa6>
    17fc:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1800:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1804:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1806:	8b e0       	ldi	r24, 0x0B	; 11
    1808:	e8 9f       	mul	r30, r24
    180a:	f0 01       	movw	r30, r0
    180c:	11 24       	eor	r1, r1
    180e:	ea 5a       	subi	r30, 0xAA	; 170
    1810:	f3 4d       	sbci	r31, 0xD3	; 211
    1812:	80 81       	ld	r24, Z
    1814:	82 30       	cpi	r24, 0x02	; 2
    1816:	48 f0       	brcs	.+18     	; 0x182a <xTaskIncrementTick+0x182>
    1818:	bb 24       	eor	r11, r11
    181a:	b3 94       	inc	r11
    181c:	06 c0       	rjmp	.+12     	; 0x182a <xTaskIncrementTick+0x182>
    181e:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <uxPendedTicks>
    1822:	8f 5f       	subi	r24, 0xFF	; 255
    1824:	80 93 1e 2c 	sts	0x2C1E, r24	; 0x802c1e <uxPendedTicks>
    1828:	b1 2c       	mov	r11, r1
    182a:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <xYieldPending>
    182e:	88 23       	and	r24, r24
    1830:	11 f0       	breq	.+4      	; 0x1836 <xTaskIncrementTick+0x18e>
    1832:	bb 24       	eor	r11, r11
    1834:	b3 94       	inc	r11
    1836:	8b 2d       	mov	r24, r11
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	df 90       	pop	r13
    1846:	cf 90       	pop	r12
    1848:	bf 90       	pop	r11
    184a:	af 90       	pop	r10
    184c:	08 95       	ret

0000184e <xTaskResumeAll>:
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ef 92       	push	r14
    1854:	ff 92       	push	r15
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1862:	ff 93       	push	r31
    1864:	f8 7f       	andi	r31, 0xF8	; 248
    1866:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    186a:	80 91 14 2c 	lds	r24, 0x2C14	; 0x802c14 <uxSchedulerSuspended>
    186e:	81 50       	subi	r24, 0x01	; 1
    1870:	80 93 14 2c 	sts	0x2C14, r24	; 0x802c14 <uxSchedulerSuspended>
    1874:	80 91 14 2c 	lds	r24, 0x2C14	; 0x802c14 <uxSchedulerSuspended>
    1878:	81 11       	cpse	r24, r1
    187a:	5c c0       	rjmp	.+184    	; 0x1934 <xTaskResumeAll+0xe6>
    187c:	80 91 25 2c 	lds	r24, 0x2C25	; 0x802c25 <uxCurrentNumberOfTasks>
    1880:	81 11       	cpse	r24, r1
    1882:	2c c0       	rjmp	.+88     	; 0x18dc <xTaskResumeAll+0x8e>
    1884:	5a c0       	rjmp	.+180    	; 0x193a <xTaskResumeAll+0xec>
    1886:	d7 01       	movw	r26, r14
    1888:	17 96       	adiw	r26, 0x07	; 7
    188a:	ed 91       	ld	r30, X+
    188c:	fc 91       	ld	r31, X
    188e:	18 97       	sbiw	r26, 0x08	; 8
    1890:	c0 85       	ldd	r28, Z+8	; 0x08
    1892:	d1 85       	ldd	r29, Z+9	; 0x09
    1894:	ce 01       	movw	r24, r28
    1896:	0e 96       	adiw	r24, 0x0e	; 14
    1898:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    189c:	8e 01       	movw	r16, r28
    189e:	0e 5f       	subi	r16, 0xFE	; 254
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	c8 01       	movw	r24, r16
    18a4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    18a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18aa:	90 91 20 2c 	lds	r25, 0x2C20	; 0x802c20 <uxTopReadyPriority>
    18ae:	98 17       	cp	r25, r24
    18b0:	10 f4       	brcc	.+4      	; 0x18b6 <xTaskResumeAll+0x68>
    18b2:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxTopReadyPriority>
    18b6:	d8 9e       	mul	r13, r24
    18b8:	c0 01       	movw	r24, r0
    18ba:	11 24       	eor	r1, r1
    18bc:	b8 01       	movw	r22, r16
    18be:	8a 5a       	subi	r24, 0xAA	; 170
    18c0:	93 4d       	sbci	r25, 0xD3	; 211
    18c2:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    18c6:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    18ca:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    18ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    18d2:	98 17       	cp	r25, r24
    18d4:	88 f0       	brcs	.+34     	; 0x18f8 <xTaskResumeAll+0xaa>
    18d6:	c0 92 1d 2c 	sts	0x2C1D, r12	; 0x802c1d <xYieldPending>
    18da:	0e c0       	rjmp	.+28     	; 0x18f8 <xTaskResumeAll+0xaa>
    18dc:	c0 e0       	ldi	r28, 0x00	; 0
    18de:	d0 e0       	ldi	r29, 0x00	; 0
    18e0:	0f 2e       	mov	r0, r31
    18e2:	f1 e3       	ldi	r31, 0x31	; 49
    18e4:	ef 2e       	mov	r14, r31
    18e6:	fc e2       	ldi	r31, 0x2C	; 44
    18e8:	ff 2e       	mov	r15, r31
    18ea:	f0 2d       	mov	r31, r0
    18ec:	0f 2e       	mov	r0, r31
    18ee:	fb e0       	ldi	r31, 0x0B	; 11
    18f0:	df 2e       	mov	r13, r31
    18f2:	f0 2d       	mov	r31, r0
    18f4:	cc 24       	eor	r12, r12
    18f6:	c3 94       	inc	r12
    18f8:	f7 01       	movw	r30, r14
    18fa:	80 81       	ld	r24, Z
    18fc:	81 11       	cpse	r24, r1
    18fe:	c3 cf       	rjmp	.-122    	; 0x1886 <xTaskResumeAll+0x38>
    1900:	cd 2b       	or	r28, r29
    1902:	11 f0       	breq	.+4      	; 0x1908 <xTaskResumeAll+0xba>
    1904:	0e 94 41 09 	call	0x1282	; 0x1282 <prvResetNextTaskUnblockTime>
    1908:	c0 91 1e 2c 	lds	r28, 0x2C1E	; 0x802c1e <uxPendedTicks>
    190c:	cc 23       	and	r28, r28
    190e:	51 f0       	breq	.+20     	; 0x1924 <xTaskResumeAll+0xd6>
    1910:	d1 e0       	ldi	r29, 0x01	; 1
    1912:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <xTaskIncrementTick>
    1916:	81 11       	cpse	r24, r1
    1918:	d0 93 1d 2c 	sts	0x2C1D, r29	; 0x802c1d <xYieldPending>
    191c:	c1 50       	subi	r28, 0x01	; 1
    191e:	c9 f7       	brne	.-14     	; 0x1912 <xTaskResumeAll+0xc4>
    1920:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <uxPendedTicks>
    1924:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <xYieldPending>
    1928:	88 23       	and	r24, r24
    192a:	31 f0       	breq	.+12     	; 0x1938 <xTaskResumeAll+0xea>
    192c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	03 c0       	rjmp	.+6      	; 0x193a <xTaskResumeAll+0xec>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	01 c0       	rjmp	.+2      	; 0x193a <xTaskResumeAll+0xec>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	ff 91       	pop	r31
    193c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	cf 90       	pop	r12
    1950:	08 95       	ret

00001952 <vTaskDelay>:
    1952:	cf 92       	push	r12
    1954:	df 92       	push	r13
    1956:	ef 92       	push	r14
    1958:	ff 92       	push	r15
    195a:	6b 01       	movw	r12, r22
    195c:	7c 01       	movw	r14, r24
    195e:	67 2b       	or	r22, r23
    1960:	68 2b       	or	r22, r24
    1962:	69 2b       	or	r22, r25
    1964:	59 f0       	breq	.+22     	; 0x197c <vTaskDelay+0x2a>
    1966:	0e 94 3c 0b 	call	0x1678	; 0x1678 <vTaskSuspendAll>
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	c7 01       	movw	r24, r14
    196e:	b6 01       	movw	r22, r12
    1970:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <prvAddCurrentTaskToDelayedList>
    1974:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
    1978:	81 11       	cpse	r24, r1
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <vTaskDelay+0x2e>
    197c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
    1980:	ff 90       	pop	r15
    1982:	ef 90       	pop	r14
    1984:	df 90       	pop	r13
    1986:	cf 90       	pop	r12
    1988:	08 95       	ret

0000198a <vTaskSwitchContext>:
    198a:	80 91 14 2c 	lds	r24, 0x2C14	; 0x802c14 <uxSchedulerSuspended>
    198e:	88 23       	and	r24, r24
    1990:	21 f0       	breq	.+8      	; 0x199a <vTaskSwitchContext+0x10>
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	80 93 1d 2c 	sts	0x2C1D, r24	; 0x802c1d <xYieldPending>
    1998:	08 95       	ret
    199a:	10 92 1d 2c 	sts	0x2C1D, r1	; 0x802c1d <xYieldPending>
    199e:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    19a2:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    19a6:	03 8c       	ldd	r0, Z+27	; 0x1b
    19a8:	f4 8d       	ldd	r31, Z+28	; 0x1c
    19aa:	e0 2d       	mov	r30, r0
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	a2 81       	ldd	r26, Z+2	; 0x02
    19b2:	b3 81       	ldd	r27, Z+3	; 0x03
    19b4:	85 3a       	cpi	r24, 0xA5	; 165
    19b6:	95 4a       	sbci	r25, 0xA5	; 165
    19b8:	a5 4a       	sbci	r26, 0xA5	; 165
    19ba:	b5 4a       	sbci	r27, 0xA5	; 165
    19bc:	d9 f4       	brne	.+54     	; 0x19f4 <vTaskSwitchContext+0x6a>
    19be:	84 81       	ldd	r24, Z+4	; 0x04
    19c0:	95 81       	ldd	r25, Z+5	; 0x05
    19c2:	a6 81       	ldd	r26, Z+6	; 0x06
    19c4:	b7 81       	ldd	r27, Z+7	; 0x07
    19c6:	85 3a       	cpi	r24, 0xA5	; 165
    19c8:	95 4a       	sbci	r25, 0xA5	; 165
    19ca:	a5 4a       	sbci	r26, 0xA5	; 165
    19cc:	b5 4a       	sbci	r27, 0xA5	; 165
    19ce:	91 f4       	brne	.+36     	; 0x19f4 <vTaskSwitchContext+0x6a>
    19d0:	80 85       	ldd	r24, Z+8	; 0x08
    19d2:	91 85       	ldd	r25, Z+9	; 0x09
    19d4:	a2 85       	ldd	r26, Z+10	; 0x0a
    19d6:	b3 85       	ldd	r27, Z+11	; 0x0b
    19d8:	85 3a       	cpi	r24, 0xA5	; 165
    19da:	95 4a       	sbci	r25, 0xA5	; 165
    19dc:	a5 4a       	sbci	r26, 0xA5	; 165
    19de:	b5 4a       	sbci	r27, 0xA5	; 165
    19e0:	49 f4       	brne	.+18     	; 0x19f4 <vTaskSwitchContext+0x6a>
    19e2:	84 85       	ldd	r24, Z+12	; 0x0c
    19e4:	95 85       	ldd	r25, Z+13	; 0x0d
    19e6:	a6 85       	ldd	r26, Z+14	; 0x0e
    19e8:	b7 85       	ldd	r27, Z+15	; 0x0f
    19ea:	85 3a       	cpi	r24, 0xA5	; 165
    19ec:	95 4a       	sbci	r25, 0xA5	; 165
    19ee:	a5 4a       	sbci	r26, 0xA5	; 165
    19f0:	b5 4a       	sbci	r27, 0xA5	; 165
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <vTaskSwitchContext+0x82>
    19f4:	60 91 82 2c 	lds	r22, 0x2C82	; 0x802c82 <pxCurrentTCB>
    19f8:	70 91 83 2c 	lds	r23, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    19fc:	80 91 82 2c 	lds	r24, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1a00:	90 91 83 2c 	lds	r25, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1a04:	63 5e       	subi	r22, 0xE3	; 227
    1a06:	7f 4f       	sbci	r23, 0xFF	; 255
    1a08:	0e 94 28 02 	call	0x450	; 0x450 <vApplicationStackOverflowHook>
    1a0c:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxTopReadyPriority>
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	9b e0       	ldi	r25, 0x0B	; 11
    1a16:	89 9f       	mul	r24, r25
    1a18:	f0 01       	movw	r30, r0
    1a1a:	11 24       	eor	r1, r1
    1a1c:	ea 5a       	subi	r30, 0xAA	; 170
    1a1e:	f3 4d       	sbci	r31, 0xD3	; 211
    1a20:	90 81       	ld	r25, Z
    1a22:	91 11       	cpse	r25, r1
    1a24:	0e c0       	rjmp	.+28     	; 0x1a42 <vTaskSwitchContext+0xb8>
    1a26:	4b e0       	ldi	r20, 0x0B	; 11
    1a28:	81 50       	subi	r24, 0x01	; 1
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	42 9f       	mul	r20, r18
    1a30:	f0 01       	movw	r30, r0
    1a32:	43 9f       	mul	r20, r19
    1a34:	f0 0d       	add	r31, r0
    1a36:	11 24       	eor	r1, r1
    1a38:	ea 5a       	subi	r30, 0xAA	; 170
    1a3a:	f3 4d       	sbci	r31, 0xD3	; 211
    1a3c:	90 81       	ld	r25, Z
    1a3e:	99 23       	and	r25, r25
    1a40:	99 f3       	breq	.-26     	; 0x1a28 <vTaskSwitchContext+0x9e>
    1a42:	9b e0       	ldi	r25, 0x0B	; 11
    1a44:	92 9f       	mul	r25, r18
    1a46:	a0 01       	movw	r20, r0
    1a48:	93 9f       	mul	r25, r19
    1a4a:	50 0d       	add	r21, r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	da 01       	movw	r26, r20
    1a50:	aa 5a       	subi	r26, 0xAA	; 170
    1a52:	b3 4d       	sbci	r27, 0xD3	; 211
    1a54:	11 96       	adiw	r26, 0x01	; 1
    1a56:	ed 91       	ld	r30, X+
    1a58:	fc 91       	ld	r31, X
    1a5a:	12 97       	sbiw	r26, 0x02	; 2
    1a5c:	04 80       	ldd	r0, Z+4	; 0x04
    1a5e:	f5 81       	ldd	r31, Z+5	; 0x05
    1a60:	e0 2d       	mov	r30, r0
    1a62:	11 96       	adiw	r26, 0x01	; 1
    1a64:	ed 93       	st	X+, r30
    1a66:	fc 93       	st	X, r31
    1a68:	12 97       	sbiw	r26, 0x02	; 2
    1a6a:	47 5a       	subi	r20, 0xA7	; 167
    1a6c:	53 4d       	sbci	r21, 0xD3	; 211
    1a6e:	e4 17       	cp	r30, r20
    1a70:	f5 07       	cpc	r31, r21
    1a72:	29 f4       	brne	.+10     	; 0x1a7e <vTaskSwitchContext+0xf4>
    1a74:	44 81       	ldd	r20, Z+4	; 0x04
    1a76:	55 81       	ldd	r21, Z+5	; 0x05
    1a78:	fd 01       	movw	r30, r26
    1a7a:	41 83       	std	Z+1, r20	; 0x01
    1a7c:	52 83       	std	Z+2, r21	; 0x02
    1a7e:	9b e0       	ldi	r25, 0x0B	; 11
    1a80:	92 9f       	mul	r25, r18
    1a82:	f0 01       	movw	r30, r0
    1a84:	93 9f       	mul	r25, r19
    1a86:	f0 0d       	add	r31, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	ea 5a       	subi	r30, 0xAA	; 170
    1a8c:	f3 4d       	sbci	r31, 0xD3	; 211
    1a8e:	01 80       	ldd	r0, Z+1	; 0x01
    1a90:	f2 81       	ldd	r31, Z+2	; 0x02
    1a92:	e0 2d       	mov	r30, r0
    1a94:	20 85       	ldd	r18, Z+8	; 0x08
    1a96:	31 85       	ldd	r19, Z+9	; 0x09
    1a98:	20 93 82 2c 	sts	0x2C82, r18	; 0x802c82 <pxCurrentTCB>
    1a9c:	30 93 83 2c 	sts	0x2C83, r19	; 0x802c83 <pxCurrentTCB+0x1>
    1aa0:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxTopReadyPriority>
    1aa4:	08 95       	ret

00001aa6 <vTaskPlaceOnEventList>:
    1aa6:	cf 92       	push	r12
    1aa8:	df 92       	push	r13
    1aaa:	ef 92       	push	r14
    1aac:	ff 92       	push	r15
    1aae:	6a 01       	movw	r12, r20
    1ab0:	7b 01       	movw	r14, r22
    1ab2:	60 91 82 2c 	lds	r22, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1ab6:	70 91 83 2c 	lds	r23, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1aba:	62 5f       	subi	r22, 0xF2	; 242
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255
    1abe:	0e 94 25 04 	call	0x84a	; 0x84a <vListInsert>
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	c7 01       	movw	r24, r14
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <prvAddCurrentTaskToDelayedList>
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	08 95       	ret

00001ad6 <vTaskPlaceOnUnorderedEventList>:
    1ad6:	cf 92       	push	r12
    1ad8:	df 92       	push	r13
    1ada:	ef 92       	push	r14
    1adc:	ff 92       	push	r15
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	68 01       	movw	r12, r16
    1ae4:	79 01       	movw	r14, r18
    1ae6:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1aea:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1aee:	70 68       	ori	r23, 0x80	; 128
    1af0:	46 87       	std	Z+14, r20	; 0x0e
    1af2:	57 87       	std	Z+15, r21	; 0x0f
    1af4:	60 8b       	std	Z+16, r22	; 0x10
    1af6:	71 8b       	std	Z+17, r23	; 0x11
    1af8:	60 91 82 2c 	lds	r22, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1afc:	70 91 83 2c 	lds	r23, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1b00:	62 5f       	subi	r22, 0xF2	; 242
    1b02:	7f 4f       	sbci	r23, 0xFF	; 255
    1b04:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	c7 01       	movw	r24, r14
    1b0c:	b6 01       	movw	r22, r12
    1b0e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <prvAddCurrentTaskToDelayedList>
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	08 95       	ret

00001b20 <vTaskPlaceOnEventListRestricted>:
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	cf 93       	push	r28
    1b2a:	6a 01       	movw	r12, r20
    1b2c:	7b 01       	movw	r14, r22
    1b2e:	c2 2f       	mov	r28, r18
    1b30:	60 91 82 2c 	lds	r22, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1b34:	70 91 83 2c 	lds	r23, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1b38:	62 5f       	subi	r22, 0xF2	; 242
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    1b40:	cc 23       	and	r28, r28
    1b42:	21 f0       	breq	.+8      	; 0x1b4c <vTaskPlaceOnEventListRestricted+0x2c>
    1b44:	cc 24       	eor	r12, r12
    1b46:	ca 94       	dec	r12
    1b48:	dc 2c       	mov	r13, r12
    1b4a:	76 01       	movw	r14, r12
    1b4c:	4c 2f       	mov	r20, r28
    1b4e:	c7 01       	movw	r24, r14
    1b50:	b6 01       	movw	r22, r12
    1b52:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <prvAddCurrentTaskToDelayedList>
    1b56:	cf 91       	pop	r28
    1b58:	ff 90       	pop	r15
    1b5a:	ef 90       	pop	r14
    1b5c:	df 90       	pop	r13
    1b5e:	cf 90       	pop	r12
    1b60:	08 95       	ret

00001b62 <xTaskRemoveFromEventList>:
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	17 96       	adiw	r26, 0x07	; 7
    1b6e:	ed 91       	ld	r30, X+
    1b70:	fc 91       	ld	r31, X
    1b72:	18 97       	sbiw	r26, 0x08	; 8
    1b74:	c0 85       	ldd	r28, Z+8	; 0x08
    1b76:	d1 85       	ldd	r29, Z+9	; 0x09
    1b78:	8e 01       	movw	r16, r28
    1b7a:	02 5f       	subi	r16, 0xF2	; 242
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	c8 01       	movw	r24, r16
    1b80:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    1b84:	80 91 14 2c 	lds	r24, 0x2C14	; 0x802c14 <uxSchedulerSuspended>
    1b88:	81 11       	cpse	r24, r1
    1b8a:	16 c0       	rjmp	.+44     	; 0x1bb8 <xTaskRemoveFromEventList+0x56>
    1b8c:	0c 50       	subi	r16, 0x0C	; 12
    1b8e:	11 09       	sbc	r17, r1
    1b90:	c8 01       	movw	r24, r16
    1b92:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    1b96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b98:	90 91 20 2c 	lds	r25, 0x2C20	; 0x802c20 <uxTopReadyPriority>
    1b9c:	98 17       	cp	r25, r24
    1b9e:	10 f4       	brcc	.+4      	; 0x1ba4 <xTaskRemoveFromEventList+0x42>
    1ba0:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxTopReadyPriority>
    1ba4:	bb e0       	ldi	r27, 0x0B	; 11
    1ba6:	8b 9f       	mul	r24, r27
    1ba8:	c0 01       	movw	r24, r0
    1baa:	11 24       	eor	r1, r1
    1bac:	b8 01       	movw	r22, r16
    1bae:	8a 5a       	subi	r24, 0xAA	; 170
    1bb0:	93 4d       	sbci	r25, 0xD3	; 211
    1bb2:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    1bb6:	05 c0       	rjmp	.+10     	; 0x1bc2 <xTaskRemoveFromEventList+0x60>
    1bb8:	b8 01       	movw	r22, r16
    1bba:	81 e3       	ldi	r24, 0x31	; 49
    1bbc:	9c e2       	ldi	r25, 0x2C	; 44
    1bbe:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    1bc2:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1bc6:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1bca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bce:	89 17       	cp	r24, r25
    1bd0:	20 f4       	brcc	.+8      	; 0x1bda <xTaskRemoveFromEventList+0x78>
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	80 93 1d 2c 	sts	0x2C1D, r24	; 0x802c1d <xYieldPending>
    1bd8:	01 c0       	rjmp	.+2      	; 0x1bdc <xTaskRemoveFromEventList+0x7a>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	08 95       	ret

00001be6 <vTaskRemoveFromUnorderedEventList>:
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	70 68       	ori	r23, 0x80	; 128
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	40 83       	st	Z, r20
    1bf4:	51 83       	std	Z+1, r21	; 0x01
    1bf6:	62 83       	std	Z+2, r22	; 0x02
    1bf8:	73 83       	std	Z+3, r23	; 0x03
    1bfa:	c0 85       	ldd	r28, Z+8	; 0x08
    1bfc:	d1 85       	ldd	r29, Z+9	; 0x09
    1bfe:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    1c02:	8e 01       	movw	r16, r28
    1c04:	0e 5f       	subi	r16, 0xFE	; 254
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	c8 01       	movw	r24, r16
    1c0a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    1c0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c10:	90 91 20 2c 	lds	r25, 0x2C20	; 0x802c20 <uxTopReadyPriority>
    1c14:	98 17       	cp	r25, r24
    1c16:	10 f4       	brcc	.+4      	; 0x1c1c <vTaskRemoveFromUnorderedEventList+0x36>
    1c18:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxTopReadyPriority>
    1c1c:	fb e0       	ldi	r31, 0x0B	; 11
    1c1e:	8f 9f       	mul	r24, r31
    1c20:	c0 01       	movw	r24, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	b8 01       	movw	r22, r16
    1c26:	8a 5a       	subi	r24, 0xAA	; 170
    1c28:	93 4d       	sbci	r25, 0xD3	; 211
    1c2a:	0e 94 04 04 	call	0x808	; 0x808 <vListInsertEnd>
    1c2e:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1c32:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1c36:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c38:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c3a:	89 17       	cp	r24, r25
    1c3c:	18 f4       	brcc	.+6      	; 0x1c44 <vTaskRemoveFromUnorderedEventList+0x5e>
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	80 93 1d 2c 	sts	0x2C1D, r24	; 0x802c1d <xYieldPending>
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	08 95       	ret

00001c4e <vTaskInternalSetTimeOutState>:
    1c4e:	20 91 1c 2c 	lds	r18, 0x2C1C	; 0x802c1c <xNumOfOverflows>
    1c52:	fc 01       	movw	r30, r24
    1c54:	20 83       	st	Z, r18
    1c56:	40 91 21 2c 	lds	r20, 0x2C21	; 0x802c21 <xTickCount>
    1c5a:	50 91 22 2c 	lds	r21, 0x2C22	; 0x802c22 <xTickCount+0x1>
    1c5e:	60 91 23 2c 	lds	r22, 0x2C23	; 0x802c23 <xTickCount+0x2>
    1c62:	70 91 24 2c 	lds	r23, 0x2C24	; 0x802c24 <xTickCount+0x3>
    1c66:	41 83       	std	Z+1, r20	; 0x01
    1c68:	52 83       	std	Z+2, r21	; 0x02
    1c6a:	63 83       	std	Z+3, r22	; 0x03
    1c6c:	74 83       	std	Z+4, r23	; 0x04
    1c6e:	08 95       	ret

00001c70 <xTaskCheckForTimeOut>:
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	db 01       	movw	r26, r22
    1c82:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c86:	ff 93       	push	r31
    1c88:	f8 7f       	andi	r31, 0xF8	; 248
    1c8a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c8e:	40 91 21 2c 	lds	r20, 0x2C21	; 0x802c21 <xTickCount>
    1c92:	50 91 22 2c 	lds	r21, 0x2C22	; 0x802c22 <xTickCount+0x1>
    1c96:	60 91 23 2c 	lds	r22, 0x2C23	; 0x802c23 <xTickCount+0x2>
    1c9a:	70 91 24 2c 	lds	r23, 0x2C24	; 0x802c24 <xTickCount+0x3>
    1c9e:	0d 91       	ld	r16, X+
    1ca0:	1d 91       	ld	r17, X+
    1ca2:	2d 91       	ld	r18, X+
    1ca4:	3c 91       	ld	r19, X
    1ca6:	13 97       	sbiw	r26, 0x03	; 3
    1ca8:	0f 3f       	cpi	r16, 0xFF	; 255
    1caa:	cf ef       	ldi	r28, 0xFF	; 255
    1cac:	1c 07       	cpc	r17, r28
    1cae:	2c 07       	cpc	r18, r28
    1cb0:	3c 07       	cpc	r19, r28
    1cb2:	69 f1       	breq	.+90     	; 0x1d0e <xTaskCheckForTimeOut+0x9e>
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	c1 80       	ldd	r12, Z+1	; 0x01
    1cb8:	d2 80       	ldd	r13, Z+2	; 0x02
    1cba:	e3 80       	ldd	r14, Z+3	; 0x03
    1cbc:	f4 80       	ldd	r15, Z+4	; 0x04
    1cbe:	e0 91 1c 2c 	lds	r30, 0x2C1C	; 0x802c1c <xNumOfOverflows>
    1cc2:	ec 01       	movw	r28, r24
    1cc4:	f8 81       	ld	r31, Y
    1cc6:	fe 17       	cp	r31, r30
    1cc8:	29 f0       	breq	.+10     	; 0x1cd4 <xTaskCheckForTimeOut+0x64>
    1cca:	4c 15       	cp	r20, r12
    1ccc:	5d 05       	cpc	r21, r13
    1cce:	6e 05       	cpc	r22, r14
    1cd0:	7f 05       	cpc	r23, r15
    1cd2:	f8 f4       	brcc	.+62     	; 0x1d12 <xTaskCheckForTimeOut+0xa2>
    1cd4:	4c 19       	sub	r20, r12
    1cd6:	5d 09       	sbc	r21, r13
    1cd8:	6e 09       	sbc	r22, r14
    1cda:	7f 09       	sbc	r23, r15
    1cdc:	40 17       	cp	r20, r16
    1cde:	51 07       	cpc	r21, r17
    1ce0:	62 07       	cpc	r22, r18
    1ce2:	73 07       	cpc	r23, r19
    1ce4:	68 f4       	brcc	.+26     	; 0x1d00 <xTaskCheckForTimeOut+0x90>
    1ce6:	fd 01       	movw	r30, r26
    1ce8:	04 1b       	sub	r16, r20
    1cea:	15 0b       	sbc	r17, r21
    1cec:	26 0b       	sbc	r18, r22
    1cee:	37 0b       	sbc	r19, r23
    1cf0:	00 83       	st	Z, r16
    1cf2:	11 83       	std	Z+1, r17	; 0x01
    1cf4:	22 83       	std	Z+2, r18	; 0x02
    1cf6:	33 83       	std	Z+3, r19	; 0x03
    1cf8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <vTaskInternalSetTimeOutState>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	0a c0       	rjmp	.+20     	; 0x1d14 <xTaskCheckForTimeOut+0xa4>
    1d00:	1d 92       	st	X+, r1
    1d02:	1d 92       	st	X+, r1
    1d04:	1d 92       	st	X+, r1
    1d06:	1c 92       	st	X, r1
    1d08:	13 97       	sbiw	r26, 0x03	; 3
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	03 c0       	rjmp	.+6      	; 0x1d14 <xTaskCheckForTimeOut+0xa4>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	01 c0       	rjmp	.+2      	; 0x1d14 <xTaskCheckForTimeOut+0xa4>
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	ff 91       	pop	r31
    1d16:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	ff 90       	pop	r15
    1d24:	ef 90       	pop	r14
    1d26:	df 90       	pop	r13
    1d28:	cf 90       	pop	r12
    1d2a:	08 95       	ret

00001d2c <vTaskMissedYield>:
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	80 93 1d 2c 	sts	0x2C1D, r24	; 0x802c1d <xYieldPending>
    1d32:	08 95       	ret

00001d34 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1d34:	80 91 1f 2c 	lds	r24, 0x2C1F	; 0x802c1f <xSchedulerRunning>
    1d38:	88 23       	and	r24, r24
    1d3a:	31 f0       	breq	.+12     	; 0x1d48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1d3c:	80 91 14 2c 	lds	r24, 0x2C14	; 0x802c14 <uxSchedulerSuspended>
    1d40:	88 23       	and	r24, r24
    1d42:	21 f0       	breq	.+8      	; 0x1d4c <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    1d4e:	08 95       	ret

00001d50 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1d50:	cf 92       	push	r12
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1d58:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1d5c:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1d60:	66 85       	ldd	r22, Z+14	; 0x0e
    1d62:	77 85       	ldd	r23, Z+15	; 0x0f
    1d64:	80 89       	ldd	r24, Z+16	; 0x10
    1d66:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d68:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1d6c:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1d70:	a0 91 82 2c 	lds	r26, 0x2C82	; 0x802c82 <pxCurrentTCB>
    1d74:	b0 91 83 2c 	lds	r27, 0x2C83	; 0x802c83 <pxCurrentTCB+0x1>
    1d78:	5a 96       	adiw	r26, 0x1a	; 26
    1d7a:	2c 91       	ld	r18, X
    1d7c:	c1 2c       	mov	r12, r1
    1d7e:	d1 2c       	mov	r13, r1
    1d80:	76 01       	movw	r14, r12
    1d82:	68 94       	set
    1d84:	c2 f8       	bld	r12, 2
    1d86:	c2 1a       	sub	r12, r18
    1d88:	d1 08       	sbc	r13, r1
    1d8a:	e1 08       	sbc	r14, r1
    1d8c:	f1 08       	sbc	r15, r1
    1d8e:	c6 86       	std	Z+14, r12	; 0x0e
    1d90:	d7 86       	std	Z+15, r13	; 0x0f
    1d92:	e0 8a       	std	Z+16, r14	; 0x10
    1d94:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	df 90       	pop	r13
    1d9c:	cf 90       	pop	r12
    1d9e:	08 95       	ret

00001da0 <prvInsertTimerInActiveList>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1da0:	cf 92       	push	r12
    1da2:	df 92       	push	r13
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	fc 01       	movw	r30, r24
    1dae:	42 83       	std	Z+2, r20	; 0x02
    1db0:	53 83       	std	Z+3, r21	; 0x03
    1db2:	64 83       	std	Z+4, r22	; 0x04
    1db4:	75 83       	std	Z+5, r23	; 0x05
    1db6:	82 87       	std	Z+10, r24	; 0x0a
    1db8:	93 87       	std	Z+11, r25	; 0x0b
    1dba:	04 17       	cp	r16, r20
    1dbc:	15 07       	cpc	r17, r21
    1dbe:	26 07       	cpc	r18, r22
    1dc0:	37 07       	cpc	r19, r23
    1dc2:	c0 f0       	brcs	.+48     	; 0x1df4 <prvInsertTimerInActiveList+0x54>
    1dc4:	0c 19       	sub	r16, r12
    1dc6:	1d 09       	sbc	r17, r13
    1dc8:	2e 09       	sbc	r18, r14
    1dca:	3f 09       	sbc	r19, r15
    1dcc:	86 85       	ldd	r24, Z+14	; 0x0e
    1dce:	97 85       	ldd	r25, Z+15	; 0x0f
    1dd0:	a0 89       	ldd	r26, Z+16	; 0x10
    1dd2:	b1 89       	ldd	r27, Z+17	; 0x11
    1dd4:	08 17       	cp	r16, r24
    1dd6:	19 07       	cpc	r17, r25
    1dd8:	2a 07       	cpc	r18, r26
    1dda:	3b 07       	cpc	r19, r27
    1ddc:	00 f5       	brcc	.+64     	; 0x1e1e <prvInsertTimerInActiveList+0x7e>
    1dde:	bf 01       	movw	r22, r30
    1de0:	6e 5f       	subi	r22, 0xFE	; 254
    1de2:	7f 4f       	sbci	r23, 0xFF	; 255
    1de4:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxOverflowTimerList>
    1de8:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxOverflowTimerList+0x1>
    1dec:	0e 94 25 04 	call	0x84a	; 0x84a <vListInsert>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	18 c0       	rjmp	.+48     	; 0x1e24 <prvInsertTimerInActiveList+0x84>
    1df4:	0c 15       	cp	r16, r12
    1df6:	1d 05       	cpc	r17, r13
    1df8:	2e 05       	cpc	r18, r14
    1dfa:	3f 05       	cpc	r19, r15
    1dfc:	28 f4       	brcc	.+10     	; 0x1e08 <prvInsertTimerInActiveList+0x68>
    1dfe:	4c 15       	cp	r20, r12
    1e00:	5d 05       	cpc	r21, r13
    1e02:	6e 05       	cpc	r22, r14
    1e04:	7f 05       	cpc	r23, r15
    1e06:	68 f4       	brcc	.+26     	; 0x1e22 <prvInsertTimerInActiveList+0x82>
    1e08:	bf 01       	movw	r22, r30
    1e0a:	6e 5f       	subi	r22, 0xFE	; 254
    1e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0e:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxCurrentTimerList>
    1e12:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxCurrentTimerList+0x1>
    1e16:	0e 94 25 04 	call	0x84a	; 0x84a <vListInsert>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	03 c0       	rjmp	.+6      	; 0x1e24 <prvInsertTimerInActiveList+0x84>
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <prvInsertTimerInActiveList+0x84>
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	df 90       	pop	r13
    1e2e:	cf 90       	pop	r12
    1e30:	08 95       	ret

00001e32 <prvCheckForValidListAndQueue>:
    1e32:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e36:	ff 93       	push	r31
    1e38:	f8 7f       	andi	r31, 0xF8	; 248
    1e3a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e3e:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <xTimerQueue>
    1e42:	90 91 8b 2c 	lds	r25, 0x2C8B	; 0x802c8b <xTimerQueue+0x1>
    1e46:	89 2b       	or	r24, r25
    1e48:	e9 f4       	brne	.+58     	; 0x1e84 <prvCheckForValidListAndQueue+0x52>
    1e4a:	8b e9       	ldi	r24, 0x9B	; 155
    1e4c:	9c e2       	ldi	r25, 0x2C	; 44
    1e4e:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
    1e52:	80 e9       	ldi	r24, 0x90	; 144
    1e54:	9c e2       	ldi	r25, 0x2C	; 44
    1e56:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInitialise>
    1e5a:	8b e9       	ldi	r24, 0x9B	; 155
    1e5c:	9c e2       	ldi	r25, 0x2C	; 44
    1e5e:	80 93 8e 2c 	sts	0x2C8E, r24	; 0x802c8e <pxCurrentTimerList>
    1e62:	90 93 8f 2c 	sts	0x2C8F, r25	; 0x802c8f <pxCurrentTimerList+0x1>
    1e66:	80 e9       	ldi	r24, 0x90	; 144
    1e68:	9c e2       	ldi	r25, 0x2C	; 44
    1e6a:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <pxOverflowTimerList>
    1e6e:	90 93 8d 2c 	sts	0x2C8D, r25	; 0x802c8d <pxOverflowTimerList+0x1>
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	69 e0       	ldi	r22, 0x09	; 9
    1e76:	85 e0       	ldi	r24, 0x05	; 5
    1e78:	0e 94 52 07 	call	0xea4	; 0xea4 <xQueueGenericCreate>
    1e7c:	80 93 8a 2c 	sts	0x2C8A, r24	; 0x802c8a <xTimerQueue>
    1e80:	90 93 8b 2c 	sts	0x2C8B, r25	; 0x802c8b <xTimerQueue+0x1>
    1e84:	ff 91       	pop	r31
    1e86:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e8a:	08 95       	ret

00001e8c <xTimerCreateTimerTask>:
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <prvCheckForValidListAndQueue>
    1e96:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <xTimerQueue>
    1e9a:	90 91 8b 2c 	lds	r25, 0x2C8B	; 0x802c8b <xTimerQueue+0x1>
    1e9e:	89 2b       	or	r24, r25
    1ea0:	91 f0       	breq	.+36     	; 0x1ec6 <xTimerCreateTimerTask+0x3a>
    1ea2:	0f 2e       	mov	r0, r31
    1ea4:	f8 e8       	ldi	r31, 0x88	; 136
    1ea6:	ef 2e       	mov	r14, r31
    1ea8:	fc e2       	ldi	r31, 0x2C	; 44
    1eaa:	ff 2e       	mov	r15, r31
    1eac:	f0 2d       	mov	r31, r0
    1eae:	03 e0       	ldi	r16, 0x03	; 3
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	48 ec       	ldi	r20, 0xC8	; 200
    1eb6:	50 e0       	ldi	r21, 0x00	; 0
    1eb8:	65 e0       	ldi	r22, 0x05	; 5
    1eba:	70 e2       	ldi	r23, 0x20	; 32
    1ebc:	89 e5       	ldi	r24, 0x59	; 89
    1ebe:	90 e1       	ldi	r25, 0x10	; 16
    1ec0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <xTaskCreate>
    1ec4:	01 c0       	rjmp	.+2      	; 0x1ec8 <xTimerCreateTimerTask+0x3c>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	08 95       	ret

00001ed0 <xTimerGenericCommand>:
    1ed0:	8f 92       	push	r8
    1ed2:	9f 92       	push	r9
    1ed4:	af 92       	push	r10
    1ed6:	bf 92       	push	r11
    1ed8:	cf 92       	push	r12
    1eda:	df 92       	push	r13
    1edc:	ef 92       	push	r14
    1ede:	ff 92       	push	r15
    1ee0:	0f 93       	push	r16
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	29 97       	sbiw	r28, 0x09	; 9
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	e0 91 8a 2c 	lds	r30, 0x2C8A	; 0x802c8a <xTimerQueue>
    1ef6:	f0 91 8b 2c 	lds	r31, 0x2C8B	; 0x802c8b <xTimerQueue+0x1>
    1efa:	30 97       	sbiw	r30, 0x00	; 0
    1efc:	89 f1       	breq	.+98     	; 0x1f60 <xTimerGenericCommand+0x90>
    1efe:	69 83       	std	Y+1, r22	; 0x01
    1f00:	2a 83       	std	Y+2, r18	; 0x02
    1f02:	3b 83       	std	Y+3, r19	; 0x03
    1f04:	4c 83       	std	Y+4, r20	; 0x04
    1f06:	5d 83       	std	Y+5, r21	; 0x05
    1f08:	8e 83       	std	Y+6, r24	; 0x06
    1f0a:	9f 83       	std	Y+7, r25	; 0x07
    1f0c:	66 30       	cpi	r22, 0x06	; 6
    1f0e:	fc f4       	brge	.+62     	; 0x1f4e <xTimerGenericCommand+0x7e>
    1f10:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <xTaskGetSchedulerState>
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	69 f4       	brne	.+26     	; 0x1f32 <xTimerGenericCommand+0x62>
    1f18:	00 e0       	ldi	r16, 0x00	; 0
    1f1a:	a7 01       	movw	r20, r14
    1f1c:	96 01       	movw	r18, r12
    1f1e:	be 01       	movw	r22, r28
    1f20:	6f 5f       	subi	r22, 0xFF	; 255
    1f22:	7f 4f       	sbci	r23, 0xFF	; 255
    1f24:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <xTimerQueue>
    1f28:	90 91 8b 2c 	lds	r25, 0x2C8B	; 0x802c8b <xTimerQueue+0x1>
    1f2c:	0e 94 83 07 	call	0xf06	; 0xf06 <xQueueGenericSend>
    1f30:	18 c0       	rjmp	.+48     	; 0x1f62 <xTimerGenericCommand+0x92>
    1f32:	00 e0       	ldi	r16, 0x00	; 0
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	a9 01       	movw	r20, r18
    1f3a:	be 01       	movw	r22, r28
    1f3c:	6f 5f       	subi	r22, 0xFF	; 255
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <xTimerQueue>
    1f44:	90 91 8b 2c 	lds	r25, 0x2C8B	; 0x802c8b <xTimerQueue+0x1>
    1f48:	0e 94 83 07 	call	0xf06	; 0xf06 <xQueueGenericSend>
    1f4c:	0a c0       	rjmp	.+20     	; 0x1f62 <xTimerGenericCommand+0x92>
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	a8 01       	movw	r20, r16
    1f52:	be 01       	movw	r22, r28
    1f54:	6f 5f       	subi	r22, 0xFF	; 255
    1f56:	7f 4f       	sbci	r23, 0xFF	; 255
    1f58:	cf 01       	movw	r24, r30
    1f5a:	0e 94 29 08 	call	0x1052	; 0x1052 <xQueueGenericSendFromISR>
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <xTimerGenericCommand+0x92>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	29 96       	adiw	r28, 0x09	; 9
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	df 90       	pop	r13
    1f76:	cf 90       	pop	r12
    1f78:	bf 90       	pop	r11
    1f7a:	af 90       	pop	r10
    1f7c:	9f 90       	pop	r9
    1f7e:	8f 90       	pop	r8
    1f80:	08 95       	ret

00001f82 <prvSampleTimeNow>:
    1f82:	2f 92       	push	r2
    1f84:	3f 92       	push	r3
    1f86:	4f 92       	push	r4
    1f88:	5f 92       	push	r5
    1f8a:	6f 92       	push	r6
    1f8c:	7f 92       	push	r7
    1f8e:	8f 92       	push	r8
    1f90:	9f 92       	push	r9
    1f92:	af 92       	push	r10
    1f94:	bf 92       	push	r11
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	1c 01       	movw	r2, r24
    1fa8:	0e 94 42 0b 	call	0x1684	; 0x1684 <xTaskGetTickCount>
    1fac:	2b 01       	movw	r4, r22
    1fae:	3c 01       	movw	r6, r24
    1fb0:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <xLastTime.4745>
    1fb4:	90 91 85 2c 	lds	r25, 0x2C85	; 0x802c85 <xLastTime.4745+0x1>
    1fb8:	a0 91 86 2c 	lds	r26, 0x2C86	; 0x802c86 <xLastTime.4745+0x2>
    1fbc:	b0 91 87 2c 	lds	r27, 0x2C87	; 0x802c87 <xLastTime.4745+0x3>
    1fc0:	48 16       	cp	r4, r24
    1fc2:	59 06       	cpc	r5, r25
    1fc4:	6a 06       	cpc	r6, r26
    1fc6:	7b 06       	cpc	r7, r27
    1fc8:	08 f0       	brcs	.+2      	; 0x1fcc <prvSampleTimeNow+0x4a>
    1fca:	54 c0       	rjmp	.+168    	; 0x2074 <prvSampleTimeNow+0xf2>
    1fcc:	3c c0       	rjmp	.+120    	; 0x2046 <prvSampleTimeNow+0xc4>
    1fce:	07 80       	ldd	r0, Z+7	; 0x07
    1fd0:	f0 85       	ldd	r31, Z+8	; 0x08
    1fd2:	e0 2d       	mov	r30, r0
    1fd4:	80 80       	ld	r8, Z
    1fd6:	91 80       	ldd	r9, Z+1	; 0x01
    1fd8:	a2 80       	ldd	r10, Z+2	; 0x02
    1fda:	b3 80       	ldd	r11, Z+3	; 0x03
    1fdc:	c0 85       	ldd	r28, Z+8	; 0x08
    1fde:	d1 85       	ldd	r29, Z+9	; 0x09
    1fe0:	8e 01       	movw	r16, r28
    1fe2:	0e 5f       	subi	r16, 0xFE	; 254
    1fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe6:	c8 01       	movw	r24, r16
    1fe8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    1fec:	ed 89       	ldd	r30, Y+21	; 0x15
    1fee:	fe 89       	ldd	r31, Y+22	; 0x16
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	19 95       	eicall
    1ff4:	8a 89       	ldd	r24, Y+18	; 0x12
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	31 f5       	brne	.+76     	; 0x2046 <prvSampleTimeNow+0xc4>
    1ffa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ffc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ffe:	a8 89       	ldd	r26, Y+16	; 0x10
    2000:	b9 89       	ldd	r27, Y+17	; 0x11
    2002:	88 0d       	add	r24, r8
    2004:	99 1d       	adc	r25, r9
    2006:	aa 1d       	adc	r26, r10
    2008:	bb 1d       	adc	r27, r11
    200a:	88 16       	cp	r8, r24
    200c:	99 06       	cpc	r9, r25
    200e:	aa 06       	cpc	r10, r26
    2010:	bb 06       	cpc	r11, r27
    2012:	70 f4       	brcc	.+28     	; 0x2030 <prvSampleTimeNow+0xae>
    2014:	8a 83       	std	Y+2, r24	; 0x02
    2016:	9b 83       	std	Y+3, r25	; 0x03
    2018:	ac 83       	std	Y+4, r26	; 0x04
    201a:	bd 83       	std	Y+5, r27	; 0x05
    201c:	ca 87       	std	Y+10, r28	; 0x0a
    201e:	db 87       	std	Y+11, r29	; 0x0b
    2020:	b8 01       	movw	r22, r16
    2022:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxCurrentTimerList>
    2026:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxCurrentTimerList+0x1>
    202a:	0e 94 25 04 	call	0x84a	; 0x84a <vListInsert>
    202e:	0b c0       	rjmp	.+22     	; 0x2046 <prvSampleTimeNow+0xc4>
    2030:	c1 2c       	mov	r12, r1
    2032:	d1 2c       	mov	r13, r1
    2034:	76 01       	movw	r14, r12
    2036:	00 e0       	ldi	r16, 0x00	; 0
    2038:	10 e0       	ldi	r17, 0x00	; 0
    203a:	a5 01       	movw	r20, r10
    203c:	94 01       	movw	r18, r8
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	ce 01       	movw	r24, r28
    2042:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <xTimerGenericCommand>
    2046:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTimerList>
    204a:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTimerList+0x1>
    204e:	80 81       	ld	r24, Z
    2050:	81 11       	cpse	r24, r1
    2052:	bd cf       	rjmp	.-134    	; 0x1fce <prvSampleTimeNow+0x4c>
    2054:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxOverflowTimerList>
    2058:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxOverflowTimerList+0x1>
    205c:	80 93 8e 2c 	sts	0x2C8E, r24	; 0x802c8e <pxCurrentTimerList>
    2060:	90 93 8f 2c 	sts	0x2C8F, r25	; 0x802c8f <pxCurrentTimerList+0x1>
    2064:	e0 93 8c 2c 	sts	0x2C8C, r30	; 0x802c8c <pxOverflowTimerList>
    2068:	f0 93 8d 2c 	sts	0x2C8D, r31	; 0x802c8d <pxOverflowTimerList+0x1>
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	f1 01       	movw	r30, r2
    2070:	80 83       	st	Z, r24
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <prvSampleTimeNow+0xf6>
    2074:	f1 01       	movw	r30, r2
    2076:	10 82       	st	Z, r1
    2078:	40 92 84 2c 	sts	0x2C84, r4	; 0x802c84 <xLastTime.4745>
    207c:	50 92 85 2c 	sts	0x2C85, r5	; 0x802c85 <xLastTime.4745+0x1>
    2080:	60 92 86 2c 	sts	0x2C86, r6	; 0x802c86 <xLastTime.4745+0x2>
    2084:	70 92 87 2c 	sts	0x2C87, r7	; 0x802c87 <xLastTime.4745+0x3>
    2088:	c3 01       	movw	r24, r6
    208a:	b2 01       	movw	r22, r4
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	ff 90       	pop	r15
    2096:	ef 90       	pop	r14
    2098:	df 90       	pop	r13
    209a:	cf 90       	pop	r12
    209c:	bf 90       	pop	r11
    209e:	af 90       	pop	r10
    20a0:	9f 90       	pop	r9
    20a2:	8f 90       	pop	r8
    20a4:	7f 90       	pop	r7
    20a6:	6f 90       	pop	r6
    20a8:	5f 90       	pop	r5
    20aa:	4f 90       	pop	r4
    20ac:	3f 90       	pop	r3
    20ae:	2f 90       	pop	r2
    20b0:	08 95       	ret

000020b2 <prvTimerTask>:
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	2e 97       	sbiw	r28, 0x0e	; 14
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	ce 01       	movw	r24, r28
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	1c 01       	movw	r2, r24
    20c6:	a8 2e       	mov	r10, r24
    20c8:	b3 2c       	mov	r11, r3
    20ca:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTimerList>
    20ce:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTimerList+0x1>
    20d2:	80 81       	ld	r24, Z
    20d4:	88 23       	and	r24, r24
    20d6:	09 f4       	brne	.+2      	; 0x20da <prvTimerTask+0x28>
    20d8:	03 c1       	rjmp	.+518    	; 0x22e0 <prvTimerTask+0x22e>
    20da:	07 80       	ldd	r0, Z+7	; 0x07
    20dc:	f0 85       	ldd	r31, Z+8	; 0x08
    20de:	e0 2d       	mov	r30, r0
    20e0:	40 80       	ld	r4, Z
    20e2:	51 80       	ldd	r5, Z+1	; 0x01
    20e4:	62 80       	ldd	r6, Z+2	; 0x02
    20e6:	73 80       	ldd	r7, Z+3	; 0x03
    20e8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <vTaskSuspendAll>
    20ec:	c1 01       	movw	r24, r2
    20ee:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <prvSampleTimeNow>
    20f2:	6b 87       	std	Y+11, r22	; 0x0b
    20f4:	7c 87       	std	Y+12, r23	; 0x0c
    20f6:	8d 87       	std	Y+13, r24	; 0x0d
    20f8:	9e 87       	std	Y+14, r25	; 0x0e
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	81 11       	cpse	r24, r1
    20fe:	5e c0       	rjmp	.+188    	; 0x21bc <prvTimerTask+0x10a>
    2100:	8b 85       	ldd	r24, Y+11	; 0x0b
    2102:	9c 85       	ldd	r25, Y+12	; 0x0c
    2104:	ad 85       	ldd	r26, Y+13	; 0x0d
    2106:	be 85       	ldd	r27, Y+14	; 0x0e
    2108:	84 15       	cp	r24, r4
    210a:	95 05       	cpc	r25, r5
    210c:	a6 05       	cpc	r26, r6
    210e:	b7 05       	cpc	r27, r7
    2110:	e8 f1       	brcs	.+122    	; 0x218c <prvTimerTask+0xda>
    2112:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
    2116:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTimerList>
    211a:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTimerList+0x1>
    211e:	07 80       	ldd	r0, Z+7	; 0x07
    2120:	f0 85       	ldd	r31, Z+8	; 0x08
    2122:	e0 2d       	mov	r30, r0
    2124:	80 84       	ldd	r8, Z+8	; 0x08
    2126:	91 84       	ldd	r9, Z+9	; 0x09
    2128:	c4 01       	movw	r24, r8
    212a:	02 96       	adiw	r24, 0x02	; 2
    212c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    2130:	d4 01       	movw	r26, r8
    2132:	52 96       	adiw	r26, 0x12	; 18
    2134:	8c 91       	ld	r24, X
    2136:	52 97       	sbiw	r26, 0x12	; 18
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	01 f5       	brne	.+64     	; 0x217c <prvTimerTask+0xca>
    213c:	1e 96       	adiw	r26, 0x0e	; 14
    213e:	4d 91       	ld	r20, X+
    2140:	5d 91       	ld	r21, X+
    2142:	6d 91       	ld	r22, X+
    2144:	7c 91       	ld	r23, X
    2146:	51 97       	sbiw	r26, 0x11	; 17
    2148:	44 0d       	add	r20, r4
    214a:	55 1d       	adc	r21, r5
    214c:	66 1d       	adc	r22, r6
    214e:	77 1d       	adc	r23, r7
    2150:	73 01       	movw	r14, r6
    2152:	62 01       	movw	r12, r4
    2154:	0b 85       	ldd	r16, Y+11	; 0x0b
    2156:	1c 85       	ldd	r17, Y+12	; 0x0c
    2158:	2d 85       	ldd	r18, Y+13	; 0x0d
    215a:	3e 85       	ldd	r19, Y+14	; 0x0e
    215c:	c4 01       	movw	r24, r8
    215e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <prvInsertTimerInActiveList>
    2162:	88 23       	and	r24, r24
    2164:	59 f0       	breq	.+22     	; 0x217c <prvTimerTask+0xca>
    2166:	c1 2c       	mov	r12, r1
    2168:	d1 2c       	mov	r13, r1
    216a:	76 01       	movw	r14, r12
    216c:	00 e0       	ldi	r16, 0x00	; 0
    216e:	10 e0       	ldi	r17, 0x00	; 0
    2170:	a3 01       	movw	r20, r6
    2172:	92 01       	movw	r18, r4
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	c4 01       	movw	r24, r8
    2178:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <xTimerGenericCommand>
    217c:	d4 01       	movw	r26, r8
    217e:	55 96       	adiw	r26, 0x15	; 21
    2180:	ed 91       	ld	r30, X+
    2182:	fc 91       	ld	r31, X
    2184:	56 97       	sbiw	r26, 0x16	; 22
    2186:	c4 01       	movw	r24, r8
    2188:	19 95       	eicall
    218a:	9c c0       	rjmp	.+312    	; 0x22c4 <prvTimerTask+0x212>
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	b3 01       	movw	r22, r6
    2190:	a2 01       	movw	r20, r4
    2192:	8b 85       	ldd	r24, Y+11	; 0x0b
    2194:	9c 85       	ldd	r25, Y+12	; 0x0c
    2196:	ad 85       	ldd	r26, Y+13	; 0x0d
    2198:	be 85       	ldd	r27, Y+14	; 0x0e
    219a:	48 1b       	sub	r20, r24
    219c:	59 0b       	sbc	r21, r25
    219e:	6a 0b       	sbc	r22, r26
    21a0:	7b 0b       	sbc	r23, r27
    21a2:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <xTimerQueue>
    21a6:	90 91 8b 2c 	lds	r25, 0x2C8B	; 0x802c8b <xTimerQueue+0x1>
    21aa:	0e 94 20 09 	call	0x1240	; 0x1240 <vQueueWaitForMessageRestricted>
    21ae:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
    21b2:	81 11       	cpse	r24, r1
    21b4:	87 c0       	rjmp	.+270    	; 0x22c4 <prvTimerTask+0x212>
    21b6:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vPortYield>
    21ba:	84 c0       	rjmp	.+264    	; 0x22c4 <prvTimerTask+0x212>
    21bc:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
    21c0:	81 c0       	rjmp	.+258    	; 0x22c4 <prvTimerTask+0x212>
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	88 23       	and	r24, r24
    21c6:	6c f4       	brge	.+26     	; 0x21e2 <prvTimerTask+0x130>
    21c8:	4e 81       	ldd	r20, Y+6	; 0x06
    21ca:	5f 81       	ldd	r21, Y+7	; 0x07
    21cc:	68 85       	ldd	r22, Y+8	; 0x08
    21ce:	79 85       	ldd	r23, Y+9	; 0x09
    21d0:	ea 81       	ldd	r30, Y+2	; 0x02
    21d2:	fb 81       	ldd	r31, Y+3	; 0x03
    21d4:	8c 81       	ldd	r24, Y+4	; 0x04
    21d6:	9d 81       	ldd	r25, Y+5	; 0x05
    21d8:	19 95       	eicall
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	88 23       	and	r24, r24
    21de:	0c f4       	brge	.+2      	; 0x21e2 <prvTimerTask+0x130>
    21e0:	71 c0       	rjmp	.+226    	; 0x22c4 <prvTimerTask+0x212>
    21e2:	8e 80       	ldd	r8, Y+6	; 0x06
    21e4:	9f 80       	ldd	r9, Y+7	; 0x07
    21e6:	d4 01       	movw	r26, r8
    21e8:	1c 96       	adiw	r26, 0x0c	; 12
    21ea:	8d 91       	ld	r24, X+
    21ec:	9c 91       	ld	r25, X
    21ee:	1d 97       	sbiw	r26, 0x0d	; 13
    21f0:	89 2b       	or	r24, r25
    21f2:	21 f0       	breq	.+8      	; 0x21fc <prvTimerTask+0x14a>
    21f4:	c4 01       	movw	r24, r8
    21f6:	02 96       	adiw	r24, 0x02	; 2
    21f8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <uxListRemove>
    21fc:	ce 01       	movw	r24, r28
    21fe:	0a 96       	adiw	r24, 0x0a	; 10
    2200:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <prvSampleTimeNow>
    2204:	8b 01       	movw	r16, r22
    2206:	9c 01       	movw	r18, r24
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	08 2e       	mov	r0, r24
    220c:	00 0c       	add	r0, r0
    220e:	99 0b       	sbc	r25, r25
    2210:	aa 0b       	sbc	r26, r26
    2212:	bb 0b       	sbc	r27, r27
    2214:	8a 30       	cpi	r24, 0x0A	; 10
    2216:	91 05       	cpc	r25, r1
    2218:	08 f0       	brcs	.+2      	; 0x221c <prvTimerTask+0x16a>
    221a:	54 c0       	rjmp	.+168    	; 0x22c4 <prvTimerTask+0x212>
    221c:	fc 01       	movw	r30, r24
    221e:	88 27       	eor	r24, r24
    2220:	e2 50       	subi	r30, 0x02	; 2
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	8f 4f       	sbci	r24, 0xFF	; 255
    2226:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__tablejump2__>
    222a:	ca 80       	ldd	r12, Y+2	; 0x02
    222c:	db 80       	ldd	r13, Y+3	; 0x03
    222e:	ec 80       	ldd	r14, Y+4	; 0x04
    2230:	fd 80       	ldd	r15, Y+5	; 0x05
    2232:	f4 01       	movw	r30, r8
    2234:	46 85       	ldd	r20, Z+14	; 0x0e
    2236:	57 85       	ldd	r21, Z+15	; 0x0f
    2238:	60 89       	ldd	r22, Z+16	; 0x10
    223a:	71 89       	ldd	r23, Z+17	; 0x11
    223c:	4c 0d       	add	r20, r12
    223e:	5d 1d       	adc	r21, r13
    2240:	6e 1d       	adc	r22, r14
    2242:	7f 1d       	adc	r23, r15
    2244:	c4 01       	movw	r24, r8
    2246:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <prvInsertTimerInActiveList>
    224a:	88 23       	and	r24, r24
    224c:	d9 f1       	breq	.+118    	; 0x22c4 <prvTimerTask+0x212>
    224e:	d4 01       	movw	r26, r8
    2250:	55 96       	adiw	r26, 0x15	; 21
    2252:	ed 91       	ld	r30, X+
    2254:	fc 91       	ld	r31, X
    2256:	56 97       	sbiw	r26, 0x16	; 22
    2258:	c4 01       	movw	r24, r8
    225a:	19 95       	eicall
    225c:	f4 01       	movw	r30, r8
    225e:	82 89       	ldd	r24, Z+18	; 0x12
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	81 f5       	brne	.+96     	; 0x22c4 <prvTimerTask+0x212>
    2264:	4a 81       	ldd	r20, Y+2	; 0x02
    2266:	5b 81       	ldd	r21, Y+3	; 0x03
    2268:	6c 81       	ldd	r22, Y+4	; 0x04
    226a:	7d 81       	ldd	r23, Y+5	; 0x05
    226c:	86 85       	ldd	r24, Z+14	; 0x0e
    226e:	97 85       	ldd	r25, Z+15	; 0x0f
    2270:	a0 89       	ldd	r26, Z+16	; 0x10
    2272:	b1 89       	ldd	r27, Z+17	; 0x11
    2274:	9a 01       	movw	r18, r20
    2276:	ab 01       	movw	r20, r22
    2278:	28 0f       	add	r18, r24
    227a:	39 1f       	adc	r19, r25
    227c:	4a 1f       	adc	r20, r26
    227e:	5b 1f       	adc	r21, r27
    2280:	c1 2c       	mov	r12, r1
    2282:	d1 2c       	mov	r13, r1
    2284:	76 01       	movw	r14, r12
    2286:	00 e0       	ldi	r16, 0x00	; 0
    2288:	10 e0       	ldi	r17, 0x00	; 0
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	c4 01       	movw	r24, r8
    228e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <xTimerGenericCommand>
    2292:	18 c0       	rjmp	.+48     	; 0x22c4 <prvTimerTask+0x212>
    2294:	4a 81       	ldd	r20, Y+2	; 0x02
    2296:	5b 81       	ldd	r21, Y+3	; 0x03
    2298:	6c 81       	ldd	r22, Y+4	; 0x04
    229a:	7d 81       	ldd	r23, Y+5	; 0x05
    229c:	d4 01       	movw	r26, r8
    229e:	1e 96       	adiw	r26, 0x0e	; 14
    22a0:	4d 93       	st	X+, r20
    22a2:	5d 93       	st	X+, r21
    22a4:	6d 93       	st	X+, r22
    22a6:	7c 93       	st	X, r23
    22a8:	51 97       	sbiw	r26, 0x11	; 17
    22aa:	40 0f       	add	r20, r16
    22ac:	51 1f       	adc	r21, r17
    22ae:	62 1f       	adc	r22, r18
    22b0:	73 1f       	adc	r23, r19
    22b2:	68 01       	movw	r12, r16
    22b4:	79 01       	movw	r14, r18
    22b6:	c4 01       	movw	r24, r8
    22b8:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <prvInsertTimerInActiveList>
    22bc:	03 c0       	rjmp	.+6      	; 0x22c4 <prvTimerTask+0x212>
    22be:	c4 01       	movw	r24, r8
    22c0:	0e 94 ee 03 	call	0x7dc	; 0x7dc <vPortFree>
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	a9 01       	movw	r20, r18
    22ca:	6a 2d       	mov	r22, r10
    22cc:	7b 2d       	mov	r23, r11
    22ce:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <xTimerQueue>
    22d2:	90 91 8b 2c 	lds	r25, 0x2C8B	; 0x802c8b <xTimerQueue+0x1>
    22d6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <xQueueReceive>
    22da:	81 11       	cpse	r24, r1
    22dc:	72 cf       	rjmp	.-284    	; 0x21c2 <prvTimerTask+0x110>
    22de:	f5 ce       	rjmp	.-534    	; 0x20ca <prvTimerTask+0x18>
    22e0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <vTaskSuspendAll>
    22e4:	c1 01       	movw	r24, r2
    22e6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <prvSampleTimeNow>
    22ea:	6b 87       	std	Y+11, r22	; 0x0b
    22ec:	7c 87       	std	Y+12, r23	; 0x0c
    22ee:	8d 87       	std	Y+13, r24	; 0x0d
    22f0:	9e 87       	std	Y+14, r25	; 0x0e
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	81 11       	cpse	r24, r1
    22f6:	62 cf       	rjmp	.-316    	; 0x21bc <prvTimerTask+0x10a>
    22f8:	e0 91 8c 2c 	lds	r30, 0x2C8C	; 0x802c8c <pxOverflowTimerList>
    22fc:	f0 91 8d 2c 	lds	r31, 0x2C8D	; 0x802c8d <pxOverflowTimerList+0x1>
    2300:	80 81       	ld	r24, Z
    2302:	21 e0       	ldi	r18, 0x01	; 1
    2304:	81 11       	cpse	r24, r1
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	41 2c       	mov	r4, r1
    230a:	51 2c       	mov	r5, r1
    230c:	32 01       	movw	r6, r4
    230e:	3f cf       	rjmp	.-386    	; 0x218e <prvTimerTask+0xdc>

00002310 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	29 97       	sbiw	r28, 0x09	; 9
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    2322:	ee ef       	ldi	r30, 0xFE	; 254
    2324:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    2326:	8a 83       	std	Y+2, r24	; 0x02
    2328:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    232a:	6c 83       	std	Y+4, r22	; 0x04
    232c:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    232e:	2e 83       	std	Y+6, r18	; 0x06
    2330:	3f 83       	std	Y+7, r19	; 0x07
    2332:	48 87       	std	Y+8, r20	; 0x08
    2334:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	a8 01       	movw	r20, r16
    233a:	be 01       	movw	r22, r28
    233c:	6f 5f       	subi	r22, 0xFF	; 255
    233e:	7f 4f       	sbci	r23, 0xFF	; 255
    2340:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <xTimerQueue>
    2344:	90 91 8b 2c 	lds	r25, 0x2C8B	; 0x802c8b <xTimerQueue+0x1>
    2348:	0e 94 29 08 	call	0x1052	; 0x1052 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    234c:	29 96       	adiw	r28, 0x09	; 9
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	08 95       	ret

0000235c <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    235c:	e0 e5       	ldi	r30, 0x50	; 80
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	81 60       	ori	r24, 0x01	; 1
    2364:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    2366:	81 81       	ldd	r24, Z+1	; 0x01
    2368:	80 ff       	sbrs	r24, 0
    236a:	fd cf       	rjmp	.-6      	; 0x2366 <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    2372:	8e e1       	ldi	r24, 0x1E	; 30
    2374:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    2380:	43 e0       	ldi	r20, 0x03	; 3
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	80 e4       	ldi	r24, 0x40	; 64
    2386:	0e 94 db 01 	call	0x3b6	; 0x3b6 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    238a:	e0 e5       	ldi	r30, 0x50	; 80
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	88 60       	ori	r24, 0x08	; 8
    2392:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    2394:	81 81       	ldd	r24, Z+1	; 0x01
    2396:	83 ff       	sbrs	r24, 3
    2398:	fd cf       	rjmp	.-6      	; 0x2394 <vInitClock+0x38>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    239a:	64 e0       	ldi	r22, 0x04	; 4
    239c:	80 ec       	ldi	r24, 0xC0	; 192
    239e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    23a2:	e0 e5       	ldi	r30, 0x50	; 80
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	80 61       	ori	r24, 0x10	; 16
    23aa:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    23b4:	e0 e5       	ldi	r30, 0x50	; 80
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	81 81       	ldd	r24, Z+1	; 0x01
    23ba:	84 ff       	sbrs	r24, 4
    23bc:	fd cf       	rjmp	.-6      	; 0x23b8 <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    23be:	84 e0       	ldi	r24, 0x04	; 4
    23c0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    23c4:	87 e0       	ldi	r24, 0x07	; 7
    23c6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <CLKSYS_Disable>
    23ca:	08 95       	ret

000023cc <vGUI>:
	return 0;
}

void vGUI(void *pvParameters) {
	(void) pvParameters;
	PORTF.DIRSET = PIN0_bm; /*LED1*/
    23cc:	e0 ea       	ldi	r30, 0xA0	; 160
    23ce:	f6 e0       	ldi	r31, 0x06	; 6
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUT = 0x01;
    23d4:	84 83       	std	Z+4, r24	; 0x04
	for(;;) {
		vDisplayClear();
		vDisplayWriteStringAtPos(0,0,"PI Calculator");
    23d6:	0f 2e       	mov	r0, r31
    23d8:	fd e0       	ldi	r31, 0x0D	; 13
    23da:	af 2e       	mov	r10, r31
    23dc:	f0 e2       	ldi	r31, 0x20	; 32
    23de:	bf 2e       	mov	r11, r31
    23e0:	f0 2d       	mov	r31, r0
		vDisplayWriteStringAtPos(1,0,"Philipp Eppler");
    23e2:	0f 2e       	mov	r0, r31
    23e4:	fb e1       	ldi	r31, 0x1B	; 27
    23e6:	cf 2e       	mov	r12, r31
    23e8:	f0 e2       	ldi	r31, 0x20	; 32
    23ea:	df 2e       	mov	r13, r31
    23ec:	f0 2d       	mov	r31, r0
    23ee:	ff 24       	eor	r15, r15
    23f0:	f3 94       	inc	r15
		vDisplayWriteStringAtPos(2,0,"Pi: 3.1415xxx");
    23f2:	0a e2       	ldi	r16, 0x2A	; 42
    23f4:	10 e2       	ldi	r17, 0x20	; 32
    23f6:	68 94       	set
    23f8:	77 24       	eor	r7, r7
    23fa:	71 f8       	bld	r7, 1
		vDisplayWriteStringAtPos(3,0,"Zeit: xxxxxxms");
    23fc:	c8 e3       	ldi	r28, 0x38	; 56
    23fe:	d0 e2       	ldi	r29, 0x20	; 32
    2400:	0f 2e       	mov	r0, r31
    2402:	f3 e0       	ldi	r31, 0x03	; 3
    2404:	ef 2e       	mov	r14, r31
    2406:	f0 2d       	mov	r31, r0
		
		PORTF.OUTTGL = 0x01;				
    2408:	0f 2e       	mov	r0, r31
    240a:	f0 ea       	ldi	r31, 0xA0	; 160
    240c:	8f 2e       	mov	r8, r31
    240e:	f6 e0       	ldi	r31, 0x06	; 6
    2410:	9f 2e       	mov	r9, r31
    2412:	f0 2d       	mov	r31, r0
void vGUI(void *pvParameters) {
	(void) pvParameters;
	PORTF.DIRSET = PIN0_bm; /*LED1*/
	PORTF.OUT = 0x01;
	for(;;) {
		vDisplayClear();
    2414:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <vDisplayClear>
		vDisplayWriteStringAtPos(0,0,"PI Calculator");
    2418:	bf 92       	push	r11
    241a:	af 92       	push	r10
    241c:	1f 92       	push	r1
    241e:	1f 92       	push	r1
    2420:	1f 92       	push	r1
    2422:	1f 92       	push	r1
    2424:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <vDisplayWriteStringAtPos>
		vDisplayWriteStringAtPos(1,0,"Philipp Eppler");
    2428:	df 92       	push	r13
    242a:	cf 92       	push	r12
    242c:	1f 92       	push	r1
    242e:	1f 92       	push	r1
    2430:	1f 92       	push	r1
    2432:	ff 92       	push	r15
    2434:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <vDisplayWriteStringAtPos>
		vDisplayWriteStringAtPos(2,0,"Pi: 3.1415xxx");
    2438:	1f 93       	push	r17
    243a:	0f 93       	push	r16
    243c:	1f 92       	push	r1
    243e:	1f 92       	push	r1
    2440:	1f 92       	push	r1
    2442:	7f 92       	push	r7
    2444:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <vDisplayWriteStringAtPos>
		vDisplayWriteStringAtPos(3,0,"Zeit: xxxxxxms");
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	1f 92       	push	r1
    244e:	1f 92       	push	r1
    2450:	1f 92       	push	r1
    2452:	ef 92       	push	r14
    2454:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <vDisplayWriteStringAtPos>
		
		PORTF.OUTTGL = 0x01;				
    2458:	f4 01       	movw	r30, r8
    245a:	f7 82       	std	Z+7, r15	; 0x07
		vTaskDelay(500 / portTICK_RATE_MS);
    245c:	64 ef       	ldi	r22, 0xF4	; 244
    245e:	71 e0       	ldi	r23, 0x01	; 1
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 a9 0c 	call	0x1952	; 0x1952 <vTaskDelay>
    2468:	8d b7       	in	r24, 0x3d	; 61
    246a:	9e b7       	in	r25, 0x3e	; 62
    246c:	48 96       	adiw	r24, 0x18	; 24
    246e:	8d bf       	out	0x3d, r24	; 61
    2470:	9e bf       	out	0x3e, r25	; 62
    2472:	d0 cf       	rjmp	.-96     	; 0x2414 <vGUI+0x48>

00002474 <vApplicationIdleHook>:
void vGUI(void *pvParameters);

TaskHandle_t GUITask;

void vApplicationIdleHook( void )
{	
    2474:	08 95       	ret

00002476 <main>:
	
}

int main(void)
{
    2476:	ef 92       	push	r14
    2478:	ff 92       	push	r15
    247a:	0f 93       	push	r16
	vInitClock();
    247c:	0e 94 ae 11 	call	0x235c	; 0x235c <vInitClock>
	vInitDisplay();
    2480:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vInitDisplay>
	
	xTaskCreate( vGUI, (const char *) "GUITask", configMINIMAL_STACK_SIZE, NULL, 2, &GUITask);
    2484:	0f 2e       	mov	r0, r31
    2486:	ff ec       	ldi	r31, 0xCF	; 207
    2488:	ef 2e       	mov	r14, r31
    248a:	fc e2       	ldi	r31, 0x2C	; 44
    248c:	ff 2e       	mov	r15, r31
    248e:	f0 2d       	mov	r31, r0
    2490:	02 e0       	ldi	r16, 0x02	; 2
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	48 ec       	ldi	r20, 0xC8	; 200
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	67 e4       	ldi	r22, 0x47	; 71
    249c:	70 e2       	ldi	r23, 0x20	; 32
    249e:	86 ee       	ldi	r24, 0xE6	; 230
    24a0:	91 e1       	ldi	r25, 0x11	; 17
    24a2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <xTaskCreate>

	vTaskStartScheduler();
    24a6:	0e 94 01 0b 	call	0x1602	; 0x1602 <vTaskStartScheduler>
	return 0;
}
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0f 91       	pop	r16
    24b0:	ff 90       	pop	r15
    24b2:	ef 90       	pop	r14
    24b4:	08 95       	ret

000024b6 <__vector_108>:
 void displayHome() {
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
    24b6:	1f 92       	push	r1
    24b8:	0f 92       	push	r0
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	0f 92       	push	r0
    24be:	11 24       	eor	r1, r1
    24c0:	0b b6       	in	r0, 0x3b	; 59
    24c2:	0f 92       	push	r0
    24c4:	2f 93       	push	r18
    24c6:	3f 93       	push	r19
    24c8:	4f 93       	push	r20
    24ca:	5f 93       	push	r21
    24cc:	6f 93       	push	r22
    24ce:	7f 93       	push	r23
    24d0:	8f 93       	push	r24
    24d2:	9f 93       	push	r25
    24d4:	af 93       	push	r26
    24d6:	bf 93       	push	r27
    24d8:	ef 93       	push	r30
    24da:	ff 93       	push	r31
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	1f 92       	push	r1
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	19 82       	std	Y+1, r1	; 0x01
    24e8:	9e 01       	movw	r18, r28
    24ea:	2f 5f       	subi	r18, 0xFF	; 255
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	70 e0       	ldi	r23, 0x00	; 0
    24f6:	80 91 d3 2c 	lds	r24, 0x2CD3	; 0x802cd3 <egDisplayTiming>
    24fa:	90 91 d4 2c 	lds	r25, 0x2CD4	; 0x802cd4 <egDisplayTiming+0x1>
    24fe:	0e 94 bb 03 	call	0x776	; 0x776 <xEventGroupSetBitsFromISR>
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	9b e0       	ldi	r25, 0x0B	; 11
    2508:	0e 94 0f 02 	call	0x41e	; 0x41e <TC0_ConfigClockSource>
    250c:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x700b06>
    2510:	0f 90       	pop	r0
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	ff 91       	pop	r31
    2518:	ef 91       	pop	r30
    251a:	bf 91       	pop	r27
    251c:	af 91       	pop	r26
    251e:	9f 91       	pop	r25
    2520:	8f 91       	pop	r24
    2522:	7f 91       	pop	r23
    2524:	6f 91       	pop	r22
    2526:	5f 91       	pop	r21
    2528:	4f 91       	pop	r20
    252a:	3f 91       	pop	r19
    252c:	2f 91       	pop	r18
    252e:	0f 90       	pop	r0
    2530:	0b be       	out	0x3b, r0	; 59
    2532:	0f 90       	pop	r0
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	0f 90       	pop	r0
    2538:	1f 90       	pop	r1
    253a:	18 95       	reti

0000253c <delayUS>:
    253c:	cf 92       	push	r12
    253e:	df 92       	push	r13
    2540:	ef 92       	push	r14
    2542:	ff 92       	push	r15
    2544:	0f 93       	push	r16
    2546:	6b 01       	movw	r12, r22
    2548:	7c 01       	movw	r14, r24
    254a:	82 e0       	ldi	r24, 0x02	; 2
    254c:	c8 16       	cp	r12, r24
    254e:	d1 04       	cpc	r13, r1
    2550:	e1 04       	cpc	r14, r1
    2552:	f1 04       	cpc	r15, r1
    2554:	08 f4       	brcc	.+2      	; 0x2558 <delayUS+0x1c>
    2556:	4e c0       	rjmp	.+156    	; 0x25f4 <delayUS+0xb8>
    2558:	e0 e0       	ldi	r30, 0x00	; 0
    255a:	fb e0       	ldi	r31, 0x0B	; 11
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	86 83       	std	Z+6, r24	; 0x06
    2560:	10 a2       	std	Z+32, r1	; 0x20
    2562:	11 a2       	std	Z+33, r1	; 0x21
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	9b e0       	ldi	r25, 0x0B	; 11
    256a:	0e 94 15 02 	call	0x42a	; 0x42a <TC0_ConfigWGM>
    256e:	8e ef       	ldi	r24, 0xFE	; 254
    2570:	c8 16       	cp	r12, r24
    2572:	8f ef       	ldi	r24, 0xFF	; 255
    2574:	d8 06       	cpc	r13, r24
    2576:	e1 04       	cpc	r14, r1
    2578:	f1 04       	cpc	r15, r1
    257a:	70 f4       	brcc	.+28     	; 0x2598 <delayUS+0x5c>
    257c:	f6 94       	lsr	r15
    257e:	e7 94       	ror	r14
    2580:	d7 94       	ror	r13
    2582:	c7 94       	ror	r12
    2584:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    2588:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    258c:	65 e0       	ldi	r22, 0x05	; 5
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	9b e0       	ldi	r25, 0x0B	; 11
    2592:	0e 94 0f 02 	call	0x41e	; 0x41e <TC0_ConfigClockSource>
    2596:	19 c0       	rjmp	.+50     	; 0x25ca <delayUS+0x8e>
    2598:	80 e4       	ldi	r24, 0x40	; 64
    259a:	c8 16       	cp	r12, r24
    259c:	82 e4       	ldi	r24, 0x42	; 66
    259e:	d8 06       	cpc	r13, r24
    25a0:	8f e0       	ldi	r24, 0x0F	; 15
    25a2:	e8 06       	cpc	r14, r24
    25a4:	f1 04       	cpc	r15, r1
    25a6:	88 f4       	brcc	.+34     	; 0x25ca <delayUS+0x8e>
    25a8:	68 94       	set
    25aa:	14 f8       	bld	r1, 4
    25ac:	f6 94       	lsr	r15
    25ae:	e7 94       	ror	r14
    25b0:	d7 94       	ror	r13
    25b2:	c7 94       	ror	r12
    25b4:	16 94       	lsr	r1
    25b6:	d1 f7       	brne	.-12     	; 0x25ac <delayUS+0x70>
    25b8:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    25bc:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    25c0:	67 e0       	ldi	r22, 0x07	; 7
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	9b e0       	ldi	r25, 0x0B	; 11
    25c6:	0e 94 0f 02 	call	0x41e	; 0x41e <TC0_ConfigClockSource>
    25ca:	0f 2e       	mov	r0, r31
    25cc:	f4 ef       	ldi	r31, 0xF4	; 244
    25ce:	cf 2e       	mov	r12, r31
    25d0:	dd 24       	eor	r13, r13
    25d2:	d3 94       	inc	r13
    25d4:	e1 2c       	mov	r14, r1
    25d6:	f1 2c       	mov	r15, r1
    25d8:	f0 2d       	mov	r31, r0
    25da:	00 e0       	ldi	r16, 0x00	; 0
    25dc:	21 e0       	ldi	r18, 0x01	; 1
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	50 e0       	ldi	r21, 0x00	; 0
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	80 91 d3 2c 	lds	r24, 0x2CD3	; 0x802cd3 <egDisplayTiming>
    25ea:	90 91 d4 2c 	lds	r25, 0x2CD4	; 0x802cd4 <egDisplayTiming+0x1>
    25ee:	0e 94 40 02 	call	0x480	; 0x480 <xEventGroupWaitBits>
    25f2:	11 c0       	rjmp	.+34     	; 0x2616 <delayUS+0xda>
    25f4:	e0 e0       	ldi	r30, 0x00	; 0
    25f6:	fb e0       	ldi	r31, 0x0B	; 11
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	86 83       	std	Z+6, r24	; 0x06
    25fc:	10 a2       	std	Z+32, r1	; 0x20
    25fe:	11 a2       	std	Z+33, r1	; 0x21
    2600:	60 e0       	ldi	r22, 0x00	; 0
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	9b e0       	ldi	r25, 0x0B	; 11
    2606:	0e 94 15 02 	call	0x42a	; 0x42a <TC0_ConfigWGM>
    260a:	c1 2c       	mov	r12, r1
    260c:	d1 2c       	mov	r13, r1
    260e:	76 01       	movw	r14, r12
    2610:	68 94       	set
    2612:	c1 f8       	bld	r12, 1
    2614:	b3 cf       	rjmp	.-154    	; 0x257c <delayUS+0x40>
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	ef 90       	pop	r14
    261c:	df 90       	pop	r13
    261e:	cf 90       	pop	r12
    2620:	08 95       	ret

00002622 <setPort>:
    2622:	82 95       	swap	r24
    2624:	80 7f       	andi	r24, 0xF0	; 240
    2626:	e0 e0       	ldi	r30, 0x00	; 0
    2628:	f6 e0       	ldi	r31, 0x06	; 6
    262a:	94 81       	ldd	r25, Z+4	; 0x04
    262c:	28 2f       	mov	r18, r24
    262e:	2f 60       	ori	r18, 0x0F	; 15
    2630:	92 23       	and	r25, r18
    2632:	94 83       	std	Z+4, r25	; 0x04
    2634:	94 81       	ldd	r25, Z+4	; 0x04
    2636:	89 2b       	or	r24, r25
    2638:	84 83       	std	Z+4, r24	; 0x04
    263a:	08 95       	ret

0000263c <Nybble>:
    263c:	1f 93       	push	r17
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	c0 e6       	ldi	r28, 0x60	; 96
    2644:	d6 e0       	ldi	r29, 0x06	; 6
    2646:	14 e0       	ldi	r17, 0x04	; 4
    2648:	1d 83       	std	Y+5, r17	; 0x05
    264a:	61 e0       	ldi	r22, 0x01	; 1
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	0e 94 9e 12 	call	0x253c	; 0x253c <delayUS>
    2656:	1e 83       	std	Y+6, r17	; 0x06
    2658:	df 91       	pop	r29
    265a:	cf 91       	pop	r28
    265c:	1f 91       	pop	r17
    265e:	08 95       	ret

00002660 <command>:
    2660:	cf 93       	push	r28
    2662:	c8 2f       	mov	r28, r24
    2664:	82 95       	swap	r24
    2666:	8f 70       	andi	r24, 0x0F	; 15
    2668:	0e 94 11 13 	call	0x2622	; 0x2622 <setPort>
    266c:	e0 e6       	ldi	r30, 0x60	; 96
    266e:	f6 e0       	ldi	r31, 0x06	; 6
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	86 83       	std	Z+6, r24	; 0x06
    2674:	82 e0       	ldi	r24, 0x02	; 2
    2676:	86 83       	std	Z+6, r24	; 0x06
    2678:	0e 94 1e 13 	call	0x263c	; 0x263c <Nybble>
    267c:	8c 2f       	mov	r24, r28
    267e:	8f 70       	andi	r24, 0x0F	; 15
    2680:	0e 94 11 13 	call	0x2622	; 0x2622 <setPort>
    2684:	0e 94 1e 13 	call	0x263c	; 0x263c <Nybble>
    2688:	cf 91       	pop	r28
    268a:	08 95       	ret

0000268c <write>:
    268c:	cf 93       	push	r28
    268e:	c8 2f       	mov	r28, r24
    2690:	82 95       	swap	r24
    2692:	8f 70       	andi	r24, 0x0F	; 15
    2694:	0e 94 11 13 	call	0x2622	; 0x2622 <setPort>
    2698:	e0 e6       	ldi	r30, 0x60	; 96
    269a:	f6 e0       	ldi	r31, 0x06	; 6
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	85 83       	std	Z+5, r24	; 0x05
    26a0:	82 e0       	ldi	r24, 0x02	; 2
    26a2:	86 83       	std	Z+6, r24	; 0x06
    26a4:	0e 94 1e 13 	call	0x263c	; 0x263c <Nybble>
    26a8:	8c 2f       	mov	r24, r28
    26aa:	8f 70       	andi	r24, 0x0F	; 15
    26ac:	0e 94 11 13 	call	0x2622	; 0x2622 <setPort>
    26b0:	0e 94 1e 13 	call	0x263c	; 0x263c <Nybble>
    26b4:	cf 91       	pop	r28
    26b6:	08 95       	ret

000026b8 <vInitDisplay>:
 }
 
 void vInitDisplay() {
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
	PORTA.DIRSET = PIN4_bm;
    26be:	e0 e0       	ldi	r30, 0x00	; 0
    26c0:	f6 e0       	ldi	r31, 0x06	; 6
    26c2:	80 e1       	ldi	r24, 0x10	; 16
    26c4:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN5_bm;
    26c6:	80 e2       	ldi	r24, 0x20	; 32
    26c8:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN6_bm;
    26ca:	80 e4       	ldi	r24, 0x40	; 64
    26cc:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN7_bm;
    26ce:	80 e8       	ldi	r24, 0x80	; 128
    26d0:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN0_bm;
    26d2:	a0 e6       	ldi	r26, 0x60	; 96
    26d4:	b6 e0       	ldi	r27, 0x06	; 6
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	11 96       	adiw	r26, 0x01	; 1
    26da:	8c 93       	st	X, r24
    26dc:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN1_bm;
    26de:	82 e0       	ldi	r24, 0x02	; 2
    26e0:	11 96       	adiw	r26, 0x01	; 1
    26e2:	8c 93       	st	X, r24
    26e4:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN2_bm;
    26e6:	84 e0       	ldi	r24, 0x04	; 4
    26e8:	11 96       	adiw	r26, 0x01	; 1
    26ea:	8c 93       	st	X, r24
    26ec:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.OUT &= 0x0F;
    26ee:	84 81       	ldd	r24, Z+4	; 0x04
    26f0:	8f 70       	andi	r24, 0x0F	; 15
    26f2:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= 0xF8;
    26f4:	14 96       	adiw	r26, 0x04	; 4
    26f6:	8c 91       	ld	r24, X
    26f8:	14 97       	sbiw	r26, 0x04	; 4
    26fa:	88 7f       	andi	r24, 0xF8	; 248
    26fc:	14 96       	adiw	r26, 0x04	; 4
    26fe:	8c 93       	st	X, r24

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	66 e1       	ldi	r22, 0x16	; 22
    2704:	88 e0       	ldi	r24, 0x08	; 8
    2706:	0e 94 52 07 	call	0xea4	; 0xea4 <xQueueGenericCreate>
    270a:	80 93 d1 2c 	sts	0x2CD1, r24	; 0x802cd1 <displayLineQueue>
    270e:	90 93 d2 2c 	sts	0x2CD2, r25	; 0x802cd2 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    2712:	0e 94 2b 02 	call	0x456	; 0x456 <xEventGroupCreate>
    2716:	80 93 d3 2c 	sts	0x2CD3, r24	; 0x802cd3 <egDisplayTiming>
    271a:	90 93 d4 2c 	sts	0x2CD4, r25	; 0x802cd4 <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);	//von Hand auf Prio 2 gestellt
    271e:	e1 2c       	mov	r14, r1
    2720:	f1 2c       	mov	r15, r1
    2722:	02 e0       	ldi	r16, 0x02	; 2
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	4e e5       	ldi	r20, 0x5E	; 94
    272a:	51 e0       	ldi	r21, 0x01	; 1
    272c:	6f e4       	ldi	r22, 0x4F	; 79
    272e:	70 e2       	ldi	r23, 0x20	; 32
    2730:	8a ef       	ldi	r24, 0xFA	; 250
    2732:	93 e1       	ldi	r25, 0x13	; 19
    2734:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <xTaskCreate>
 }
    2738:	0f 91       	pop	r16
    273a:	ff 90       	pop	r15
    273c:	ef 90       	pop	r14
    273e:	08 95       	ret

00002740 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
	 switch(line) {
    2740:	81 30       	cpi	r24, 0x01	; 1
    2742:	91 05       	cpc	r25, r1
    2744:	79 f0       	breq	.+30     	; 0x2764 <_displaySetPos+0x24>
    2746:	1c f4       	brge	.+6      	; 0x274e <_displaySetPos+0xe>
    2748:	89 2b       	or	r24, r25
    274a:	39 f0       	breq	.+14     	; 0x275a <_displaySetPos+0x1a>
    274c:	19 c0       	rjmp	.+50     	; 0x2780 <_displaySetPos+0x40>
    274e:	82 30       	cpi	r24, 0x02	; 2
    2750:	91 05       	cpc	r25, r1
    2752:	69 f0       	breq	.+26     	; 0x276e <_displaySetPos+0x2e>
    2754:	03 97       	sbiw	r24, 0x03	; 3
    2756:	81 f0       	breq	.+32     	; 0x2778 <_displaySetPos+0x38>
    2758:	13 c0       	rjmp	.+38     	; 0x2780 <_displaySetPos+0x40>
		 case 0:
		 command(0x80 + 0x00 + pos);
    275a:	80 e8       	ldi	r24, 0x80	; 128
    275c:	86 0f       	add	r24, r22
    275e:	0e 94 30 13 	call	0x2660	; 0x2660 <command>
		 break;
    2762:	0e c0       	rjmp	.+28     	; 0x2780 <_displaySetPos+0x40>
		 case 1:
		 command(0x80 + 0x40 + pos);
    2764:	80 ec       	ldi	r24, 0xC0	; 192
    2766:	86 0f       	add	r24, r22
    2768:	0e 94 30 13 	call	0x2660	; 0x2660 <command>
		 break;
    276c:	09 c0       	rjmp	.+18     	; 0x2780 <_displaySetPos+0x40>
		 case 2:
		 command(0x80 + 0x14 + pos);
    276e:	84 e9       	ldi	r24, 0x94	; 148
    2770:	86 0f       	add	r24, r22
    2772:	0e 94 30 13 	call	0x2660	; 0x2660 <command>
		 break;
    2776:	04 c0       	rjmp	.+8      	; 0x2780 <_displaySetPos+0x40>
		 case 3:
		 command(0x80 + 0x54 + pos);
    2778:	84 ed       	ldi	r24, 0xD4	; 212
    277a:	86 0f       	add	r24, r22
    277c:	0e 94 30 13 	call	0x2660	; 0x2660 <command>
		 break;
	 }
	 delayUS(39);
    2780:	67 e2       	ldi	r22, 0x27	; 39
    2782:	70 e0       	ldi	r23, 0x00	; 0
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 9e 12 	call	0x253c	; 0x253c <delayUS>
    278c:	08 95       	ret

0000278e <_displayWriteChar>:
 }

 void _displayWriteChar(char c) {
	 write(c);
    278e:	0e 94 46 13 	call	0x268c	; 0x268c <write>
	 delayUS(43);
    2792:	6b e2       	ldi	r22, 0x2B	; 43
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 9e 12 	call	0x253c	; 0x253c <delayUS>
    279e:	08 95       	ret

000027a0 <_displayWriteString>:
 }
 
 void _displayWriteString(char* s) {
    27a0:	0f 93       	push	r16
    27a2:	1f 93       	push	r17
    27a4:	cf 93       	push	r28
    27a6:	df 93       	push	r29
    27a8:	fc 01       	movw	r30, r24
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
    27aa:	80 81       	ld	r24, Z
    27ac:	81 11       	cpse	r24, r1
    27ae:	0a c0       	rjmp	.+20     	; 0x27c4 <_displayWriteString+0x24>
    27b0:	11 c0       	rjmp	.+34     	; 0x27d4 <_displayWriteString+0x34>
    27b2:	89 91       	ld	r24, Y+
    27b4:	88 23       	and	r24, r24
    27b6:	71 f0       	breq	.+28     	; 0x27d4 <_displayWriteString+0x34>
			 break;
		 }
		 _displayWriteChar(s[i]);
    27b8:	0e 94 c7 13 	call	0x278e	; 0x278e <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    27bc:	0c 17       	cp	r16, r28
    27be:	1d 07       	cpc	r17, r29
    27c0:	c1 f7       	brne	.-16     	; 0x27b2 <_displayWriteString+0x12>
    27c2:	08 c0       	rjmp	.+16     	; 0x27d4 <_displayWriteString+0x34>
    27c4:	8f 01       	movw	r16, r30
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
    27c6:	0e 94 c7 13 	call	0x278e	; 0x278e <_displayWriteChar>
    27ca:	e8 01       	movw	r28, r16
    27cc:	21 96       	adiw	r28, 0x01	; 1
    27ce:	0c 5e       	subi	r16, 0xEC	; 236
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
    27d2:	ef cf       	rjmp	.-34     	; 0x27b2 <_displayWriteString+0x12>
	 }
 }
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	08 95       	ret

000027de <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	ea 01       	movw	r28, r20
	 _displaySetPos(line, pos);
    27e4:	0e 94 a0 13 	call	0x2740	; 0x2740 <_displaySetPos>
	 _displayWriteString(s);
    27e8:	ce 01       	movw	r24, r28
    27ea:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_displayWriteString>
 }
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	08 95       	ret

000027f4 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	c6 56       	subi	r28, 0x66	; 102
    27fe:	d1 09       	sbc	r29, r1
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	5e 01       	movw	r10, r28
    2806:	41 e5       	ldi	r20, 0x51	; 81
    2808:	a4 0e       	add	r10, r20
    280a:	b1 1c       	adc	r11, r1
    280c:	fe 01       	movw	r30, r28
    280e:	31 96       	adiw	r30, 0x01	; 1
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
			displayLines[i][j] = 0x20;
    2810:	20 e2       	ldi	r18, 0x20	; 32
    2812:	08 c0       	rjmp	.+16     	; 0x2824 <vDisplayUpdateTask+0x30>
    2814:	21 93       	st	Z+, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    2816:	e8 17       	cp	r30, r24
    2818:	f9 07       	cpc	r31, r25
    281a:	e1 f7       	brne	.-8      	; 0x2814 <vDisplayUpdateTask+0x20>
    281c:	fc 01       	movw	r30, r24

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    281e:	a8 16       	cp	r10, r24
    2820:	b9 06       	cpc	r11, r25
    2822:	19 f0       	breq	.+6      	; 0x282a <vDisplayUpdateTask+0x36>
    2824:	cf 01       	movw	r24, r30
    2826:	44 96       	adiw	r24, 0x14	; 20
    2828:	f5 cf       	rjmp	.-22     	; 0x2814 <vDisplayUpdateTask+0x20>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    282a:	60 e4       	ldi	r22, 0x40	; 64
    282c:	7c e9       	ldi	r23, 0x9C	; 156
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 9e 12 	call	0x253c	; 0x253c <delayUS>
	 setPort(0x03);
    2836:	83 e0       	ldi	r24, 0x03	; 3
    2838:	0e 94 11 13 	call	0x2622	; 0x2622 <setPort>
	 delayUS(5000);
    283c:	68 e8       	ldi	r22, 0x88	; 136
    283e:	73 e1       	ldi	r23, 0x13	; 19
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0e 94 9e 12 	call	0x253c	; 0x253c <delayUS>
	 Nybble();
    2848:	0e 94 1e 13 	call	0x263c	; 0x263c <Nybble>
	 delayUS(160);
    284c:	60 ea       	ldi	r22, 0xA0	; 160
    284e:	70 e0       	ldi	r23, 0x00	; 0
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 9e 12 	call	0x253c	; 0x253c <delayUS>
	 Nybble();
    2858:	0e 94 1e 13 	call	0x263c	; 0x263c <Nybble>
	 delayUS(160);
    285c:	60 ea       	ldi	r22, 0xA0	; 160
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 9e 12 	call	0x253c	; 0x253c <delayUS>
	 Nybble();
    2868:	0e 94 1e 13 	call	0x263c	; 0x263c <Nybble>
	 delayUS(160);
    286c:	60 ea       	ldi	r22, 0xA0	; 160
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	0e 94 9e 12 	call	0x253c	; 0x253c <delayUS>
	 setPort(0x02);
    2878:	82 e0       	ldi	r24, 0x02	; 2
    287a:	0e 94 11 13 	call	0x2622	; 0x2622 <setPort>
	 Nybble();
    287e:	0e 94 1e 13 	call	0x263c	; 0x263c <Nybble>
	 command(0x28);
    2882:	88 e2       	ldi	r24, 0x28	; 40
    2884:	0e 94 30 13 	call	0x2660	; 0x2660 <command>
	 command(0x10);
    2888:	80 e1       	ldi	r24, 0x10	; 16
    288a:	0e 94 30 13 	call	0x2660	; 0x2660 <command>
	 command(0x0C); //Cursor and Blinking off
    288e:	8c e0       	ldi	r24, 0x0C	; 12
    2890:	0e 94 30 13 	call	0x2660	; 0x2660 <command>
	 command(0x06);
    2894:	86 e0       	ldi	r24, 0x06	; 6
    2896:	0e 94 30 13 	call	0x2660	; 0x2660 <command>
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    289a:	10 e2       	ldi	r17, 0x20	; 32
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    289c:	6e 01       	movw	r12, r28
    289e:	51 e5       	ldi	r21, 0x51	; 81
    28a0:	c5 0e       	add	r12, r21
    28a2:	d1 1c       	adc	r13, r1
    28a4:	0f 2e       	mov	r0, r31
    28a6:	f4 e1       	ldi	r31, 0x14	; 20
    28a8:	4f 2e       	mov	r4, r31
    28aa:	f0 2d       	mov	r31, r0
    28ac:	0f 2e       	mov	r0, r31
    28ae:	f6 e1       	ldi	r31, 0x16	; 22
    28b0:	8f 2e       	mov	r8, r31
    28b2:	91 2c       	mov	r9, r1
    28b4:	f0 2d       	mov	r31, r0
    28b6:	5c 2c       	mov	r5, r12
    28b8:	0d 2d       	mov	r16, r13
	 command(0x10);
	 command(0x0C); //Cursor and Blinking off
	 command(0x06);
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    28ba:	68 ec       	ldi	r22, 0xC8	; 200
    28bc:	70 e0       	ldi	r23, 0x00	; 0
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	0e 94 a9 0c 	call	0x1952	; 0x1952 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	ba 01       	movw	r22, r20
    28cc:	80 91 d3 2c 	lds	r24, 0x2CD3	; 0x802cd3 <egDisplayTiming>
    28d0:	90 91 d4 2c 	lds	r25, 0x2CD4	; 0x802cd4 <egDisplayTiming+0x1>
    28d4:	0e 94 05 03 	call	0x60a	; 0x60a <xEventGroupClearBits>
    28d8:	67 2b       	or	r22, r23
    28da:	68 2b       	or	r22, r24
    28dc:	69 2b       	or	r22, r25
    28de:	09 f4       	brne	.+2      	; 0x28e2 <vDisplayUpdateTask+0xee>
    28e0:	49 c0       	rjmp	.+146    	; 0x2974 <vDisplayUpdateTask+0x180>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    28e2:	42 e0       	ldi	r20, 0x02	; 2
    28e4:	50 e0       	ldi	r21, 0x00	; 0
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	80 91 d3 2c 	lds	r24, 0x2CD3	; 0x802cd3 <egDisplayTiming>
    28ee:	90 91 d4 2c 	lds	r25, 0x2CD4	; 0x802cd4 <egDisplayTiming+0x1>
    28f2:	0e 94 05 03 	call	0x60a	; 0x60a <xEventGroupClearBits>
    28f6:	fe 01       	movw	r30, r28
    28f8:	31 96       	adiw	r30, 0x01	; 1
    28fa:	08 c0       	rjmp	.+16     	; 0x290c <vDisplayUpdateTask+0x118>
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    28fc:	11 93       	st	Z+, r17
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    28fe:	e8 17       	cp	r30, r24
    2900:	f9 07       	cpc	r31, r25
    2902:	e1 f7       	brne	.-8      	; 0x28fc <vDisplayUpdateTask+0x108>
    2904:	fc 01       	movw	r30, r24
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    2906:	8a 15       	cp	r24, r10
    2908:	9b 05       	cpc	r25, r11
    290a:	a1 f1       	breq	.+104    	; 0x2974 <vDisplayUpdateTask+0x180>
    290c:	cf 01       	movw	r24, r30
    290e:	44 96       	adiw	r24, 0x14	; 20
    2910:	f5 cf       	rjmp	.-22     	; 0x28fc <vDisplayUpdateTask+0x108>
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    2912:	2f ef       	ldi	r18, 0xFF	; 255
    2914:	3f ef       	ldi	r19, 0xFF	; 255
    2916:	a9 01       	movw	r20, r18
    2918:	65 2d       	mov	r22, r5
    291a:	70 2f       	mov	r23, r16
    291c:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <displayLineQueue>
    2920:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <displayLineQueue+0x1>
    2924:	0e 94 6e 08 	call	0x10dc	; 0x10dc <xQueueReceive>
    2928:	88 23       	and	r24, r24
    292a:	21 f1       	breq	.+72     	; 0x2974 <vDisplayUpdateTask+0x180>
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    292c:	f6 01       	movw	r30, r12
    292e:	21 81       	ldd	r18, Z+1	; 0x01
    2930:	82 2f       	mov	r24, r18
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	44 97       	sbiw	r24, 0x14	; 20
    2936:	f4 f4       	brge	.+60     	; 0x2974 <vDisplayUpdateTask+0x180>
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	88 23       	and	r24, r24
    293c:	d9 f0       	breq	.+54     	; 0x2974 <vDisplayUpdateTask+0x180>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    293e:	90 81       	ld	r25, Z
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	d9 01       	movw	r26, r18
    2944:	49 9e       	mul	r4, r25
    2946:	a0 0d       	add	r26, r0
    2948:	b1 1d       	adc	r27, r1
    294a:	11 24       	eor	r1, r1
    294c:	41 e0       	ldi	r20, 0x01	; 1
    294e:	50 e0       	ldi	r21, 0x00	; 0
    2950:	4c 0f       	add	r20, r28
    2952:	5d 1f       	adc	r21, r29
    2954:	a4 0f       	add	r26, r20
    2956:	b5 1f       	adc	r27, r21
    2958:	33 96       	adiw	r30, 0x03	; 3
    295a:	a4 01       	movw	r20, r8
    295c:	42 1b       	sub	r20, r18
    295e:	53 0b       	sbc	r21, r19
    2960:	9a 01       	movw	r18, r20
    2962:	2c 0d       	add	r18, r12
    2964:	3d 1d       	adc	r19, r13
    2966:	8d 93       	st	X+, r24
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    2968:	e2 17       	cp	r30, r18
    296a:	f3 07       	cpc	r31, r19
    296c:	19 f0       	breq	.+6      	; 0x2974 <vDisplayUpdateTask+0x180>
    296e:	81 91       	ld	r24, Z+
    2970:	81 11       	cpse	r24, r1
    2972:	f9 cf       	rjmp	.-14     	; 0x2966 <vDisplayUpdateTask+0x172>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    2974:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <displayLineQueue>
    2978:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <displayLineQueue+0x1>
    297c:	0e 94 14 09 	call	0x1228	; 0x1228 <uxQueueMessagesWaiting>
    2980:	81 11       	cpse	r24, r1
    2982:	c7 cf       	rjmp	.-114    	; 0x2912 <vDisplayUpdateTask+0x11e>
    2984:	ce 01       	movw	r24, r28
    2986:	01 96       	adiw	r24, 0x01	; 1
    2988:	7c 01       	movw	r14, r24
    298a:	61 2c       	mov	r6, r1
    298c:	71 2c       	mov	r7, r1
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    298e:	a7 01       	movw	r20, r14
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	c3 01       	movw	r24, r6
    2996:	0e 94 ef 13 	call	0x27de	; 0x27de <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    299a:	9f ef       	ldi	r25, 0xFF	; 255
    299c:	69 1a       	sub	r6, r25
    299e:	79 0a       	sbc	r7, r25
    29a0:	e4 e1       	ldi	r30, 0x14	; 20
    29a2:	ee 0e       	add	r14, r30
    29a4:	f1 1c       	adc	r15, r1
    29a6:	f4 e0       	ldi	r31, 0x04	; 4
    29a8:	6f 16       	cp	r6, r31
    29aa:	71 04       	cpc	r7, r1
    29ac:	81 f7       	brne	.-32     	; 0x298e <vDisplayUpdateTask+0x19a>
    29ae:	85 cf       	rjmp	.-246    	; 0x28ba <vDisplayUpdateTask+0xc6>

000029b0 <vDisplayClear>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    29b0:	42 e0       	ldi	r20, 0x02	; 2
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	60 e0       	ldi	r22, 0x00	; 0
    29b6:	70 e0       	ldi	r23, 0x00	; 0
    29b8:	80 91 d3 2c 	lds	r24, 0x2CD3	; 0x802cd3 <egDisplayTiming>
    29bc:	90 91 d4 2c 	lds	r25, 0x2CD4	; 0x802cd4 <egDisplayTiming+0x1>
    29c0:	0e 94 26 03 	call	0x64c	; 0x64c <xEventGroupSetBits>
    29c4:	08 95       	ret

000029c6 <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    29c6:	2f 92       	push	r2
    29c8:	3f 92       	push	r3
    29ca:	4f 92       	push	r4
    29cc:	5f 92       	push	r5
    29ce:	6f 92       	push	r6
    29d0:	7f 92       	push	r7
    29d2:	8f 92       	push	r8
    29d4:	9f 92       	push	r9
    29d6:	af 92       	push	r10
    29d8:	bf 92       	push	r11
    29da:	cf 92       	push	r12
    29dc:	df 92       	push	r13
    29de:	ef 92       	push	r14
    29e0:	ff 92       	push	r15
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	6d 97       	sbiw	r28, 0x1d	; 29
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	2b a9       	ldd	r18, Y+51	; 0x33
    29f6:	2b 8f       	std	Y+27, r18	; 0x1b
    29f8:	af a9       	ldd	r26, Y+55	; 0x37
    29fa:	b8 ad       	ldd	r27, Y+56	; 0x38
	va_list arg;	
	va_start(arg, fmt);
    29fc:	7e 01       	movw	r14, r28
    29fe:	39 e3       	ldi	r19, 0x39	; 57
    2a00:	e3 0e       	add	r14, r19
    2a02:	f1 1c       	adc	r15, r1
    2a04:	2e ec       	ldi	r18, 0xCE	; 206
    2a06:	3c e2       	ldi	r19, 0x2C	; 44
	display_vprintf(line, pos, fmt, arg);
    2a08:	ea eb       	ldi	r30, 0xBA	; 186
    2a0a:	fc e2       	ldi	r31, 0x2C	; 44
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
    2a0c:	11 92       	st	Z+, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    2a0e:	e2 17       	cp	r30, r18
    2a10:	f3 07       	cpc	r31, r19
    2a12:	e1 f7       	brne	.-8      	; 0x2a0c <vDisplayWriteStringAtPos+0x46>
    2a14:	0f 2e       	mov	r0, r31
    2a16:	f6 ea       	ldi	r31, 0xA6	; 166
    2a18:	af 2e       	mov	r10, r31
    2a1a:	fc e2       	ldi	r31, 0x2C	; 44
    2a1c:	bf 2e       	mov	r11, r31
    2a1e:	f0 2d       	mov	r31, r0
    2a20:	2a eb       	ldi	r18, 0xBA	; 186
    2a22:	3c e2       	ldi	r19, 0x2C	; 44
    2a24:	f5 01       	movw	r30, r10
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
    2a26:	11 92       	st	Z+, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    2a28:	e2 17       	cp	r30, r18
    2a2a:	f3 07       	cpc	r31, r19
    2a2c:	e1 f7       	brne	.-8      	; 0x2a26 <vDisplayWriteStringAtPos+0x60>
    2a2e:	81 2c       	mov	r8, r1
    2a30:	91 2c       	mov	r9, r1
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    2a32:	0f 2e       	mov	r0, r31
    2a34:	fa eb       	ldi	r31, 0xBA	; 186
    2a36:	cf 2e       	mov	r12, r31
    2a38:	fc e2       	ldi	r31, 0x2C	; 44
    2a3a:	df 2e       	mov	r13, r31
    2a3c:	f0 2d       	mov	r31, r0
    2a3e:	fc c2       	rjmp	.+1528   	; 0x3038 <vDisplayWriteStringAtPos+0x672>
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
    2a40:	85 32       	cpi	r24, 0x25	; 37
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <vDisplayWriteStringAtPos+0x80>
    2a44:	e8 c2       	rjmp	.+1488   	; 0x3016 <vDisplayWriteStringAtPos+0x650>
			switch (ch = *fmt++) {
    2a46:	2d 01       	movw	r4, r26
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	48 0e       	add	r4, r24
    2a4c:	51 1c       	adc	r5, r1
    2a4e:	11 96       	adiw	r26, 0x01	; 1
    2a50:	8c 91       	ld	r24, X
    2a52:	85 36       	cpi	r24, 0x65	; 101
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <vDisplayWriteStringAtPos+0x92>
    2a56:	db c1       	rjmp	.+950    	; 0x2e0e <vDisplayWriteStringAtPos+0x448>
    2a58:	38 f4       	brcc	.+14     	; 0x2a68 <vDisplayWriteStringAtPos+0xa2>
    2a5a:	83 36       	cpi	r24, 0x63	; 99
    2a5c:	c1 f0       	breq	.+48     	; 0x2a8e <vDisplayWriteStringAtPos+0xc8>
    2a5e:	08 f0       	brcs	.+2      	; 0x2a62 <vDisplayWriteStringAtPos+0x9c>
    2a60:	48 c0       	rjmp	.+144    	; 0x2af2 <vDisplayWriteStringAtPos+0x12c>
    2a62:	85 32       	cpi	r24, 0x25	; 37
    2a64:	51 f0       	breq	.+20     	; 0x2a7a <vDisplayWriteStringAtPos+0xb4>
    2a66:	e7 c2       	rjmp	.+1486   	; 0x3036 <vDisplayWriteStringAtPos+0x670>
    2a68:	83 37       	cpi	r24, 0x73	; 115
    2a6a:	f9 f0       	breq	.+62     	; 0x2aaa <vDisplayWriteStringAtPos+0xe4>
    2a6c:	88 37       	cpi	r24, 0x78	; 120
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <vDisplayWriteStringAtPos+0xac>
    2a70:	68 c0       	rjmp	.+208    	; 0x2b42 <vDisplayWriteStringAtPos+0x17c>
    2a72:	86 36       	cpi	r24, 0x66	; 102
    2a74:	09 f0       	breq	.+2      	; 0x2a78 <vDisplayWriteStringAtPos+0xb2>
    2a76:	df c2       	rjmp	.+1470   	; 0x3036 <vDisplayWriteStringAtPos+0x670>
    2a78:	8c c0       	rjmp	.+280    	; 0x2b92 <vDisplayWriteStringAtPos+0x1cc>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    2a7a:	f4 01       	movw	r30, r8
    2a7c:	ea 55       	subi	r30, 0x5A	; 90
    2a7e:	f3 4d       	sbci	r31, 0xD3	; 211
    2a80:	95 e2       	ldi	r25, 0x25	; 37
    2a82:	90 83       	st	Z, r25
				length++;
    2a84:	af ef       	ldi	r26, 0xFF	; 255
    2a86:	8a 1a       	sub	r8, r26
    2a88:	9a 0a       	sbc	r9, r26
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2a8a:	d2 01       	movw	r26, r4
    2a8c:	d5 c2       	rjmp	.+1450   	; 0x3038 <vDisplayWriteStringAtPos+0x672>
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
				str[length] = char_temp;
    2a8e:	f4 01       	movw	r30, r8
    2a90:	ea 55       	subi	r30, 0x5A	; 90
    2a92:	f3 4d       	sbci	r31, 0xD3	; 211
    2a94:	d7 01       	movw	r26, r14
    2a96:	8c 91       	ld	r24, X
    2a98:	80 83       	st	Z, r24
				length++;
    2a9a:	bf ef       	ldi	r27, 0xFF	; 255
    2a9c:	8b 1a       	sub	r8, r27
    2a9e:	9b 0a       	sbc	r9, r27
				length++;
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    2aa0:	f7 01       	movw	r30, r14
    2aa2:	32 96       	adiw	r30, 0x02	; 2
    2aa4:	7f 01       	movw	r14, r30
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2aa6:	d2 01       	movw	r26, r4
    2aa8:	c7 c2       	rjmp	.+1422   	; 0x3038 <vDisplayWriteStringAtPos+0x672>
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    2aaa:	a7 01       	movw	r20, r14
    2aac:	4e 5f       	subi	r20, 0xFE	; 254
    2aae:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab0:	d7 01       	movw	r26, r14
    2ab2:	8d 91       	ld	r24, X+
    2ab4:	9c 91       	ld	r25, X
    2ab6:	9c 01       	movw	r18, r24
    2ab8:	b4 01       	movw	r22, r8
    2aba:	f4 01       	movw	r30, r8
    2abc:	ea 55       	subi	r30, 0x5A	; 90
    2abe:	f3 4d       	sbci	r31, 0xD3	; 211
				for(int i = 0; i < strlen(string_temp);i++) {
    2ac0:	00 e0       	ldi	r16, 0x00	; 0
    2ac2:	10 e0       	ldi	r17, 0x00	; 0
    2ac4:	06 c0       	rjmp	.+12     	; 0x2ad2 <vDisplayWriteStringAtPos+0x10c>
					str[length+i] = string_temp[i];
    2ac6:	d9 01       	movw	r26, r18
    2ac8:	fd 90       	ld	r15, X+
    2aca:	9d 01       	movw	r18, r26
    2acc:	f1 92       	st	Z+, r15
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    2ace:	0f 5f       	subi	r16, 0xFF	; 255
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	0d 90       	ld	r0, X+
    2ad6:	00 20       	and	r0, r0
    2ad8:	e9 f7       	brne	.-6      	; 0x2ad4 <vDisplayWriteStringAtPos+0x10e>
    2ada:	11 97       	sbiw	r26, 0x01	; 1
    2adc:	a8 1b       	sub	r26, r24
    2ade:	b9 0b       	sbc	r27, r25
    2ae0:	0a 17       	cp	r16, r26
    2ae2:	1b 07       	cpc	r17, r27
    2ae4:	80 f3       	brcs	.-32     	; 0x2ac6 <vDisplayWriteStringAtPos+0x100>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    2ae6:	4d 01       	movw	r8, r26
    2ae8:	86 0e       	add	r8, r22
    2aea:	97 1e       	adc	r9, r23
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    2aec:	7a 01       	movw	r14, r20
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2aee:	d2 01       	movw	r26, r4
    2af0:	a3 c2       	rjmp	.+1350   	; 0x3038 <vDisplayWriteStringAtPos+0x672>
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    2af2:	87 01       	movw	r16, r14
    2af4:	0e 5f       	subi	r16, 0xFE	; 254
    2af6:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2af8:	4a e0       	ldi	r20, 0x0A	; 10
    2afa:	b6 01       	movw	r22, r12
    2afc:	f7 01       	movw	r30, r14
    2afe:	80 81       	ld	r24, Z
    2b00:	91 81       	ldd	r25, Z+1	; 0x01
    2b02:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__itoa_ncheck>
    2b06:	94 01       	movw	r18, r8
    2b08:	d4 01       	movw	r26, r8
    2b0a:	aa 55       	subi	r26, 0x5A	; 90
    2b0c:	b3 4d       	sbci	r27, 0xD3	; 211
    2b0e:	4a eb       	ldi	r20, 0xBA	; 186
    2b10:	5c e2       	ldi	r21, 0x2C	; 44
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	05 c0       	rjmp	.+10     	; 0x2b22 <vDisplayWriteStringAtPos+0x15c>
					str[length+i] = buffer[i];
    2b18:	fa 01       	movw	r30, r20
    2b1a:	61 91       	ld	r22, Z+
    2b1c:	af 01       	movw	r20, r30
    2b1e:	6d 93       	st	X+, r22

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    2b20:	01 96       	adiw	r24, 0x01	; 1
    2b22:	f6 01       	movw	r30, r12
    2b24:	01 90       	ld	r0, Z+
    2b26:	00 20       	and	r0, r0
    2b28:	e9 f7       	brne	.-6      	; 0x2b24 <vDisplayWriteStringAtPos+0x15e>
    2b2a:	31 97       	sbiw	r30, 0x01	; 1
    2b2c:	ea 5b       	subi	r30, 0xBA	; 186
    2b2e:	fc 42       	sbci	r31, 0x2C	; 44
    2b30:	8e 17       	cp	r24, r30
    2b32:	9f 07       	cpc	r25, r31
    2b34:	88 f3       	brcs	.-30     	; 0x2b18 <vDisplayWriteStringAtPos+0x152>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2b36:	4f 01       	movw	r8, r30
    2b38:	82 0e       	add	r8, r18
    2b3a:	93 1e       	adc	r9, r19
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    2b3c:	78 01       	movw	r14, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2b3e:	d2 01       	movw	r26, r4
    2b40:	7b c2       	rjmp	.+1270   	; 0x3038 <vDisplayWriteStringAtPos+0x672>
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2b42:	87 01       	movw	r16, r14
    2b44:	0e 5f       	subi	r16, 0xFE	; 254
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	40 e1       	ldi	r20, 0x10	; 16
    2b4a:	b6 01       	movw	r22, r12
    2b4c:	d7 01       	movw	r26, r14
    2b4e:	8d 91       	ld	r24, X+
    2b50:	9c 91       	ld	r25, X
    2b52:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__itoa_ncheck>
    2b56:	94 01       	movw	r18, r8
    2b58:	f4 01       	movw	r30, r8
    2b5a:	ea 55       	subi	r30, 0x5A	; 90
    2b5c:	f3 4d       	sbci	r31, 0xD3	; 211
    2b5e:	4a eb       	ldi	r20, 0xBA	; 186
    2b60:	5c e2       	ldi	r21, 0x2C	; 44
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	05 c0       	rjmp	.+10     	; 0x2b72 <vDisplayWriteStringAtPos+0x1ac>
					str[length+i] = buffer[i];
    2b68:	da 01       	movw	r26, r20
    2b6a:	6d 91       	ld	r22, X+
    2b6c:	ad 01       	movw	r20, r26
    2b6e:	61 93       	st	Z+, r22

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	d6 01       	movw	r26, r12
    2b74:	0d 90       	ld	r0, X+
    2b76:	00 20       	and	r0, r0
    2b78:	e9 f7       	brne	.-6      	; 0x2b74 <vDisplayWriteStringAtPos+0x1ae>
    2b7a:	11 97       	sbiw	r26, 0x01	; 1
    2b7c:	aa 5b       	subi	r26, 0xBA	; 186
    2b7e:	bc 42       	sbci	r27, 0x2C	; 44
    2b80:	8a 17       	cp	r24, r26
    2b82:	9b 07       	cpc	r25, r27
    2b84:	88 f3       	brcs	.-30     	; 0x2b68 <vDisplayWriteStringAtPos+0x1a2>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2b86:	4d 01       	movw	r8, r26
    2b88:	82 0e       	add	r8, r18
    2b8a:	93 1e       	adc	r9, r19
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2b8c:	78 01       	movw	r14, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2b8e:	d2 01       	movw	r26, r4
    2b90:	53 c2       	rjmp	.+1190   	; 0x3038 <vDisplayWriteStringAtPos+0x672>
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    2b92:	17 01       	movw	r2, r14
    2b94:	b4 e0       	ldi	r27, 0x04	; 4
    2b96:	2b 0e       	add	r2, r27
    2b98:	31 1c       	adc	r3, r1
    2b9a:	d7 01       	movw	r26, r14
    2b9c:	8d 91       	ld	r24, X+
    2b9e:	9d 91       	ld	r25, X+
    2ba0:	0d 90       	ld	r0, X+
    2ba2:	bc 91       	ld	r27, X
    2ba4:	a0 2d       	mov	r26, r0
    2ba6:	8f 8b       	std	Y+23, r24	; 0x17
    2ba8:	98 8f       	std	Y+24, r25	; 0x18
    2baa:	a9 8f       	std	Y+25, r26	; 0x19
    2bac:	ba 8f       	std	Y+26, r27	; 0x1a

    int exponent = 0;
    int places = 0;
    static const int width = 4;

    if (value == 0.0) {
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	a9 01       	movw	r20, r18
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    2bbc:	81 11       	cpse	r24, r1
    2bbe:	05 c0       	rjmp	.+10     	; 0x2bca <vDisplayWriteStringAtPos+0x204>
        buffer[0] = '0';
    2bc0:	20 e3       	ldi	r18, 0x30	; 48
    2bc2:	f6 01       	movw	r30, r12
    2bc4:	20 83       	st	Z, r18
        buffer[1] = '\0';
    2bc6:	11 82       	std	Z+1, r1	; 0x01
    2bc8:	04 c1       	rjmp	.+520    	; 0x2dd2 <vDisplayWriteStringAtPos+0x40c>
        return;
    }         

    if (value < 0.0) {
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	a9 01       	movw	r20, r18
    2bd0:	6f 89       	ldd	r22, Y+23	; 0x17
    2bd2:	78 8d       	ldd	r23, Y+24	; 0x18
    2bd4:	89 8d       	ldd	r24, Y+25	; 0x19
    2bd6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bd8:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    2bdc:	88 23       	and	r24, r24
    2bde:	9c f4       	brge	.+38     	; 0x2c06 <vDisplayWriteStringAtPos+0x240>
        *buffer++ = '-';
    2be0:	ed e2       	ldi	r30, 0x2D	; 45
    2be2:	d6 01       	movw	r26, r12
    2be4:	ec 93       	st	X, r30
        value = -value;
    2be6:	8f 89       	ldd	r24, Y+23	; 0x17
    2be8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bea:	a9 8d       	ldd	r26, Y+25	; 0x19
    2bec:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2bee:	b0 58       	subi	r27, 0x80	; 128
    2bf0:	8f 8b       	std	Y+23, r24	; 0x17
    2bf2:	98 8f       	std	Y+24, r25	; 0x18
    2bf4:	a9 8f       	std	Y+25, r26	; 0x19
    2bf6:	ba 8f       	std	Y+26, r27	; 0x1a
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
        *buffer++ = '-';
    2bf8:	0f 2e       	mov	r0, r31
    2bfa:	fb eb       	ldi	r31, 0xBB	; 187
    2bfc:	6f 2e       	mov	r6, r31
    2bfe:	fc e2       	ldi	r31, 0x2C	; 44
    2c00:	7f 2e       	mov	r7, r31
    2c02:	f0 2d       	mov	r31, r0
    2c04:	01 c0       	rjmp	.+2      	; 0x2c08 <vDisplayWriteStringAtPos+0x242>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
    2c06:	36 01       	movw	r6, r12

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e8       	ldi	r20, 0x80	; 128
    2c0e:	5f e3       	ldi	r21, 0x3F	; 63
    2c10:	6f 89       	ldd	r22, Y+23	; 0x17
    2c12:	78 8d       	ldd	r23, Y+24	; 0x18
    2c14:	89 8d       	ldd	r24, Y+25	; 0x19
    2c16:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c18:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
    2c1c:	88 23       	and	r24, r24
    2c1e:	0c f4       	brge	.+2      	; 0x2c22 <vDisplayWriteStringAtPos+0x25c>
    2c20:	44 c2       	rjmp	.+1160   	; 0x30aa <vDisplayWriteStringAtPos+0x6e4>
    2c22:	00 e0       	ldi	r16, 0x00	; 0
    2c24:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e2       	ldi	r20, 0x20	; 32
    2c2c:	51 e4       	ldi	r21, 0x41	; 65
    2c2e:	6f 89       	ldd	r22, Y+23	; 0x17
    2c30:	78 8d       	ldd	r23, Y+24	; 0x18
    2c32:	89 8d       	ldd	r24, Y+25	; 0x19
    2c34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c36:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__divsf3>
    2c3a:	6f 8b       	std	Y+23, r22	; 0x17
    2c3c:	78 8f       	std	Y+24, r23	; 0x18
    2c3e:	89 8f       	std	Y+25, r24	; 0x19
    2c40:	9a 8f       	std	Y+26, r25	; 0x1a
        ++exponent;
    2c42:	0f 5f       	subi	r16, 0xFF	; 255
    2c44:	1f 4f       	sbci	r17, 0xFF	; 255

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e8       	ldi	r20, 0x80	; 128
    2c4c:	5f e3       	ldi	r21, 0x3F	; 63
    2c4e:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
    2c52:	88 23       	and	r24, r24
    2c54:	44 f7       	brge	.-48     	; 0x2c26 <vDisplayWriteStringAtPos+0x260>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2c56:	2d ec       	ldi	r18, 0xCD	; 205
    2c58:	3c ec       	ldi	r19, 0xCC	; 204
    2c5a:	4c ec       	ldi	r20, 0xCC	; 204
    2c5c:	5d e3       	ldi	r21, 0x3D	; 61
    2c5e:	6f 89       	ldd	r22, Y+23	; 0x17
    2c60:	78 8d       	ldd	r23, Y+24	; 0x18
    2c62:	89 8d       	ldd	r24, Y+25	; 0x19
    2c64:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c66:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    2c6a:	88 23       	and	r24, r24
    2c6c:	1c f0       	brlt	.+6      	; 0x2c74 <vDisplayWriteStringAtPos+0x2ae>
    2c6e:	1a c0       	rjmp	.+52     	; 0x2ca4 <vDisplayWriteStringAtPos+0x2de>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    2c70:	00 e0       	ldi	r16, 0x00	; 0
    2c72:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
        value *= 10.0;
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e2       	ldi	r20, 0x20	; 32
    2c7a:	51 e4       	ldi	r21, 0x41	; 65
    2c7c:	6f 89       	ldd	r22, Y+23	; 0x17
    2c7e:	78 8d       	ldd	r23, Y+24	; 0x18
    2c80:	89 8d       	ldd	r24, Y+25	; 0x19
    2c82:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c84:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    2c88:	6f 8b       	std	Y+23, r22	; 0x17
    2c8a:	78 8f       	std	Y+24, r23	; 0x18
    2c8c:	89 8f       	std	Y+25, r24	; 0x19
    2c8e:	9a 8f       	std	Y+26, r25	; 0x1a
        --exponent;
    2c90:	01 50       	subi	r16, 0x01	; 1
    2c92:	11 09       	sbc	r17, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2c94:	2d ec       	ldi	r18, 0xCD	; 205
    2c96:	3c ec       	ldi	r19, 0xCC	; 204
    2c98:	4c ec       	ldi	r20, 0xCC	; 204
    2c9a:	5d e3       	ldi	r21, 0x3D	; 61
    2c9c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    2ca0:	88 23       	and	r24, r24
    2ca2:	44 f3       	brlt	.-48     	; 0x2c74 <vDisplayWriteStringAtPos+0x2ae>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2ca4:	10 16       	cp	r1, r16
    2ca6:	11 06       	cpc	r1, r17
    2ca8:	ac f5       	brge	.+106    	; 0x2d14 <vDisplayWriteStringAtPos+0x34e>
    2caa:	73 01       	movw	r14, r6
    2cac:	d3 01       	movw	r26, r6
    2cae:	a0 0f       	add	r26, r16
    2cb0:	b1 1f       	adc	r27, r17
    2cb2:	ac 8f       	std	Y+28, r26	; 0x1c
    2cb4:	bd 8f       	std	Y+29, r27	; 0x1d
    2cb6:	3d 01       	movw	r6, r26
    2cb8:	6f 89       	ldd	r22, Y+23	; 0x17
    2cba:	78 8d       	ldd	r23, Y+24	; 0x18
    2cbc:	89 8d       	ldd	r24, Y+25	; 0x19
    2cbe:	9a 8d       	ldd	r25, Y+26	; 0x1a
        int digit = value * 10;
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e2       	ldi	r20, 0x20	; 32
    2cc6:	51 e4       	ldi	r21, 0x41	; 65
    2cc8:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    2ccc:	6f 8b       	std	Y+23, r22	; 0x17
    2cce:	78 8f       	std	Y+24, r23	; 0x18
    2cd0:	89 8f       	std	Y+25, r24	; 0x19
    2cd2:	9a 8f       	std	Y+26, r25	; 0x1a
    2cd4:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__fixsfsi>
        *buffer++ = digit + '0';
    2cd8:	20 e3       	ldi	r18, 0x30	; 48
    2cda:	26 0f       	add	r18, r22
    2cdc:	f7 01       	movw	r30, r14
    2cde:	21 93       	st	Z+, r18
    2ce0:	7f 01       	movw	r14, r30
        value = value * 10 - digit;
    2ce2:	07 2e       	mov	r0, r23
    2ce4:	00 0c       	add	r0, r0
    2ce6:	88 0b       	sbc	r24, r24
    2ce8:	99 0b       	sbc	r25, r25
    2cea:	0e 94 a2 19 	call	0x3344	; 0x3344 <__floatsisf>
    2cee:	9b 01       	movw	r18, r22
    2cf0:	ac 01       	movw	r20, r24
    2cf2:	6f 89       	ldd	r22, Y+23	; 0x17
    2cf4:	78 8d       	ldd	r23, Y+24	; 0x18
    2cf6:	89 8d       	ldd	r24, Y+25	; 0x19
    2cf8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cfa:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2cfe:	e6 14       	cp	r14, r6
    2d00:	f7 04       	cpc	r15, r7
    2d02:	f1 f6       	brne	.-68     	; 0x2cc0 <vDisplayWriteStringAtPos+0x2fa>
    2d04:	6f 8b       	std	Y+23, r22	; 0x17
    2d06:	78 8f       	std	Y+24, r23	; 0x18
    2d08:	89 8f       	std	Y+25, r24	; 0x19
    2d0a:	9a 8f       	std	Y+26, r25	; 0x1a
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    2d0c:	01 15       	cp	r16, r1
    2d0e:	11 05       	cpc	r17, r1
    2d10:	89 f4       	brne	.+34     	; 0x2d34 <vDisplayWriteStringAtPos+0x36e>
    2d12:	db c1       	rjmp	.+950    	; 0x30ca <vDisplayWriteStringAtPos+0x704>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2d14:	c8 01       	movw	r24, r16
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    2d16:	e0 e3       	ldi	r30, 0x30	; 48
    2d18:	d3 01       	movw	r26, r6
    2d1a:	ec 93       	st	X, r30

    *buffer++ = '.';
    2d1c:	73 01       	movw	r14, r6
    2d1e:	f2 e0       	ldi	r31, 0x02	; 2
    2d20:	ef 0e       	add	r14, r31
    2d22:	f1 1c       	adc	r15, r1
    2d24:	2e e2       	ldi	r18, 0x2E	; 46
    2d26:	11 96       	adiw	r26, 0x01	; 1
    2d28:	2c 93       	st	X, r18

    while (exponent < 0 && places < width) {
    2d2a:	99 23       	and	r25, r25
    2d2c:	6c f0       	brlt	.+26     	; 0x2d48 <vDisplayWriteStringAtPos+0x382>
    2d2e:	00 e0       	ldi	r16, 0x00	; 0
    2d30:	10 e0       	ldi	r17, 0x00	; 0
    2d32:	1f c0       	rjmp	.+62     	; 0x2d72 <vDisplayWriteStringAtPos+0x3ac>
    }

    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';
    2d34:	ec 8c       	ldd	r14, Y+28	; 0x1c
    2d36:	fd 8c       	ldd	r15, Y+29	; 0x1d
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	e3 1a       	sub	r14, r19
    2d3c:	f3 0a       	sbc	r15, r19
    2d3e:	ee e2       	ldi	r30, 0x2E	; 46
    2d40:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2d42:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2d44:	ec 93       	st	X, r30
    2d46:	12 c0       	rjmp	.+36     	; 0x2d6c <vDisplayWriteStringAtPos+0x3a6>

    while (exponent < 0 && places < width) {
    2d48:	00 e0       	ldi	r16, 0x00	; 0
    2d4a:	10 e0       	ldi	r17, 0x00	; 0
        *buffer++ = '0';
    2d4c:	ff ef       	ldi	r31, 0xFF	; 255
    2d4e:	ef 1a       	sub	r14, r31
    2d50:	ff 0a       	sbc	r15, r31
    2d52:	f7 01       	movw	r30, r14
    2d54:	31 97       	sbiw	r30, 0x01	; 1
    2d56:	20 e3       	ldi	r18, 0x30	; 48
    2d58:	20 83       	st	Z, r18
        --exponent;
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
        ++places;
    2d5c:	0f 5f       	subi	r16, 0xFF	; 255
    2d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    2d60:	99 23       	and	r25, r25
    2d62:	24 f4       	brge	.+8      	; 0x2d6c <vDisplayWriteStringAtPos+0x3a6>
    2d64:	04 30       	cpi	r16, 0x04	; 4
    2d66:	11 05       	cpc	r17, r1
    2d68:	8c f3       	brlt	.-30     	; 0x2d4c <vDisplayWriteStringAtPos+0x386>
    2d6a:	31 c0       	rjmp	.+98     	; 0x2dce <vDisplayWriteStringAtPos+0x408>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    2d6c:	04 30       	cpi	r16, 0x04	; 4
    2d6e:	11 05       	cpc	r17, r1
    2d70:	74 f5       	brge	.+92     	; 0x2dce <vDisplayWriteStringAtPos+0x408>
    2d72:	37 01       	movw	r6, r14
    2d74:	84 e0       	ldi	r24, 0x04	; 4
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	80 1b       	sub	r24, r16
    2d7a:	91 0b       	sbc	r25, r17
    2d7c:	e8 0e       	add	r14, r24
    2d7e:	f9 1e       	adc	r15, r25
    2d80:	87 01       	movw	r16, r14
    2d82:	6f 89       	ldd	r22, Y+23	; 0x17
    2d84:	78 8d       	ldd	r23, Y+24	; 0x18
    2d86:	89 8d       	ldd	r24, Y+25	; 0x19
    2d88:	9a 8d       	ldd	r25, Y+26	; 0x1a
        int digit = value * 10.0;
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e2       	ldi	r20, 0x20	; 32
    2d90:	51 e4       	ldi	r21, 0x41	; 65
    2d92:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    2d96:	6f 8b       	std	Y+23, r22	; 0x17
    2d98:	78 8f       	std	Y+24, r23	; 0x18
    2d9a:	89 8f       	std	Y+25, r24	; 0x19
    2d9c:	9a 8f       	std	Y+26, r25	; 0x1a
    2d9e:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__fixsfsi>
        *buffer++ = digit + '0';
    2da2:	20 e3       	ldi	r18, 0x30	; 48
    2da4:	26 0f       	add	r18, r22
    2da6:	d3 01       	movw	r26, r6
    2da8:	2d 93       	st	X+, r18
    2daa:	3d 01       	movw	r6, r26
        value = value * 10.0 - digit;
    2dac:	07 2e       	mov	r0, r23
    2dae:	00 0c       	add	r0, r0
    2db0:	88 0b       	sbc	r24, r24
    2db2:	99 0b       	sbc	r25, r25
    2db4:	0e 94 a2 19 	call	0x3344	; 0x3344 <__floatsisf>
    2db8:	9b 01       	movw	r18, r22
    2dba:	ac 01       	movw	r20, r24
    2dbc:	6f 89       	ldd	r22, Y+23	; 0x17
    2dbe:	78 8d       	ldd	r23, Y+24	; 0x18
    2dc0:	89 8d       	ldd	r24, Y+25	; 0x19
    2dc2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2dc4:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    2dc8:	60 16       	cp	r6, r16
    2dca:	71 06       	cpc	r7, r17
    2dcc:	f1 f6       	brne	.-68     	; 0x2d8a <vDisplayWriteStringAtPos+0x3c4>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    2dce:	f7 01       	movw	r30, r14
    2dd0:	10 82       	st	Z, r1
    2dd2:	94 01       	movw	r18, r8
    2dd4:	f4 01       	movw	r30, r8
    2dd6:	ea 55       	subi	r30, 0x5A	; 90
    2dd8:	f3 4d       	sbci	r31, 0xD3	; 211
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    2dda:	4a eb       	ldi	r20, 0xBA	; 186
    2ddc:	5c e2       	ldi	r21, 0x2C	; 44
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	05 c0       	rjmp	.+10     	; 0x2dee <vDisplayWriteStringAtPos+0x428>

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    2de4:	da 01       	movw	r26, r20
    2de6:	6d 91       	ld	r22, X+
    2de8:	ad 01       	movw	r20, r26
    2dea:	61 93       	st	Z+, r22
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    2dec:	01 96       	adiw	r24, 0x01	; 1
    2dee:	d6 01       	movw	r26, r12
    2df0:	0d 90       	ld	r0, X+
    2df2:	00 20       	and	r0, r0
    2df4:	e9 f7       	brne	.-6      	; 0x2df0 <vDisplayWriteStringAtPos+0x42a>
    2df6:	11 97       	sbiw	r26, 0x01	; 1
    2df8:	aa 5b       	subi	r26, 0xBA	; 186
    2dfa:	bc 42       	sbci	r27, 0x2C	; 44
    2dfc:	8a 17       	cp	r24, r26
    2dfe:	9b 07       	cpc	r25, r27
    2e00:	88 f3       	brcs	.-30     	; 0x2de4 <vDisplayWriteStringAtPos+0x41e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2e02:	4d 01       	movw	r8, r26
    2e04:	82 0e       	add	r8, r18
    2e06:	93 1e       	adc	r9, r19
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    2e08:	71 01       	movw	r14, r2
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2e0a:	d2 01       	movw	r26, r4
    2e0c:	15 c1       	rjmp	.+554    	; 0x3038 <vDisplayWriteStringAtPos+0x672>
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    2e0e:	17 01       	movw	r2, r14
    2e10:	b4 e0       	ldi	r27, 0x04	; 4
    2e12:	2b 0e       	add	r2, r27
    2e14:	31 1c       	adc	r3, r1
    2e16:	d7 01       	movw	r26, r14
    2e18:	8d 91       	ld	r24, X+
    2e1a:	9d 91       	ld	r25, X+
    2e1c:	0d 90       	ld	r0, X+
    2e1e:	bc 91       	ld	r27, X
    2e20:	a0 2d       	mov	r26, r0
    2e22:	8f 8b       	std	Y+23, r24	; 0x17
    2e24:	98 8f       	std	Y+24, r25	; 0x18
    2e26:	a9 8f       	std	Y+25, r26	; 0x19
    2e28:	ba 8f       	std	Y+26, r27	; 0x1a

void ftoa_sci(char *buffer, double value) {
    int exponent = 0;    
    static const int width = 4;

    if (value == 0.0) {
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	a9 01       	movw	r20, r18
    2e30:	bc 01       	movw	r22, r24
    2e32:	cd 01       	movw	r24, r26
    2e34:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    2e38:	81 11       	cpse	r24, r1
    2e3a:	05 c0       	rjmp	.+10     	; 0x2e46 <vDisplayWriteStringAtPos+0x480>
        buffer[0] = '0';
    2e3c:	20 e3       	ldi	r18, 0x30	; 48
    2e3e:	f6 01       	movw	r30, r12
    2e40:	20 83       	st	Z, r18
        buffer[1] = '\0';
    2e42:	11 82       	std	Z+1, r1	; 0x01
    2e44:	ca c0       	rjmp	.+404    	; 0x2fda <vDisplayWriteStringAtPos+0x614>
        return;
    }

    if (value < 0.0) {
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	a9 01       	movw	r20, r18
    2e4c:	6f 89       	ldd	r22, Y+23	; 0x17
    2e4e:	78 8d       	ldd	r23, Y+24	; 0x18
    2e50:	89 8d       	ldd	r24, Y+25	; 0x19
    2e52:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e54:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    2e58:	88 23       	and	r24, r24
    2e5a:	9c f4       	brge	.+38     	; 0x2e82 <vDisplayWriteStringAtPos+0x4bc>
        *buffer++ = '-';
    2e5c:	ed e2       	ldi	r30, 0x2D	; 45
    2e5e:	d6 01       	movw	r26, r12
    2e60:	ec 93       	st	X, r30
        value = -value;
    2e62:	8f 89       	ldd	r24, Y+23	; 0x17
    2e64:	98 8d       	ldd	r25, Y+24	; 0x18
    2e66:	a9 8d       	ldd	r26, Y+25	; 0x19
    2e68:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2e6a:	b0 58       	subi	r27, 0x80	; 128
    2e6c:	8f 8b       	std	Y+23, r24	; 0x17
    2e6e:	98 8f       	std	Y+24, r25	; 0x18
    2e70:	a9 8f       	std	Y+25, r26	; 0x19
    2e72:	ba 8f       	std	Y+26, r27	; 0x1a
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
        *buffer++ = '-';
    2e74:	0f 2e       	mov	r0, r31
    2e76:	fb eb       	ldi	r31, 0xBB	; 187
    2e78:	6f 2e       	mov	r6, r31
    2e7a:	fc e2       	ldi	r31, 0x2C	; 44
    2e7c:	7f 2e       	mov	r7, r31
    2e7e:	f0 2d       	mov	r31, r0
    2e80:	01 c0       	rjmp	.+2      	; 0x2e84 <vDisplayWriteStringAtPos+0x4be>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
    2e82:	36 01       	movw	r6, r12

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	6f 89       	ldd	r22, Y+23	; 0x17
    2e8e:	78 8d       	ldd	r23, Y+24	; 0x18
    2e90:	89 8d       	ldd	r24, Y+25	; 0x19
    2e92:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e94:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
    2e98:	88 23       	and	r24, r24
    2e9a:	dc f0       	brlt	.+54     	; 0x2ed2 <vDisplayWriteStringAtPos+0x50c>
    2e9c:	00 e0       	ldi	r16, 0x00	; 0
    2e9e:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e2       	ldi	r20, 0x20	; 32
    2ea6:	51 e4       	ldi	r21, 0x41	; 65
    2ea8:	6f 89       	ldd	r22, Y+23	; 0x17
    2eaa:	78 8d       	ldd	r23, Y+24	; 0x18
    2eac:	89 8d       	ldd	r24, Y+25	; 0x19
    2eae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2eb0:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__divsf3>
    2eb4:	6f 8b       	std	Y+23, r22	; 0x17
    2eb6:	78 8f       	std	Y+24, r23	; 0x18
    2eb8:	89 8f       	std	Y+25, r24	; 0x19
    2eba:	9a 8f       	std	Y+26, r25	; 0x1a
        ++exponent;
    2ebc:	0f 5f       	subi	r16, 0xFF	; 255
    2ebe:	1f 4f       	sbci	r17, 0xFF	; 255

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e8       	ldi	r20, 0x80	; 128
    2ec6:	5f e3       	ldi	r21, 0x3F	; 63
    2ec8:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
    2ecc:	88 23       	and	r24, r24
    2ece:	44 f7       	brge	.-48     	; 0x2ea0 <vDisplayWriteStringAtPos+0x4da>
    2ed0:	02 c0       	rjmp	.+4      	; 0x2ed6 <vDisplayWriteStringAtPos+0x510>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    2ed2:	00 e0       	ldi	r16, 0x00	; 0
    2ed4:	10 e0       	ldi	r17, 0x00	; 0
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2ed6:	2d ec       	ldi	r18, 0xCD	; 205
    2ed8:	3c ec       	ldi	r19, 0xCC	; 204
    2eda:	4c ec       	ldi	r20, 0xCC	; 204
    2edc:	5d e3       	ldi	r21, 0x3D	; 61
    2ede:	6f 89       	ldd	r22, Y+23	; 0x17
    2ee0:	78 8d       	ldd	r23, Y+24	; 0x18
    2ee2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ee4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ee6:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    2eea:	88 23       	and	r24, r24
    2eec:	c4 f4       	brge	.+48     	; 0x2f1e <vDisplayWriteStringAtPos+0x558>
        value *= 10.0;
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e2       	ldi	r20, 0x20	; 32
    2ef4:	51 e4       	ldi	r21, 0x41	; 65
    2ef6:	6f 89       	ldd	r22, Y+23	; 0x17
    2ef8:	78 8d       	ldd	r23, Y+24	; 0x18
    2efa:	89 8d       	ldd	r24, Y+25	; 0x19
    2efc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2efe:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    2f02:	6f 8b       	std	Y+23, r22	; 0x17
    2f04:	78 8f       	std	Y+24, r23	; 0x18
    2f06:	89 8f       	std	Y+25, r24	; 0x19
    2f08:	9a 8f       	std	Y+26, r25	; 0x1a
        --exponent;
    2f0a:	01 50       	subi	r16, 0x01	; 1
    2f0c:	11 09       	sbc	r17, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2f0e:	2d ec       	ldi	r18, 0xCD	; 205
    2f10:	3c ec       	ldi	r19, 0xCC	; 204
    2f12:	4c ec       	ldi	r20, 0xCC	; 204
    2f14:	5d e3       	ldi	r21, 0x3D	; 61
    2f16:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    2f1a:	88 23       	and	r24, r24
    2f1c:	44 f3       	brlt	.-48     	; 0x2eee <vDisplayWriteStringAtPos+0x528>
        value = -value;
    }

    exponent = normalize(&value);

    int digit = value * 10.0;
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e2       	ldi	r20, 0x20	; 32
    2f24:	51 e4       	ldi	r21, 0x41	; 65
    2f26:	6f 89       	ldd	r22, Y+23	; 0x17
    2f28:	78 8d       	ldd	r23, Y+24	; 0x18
    2f2a:	89 8d       	ldd	r24, Y+25	; 0x19
    2f2c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f2e:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    2f32:	6f 8b       	std	Y+23, r22	; 0x17
    2f34:	78 8f       	std	Y+24, r23	; 0x18
    2f36:	89 8f       	std	Y+25, r24	; 0x19
    2f38:	9a 8f       	std	Y+26, r25	; 0x1a
    2f3a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__fixsfsi>
    *buffer++ = digit + '0';
    2f3e:	20 e3       	ldi	r18, 0x30	; 48
    2f40:	26 0f       	add	r18, r22
    2f42:	d3 01       	movw	r26, r6
    2f44:	2c 93       	st	X, r18
    value = value * 10.0 - digit;
    2f46:	07 2e       	mov	r0, r23
    2f48:	00 0c       	add	r0, r0
    2f4a:	88 0b       	sbc	r24, r24
    2f4c:	99 0b       	sbc	r25, r25
    2f4e:	0e 94 a2 19 	call	0x3344	; 0x3344 <__floatsisf>
    2f52:	9b 01       	movw	r18, r22
    2f54:	ac 01       	movw	r20, r24
    2f56:	6f 89       	ldd	r22, Y+23	; 0x17
    2f58:	78 8d       	ldd	r23, Y+24	; 0x18
    2f5a:	89 8d       	ldd	r24, Y+25	; 0x19
    2f5c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f5e:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
    --exponent;
    2f62:	f8 01       	movw	r30, r16
    2f64:	31 97       	sbiw	r30, 0x01	; 1
    2f66:	ec 8f       	std	Y+28, r30	; 0x1c
    2f68:	fd 8f       	std	Y+29, r31	; 0x1d

    *buffer++ = '.';
    2f6a:	ee e2       	ldi	r30, 0x2E	; 46
    2f6c:	d3 01       	movw	r26, r6
    2f6e:	11 96       	adiw	r26, 0x01	; 1
    2f70:	ec 93       	st	X, r30
    2f72:	83 01       	movw	r16, r6
    2f74:	0e 5f       	subi	r16, 0xFE	; 254
    2f76:	1f 4f       	sbci	r17, 0xFF	; 255
    2f78:	73 01       	movw	r14, r6
    2f7a:	f6 e0       	ldi	r31, 0x06	; 6
    2f7c:	ef 0e       	add	r14, r31
    2f7e:	f1 1c       	adc	r15, r1

    for (int i = 0; i < width; i++) {
        int digit = value * 10.0;
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e2       	ldi	r20, 0x20	; 32
    2f86:	51 e4       	ldi	r21, 0x41	; 65
    2f88:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    2f8c:	6f 8b       	std	Y+23, r22	; 0x17
    2f8e:	78 8f       	std	Y+24, r23	; 0x18
    2f90:	89 8f       	std	Y+25, r24	; 0x19
    2f92:	9a 8f       	std	Y+26, r25	; 0x1a
    2f94:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__fixsfsi>
        *buffer++ = digit + '0';
    2f98:	20 e3       	ldi	r18, 0x30	; 48
    2f9a:	26 0f       	add	r18, r22
    2f9c:	d8 01       	movw	r26, r16
    2f9e:	2d 93       	st	X+, r18
    2fa0:	8d 01       	movw	r16, r26
        value = value * 10.0 - digit;
    2fa2:	07 2e       	mov	r0, r23
    2fa4:	00 0c       	add	r0, r0
    2fa6:	88 0b       	sbc	r24, r24
    2fa8:	99 0b       	sbc	r25, r25
    2faa:	0e 94 a2 19 	call	0x3344	; 0x3344 <__floatsisf>
    2fae:	9b 01       	movw	r18, r22
    2fb0:	ac 01       	movw	r20, r24
    2fb2:	6f 89       	ldd	r22, Y+23	; 0x17
    2fb4:	78 8d       	ldd	r23, Y+24	; 0x18
    2fb6:	89 8d       	ldd	r24, Y+25	; 0x19
    2fb8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fba:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    2fbe:	0e 15       	cp	r16, r14
    2fc0:	1f 05       	cpc	r17, r15
    2fc2:	f1 f6       	brne	.-68     	; 0x2f80 <vDisplayWriteStringAtPos+0x5ba>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    2fc4:	25 e6       	ldi	r18, 0x65	; 101
    2fc6:	f3 01       	movw	r30, r6
    2fc8:	26 83       	std	Z+6, r18	; 0x06
    2fca:	b3 01       	movw	r22, r6
    2fcc:	69 5f       	subi	r22, 0xF9	; 249
    2fce:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd0:	4a e0       	ldi	r20, 0x0A	; 10
    2fd2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fd4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2fd6:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__itoa_ncheck>
    2fda:	94 01       	movw	r18, r8
    2fdc:	f4 01       	movw	r30, r8
    2fde:	ea 55       	subi	r30, 0x5A	; 90
    2fe0:	f3 4d       	sbci	r31, 0xD3	; 211
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    2fe2:	4a eb       	ldi	r20, 0xBA	; 186
    2fe4:	5c e2       	ldi	r21, 0x2C	; 44
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	05 c0       	rjmp	.+10     	; 0x2ff6 <vDisplayWriteStringAtPos+0x630>

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    2fec:	da 01       	movw	r26, r20
    2fee:	6d 91       	ld	r22, X+
    2ff0:	ad 01       	movw	r20, r26
    2ff2:	61 93       	st	Z+, r22
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    2ff4:	01 96       	adiw	r24, 0x01	; 1
    2ff6:	d6 01       	movw	r26, r12
    2ff8:	0d 90       	ld	r0, X+
    2ffa:	00 20       	and	r0, r0
    2ffc:	e9 f7       	brne	.-6      	; 0x2ff8 <vDisplayWriteStringAtPos+0x632>
    2ffe:	11 97       	sbiw	r26, 0x01	; 1
    3000:	aa 5b       	subi	r26, 0xBA	; 186
    3002:	bc 42       	sbci	r27, 0x2C	; 44
    3004:	8a 17       	cp	r24, r26
    3006:	9b 07       	cpc	r25, r27
    3008:	88 f3       	brcs	.-30     	; 0x2fec <vDisplayWriteStringAtPos+0x626>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    300a:	4d 01       	movw	r8, r26
    300c:	82 0e       	add	r8, r18
    300e:	93 1e       	adc	r9, r19
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    3010:	71 01       	movw	r14, r2
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    3012:	d2 01       	movw	r26, r4
    3014:	11 c0       	rjmp	.+34     	; 0x3038 <vDisplayWriteStringAtPos+0x672>
				break;
			}
		}
		else {
			str[length] = ch;
			if(str[length] == '\n') {
    3016:	8a 30       	cpi	r24, 0x0A	; 10
    3018:	29 f0       	breq	.+10     	; 0x3024 <vDisplayWriteStringAtPos+0x65e>
				length += strlen(buffer);
				break;
			}
		}
		else {
			str[length] = ch;
    301a:	f4 01       	movw	r30, r8
    301c:	ea 55       	subi	r30, 0x5A	; 90
    301e:	f3 4d       	sbci	r31, 0xD3	; 211
    3020:	80 83       	st	Z, r24
    3022:	04 c0       	rjmp	.+8      	; 0x302c <vDisplayWriteStringAtPos+0x666>
			if(str[length] == '\n') {
				str[length] = '\0';				
    3024:	f4 01       	movw	r30, r8
    3026:	ea 55       	subi	r30, 0x5A	; 90
    3028:	f3 4d       	sbci	r31, 0xD3	; 211
    302a:	10 82       	st	Z, r1
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    302c:	11 96       	adiw	r26, 0x01	; 1
		else {
			str[length] = ch;
			if(str[length] == '\n') {
				str[length] = '\0';				
			}
			length++;
    302e:	ef ef       	ldi	r30, 0xFF	; 255
    3030:	8e 1a       	sub	r8, r30
    3032:	9e 0a       	sbc	r9, r30
    3034:	01 c0       	rjmp	.+2      	; 0x3038 <vDisplayWriteStringAtPos+0x672>
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    3036:	d2 01       	movw	r26, r4
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    3038:	8c 91       	ld	r24, X
    303a:	81 11       	cpse	r24, r1
    303c:	01 cd       	rjmp	.-1534   	; 0x2a40 <vDisplayWriteStringAtPos+0x7a>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    303e:	8d a9       	ldd	r24, Y+53	; 0x35
    3040:	9e a9       	ldd	r25, Y+54	; 0x36
    3042:	88 0d       	add	r24, r8
    3044:	99 1d       	adc	r25, r9
    3046:	44 97       	sbiw	r24, 0x14	; 20
    3048:	3c f0       	brlt	.+14     	; 0x3058 <vDisplayWriteStringAtPos+0x692>
		length = 20-pos;
    304a:	84 e1       	ldi	r24, 0x14	; 20
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	4c 01       	movw	r8, r24
    3050:	2d a9       	ldd	r18, Y+53	; 0x35
    3052:	3e a9       	ldd	r19, Y+54	; 0x36
    3054:	82 1a       	sub	r8, r18
    3056:	93 0a       	sbc	r9, r19
    3058:	fe 01       	movw	r30, r28
    305a:	33 96       	adiw	r30, 0x03	; 3
    305c:	ce 01       	movw	r24, r28
    305e:	47 96       	adiw	r24, 0x17	; 23
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    3060:	df 01       	movw	r26, r30
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
    3062:	1d 92       	st	X+, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    3064:	a8 17       	cp	r26, r24
    3066:	b9 07       	cpc	r27, r25
    3068:	e1 f7       	brne	.-8      	; 0x3062 <vDisplayWriteStringAtPos+0x69c>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    306a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    306c:	39 83       	std	Y+1, r19	; 0x01
	newLine.displayPos = pos;
    306e:	8d a9       	ldd	r24, Y+53	; 0x35
    3070:	8a 83       	std	Y+2, r24	; 0x02
	for(int i = 0; i < length;i++) {
    3072:	18 14       	cp	r1, r8
    3074:	19 04       	cpc	r1, r9
    3076:	5c f4       	brge	.+22     	; 0x308e <vDisplayWriteStringAtPos+0x6c8>
    3078:	ce 01       	movw	r24, r28
    307a:	88 0d       	add	r24, r8
    307c:	99 1d       	adc	r25, r9
    307e:	03 96       	adiw	r24, 0x03	; 3
		newLine.displayBuffer[i] = str[i];
    3080:	d5 01       	movw	r26, r10
    3082:	2d 91       	ld	r18, X+
    3084:	5d 01       	movw	r10, r26
    3086:	21 93       	st	Z+, r18
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    3088:	8e 17       	cp	r24, r30
    308a:	9f 07       	cpc	r25, r31
    308c:	c9 f7       	brne	.-14     	; 0x3080 <vDisplayWriteStringAtPos+0x6ba>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    308e:	00 e0       	ldi	r16, 0x00	; 0
    3090:	2f ef       	ldi	r18, 0xFF	; 255
    3092:	3f ef       	ldi	r19, 0xFF	; 255
    3094:	a9 01       	movw	r20, r18
    3096:	be 01       	movw	r22, r28
    3098:	6f 5f       	subi	r22, 0xFF	; 255
    309a:	7f 4f       	sbci	r23, 0xFF	; 255
    309c:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <displayLineQueue>
    30a0:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <displayLineQueue+0x1>
    30a4:	0e 94 83 07 	call	0xf06	; 0xf06 <xQueueGenericSend>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    30a8:	1b c0       	rjmp	.+54     	; 0x30e0 <vDisplayWriteStringAtPos+0x71a>
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    30aa:	2d ec       	ldi	r18, 0xCD	; 205
    30ac:	3c ec       	ldi	r19, 0xCC	; 204
    30ae:	4c ec       	ldi	r20, 0xCC	; 204
    30b0:	5d e3       	ldi	r21, 0x3D	; 61
    30b2:	6f 89       	ldd	r22, Y+23	; 0x17
    30b4:	78 8d       	ldd	r23, Y+24	; 0x18
    30b6:	89 8d       	ldd	r24, Y+25	; 0x19
    30b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30ba:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    30be:	88 23       	and	r24, r24
    30c0:	0c f4       	brge	.+2      	; 0x30c4 <vDisplayWriteStringAtPos+0x6fe>
    30c2:	d6 cd       	rjmp	.-1108   	; 0x2c70 <vDisplayWriteStringAtPos+0x2aa>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	26 ce       	rjmp	.-948    	; 0x2d16 <vDisplayWriteStringAtPos+0x350>
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    30ca:	20 e3       	ldi	r18, 0x30	; 48
    30cc:	ec 8d       	ldd	r30, Y+28	; 0x1c
    30ce:	fd 8d       	ldd	r31, Y+29	; 0x1d
    30d0:	20 83       	st	Z, r18

    *buffer++ = '.';
    30d2:	7f 01       	movw	r14, r30
    30d4:	32 e0       	ldi	r19, 0x02	; 2
    30d6:	e3 0e       	add	r14, r19
    30d8:	f1 1c       	adc	r15, r1
    30da:	8e e2       	ldi	r24, 0x2E	; 46
    30dc:	81 83       	std	Z+1, r24	; 0x01
    30de:	46 ce       	rjmp	.-884    	; 0x2d6c <vDisplayWriteStringAtPos+0x3a6>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    30e0:	6d 96       	adiw	r28, 0x1d	; 29
    30e2:	cd bf       	out	0x3d, r28	; 61
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	df 91       	pop	r29
    30e8:	cf 91       	pop	r28
    30ea:	1f 91       	pop	r17
    30ec:	0f 91       	pop	r16
    30ee:	ff 90       	pop	r15
    30f0:	ef 90       	pop	r14
    30f2:	df 90       	pop	r13
    30f4:	cf 90       	pop	r12
    30f6:	bf 90       	pop	r11
    30f8:	af 90       	pop	r10
    30fa:	9f 90       	pop	r9
    30fc:	8f 90       	pop	r8
    30fe:	7f 90       	pop	r7
    3100:	6f 90       	pop	r6
    3102:	5f 90       	pop	r5
    3104:	4f 90       	pop	r4
    3106:	3f 90       	pop	r3
    3108:	2f 90       	pop	r2
    310a:	08 95       	ret

0000310c <__subsf3>:
    310c:	50 58       	subi	r21, 0x80	; 128

0000310e <__addsf3>:
    310e:	bb 27       	eor	r27, r27
    3110:	aa 27       	eor	r26, r26
    3112:	0e 94 9e 18 	call	0x313c	; 0x313c <__addsf3x>
    3116:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__fp_round>
    311a:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__fp_pscA>
    311e:	38 f0       	brcs	.+14     	; 0x312e <__addsf3+0x20>
    3120:	0e 94 11 1a 	call	0x3422	; 0x3422 <__fp_pscB>
    3124:	20 f0       	brcs	.+8      	; 0x312e <__addsf3+0x20>
    3126:	39 f4       	brne	.+14     	; 0x3136 <__addsf3+0x28>
    3128:	9f 3f       	cpi	r25, 0xFF	; 255
    312a:	19 f4       	brne	.+6      	; 0x3132 <__addsf3+0x24>
    312c:	26 f4       	brtc	.+8      	; 0x3136 <__addsf3+0x28>
    312e:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_nan>
    3132:	0e f4       	brtc	.+2      	; 0x3136 <__addsf3+0x28>
    3134:	e0 95       	com	r30
    3136:	e7 fb       	bst	r30, 7
    3138:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__fp_inf>

0000313c <__addsf3x>:
    313c:	e9 2f       	mov	r30, r25
    313e:	0e 94 29 1a 	call	0x3452	; 0x3452 <__fp_split3>
    3142:	58 f3       	brcs	.-42     	; 0x311a <__addsf3+0xc>
    3144:	ba 17       	cp	r27, r26
    3146:	62 07       	cpc	r22, r18
    3148:	73 07       	cpc	r23, r19
    314a:	84 07       	cpc	r24, r20
    314c:	95 07       	cpc	r25, r21
    314e:	20 f0       	brcs	.+8      	; 0x3158 <__addsf3x+0x1c>
    3150:	79 f4       	brne	.+30     	; 0x3170 <__addsf3x+0x34>
    3152:	a6 f5       	brtc	.+104    	; 0x31bc <__addsf3x+0x80>
    3154:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__fp_zero>
    3158:	0e f4       	brtc	.+2      	; 0x315c <__addsf3x+0x20>
    315a:	e0 95       	com	r30
    315c:	0b 2e       	mov	r0, r27
    315e:	ba 2f       	mov	r27, r26
    3160:	a0 2d       	mov	r26, r0
    3162:	0b 01       	movw	r0, r22
    3164:	b9 01       	movw	r22, r18
    3166:	90 01       	movw	r18, r0
    3168:	0c 01       	movw	r0, r24
    316a:	ca 01       	movw	r24, r20
    316c:	a0 01       	movw	r20, r0
    316e:	11 24       	eor	r1, r1
    3170:	ff 27       	eor	r31, r31
    3172:	59 1b       	sub	r21, r25
    3174:	99 f0       	breq	.+38     	; 0x319c <__addsf3x+0x60>
    3176:	59 3f       	cpi	r21, 0xF9	; 249
    3178:	50 f4       	brcc	.+20     	; 0x318e <__addsf3x+0x52>
    317a:	50 3e       	cpi	r21, 0xE0	; 224
    317c:	68 f1       	brcs	.+90     	; 0x31d8 <__addsf3x+0x9c>
    317e:	1a 16       	cp	r1, r26
    3180:	f0 40       	sbci	r31, 0x00	; 0
    3182:	a2 2f       	mov	r26, r18
    3184:	23 2f       	mov	r18, r19
    3186:	34 2f       	mov	r19, r20
    3188:	44 27       	eor	r20, r20
    318a:	58 5f       	subi	r21, 0xF8	; 248
    318c:	f3 cf       	rjmp	.-26     	; 0x3174 <__addsf3x+0x38>
    318e:	46 95       	lsr	r20
    3190:	37 95       	ror	r19
    3192:	27 95       	ror	r18
    3194:	a7 95       	ror	r26
    3196:	f0 40       	sbci	r31, 0x00	; 0
    3198:	53 95       	inc	r21
    319a:	c9 f7       	brne	.-14     	; 0x318e <__addsf3x+0x52>
    319c:	7e f4       	brtc	.+30     	; 0x31bc <__addsf3x+0x80>
    319e:	1f 16       	cp	r1, r31
    31a0:	ba 0b       	sbc	r27, r26
    31a2:	62 0b       	sbc	r22, r18
    31a4:	73 0b       	sbc	r23, r19
    31a6:	84 0b       	sbc	r24, r20
    31a8:	ba f0       	brmi	.+46     	; 0x31d8 <__addsf3x+0x9c>
    31aa:	91 50       	subi	r25, 0x01	; 1
    31ac:	a1 f0       	breq	.+40     	; 0x31d6 <__addsf3x+0x9a>
    31ae:	ff 0f       	add	r31, r31
    31b0:	bb 1f       	adc	r27, r27
    31b2:	66 1f       	adc	r22, r22
    31b4:	77 1f       	adc	r23, r23
    31b6:	88 1f       	adc	r24, r24
    31b8:	c2 f7       	brpl	.-16     	; 0x31aa <__addsf3x+0x6e>
    31ba:	0e c0       	rjmp	.+28     	; 0x31d8 <__addsf3x+0x9c>
    31bc:	ba 0f       	add	r27, r26
    31be:	62 1f       	adc	r22, r18
    31c0:	73 1f       	adc	r23, r19
    31c2:	84 1f       	adc	r24, r20
    31c4:	48 f4       	brcc	.+18     	; 0x31d8 <__addsf3x+0x9c>
    31c6:	87 95       	ror	r24
    31c8:	77 95       	ror	r23
    31ca:	67 95       	ror	r22
    31cc:	b7 95       	ror	r27
    31ce:	f7 95       	ror	r31
    31d0:	9e 3f       	cpi	r25, 0xFE	; 254
    31d2:	08 f0       	brcs	.+2      	; 0x31d6 <__addsf3x+0x9a>
    31d4:	b0 cf       	rjmp	.-160    	; 0x3136 <__addsf3+0x28>
    31d6:	93 95       	inc	r25
    31d8:	88 0f       	add	r24, r24
    31da:	08 f0       	brcs	.+2      	; 0x31de <__addsf3x+0xa2>
    31dc:	99 27       	eor	r25, r25
    31de:	ee 0f       	add	r30, r30
    31e0:	97 95       	ror	r25
    31e2:	87 95       	ror	r24
    31e4:	08 95       	ret

000031e6 <__cmpsf2>:
    31e6:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__fp_cmp>
    31ea:	08 f4       	brcc	.+2      	; 0x31ee <__cmpsf2+0x8>
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	08 95       	ret

000031f0 <__divsf3>:
    31f0:	0e 94 0c 19 	call	0x3218	; 0x3218 <__divsf3x>
    31f4:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__fp_round>
    31f8:	0e 94 11 1a 	call	0x3422	; 0x3422 <__fp_pscB>
    31fc:	58 f0       	brcs	.+22     	; 0x3214 <__divsf3+0x24>
    31fe:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__fp_pscA>
    3202:	40 f0       	brcs	.+16     	; 0x3214 <__divsf3+0x24>
    3204:	29 f4       	brne	.+10     	; 0x3210 <__divsf3+0x20>
    3206:	5f 3f       	cpi	r21, 0xFF	; 255
    3208:	29 f0       	breq	.+10     	; 0x3214 <__divsf3+0x24>
    320a:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__fp_inf>
    320e:	51 11       	cpse	r21, r1
    3210:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_szero>
    3214:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_nan>

00003218 <__divsf3x>:
    3218:	0e 94 29 1a 	call	0x3452	; 0x3452 <__fp_split3>
    321c:	68 f3       	brcs	.-38     	; 0x31f8 <__divsf3+0x8>

0000321e <__divsf3_pse>:
    321e:	99 23       	and	r25, r25
    3220:	b1 f3       	breq	.-20     	; 0x320e <__divsf3+0x1e>
    3222:	55 23       	and	r21, r21
    3224:	91 f3       	breq	.-28     	; 0x320a <__divsf3+0x1a>
    3226:	95 1b       	sub	r25, r21
    3228:	55 0b       	sbc	r21, r21
    322a:	bb 27       	eor	r27, r27
    322c:	aa 27       	eor	r26, r26
    322e:	62 17       	cp	r22, r18
    3230:	73 07       	cpc	r23, r19
    3232:	84 07       	cpc	r24, r20
    3234:	38 f0       	brcs	.+14     	; 0x3244 <__divsf3_pse+0x26>
    3236:	9f 5f       	subi	r25, 0xFF	; 255
    3238:	5f 4f       	sbci	r21, 0xFF	; 255
    323a:	22 0f       	add	r18, r18
    323c:	33 1f       	adc	r19, r19
    323e:	44 1f       	adc	r20, r20
    3240:	aa 1f       	adc	r26, r26
    3242:	a9 f3       	breq	.-22     	; 0x322e <__divsf3_pse+0x10>
    3244:	35 d0       	rcall	.+106    	; 0x32b0 <__divsf3_pse+0x92>
    3246:	0e 2e       	mov	r0, r30
    3248:	3a f0       	brmi	.+14     	; 0x3258 <__divsf3_pse+0x3a>
    324a:	e0 e8       	ldi	r30, 0x80	; 128
    324c:	32 d0       	rcall	.+100    	; 0x32b2 <__divsf3_pse+0x94>
    324e:	91 50       	subi	r25, 0x01	; 1
    3250:	50 40       	sbci	r21, 0x00	; 0
    3252:	e6 95       	lsr	r30
    3254:	00 1c       	adc	r0, r0
    3256:	ca f7       	brpl	.-14     	; 0x324a <__divsf3_pse+0x2c>
    3258:	2b d0       	rcall	.+86     	; 0x32b0 <__divsf3_pse+0x92>
    325a:	fe 2f       	mov	r31, r30
    325c:	29 d0       	rcall	.+82     	; 0x32b0 <__divsf3_pse+0x92>
    325e:	66 0f       	add	r22, r22
    3260:	77 1f       	adc	r23, r23
    3262:	88 1f       	adc	r24, r24
    3264:	bb 1f       	adc	r27, r27
    3266:	26 17       	cp	r18, r22
    3268:	37 07       	cpc	r19, r23
    326a:	48 07       	cpc	r20, r24
    326c:	ab 07       	cpc	r26, r27
    326e:	b0 e8       	ldi	r27, 0x80	; 128
    3270:	09 f0       	breq	.+2      	; 0x3274 <__divsf3_pse+0x56>
    3272:	bb 0b       	sbc	r27, r27
    3274:	80 2d       	mov	r24, r0
    3276:	bf 01       	movw	r22, r30
    3278:	ff 27       	eor	r31, r31
    327a:	93 58       	subi	r25, 0x83	; 131
    327c:	5f 4f       	sbci	r21, 0xFF	; 255
    327e:	3a f0       	brmi	.+14     	; 0x328e <__divsf3_pse+0x70>
    3280:	9e 3f       	cpi	r25, 0xFE	; 254
    3282:	51 05       	cpc	r21, r1
    3284:	78 f0       	brcs	.+30     	; 0x32a4 <__divsf3_pse+0x86>
    3286:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__fp_inf>
    328a:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_szero>
    328e:	5f 3f       	cpi	r21, 0xFF	; 255
    3290:	e4 f3       	brlt	.-8      	; 0x328a <__divsf3_pse+0x6c>
    3292:	98 3e       	cpi	r25, 0xE8	; 232
    3294:	d4 f3       	brlt	.-12     	; 0x328a <__divsf3_pse+0x6c>
    3296:	86 95       	lsr	r24
    3298:	77 95       	ror	r23
    329a:	67 95       	ror	r22
    329c:	b7 95       	ror	r27
    329e:	f7 95       	ror	r31
    32a0:	9f 5f       	subi	r25, 0xFF	; 255
    32a2:	c9 f7       	brne	.-14     	; 0x3296 <__divsf3_pse+0x78>
    32a4:	88 0f       	add	r24, r24
    32a6:	91 1d       	adc	r25, r1
    32a8:	96 95       	lsr	r25
    32aa:	87 95       	ror	r24
    32ac:	97 f9       	bld	r25, 7
    32ae:	08 95       	ret
    32b0:	e1 e0       	ldi	r30, 0x01	; 1
    32b2:	66 0f       	add	r22, r22
    32b4:	77 1f       	adc	r23, r23
    32b6:	88 1f       	adc	r24, r24
    32b8:	bb 1f       	adc	r27, r27
    32ba:	62 17       	cp	r22, r18
    32bc:	73 07       	cpc	r23, r19
    32be:	84 07       	cpc	r24, r20
    32c0:	ba 07       	cpc	r27, r26
    32c2:	20 f0       	brcs	.+8      	; 0x32cc <__divsf3_pse+0xae>
    32c4:	62 1b       	sub	r22, r18
    32c6:	73 0b       	sbc	r23, r19
    32c8:	84 0b       	sbc	r24, r20
    32ca:	ba 0b       	sbc	r27, r26
    32cc:	ee 1f       	adc	r30, r30
    32ce:	88 f7       	brcc	.-30     	; 0x32b2 <__divsf3_pse+0x94>
    32d0:	e0 95       	com	r30
    32d2:	08 95       	ret

000032d4 <__fixsfsi>:
    32d4:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__fixunssfsi>
    32d8:	68 94       	set
    32da:	b1 11       	cpse	r27, r1
    32dc:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_szero>
    32e0:	08 95       	ret

000032e2 <__fixunssfsi>:
    32e2:	0e 94 31 1a 	call	0x3462	; 0x3462 <__fp_splitA>
    32e6:	88 f0       	brcs	.+34     	; 0x330a <__fixunssfsi+0x28>
    32e8:	9f 57       	subi	r25, 0x7F	; 127
    32ea:	98 f0       	brcs	.+38     	; 0x3312 <__fixunssfsi+0x30>
    32ec:	b9 2f       	mov	r27, r25
    32ee:	99 27       	eor	r25, r25
    32f0:	b7 51       	subi	r27, 0x17	; 23
    32f2:	b0 f0       	brcs	.+44     	; 0x3320 <__fixunssfsi+0x3e>
    32f4:	e1 f0       	breq	.+56     	; 0x332e <__fixunssfsi+0x4c>
    32f6:	66 0f       	add	r22, r22
    32f8:	77 1f       	adc	r23, r23
    32fa:	88 1f       	adc	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	1a f0       	brmi	.+6      	; 0x3306 <__fixunssfsi+0x24>
    3300:	ba 95       	dec	r27
    3302:	c9 f7       	brne	.-14     	; 0x32f6 <__fixunssfsi+0x14>
    3304:	14 c0       	rjmp	.+40     	; 0x332e <__fixunssfsi+0x4c>
    3306:	b1 30       	cpi	r27, 0x01	; 1
    3308:	91 f0       	breq	.+36     	; 0x332e <__fixunssfsi+0x4c>
    330a:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__fp_zero>
    330e:	b1 e0       	ldi	r27, 0x01	; 1
    3310:	08 95       	ret
    3312:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__fp_zero>
    3316:	67 2f       	mov	r22, r23
    3318:	78 2f       	mov	r23, r24
    331a:	88 27       	eor	r24, r24
    331c:	b8 5f       	subi	r27, 0xF8	; 248
    331e:	39 f0       	breq	.+14     	; 0x332e <__fixunssfsi+0x4c>
    3320:	b9 3f       	cpi	r27, 0xF9	; 249
    3322:	cc f3       	brlt	.-14     	; 0x3316 <__fixunssfsi+0x34>
    3324:	86 95       	lsr	r24
    3326:	77 95       	ror	r23
    3328:	67 95       	ror	r22
    332a:	b3 95       	inc	r27
    332c:	d9 f7       	brne	.-10     	; 0x3324 <__fixunssfsi+0x42>
    332e:	3e f4       	brtc	.+14     	; 0x333e <__fixunssfsi+0x5c>
    3330:	90 95       	com	r25
    3332:	80 95       	com	r24
    3334:	70 95       	com	r23
    3336:	61 95       	neg	r22
    3338:	7f 4f       	sbci	r23, 0xFF	; 255
    333a:	8f 4f       	sbci	r24, 0xFF	; 255
    333c:	9f 4f       	sbci	r25, 0xFF	; 255
    333e:	08 95       	ret

00003340 <__floatunsisf>:
    3340:	e8 94       	clt
    3342:	09 c0       	rjmp	.+18     	; 0x3356 <__floatsisf+0x12>

00003344 <__floatsisf>:
    3344:	97 fb       	bst	r25, 7
    3346:	3e f4       	brtc	.+14     	; 0x3356 <__floatsisf+0x12>
    3348:	90 95       	com	r25
    334a:	80 95       	com	r24
    334c:	70 95       	com	r23
    334e:	61 95       	neg	r22
    3350:	7f 4f       	sbci	r23, 0xFF	; 255
    3352:	8f 4f       	sbci	r24, 0xFF	; 255
    3354:	9f 4f       	sbci	r25, 0xFF	; 255
    3356:	99 23       	and	r25, r25
    3358:	a9 f0       	breq	.+42     	; 0x3384 <__floatsisf+0x40>
    335a:	f9 2f       	mov	r31, r25
    335c:	96 e9       	ldi	r25, 0x96	; 150
    335e:	bb 27       	eor	r27, r27
    3360:	93 95       	inc	r25
    3362:	f6 95       	lsr	r31
    3364:	87 95       	ror	r24
    3366:	77 95       	ror	r23
    3368:	67 95       	ror	r22
    336a:	b7 95       	ror	r27
    336c:	f1 11       	cpse	r31, r1
    336e:	f8 cf       	rjmp	.-16     	; 0x3360 <__floatsisf+0x1c>
    3370:	fa f4       	brpl	.+62     	; 0x33b0 <__floatsisf+0x6c>
    3372:	bb 0f       	add	r27, r27
    3374:	11 f4       	brne	.+4      	; 0x337a <__floatsisf+0x36>
    3376:	60 ff       	sbrs	r22, 0
    3378:	1b c0       	rjmp	.+54     	; 0x33b0 <__floatsisf+0x6c>
    337a:	6f 5f       	subi	r22, 0xFF	; 255
    337c:	7f 4f       	sbci	r23, 0xFF	; 255
    337e:	8f 4f       	sbci	r24, 0xFF	; 255
    3380:	9f 4f       	sbci	r25, 0xFF	; 255
    3382:	16 c0       	rjmp	.+44     	; 0x33b0 <__floatsisf+0x6c>
    3384:	88 23       	and	r24, r24
    3386:	11 f0       	breq	.+4      	; 0x338c <__floatsisf+0x48>
    3388:	96 e9       	ldi	r25, 0x96	; 150
    338a:	11 c0       	rjmp	.+34     	; 0x33ae <__floatsisf+0x6a>
    338c:	77 23       	and	r23, r23
    338e:	21 f0       	breq	.+8      	; 0x3398 <__floatsisf+0x54>
    3390:	9e e8       	ldi	r25, 0x8E	; 142
    3392:	87 2f       	mov	r24, r23
    3394:	76 2f       	mov	r23, r22
    3396:	05 c0       	rjmp	.+10     	; 0x33a2 <__floatsisf+0x5e>
    3398:	66 23       	and	r22, r22
    339a:	71 f0       	breq	.+28     	; 0x33b8 <__floatsisf+0x74>
    339c:	96 e8       	ldi	r25, 0x86	; 134
    339e:	86 2f       	mov	r24, r22
    33a0:	70 e0       	ldi	r23, 0x00	; 0
    33a2:	60 e0       	ldi	r22, 0x00	; 0
    33a4:	2a f0       	brmi	.+10     	; 0x33b0 <__floatsisf+0x6c>
    33a6:	9a 95       	dec	r25
    33a8:	66 0f       	add	r22, r22
    33aa:	77 1f       	adc	r23, r23
    33ac:	88 1f       	adc	r24, r24
    33ae:	da f7       	brpl	.-10     	; 0x33a6 <__floatsisf+0x62>
    33b0:	88 0f       	add	r24, r24
    33b2:	96 95       	lsr	r25
    33b4:	87 95       	ror	r24
    33b6:	97 f9       	bld	r25, 7
    33b8:	08 95       	ret

000033ba <__fp_cmp>:
    33ba:	99 0f       	add	r25, r25
    33bc:	00 08       	sbc	r0, r0
    33be:	55 0f       	add	r21, r21
    33c0:	aa 0b       	sbc	r26, r26
    33c2:	e0 e8       	ldi	r30, 0x80	; 128
    33c4:	fe ef       	ldi	r31, 0xFE	; 254
    33c6:	16 16       	cp	r1, r22
    33c8:	17 06       	cpc	r1, r23
    33ca:	e8 07       	cpc	r30, r24
    33cc:	f9 07       	cpc	r31, r25
    33ce:	c0 f0       	brcs	.+48     	; 0x3400 <__fp_cmp+0x46>
    33d0:	12 16       	cp	r1, r18
    33d2:	13 06       	cpc	r1, r19
    33d4:	e4 07       	cpc	r30, r20
    33d6:	f5 07       	cpc	r31, r21
    33d8:	98 f0       	brcs	.+38     	; 0x3400 <__fp_cmp+0x46>
    33da:	62 1b       	sub	r22, r18
    33dc:	73 0b       	sbc	r23, r19
    33de:	84 0b       	sbc	r24, r20
    33e0:	95 0b       	sbc	r25, r21
    33e2:	39 f4       	brne	.+14     	; 0x33f2 <__fp_cmp+0x38>
    33e4:	0a 26       	eor	r0, r26
    33e6:	61 f0       	breq	.+24     	; 0x3400 <__fp_cmp+0x46>
    33e8:	23 2b       	or	r18, r19
    33ea:	24 2b       	or	r18, r20
    33ec:	25 2b       	or	r18, r21
    33ee:	21 f4       	brne	.+8      	; 0x33f8 <__fp_cmp+0x3e>
    33f0:	08 95       	ret
    33f2:	0a 26       	eor	r0, r26
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <__fp_cmp+0x3e>
    33f6:	a1 40       	sbci	r26, 0x01	; 1
    33f8:	a6 95       	lsr	r26
    33fa:	8f ef       	ldi	r24, 0xFF	; 255
    33fc:	81 1d       	adc	r24, r1
    33fe:	81 1d       	adc	r24, r1
    3400:	08 95       	ret

00003402 <__fp_inf>:
    3402:	97 f9       	bld	r25, 7
    3404:	9f 67       	ori	r25, 0x7F	; 127
    3406:	80 e8       	ldi	r24, 0x80	; 128
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	60 e0       	ldi	r22, 0x00	; 0
    340c:	08 95       	ret

0000340e <__fp_nan>:
    340e:	9f ef       	ldi	r25, 0xFF	; 255
    3410:	80 ec       	ldi	r24, 0xC0	; 192
    3412:	08 95       	ret

00003414 <__fp_pscA>:
    3414:	00 24       	eor	r0, r0
    3416:	0a 94       	dec	r0
    3418:	16 16       	cp	r1, r22
    341a:	17 06       	cpc	r1, r23
    341c:	18 06       	cpc	r1, r24
    341e:	09 06       	cpc	r0, r25
    3420:	08 95       	ret

00003422 <__fp_pscB>:
    3422:	00 24       	eor	r0, r0
    3424:	0a 94       	dec	r0
    3426:	12 16       	cp	r1, r18
    3428:	13 06       	cpc	r1, r19
    342a:	14 06       	cpc	r1, r20
    342c:	05 06       	cpc	r0, r21
    342e:	08 95       	ret

00003430 <__fp_round>:
    3430:	09 2e       	mov	r0, r25
    3432:	03 94       	inc	r0
    3434:	00 0c       	add	r0, r0
    3436:	11 f4       	brne	.+4      	; 0x343c <__fp_round+0xc>
    3438:	88 23       	and	r24, r24
    343a:	52 f0       	brmi	.+20     	; 0x3450 <__fp_round+0x20>
    343c:	bb 0f       	add	r27, r27
    343e:	40 f4       	brcc	.+16     	; 0x3450 <__fp_round+0x20>
    3440:	bf 2b       	or	r27, r31
    3442:	11 f4       	brne	.+4      	; 0x3448 <__fp_round+0x18>
    3444:	60 ff       	sbrs	r22, 0
    3446:	04 c0       	rjmp	.+8      	; 0x3450 <__fp_round+0x20>
    3448:	6f 5f       	subi	r22, 0xFF	; 255
    344a:	7f 4f       	sbci	r23, 0xFF	; 255
    344c:	8f 4f       	sbci	r24, 0xFF	; 255
    344e:	9f 4f       	sbci	r25, 0xFF	; 255
    3450:	08 95       	ret

00003452 <__fp_split3>:
    3452:	57 fd       	sbrc	r21, 7
    3454:	90 58       	subi	r25, 0x80	; 128
    3456:	44 0f       	add	r20, r20
    3458:	55 1f       	adc	r21, r21
    345a:	59 f0       	breq	.+22     	; 0x3472 <__fp_splitA+0x10>
    345c:	5f 3f       	cpi	r21, 0xFF	; 255
    345e:	71 f0       	breq	.+28     	; 0x347c <__fp_splitA+0x1a>
    3460:	47 95       	ror	r20

00003462 <__fp_splitA>:
    3462:	88 0f       	add	r24, r24
    3464:	97 fb       	bst	r25, 7
    3466:	99 1f       	adc	r25, r25
    3468:	61 f0       	breq	.+24     	; 0x3482 <__fp_splitA+0x20>
    346a:	9f 3f       	cpi	r25, 0xFF	; 255
    346c:	79 f0       	breq	.+30     	; 0x348c <__fp_splitA+0x2a>
    346e:	87 95       	ror	r24
    3470:	08 95       	ret
    3472:	12 16       	cp	r1, r18
    3474:	13 06       	cpc	r1, r19
    3476:	14 06       	cpc	r1, r20
    3478:	55 1f       	adc	r21, r21
    347a:	f2 cf       	rjmp	.-28     	; 0x3460 <__fp_split3+0xe>
    347c:	46 95       	lsr	r20
    347e:	f1 df       	rcall	.-30     	; 0x3462 <__fp_splitA>
    3480:	08 c0       	rjmp	.+16     	; 0x3492 <__fp_splitA+0x30>
    3482:	16 16       	cp	r1, r22
    3484:	17 06       	cpc	r1, r23
    3486:	18 06       	cpc	r1, r24
    3488:	99 1f       	adc	r25, r25
    348a:	f1 cf       	rjmp	.-30     	; 0x346e <__fp_splitA+0xc>
    348c:	86 95       	lsr	r24
    348e:	71 05       	cpc	r23, r1
    3490:	61 05       	cpc	r22, r1
    3492:	08 94       	sec
    3494:	08 95       	ret

00003496 <__fp_zero>:
    3496:	e8 94       	clt

00003498 <__fp_szero>:
    3498:	bb 27       	eor	r27, r27
    349a:	66 27       	eor	r22, r22
    349c:	77 27       	eor	r23, r23
    349e:	cb 01       	movw	r24, r22
    34a0:	97 f9       	bld	r25, 7
    34a2:	08 95       	ret

000034a4 <__gesf2>:
    34a4:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__fp_cmp>
    34a8:	08 f4       	brcc	.+2      	; 0x34ac <__gesf2+0x8>
    34aa:	8f ef       	ldi	r24, 0xFF	; 255
    34ac:	08 95       	ret

000034ae <__mulsf3>:
    34ae:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3x>
    34b2:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__fp_round>
    34b6:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__fp_pscA>
    34ba:	38 f0       	brcs	.+14     	; 0x34ca <__mulsf3+0x1c>
    34bc:	0e 94 11 1a 	call	0x3422	; 0x3422 <__fp_pscB>
    34c0:	20 f0       	brcs	.+8      	; 0x34ca <__mulsf3+0x1c>
    34c2:	95 23       	and	r25, r21
    34c4:	11 f0       	breq	.+4      	; 0x34ca <__mulsf3+0x1c>
    34c6:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__fp_inf>
    34ca:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_nan>
    34ce:	11 24       	eor	r1, r1
    34d0:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_szero>

000034d4 <__mulsf3x>:
    34d4:	0e 94 29 1a 	call	0x3452	; 0x3452 <__fp_split3>
    34d8:	70 f3       	brcs	.-36     	; 0x34b6 <__mulsf3+0x8>

000034da <__mulsf3_pse>:
    34da:	95 9f       	mul	r25, r21
    34dc:	c1 f3       	breq	.-16     	; 0x34ce <__mulsf3+0x20>
    34de:	95 0f       	add	r25, r21
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	55 1f       	adc	r21, r21
    34e4:	62 9f       	mul	r22, r18
    34e6:	f0 01       	movw	r30, r0
    34e8:	72 9f       	mul	r23, r18
    34ea:	bb 27       	eor	r27, r27
    34ec:	f0 0d       	add	r31, r0
    34ee:	b1 1d       	adc	r27, r1
    34f0:	63 9f       	mul	r22, r19
    34f2:	aa 27       	eor	r26, r26
    34f4:	f0 0d       	add	r31, r0
    34f6:	b1 1d       	adc	r27, r1
    34f8:	aa 1f       	adc	r26, r26
    34fa:	64 9f       	mul	r22, r20
    34fc:	66 27       	eor	r22, r22
    34fe:	b0 0d       	add	r27, r0
    3500:	a1 1d       	adc	r26, r1
    3502:	66 1f       	adc	r22, r22
    3504:	82 9f       	mul	r24, r18
    3506:	22 27       	eor	r18, r18
    3508:	b0 0d       	add	r27, r0
    350a:	a1 1d       	adc	r26, r1
    350c:	62 1f       	adc	r22, r18
    350e:	73 9f       	mul	r23, r19
    3510:	b0 0d       	add	r27, r0
    3512:	a1 1d       	adc	r26, r1
    3514:	62 1f       	adc	r22, r18
    3516:	83 9f       	mul	r24, r19
    3518:	a0 0d       	add	r26, r0
    351a:	61 1d       	adc	r22, r1
    351c:	22 1f       	adc	r18, r18
    351e:	74 9f       	mul	r23, r20
    3520:	33 27       	eor	r19, r19
    3522:	a0 0d       	add	r26, r0
    3524:	61 1d       	adc	r22, r1
    3526:	23 1f       	adc	r18, r19
    3528:	84 9f       	mul	r24, r20
    352a:	60 0d       	add	r22, r0
    352c:	21 1d       	adc	r18, r1
    352e:	82 2f       	mov	r24, r18
    3530:	76 2f       	mov	r23, r22
    3532:	6a 2f       	mov	r22, r26
    3534:	11 24       	eor	r1, r1
    3536:	9f 57       	subi	r25, 0x7F	; 127
    3538:	50 40       	sbci	r21, 0x00	; 0
    353a:	9a f0       	brmi	.+38     	; 0x3562 <__mulsf3_pse+0x88>
    353c:	f1 f0       	breq	.+60     	; 0x357a <__mulsf3_pse+0xa0>
    353e:	88 23       	and	r24, r24
    3540:	4a f0       	brmi	.+18     	; 0x3554 <__mulsf3_pse+0x7a>
    3542:	ee 0f       	add	r30, r30
    3544:	ff 1f       	adc	r31, r31
    3546:	bb 1f       	adc	r27, r27
    3548:	66 1f       	adc	r22, r22
    354a:	77 1f       	adc	r23, r23
    354c:	88 1f       	adc	r24, r24
    354e:	91 50       	subi	r25, 0x01	; 1
    3550:	50 40       	sbci	r21, 0x00	; 0
    3552:	a9 f7       	brne	.-22     	; 0x353e <__mulsf3_pse+0x64>
    3554:	9e 3f       	cpi	r25, 0xFE	; 254
    3556:	51 05       	cpc	r21, r1
    3558:	80 f0       	brcs	.+32     	; 0x357a <__mulsf3_pse+0xa0>
    355a:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__fp_inf>
    355e:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_szero>
    3562:	5f 3f       	cpi	r21, 0xFF	; 255
    3564:	e4 f3       	brlt	.-8      	; 0x355e <__mulsf3_pse+0x84>
    3566:	98 3e       	cpi	r25, 0xE8	; 232
    3568:	d4 f3       	brlt	.-12     	; 0x355e <__mulsf3_pse+0x84>
    356a:	86 95       	lsr	r24
    356c:	77 95       	ror	r23
    356e:	67 95       	ror	r22
    3570:	b7 95       	ror	r27
    3572:	f7 95       	ror	r31
    3574:	e7 95       	ror	r30
    3576:	9f 5f       	subi	r25, 0xFF	; 255
    3578:	c1 f7       	brne	.-16     	; 0x356a <__mulsf3_pse+0x90>
    357a:	fe 2b       	or	r31, r30
    357c:	88 0f       	add	r24, r24
    357e:	91 1d       	adc	r25, r1
    3580:	96 95       	lsr	r25
    3582:	87 95       	ror	r24
    3584:	97 f9       	bld	r25, 7
    3586:	08 95       	ret

00003588 <vfprintf>:
    3588:	2f 92       	push	r2
    358a:	3f 92       	push	r3
    358c:	4f 92       	push	r4
    358e:	5f 92       	push	r5
    3590:	6f 92       	push	r6
    3592:	7f 92       	push	r7
    3594:	8f 92       	push	r8
    3596:	9f 92       	push	r9
    3598:	af 92       	push	r10
    359a:	bf 92       	push	r11
    359c:	cf 92       	push	r12
    359e:	df 92       	push	r13
    35a0:	ef 92       	push	r14
    35a2:	ff 92       	push	r15
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    35a8:	cf 93       	push	r28
    35aa:	df 93       	push	r29
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	60 97       	sbiw	r28, 0x10	; 16
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	de bf       	out	0x3e, r29	; 62
    35b6:	7c 01       	movw	r14, r24
    35b8:	1b 01       	movw	r2, r22
    35ba:	6a 01       	movw	r12, r20
    35bc:	fc 01       	movw	r30, r24
    35be:	16 82       	std	Z+6, r1	; 0x06
    35c0:	17 82       	std	Z+7, r1	; 0x07
    35c2:	83 81       	ldd	r24, Z+3	; 0x03
    35c4:	81 ff       	sbrs	r24, 1
    35c6:	44 c3       	rjmp	.+1672   	; 0x3c50 <vfprintf+0x6c8>
    35c8:	9e 01       	movw	r18, r28
    35ca:	2f 5f       	subi	r18, 0xFF	; 255
    35cc:	3f 4f       	sbci	r19, 0xFF	; 255
    35ce:	39 01       	movw	r6, r18
    35d0:	f7 01       	movw	r30, r14
    35d2:	93 81       	ldd	r25, Z+3	; 0x03
    35d4:	f1 01       	movw	r30, r2
    35d6:	93 fd       	sbrc	r25, 3
    35d8:	85 91       	lpm	r24, Z+
    35da:	93 ff       	sbrs	r25, 3
    35dc:	81 91       	ld	r24, Z+
    35de:	1f 01       	movw	r2, r30
    35e0:	88 23       	and	r24, r24
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <vfprintf+0x5e>
    35e4:	31 c3       	rjmp	.+1634   	; 0x3c48 <vfprintf+0x6c0>
    35e6:	85 32       	cpi	r24, 0x25	; 37
    35e8:	39 f4       	brne	.+14     	; 0x35f8 <vfprintf+0x70>
    35ea:	93 fd       	sbrc	r25, 3
    35ec:	85 91       	lpm	r24, Z+
    35ee:	93 ff       	sbrs	r25, 3
    35f0:	81 91       	ld	r24, Z+
    35f2:	1f 01       	movw	r2, r30
    35f4:	85 32       	cpi	r24, 0x25	; 37
    35f6:	39 f4       	brne	.+14     	; 0x3606 <vfprintf+0x7e>
    35f8:	b7 01       	movw	r22, r14
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3600:	56 01       	movw	r10, r12
    3602:	65 01       	movw	r12, r10
    3604:	e5 cf       	rjmp	.-54     	; 0x35d0 <vfprintf+0x48>
    3606:	10 e0       	ldi	r17, 0x00	; 0
    3608:	51 2c       	mov	r5, r1
    360a:	91 2c       	mov	r9, r1
    360c:	ff e1       	ldi	r31, 0x1F	; 31
    360e:	f9 15       	cp	r31, r9
    3610:	d8 f0       	brcs	.+54     	; 0x3648 <vfprintf+0xc0>
    3612:	8b 32       	cpi	r24, 0x2B	; 43
    3614:	79 f0       	breq	.+30     	; 0x3634 <vfprintf+0xac>
    3616:	38 f4       	brcc	.+14     	; 0x3626 <vfprintf+0x9e>
    3618:	80 32       	cpi	r24, 0x20	; 32
    361a:	79 f0       	breq	.+30     	; 0x363a <vfprintf+0xb2>
    361c:	83 32       	cpi	r24, 0x23	; 35
    361e:	a1 f4       	brne	.+40     	; 0x3648 <vfprintf+0xc0>
    3620:	f9 2d       	mov	r31, r9
    3622:	f0 61       	ori	r31, 0x10	; 16
    3624:	2e c0       	rjmp	.+92     	; 0x3682 <vfprintf+0xfa>
    3626:	8d 32       	cpi	r24, 0x2D	; 45
    3628:	61 f0       	breq	.+24     	; 0x3642 <vfprintf+0xba>
    362a:	80 33       	cpi	r24, 0x30	; 48
    362c:	69 f4       	brne	.+26     	; 0x3648 <vfprintf+0xc0>
    362e:	29 2d       	mov	r18, r9
    3630:	21 60       	ori	r18, 0x01	; 1
    3632:	2d c0       	rjmp	.+90     	; 0x368e <vfprintf+0x106>
    3634:	39 2d       	mov	r19, r9
    3636:	32 60       	ori	r19, 0x02	; 2
    3638:	93 2e       	mov	r9, r19
    363a:	89 2d       	mov	r24, r9
    363c:	84 60       	ori	r24, 0x04	; 4
    363e:	98 2e       	mov	r9, r24
    3640:	2a c0       	rjmp	.+84     	; 0x3696 <vfprintf+0x10e>
    3642:	e9 2d       	mov	r30, r9
    3644:	e8 60       	ori	r30, 0x08	; 8
    3646:	15 c0       	rjmp	.+42     	; 0x3672 <vfprintf+0xea>
    3648:	97 fc       	sbrc	r9, 7
    364a:	2d c0       	rjmp	.+90     	; 0x36a6 <vfprintf+0x11e>
    364c:	20 ed       	ldi	r18, 0xD0	; 208
    364e:	28 0f       	add	r18, r24
    3650:	2a 30       	cpi	r18, 0x0A	; 10
    3652:	88 f4       	brcc	.+34     	; 0x3676 <vfprintf+0xee>
    3654:	96 fe       	sbrs	r9, 6
    3656:	06 c0       	rjmp	.+12     	; 0x3664 <vfprintf+0xdc>
    3658:	3a e0       	ldi	r19, 0x0A	; 10
    365a:	13 9f       	mul	r17, r19
    365c:	20 0d       	add	r18, r0
    365e:	11 24       	eor	r1, r1
    3660:	12 2f       	mov	r17, r18
    3662:	19 c0       	rjmp	.+50     	; 0x3696 <vfprintf+0x10e>
    3664:	8a e0       	ldi	r24, 0x0A	; 10
    3666:	58 9e       	mul	r5, r24
    3668:	20 0d       	add	r18, r0
    366a:	11 24       	eor	r1, r1
    366c:	52 2e       	mov	r5, r18
    366e:	e9 2d       	mov	r30, r9
    3670:	e0 62       	ori	r30, 0x20	; 32
    3672:	9e 2e       	mov	r9, r30
    3674:	10 c0       	rjmp	.+32     	; 0x3696 <vfprintf+0x10e>
    3676:	8e 32       	cpi	r24, 0x2E	; 46
    3678:	31 f4       	brne	.+12     	; 0x3686 <vfprintf+0xfe>
    367a:	96 fc       	sbrc	r9, 6
    367c:	e5 c2       	rjmp	.+1482   	; 0x3c48 <vfprintf+0x6c0>
    367e:	f9 2d       	mov	r31, r9
    3680:	f0 64       	ori	r31, 0x40	; 64
    3682:	9f 2e       	mov	r9, r31
    3684:	08 c0       	rjmp	.+16     	; 0x3696 <vfprintf+0x10e>
    3686:	8c 36       	cpi	r24, 0x6C	; 108
    3688:	21 f4       	brne	.+8      	; 0x3692 <vfprintf+0x10a>
    368a:	29 2d       	mov	r18, r9
    368c:	20 68       	ori	r18, 0x80	; 128
    368e:	92 2e       	mov	r9, r18
    3690:	02 c0       	rjmp	.+4      	; 0x3696 <vfprintf+0x10e>
    3692:	88 36       	cpi	r24, 0x68	; 104
    3694:	41 f4       	brne	.+16     	; 0x36a6 <vfprintf+0x11e>
    3696:	f1 01       	movw	r30, r2
    3698:	93 fd       	sbrc	r25, 3
    369a:	85 91       	lpm	r24, Z+
    369c:	93 ff       	sbrs	r25, 3
    369e:	81 91       	ld	r24, Z+
    36a0:	1f 01       	movw	r2, r30
    36a2:	81 11       	cpse	r24, r1
    36a4:	b3 cf       	rjmp	.-154    	; 0x360c <vfprintf+0x84>
    36a6:	9b eb       	ldi	r25, 0xBB	; 187
    36a8:	98 0f       	add	r25, r24
    36aa:	93 30       	cpi	r25, 0x03	; 3
    36ac:	20 f4       	brcc	.+8      	; 0x36b6 <vfprintf+0x12e>
    36ae:	99 2d       	mov	r25, r9
    36b0:	90 61       	ori	r25, 0x10	; 16
    36b2:	80 5e       	subi	r24, 0xE0	; 224
    36b4:	07 c0       	rjmp	.+14     	; 0x36c4 <vfprintf+0x13c>
    36b6:	9b e9       	ldi	r25, 0x9B	; 155
    36b8:	98 0f       	add	r25, r24
    36ba:	93 30       	cpi	r25, 0x03	; 3
    36bc:	08 f0       	brcs	.+2      	; 0x36c0 <vfprintf+0x138>
    36be:	66 c1       	rjmp	.+716    	; 0x398c <vfprintf+0x404>
    36c0:	99 2d       	mov	r25, r9
    36c2:	9f 7e       	andi	r25, 0xEF	; 239
    36c4:	96 ff       	sbrs	r25, 6
    36c6:	16 e0       	ldi	r17, 0x06	; 6
    36c8:	9f 73       	andi	r25, 0x3F	; 63
    36ca:	99 2e       	mov	r9, r25
    36cc:	85 36       	cpi	r24, 0x65	; 101
    36ce:	19 f4       	brne	.+6      	; 0x36d6 <vfprintf+0x14e>
    36d0:	90 64       	ori	r25, 0x40	; 64
    36d2:	99 2e       	mov	r9, r25
    36d4:	08 c0       	rjmp	.+16     	; 0x36e6 <vfprintf+0x15e>
    36d6:	86 36       	cpi	r24, 0x66	; 102
    36d8:	21 f4       	brne	.+8      	; 0x36e2 <vfprintf+0x15a>
    36da:	39 2f       	mov	r19, r25
    36dc:	30 68       	ori	r19, 0x80	; 128
    36de:	93 2e       	mov	r9, r19
    36e0:	02 c0       	rjmp	.+4      	; 0x36e6 <vfprintf+0x15e>
    36e2:	11 11       	cpse	r17, r1
    36e4:	11 50       	subi	r17, 0x01	; 1
    36e6:	97 fe       	sbrs	r9, 7
    36e8:	07 c0       	rjmp	.+14     	; 0x36f8 <vfprintf+0x170>
    36ea:	1c 33       	cpi	r17, 0x3C	; 60
    36ec:	50 f4       	brcc	.+20     	; 0x3702 <vfprintf+0x17a>
    36ee:	44 24       	eor	r4, r4
    36f0:	43 94       	inc	r4
    36f2:	41 0e       	add	r4, r17
    36f4:	27 e0       	ldi	r18, 0x07	; 7
    36f6:	0b c0       	rjmp	.+22     	; 0x370e <vfprintf+0x186>
    36f8:	18 30       	cpi	r17, 0x08	; 8
    36fa:	38 f0       	brcs	.+14     	; 0x370a <vfprintf+0x182>
    36fc:	27 e0       	ldi	r18, 0x07	; 7
    36fe:	17 e0       	ldi	r17, 0x07	; 7
    3700:	05 c0       	rjmp	.+10     	; 0x370c <vfprintf+0x184>
    3702:	27 e0       	ldi	r18, 0x07	; 7
    3704:	9c e3       	ldi	r25, 0x3C	; 60
    3706:	49 2e       	mov	r4, r25
    3708:	02 c0       	rjmp	.+4      	; 0x370e <vfprintf+0x186>
    370a:	21 2f       	mov	r18, r17
    370c:	41 2c       	mov	r4, r1
    370e:	56 01       	movw	r10, r12
    3710:	84 e0       	ldi	r24, 0x04	; 4
    3712:	a8 0e       	add	r10, r24
    3714:	b1 1c       	adc	r11, r1
    3716:	f6 01       	movw	r30, r12
    3718:	60 81       	ld	r22, Z
    371a:	71 81       	ldd	r23, Z+1	; 0x01
    371c:	82 81       	ldd	r24, Z+2	; 0x02
    371e:	93 81       	ldd	r25, Z+3	; 0x03
    3720:	04 2d       	mov	r16, r4
    3722:	a3 01       	movw	r20, r6
    3724:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <__ftoa_engine>
    3728:	6c 01       	movw	r12, r24
    372a:	f9 81       	ldd	r31, Y+1	; 0x01
    372c:	fc 87       	std	Y+12, r31	; 0x0c
    372e:	f0 ff       	sbrs	r31, 0
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <vfprintf+0x1ae>
    3732:	f3 ff       	sbrs	r31, 3
    3734:	06 c0       	rjmp	.+12     	; 0x3742 <vfprintf+0x1ba>
    3736:	91 fc       	sbrc	r9, 1
    3738:	06 c0       	rjmp	.+12     	; 0x3746 <vfprintf+0x1be>
    373a:	92 fe       	sbrs	r9, 2
    373c:	06 c0       	rjmp	.+12     	; 0x374a <vfprintf+0x1c2>
    373e:	00 e2       	ldi	r16, 0x20	; 32
    3740:	05 c0       	rjmp	.+10     	; 0x374c <vfprintf+0x1c4>
    3742:	0d e2       	ldi	r16, 0x2D	; 45
    3744:	03 c0       	rjmp	.+6      	; 0x374c <vfprintf+0x1c4>
    3746:	0b e2       	ldi	r16, 0x2B	; 43
    3748:	01 c0       	rjmp	.+2      	; 0x374c <vfprintf+0x1c4>
    374a:	00 e0       	ldi	r16, 0x00	; 0
    374c:	8c 85       	ldd	r24, Y+12	; 0x0c
    374e:	8c 70       	andi	r24, 0x0C	; 12
    3750:	19 f0       	breq	.+6      	; 0x3758 <vfprintf+0x1d0>
    3752:	01 11       	cpse	r16, r1
    3754:	5a c2       	rjmp	.+1204   	; 0x3c0a <vfprintf+0x682>
    3756:	9b c2       	rjmp	.+1334   	; 0x3c8e <vfprintf+0x706>
    3758:	97 fe       	sbrs	r9, 7
    375a:	10 c0       	rjmp	.+32     	; 0x377c <vfprintf+0x1f4>
    375c:	4c 0c       	add	r4, r12
    375e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3760:	f4 ff       	sbrs	r31, 4
    3762:	04 c0       	rjmp	.+8      	; 0x376c <vfprintf+0x1e4>
    3764:	8a 81       	ldd	r24, Y+2	; 0x02
    3766:	81 33       	cpi	r24, 0x31	; 49
    3768:	09 f4       	brne	.+2      	; 0x376c <vfprintf+0x1e4>
    376a:	4a 94       	dec	r4
    376c:	14 14       	cp	r1, r4
    376e:	74 f5       	brge	.+92     	; 0x37cc <vfprintf+0x244>
    3770:	28 e0       	ldi	r18, 0x08	; 8
    3772:	24 15       	cp	r18, r4
    3774:	78 f5       	brcc	.+94     	; 0x37d4 <vfprintf+0x24c>
    3776:	88 e0       	ldi	r24, 0x08	; 8
    3778:	48 2e       	mov	r4, r24
    377a:	2c c0       	rjmp	.+88     	; 0x37d4 <vfprintf+0x24c>
    377c:	96 fc       	sbrc	r9, 6
    377e:	2a c0       	rjmp	.+84     	; 0x37d4 <vfprintf+0x24c>
    3780:	81 2f       	mov	r24, r17
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	8c 15       	cp	r24, r12
    3786:	9d 05       	cpc	r25, r13
    3788:	9c f0       	brlt	.+38     	; 0x37b0 <vfprintf+0x228>
    378a:	3c ef       	ldi	r19, 0xFC	; 252
    378c:	c3 16       	cp	r12, r19
    378e:	3f ef       	ldi	r19, 0xFF	; 255
    3790:	d3 06       	cpc	r13, r19
    3792:	74 f0       	brlt	.+28     	; 0x37b0 <vfprintf+0x228>
    3794:	89 2d       	mov	r24, r9
    3796:	80 68       	ori	r24, 0x80	; 128
    3798:	98 2e       	mov	r9, r24
    379a:	0a c0       	rjmp	.+20     	; 0x37b0 <vfprintf+0x228>
    379c:	e2 e0       	ldi	r30, 0x02	; 2
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	ec 0f       	add	r30, r28
    37a2:	fd 1f       	adc	r31, r29
    37a4:	e1 0f       	add	r30, r17
    37a6:	f1 1d       	adc	r31, r1
    37a8:	80 81       	ld	r24, Z
    37aa:	80 33       	cpi	r24, 0x30	; 48
    37ac:	19 f4       	brne	.+6      	; 0x37b4 <vfprintf+0x22c>
    37ae:	11 50       	subi	r17, 0x01	; 1
    37b0:	11 11       	cpse	r17, r1
    37b2:	f4 cf       	rjmp	.-24     	; 0x379c <vfprintf+0x214>
    37b4:	97 fe       	sbrs	r9, 7
    37b6:	0e c0       	rjmp	.+28     	; 0x37d4 <vfprintf+0x24c>
    37b8:	44 24       	eor	r4, r4
    37ba:	43 94       	inc	r4
    37bc:	41 0e       	add	r4, r17
    37be:	81 2f       	mov	r24, r17
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	c8 16       	cp	r12, r24
    37c4:	d9 06       	cpc	r13, r25
    37c6:	2c f4       	brge	.+10     	; 0x37d2 <vfprintf+0x24a>
    37c8:	1c 19       	sub	r17, r12
    37ca:	04 c0       	rjmp	.+8      	; 0x37d4 <vfprintf+0x24c>
    37cc:	44 24       	eor	r4, r4
    37ce:	43 94       	inc	r4
    37d0:	01 c0       	rjmp	.+2      	; 0x37d4 <vfprintf+0x24c>
    37d2:	10 e0       	ldi	r17, 0x00	; 0
    37d4:	97 fe       	sbrs	r9, 7
    37d6:	06 c0       	rjmp	.+12     	; 0x37e4 <vfprintf+0x25c>
    37d8:	1c 14       	cp	r1, r12
    37da:	1d 04       	cpc	r1, r13
    37dc:	34 f4       	brge	.+12     	; 0x37ea <vfprintf+0x262>
    37de:	c6 01       	movw	r24, r12
    37e0:	01 96       	adiw	r24, 0x01	; 1
    37e2:	05 c0       	rjmp	.+10     	; 0x37ee <vfprintf+0x266>
    37e4:	85 e0       	ldi	r24, 0x05	; 5
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	02 c0       	rjmp	.+4      	; 0x37ee <vfprintf+0x266>
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	01 11       	cpse	r16, r1
    37f0:	01 96       	adiw	r24, 0x01	; 1
    37f2:	11 23       	and	r17, r17
    37f4:	31 f0       	breq	.+12     	; 0x3802 <vfprintf+0x27a>
    37f6:	21 2f       	mov	r18, r17
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	2f 5f       	subi	r18, 0xFF	; 255
    37fc:	3f 4f       	sbci	r19, 0xFF	; 255
    37fe:	82 0f       	add	r24, r18
    3800:	93 1f       	adc	r25, r19
    3802:	25 2d       	mov	r18, r5
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	82 17       	cp	r24, r18
    3808:	93 07       	cpc	r25, r19
    380a:	14 f4       	brge	.+4      	; 0x3810 <vfprintf+0x288>
    380c:	58 1a       	sub	r5, r24
    380e:	01 c0       	rjmp	.+2      	; 0x3812 <vfprintf+0x28a>
    3810:	51 2c       	mov	r5, r1
    3812:	89 2d       	mov	r24, r9
    3814:	89 70       	andi	r24, 0x09	; 9
    3816:	49 f4       	brne	.+18     	; 0x382a <vfprintf+0x2a2>
    3818:	55 20       	and	r5, r5
    381a:	39 f0       	breq	.+14     	; 0x382a <vfprintf+0x2a2>
    381c:	b7 01       	movw	r22, r14
    381e:	80 e2       	ldi	r24, 0x20	; 32
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3826:	5a 94       	dec	r5
    3828:	f7 cf       	rjmp	.-18     	; 0x3818 <vfprintf+0x290>
    382a:	00 23       	and	r16, r16
    382c:	29 f0       	breq	.+10     	; 0x3838 <vfprintf+0x2b0>
    382e:	b7 01       	movw	r22, r14
    3830:	80 2f       	mov	r24, r16
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3838:	93 fc       	sbrc	r9, 3
    383a:	09 c0       	rjmp	.+18     	; 0x384e <vfprintf+0x2c6>
    383c:	55 20       	and	r5, r5
    383e:	39 f0       	breq	.+14     	; 0x384e <vfprintf+0x2c6>
    3840:	b7 01       	movw	r22, r14
    3842:	80 e3       	ldi	r24, 0x30	; 48
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    384a:	5a 94       	dec	r5
    384c:	f7 cf       	rjmp	.-18     	; 0x383c <vfprintf+0x2b4>
    384e:	97 fe       	sbrs	r9, 7
    3850:	4c c0       	rjmp	.+152    	; 0x38ea <vfprintf+0x362>
    3852:	46 01       	movw	r8, r12
    3854:	d7 fe       	sbrs	r13, 7
    3856:	02 c0       	rjmp	.+4      	; 0x385c <vfprintf+0x2d4>
    3858:	81 2c       	mov	r8, r1
    385a:	91 2c       	mov	r9, r1
    385c:	c6 01       	movw	r24, r12
    385e:	88 19       	sub	r24, r8
    3860:	99 09       	sbc	r25, r9
    3862:	f3 01       	movw	r30, r6
    3864:	e8 0f       	add	r30, r24
    3866:	f9 1f       	adc	r31, r25
    3868:	ed 87       	std	Y+13, r30	; 0x0d
    386a:	fe 87       	std	Y+14, r31	; 0x0e
    386c:	96 01       	movw	r18, r12
    386e:	24 19       	sub	r18, r4
    3870:	31 09       	sbc	r19, r1
    3872:	2f 87       	std	Y+15, r18	; 0x0f
    3874:	38 8b       	std	Y+16, r19	; 0x10
    3876:	01 2f       	mov	r16, r17
    3878:	10 e0       	ldi	r17, 0x00	; 0
    387a:	11 95       	neg	r17
    387c:	01 95       	neg	r16
    387e:	11 09       	sbc	r17, r1
    3880:	3f ef       	ldi	r19, 0xFF	; 255
    3882:	83 16       	cp	r8, r19
    3884:	93 06       	cpc	r9, r19
    3886:	29 f4       	brne	.+10     	; 0x3892 <vfprintf+0x30a>
    3888:	b7 01       	movw	r22, r14
    388a:	8e e2       	ldi	r24, 0x2E	; 46
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3892:	c8 14       	cp	r12, r8
    3894:	d9 04       	cpc	r13, r9
    3896:	4c f0       	brlt	.+18     	; 0x38aa <vfprintf+0x322>
    3898:	8f 85       	ldd	r24, Y+15	; 0x0f
    389a:	98 89       	ldd	r25, Y+16	; 0x10
    389c:	88 15       	cp	r24, r8
    389e:	99 05       	cpc	r25, r9
    38a0:	24 f4       	brge	.+8      	; 0x38aa <vfprintf+0x322>
    38a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    38a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    38a6:	81 81       	ldd	r24, Z+1	; 0x01
    38a8:	01 c0       	rjmp	.+2      	; 0x38ac <vfprintf+0x324>
    38aa:	80 e3       	ldi	r24, 0x30	; 48
    38ac:	f1 e0       	ldi	r31, 0x01	; 1
    38ae:	8f 1a       	sub	r8, r31
    38b0:	91 08       	sbc	r9, r1
    38b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    38b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    38b6:	2f 5f       	subi	r18, 0xFF	; 255
    38b8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ba:	2d 87       	std	Y+13, r18	; 0x0d
    38bc:	3e 87       	std	Y+14, r19	; 0x0e
    38be:	80 16       	cp	r8, r16
    38c0:	91 06       	cpc	r9, r17
    38c2:	2c f0       	brlt	.+10     	; 0x38ce <vfprintf+0x346>
    38c4:	b7 01       	movw	r22, r14
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    38cc:	d9 cf       	rjmp	.-78     	; 0x3880 <vfprintf+0x2f8>
    38ce:	c8 14       	cp	r12, r8
    38d0:	d9 04       	cpc	r13, r9
    38d2:	41 f4       	brne	.+16     	; 0x38e4 <vfprintf+0x35c>
    38d4:	9a 81       	ldd	r25, Y+2	; 0x02
    38d6:	96 33       	cpi	r25, 0x36	; 54
    38d8:	20 f4       	brcc	.+8      	; 0x38e2 <vfprintf+0x35a>
    38da:	95 33       	cpi	r25, 0x35	; 53
    38dc:	19 f4       	brne	.+6      	; 0x38e4 <vfprintf+0x35c>
    38de:	3c 85       	ldd	r19, Y+12	; 0x0c
    38e0:	34 ff       	sbrs	r19, 4
    38e2:	81 e3       	ldi	r24, 0x31	; 49
    38e4:	b7 01       	movw	r22, r14
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	4e c0       	rjmp	.+156    	; 0x3986 <vfprintf+0x3fe>
    38ea:	8a 81       	ldd	r24, Y+2	; 0x02
    38ec:	81 33       	cpi	r24, 0x31	; 49
    38ee:	19 f0       	breq	.+6      	; 0x38f6 <vfprintf+0x36e>
    38f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    38f2:	9f 7e       	andi	r25, 0xEF	; 239
    38f4:	9c 87       	std	Y+12, r25	; 0x0c
    38f6:	b7 01       	movw	r22, r14
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    38fe:	11 11       	cpse	r17, r1
    3900:	05 c0       	rjmp	.+10     	; 0x390c <vfprintf+0x384>
    3902:	94 fc       	sbrc	r9, 4
    3904:	18 c0       	rjmp	.+48     	; 0x3936 <vfprintf+0x3ae>
    3906:	85 e6       	ldi	r24, 0x65	; 101
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	17 c0       	rjmp	.+46     	; 0x393a <vfprintf+0x3b2>
    390c:	b7 01       	movw	r22, r14
    390e:	8e e2       	ldi	r24, 0x2E	; 46
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3916:	1e 5f       	subi	r17, 0xFE	; 254
    3918:	82 e0       	ldi	r24, 0x02	; 2
    391a:	01 e0       	ldi	r16, 0x01	; 1
    391c:	08 0f       	add	r16, r24
    391e:	f3 01       	movw	r30, r6
    3920:	e8 0f       	add	r30, r24
    3922:	f1 1d       	adc	r31, r1
    3924:	80 81       	ld	r24, Z
    3926:	b7 01       	movw	r22, r14
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    392e:	80 2f       	mov	r24, r16
    3930:	01 13       	cpse	r16, r17
    3932:	f3 cf       	rjmp	.-26     	; 0x391a <vfprintf+0x392>
    3934:	e6 cf       	rjmp	.-52     	; 0x3902 <vfprintf+0x37a>
    3936:	85 e4       	ldi	r24, 0x45	; 69
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	b7 01       	movw	r22, r14
    393c:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3940:	d7 fc       	sbrc	r13, 7
    3942:	06 c0       	rjmp	.+12     	; 0x3950 <vfprintf+0x3c8>
    3944:	c1 14       	cp	r12, r1
    3946:	d1 04       	cpc	r13, r1
    3948:	41 f4       	brne	.+16     	; 0x395a <vfprintf+0x3d2>
    394a:	ec 85       	ldd	r30, Y+12	; 0x0c
    394c:	e4 ff       	sbrs	r30, 4
    394e:	05 c0       	rjmp	.+10     	; 0x395a <vfprintf+0x3d2>
    3950:	d1 94       	neg	r13
    3952:	c1 94       	neg	r12
    3954:	d1 08       	sbc	r13, r1
    3956:	8d e2       	ldi	r24, 0x2D	; 45
    3958:	01 c0       	rjmp	.+2      	; 0x395c <vfprintf+0x3d4>
    395a:	8b e2       	ldi	r24, 0x2B	; 43
    395c:	b7 01       	movw	r22, r14
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3964:	80 e3       	ldi	r24, 0x30	; 48
    3966:	2a e0       	ldi	r18, 0x0A	; 10
    3968:	c2 16       	cp	r12, r18
    396a:	d1 04       	cpc	r13, r1
    396c:	2c f0       	brlt	.+10     	; 0x3978 <vfprintf+0x3f0>
    396e:	8f 5f       	subi	r24, 0xFF	; 255
    3970:	fa e0       	ldi	r31, 0x0A	; 10
    3972:	cf 1a       	sub	r12, r31
    3974:	d1 08       	sbc	r13, r1
    3976:	f7 cf       	rjmp	.-18     	; 0x3966 <vfprintf+0x3de>
    3978:	b7 01       	movw	r22, r14
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3980:	b7 01       	movw	r22, r14
    3982:	c6 01       	movw	r24, r12
    3984:	c0 96       	adiw	r24, 0x30	; 48
    3986:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    398a:	54 c1       	rjmp	.+680    	; 0x3c34 <vfprintf+0x6ac>
    398c:	83 36       	cpi	r24, 0x63	; 99
    398e:	31 f0       	breq	.+12     	; 0x399c <vfprintf+0x414>
    3990:	83 37       	cpi	r24, 0x73	; 115
    3992:	79 f0       	breq	.+30     	; 0x39b2 <vfprintf+0x42a>
    3994:	83 35       	cpi	r24, 0x53	; 83
    3996:	09 f0       	breq	.+2      	; 0x399a <vfprintf+0x412>
    3998:	56 c0       	rjmp	.+172    	; 0x3a46 <vfprintf+0x4be>
    399a:	20 c0       	rjmp	.+64     	; 0x39dc <vfprintf+0x454>
    399c:	56 01       	movw	r10, r12
    399e:	32 e0       	ldi	r19, 0x02	; 2
    39a0:	a3 0e       	add	r10, r19
    39a2:	b1 1c       	adc	r11, r1
    39a4:	f6 01       	movw	r30, r12
    39a6:	80 81       	ld	r24, Z
    39a8:	89 83       	std	Y+1, r24	; 0x01
    39aa:	01 e0       	ldi	r16, 0x01	; 1
    39ac:	10 e0       	ldi	r17, 0x00	; 0
    39ae:	63 01       	movw	r12, r6
    39b0:	12 c0       	rjmp	.+36     	; 0x39d6 <vfprintf+0x44e>
    39b2:	56 01       	movw	r10, r12
    39b4:	f2 e0       	ldi	r31, 0x02	; 2
    39b6:	af 0e       	add	r10, r31
    39b8:	b1 1c       	adc	r11, r1
    39ba:	f6 01       	movw	r30, r12
    39bc:	c0 80       	ld	r12, Z
    39be:	d1 80       	ldd	r13, Z+1	; 0x01
    39c0:	96 fe       	sbrs	r9, 6
    39c2:	03 c0       	rjmp	.+6      	; 0x39ca <vfprintf+0x442>
    39c4:	61 2f       	mov	r22, r17
    39c6:	70 e0       	ldi	r23, 0x00	; 0
    39c8:	02 c0       	rjmp	.+4      	; 0x39ce <vfprintf+0x446>
    39ca:	6f ef       	ldi	r22, 0xFF	; 255
    39cc:	7f ef       	ldi	r23, 0xFF	; 255
    39ce:	c6 01       	movw	r24, r12
    39d0:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <strnlen>
    39d4:	8c 01       	movw	r16, r24
    39d6:	f9 2d       	mov	r31, r9
    39d8:	ff 77       	andi	r31, 0x7F	; 127
    39da:	14 c0       	rjmp	.+40     	; 0x3a04 <vfprintf+0x47c>
    39dc:	56 01       	movw	r10, r12
    39de:	22 e0       	ldi	r18, 0x02	; 2
    39e0:	a2 0e       	add	r10, r18
    39e2:	b1 1c       	adc	r11, r1
    39e4:	f6 01       	movw	r30, r12
    39e6:	c0 80       	ld	r12, Z
    39e8:	d1 80       	ldd	r13, Z+1	; 0x01
    39ea:	96 fe       	sbrs	r9, 6
    39ec:	03 c0       	rjmp	.+6      	; 0x39f4 <vfprintf+0x46c>
    39ee:	61 2f       	mov	r22, r17
    39f0:	70 e0       	ldi	r23, 0x00	; 0
    39f2:	02 c0       	rjmp	.+4      	; 0x39f8 <vfprintf+0x470>
    39f4:	6f ef       	ldi	r22, 0xFF	; 255
    39f6:	7f ef       	ldi	r23, 0xFF	; 255
    39f8:	c6 01       	movw	r24, r12
    39fa:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <strnlen_P>
    39fe:	8c 01       	movw	r16, r24
    3a00:	f9 2d       	mov	r31, r9
    3a02:	f0 68       	ori	r31, 0x80	; 128
    3a04:	9f 2e       	mov	r9, r31
    3a06:	f3 fd       	sbrc	r31, 3
    3a08:	1a c0       	rjmp	.+52     	; 0x3a3e <vfprintf+0x4b6>
    3a0a:	85 2d       	mov	r24, r5
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	08 17       	cp	r16, r24
    3a10:	19 07       	cpc	r17, r25
    3a12:	a8 f4       	brcc	.+42     	; 0x3a3e <vfprintf+0x4b6>
    3a14:	b7 01       	movw	r22, r14
    3a16:	80 e2       	ldi	r24, 0x20	; 32
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3a1e:	5a 94       	dec	r5
    3a20:	f4 cf       	rjmp	.-24     	; 0x3a0a <vfprintf+0x482>
    3a22:	f6 01       	movw	r30, r12
    3a24:	97 fc       	sbrc	r9, 7
    3a26:	85 91       	lpm	r24, Z+
    3a28:	97 fe       	sbrs	r9, 7
    3a2a:	81 91       	ld	r24, Z+
    3a2c:	6f 01       	movw	r12, r30
    3a2e:	b7 01       	movw	r22, r14
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3a36:	51 10       	cpse	r5, r1
    3a38:	5a 94       	dec	r5
    3a3a:	01 50       	subi	r16, 0x01	; 1
    3a3c:	11 09       	sbc	r17, r1
    3a3e:	01 15       	cp	r16, r1
    3a40:	11 05       	cpc	r17, r1
    3a42:	79 f7       	brne	.-34     	; 0x3a22 <vfprintf+0x49a>
    3a44:	f7 c0       	rjmp	.+494    	; 0x3c34 <vfprintf+0x6ac>
    3a46:	84 36       	cpi	r24, 0x64	; 100
    3a48:	11 f0       	breq	.+4      	; 0x3a4e <vfprintf+0x4c6>
    3a4a:	89 36       	cpi	r24, 0x69	; 105
    3a4c:	61 f5       	brne	.+88     	; 0x3aa6 <vfprintf+0x51e>
    3a4e:	56 01       	movw	r10, r12
    3a50:	97 fe       	sbrs	r9, 7
    3a52:	09 c0       	rjmp	.+18     	; 0x3a66 <vfprintf+0x4de>
    3a54:	24 e0       	ldi	r18, 0x04	; 4
    3a56:	a2 0e       	add	r10, r18
    3a58:	b1 1c       	adc	r11, r1
    3a5a:	f6 01       	movw	r30, r12
    3a5c:	60 81       	ld	r22, Z
    3a5e:	71 81       	ldd	r23, Z+1	; 0x01
    3a60:	82 81       	ldd	r24, Z+2	; 0x02
    3a62:	93 81       	ldd	r25, Z+3	; 0x03
    3a64:	0a c0       	rjmp	.+20     	; 0x3a7a <vfprintf+0x4f2>
    3a66:	f2 e0       	ldi	r31, 0x02	; 2
    3a68:	af 0e       	add	r10, r31
    3a6a:	b1 1c       	adc	r11, r1
    3a6c:	f6 01       	movw	r30, r12
    3a6e:	60 81       	ld	r22, Z
    3a70:	71 81       	ldd	r23, Z+1	; 0x01
    3a72:	07 2e       	mov	r0, r23
    3a74:	00 0c       	add	r0, r0
    3a76:	88 0b       	sbc	r24, r24
    3a78:	99 0b       	sbc	r25, r25
    3a7a:	f9 2d       	mov	r31, r9
    3a7c:	ff 76       	andi	r31, 0x6F	; 111
    3a7e:	9f 2e       	mov	r9, r31
    3a80:	97 ff       	sbrs	r25, 7
    3a82:	09 c0       	rjmp	.+18     	; 0x3a96 <vfprintf+0x50e>
    3a84:	90 95       	com	r25
    3a86:	80 95       	com	r24
    3a88:	70 95       	com	r23
    3a8a:	61 95       	neg	r22
    3a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a8e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a90:	9f 4f       	sbci	r25, 0xFF	; 255
    3a92:	f0 68       	ori	r31, 0x80	; 128
    3a94:	9f 2e       	mov	r9, r31
    3a96:	2a e0       	ldi	r18, 0x0A	; 10
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	a3 01       	movw	r20, r6
    3a9c:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <__ultoa_invert>
    3aa0:	c8 2e       	mov	r12, r24
    3aa2:	c6 18       	sub	r12, r6
    3aa4:	3f c0       	rjmp	.+126    	; 0x3b24 <vfprintf+0x59c>
    3aa6:	09 2d       	mov	r16, r9
    3aa8:	85 37       	cpi	r24, 0x75	; 117
    3aaa:	21 f4       	brne	.+8      	; 0x3ab4 <vfprintf+0x52c>
    3aac:	0f 7e       	andi	r16, 0xEF	; 239
    3aae:	2a e0       	ldi	r18, 0x0A	; 10
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	1d c0       	rjmp	.+58     	; 0x3aee <vfprintf+0x566>
    3ab4:	09 7f       	andi	r16, 0xF9	; 249
    3ab6:	8f 36       	cpi	r24, 0x6F	; 111
    3ab8:	91 f0       	breq	.+36     	; 0x3ade <vfprintf+0x556>
    3aba:	18 f4       	brcc	.+6      	; 0x3ac2 <vfprintf+0x53a>
    3abc:	88 35       	cpi	r24, 0x58	; 88
    3abe:	59 f0       	breq	.+22     	; 0x3ad6 <vfprintf+0x54e>
    3ac0:	c3 c0       	rjmp	.+390    	; 0x3c48 <vfprintf+0x6c0>
    3ac2:	80 37       	cpi	r24, 0x70	; 112
    3ac4:	19 f0       	breq	.+6      	; 0x3acc <vfprintf+0x544>
    3ac6:	88 37       	cpi	r24, 0x78	; 120
    3ac8:	11 f0       	breq	.+4      	; 0x3ace <vfprintf+0x546>
    3aca:	be c0       	rjmp	.+380    	; 0x3c48 <vfprintf+0x6c0>
    3acc:	00 61       	ori	r16, 0x10	; 16
    3ace:	04 ff       	sbrs	r16, 4
    3ad0:	09 c0       	rjmp	.+18     	; 0x3ae4 <vfprintf+0x55c>
    3ad2:	04 60       	ori	r16, 0x04	; 4
    3ad4:	07 c0       	rjmp	.+14     	; 0x3ae4 <vfprintf+0x55c>
    3ad6:	94 fe       	sbrs	r9, 4
    3ad8:	08 c0       	rjmp	.+16     	; 0x3aea <vfprintf+0x562>
    3ada:	06 60       	ori	r16, 0x06	; 6
    3adc:	06 c0       	rjmp	.+12     	; 0x3aea <vfprintf+0x562>
    3ade:	28 e0       	ldi	r18, 0x08	; 8
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	05 c0       	rjmp	.+10     	; 0x3aee <vfprintf+0x566>
    3ae4:	20 e1       	ldi	r18, 0x10	; 16
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	02 c0       	rjmp	.+4      	; 0x3aee <vfprintf+0x566>
    3aea:	20 e1       	ldi	r18, 0x10	; 16
    3aec:	32 e0       	ldi	r19, 0x02	; 2
    3aee:	56 01       	movw	r10, r12
    3af0:	07 ff       	sbrs	r16, 7
    3af2:	09 c0       	rjmp	.+18     	; 0x3b06 <vfprintf+0x57e>
    3af4:	84 e0       	ldi	r24, 0x04	; 4
    3af6:	a8 0e       	add	r10, r24
    3af8:	b1 1c       	adc	r11, r1
    3afa:	f6 01       	movw	r30, r12
    3afc:	60 81       	ld	r22, Z
    3afe:	71 81       	ldd	r23, Z+1	; 0x01
    3b00:	82 81       	ldd	r24, Z+2	; 0x02
    3b02:	93 81       	ldd	r25, Z+3	; 0x03
    3b04:	08 c0       	rjmp	.+16     	; 0x3b16 <vfprintf+0x58e>
    3b06:	f2 e0       	ldi	r31, 0x02	; 2
    3b08:	af 0e       	add	r10, r31
    3b0a:	b1 1c       	adc	r11, r1
    3b0c:	f6 01       	movw	r30, r12
    3b0e:	60 81       	ld	r22, Z
    3b10:	71 81       	ldd	r23, Z+1	; 0x01
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	a3 01       	movw	r20, r6
    3b18:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <__ultoa_invert>
    3b1c:	c8 2e       	mov	r12, r24
    3b1e:	c6 18       	sub	r12, r6
    3b20:	0f 77       	andi	r16, 0x7F	; 127
    3b22:	90 2e       	mov	r9, r16
    3b24:	96 fe       	sbrs	r9, 6
    3b26:	0b c0       	rjmp	.+22     	; 0x3b3e <vfprintf+0x5b6>
    3b28:	09 2d       	mov	r16, r9
    3b2a:	0e 7f       	andi	r16, 0xFE	; 254
    3b2c:	c1 16       	cp	r12, r17
    3b2e:	50 f4       	brcc	.+20     	; 0x3b44 <vfprintf+0x5bc>
    3b30:	94 fe       	sbrs	r9, 4
    3b32:	0a c0       	rjmp	.+20     	; 0x3b48 <vfprintf+0x5c0>
    3b34:	92 fc       	sbrc	r9, 2
    3b36:	08 c0       	rjmp	.+16     	; 0x3b48 <vfprintf+0x5c0>
    3b38:	09 2d       	mov	r16, r9
    3b3a:	0e 7e       	andi	r16, 0xEE	; 238
    3b3c:	05 c0       	rjmp	.+10     	; 0x3b48 <vfprintf+0x5c0>
    3b3e:	dc 2c       	mov	r13, r12
    3b40:	09 2d       	mov	r16, r9
    3b42:	03 c0       	rjmp	.+6      	; 0x3b4a <vfprintf+0x5c2>
    3b44:	dc 2c       	mov	r13, r12
    3b46:	01 c0       	rjmp	.+2      	; 0x3b4a <vfprintf+0x5c2>
    3b48:	d1 2e       	mov	r13, r17
    3b4a:	04 ff       	sbrs	r16, 4
    3b4c:	0d c0       	rjmp	.+26     	; 0x3b68 <vfprintf+0x5e0>
    3b4e:	fe 01       	movw	r30, r28
    3b50:	ec 0d       	add	r30, r12
    3b52:	f1 1d       	adc	r31, r1
    3b54:	80 81       	ld	r24, Z
    3b56:	80 33       	cpi	r24, 0x30	; 48
    3b58:	11 f4       	brne	.+4      	; 0x3b5e <vfprintf+0x5d6>
    3b5a:	09 7e       	andi	r16, 0xE9	; 233
    3b5c:	09 c0       	rjmp	.+18     	; 0x3b70 <vfprintf+0x5e8>
    3b5e:	02 ff       	sbrs	r16, 2
    3b60:	06 c0       	rjmp	.+12     	; 0x3b6e <vfprintf+0x5e6>
    3b62:	d3 94       	inc	r13
    3b64:	d3 94       	inc	r13
    3b66:	04 c0       	rjmp	.+8      	; 0x3b70 <vfprintf+0x5e8>
    3b68:	80 2f       	mov	r24, r16
    3b6a:	86 78       	andi	r24, 0x86	; 134
    3b6c:	09 f0       	breq	.+2      	; 0x3b70 <vfprintf+0x5e8>
    3b6e:	d3 94       	inc	r13
    3b70:	03 fd       	sbrc	r16, 3
    3b72:	11 c0       	rjmp	.+34     	; 0x3b96 <vfprintf+0x60e>
    3b74:	00 ff       	sbrs	r16, 0
    3b76:	06 c0       	rjmp	.+12     	; 0x3b84 <vfprintf+0x5fc>
    3b78:	1c 2d       	mov	r17, r12
    3b7a:	d5 14       	cp	r13, r5
    3b7c:	80 f4       	brcc	.+32     	; 0x3b9e <vfprintf+0x616>
    3b7e:	15 0d       	add	r17, r5
    3b80:	1d 19       	sub	r17, r13
    3b82:	0d c0       	rjmp	.+26     	; 0x3b9e <vfprintf+0x616>
    3b84:	d5 14       	cp	r13, r5
    3b86:	58 f4       	brcc	.+22     	; 0x3b9e <vfprintf+0x616>
    3b88:	b7 01       	movw	r22, r14
    3b8a:	80 e2       	ldi	r24, 0x20	; 32
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3b92:	d3 94       	inc	r13
    3b94:	f7 cf       	rjmp	.-18     	; 0x3b84 <vfprintf+0x5fc>
    3b96:	d5 14       	cp	r13, r5
    3b98:	10 f4       	brcc	.+4      	; 0x3b9e <vfprintf+0x616>
    3b9a:	5d 18       	sub	r5, r13
    3b9c:	01 c0       	rjmp	.+2      	; 0x3ba0 <vfprintf+0x618>
    3b9e:	51 2c       	mov	r5, r1
    3ba0:	04 ff       	sbrs	r16, 4
    3ba2:	10 c0       	rjmp	.+32     	; 0x3bc4 <vfprintf+0x63c>
    3ba4:	b7 01       	movw	r22, r14
    3ba6:	80 e3       	ldi	r24, 0x30	; 48
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3bae:	02 ff       	sbrs	r16, 2
    3bb0:	17 c0       	rjmp	.+46     	; 0x3be0 <vfprintf+0x658>
    3bb2:	01 fd       	sbrc	r16, 1
    3bb4:	03 c0       	rjmp	.+6      	; 0x3bbc <vfprintf+0x634>
    3bb6:	88 e7       	ldi	r24, 0x78	; 120
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	02 c0       	rjmp	.+4      	; 0x3bc0 <vfprintf+0x638>
    3bbc:	88 e5       	ldi	r24, 0x58	; 88
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	b7 01       	movw	r22, r14
    3bc2:	0c c0       	rjmp	.+24     	; 0x3bdc <vfprintf+0x654>
    3bc4:	80 2f       	mov	r24, r16
    3bc6:	86 78       	andi	r24, 0x86	; 134
    3bc8:	59 f0       	breq	.+22     	; 0x3be0 <vfprintf+0x658>
    3bca:	01 ff       	sbrs	r16, 1
    3bcc:	02 c0       	rjmp	.+4      	; 0x3bd2 <vfprintf+0x64a>
    3bce:	8b e2       	ldi	r24, 0x2B	; 43
    3bd0:	01 c0       	rjmp	.+2      	; 0x3bd4 <vfprintf+0x64c>
    3bd2:	80 e2       	ldi	r24, 0x20	; 32
    3bd4:	07 fd       	sbrc	r16, 7
    3bd6:	8d e2       	ldi	r24, 0x2D	; 45
    3bd8:	b7 01       	movw	r22, r14
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3be0:	c1 16       	cp	r12, r17
    3be2:	38 f4       	brcc	.+14     	; 0x3bf2 <vfprintf+0x66a>
    3be4:	b7 01       	movw	r22, r14
    3be6:	80 e3       	ldi	r24, 0x30	; 48
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3bee:	11 50       	subi	r17, 0x01	; 1
    3bf0:	f7 cf       	rjmp	.-18     	; 0x3be0 <vfprintf+0x658>
    3bf2:	ca 94       	dec	r12
    3bf4:	f3 01       	movw	r30, r6
    3bf6:	ec 0d       	add	r30, r12
    3bf8:	f1 1d       	adc	r31, r1
    3bfa:	80 81       	ld	r24, Z
    3bfc:	b7 01       	movw	r22, r14
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3c04:	c1 10       	cpse	r12, r1
    3c06:	f5 cf       	rjmp	.-22     	; 0x3bf2 <vfprintf+0x66a>
    3c08:	15 c0       	rjmp	.+42     	; 0x3c34 <vfprintf+0x6ac>
    3c0a:	f4 e0       	ldi	r31, 0x04	; 4
    3c0c:	f5 15       	cp	r31, r5
    3c0e:	60 f5       	brcc	.+88     	; 0x3c68 <vfprintf+0x6e0>
    3c10:	84 e0       	ldi	r24, 0x04	; 4
    3c12:	58 1a       	sub	r5, r24
    3c14:	93 fe       	sbrs	r9, 3
    3c16:	1f c0       	rjmp	.+62     	; 0x3c56 <vfprintf+0x6ce>
    3c18:	01 11       	cpse	r16, r1
    3c1a:	27 c0       	rjmp	.+78     	; 0x3c6a <vfprintf+0x6e2>
    3c1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c1e:	23 ff       	sbrs	r18, 3
    3c20:	2a c0       	rjmp	.+84     	; 0x3c76 <vfprintf+0x6ee>
    3c22:	04 e3       	ldi	r16, 0x34	; 52
    3c24:	12 e0       	ldi	r17, 0x02	; 2
    3c26:	39 2d       	mov	r19, r9
    3c28:	30 71       	andi	r19, 0x10	; 16
    3c2a:	93 2e       	mov	r9, r19
    3c2c:	f8 01       	movw	r30, r16
    3c2e:	84 91       	lpm	r24, Z
    3c30:	81 11       	cpse	r24, r1
    3c32:	24 c0       	rjmp	.+72     	; 0x3c7c <vfprintf+0x6f4>
    3c34:	55 20       	and	r5, r5
    3c36:	09 f4       	brne	.+2      	; 0x3c3a <vfprintf+0x6b2>
    3c38:	e4 cc       	rjmp	.-1592   	; 0x3602 <vfprintf+0x7a>
    3c3a:	b7 01       	movw	r22, r14
    3c3c:	80 e2       	ldi	r24, 0x20	; 32
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3c44:	5a 94       	dec	r5
    3c46:	f6 cf       	rjmp	.-20     	; 0x3c34 <vfprintf+0x6ac>
    3c48:	f7 01       	movw	r30, r14
    3c4a:	86 81       	ldd	r24, Z+6	; 0x06
    3c4c:	97 81       	ldd	r25, Z+7	; 0x07
    3c4e:	26 c0       	rjmp	.+76     	; 0x3c9c <vfprintf+0x714>
    3c50:	8f ef       	ldi	r24, 0xFF	; 255
    3c52:	9f ef       	ldi	r25, 0xFF	; 255
    3c54:	23 c0       	rjmp	.+70     	; 0x3c9c <vfprintf+0x714>
    3c56:	b7 01       	movw	r22, r14
    3c58:	80 e2       	ldi	r24, 0x20	; 32
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3c60:	5a 94       	dec	r5
    3c62:	51 10       	cpse	r5, r1
    3c64:	f8 cf       	rjmp	.-16     	; 0x3c56 <vfprintf+0x6ce>
    3c66:	d8 cf       	rjmp	.-80     	; 0x3c18 <vfprintf+0x690>
    3c68:	51 2c       	mov	r5, r1
    3c6a:	b7 01       	movw	r22, r14
    3c6c:	80 2f       	mov	r24, r16
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3c74:	d3 cf       	rjmp	.-90     	; 0x3c1c <vfprintf+0x694>
    3c76:	08 e3       	ldi	r16, 0x38	; 56
    3c78:	12 e0       	ldi	r17, 0x02	; 2
    3c7a:	d5 cf       	rjmp	.-86     	; 0x3c26 <vfprintf+0x69e>
    3c7c:	91 10       	cpse	r9, r1
    3c7e:	80 52       	subi	r24, 0x20	; 32
    3c80:	b7 01       	movw	r22, r14
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <fputc>
    3c88:	0f 5f       	subi	r16, 0xFF	; 255
    3c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c8c:	cf cf       	rjmp	.-98     	; 0x3c2c <vfprintf+0x6a4>
    3c8e:	23 e0       	ldi	r18, 0x03	; 3
    3c90:	25 15       	cp	r18, r5
    3c92:	10 f4       	brcc	.+4      	; 0x3c98 <vfprintf+0x710>
    3c94:	83 e0       	ldi	r24, 0x03	; 3
    3c96:	bd cf       	rjmp	.-134    	; 0x3c12 <vfprintf+0x68a>
    3c98:	51 2c       	mov	r5, r1
    3c9a:	c0 cf       	rjmp	.-128    	; 0x3c1c <vfprintf+0x694>
    3c9c:	60 96       	adiw	r28, 0x10	; 16
    3c9e:	cd bf       	out	0x3d, r28	; 61
    3ca0:	de bf       	out	0x3e, r29	; 62
    3ca2:	df 91       	pop	r29
    3ca4:	cf 91       	pop	r28
    3ca6:	1f 91       	pop	r17
    3ca8:	0f 91       	pop	r16
    3caa:	ff 90       	pop	r15
    3cac:	ef 90       	pop	r14
    3cae:	df 90       	pop	r13
    3cb0:	cf 90       	pop	r12
    3cb2:	bf 90       	pop	r11
    3cb4:	af 90       	pop	r10
    3cb6:	9f 90       	pop	r9
    3cb8:	8f 90       	pop	r8
    3cba:	7f 90       	pop	r7
    3cbc:	6f 90       	pop	r6
    3cbe:	5f 90       	pop	r5
    3cc0:	4f 90       	pop	r4
    3cc2:	3f 90       	pop	r3
    3cc4:	2f 90       	pop	r2
    3cc6:	08 95       	ret

00003cc8 <__tablejump2__>:
    3cc8:	ee 0f       	add	r30, r30
    3cca:	ff 1f       	adc	r31, r31
    3ccc:	88 1f       	adc	r24, r24
    3cce:	8b bf       	out	0x3b, r24	; 59
    3cd0:	07 90       	elpm	r0, Z+
    3cd2:	f6 91       	elpm	r31, Z
    3cd4:	e0 2d       	mov	r30, r0
    3cd6:	19 94       	eijmp

00003cd8 <__ftoa_engine>:
    3cd8:	28 30       	cpi	r18, 0x08	; 8
    3cda:	08 f0       	brcs	.+2      	; 0x3cde <__ftoa_engine+0x6>
    3cdc:	27 e0       	ldi	r18, 0x07	; 7
    3cde:	33 27       	eor	r19, r19
    3ce0:	da 01       	movw	r26, r20
    3ce2:	99 0f       	add	r25, r25
    3ce4:	31 1d       	adc	r19, r1
    3ce6:	87 fd       	sbrc	r24, 7
    3ce8:	91 60       	ori	r25, 0x01	; 1
    3cea:	00 96       	adiw	r24, 0x00	; 0
    3cec:	61 05       	cpc	r22, r1
    3cee:	71 05       	cpc	r23, r1
    3cf0:	39 f4       	brne	.+14     	; 0x3d00 <__ftoa_engine+0x28>
    3cf2:	32 60       	ori	r19, 0x02	; 2
    3cf4:	2e 5f       	subi	r18, 0xFE	; 254
    3cf6:	3d 93       	st	X+, r19
    3cf8:	30 e3       	ldi	r19, 0x30	; 48
    3cfa:	2a 95       	dec	r18
    3cfc:	e1 f7       	brne	.-8      	; 0x3cf6 <__ftoa_engine+0x1e>
    3cfe:	08 95       	ret
    3d00:	9f 3f       	cpi	r25, 0xFF	; 255
    3d02:	30 f0       	brcs	.+12     	; 0x3d10 <__ftoa_engine+0x38>
    3d04:	80 38       	cpi	r24, 0x80	; 128
    3d06:	71 05       	cpc	r23, r1
    3d08:	61 05       	cpc	r22, r1
    3d0a:	09 f0       	breq	.+2      	; 0x3d0e <__ftoa_engine+0x36>
    3d0c:	3c 5f       	subi	r19, 0xFC	; 252
    3d0e:	3c 5f       	subi	r19, 0xFC	; 252
    3d10:	3d 93       	st	X+, r19
    3d12:	91 30       	cpi	r25, 0x01	; 1
    3d14:	08 f0       	brcs	.+2      	; 0x3d18 <__ftoa_engine+0x40>
    3d16:	80 68       	ori	r24, 0x80	; 128
    3d18:	91 1d       	adc	r25, r1
    3d1a:	df 93       	push	r29
    3d1c:	cf 93       	push	r28
    3d1e:	1f 93       	push	r17
    3d20:	0f 93       	push	r16
    3d22:	ff 92       	push	r15
    3d24:	ef 92       	push	r14
    3d26:	19 2f       	mov	r17, r25
    3d28:	98 7f       	andi	r25, 0xF8	; 248
    3d2a:	96 95       	lsr	r25
    3d2c:	e9 2f       	mov	r30, r25
    3d2e:	96 95       	lsr	r25
    3d30:	96 95       	lsr	r25
    3d32:	e9 0f       	add	r30, r25
    3d34:	ff 27       	eor	r31, r31
    3d36:	ea 56       	subi	r30, 0x6A	; 106
    3d38:	fd 4f       	sbci	r31, 0xFD	; 253
    3d3a:	99 27       	eor	r25, r25
    3d3c:	33 27       	eor	r19, r19
    3d3e:	ee 24       	eor	r14, r14
    3d40:	ff 24       	eor	r15, r15
    3d42:	a7 01       	movw	r20, r14
    3d44:	e7 01       	movw	r28, r14
    3d46:	05 90       	lpm	r0, Z+
    3d48:	08 94       	sec
    3d4a:	07 94       	ror	r0
    3d4c:	28 f4       	brcc	.+10     	; 0x3d58 <__ftoa_engine+0x80>
    3d4e:	36 0f       	add	r19, r22
    3d50:	e7 1e       	adc	r14, r23
    3d52:	f8 1e       	adc	r15, r24
    3d54:	49 1f       	adc	r20, r25
    3d56:	51 1d       	adc	r21, r1
    3d58:	66 0f       	add	r22, r22
    3d5a:	77 1f       	adc	r23, r23
    3d5c:	88 1f       	adc	r24, r24
    3d5e:	99 1f       	adc	r25, r25
    3d60:	06 94       	lsr	r0
    3d62:	a1 f7       	brne	.-24     	; 0x3d4c <__ftoa_engine+0x74>
    3d64:	05 90       	lpm	r0, Z+
    3d66:	07 94       	ror	r0
    3d68:	28 f4       	brcc	.+10     	; 0x3d74 <__ftoa_engine+0x9c>
    3d6a:	e7 0e       	add	r14, r23
    3d6c:	f8 1e       	adc	r15, r24
    3d6e:	49 1f       	adc	r20, r25
    3d70:	56 1f       	adc	r21, r22
    3d72:	c1 1d       	adc	r28, r1
    3d74:	77 0f       	add	r23, r23
    3d76:	88 1f       	adc	r24, r24
    3d78:	99 1f       	adc	r25, r25
    3d7a:	66 1f       	adc	r22, r22
    3d7c:	06 94       	lsr	r0
    3d7e:	a1 f7       	brne	.-24     	; 0x3d68 <__ftoa_engine+0x90>
    3d80:	05 90       	lpm	r0, Z+
    3d82:	07 94       	ror	r0
    3d84:	28 f4       	brcc	.+10     	; 0x3d90 <__ftoa_engine+0xb8>
    3d86:	f8 0e       	add	r15, r24
    3d88:	49 1f       	adc	r20, r25
    3d8a:	56 1f       	adc	r21, r22
    3d8c:	c7 1f       	adc	r28, r23
    3d8e:	d1 1d       	adc	r29, r1
    3d90:	88 0f       	add	r24, r24
    3d92:	99 1f       	adc	r25, r25
    3d94:	66 1f       	adc	r22, r22
    3d96:	77 1f       	adc	r23, r23
    3d98:	06 94       	lsr	r0
    3d9a:	a1 f7       	brne	.-24     	; 0x3d84 <__ftoa_engine+0xac>
    3d9c:	05 90       	lpm	r0, Z+
    3d9e:	07 94       	ror	r0
    3da0:	20 f4       	brcc	.+8      	; 0x3daa <__ftoa_engine+0xd2>
    3da2:	49 0f       	add	r20, r25
    3da4:	56 1f       	adc	r21, r22
    3da6:	c7 1f       	adc	r28, r23
    3da8:	d8 1f       	adc	r29, r24
    3daa:	99 0f       	add	r25, r25
    3dac:	66 1f       	adc	r22, r22
    3dae:	77 1f       	adc	r23, r23
    3db0:	88 1f       	adc	r24, r24
    3db2:	06 94       	lsr	r0
    3db4:	a9 f7       	brne	.-22     	; 0x3da0 <__ftoa_engine+0xc8>
    3db6:	84 91       	lpm	r24, Z
    3db8:	10 95       	com	r17
    3dba:	17 70       	andi	r17, 0x07	; 7
    3dbc:	41 f0       	breq	.+16     	; 0x3dce <__ftoa_engine+0xf6>
    3dbe:	d6 95       	lsr	r29
    3dc0:	c7 95       	ror	r28
    3dc2:	57 95       	ror	r21
    3dc4:	47 95       	ror	r20
    3dc6:	f7 94       	ror	r15
    3dc8:	e7 94       	ror	r14
    3dca:	1a 95       	dec	r17
    3dcc:	c1 f7       	brne	.-16     	; 0x3dbe <__ftoa_engine+0xe6>
    3dce:	ec e3       	ldi	r30, 0x3C	; 60
    3dd0:	f2 e0       	ldi	r31, 0x02	; 2
    3dd2:	68 94       	set
    3dd4:	15 90       	lpm	r1, Z+
    3dd6:	15 91       	lpm	r17, Z+
    3dd8:	35 91       	lpm	r19, Z+
    3dda:	65 91       	lpm	r22, Z+
    3ddc:	95 91       	lpm	r25, Z+
    3dde:	05 90       	lpm	r0, Z+
    3de0:	7f e2       	ldi	r23, 0x2F	; 47
    3de2:	73 95       	inc	r23
    3de4:	e1 18       	sub	r14, r1
    3de6:	f1 0a       	sbc	r15, r17
    3de8:	43 0b       	sbc	r20, r19
    3dea:	56 0b       	sbc	r21, r22
    3dec:	c9 0b       	sbc	r28, r25
    3dee:	d0 09       	sbc	r29, r0
    3df0:	c0 f7       	brcc	.-16     	; 0x3de2 <__ftoa_engine+0x10a>
    3df2:	e1 0c       	add	r14, r1
    3df4:	f1 1e       	adc	r15, r17
    3df6:	43 1f       	adc	r20, r19
    3df8:	56 1f       	adc	r21, r22
    3dfa:	c9 1f       	adc	r28, r25
    3dfc:	d0 1d       	adc	r29, r0
    3dfe:	7e f4       	brtc	.+30     	; 0x3e1e <__ftoa_engine+0x146>
    3e00:	70 33       	cpi	r23, 0x30	; 48
    3e02:	11 f4       	brne	.+4      	; 0x3e08 <__ftoa_engine+0x130>
    3e04:	8a 95       	dec	r24
    3e06:	e6 cf       	rjmp	.-52     	; 0x3dd4 <__ftoa_engine+0xfc>
    3e08:	e8 94       	clt
    3e0a:	01 50       	subi	r16, 0x01	; 1
    3e0c:	30 f0       	brcs	.+12     	; 0x3e1a <__ftoa_engine+0x142>
    3e0e:	08 0f       	add	r16, r24
    3e10:	0a f4       	brpl	.+2      	; 0x3e14 <__ftoa_engine+0x13c>
    3e12:	00 27       	eor	r16, r16
    3e14:	02 17       	cp	r16, r18
    3e16:	08 f4       	brcc	.+2      	; 0x3e1a <__ftoa_engine+0x142>
    3e18:	20 2f       	mov	r18, r16
    3e1a:	23 95       	inc	r18
    3e1c:	02 2f       	mov	r16, r18
    3e1e:	7a 33       	cpi	r23, 0x3A	; 58
    3e20:	28 f0       	brcs	.+10     	; 0x3e2c <__ftoa_engine+0x154>
    3e22:	79 e3       	ldi	r23, 0x39	; 57
    3e24:	7d 93       	st	X+, r23
    3e26:	2a 95       	dec	r18
    3e28:	e9 f7       	brne	.-6      	; 0x3e24 <__ftoa_engine+0x14c>
    3e2a:	10 c0       	rjmp	.+32     	; 0x3e4c <__ftoa_engine+0x174>
    3e2c:	7d 93       	st	X+, r23
    3e2e:	2a 95       	dec	r18
    3e30:	89 f6       	brne	.-94     	; 0x3dd4 <__ftoa_engine+0xfc>
    3e32:	06 94       	lsr	r0
    3e34:	97 95       	ror	r25
    3e36:	67 95       	ror	r22
    3e38:	37 95       	ror	r19
    3e3a:	17 95       	ror	r17
    3e3c:	17 94       	ror	r1
    3e3e:	e1 18       	sub	r14, r1
    3e40:	f1 0a       	sbc	r15, r17
    3e42:	43 0b       	sbc	r20, r19
    3e44:	56 0b       	sbc	r21, r22
    3e46:	c9 0b       	sbc	r28, r25
    3e48:	d0 09       	sbc	r29, r0
    3e4a:	98 f0       	brcs	.+38     	; 0x3e72 <__ftoa_engine+0x19a>
    3e4c:	23 95       	inc	r18
    3e4e:	7e 91       	ld	r23, -X
    3e50:	73 95       	inc	r23
    3e52:	7a 33       	cpi	r23, 0x3A	; 58
    3e54:	08 f0       	brcs	.+2      	; 0x3e58 <__ftoa_engine+0x180>
    3e56:	70 e3       	ldi	r23, 0x30	; 48
    3e58:	7c 93       	st	X, r23
    3e5a:	20 13       	cpse	r18, r16
    3e5c:	b8 f7       	brcc	.-18     	; 0x3e4c <__ftoa_engine+0x174>
    3e5e:	7e 91       	ld	r23, -X
    3e60:	70 61       	ori	r23, 0x10	; 16
    3e62:	7d 93       	st	X+, r23
    3e64:	30 f0       	brcs	.+12     	; 0x3e72 <__ftoa_engine+0x19a>
    3e66:	83 95       	inc	r24
    3e68:	71 e3       	ldi	r23, 0x31	; 49
    3e6a:	7d 93       	st	X+, r23
    3e6c:	70 e3       	ldi	r23, 0x30	; 48
    3e6e:	2a 95       	dec	r18
    3e70:	e1 f7       	brne	.-8      	; 0x3e6a <__ftoa_engine+0x192>
    3e72:	11 24       	eor	r1, r1
    3e74:	ef 90       	pop	r14
    3e76:	ff 90       	pop	r15
    3e78:	0f 91       	pop	r16
    3e7a:	1f 91       	pop	r17
    3e7c:	cf 91       	pop	r28
    3e7e:	df 91       	pop	r29
    3e80:	99 27       	eor	r25, r25
    3e82:	87 fd       	sbrc	r24, 7
    3e84:	90 95       	com	r25
    3e86:	08 95       	ret

00003e88 <strnlen_P>:
    3e88:	fc 01       	movw	r30, r24
    3e8a:	05 90       	lpm	r0, Z+
    3e8c:	61 50       	subi	r22, 0x01	; 1
    3e8e:	70 40       	sbci	r23, 0x00	; 0
    3e90:	01 10       	cpse	r0, r1
    3e92:	d8 f7       	brcc	.-10     	; 0x3e8a <strnlen_P+0x2>
    3e94:	80 95       	com	r24
    3e96:	90 95       	com	r25
    3e98:	8e 0f       	add	r24, r30
    3e9a:	9f 1f       	adc	r25, r31
    3e9c:	08 95       	ret

00003e9e <memcpy>:
    3e9e:	fb 01       	movw	r30, r22
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	02 c0       	rjmp	.+4      	; 0x3ea8 <memcpy+0xa>
    3ea4:	01 90       	ld	r0, Z+
    3ea6:	0d 92       	st	X+, r0
    3ea8:	41 50       	subi	r20, 0x01	; 1
    3eaa:	50 40       	sbci	r21, 0x00	; 0
    3eac:	d8 f7       	brcc	.-10     	; 0x3ea4 <memcpy+0x6>
    3eae:	08 95       	ret

00003eb0 <memset>:
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	01 c0       	rjmp	.+2      	; 0x3eb6 <memset+0x6>
    3eb4:	6d 93       	st	X+, r22
    3eb6:	41 50       	subi	r20, 0x01	; 1
    3eb8:	50 40       	sbci	r21, 0x00	; 0
    3eba:	e0 f7       	brcc	.-8      	; 0x3eb4 <memset+0x4>
    3ebc:	08 95       	ret

00003ebe <strnlen>:
    3ebe:	fc 01       	movw	r30, r24
    3ec0:	61 50       	subi	r22, 0x01	; 1
    3ec2:	70 40       	sbci	r23, 0x00	; 0
    3ec4:	01 90       	ld	r0, Z+
    3ec6:	01 10       	cpse	r0, r1
    3ec8:	d8 f7       	brcc	.-10     	; 0x3ec0 <strnlen+0x2>
    3eca:	80 95       	com	r24
    3ecc:	90 95       	com	r25
    3ece:	8e 0f       	add	r24, r30
    3ed0:	9f 1f       	adc	r25, r31
    3ed2:	08 95       	ret

00003ed4 <__itoa_ncheck>:
    3ed4:	bb 27       	eor	r27, r27
    3ed6:	4a 30       	cpi	r20, 0x0A	; 10
    3ed8:	31 f4       	brne	.+12     	; 0x3ee6 <__itoa_ncheck+0x12>
    3eda:	99 23       	and	r25, r25
    3edc:	22 f4       	brpl	.+8      	; 0x3ee6 <__itoa_ncheck+0x12>
    3ede:	bd e2       	ldi	r27, 0x2D	; 45
    3ee0:	90 95       	com	r25
    3ee2:	81 95       	neg	r24
    3ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee6:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__utoa_common>

00003eea <__utoa_ncheck>:
    3eea:	bb 27       	eor	r27, r27

00003eec <__utoa_common>:
    3eec:	fb 01       	movw	r30, r22
    3eee:	55 27       	eor	r21, r21
    3ef0:	aa 27       	eor	r26, r26
    3ef2:	88 0f       	add	r24, r24
    3ef4:	99 1f       	adc	r25, r25
    3ef6:	aa 1f       	adc	r26, r26
    3ef8:	a4 17       	cp	r26, r20
    3efa:	10 f0       	brcs	.+4      	; 0x3f00 <__utoa_common+0x14>
    3efc:	a4 1b       	sub	r26, r20
    3efe:	83 95       	inc	r24
    3f00:	50 51       	subi	r21, 0x10	; 16
    3f02:	b9 f7       	brne	.-18     	; 0x3ef2 <__utoa_common+0x6>
    3f04:	a0 5d       	subi	r26, 0xD0	; 208
    3f06:	aa 33       	cpi	r26, 0x3A	; 58
    3f08:	08 f0       	brcs	.+2      	; 0x3f0c <__utoa_common+0x20>
    3f0a:	a9 5d       	subi	r26, 0xD9	; 217
    3f0c:	a1 93       	st	Z+, r26
    3f0e:	00 97       	sbiw	r24, 0x00	; 0
    3f10:	79 f7       	brne	.-34     	; 0x3ef0 <__utoa_common+0x4>
    3f12:	b1 11       	cpse	r27, r1
    3f14:	b1 93       	st	Z+, r27
    3f16:	11 92       	st	Z+, r1
    3f18:	cb 01       	movw	r24, r22
    3f1a:	0c 94 29 20 	jmp	0x4052	; 0x4052 <strrev>

00003f1e <fputc>:
    3f1e:	0f 93       	push	r16
    3f20:	1f 93       	push	r17
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	fb 01       	movw	r30, r22
    3f28:	23 81       	ldd	r18, Z+3	; 0x03
    3f2a:	21 fd       	sbrc	r18, 1
    3f2c:	03 c0       	rjmp	.+6      	; 0x3f34 <fputc+0x16>
    3f2e:	8f ef       	ldi	r24, 0xFF	; 255
    3f30:	9f ef       	ldi	r25, 0xFF	; 255
    3f32:	2c c0       	rjmp	.+88     	; 0x3f8c <fputc+0x6e>
    3f34:	22 ff       	sbrs	r18, 2
    3f36:	16 c0       	rjmp	.+44     	; 0x3f64 <fputc+0x46>
    3f38:	46 81       	ldd	r20, Z+6	; 0x06
    3f3a:	57 81       	ldd	r21, Z+7	; 0x07
    3f3c:	24 81       	ldd	r18, Z+4	; 0x04
    3f3e:	35 81       	ldd	r19, Z+5	; 0x05
    3f40:	42 17       	cp	r20, r18
    3f42:	53 07       	cpc	r21, r19
    3f44:	44 f4       	brge	.+16     	; 0x3f56 <fputc+0x38>
    3f46:	a0 81       	ld	r26, Z
    3f48:	b1 81       	ldd	r27, Z+1	; 0x01
    3f4a:	9d 01       	movw	r18, r26
    3f4c:	2f 5f       	subi	r18, 0xFF	; 255
    3f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f50:	20 83       	st	Z, r18
    3f52:	31 83       	std	Z+1, r19	; 0x01
    3f54:	8c 93       	st	X, r24
    3f56:	26 81       	ldd	r18, Z+6	; 0x06
    3f58:	37 81       	ldd	r19, Z+7	; 0x07
    3f5a:	2f 5f       	subi	r18, 0xFF	; 255
    3f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f5e:	26 83       	std	Z+6, r18	; 0x06
    3f60:	37 83       	std	Z+7, r19	; 0x07
    3f62:	14 c0       	rjmp	.+40     	; 0x3f8c <fputc+0x6e>
    3f64:	8b 01       	movw	r16, r22
    3f66:	ec 01       	movw	r28, r24
    3f68:	fb 01       	movw	r30, r22
    3f6a:	00 84       	ldd	r0, Z+8	; 0x08
    3f6c:	f1 85       	ldd	r31, Z+9	; 0x09
    3f6e:	e0 2d       	mov	r30, r0
    3f70:	19 95       	eicall
    3f72:	89 2b       	or	r24, r25
    3f74:	e1 f6       	brne	.-72     	; 0x3f2e <fputc+0x10>
    3f76:	d8 01       	movw	r26, r16
    3f78:	16 96       	adiw	r26, 0x06	; 6
    3f7a:	8d 91       	ld	r24, X+
    3f7c:	9c 91       	ld	r25, X
    3f7e:	17 97       	sbiw	r26, 0x07	; 7
    3f80:	01 96       	adiw	r24, 0x01	; 1
    3f82:	16 96       	adiw	r26, 0x06	; 6
    3f84:	8d 93       	st	X+, r24
    3f86:	9c 93       	st	X, r25
    3f88:	17 97       	sbiw	r26, 0x07	; 7
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	df 91       	pop	r29
    3f8e:	cf 91       	pop	r28
    3f90:	1f 91       	pop	r17
    3f92:	0f 91       	pop	r16
    3f94:	08 95       	ret

00003f96 <__ultoa_invert>:
    3f96:	fa 01       	movw	r30, r20
    3f98:	aa 27       	eor	r26, r26
    3f9a:	28 30       	cpi	r18, 0x08	; 8
    3f9c:	51 f1       	breq	.+84     	; 0x3ff2 <__ultoa_invert+0x5c>
    3f9e:	20 31       	cpi	r18, 0x10	; 16
    3fa0:	81 f1       	breq	.+96     	; 0x4002 <__stack+0x3>
    3fa2:	e8 94       	clt
    3fa4:	6f 93       	push	r22
    3fa6:	6e 7f       	andi	r22, 0xFE	; 254
    3fa8:	6e 5f       	subi	r22, 0xFE	; 254
    3faa:	7f 4f       	sbci	r23, 0xFF	; 255
    3fac:	8f 4f       	sbci	r24, 0xFF	; 255
    3fae:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb0:	af 4f       	sbci	r26, 0xFF	; 255
    3fb2:	b1 e0       	ldi	r27, 0x01	; 1
    3fb4:	3e d0       	rcall	.+124    	; 0x4032 <__stack+0x33>
    3fb6:	b4 e0       	ldi	r27, 0x04	; 4
    3fb8:	3c d0       	rcall	.+120    	; 0x4032 <__stack+0x33>
    3fba:	67 0f       	add	r22, r23
    3fbc:	78 1f       	adc	r23, r24
    3fbe:	89 1f       	adc	r24, r25
    3fc0:	9a 1f       	adc	r25, r26
    3fc2:	a1 1d       	adc	r26, r1
    3fc4:	68 0f       	add	r22, r24
    3fc6:	79 1f       	adc	r23, r25
    3fc8:	8a 1f       	adc	r24, r26
    3fca:	91 1d       	adc	r25, r1
    3fcc:	a1 1d       	adc	r26, r1
    3fce:	6a 0f       	add	r22, r26
    3fd0:	71 1d       	adc	r23, r1
    3fd2:	81 1d       	adc	r24, r1
    3fd4:	91 1d       	adc	r25, r1
    3fd6:	a1 1d       	adc	r26, r1
    3fd8:	20 d0       	rcall	.+64     	; 0x401a <__stack+0x1b>
    3fda:	09 f4       	brne	.+2      	; 0x3fde <__ultoa_invert+0x48>
    3fdc:	68 94       	set
    3fde:	3f 91       	pop	r19
    3fe0:	2a e0       	ldi	r18, 0x0A	; 10
    3fe2:	26 9f       	mul	r18, r22
    3fe4:	11 24       	eor	r1, r1
    3fe6:	30 19       	sub	r19, r0
    3fe8:	30 5d       	subi	r19, 0xD0	; 208
    3fea:	31 93       	st	Z+, r19
    3fec:	de f6       	brtc	.-74     	; 0x3fa4 <__ultoa_invert+0xe>
    3fee:	cf 01       	movw	r24, r30
    3ff0:	08 95       	ret
    3ff2:	46 2f       	mov	r20, r22
    3ff4:	47 70       	andi	r20, 0x07	; 7
    3ff6:	40 5d       	subi	r20, 0xD0	; 208
    3ff8:	41 93       	st	Z+, r20
    3ffa:	b3 e0       	ldi	r27, 0x03	; 3
    3ffc:	0f d0       	rcall	.+30     	; 0x401c <__stack+0x1d>
    3ffe:	c9 f7       	brne	.-14     	; 0x3ff2 <__ultoa_invert+0x5c>
    4000:	f6 cf       	rjmp	.-20     	; 0x3fee <__ultoa_invert+0x58>
    4002:	46 2f       	mov	r20, r22
    4004:	4f 70       	andi	r20, 0x0F	; 15
    4006:	40 5d       	subi	r20, 0xD0	; 208
    4008:	4a 33       	cpi	r20, 0x3A	; 58
    400a:	18 f0       	brcs	.+6      	; 0x4012 <__stack+0x13>
    400c:	49 5d       	subi	r20, 0xD9	; 217
    400e:	31 fd       	sbrc	r19, 1
    4010:	40 52       	subi	r20, 0x20	; 32
    4012:	41 93       	st	Z+, r20
    4014:	02 d0       	rcall	.+4      	; 0x401a <__stack+0x1b>
    4016:	a9 f7       	brne	.-22     	; 0x4002 <__stack+0x3>
    4018:	ea cf       	rjmp	.-44     	; 0x3fee <__ultoa_invert+0x58>
    401a:	b4 e0       	ldi	r27, 0x04	; 4
    401c:	a6 95       	lsr	r26
    401e:	97 95       	ror	r25
    4020:	87 95       	ror	r24
    4022:	77 95       	ror	r23
    4024:	67 95       	ror	r22
    4026:	ba 95       	dec	r27
    4028:	c9 f7       	brne	.-14     	; 0x401c <__stack+0x1d>
    402a:	00 97       	sbiw	r24, 0x00	; 0
    402c:	61 05       	cpc	r22, r1
    402e:	71 05       	cpc	r23, r1
    4030:	08 95       	ret
    4032:	9b 01       	movw	r18, r22
    4034:	ac 01       	movw	r20, r24
    4036:	0a 2e       	mov	r0, r26
    4038:	06 94       	lsr	r0
    403a:	57 95       	ror	r21
    403c:	47 95       	ror	r20
    403e:	37 95       	ror	r19
    4040:	27 95       	ror	r18
    4042:	ba 95       	dec	r27
    4044:	c9 f7       	brne	.-14     	; 0x4038 <__stack+0x39>
    4046:	62 0f       	add	r22, r18
    4048:	73 1f       	adc	r23, r19
    404a:	84 1f       	adc	r24, r20
    404c:	95 1f       	adc	r25, r21
    404e:	a0 1d       	adc	r26, r0
    4050:	08 95       	ret

00004052 <strrev>:
    4052:	dc 01       	movw	r26, r24
    4054:	fc 01       	movw	r30, r24
    4056:	67 2f       	mov	r22, r23
    4058:	71 91       	ld	r23, Z+
    405a:	77 23       	and	r23, r23
    405c:	e1 f7       	brne	.-8      	; 0x4056 <strrev+0x4>
    405e:	32 97       	sbiw	r30, 0x02	; 2
    4060:	04 c0       	rjmp	.+8      	; 0x406a <strrev+0x18>
    4062:	7c 91       	ld	r23, X
    4064:	6d 93       	st	X+, r22
    4066:	70 83       	st	Z, r23
    4068:	62 91       	ld	r22, -Z
    406a:	ae 17       	cp	r26, r30
    406c:	bf 07       	cpc	r27, r31
    406e:	c8 f3       	brcs	.-14     	; 0x4062 <strrev+0x10>
    4070:	08 95       	ret

00004072 <_exit>:
    4072:	f8 94       	cli

00004074 <__stop_program>:
    4074:	ff cf       	rjmp	.-2      	; 0x4074 <__stop_program>
