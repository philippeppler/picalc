
picalc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00802000  00004d54  00004de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c91  0080205e  0080205e  00004e46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004e46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000768  00000000  00000000  00004ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d4d0  00000000  00000000  0000564c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004c1e  00000000  00000000  00012b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004d47  00000000  00000000  0001773a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018f4  00000000  00000000  0001c484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000055e8  00000000  00000000  0001dd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007e2b  00000000  00000000  00023360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a0  00000000  00000000  0002b18b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
       c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      10:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      14:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      18:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      1c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      20:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      24:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      28:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      2c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      30:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      34:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      38:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__vector_14>
      3c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      40:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      44:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      48:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      4c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      50:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      54:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      58:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      5c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      60:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      64:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      68:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      6c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      70:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      74:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      78:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      7c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      80:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      84:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      88:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      8c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      90:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      94:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      98:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      9c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ac:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      b8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      bc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      c8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      d8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      dc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      e8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      ec:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      f8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
      fc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     100:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     104:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     108:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     10c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     110:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     114:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     118:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     11c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     120:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     124:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     128:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     12c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     130:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     134:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     138:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     13c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     140:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     144:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     148:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     14c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     150:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     154:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     158:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     15c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     160:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     164:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     168:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     16c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     170:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     174:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     178:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     17c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     180:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     184:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     188:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     18c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     190:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     194:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     198:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     19c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1a8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1ac:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1b0:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__vector_108>
     1b4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1b8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1bc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1c8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1d8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1dc:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1e8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1ec:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1f8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__bad_interrupt>
     1fc:	50 12       	cpse	r5, r16
     1fe:	50 12       	cpse	r5, r16
     200:	50 12       	cpse	r5, r16
     202:	9d 12       	cpse	r9, r29
     204:	85 12       	cpse	r8, r21
     206:	9a 12       	cpse	r9, r26
     208:	50 12       	cpse	r5, r16
     20a:	50 12       	cpse	r5, r16
     20c:	9d 12       	cpse	r9, r29
     20e:	85 12       	cpse	r8, r21

00000210 <__trampolines_start>:
     210:	0c 94 9d 12 	jmp	0x253a	; 0x253a <prvTimerTask+0x212>
     214:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <vEventGroupSetBitsCallback>
     218:	0c 94 00 18 	jmp	0x3000	; 0x3000 <vDisplayUpdateTask>
     21c:	0c 94 94 11 	jmp	0x2328	; 0x2328 <prvTimerTask>
     220:	0c 94 6f 13 	jmp	0x26de	; 0x26de <vGUI>
     224:	0c 94 85 12 	jmp	0x250a	; 0x250a <prvTimerTask+0x1e2>
     228:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <vButton>
     22c:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <prvTimerTask+0x20c>
     230:	0c 94 8f 14 	jmp	0x291e	; 0x291e <vCalc>
     234:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <prvTimerTask+0x178>
     238:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <prvIdleTask>

0000023c <__trampolines_end>:
     23c:	6e 61       	ori	r22, 0x1E	; 30
     23e:	6e 00       	.word	0x006e	; ????

00000240 <__c.2332>:
     240:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     250:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     260:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     270:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     280:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     290:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     300:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     310:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     320:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     330:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	cf ef       	ldi	r28, 0xFF	; 255
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df e3       	ldi	r29, 0x3F	; 63
     348:	de bf       	out	0x3e, r29	; 62
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	0c bf       	out	0x3c, r16	; 60

0000034e <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     34e:	ef ee       	ldi	r30, 0xEF	; 239
     350:	fc e2       	ldi	r31, 0x2C	; 44
     352:	8a ea       	ldi	r24, 0xAA	; 170
     354:	90 e4       	ldi	r25, 0x40	; 64
     356:	81 93       	st	Z+, r24
     358:	e0 30       	cpi	r30, 0x00	; 0
     35a:	f9 07       	cpc	r31, r25
     35c:	e0 f3       	brcs	.-8      	; 0x356 <init_mem+0x8>

0000035e <__do_copy_data>:
     35e:	10 e2       	ldi	r17, 0x20	; 32
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	b0 e2       	ldi	r27, 0x20	; 32
     364:	e4 e5       	ldi	r30, 0x54	; 84
     366:	fd e4       	ldi	r31, 0x4D	; 77
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	0b bf       	out	0x3b, r16	; 59
     36c:	02 c0       	rjmp	.+4      	; 0x372 <__do_copy_data+0x14>
     36e:	07 90       	elpm	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	ae 35       	cpi	r26, 0x5E	; 94
     374:	b1 07       	cpc	r27, r17
     376:	d9 f7       	brne	.-10     	; 0x36e <__do_copy_data+0x10>

00000378 <__do_clear_bss>:
     378:	2c e2       	ldi	r18, 0x2C	; 44
     37a:	ae e5       	ldi	r26, 0x5E	; 94
     37c:	b0 e2       	ldi	r27, 0x20	; 32
     37e:	01 c0       	rjmp	.+2      	; 0x382 <.do_clear_bss_start>

00000380 <.do_clear_bss_loop>:
     380:	1d 92       	st	X+, r1

00000382 <.do_clear_bss_start>:
     382:	af 3e       	cpi	r26, 0xEF	; 239
     384:	b2 07       	cpc	r27, r18
     386:	e1 f7       	brne	.-8      	; 0x380 <.do_clear_bss_loop>
     388:	0e 94 29 13 	call	0x2652	; 0x2652 <main>
     38c:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <_exit>

00000390 <__bad_interrupt>:
     390:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000394 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     39c:	80 ea       	ldi	r24, 0xA0	; 160
     39e:	96 e0       	ldi	r25, 0x06	; 6
     3a0:	20 e1       	ldi	r18, 0x10	; 16
     3a2:	fc 01       	movw	r30, r24
     3a4:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     3a6:	80 ea       	ldi	r24, 0xA0	; 160
     3a8:	96 e0       	ldi	r25, 0x06	; 6
     3aa:	20 e2       	ldi	r18, 0x20	; 32
     3ac:	fc 01       	movw	r30, r24
     3ae:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     3b0:	80 ea       	ldi	r24, 0xA0	; 160
     3b2:	96 e0       	ldi	r25, 0x06	; 6
     3b4:	20 e4       	ldi	r18, 0x40	; 64
     3b6:	fc 01       	movw	r30, r24
     3b8:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3ba:	80 ea       	ldi	r24, 0xA0	; 160
     3bc:	96 e0       	ldi	r25, 0x06	; 6
     3be:	20 e8       	ldi	r18, 0x80	; 128
     3c0:	fc 01       	movw	r30, r24
     3c2:	22 83       	std	Z+2, r18	; 0x02
 }
     3c4:	00 00       	nop
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3d4:	80 ea       	ldi	r24, 0xA0	; 160
     3d6:	96 e0       	ldi	r25, 0x06	; 6
     3d8:	fc 01       	movw	r30, r24
     3da:	80 85       	ldd	r24, Z+8	; 0x08
     3dc:	88 2f       	mov	r24, r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	80 71       	andi	r24, 0x10	; 16
     3e2:	99 27       	eor	r25, r25
     3e4:	95 95       	asr	r25
     3e6:	87 95       	ror	r24
     3e8:	95 95       	asr	r25
     3ea:	87 95       	ror	r24
     3ec:	95 95       	asr	r25
     3ee:	87 95       	ror	r24
     3f0:	95 95       	asr	r25
     3f2:	87 95       	ror	r24
     3f4:	89 2b       	or	r24, r25
     3f6:	89 f4       	brne	.+34     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		if(b1Count < 60000) {
     3f8:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     3fc:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     400:	80 36       	cpi	r24, 0x60	; 96
     402:	9a 4e       	sbci	r25, 0xEA	; 234
     404:	20 f5       	brcc	.+72     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			b1Count++;
     406:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     40a:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	80 93 5e 20 	sts	0x205E, r24	; 0x80205e <__data_end>
     414:	90 93 5f 20 	sts	0x205F, r25	; 0x80205f <__data_end+0x1>
     418:	1a c0       	rjmp	.+52     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     41a:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     41e:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     422:	0b 97       	sbiw	r24, 0x0b	; 11
     424:	68 f0       	brcs	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     426:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     42a:	90 91 5f 20 	lds	r25, 0x205F	; 0x80205f <__data_end+0x1>
     42e:	c3 97       	sbiw	r24, 0x33	; 51
     430:	18 f0       	brcs	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     432:	10 92 da 2c 	sts	0x2CDA, r1	; 0x802cda <b1Status>
     436:	07 c0       	rjmp	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	80 93 da 2c 	sts	0x2CDA, r24	; 0x802cda <b1Status>
     43e:	03 c0       	rjmp	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			}
		} else {
			b1Status = NOT_PRESSED;
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	80 93 da 2c 	sts	0x2CDA, r24	; 0x802cda <b1Status>
		}
		b1Count = 0;
     446:	10 92 5e 20 	sts	0x205E, r1	; 0x80205e <__data_end>
     44a:	10 92 5f 20 	sts	0x205F, r1	; 0x80205f <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     44e:	80 ea       	ldi	r24, 0xA0	; 160
     450:	96 e0       	ldi	r25, 0x06	; 6
     452:	fc 01       	movw	r30, r24
     454:	80 85       	ldd	r24, Z+8	; 0x08
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	80 72       	andi	r24, 0x20	; 32
     45c:	99 27       	eor	r25, r25
     45e:	95 95       	asr	r25
     460:	87 95       	ror	r24
     462:	95 95       	asr	r25
     464:	87 95       	ror	r24
     466:	95 95       	asr	r25
     468:	87 95       	ror	r24
     46a:	95 95       	asr	r25
     46c:	87 95       	ror	r24
     46e:	95 95       	asr	r25
     470:	87 95       	ror	r24
     472:	89 2b       	or	r24, r25
     474:	89 f4       	brne	.+34     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		if(b2Count < 60000) {
     476:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     47a:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     47e:	80 36       	cpi	r24, 0x60	; 96
     480:	9a 4e       	sbci	r25, 0xEA	; 234
     482:	20 f5       	brcc	.+72     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
			b2Count++;
     484:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     488:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <b2Count.3830>
     492:	90 93 61 20 	sts	0x2061, r25	; 0x802061 <b2Count.3830+0x1>
     496:	1a c0       	rjmp	.+52     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     498:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     49c:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     4a0:	0b 97       	sbiw	r24, 0x0b	; 11
     4a2:	68 f0       	brcs	.+26     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4a4:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <b2Count.3830>
     4a8:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <b2Count.3830+0x1>
     4ac:	c3 97       	sbiw	r24, 0x33	; 51
     4ae:	18 f0       	brcs	.+6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     4b0:	10 92 db 2c 	sts	0x2CDB, r1	; 0x802cdb <b2Status>
     4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 db 2c 	sts	0x2CDB, r24	; 0x802cdb <b2Status>
     4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
			}
		} else {
			b2Status = NOT_PRESSED;			
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	80 93 db 2c 	sts	0x2CDB, r24	; 0x802cdb <b2Status>
		}
		b2Count = 0;
     4c4:	10 92 60 20 	sts	0x2060, r1	; 0x802060 <b2Count.3830>
     4c8:	10 92 61 20 	sts	0x2061, r1	; 0x802061 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     4cc:	80 ea       	ldi	r24, 0xA0	; 160
     4ce:	96 e0       	ldi	r25, 0x06	; 6
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 85       	ldd	r24, Z+8	; 0x08
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	80 74       	andi	r24, 0x40	; 64
     4da:	99 27       	eor	r25, r25
     4dc:	08 2e       	mov	r0, r24
     4de:	89 2f       	mov	r24, r25
     4e0:	00 0c       	add	r0, r0
     4e2:	88 1f       	adc	r24, r24
     4e4:	99 0b       	sbc	r25, r25
     4e6:	00 0c       	add	r0, r0
     4e8:	88 1f       	adc	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	89 2b       	or	r24, r25
     4ee:	89 f4       	brne	.+34     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
		if(b3Count < 60000) {
     4f0:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     4f4:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     4f8:	80 36       	cpi	r24, 0x60	; 96
     4fa:	9a 4e       	sbci	r25, 0xEA	; 234
     4fc:	20 f5       	brcc	.+72     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
			b3Count++;
     4fe:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     502:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <b3Count.3831>
     50c:	90 93 63 20 	sts	0x2063, r25	; 0x802063 <b3Count.3831+0x1>
     510:	1a c0       	rjmp	.+52     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     512:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     516:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     51a:	0b 97       	sbiw	r24, 0x0b	; 11
     51c:	68 f0       	brcs	.+26     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     51e:	80 91 62 20 	lds	r24, 0x2062	; 0x802062 <b3Count.3831>
     522:	90 91 63 20 	lds	r25, 0x2063	; 0x802063 <b3Count.3831+0x1>
     526:	c3 97       	sbiw	r24, 0x33	; 51
     528:	18 f0       	brcs	.+6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     52a:	10 92 dc 2c 	sts	0x2CDC, r1	; 0x802cdc <b3Status>
     52e:	07 c0       	rjmp	.+14     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 dc 2c 	sts	0x2CDC, r24	; 0x802cdc <b3Status>
     536:	03 c0       	rjmp	.+6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
			}
		} else {
			b3Status = NOT_PRESSED;
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	80 93 dc 2c 	sts	0x2CDC, r24	; 0x802cdc <b3Status>
		}
		b3Count = 0;
     53e:	10 92 62 20 	sts	0x2062, r1	; 0x802062 <b3Count.3831>
     542:	10 92 63 20 	sts	0x2063, r1	; 0x802063 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     546:	80 ea       	ldi	r24, 0xA0	; 160
     548:	96 e0       	ldi	r25, 0x06	; 6
     54a:	fc 01       	movw	r30, r24
     54c:	80 85       	ldd	r24, Z+8	; 0x08
     54e:	88 23       	and	r24, r24
     550:	8c f0       	brlt	.+34     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
		if(b4Count < 60000) {
     552:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     556:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     55a:	80 36       	cpi	r24, 0x60	; 96
     55c:	9a 4e       	sbci	r25, 0xEA	; 234
     55e:	20 f5       	brcc	.+72     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			b4Count++;
     560:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     564:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	80 93 64 20 	sts	0x2064, r24	; 0x802064 <b4Count.3832>
     56e:	90 93 65 20 	sts	0x2065, r25	; 0x802065 <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     574:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     578:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     57c:	0b 97       	sbiw	r24, 0x0b	; 11
     57e:	68 f0       	brcs	.+26     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     580:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <b4Count.3832>
     584:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <b4Count.3832+0x1>
     588:	c3 97       	sbiw	r24, 0x33	; 51
     58a:	18 f0       	brcs	.+6      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     58c:	10 92 dd 2c 	sts	0x2CDD, r1	; 0x802cdd <b4Status>
     590:	07 c0       	rjmp	.+14     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	80 93 dd 2c 	sts	0x2CDD, r24	; 0x802cdd <b4Status>
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			}
		} else {
			b4Status = NOT_PRESSED;
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	80 93 dd 2c 	sts	0x2CDD, r24	; 0x802cdd <b4Status>
		}
		b4Count = 0;
     5a0:	10 92 64 20 	sts	0x2064, r1	; 0x802064 <b4Count.3832>
     5a4:	10 92 65 20 	sts	0x2065, r1	; 0x802065 <b4Count.3832+0x1>
	}
 }
     5a8:	00 00       	nop
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	88 2f       	mov	r24, r24
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	81 30       	cpi	r24, 0x01	; 1
     5c4:	91 05       	cpc	r25, r1
     5c6:	79 f0       	breq	.+30     	; 0x5e6 <getButtonPress+0x36>
     5c8:	82 30       	cpi	r24, 0x02	; 2
     5ca:	91 05       	cpc	r25, r1
     5cc:	1c f4       	brge	.+6      	; 0x5d4 <getButtonPress+0x24>
     5ce:	89 2b       	or	r24, r25
     5d0:	39 f0       	breq	.+14     	; 0x5e0 <getButtonPress+0x30>
     5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <getButtonPress+0x48>
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	91 05       	cpc	r25, r1
     5d8:	49 f0       	breq	.+18     	; 0x5ec <getButtonPress+0x3c>
     5da:	03 97       	sbiw	r24, 0x03	; 3
     5dc:	51 f0       	breq	.+20     	; 0x5f2 <getButtonPress+0x42>
     5de:	0c c0       	rjmp	.+24     	; 0x5f8 <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     5e0:	80 91 da 2c 	lds	r24, 0x2CDA	; 0x802cda <b1Status>
     5e4:	0a c0       	rjmp	.+20     	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     5e6:	80 91 db 2c 	lds	r24, 0x2CDB	; 0x802cdb <b2Status>
     5ea:	07 c0       	rjmp	.+14     	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     5ec:	80 91 dc 2c 	lds	r24, 0x2CDC	; 0x802cdc <b3Status>
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     5f2:	80 91 dd 2c 	lds	r24, 0x2CDD	; 0x802cdd <b4Status>
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	0f 90       	pop	r0
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     602:	0f 93       	push	r16
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	1f 92       	push	r1
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     60e:	2f b7       	in	r18, 0x3f	; 63
     610:	29 83       	std	Y+1, r18	; 0x01
     612:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     614:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     616:	fc 01       	movw	r30, r24
     618:	08 ed       	ldi	r16, 0xD8	; 216
     61a:	04 bf       	out	0x34, r16	; 52
     61c:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	8f bf       	out	0x3f, r24	; 63
#endif
}
     622:	0f 90       	pop	r0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	0f 91       	pop	r16
     62a:	08 95       	ret

0000062c <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     62c:	61 11       	cpse	r22, r1
     62e:	02 c0       	rjmp	.+4      	; 0x634 <CLKSYS_XOSC_Config+0x8>
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	01 c0       	rjmp	.+2      	; 0x636 <CLKSYS_XOSC_Config+0xa>
     634:	90 e2       	ldi	r25, 0x20	; 32
     636:	84 2b       	or	r24, r20
     638:	89 2b       	or	r24, r25
     63a:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     63e:	08 95       	ret

00000640 <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     640:	6f 71       	andi	r22, 0x1F	; 31
     642:	86 2b       	or	r24, r22
     644:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     648:	08 95       	ret

0000064a <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     64a:	e0 e5       	ldi	r30, 0x50	; 80
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	90 81       	ld	r25, Z
     650:	28 2f       	mov	r18, r24
     652:	20 95       	com	r18
     654:	92 23       	and	r25, r18
     656:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     658:	90 81       	ld	r25, Z
	return clkEnabled;
}
     65a:	89 23       	and	r24, r25
     65c:	08 95       	ret

0000065e <CLKSYS_Prescalers_Config>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     65e:	68 2b       	or	r22, r24
     660:	81 e4       	ldi	r24, 0x41	; 65
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 01 03 	call	0x602	; 0x602 <CCPWrite>
     668:	08 95       	ret

0000066a <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     672:	00 e4       	ldi	r16, 0x40	; 64
     674:	10 e0       	ldi	r17, 0x00	; 0
     676:	f8 01       	movw	r30, r16
     678:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
     67a:	68 7f       	andi	r22, 0xF8	; 248
     67c:	68 2b       	or	r22, r24
     67e:	80 e4       	ldi	r24, 0x40	; 64
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 01 03 	call	0x602	; 0x602 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     686:	f8 01       	movw	r30, r16
     688:	80 81       	ld	r24, Z
	return clkCtrl;
}
     68a:	8c 23       	and	r24, r28
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     694:	fc 01       	movw	r30, r24
     696:	90 81       	ld	r25, Z
     698:	90 7f       	andi	r25, 0xF0	; 240
     69a:	69 2b       	or	r22, r25
     69c:	60 83       	st	Z, r22
     69e:	08 95       	ret

000006a0 <TC0_ConfigWGM>:
     6a0:	fc 01       	movw	r30, r24
     6a2:	91 81       	ldd	r25, Z+1	; 0x01
     6a4:	98 7f       	andi	r25, 0xF8	; 248
     6a6:	69 2b       	or	r22, r25
     6a8:	61 83       	std	Z+1, r22	; 0x01
     6aa:	08 95       	ret

000006ac <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     6ac:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     6ae:	96 81       	ldd	r25, Z+6	; 0x06
     6b0:	9c 7f       	andi	r25, 0xFC	; 252
     6b2:	69 2b       	or	r22, r25
     6b4:	66 83       	std	Z+6, r22	; 0x06
     6b6:	08 95       	ret

000006b8 <software_reset>:
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     6b8:	00 00       	nop
     6ba:	88 ed       	ldi	r24, 0xD8	; 216
     6bc:	84 bf       	out	0x34, r24	; 52
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     6c4:	08 95       	ret

000006c6 <vApplicationStackOverflowHook>:
     6c6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <software_reset>
     6ca:	08 95       	ret

000006cc <xEventGroupCreate>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	80 e1       	ldi	r24, 0x10	; 16
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
     6d8:	ec 01       	movw	r28, r24
     6da:	00 97       	sbiw	r24, 0x00	; 0
     6dc:	41 f0       	breq	.+16     	; 0x6ee <xEventGroupCreate+0x22>
     6de:	fc 01       	movw	r30, r24
     6e0:	11 92       	st	Z+, r1
     6e2:	11 92       	st	Z+, r1
     6e4:	11 92       	st	Z+, r1
     6e6:	11 92       	st	Z+, r1
     6e8:	cf 01       	movw	r24, r30
     6ea:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
     6ee:	ce 01       	movw	r24, r28
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <xEventGroupWaitBits>:
     6f6:	2f 92       	push	r2
     6f8:	3f 92       	push	r3
     6fa:	4f 92       	push	r4
     6fc:	5f 92       	push	r5
     6fe:	6f 92       	push	r6
     700:	7f 92       	push	r7
     702:	8f 92       	push	r8
     704:	9f 92       	push	r9
     706:	af 92       	push	r10
     708:	bf 92       	push	r11
     70a:	cf 92       	push	r12
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
     71c:	4a 01       	movw	r8, r20
     71e:	5b 01       	movw	r10, r22
     720:	62 2e       	mov	r6, r18
     722:	70 2e       	mov	r7, r16
     724:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
     728:	28 80       	ld	r2, Y
     72a:	39 80       	ldd	r3, Y+1	; 0x01
     72c:	4a 80       	ldd	r4, Y+2	; 0x02
     72e:	5b 80       	ldd	r5, Y+3	; 0x03
     730:	01 11       	cpse	r16, r1
     732:	0d c0       	rjmp	.+26     	; 0x74e <xEventGroupWaitBits+0x58>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	b2 01       	movw	r22, r4
     738:	a1 01       	movw	r20, r2
     73a:	48 21       	and	r20, r8
     73c:	59 21       	and	r21, r9
     73e:	6a 21       	and	r22, r10
     740:	7b 21       	and	r23, r11
     742:	45 2b       	or	r20, r21
     744:	46 2b       	or	r20, r22
     746:	47 2b       	or	r20, r23
     748:	79 f4       	brne	.+30     	; 0x768 <xEventGroupWaitBits+0x72>
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	0d c0       	rjmp	.+26     	; 0x768 <xEventGroupWaitBits+0x72>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	b2 01       	movw	r22, r4
     752:	a1 01       	movw	r20, r2
     754:	48 21       	and	r20, r8
     756:	59 21       	and	r21, r9
     758:	6a 21       	and	r22, r10
     75a:	7b 21       	and	r23, r11
     75c:	48 15       	cp	r20, r8
     75e:	59 05       	cpc	r21, r9
     760:	6a 05       	cpc	r22, r10
     762:	7b 05       	cpc	r23, r11
     764:	09 f0       	breq	.+2      	; 0x768 <xEventGroupWaitBits+0x72>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	88 23       	and	r24, r24
     76a:	81 f0       	breq	.+32     	; 0x78c <xEventGroupWaitBits+0x96>
     76c:	66 20       	and	r6, r6
     76e:	09 f4       	brne	.+2      	; 0x772 <xEventGroupWaitBits+0x7c>
     770:	70 c0       	rjmp	.+224    	; 0x852 <xEventGroupWaitBits+0x15c>
     772:	80 94       	com	r8
     774:	90 94       	com	r9
     776:	a0 94       	com	r10
     778:	b0 94       	com	r11
     77a:	82 20       	and	r8, r2
     77c:	93 20       	and	r9, r3
     77e:	a4 20       	and	r10, r4
     780:	b5 20       	and	r11, r5
     782:	88 82       	st	Y, r8
     784:	99 82       	std	Y+1, r9	; 0x01
     786:	aa 82       	std	Y+2, r10	; 0x02
     788:	bb 82       	std	Y+3, r11	; 0x03
     78a:	63 c0       	rjmp	.+198    	; 0x852 <xEventGroupWaitBits+0x15c>
     78c:	c1 14       	cp	r12, r1
     78e:	d1 04       	cpc	r13, r1
     790:	e1 04       	cpc	r14, r1
     792:	f1 04       	cpc	r15, r1
     794:	09 f4       	brne	.+2      	; 0x798 <xEventGroupWaitBits+0xa2>
     796:	5d c0       	rjmp	.+186    	; 0x852 <xEventGroupWaitBits+0x15c>
     798:	66 20       	and	r6, r6
     79a:	29 f0       	breq	.+10     	; 0x7a6 <xEventGroupWaitBits+0xb0>
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <xEventGroupWaitBits+0xb6>
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	ba 01       	movw	r22, r20
     7ac:	71 10       	cpse	r7, r1
     7ae:	74 60       	ori	r23, 0x04	; 4
     7b0:	48 29       	or	r20, r8
     7b2:	59 29       	or	r21, r9
     7b4:	6a 29       	or	r22, r10
     7b6:	7b 29       	or	r23, r11
     7b8:	97 01       	movw	r18, r14
     7ba:	86 01       	movw	r16, r12
     7bc:	ce 01       	movw	r24, r28
     7be:	04 96       	adiw	r24, 0x04	; 4
     7c0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <vTaskPlaceOnUnorderedEventList>
     7c4:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     7c8:	81 11       	cpse	r24, r1
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <xEventGroupWaitBits+0xda>
     7cc:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
     7d0:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <uxTaskResetEventItemValue>
     7d4:	91 fd       	sbrc	r25, 1
     7d6:	39 c0       	rjmp	.+114    	; 0x84a <xEventGroupWaitBits+0x154>
     7d8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7dc:	ff 93       	push	r31
     7de:	f8 7f       	andi	r31, 0xF8	; 248
     7e0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7e4:	68 81       	ld	r22, Y
     7e6:	79 81       	ldd	r23, Y+1	; 0x01
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	9b 81       	ldd	r25, Y+3	; 0x03
     7ec:	71 10       	cpse	r7, r1
     7ee:	0d c0       	rjmp	.+26     	; 0x80a <xEventGroupWaitBits+0x114>
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	75 01       	movw	r14, r10
     7f4:	64 01       	movw	r12, r8
     7f6:	c6 22       	and	r12, r22
     7f8:	d7 22       	and	r13, r23
     7fa:	e8 22       	and	r14, r24
     7fc:	f9 22       	and	r15, r25
     7fe:	cd 28       	or	r12, r13
     800:	ce 28       	or	r12, r14
     802:	cf 28       	or	r12, r15
     804:	79 f4       	brne	.+30     	; 0x824 <xEventGroupWaitBits+0x12e>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	0d c0       	rjmp	.+26     	; 0x824 <xEventGroupWaitBits+0x12e>
     80a:	21 e0       	ldi	r18, 0x01	; 1
     80c:	75 01       	movw	r14, r10
     80e:	64 01       	movw	r12, r8
     810:	c6 22       	and	r12, r22
     812:	d7 22       	and	r13, r23
     814:	e8 22       	and	r14, r24
     816:	f9 22       	and	r15, r25
     818:	c8 14       	cp	r12, r8
     81a:	d9 04       	cpc	r13, r9
     81c:	ea 04       	cpc	r14, r10
     81e:	fb 04       	cpc	r15, r11
     820:	09 f0       	breq	.+2      	; 0x824 <xEventGroupWaitBits+0x12e>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	22 23       	and	r18, r18
     826:	71 f0       	breq	.+28     	; 0x844 <xEventGroupWaitBits+0x14e>
     828:	66 20       	and	r6, r6
     82a:	61 f0       	breq	.+24     	; 0x844 <xEventGroupWaitBits+0x14e>
     82c:	80 94       	com	r8
     82e:	90 94       	com	r9
     830:	a0 94       	com	r10
     832:	b0 94       	com	r11
     834:	86 22       	and	r8, r22
     836:	97 22       	and	r9, r23
     838:	a8 22       	and	r10, r24
     83a:	b9 22       	and	r11, r25
     83c:	88 82       	st	Y, r8
     83e:	99 82       	std	Y+1, r9	; 0x01
     840:	aa 82       	std	Y+2, r10	; 0x02
     842:	bb 82       	std	Y+3, r11	; 0x03
     844:	ff 91       	pop	r31
     846:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     84a:	1b 01       	movw	r2, r22
     84c:	2c 01       	movw	r4, r24
     84e:	55 24       	eor	r5, r5
     850:	02 c0       	rjmp	.+4      	; 0x856 <xEventGroupWaitBits+0x160>
     852:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     856:	c2 01       	movw	r24, r4
     858:	b1 01       	movw	r22, r2
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	af 90       	pop	r10
     86e:	9f 90       	pop	r9
     870:	8f 90       	pop	r8
     872:	7f 90       	pop	r7
     874:	6f 90       	pop	r6
     876:	5f 90       	pop	r5
     878:	4f 90       	pop	r4
     87a:	3f 90       	pop	r3
     87c:	2f 90       	pop	r2
     87e:	08 95       	ret

00000880 <xEventGroupClearBits>:
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     888:	ff 93       	push	r31
     88a:	f8 7f       	andi	r31, 0xF8	; 248
     88c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     890:	fc 01       	movw	r30, r24
     892:	00 81       	ld	r16, Z
     894:	11 81       	ldd	r17, Z+1	; 0x01
     896:	22 81       	ldd	r18, Z+2	; 0x02
     898:	33 81       	ldd	r19, Z+3	; 0x03
     89a:	40 95       	com	r20
     89c:	50 95       	com	r21
     89e:	60 95       	com	r22
     8a0:	70 95       	com	r23
     8a2:	40 23       	and	r20, r16
     8a4:	51 23       	and	r21, r17
     8a6:	62 23       	and	r22, r18
     8a8:	73 23       	and	r23, r19
     8aa:	40 83       	st	Z, r20
     8ac:	51 83       	std	Z+1, r21	; 0x01
     8ae:	62 83       	std	Z+2, r22	; 0x02
     8b0:	73 83       	std	Z+3, r23	; 0x03
     8b2:	ff 91       	pop	r31
     8b4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     8b8:	c9 01       	movw	r24, r18
     8ba:	b8 01       	movw	r22, r16
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <xEventGroupSetBits>:
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
     8e0:	6a 01       	movw	r12, r20
     8e2:	7b 01       	movw	r14, r22
     8e4:	8c 01       	movw	r16, r24
     8e6:	09 5f       	subi	r16, 0xF9	; 249
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
     8ee:	eb 85       	ldd	r30, Y+11	; 0x0b
     8f0:	fc 85       	ldd	r31, Y+12	; 0x0c
     8f2:	88 81       	ld	r24, Y
     8f4:	99 81       	ldd	r25, Y+1	; 0x01
     8f6:	aa 81       	ldd	r26, Y+2	; 0x02
     8f8:	bb 81       	ldd	r27, Y+3	; 0x03
     8fa:	c8 2a       	or	r12, r24
     8fc:	d9 2a       	or	r13, r25
     8fe:	ea 2a       	or	r14, r26
     900:	fb 2a       	or	r15, r27
     902:	c8 82       	st	Y, r12
     904:	d9 82       	std	Y+1, r13	; 0x01
     906:	ea 82       	std	Y+2, r14	; 0x02
     908:	fb 82       	std	Y+3, r15	; 0x03
     90a:	0e 17       	cp	r16, r30
     90c:	1f 07       	cpc	r17, r31
     90e:	09 f4       	brne	.+2      	; 0x912 <xEventGroupSetBits+0x50>
     910:	42 c0       	rjmp	.+132    	; 0x996 <xEventGroupSetBits+0xd4>
     912:	c1 2c       	mov	r12, r1
     914:	d1 2c       	mov	r13, r1
     916:	76 01       	movw	r14, r12
     918:	a4 80       	ldd	r10, Z+4	; 0x04
     91a:	b5 80       	ldd	r11, Z+5	; 0x05
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	a2 81       	ldd	r26, Z+2	; 0x02
     922:	b3 81       	ldd	r27, Z+3	; 0x03
     924:	ac 01       	movw	r20, r24
     926:	bd 01       	movw	r22, r26
     928:	77 27       	eor	r23, r23
     92a:	b2 fd       	sbrc	r27, 2
     92c:	0f c0       	rjmp	.+30     	; 0x94c <xEventGroupSetBits+0x8a>
     92e:	48 80       	ld	r4, Y
     930:	59 80       	ldd	r5, Y+1	; 0x01
     932:	6a 80       	ldd	r6, Y+2	; 0x02
     934:	7b 80       	ldd	r7, Y+3	; 0x03
     936:	44 22       	and	r4, r20
     938:	55 22       	and	r5, r21
     93a:	66 22       	and	r6, r22
     93c:	77 22       	and	r7, r23
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	45 28       	or	r4, r5
     942:	46 28       	or	r4, r6
     944:	47 28       	or	r4, r7
     946:	89 f4       	brne	.+34     	; 0x96a <xEventGroupSetBits+0xa8>
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	0f c0       	rjmp	.+30     	; 0x96a <xEventGroupSetBits+0xa8>
     94c:	48 80       	ld	r4, Y
     94e:	59 80       	ldd	r5, Y+1	; 0x01
     950:	6a 80       	ldd	r6, Y+2	; 0x02
     952:	7b 80       	ldd	r7, Y+3	; 0x03
     954:	44 22       	and	r4, r20
     956:	55 22       	and	r5, r21
     958:	66 22       	and	r6, r22
     95a:	77 22       	and	r7, r23
     95c:	21 e0       	ldi	r18, 0x01	; 1
     95e:	44 16       	cp	r4, r20
     960:	55 06       	cpc	r5, r21
     962:	66 06       	cpc	r6, r22
     964:	77 06       	cpc	r7, r23
     966:	09 f0       	breq	.+2      	; 0x96a <xEventGroupSetBits+0xa8>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	22 23       	and	r18, r18
     96c:	71 f0       	breq	.+28     	; 0x98a <xEventGroupSetBits+0xc8>
     96e:	b0 ff       	sbrs	r27, 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <xEventGroupSetBits+0xb8>
     972:	c4 2a       	or	r12, r20
     974:	d5 2a       	or	r13, r21
     976:	e6 2a       	or	r14, r22
     978:	f7 2a       	or	r15, r23
     97a:	48 81       	ld	r20, Y
     97c:	59 81       	ldd	r21, Y+1	; 0x01
     97e:	6a 81       	ldd	r22, Y+2	; 0x02
     980:	7b 81       	ldd	r23, Y+3	; 0x03
     982:	72 60       	ori	r23, 0x02	; 2
     984:	cf 01       	movw	r24, r30
     986:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <vTaskRemoveFromUnorderedEventList>
     98a:	ea 2d       	mov	r30, r10
     98c:	fb 2d       	mov	r31, r11
     98e:	0e 17       	cp	r16, r30
     990:	1f 07       	cpc	r17, r31
     992:	11 f6       	brne	.-124    	; 0x918 <xEventGroupSetBits+0x56>
     994:	03 c0       	rjmp	.+6      	; 0x99c <xEventGroupSetBits+0xda>
     996:	c1 2c       	mov	r12, r1
     998:	d1 2c       	mov	r13, r1
     99a:	76 01       	movw	r14, r12
     99c:	c0 94       	com	r12
     99e:	d0 94       	com	r13
     9a0:	e0 94       	com	r14
     9a2:	f0 94       	com	r15
     9a4:	88 81       	ld	r24, Y
     9a6:	99 81       	ldd	r25, Y+1	; 0x01
     9a8:	aa 81       	ldd	r26, Y+2	; 0x02
     9aa:	bb 81       	ldd	r27, Y+3	; 0x03
     9ac:	c8 22       	and	r12, r24
     9ae:	d9 22       	and	r13, r25
     9b0:	ea 22       	and	r14, r26
     9b2:	fb 22       	and	r15, r27
     9b4:	c8 82       	st	Y, r12
     9b6:	d9 82       	std	Y+1, r13	; 0x01
     9b8:	ea 82       	std	Y+2, r14	; 0x02
     9ba:	fb 82       	std	Y+3, r15	; 0x03
     9bc:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
     9c0:	68 81       	ld	r22, Y
     9c2:	79 81       	ldd	r23, Y+1	; 0x01
     9c4:	8a 81       	ldd	r24, Y+2	; 0x02
     9c6:	9b 81       	ldd	r25, Y+3	; 0x03
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	cf 90       	pop	r12
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	7f 90       	pop	r7
     9de:	6f 90       	pop	r6
     9e0:	5f 90       	pop	r5
     9e2:	4f 90       	pop	r4
     9e4:	08 95       	ret

000009e6 <vEventGroupSetBitsCallback>:
     9e6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
     9ea:	08 95       	ret

000009ec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     9f0:	89 01       	movw	r16, r18
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	bc 01       	movw	r22, r24
     9f8:	83 ef       	ldi	r24, 0xF3	; 243
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	0e 94 c3 12 	call	0x2586	; 0x2586 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	08 95       	ret

00000a06 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     a0c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     a10:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <xNextFreeByte>
     a14:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <xNextFreeByte+0x1>
     a18:	c9 01       	movw	r24, r18
     a1a:	8c 0f       	add	r24, r28
     a1c:	9d 1f       	adc	r25, r29
     a1e:	88 3b       	cpi	r24, 0xB8	; 184
     a20:	4b e0       	ldi	r20, 0x0B	; 11
     a22:	94 07       	cpc	r25, r20
     a24:	58 f4       	brcc	.+22     	; 0xa3c <pvPortMalloc+0x36>
     a26:	28 17       	cp	r18, r24
     a28:	39 07       	cpc	r19, r25
     a2a:	58 f4       	brcc	.+22     	; 0xa42 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     a2c:	e9 01       	movw	r28, r18
     a2e:	c8 59       	subi	r28, 0x98	; 152
     a30:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     a32:	80 93 66 20 	sts	0x2066, r24	; 0x802066 <xNextFreeByte>
     a36:	90 93 67 20 	sts	0x2067, r25	; 0x802067 <xNextFreeByte+0x1>
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     a3c:	c0 e0       	ldi	r28, 0x00	; 0
     a3e:	d0 e0       	ldi	r29, 0x00	; 0
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <pvPortMalloc+0x40>
     a42:	c0 e0       	ldi	r28, 0x00	; 0
     a44:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     a46:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     a4a:	ce 01       	movw	r24, r28
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a52:	08 95       	ret

00000a54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a54:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a56:	03 96       	adiw	r24, 0x03	; 3
     a58:	81 83       	std	Z+1, r24	; 0x01
     a5a:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     a5c:	4f ef       	ldi	r20, 0xFF	; 255
     a5e:	5f ef       	ldi	r21, 0xFF	; 255
     a60:	ba 01       	movw	r22, r20
     a62:	43 83       	std	Z+3, r20	; 0x03
     a64:	54 83       	std	Z+4, r21	; 0x04
     a66:	65 83       	std	Z+5, r22	; 0x05
     a68:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a6a:	87 83       	std	Z+7, r24	; 0x07
     a6c:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a6e:	81 87       	std	Z+9, r24	; 0x09
     a70:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a72:	10 82       	st	Z, r1
     a74:	08 95       	ret

00000a76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     a76:	fc 01       	movw	r30, r24
     a78:	12 86       	std	Z+10, r1	; 0x0a
     a7a:	13 86       	std	Z+11, r1	; 0x0b
     a7c:	08 95       	ret

00000a7e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	9c 01       	movw	r18, r24
     a84:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     a86:	dc 01       	movw	r26, r24
     a88:	11 96       	adiw	r26, 0x01	; 1
     a8a:	cd 91       	ld	r28, X+
     a8c:	dc 91       	ld	r29, X
     a8e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     a90:	c4 83       	std	Z+4, r28	; 0x04
     a92:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a94:	8e 81       	ldd	r24, Y+6	; 0x06
     a96:	9f 81       	ldd	r25, Y+7	; 0x07
     a98:	86 83       	std	Z+6, r24	; 0x06
     a9a:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     a9c:	8e 81       	ldd	r24, Y+6	; 0x06
     a9e:	9f 81       	ldd	r25, Y+7	; 0x07
     aa0:	dc 01       	movw	r26, r24
     aa2:	14 96       	adiw	r26, 0x04	; 4
     aa4:	6d 93       	st	X+, r22
     aa6:	7c 93       	st	X, r23
     aa8:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     aaa:	6e 83       	std	Y+6, r22	; 0x06
     aac:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     aae:	22 87       	std	Z+10, r18	; 0x0a
     ab0:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     ab2:	f9 01       	movw	r30, r18
     ab4:	80 81       	ld	r24, Z
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	80 83       	st	Z, r24
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     aca:	08 81       	ld	r16, Y
     acc:	19 81       	ldd	r17, Y+1	; 0x01
     ace:	2a 81       	ldd	r18, Y+2	; 0x02
     ad0:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     ad2:	0f 3f       	cpi	r16, 0xFF	; 255
     ad4:	4f ef       	ldi	r20, 0xFF	; 255
     ad6:	14 07       	cpc	r17, r20
     ad8:	24 07       	cpc	r18, r20
     ada:	34 07       	cpc	r19, r20
     adc:	21 f4       	brne	.+8      	; 0xae6 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     ade:	fc 01       	movw	r30, r24
     ae0:	a1 85       	ldd	r26, Z+9	; 0x09
     ae2:	b2 85       	ldd	r27, Z+10	; 0x0a
     ae4:	11 c0       	rjmp	.+34     	; 0xb08 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ae6:	dc 01       	movw	r26, r24
     ae8:	13 96       	adiw	r26, 0x03	; 3
     aea:	01 c0       	rjmp	.+2      	; 0xaee <vListInsert+0x2e>
     aec:	df 01       	movw	r26, r30
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	ed 91       	ld	r30, X+
     af2:	fc 91       	ld	r31, X
     af4:	15 97       	sbiw	r26, 0x05	; 5
     af6:	40 81       	ld	r20, Z
     af8:	51 81       	ldd	r21, Z+1	; 0x01
     afa:	62 81       	ldd	r22, Z+2	; 0x02
     afc:	73 81       	ldd	r23, Z+3	; 0x03
     afe:	04 17       	cp	r16, r20
     b00:	15 07       	cpc	r17, r21
     b02:	26 07       	cpc	r18, r22
     b04:	37 07       	cpc	r19, r23
     b06:	90 f7       	brcc	.-28     	; 0xaec <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     b08:	14 96       	adiw	r26, 0x04	; 4
     b0a:	ed 91       	ld	r30, X+
     b0c:	fc 91       	ld	r31, X
     b0e:	15 97       	sbiw	r26, 0x05	; 5
     b10:	ec 83       	std	Y+4, r30	; 0x04
     b12:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b14:	c6 83       	std	Z+6, r28	; 0x06
     b16:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     b18:	ae 83       	std	Y+6, r26	; 0x06
     b1a:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     b1c:	14 96       	adiw	r26, 0x04	; 4
     b1e:	cd 93       	st	X+, r28
     b20:	dc 93       	st	X, r29
     b22:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     b24:	8a 87       	std	Y+10, r24	; 0x0a
     b26:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     b28:	fc 01       	movw	r30, r24
     b2a:	20 81       	ld	r18, Z
     b2c:	2f 5f       	subi	r18, 0xFF	; 255
     b2e:	20 83       	st	Z, r18
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	08 95       	ret

00000b3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     b40:	a2 85       	ldd	r26, Z+10	; 0x0a
     b42:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b44:	c4 81       	ldd	r28, Z+4	; 0x04
     b46:	d5 81       	ldd	r29, Z+5	; 0x05
     b48:	86 81       	ldd	r24, Z+6	; 0x06
     b4a:	97 81       	ldd	r25, Z+7	; 0x07
     b4c:	8e 83       	std	Y+6, r24	; 0x06
     b4e:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b50:	c6 81       	ldd	r28, Z+6	; 0x06
     b52:	d7 81       	ldd	r29, Z+7	; 0x07
     b54:	84 81       	ldd	r24, Z+4	; 0x04
     b56:	95 81       	ldd	r25, Z+5	; 0x05
     b58:	8c 83       	std	Y+4, r24	; 0x04
     b5a:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	12 97       	sbiw	r26, 0x02	; 2
     b64:	e8 17       	cp	r30, r24
     b66:	f9 07       	cpc	r31, r25
     b68:	31 f4       	brne	.+12     	; 0xb76 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     b6a:	86 81       	ldd	r24, Z+6	; 0x06
     b6c:	97 81       	ldd	r25, Z+7	; 0x07
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	8d 93       	st	X+, r24
     b72:	9c 93       	st	X, r25
     b74:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     b76:	12 86       	std	Z+10, r1	; 0x0a
     b78:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     b7a:	8c 91       	ld	r24, X
     b7c:	81 50       	subi	r24, 0x01	; 1
     b7e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     b80:	8c 91       	ld	r24, X
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <_portSetInterruptMaskFromIsr>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     b88:	e0 ea       	ldi	r30, 0xA0	; 160
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	92 81       	ldd	r25, Z+2	; 0x02
     b90:	98 7f       	andi	r25, 0xF8	; 248
     b92:	92 83       	std	Z+2, r25	; 0x02
     b94:	08 95       	ret

00000b96 <pxPortInitialiseStack>:
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	31 e1       	ldi	r19, 0x11	; 17
     ba0:	fc 01       	movw	r30, r24
     ba2:	30 83       	st	Z, r19
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	22 e2       	ldi	r18, 0x22	; 34
     ba8:	20 83       	st	Z, r18
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	a3 e3       	ldi	r26, 0x33	; 51
     bae:	a0 83       	st	Z, r26
     bb0:	6b 01       	movw	r12, r22
     bb2:	e1 2c       	mov	r14, r1
     bb4:	f1 2c       	mov	r15, r1
     bb6:	31 97       	sbiw	r30, 0x01	; 1
     bb8:	60 83       	st	Z, r22
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	d0 82       	st	Z, r13
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	e0 82       	st	Z, r14
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	61 e3       	ldi	r22, 0x31	; 49
     bc6:	60 83       	st	Z, r22
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	60 e8       	ldi	r22, 0x80	; 128
     bcc:	60 83       	st	Z, r22
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	67 e8       	ldi	r22, 0x87	; 135
     bd2:	60 83       	st	Z, r22
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	10 82       	st	Z, r1
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	10 82       	st	Z, r1
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	62 e0       	ldi	r22, 0x02	; 2
     be0:	60 83       	st	Z, r22
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	60 83       	st	Z, r22
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	64 e0       	ldi	r22, 0x04	; 4
     bec:	60 83       	st	Z, r22
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	65 e0       	ldi	r22, 0x05	; 5
     bf2:	60 83       	st	Z, r22
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	66 e0       	ldi	r22, 0x06	; 6
     bf8:	60 83       	st	Z, r22
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	67 e0       	ldi	r22, 0x07	; 7
     bfe:	60 83       	st	Z, r22
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	68 e0       	ldi	r22, 0x08	; 8
     c04:	60 83       	st	Z, r22
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	69 e0       	ldi	r22, 0x09	; 9
     c0a:	60 83       	st	Z, r22
     c0c:	31 97       	sbiw	r30, 0x01	; 1
     c0e:	60 e1       	ldi	r22, 0x10	; 16
     c10:	60 83       	st	Z, r22
     c12:	31 97       	sbiw	r30, 0x01	; 1
     c14:	30 83       	st	Z, r19
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	32 e1       	ldi	r19, 0x12	; 18
     c1a:	30 83       	st	Z, r19
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	33 e1       	ldi	r19, 0x13	; 19
     c20:	30 83       	st	Z, r19
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	34 e1       	ldi	r19, 0x14	; 20
     c26:	30 83       	st	Z, r19
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	35 e1       	ldi	r19, 0x15	; 21
     c2c:	30 83       	st	Z, r19
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	36 e1       	ldi	r19, 0x16	; 22
     c32:	30 83       	st	Z, r19
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	37 e1       	ldi	r19, 0x17	; 23
     c38:	30 83       	st	Z, r19
     c3a:	31 97       	sbiw	r30, 0x01	; 1
     c3c:	38 e1       	ldi	r19, 0x18	; 24
     c3e:	30 83       	st	Z, r19
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	39 e1       	ldi	r19, 0x19	; 25
     c44:	30 83       	st	Z, r19
     c46:	31 97       	sbiw	r30, 0x01	; 1
     c48:	30 e2       	ldi	r19, 0x20	; 32
     c4a:	30 83       	st	Z, r19
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	31 e2       	ldi	r19, 0x21	; 33
     c50:	30 83       	st	Z, r19
     c52:	31 97       	sbiw	r30, 0x01	; 1
     c54:	20 83       	st	Z, r18
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	23 e2       	ldi	r18, 0x23	; 35
     c5a:	20 83       	st	Z, r18
     c5c:	6a 01       	movw	r12, r20
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	40 83       	st	Z, r20
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	d0 82       	st	Z, r13
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	26 e2       	ldi	r18, 0x26	; 38
     c6a:	20 83       	st	Z, r18
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	27 e2       	ldi	r18, 0x27	; 39
     c70:	20 83       	st	Z, r18
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	28 e2       	ldi	r18, 0x28	; 40
     c76:	20 83       	st	Z, r18
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	29 e2       	ldi	r18, 0x29	; 41
     c7c:	20 83       	st	Z, r18
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	20 e3       	ldi	r18, 0x30	; 48
     c82:	20 83       	st	Z, r18
     c84:	88 97       	sbiw	r24, 0x28	; 40
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
     c8e:	08 95       	ret

00000c90 <xPortStartScheduler>:
     c90:	83 ef       	ldi	r24, 0xF3	; 243
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     c98:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     c9c:	65 e0       	ldi	r22, 0x05	; 5
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	98 e0       	ldi	r25, 0x08	; 8
     ca2:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	98 e0       	ldi	r25, 0x08	; 8
     cac:	0e 94 56 03 	call	0x6ac	; 0x6ac <TC0_SetOverflowIntLevel>
     cb0:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     cb4:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     cb8:	0d 90       	ld	r0, X+
     cba:	0d be       	out	0x3d, r0	; 61
     cbc:	0d 90       	ld	r0, X+
     cbe:	0e be       	out	0x3e, r0	; 62
     cc0:	ef 91       	pop	r30
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	7f 90       	pop	r7
     cf0:	6f 90       	pop	r6
     cf2:	5f 90       	pop	r5
     cf4:	4f 90       	pop	r4
     cf6:	3f 90       	pop	r3
     cf8:	2f 90       	pop	r2
     cfa:	1f 90       	pop	r1
     cfc:	0f 90       	pop	r0
     cfe:	ff 91       	pop	r31
     d00:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d04:	ff 91       	pop	r31
     d06:	ff bf       	out	0x3f, r31	; 63
     d08:	ff 91       	pop	r31
     d0a:	08 95       	ret
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	08 95       	ret

00000d10 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d10:	ff 93       	push	r31
     d12:	ff b7       	in	r31, 0x3f	; 63
     d14:	ff 93       	push	r31
     d16:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d1a:	ff 93       	push	r31
     d1c:	f8 7f       	andi	r31, 0xF8	; 248
     d1e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d22:	0f 92       	push	r0
     d24:	1f 92       	push	r1
     d26:	11 24       	eor	r1, r1
     d28:	2f 92       	push	r2
     d2a:	3f 92       	push	r3
     d2c:	4f 92       	push	r4
     d2e:	5f 92       	push	r5
     d30:	6f 92       	push	r6
     d32:	7f 92       	push	r7
     d34:	8f 92       	push	r8
     d36:	9f 92       	push	r9
     d38:	af 92       	push	r10
     d3a:	bf 92       	push	r11
     d3c:	cf 92       	push	r12
     d3e:	df 92       	push	r13
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ef 93       	push	r30
     d62:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     d66:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     d6a:	0d b6       	in	r0, 0x3d	; 61
     d6c:	0d 92       	st	X+, r0
     d6e:	0e b6       	in	r0, 0x3e	; 62
     d70:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d72:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d76:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     d7a:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     d7e:	0d 90       	ld	r0, X+
     d80:	0d be       	out	0x3d, r0	; 61
     d82:	0d 90       	ld	r0, X+
     d84:	0e be       	out	0x3e, r0	; 62
     d86:	ef 91       	pop	r30
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	9f 90       	pop	r9
     db2:	8f 90       	pop	r8
     db4:	7f 90       	pop	r7
     db6:	6f 90       	pop	r6
     db8:	5f 90       	pop	r5
     dba:	4f 90       	pop	r4
     dbc:	3f 90       	pop	r3
     dbe:	2f 90       	pop	r2
     dc0:	1f 90       	pop	r1
     dc2:	0f 90       	pop	r0
     dc4:	ff 91       	pop	r31
     dc6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     dca:	ff 91       	pop	r31
     dcc:	ff bf       	out	0x3f, r31	; 63
     dce:	ff 91       	pop	r31
	asm volatile ( "ret" );
     dd0:	08 95       	ret

00000dd2 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     dd2:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     dd4:	90 91 de 2c 	lds	r25, 0x2CDE	; 0x802cde <intTaskSwitchPending>
     dd8:	89 2b       	or	r24, r25
     dda:	80 93 de 2c 	sts	0x2CDE, r24	; 0x802cde <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     dde:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     de2:	91 30       	cpi	r25, 0x01	; 1
     de4:	41 f0       	breq	.+16     	; 0xdf6 <portTaskSwitchContext+0x24>
     de6:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     dea:	92 30       	cpi	r25, 0x02	; 2
     dec:	21 f0       	breq	.+8      	; 0xdf6 <portTaskSwitchContext+0x24>
     dee:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	59 f4       	brne	.+22     	; 0xe0c <portTaskSwitchContext+0x3a>
     df6:	88 23       	and	r24, r24
     df8:	49 f0       	breq	.+18     	; 0xe0c <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     dfa:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
     dfe:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     e00:	10 92 de 2c 	sts	0x2CDE, r1	; 0x802cde <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     e04:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     e08:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		}                                          					
	}
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     e10:	ff 93       	push	r31
     e12:	ff b7       	in	r31, 0x3f	; 63
     e14:	ff 93       	push	r31
     e16:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e1a:	ff 93       	push	r31
     e1c:	f8 7f       	andi	r31, 0xF8	; 248
     e1e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e22:	0f 92       	push	r0
     e24:	1f 92       	push	r1
     e26:	11 24       	eor	r1, r1
     e28:	2f 92       	push	r2
     e2a:	3f 92       	push	r3
     e2c:	4f 92       	push	r4
     e2e:	5f 92       	push	r5
     e30:	6f 92       	push	r6
     e32:	7f 92       	push	r7
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	ef 93       	push	r30
     e62:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     e66:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     e6a:	0d b6       	in	r0, 0x3d	; 61
     e6c:	0d 92       	st	X+, r0
     e6e:	0e b6       	in	r0, 0x3e	; 62
     e70:	0d 92       	st	X+, r0
	//
	static void portTaskIncrementTick( void )
	{
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
     e72:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
     e76:	c8 2f       	mov	r28, r24
		xTaskIncrementTick();
     e78:	0e 94 8f 0c 	call	0x191e	; 0x191e <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
     e7c:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
		portTaskIncrementTick();
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <portTaskSwitchContext>
     e86:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
     e8a:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
     e8e:	0d 90       	ld	r0, X+
     e90:	0d be       	out	0x3d, r0	; 61
     e92:	0d 90       	ld	r0, X+
     e94:	0e be       	out	0x3e, r0	; 62
     e96:	ef 91       	pop	r30
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	8f 90       	pop	r8
     ec4:	7f 90       	pop	r7
     ec6:	6f 90       	pop	r6
     ec8:	5f 90       	pop	r5
     eca:	4f 90       	pop	r4
     ecc:	3f 90       	pop	r3
     ece:	2f 90       	pop	r2
     ed0:	1f 90       	pop	r1
     ed2:	0f 90       	pop	r0
     ed4:	ff 91       	pop	r31
     ed6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eda:	ff 91       	pop	r31
     edc:	ff bf       	out	0x3f, r31	; 63
     ede:	ff 91       	pop	r31
     ee0:	18 95       	reti

00000ee2 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     ee2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ee6:	ff 93       	push	r31
     ee8:	f8 7f       	andi	r31, 0xF8	; 248
     eea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eee:	fc 01       	movw	r30, r24
     ef0:	96 8d       	ldd	r25, Z+30	; 0x1e
     ef2:	ff 91       	pop	r31
     ef4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	91 11       	cpse	r25, r1
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 95       	ret

00000f00 <prvIsQueueFull>:
     f00:	dc 01       	movw	r26, r24
     f02:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f06:	ff 93       	push	r31
     f08:	f8 7f       	andi	r31, 0xF8	; 248
     f0a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f0e:	5e 96       	adiw	r26, 0x1e	; 30
     f10:	9c 91       	ld	r25, X
     f12:	5e 97       	sbiw	r26, 0x1e	; 30
     f14:	ff 91       	pop	r31
     f16:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	5f 96       	adiw	r26, 0x1f	; 31
     f1e:	2c 91       	ld	r18, X
     f20:	29 13       	cpse	r18, r25
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret

00000f26 <prvCopyDataToQueue>:
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	ec 01       	movw	r28, r24
     f30:	04 2f       	mov	r16, r20
     f32:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f34:	48 a1       	ldd	r20, Y+32	; 0x20
     f36:	44 23       	and	r20, r20
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <prvCopyDataToQueue+0x82>
     f3a:	01 11       	cpse	r16, r1
     f3c:	16 c0       	rjmp	.+44     	; 0xf6a <prvCopyDataToQueue+0x44>
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	0e 94 81 25 	call	0x4b02	; 0x4b02 <memcpy>
     f48:	28 a1       	ldd	r18, Y+32	; 0x20
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	82 0f       	add	r24, r18
     f50:	91 1d       	adc	r25, r1
     f52:	8c 83       	std	Y+4, r24	; 0x04
     f54:	9d 83       	std	Y+5, r25	; 0x05
     f56:	2a 81       	ldd	r18, Y+2	; 0x02
     f58:	3b 81       	ldd	r19, Y+3	; 0x03
     f5a:	82 17       	cp	r24, r18
     f5c:	93 07       	cpc	r25, r19
     f5e:	20 f1       	brcs	.+72     	; 0xfa8 <prvCopyDataToQueue+0x82>
     f60:	88 81       	ld	r24, Y
     f62:	99 81       	ldd	r25, Y+1	; 0x01
     f64:	8c 83       	std	Y+4, r24	; 0x04
     f66:	9d 83       	std	Y+5, r25	; 0x05
     f68:	1f c0       	rjmp	.+62     	; 0xfa8 <prvCopyDataToQueue+0x82>
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	8e 81       	ldd	r24, Y+6	; 0x06
     f6e:	9f 81       	ldd	r25, Y+7	; 0x07
     f70:	0e 94 81 25 	call	0x4b02	; 0x4b02 <memcpy>
     f74:	88 a1       	ldd	r24, Y+32	; 0x20
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	91 95       	neg	r25
     f7a:	81 95       	neg	r24
     f7c:	91 09       	sbc	r25, r1
     f7e:	2e 81       	ldd	r18, Y+6	; 0x06
     f80:	3f 81       	ldd	r19, Y+7	; 0x07
     f82:	28 0f       	add	r18, r24
     f84:	39 1f       	adc	r19, r25
     f86:	2e 83       	std	Y+6, r18	; 0x06
     f88:	3f 83       	std	Y+7, r19	; 0x07
     f8a:	48 81       	ld	r20, Y
     f8c:	59 81       	ldd	r21, Y+1	; 0x01
     f8e:	24 17       	cp	r18, r20
     f90:	35 07       	cpc	r19, r21
     f92:	30 f4       	brcc	.+12     	; 0xfa0 <prvCopyDataToQueue+0x7a>
     f94:	2a 81       	ldd	r18, Y+2	; 0x02
     f96:	3b 81       	ldd	r19, Y+3	; 0x03
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	8e 83       	std	Y+6, r24	; 0x06
     f9e:	9f 83       	std	Y+7, r25	; 0x07
     fa0:	02 30       	cpi	r16, 0x02	; 2
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <prvCopyDataToQueue+0x82>
     fa4:	11 11       	cpse	r17, r1
     fa6:	11 50       	subi	r17, 0x01	; 1
     fa8:	1f 5f       	subi	r17, 0xFF	; 255
     faa:	1e 8f       	std	Y+30, r17	; 0x1e
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	08 95       	ret

00000fb8 <prvCopyDataFromQueue>:
     fb8:	fc 01       	movw	r30, r24
     fba:	40 a1       	ldd	r20, Z+32	; 0x20
     fbc:	44 23       	and	r20, r20
     fbe:	a9 f0       	breq	.+42     	; 0xfea <prvCopyDataFromQueue+0x32>
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	26 81       	ldd	r18, Z+6	; 0x06
     fc4:	37 81       	ldd	r19, Z+7	; 0x07
     fc6:	24 0f       	add	r18, r20
     fc8:	35 1f       	adc	r19, r21
     fca:	26 83       	std	Z+6, r18	; 0x06
     fcc:	37 83       	std	Z+7, r19	; 0x07
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	28 17       	cp	r18, r24
     fd4:	39 07       	cpc	r19, r25
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <prvCopyDataFromQueue+0x28>
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	86 83       	std	Z+6, r24	; 0x06
     fde:	97 83       	std	Z+7, r25	; 0x07
     fe0:	cb 01       	movw	r24, r22
     fe2:	66 81       	ldd	r22, Z+6	; 0x06
     fe4:	77 81       	ldd	r23, Z+7	; 0x07
     fe6:	0e 94 81 25 	call	0x4b02	; 0x4b02 <memcpy>
     fea:	08 95       	ret

00000fec <prvUnlockQueue>:
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	8c 01       	movw	r16, r24
     ff8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ffc:	ff 93       	push	r31
     ffe:	f8 7f       	andi	r31, 0xF8	; 248
    1000:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1004:	fc 01       	movw	r30, r24
    1006:	c2 a1       	ldd	r28, Z+34	; 0x22
    1008:	1c 16       	cp	r1, r28
    100a:	ac f4       	brge	.+42     	; 0x1036 <prvUnlockQueue+0x4a>
    100c:	83 89       	ldd	r24, Z+19	; 0x13
    100e:	81 11       	cpse	r24, r1
    1010:	06 c0       	rjmp	.+12     	; 0x101e <prvUnlockQueue+0x32>
    1012:	11 c0       	rjmp	.+34     	; 0x1036 <prvUnlockQueue+0x4a>
    1014:	f8 01       	movw	r30, r16
    1016:	83 89       	ldd	r24, Z+19	; 0x13
    1018:	81 11       	cpse	r24, r1
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <prvUnlockQueue+0x3a>
    101c:	0c c0       	rjmp	.+24     	; 0x1036 <prvUnlockQueue+0x4a>
    101e:	78 01       	movw	r14, r16
    1020:	f3 e1       	ldi	r31, 0x13	; 19
    1022:	ef 0e       	add	r14, r31
    1024:	f1 1c       	adc	r15, r1
    1026:	c7 01       	movw	r24, r14
    1028:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    102c:	81 11       	cpse	r24, r1
    102e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskMissedYield>
    1032:	c1 50       	subi	r28, 0x01	; 1
    1034:	79 f7       	brne	.-34     	; 0x1014 <prvUnlockQueue+0x28>
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	f8 01       	movw	r30, r16
    103a:	82 a3       	std	Z+34, r24	; 0x22
    103c:	ff 91       	pop	r31
    103e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1042:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1046:	ff 93       	push	r31
    1048:	f8 7f       	andi	r31, 0xF8	; 248
    104a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    104e:	f8 01       	movw	r30, r16
    1050:	c1 a1       	ldd	r28, Z+33	; 0x21
    1052:	1c 16       	cp	r1, r28
    1054:	ac f4       	brge	.+42     	; 0x1080 <prvUnlockQueue+0x94>
    1056:	80 85       	ldd	r24, Z+8	; 0x08
    1058:	81 11       	cpse	r24, r1
    105a:	06 c0       	rjmp	.+12     	; 0x1068 <prvUnlockQueue+0x7c>
    105c:	11 c0       	rjmp	.+34     	; 0x1080 <prvUnlockQueue+0x94>
    105e:	f8 01       	movw	r30, r16
    1060:	80 85       	ldd	r24, Z+8	; 0x08
    1062:	81 11       	cpse	r24, r1
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <prvUnlockQueue+0x84>
    1066:	0c c0       	rjmp	.+24     	; 0x1080 <prvUnlockQueue+0x94>
    1068:	78 01       	movw	r14, r16
    106a:	f8 e0       	ldi	r31, 0x08	; 8
    106c:	ef 0e       	add	r14, r31
    106e:	f1 1c       	adc	r15, r1
    1070:	c7 01       	movw	r24, r14
    1072:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    1076:	81 11       	cpse	r24, r1
    1078:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskMissedYield>
    107c:	c1 50       	subi	r28, 0x01	; 1
    107e:	79 f7       	brne	.-34     	; 0x105e <prvUnlockQueue+0x72>
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	f8 01       	movw	r30, r16
    1084:	81 a3       	std	Z+33, r24	; 0x21
    1086:	ff 91       	pop	r31
    1088:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	08 95       	ret

00001098 <xQueueGenericReset>:
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10a2:	ff 93       	push	r31
    10a4:	f8 7f       	andi	r31, 0xF8	; 248
    10a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10aa:	48 81       	ld	r20, Y
    10ac:	59 81       	ldd	r21, Y+1	; 0x01
    10ae:	28 a1       	ldd	r18, Y+32	; 0x20
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    10b4:	72 9f       	mul	r23, r18
    10b6:	c0 01       	movw	r24, r0
    10b8:	73 9f       	mul	r23, r19
    10ba:	90 0d       	add	r25, r0
    10bc:	11 24       	eor	r1, r1
    10be:	fa 01       	movw	r30, r20
    10c0:	e8 0f       	add	r30, r24
    10c2:	f9 1f       	adc	r31, r25
    10c4:	ea 83       	std	Y+2, r30	; 0x02
    10c6:	fb 83       	std	Y+3, r31	; 0x03
    10c8:	1e 8e       	std	Y+30, r1	; 0x1e
    10ca:	4c 83       	std	Y+4, r20	; 0x04
    10cc:	5d 83       	std	Y+5, r21	; 0x05
    10ce:	82 1b       	sub	r24, r18
    10d0:	93 0b       	sbc	r25, r19
    10d2:	84 0f       	add	r24, r20
    10d4:	95 1f       	adc	r25, r21
    10d6:	8e 83       	std	Y+6, r24	; 0x06
    10d8:	9f 83       	std	Y+7, r25	; 0x07
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	89 a3       	std	Y+33, r24	; 0x21
    10de:	8a a3       	std	Y+34, r24	; 0x22
    10e0:	61 11       	cpse	r22, r1
    10e2:	0c c0       	rjmp	.+24     	; 0x10fc <xQueueGenericReset+0x64>
    10e4:	88 85       	ldd	r24, Y+8	; 0x08
    10e6:	88 23       	and	r24, r24
    10e8:	89 f0       	breq	.+34     	; 0x110c <xQueueGenericReset+0x74>
    10ea:	ce 01       	movw	r24, r28
    10ec:	08 96       	adiw	r24, 0x08	; 8
    10ee:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    10f2:	88 23       	and	r24, r24
    10f4:	59 f0       	breq	.+22     	; 0x110c <xQueueGenericReset+0x74>
    10f6:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <xQueueGenericReset+0x74>
    10fc:	ce 01       	movw	r24, r28
    10fe:	08 96       	adiw	r24, 0x08	; 8
    1100:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    1104:	ce 01       	movw	r24, r28
    1106:	43 96       	adiw	r24, 0x13	; 19
    1108:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    110c:	ff 91       	pop	r31
    110e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <xQueueGenericCreate>:
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	08 2f       	mov	r16, r24
    1126:	16 2f       	mov	r17, r22
    1128:	f4 2e       	mov	r15, r20
    112a:	66 23       	and	r22, r22
    112c:	c9 f0       	breq	.+50     	; 0x1160 <xQueueGenericCreate+0x46>
    112e:	86 9f       	mul	r24, r22
    1130:	c0 01       	movw	r24, r0
    1132:	11 24       	eor	r1, r1
    1134:	85 96       	adiw	r24, 0x25	; 37
    1136:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    113a:	ec 01       	movw	r28, r24
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	49 f4       	brne	.+18     	; 0x1152 <xQueueGenericCreate+0x38>
    1140:	16 c0       	rjmp	.+44     	; 0x116e <xQueueGenericCreate+0x54>
    1142:	0f 8f       	std	Y+31, r16	; 0x1f
    1144:	18 a3       	std	Y+32, r17	; 0x20
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	ce 01       	movw	r24, r28
    114a:	0e 94 4c 08 	call	0x1098	; 0x1098 <xQueueGenericReset>
    114e:	fc a2       	std	Y+36, r15	; 0x24
    1150:	0e c0       	rjmp	.+28     	; 0x116e <xQueueGenericCreate+0x54>
    1152:	85 96       	adiw	r24, 0x25	; 37
    1154:	88 83       	st	Y, r24
    1156:	99 83       	std	Y+1, r25	; 0x01
    1158:	f4 cf       	rjmp	.-24     	; 0x1142 <xQueueGenericCreate+0x28>
    115a:	c8 83       	st	Y, r28
    115c:	d9 83       	std	Y+1, r29	; 0x01
    115e:	f1 cf       	rjmp	.-30     	; 0x1142 <xQueueGenericCreate+0x28>
    1160:	85 e2       	ldi	r24, 0x25	; 37
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    1168:	ec 01       	movw	r28, r24
    116a:	89 2b       	or	r24, r25
    116c:	b1 f7       	brne	.-20     	; 0x115a <xQueueGenericCreate+0x40>
    116e:	ce 01       	movw	r24, r28
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	08 95       	ret

0000117c <xQueueGenericSend>:
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	29 97       	sbiw	r28, 0x09	; 9
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	7c 01       	movw	r14, r24
    119c:	5b 01       	movw	r10, r22
    119e:	2e 83       	std	Y+6, r18	; 0x06
    11a0:	3f 83       	std	Y+7, r19	; 0x07
    11a2:	48 87       	std	Y+8, r20	; 0x08
    11a4:	59 87       	std	Y+9, r21	; 0x09
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	6c 01       	movw	r12, r24
    11aa:	88 e0       	ldi	r24, 0x08	; 8
    11ac:	c8 0e       	add	r12, r24
    11ae:	d1 1c       	adc	r13, r1
    11b0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11b4:	ff 93       	push	r31
    11b6:	f8 7f       	andi	r31, 0xF8	; 248
    11b8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11bc:	f7 01       	movw	r30, r14
    11be:	96 8d       	ldd	r25, Z+30	; 0x1e
    11c0:	87 8d       	ldd	r24, Z+31	; 0x1f
    11c2:	98 17       	cp	r25, r24
    11c4:	10 f0       	brcs	.+4      	; 0x11ca <xQueueGenericSend+0x4e>
    11c6:	02 30       	cpi	r16, 0x02	; 2
    11c8:	d1 f4       	brne	.+52     	; 0x11fe <xQueueGenericSend+0x82>
    11ca:	40 2f       	mov	r20, r16
    11cc:	b5 01       	movw	r22, r10
    11ce:	c7 01       	movw	r24, r14
    11d0:	0e 94 93 07 	call	0xf26	; 0xf26 <prvCopyDataToQueue>
    11d4:	f7 01       	movw	r30, r14
    11d6:	93 89       	ldd	r25, Z+19	; 0x13
    11d8:	99 23       	and	r25, r25
    11da:	49 f0       	breq	.+18     	; 0x11ee <xQueueGenericSend+0x72>
    11dc:	c7 01       	movw	r24, r14
    11de:	43 96       	adiw	r24, 0x13	; 19
    11e0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    11e4:	88 23       	and	r24, r24
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <xQueueGenericSend+0x78>
    11e8:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <xQueueGenericSend+0x78>
    11ee:	81 11       	cpse	r24, r1
    11f0:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    11f4:	ff 91       	pop	r31
    11f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	57 c0       	rjmp	.+174    	; 0x12ac <xQueueGenericSend+0x130>
    11fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1200:	9f 81       	ldd	r25, Y+7	; 0x07
    1202:	a8 85       	ldd	r26, Y+8	; 0x08
    1204:	b9 85       	ldd	r27, Y+9	; 0x09
    1206:	89 2b       	or	r24, r25
    1208:	8a 2b       	or	r24, r26
    120a:	8b 2b       	or	r24, r27
    120c:	29 f4       	brne	.+10     	; 0x1218 <xQueueGenericSend+0x9c>
    120e:	ff 91       	pop	r31
    1210:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	4a c0       	rjmp	.+148    	; 0x12ac <xQueueGenericSend+0x130>
    1218:	11 11       	cpse	r17, r1
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <xQueueGenericSend+0xaa>
    121c:	ce 01       	movw	r24, r28
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    1224:	11 e0       	ldi	r17, 0x01	; 1
    1226:	ff 91       	pop	r31
    1228:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    122c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    1230:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1234:	ff 93       	push	r31
    1236:	f8 7f       	andi	r31, 0xF8	; 248
    1238:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    123c:	f7 01       	movw	r30, r14
    123e:	81 a1       	ldd	r24, Z+33	; 0x21
    1240:	8f 3f       	cpi	r24, 0xFF	; 255
    1242:	09 f4       	brne	.+2      	; 0x1246 <xQueueGenericSend+0xca>
    1244:	11 a2       	std	Z+33, r1	; 0x21
    1246:	f7 01       	movw	r30, r14
    1248:	82 a1       	ldd	r24, Z+34	; 0x22
    124a:	8f 3f       	cpi	r24, 0xFF	; 255
    124c:	09 f4       	brne	.+2      	; 0x1250 <xQueueGenericSend+0xd4>
    124e:	12 a2       	std	Z+34, r1	; 0x22
    1250:	ff 91       	pop	r31
    1252:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1256:	be 01       	movw	r22, r28
    1258:	6a 5f       	subi	r22, 0xFA	; 250
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <xTaskCheckForTimeOut>
    1264:	81 11       	cpse	r24, r1
    1266:	1c c0       	rjmp	.+56     	; 0x12a0 <xQueueGenericSend+0x124>
    1268:	c7 01       	movw	r24, r14
    126a:	0e 94 80 07 	call	0xf00	; 0xf00 <prvIsQueueFull>
    126e:	88 23       	and	r24, r24
    1270:	89 f0       	breq	.+34     	; 0x1294 <xQueueGenericSend+0x118>
    1272:	4e 81       	ldd	r20, Y+6	; 0x06
    1274:	5f 81       	ldd	r21, Y+7	; 0x07
    1276:	68 85       	ldd	r22, Y+8	; 0x08
    1278:	79 85       	ldd	r23, Y+9	; 0x09
    127a:	c6 01       	movw	r24, r12
    127c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <vTaskPlaceOnEventList>
    1280:	c7 01       	movw	r24, r14
    1282:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1286:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    128a:	81 11       	cpse	r24, r1
    128c:	91 cf       	rjmp	.-222    	; 0x11b0 <xQueueGenericSend+0x34>
    128e:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1292:	8e cf       	rjmp	.-228    	; 0x11b0 <xQueueGenericSend+0x34>
    1294:	c7 01       	movw	r24, r14
    1296:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    129a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    129e:	88 cf       	rjmp	.-240    	; 0x11b0 <xQueueGenericSend+0x34>
    12a0:	c7 01       	movw	r24, r14
    12a2:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    12a6:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	29 96       	adiw	r28, 0x09	; 9
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	bf 90       	pop	r11
    12c4:	af 90       	pop	r10
    12c6:	08 95       	ret

000012c8 <xQueueGenericSendFromISR>:
    12c8:	af 92       	push	r10
    12ca:	bf 92       	push	r11
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ec 01       	movw	r28, r24
    12dc:	6b 01       	movw	r12, r22
    12de:	5a 01       	movw	r10, r20
    12e0:	02 2f       	mov	r16, r18
    12e2:	0e 94 c4 05 	call	0xb88	; 0xb88 <_portSetInterruptMaskFromIsr>
    12e6:	f8 2e       	mov	r15, r24
    12e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ec:	98 17       	cp	r25, r24
    12ee:	10 f0       	brcs	.+4      	; 0x12f4 <xQueueGenericSendFromISR+0x2c>
    12f0:	02 30       	cpi	r16, 0x02	; 2
    12f2:	e1 f4       	brne	.+56     	; 0x132c <xQueueGenericSendFromISR+0x64>
    12f4:	1a a1       	ldd	r17, Y+34	; 0x22
    12f6:	40 2f       	mov	r20, r16
    12f8:	b6 01       	movw	r22, r12
    12fa:	ce 01       	movw	r24, r28
    12fc:	0e 94 93 07 	call	0xf26	; 0xf26 <prvCopyDataToQueue>
    1300:	1f 3f       	cpi	r17, 0xFF	; 255
    1302:	81 f4       	brne	.+32     	; 0x1324 <xQueueGenericSendFromISR+0x5c>
    1304:	8b 89       	ldd	r24, Y+19	; 0x13
    1306:	88 23       	and	r24, r24
    1308:	99 f0       	breq	.+38     	; 0x1330 <xQueueGenericSendFromISR+0x68>
    130a:	ce 01       	movw	r24, r28
    130c:	43 96       	adiw	r24, 0x13	; 19
    130e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    1312:	88 23       	and	r24, r24
    1314:	79 f0       	breq	.+30     	; 0x1334 <xQueueGenericSendFromISR+0x6c>
    1316:	a1 14       	cp	r10, r1
    1318:	b1 04       	cpc	r11, r1
    131a:	71 f0       	breq	.+28     	; 0x1338 <xQueueGenericSendFromISR+0x70>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	f5 01       	movw	r30, r10
    1320:	80 83       	st	Z, r24
    1322:	0b c0       	rjmp	.+22     	; 0x133a <xQueueGenericSendFromISR+0x72>
    1324:	1f 5f       	subi	r17, 0xFF	; 255
    1326:	1a a3       	std	Y+34, r17	; 0x22
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	07 c0       	rjmp	.+14     	; 0x133a <xQueueGenericSendFromISR+0x72>
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	05 c0       	rjmp	.+10     	; 0x133a <xQueueGenericSendFromISR+0x72>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	03 c0       	rjmp	.+6      	; 0x133a <xQueueGenericSendFromISR+0x72>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	01 c0       	rjmp	.+2      	; 0x133a <xQueueGenericSendFromISR+0x72>
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	08 95       	ret

00001352 <xQueueReceive>:
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	29 97       	sbiw	r28, 0x09	; 9
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	8c 01       	movw	r16, r24
    1372:	5b 01       	movw	r10, r22
    1374:	2e 83       	std	Y+6, r18	; 0x06
    1376:	3f 83       	std	Y+7, r19	; 0x07
    1378:	48 87       	std	Y+8, r20	; 0x08
    137a:	59 87       	std	Y+9, r21	; 0x09
    137c:	e1 2c       	mov	r14, r1
    137e:	6c 01       	movw	r12, r24
    1380:	83 e1       	ldi	r24, 0x13	; 19
    1382:	c8 0e       	add	r12, r24
    1384:	d1 1c       	adc	r13, r1
    1386:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    138a:	ff 93       	push	r31
    138c:	f8 7f       	andi	r31, 0xF8	; 248
    138e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1392:	f8 01       	movw	r30, r16
    1394:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1396:	ff 20       	and	r15, r15
    1398:	b1 f0       	breq	.+44     	; 0x13c6 <xQueueReceive+0x74>
    139a:	b5 01       	movw	r22, r10
    139c:	c8 01       	movw	r24, r16
    139e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <prvCopyDataFromQueue>
    13a2:	fa 94       	dec	r15
    13a4:	f8 01       	movw	r30, r16
    13a6:	f6 8e       	std	Z+30, r15	; 0x1e
    13a8:	80 85       	ldd	r24, Z+8	; 0x08
    13aa:	88 23       	and	r24, r24
    13ac:	39 f0       	breq	.+14     	; 0x13bc <xQueueReceive+0x6a>
    13ae:	c8 01       	movw	r24, r16
    13b0:	08 96       	adiw	r24, 0x08	; 8
    13b2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xTaskRemoveFromEventList>
    13b6:	81 11       	cpse	r24, r1
    13b8:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    13bc:	ff 91       	pop	r31
    13be:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	5e c0       	rjmp	.+188    	; 0x1482 <xQueueReceive+0x130>
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	a8 85       	ldd	r26, Y+8	; 0x08
    13cc:	b9 85       	ldd	r27, Y+9	; 0x09
    13ce:	89 2b       	or	r24, r25
    13d0:	8a 2b       	or	r24, r26
    13d2:	8b 2b       	or	r24, r27
    13d4:	29 f4       	brne	.+10     	; 0x13e0 <xQueueReceive+0x8e>
    13d6:	ff 91       	pop	r31
    13d8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	51 c0       	rjmp	.+162    	; 0x1482 <xQueueReceive+0x130>
    13e0:	e1 10       	cpse	r14, r1
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <xQueueReceive+0x9e>
    13e4:	ce 01       	movw	r24, r28
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    13ec:	ee 24       	eor	r14, r14
    13ee:	e3 94       	inc	r14
    13f0:	ff 91       	pop	r31
    13f2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13f6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    13fa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13fe:	ff 93       	push	r31
    1400:	f8 7f       	andi	r31, 0xF8	; 248
    1402:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1406:	f8 01       	movw	r30, r16
    1408:	81 a1       	ldd	r24, Z+33	; 0x21
    140a:	8f 3f       	cpi	r24, 0xFF	; 255
    140c:	09 f4       	brne	.+2      	; 0x1410 <xQueueReceive+0xbe>
    140e:	11 a2       	std	Z+33, r1	; 0x21
    1410:	f8 01       	movw	r30, r16
    1412:	82 a1       	ldd	r24, Z+34	; 0x22
    1414:	8f 3f       	cpi	r24, 0xFF	; 255
    1416:	09 f4       	brne	.+2      	; 0x141a <xQueueReceive+0xc8>
    1418:	12 a2       	std	Z+34, r1	; 0x22
    141a:	ff 91       	pop	r31
    141c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1420:	be 01       	movw	r22, r28
    1422:	6a 5f       	subi	r22, 0xFA	; 250
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	ce 01       	movw	r24, r28
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <xTaskCheckForTimeOut>
    142e:	81 11       	cpse	r24, r1
    1430:	1c c0       	rjmp	.+56     	; 0x146a <xQueueReceive+0x118>
    1432:	c8 01       	movw	r24, r16
    1434:	0e 94 71 07 	call	0xee2	; 0xee2 <prvIsQueueEmpty>
    1438:	88 23       	and	r24, r24
    143a:	89 f0       	breq	.+34     	; 0x145e <xQueueReceive+0x10c>
    143c:	4e 81       	ldd	r20, Y+6	; 0x06
    143e:	5f 81       	ldd	r21, Y+7	; 0x07
    1440:	68 85       	ldd	r22, Y+8	; 0x08
    1442:	79 85       	ldd	r23, Y+9	; 0x09
    1444:	c6 01       	movw	r24, r12
    1446:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <vTaskPlaceOnEventList>
    144a:	c8 01       	movw	r24, r16
    144c:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1450:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1454:	81 11       	cpse	r24, r1
    1456:	97 cf       	rjmp	.-210    	; 0x1386 <xQueueReceive+0x34>
    1458:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    145c:	94 cf       	rjmp	.-216    	; 0x1386 <xQueueReceive+0x34>
    145e:	c8 01       	movw	r24, r16
    1460:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1464:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1468:	8e cf       	rjmp	.-228    	; 0x1386 <xQueueReceive+0x34>
    146a:	c8 01       	movw	r24, r16
    146c:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
    1470:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1474:	c8 01       	movw	r24, r16
    1476:	0e 94 71 07 	call	0xee2	; 0xee2 <prvIsQueueEmpty>
    147a:	88 23       	and	r24, r24
    147c:	09 f4       	brne	.+2      	; 0x1480 <xQueueReceive+0x12e>
    147e:	83 cf       	rjmp	.-250    	; 0x1386 <xQueueReceive+0x34>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	29 96       	adiw	r28, 0x09	; 9
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	08 95       	ret

0000149e <uxQueueMessagesWaiting>:
    149e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14a2:	ff 93       	push	r31
    14a4:	f8 7f       	andi	r31, 0xF8	; 248
    14a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14aa:	fc 01       	movw	r30, r24
    14ac:	86 8d       	ldd	r24, Z+30	; 0x1e
    14ae:	ff 91       	pop	r31
    14b0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14b4:	08 95       	ret

000014b6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    14bc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14c0:	ff 93       	push	r31
    14c2:	f8 7f       	andi	r31, 0xF8	; 248
    14c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14c8:	89 a1       	ldd	r24, Y+33	; 0x21
    14ca:	8f 3f       	cpi	r24, 0xFF	; 255
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <vQueueWaitForMessageRestricted+0x1a>
    14ce:	19 a2       	std	Y+33, r1	; 0x21
    14d0:	8a a1       	ldd	r24, Y+34	; 0x22
    14d2:	8f 3f       	cpi	r24, 0xFF	; 255
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <vQueueWaitForMessageRestricted+0x22>
    14d6:	1a a2       	std	Y+34, r1	; 0x22
    14d8:	ff 91       	pop	r31
    14da:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    14de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14e0:	81 11       	cpse	r24, r1
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    14e4:	ce 01       	movw	r24, r28
    14e6:	43 96       	adiw	r24, 0x13	; 19
    14e8:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    14ec:	ce 01       	movw	r24, r28
    14ee:	0e 94 f6 07 	call	0xfec	; 0xfec <prvUnlockQueue>
	}
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    14f8:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    14fc:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    1500:	80 81       	ld	r24, Z
    1502:	81 11       	cpse	r24, r1
    1504:	0c c0       	rjmp	.+24     	; 0x151e <prvResetNextTaskUnblockTime+0x26>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	dc 01       	movw	r26, r24
    150c:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    1510:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1514:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1518:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    151c:	08 95       	ret
    151e:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    1522:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    1526:	07 80       	ldd	r0, Z+7	; 0x07
    1528:	f0 85       	ldd	r31, Z+8	; 0x08
    152a:	e0 2d       	mov	r30, r0
    152c:	00 84       	ldd	r0, Z+8	; 0x08
    152e:	f1 85       	ldd	r31, Z+9	; 0x09
    1530:	e0 2d       	mov	r30, r0
    1532:	82 81       	ldd	r24, Z+2	; 0x02
    1534:	93 81       	ldd	r25, Z+3	; 0x03
    1536:	a4 81       	ldd	r26, Z+4	; 0x04
    1538:	b5 81       	ldd	r27, Z+5	; 0x05
    153a:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    153e:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1542:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1546:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    154a:	08 95       	ret

0000154c <prvAddCurrentTaskToDelayedList>:
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	cf 93       	push	r28
    155e:	6b 01       	movw	r12, r22
    1560:	7c 01       	movw	r14, r24
    1562:	c4 2f       	mov	r28, r20
    1564:	80 90 2d 2c 	lds	r8, 0x2C2D	; 0x802c2d <xTickCount>
    1568:	90 90 2e 2c 	lds	r9, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    156c:	a0 90 2f 2c 	lds	r10, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1570:	b0 90 30 2c 	lds	r11, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1574:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1578:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    157c:	02 96       	adiw	r24, 0x02	; 2
    157e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	c8 16       	cp	r12, r24
    1586:	d8 06       	cpc	r13, r24
    1588:	e8 06       	cpc	r14, r24
    158a:	f8 06       	cpc	r15, r24
    158c:	69 f4       	brne	.+26     	; 0x15a8 <prvAddCurrentTaskToDelayedList+0x5c>
    158e:	cc 23       	and	r28, r28
    1590:	59 f0       	breq	.+22     	; 0x15a8 <prvAddCurrentTaskToDelayedList+0x5c>
    1592:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1596:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    159a:	6e 5f       	subi	r22, 0xFE	; 254
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	82 e3       	ldi	r24, 0x32	; 50
    15a0:	9c e2       	ldi	r25, 0x2C	; 44
    15a2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    15a6:	3f c0       	rjmp	.+126    	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    15a8:	c8 0c       	add	r12, r8
    15aa:	d9 1c       	adc	r13, r9
    15ac:	ea 1c       	adc	r14, r10
    15ae:	fb 1c       	adc	r15, r11
    15b0:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    15b4:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    15b8:	c2 82       	std	Z+2, r12	; 0x02
    15ba:	d3 82       	std	Z+3, r13	; 0x03
    15bc:	e4 82       	std	Z+4, r14	; 0x04
    15be:	f5 82       	std	Z+5, r15	; 0x05
    15c0:	c8 14       	cp	r12, r8
    15c2:	d9 04       	cpc	r13, r9
    15c4:	ea 04       	cpc	r14, r10
    15c6:	fb 04       	cpc	r15, r11
    15c8:	68 f4       	brcc	.+26     	; 0x15e4 <prvAddCurrentTaskToDelayedList+0x98>
    15ca:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    15ce:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    15d2:	80 91 48 2c 	lds	r24, 0x2C48	; 0x802c48 <pxOverflowDelayedTaskList>
    15d6:	90 91 49 2c 	lds	r25, 0x2C49	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    15da:	6e 5f       	subi	r22, 0xFE	; 254
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    15e2:	21 c0       	rjmp	.+66     	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    15e4:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    15e8:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    15ec:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    15f0:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    15f4:	6e 5f       	subi	r22, 0xFE	; 254
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    15fc:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <xNextTaskUnblockTime>
    1600:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1604:	a0 91 25 2c 	lds	r26, 0x2C25	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1608:	b0 91 26 2c 	lds	r27, 0x2C26	; 0x802c26 <xNextTaskUnblockTime+0x3>
    160c:	c8 16       	cp	r12, r24
    160e:	d9 06       	cpc	r13, r25
    1610:	ea 06       	cpc	r14, r26
    1612:	fb 06       	cpc	r15, r27
    1614:	40 f4       	brcc	.+16     	; 0x1626 <prvAddCurrentTaskToDelayedList+0xda>
    1616:	c0 92 23 2c 	sts	0x2C23, r12	; 0x802c23 <xNextTaskUnblockTime>
    161a:	d0 92 24 2c 	sts	0x2C24, r13	; 0x802c24 <xNextTaskUnblockTime+0x1>
    161e:	e0 92 25 2c 	sts	0x2C25, r14	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1622:	f0 92 26 2c 	sts	0x2C26, r15	; 0x802c26 <xNextTaskUnblockTime+0x3>
    1626:	cf 91       	pop	r28
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	9f 90       	pop	r9
    1636:	8f 90       	pop	r8
    1638:	08 95       	ret

0000163a <prvIdleTask>:
    163a:	c2 e6       	ldi	r28, 0x62	; 98
    163c:	dc e2       	ldi	r29, 0x2C	; 44
    163e:	88 81       	ld	r24, Y
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	10 f0       	brcs	.+4      	; 0x1648 <prvIdleTask+0xe>
    1644:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1648:	0e 94 21 13 	call	0x2642	; 0x2642 <vApplicationIdleHook>
    164c:	f8 cf       	rjmp	.-16     	; 0x163e <prvIdleTask+0x4>

0000164e <xTaskCreate>:
    164e:	4f 92       	push	r4
    1650:	5f 92       	push	r5
    1652:	6f 92       	push	r6
    1654:	7f 92       	push	r7
    1656:	8f 92       	push	r8
    1658:	9f 92       	push	r9
    165a:	af 92       	push	r10
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	4c 01       	movw	r8, r24
    166e:	6b 01       	movw	r12, r22
    1670:	5a 01       	movw	r10, r20
    1672:	29 01       	movw	r4, r18
    1674:	ca 01       	movw	r24, r20
    1676:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    167a:	3c 01       	movw	r6, r24
    167c:	89 2b       	or	r24, r25
    167e:	09 f4       	brne	.+2      	; 0x1682 <xTaskCreate+0x34>
    1680:	ea c0       	rjmp	.+468    	; 0x1856 <xTaskCreate+0x208>
    1682:	8c e2       	ldi	r24, 0x2C	; 44
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 03 05 	call	0xa06	; 0xa06 <pvPortMalloc>
    168a:	ec 01       	movw	r28, r24
    168c:	89 2b       	or	r24, r25
    168e:	b1 f0       	breq	.+44     	; 0x16bc <xTaskCreate+0x6e>
    1690:	6b 8e       	std	Y+27, r6	; 0x1b
    1692:	7c 8e       	std	Y+28, r7	; 0x1c
    1694:	a5 01       	movw	r20, r10
    1696:	65 ea       	ldi	r22, 0xA5	; 165
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	c3 01       	movw	r24, r6
    169c:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <memset>
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	a2 1a       	sub	r10, r18
    16a4:	b1 08       	sbc	r11, r1
    16a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16aa:	a8 0e       	add	r10, r24
    16ac:	b9 1e       	adc	r11, r25
    16ae:	d6 01       	movw	r26, r12
    16b0:	8c 91       	ld	r24, X
    16b2:	8d 8f       	std	Y+29, r24	; 0x1d
    16b4:	8c 91       	ld	r24, X
    16b6:	81 11       	cpse	r24, r1
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <xTaskCreate+0x76>
    16ba:	18 c0       	rjmp	.+48     	; 0x16ec <xTaskCreate+0x9e>
    16bc:	c3 01       	movw	r24, r6
    16be:	0e 94 29 05 	call	0xa52	; 0xa52 <vPortFree>
    16c2:	c9 c0       	rjmp	.+402    	; 0x1856 <xTaskCreate+0x208>
    16c4:	ae 01       	movw	r20, r28
    16c6:	42 5e       	subi	r20, 0xE2	; 226
    16c8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ca:	f6 01       	movw	r30, r12
    16cc:	31 96       	adiw	r30, 0x01	; 1
    16ce:	b8 e0       	ldi	r27, 0x08	; 8
    16d0:	cb 0e       	add	r12, r27
    16d2:	d1 1c       	adc	r13, r1
    16d4:	cf 01       	movw	r24, r30
    16d6:	21 91       	ld	r18, Z+
    16d8:	da 01       	movw	r26, r20
    16da:	2d 93       	st	X+, r18
    16dc:	ad 01       	movw	r20, r26
    16de:	dc 01       	movw	r26, r24
    16e0:	8c 91       	ld	r24, X
    16e2:	88 23       	and	r24, r24
    16e4:	19 f0       	breq	.+6      	; 0x16ec <xTaskCreate+0x9e>
    16e6:	ec 15       	cp	r30, r12
    16e8:	fd 05       	cpc	r31, r13
    16ea:	a1 f7       	brne	.-24     	; 0x16d4 <xTaskCreate+0x86>
    16ec:	1c a2       	std	Y+36, r1	; 0x24
    16ee:	04 30       	cpi	r16, 0x04	; 4
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <xTaskCreate+0xa6>
    16f2:	03 e0       	ldi	r16, 0x03	; 3
    16f4:	0a 8f       	std	Y+26, r16	; 0x1a
    16f6:	6e 01       	movw	r12, r28
    16f8:	b2 e0       	ldi	r27, 0x02	; 2
    16fa:	cb 0e       	add	r12, r27
    16fc:	d1 1c       	adc	r13, r1
    16fe:	c6 01       	movw	r24, r12
    1700:	0e 94 3b 05 	call	0xa76	; 0xa76 <vListInitialiseItem>
    1704:	ce 01       	movw	r24, r28
    1706:	0e 96       	adiw	r24, 0x0e	; 14
    1708:	0e 94 3b 05 	call	0xa76	; 0xa76 <vListInitialiseItem>
    170c:	ca 87       	std	Y+10, r28	; 0x0a
    170e:	db 87       	std	Y+11, r29	; 0x0b
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a0 e0       	ldi	r26, 0x00	; 0
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	80 1b       	sub	r24, r16
    171a:	91 09       	sbc	r25, r1
    171c:	a1 09       	sbc	r26, r1
    171e:	b1 09       	sbc	r27, r1
    1720:	8e 87       	std	Y+14, r24	; 0x0e
    1722:	9f 87       	std	Y+15, r25	; 0x0f
    1724:	a8 8b       	std	Y+16, r26	; 0x10
    1726:	b9 8b       	std	Y+17, r27	; 0x11
    1728:	ce 8b       	std	Y+22, r28	; 0x16
    172a:	df 8b       	std	Y+23, r29	; 0x17
    172c:	1f a2       	std	Y+39, r1	; 0x27
    172e:	18 a6       	std	Y+40, r1	; 0x28
    1730:	19 a6       	std	Y+41, r1	; 0x29
    1732:	1a a6       	std	Y+42, r1	; 0x2a
    1734:	1b a6       	std	Y+43, r1	; 0x2b
    1736:	a2 01       	movw	r20, r4
    1738:	b4 01       	movw	r22, r8
    173a:	c5 01       	movw	r24, r10
    173c:	0e 94 cb 05 	call	0xb96	; 0xb96 <pxPortInitialiseStack>
    1740:	88 83       	st	Y, r24
    1742:	99 83       	std	Y+1, r25	; 0x01
    1744:	e1 14       	cp	r14, r1
    1746:	f1 04       	cpc	r15, r1
    1748:	19 f0       	breq	.+6      	; 0x1750 <xTaskCreate+0x102>
    174a:	f7 01       	movw	r30, r14
    174c:	c0 83       	st	Z, r28
    174e:	d1 83       	std	Z+1, r29	; 0x01
    1750:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1754:	ff 93       	push	r31
    1756:	f8 7f       	andi	r31, 0xF8	; 248
    1758:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    175c:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <uxCurrentNumberOfTasks>
    1760:	8f 5f       	subi	r24, 0xFF	; 255
    1762:	80 93 31 2c 	sts	0x2C31, r24	; 0x802c31 <uxCurrentNumberOfTasks>
    1766:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    176a:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    176e:	89 2b       	or	r24, r25
    1770:	a9 f5       	brne	.+106    	; 0x17dc <xTaskCreate+0x18e>
    1772:	c0 93 8e 2c 	sts	0x2C8E, r28	; 0x802c8e <pxCurrentTCB>
    1776:	d0 93 8f 2c 	sts	0x2C8F, r29	; 0x802c8f <pxCurrentTCB+0x1>
    177a:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <uxCurrentNumberOfTasks>
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	e9 f5       	brne	.+122    	; 0x17fc <xTaskCreate+0x1ae>
    1782:	82 e6       	ldi	r24, 0x62	; 98
    1784:	9c e2       	ldi	r25, 0x2C	; 44
    1786:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    178a:	8d e6       	ldi	r24, 0x6D	; 109
    178c:	9c e2       	ldi	r25, 0x2C	; 44
    178e:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    1792:	88 e7       	ldi	r24, 0x78	; 120
    1794:	9c e2       	ldi	r25, 0x2C	; 44
    1796:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    179a:	83 e8       	ldi	r24, 0x83	; 131
    179c:	9c e2       	ldi	r25, 0x2C	; 44
    179e:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17a2:	87 e5       	ldi	r24, 0x57	; 87
    17a4:	9c e2       	ldi	r25, 0x2C	; 44
    17a6:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17aa:	8c e4       	ldi	r24, 0x4C	; 76
    17ac:	9c e2       	ldi	r25, 0x2C	; 44
    17ae:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17b2:	8d e3       	ldi	r24, 0x3D	; 61
    17b4:	9c e2       	ldi	r25, 0x2C	; 44
    17b6:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17ba:	82 e3       	ldi	r24, 0x32	; 50
    17bc:	9c e2       	ldi	r25, 0x2C	; 44
    17be:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    17c2:	87 e5       	ldi	r24, 0x57	; 87
    17c4:	9c e2       	ldi	r25, 0x2C	; 44
    17c6:	80 93 4a 2c 	sts	0x2C4A, r24	; 0x802c4a <pxDelayedTaskList>
    17ca:	90 93 4b 2c 	sts	0x2C4B, r25	; 0x802c4b <pxDelayedTaskList+0x1>
    17ce:	8c e4       	ldi	r24, 0x4C	; 76
    17d0:	9c e2       	ldi	r25, 0x2C	; 44
    17d2:	80 93 48 2c 	sts	0x2C48, r24	; 0x802c48 <pxOverflowDelayedTaskList>
    17d6:	90 93 49 2c 	sts	0x2C49, r25	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    17da:	10 c0       	rjmp	.+32     	; 0x17fc <xTaskCreate+0x1ae>
    17dc:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xSchedulerRunning>
    17e0:	81 11       	cpse	r24, r1
    17e2:	0c c0       	rjmp	.+24     	; 0x17fc <xTaskCreate+0x1ae>
    17e4:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    17e8:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    17ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    17ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17f0:	89 17       	cp	r24, r25
    17f2:	20 f0       	brcs	.+8      	; 0x17fc <xTaskCreate+0x1ae>
    17f4:	c0 93 8e 2c 	sts	0x2C8E, r28	; 0x802c8e <pxCurrentTCB>
    17f8:	d0 93 8f 2c 	sts	0x2C8F, r29	; 0x802c8f <pxCurrentTCB+0x1>
    17fc:	80 91 27 2c 	lds	r24, 0x2C27	; 0x802c27 <uxTaskNumber>
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	80 93 27 2c 	sts	0x2C27, r24	; 0x802c27 <uxTaskNumber>
    1806:	8d a3       	std	Y+37, r24	; 0x25
    1808:	8a 8d       	ldd	r24, Y+26	; 0x1a
    180a:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    180e:	98 17       	cp	r25, r24
    1810:	10 f4       	brcc	.+4      	; 0x1816 <xTaskCreate+0x1c8>
    1812:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1816:	fb e0       	ldi	r31, 0x0B	; 11
    1818:	8f 9f       	mul	r24, r31
    181a:	c0 01       	movw	r24, r0
    181c:	11 24       	eor	r1, r1
    181e:	b6 01       	movw	r22, r12
    1820:	8e 59       	subi	r24, 0x9E	; 158
    1822:	93 4d       	sbci	r25, 0xD3	; 211
    1824:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1828:	ff 91       	pop	r31
    182a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    182e:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xSchedulerRunning>
    1832:	88 23       	and	r24, r24
    1834:	61 f0       	breq	.+24     	; 0x184e <xTaskCreate+0x200>
    1836:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    183a:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    183e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1840:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1842:	98 17       	cp	r25, r24
    1844:	30 f4       	brcc	.+12     	; 0x1852 <xTaskCreate+0x204>
    1846:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <xTaskCreate+0x20a>
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <xTaskCreate+0x20a>
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <xTaskCreate+0x20a>
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	df 90       	pop	r13
    1864:	cf 90       	pop	r12
    1866:	bf 90       	pop	r11
    1868:	af 90       	pop	r10
    186a:	9f 90       	pop	r9
    186c:	8f 90       	pop	r8
    186e:	7f 90       	pop	r7
    1870:	6f 90       	pop	r6
    1872:	5f 90       	pop	r5
    1874:	4f 90       	pop	r4
    1876:	08 95       	ret

00001878 <vTaskStartScheduler>:
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	0f 2e       	mov	r0, r31
    1880:	f1 e2       	ldi	r31, 0x21	; 33
    1882:	ef 2e       	mov	r14, r31
    1884:	fc e2       	ldi	r31, 0x2C	; 44
    1886:	ff 2e       	mov	r15, r31
    1888:	f0 2d       	mov	r31, r0
    188a:	00 e0       	ldi	r16, 0x00	; 0
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	48 ec       	ldi	r20, 0xC8	; 200
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	6d e4       	ldi	r22, 0x4D	; 77
    1896:	70 e2       	ldi	r23, 0x20	; 32
    1898:	8d e1       	ldi	r24, 0x1D	; 29
    189a:	9b e0       	ldi	r25, 0x0B	; 11
    189c:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	09 f5       	brne	.+66     	; 0x18e6 <vTaskStartScheduler+0x6e>
    18a4:	0e 94 81 10 	call	0x2102	; 0x2102 <xTimerCreateTimerTask>
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	e9 f4       	brne	.+58     	; 0x18e6 <vTaskStartScheduler+0x6e>
    18ac:	e0 ea       	ldi	r30, 0xA0	; 160
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	88 7f       	andi	r24, 0xF8	; 248
    18b4:	82 83       	std	Z+2, r24	; 0x02
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	9f ef       	ldi	r25, 0xFF	; 255
    18ba:	dc 01       	movw	r26, r24
    18bc:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    18c0:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    18c4:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    18c8:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 93 2b 2c 	sts	0x2C2B, r24	; 0x802c2b <xSchedulerRunning>
    18d2:	10 92 2d 2c 	sts	0x2C2D, r1	; 0x802c2d <xTickCount>
    18d6:	10 92 2e 2c 	sts	0x2C2E, r1	; 0x802c2e <xTickCount+0x1>
    18da:	10 92 2f 2c 	sts	0x2C2F, r1	; 0x802c2f <xTickCount+0x2>
    18de:	10 92 30 2c 	sts	0x2C30, r1	; 0x802c30 <xTickCount+0x3>
    18e2:	0e 94 48 06 	call	0xc90	; 0xc90 <xPortStartScheduler>
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	08 95       	ret

000018ee <vTaskSuspendAll>:
    18ee:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxSchedulerSuspended>
    18f8:	08 95       	ret

000018fa <xTaskGetTickCount>:
    18fa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18fe:	ff 93       	push	r31
    1900:	f8 7f       	andi	r31, 0xF8	; 248
    1902:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1906:	60 91 2d 2c 	lds	r22, 0x2C2D	; 0x802c2d <xTickCount>
    190a:	70 91 2e 2c 	lds	r23, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    190e:	80 91 2f 2c 	lds	r24, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1912:	90 91 30 2c 	lds	r25, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1916:	ff 91       	pop	r31
    1918:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    191c:	08 95       	ret

0000191e <xTaskIncrementTick>:
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1936:	81 11       	cpse	r24, r1
    1938:	ad c0       	rjmp	.+346    	; 0x1a94 <xTaskIncrementTick+0x176>
    193a:	c0 90 2d 2c 	lds	r12, 0x2C2D	; 0x802c2d <xTickCount>
    193e:	d0 90 2e 2c 	lds	r13, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    1942:	e0 90 2f 2c 	lds	r14, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1946:	f0 90 30 2c 	lds	r15, 0x2C30	; 0x802c30 <xTickCount+0x3>
    194a:	8f ef       	ldi	r24, 0xFF	; 255
    194c:	c8 1a       	sub	r12, r24
    194e:	d8 0a       	sbc	r13, r24
    1950:	e8 0a       	sbc	r14, r24
    1952:	f8 0a       	sbc	r15, r24
    1954:	c0 92 2d 2c 	sts	0x2C2D, r12	; 0x802c2d <xTickCount>
    1958:	d0 92 2e 2c 	sts	0x2C2E, r13	; 0x802c2e <xTickCount+0x1>
    195c:	e0 92 2f 2c 	sts	0x2C2F, r14	; 0x802c2f <xTickCount+0x2>
    1960:	f0 92 30 2c 	sts	0x2C30, r15	; 0x802c30 <xTickCount+0x3>
    1964:	c1 14       	cp	r12, r1
    1966:	d1 04       	cpc	r13, r1
    1968:	e1 04       	cpc	r14, r1
    196a:	f1 04       	cpc	r15, r1
    196c:	b9 f4       	brne	.+46     	; 0x199c <xTaskIncrementTick+0x7e>
    196e:	80 91 4a 2c 	lds	r24, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    1972:	90 91 4b 2c 	lds	r25, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    1976:	20 91 48 2c 	lds	r18, 0x2C48	; 0x802c48 <pxOverflowDelayedTaskList>
    197a:	30 91 49 2c 	lds	r19, 0x2C49	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    197e:	20 93 4a 2c 	sts	0x2C4A, r18	; 0x802c4a <pxDelayedTaskList>
    1982:	30 93 4b 2c 	sts	0x2C4B, r19	; 0x802c4b <pxDelayedTaskList+0x1>
    1986:	80 93 48 2c 	sts	0x2C48, r24	; 0x802c48 <pxOverflowDelayedTaskList>
    198a:	90 93 49 2c 	sts	0x2C49, r25	; 0x802c49 <pxOverflowDelayedTaskList+0x1>
    198e:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <xNumOfOverflows>
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	80 93 28 2c 	sts	0x2C28, r24	; 0x802c28 <xNumOfOverflows>
    1998:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <prvResetNextTaskUnblockTime>
    199c:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <xNextTaskUnblockTime>
    19a0:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <xNextTaskUnblockTime+0x1>
    19a4:	a0 91 25 2c 	lds	r26, 0x2C25	; 0x802c25 <xNextTaskUnblockTime+0x2>
    19a8:	b0 91 26 2c 	lds	r27, 0x2C26	; 0x802c26 <xNextTaskUnblockTime+0x3>
    19ac:	c8 16       	cp	r12, r24
    19ae:	d9 06       	cpc	r13, r25
    19b0:	ea 06       	cpc	r14, r26
    19b2:	fb 06       	cpc	r15, r27
    19b4:	10 f4       	brcc	.+4      	; 0x19ba <xTaskIncrementTick+0x9c>
    19b6:	b1 2c       	mov	r11, r1
    19b8:	5c c0       	rjmp	.+184    	; 0x1a72 <xTaskIncrementTick+0x154>
    19ba:	b1 2c       	mov	r11, r1
    19bc:	0f 2e       	mov	r0, r31
    19be:	fb e0       	ldi	r31, 0x0B	; 11
    19c0:	af 2e       	mov	r10, r31
    19c2:	f0 2d       	mov	r31, r0
    19c4:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    19c8:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    19cc:	80 81       	ld	r24, Z
    19ce:	81 11       	cpse	r24, r1
    19d0:	0c c0       	rjmp	.+24     	; 0x19ea <xTaskIncrementTick+0xcc>
    19d2:	8f ef       	ldi	r24, 0xFF	; 255
    19d4:	9f ef       	ldi	r25, 0xFF	; 255
    19d6:	dc 01       	movw	r26, r24
    19d8:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    19dc:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    19e0:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    19e4:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    19e8:	44 c0       	rjmp	.+136    	; 0x1a72 <xTaskIncrementTick+0x154>
    19ea:	e0 91 4a 2c 	lds	r30, 0x2C4A	; 0x802c4a <pxDelayedTaskList>
    19ee:	f0 91 4b 2c 	lds	r31, 0x2C4B	; 0x802c4b <pxDelayedTaskList+0x1>
    19f2:	07 80       	ldd	r0, Z+7	; 0x07
    19f4:	f0 85       	ldd	r31, Z+8	; 0x08
    19f6:	e0 2d       	mov	r30, r0
    19f8:	c0 85       	ldd	r28, Z+8	; 0x08
    19fa:	d1 85       	ldd	r29, Z+9	; 0x09
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	ac 81       	ldd	r26, Y+4	; 0x04
    1a02:	bd 81       	ldd	r27, Y+5	; 0x05
    1a04:	c8 16       	cp	r12, r24
    1a06:	d9 06       	cpc	r13, r25
    1a08:	ea 06       	cpc	r14, r26
    1a0a:	fb 06       	cpc	r15, r27
    1a0c:	48 f4       	brcc	.+18     	; 0x1a20 <xTaskIncrementTick+0x102>
    1a0e:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xNextTaskUnblockTime>
    1a12:	90 93 24 2c 	sts	0x2C24, r25	; 0x802c24 <xNextTaskUnblockTime+0x1>
    1a16:	a0 93 25 2c 	sts	0x2C25, r26	; 0x802c25 <xNextTaskUnblockTime+0x2>
    1a1a:	b0 93 26 2c 	sts	0x2C26, r27	; 0x802c26 <xNextTaskUnblockTime+0x3>
    1a1e:	29 c0       	rjmp	.+82     	; 0x1a72 <xTaskIncrementTick+0x154>
    1a20:	8e 01       	movw	r16, r28
    1a22:	0e 5f       	subi	r16, 0xFE	; 254
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	c8 01       	movw	r24, r16
    1a28:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1a2c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a2e:	99 8d       	ldd	r25, Y+25	; 0x19
    1a30:	89 2b       	or	r24, r25
    1a32:	21 f0       	breq	.+8      	; 0x1a3c <xTaskIncrementTick+0x11e>
    1a34:	ce 01       	movw	r24, r28
    1a36:	0e 96       	adiw	r24, 0x0e	; 14
    1a38:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1a3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a3e:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1a42:	98 17       	cp	r25, r24
    1a44:	10 f4       	brcc	.+4      	; 0x1a4a <xTaskIncrementTick+0x12c>
    1a46:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1a4a:	a8 9e       	mul	r10, r24
    1a4c:	c0 01       	movw	r24, r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	b8 01       	movw	r22, r16
    1a52:	8e 59       	subi	r24, 0x9E	; 158
    1a54:	93 4d       	sbci	r25, 0xD3	; 211
    1a56:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1a5a:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1a5e:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1a62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a64:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a66:	98 17       	cp	r25, r24
    1a68:	08 f4       	brcc	.+2      	; 0x1a6c <xTaskIncrementTick+0x14e>
    1a6a:	ac cf       	rjmp	.-168    	; 0x19c4 <xTaskIncrementTick+0xa6>
    1a6c:	bb 24       	eor	r11, r11
    1a6e:	b3 94       	inc	r11
    1a70:	a9 cf       	rjmp	.-174    	; 0x19c4 <xTaskIncrementTick+0xa6>
    1a72:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1a76:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1a7a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1a7c:	8b e0       	ldi	r24, 0x0B	; 11
    1a7e:	e8 9f       	mul	r30, r24
    1a80:	f0 01       	movw	r30, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	ee 59       	subi	r30, 0x9E	; 158
    1a86:	f3 4d       	sbci	r31, 0xD3	; 211
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	48 f0       	brcs	.+18     	; 0x1aa0 <xTaskIncrementTick+0x182>
    1a8e:	bb 24       	eor	r11, r11
    1a90:	b3 94       	inc	r11
    1a92:	06 c0       	rjmp	.+12     	; 0x1aa0 <xTaskIncrementTick+0x182>
    1a94:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <uxPendedTicks>
    1a98:	8f 5f       	subi	r24, 0xFF	; 255
    1a9a:	80 93 2a 2c 	sts	0x2C2A, r24	; 0x802c2a <uxPendedTicks>
    1a9e:	b1 2c       	mov	r11, r1
    1aa0:	80 91 29 2c 	lds	r24, 0x2C29	; 0x802c29 <xYieldPending>
    1aa4:	88 23       	and	r24, r24
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <xTaskIncrementTick+0x18e>
    1aa8:	bb 24       	eor	r11, r11
    1aaa:	b3 94       	inc	r11
    1aac:	8b 2d       	mov	r24, r11
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	af 90       	pop	r10
    1ac2:	08 95       	ret

00001ac4 <xTaskResumeAll>:
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ad8:	ff 93       	push	r31
    1ada:	f8 7f       	andi	r31, 0xF8	; 248
    1adc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ae0:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1ae4:	81 50       	subi	r24, 0x01	; 1
    1ae6:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <uxSchedulerSuspended>
    1aea:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1aee:	81 11       	cpse	r24, r1
    1af0:	5c c0       	rjmp	.+184    	; 0x1baa <xTaskResumeAll+0xe6>
    1af2:	80 91 31 2c 	lds	r24, 0x2C31	; 0x802c31 <uxCurrentNumberOfTasks>
    1af6:	81 11       	cpse	r24, r1
    1af8:	2c c0       	rjmp	.+88     	; 0x1b52 <xTaskResumeAll+0x8e>
    1afa:	5a c0       	rjmp	.+180    	; 0x1bb0 <xTaskResumeAll+0xec>
    1afc:	d7 01       	movw	r26, r14
    1afe:	17 96       	adiw	r26, 0x07	; 7
    1b00:	ed 91       	ld	r30, X+
    1b02:	fc 91       	ld	r31, X
    1b04:	18 97       	sbiw	r26, 0x08	; 8
    1b06:	c0 85       	ldd	r28, Z+8	; 0x08
    1b08:	d1 85       	ldd	r29, Z+9	; 0x09
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	0e 96       	adiw	r24, 0x0e	; 14
    1b0e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1b12:	8e 01       	movw	r16, r28
    1b14:	0e 5f       	subi	r16, 0xFE	; 254
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	c8 01       	movw	r24, r16
    1b1a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1b1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b20:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1b24:	98 17       	cp	r25, r24
    1b26:	10 f4       	brcc	.+4      	; 0x1b2c <xTaskResumeAll+0x68>
    1b28:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1b2c:	d8 9e       	mul	r13, r24
    1b2e:	c0 01       	movw	r24, r0
    1b30:	11 24       	eor	r1, r1
    1b32:	b8 01       	movw	r22, r16
    1b34:	8e 59       	subi	r24, 0x9E	; 158
    1b36:	93 4d       	sbci	r25, 0xD3	; 211
    1b38:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1b3c:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1b40:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1b44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b46:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b48:	98 17       	cp	r25, r24
    1b4a:	88 f0       	brcs	.+34     	; 0x1b6e <xTaskResumeAll+0xaa>
    1b4c:	c0 92 29 2c 	sts	0x2C29, r12	; 0x802c29 <xYieldPending>
    1b50:	0e c0       	rjmp	.+28     	; 0x1b6e <xTaskResumeAll+0xaa>
    1b52:	c0 e0       	ldi	r28, 0x00	; 0
    1b54:	d0 e0       	ldi	r29, 0x00	; 0
    1b56:	0f 2e       	mov	r0, r31
    1b58:	fd e3       	ldi	r31, 0x3D	; 61
    1b5a:	ef 2e       	mov	r14, r31
    1b5c:	fc e2       	ldi	r31, 0x2C	; 44
    1b5e:	ff 2e       	mov	r15, r31
    1b60:	f0 2d       	mov	r31, r0
    1b62:	0f 2e       	mov	r0, r31
    1b64:	fb e0       	ldi	r31, 0x0B	; 11
    1b66:	df 2e       	mov	r13, r31
    1b68:	f0 2d       	mov	r31, r0
    1b6a:	cc 24       	eor	r12, r12
    1b6c:	c3 94       	inc	r12
    1b6e:	f7 01       	movw	r30, r14
    1b70:	80 81       	ld	r24, Z
    1b72:	81 11       	cpse	r24, r1
    1b74:	c3 cf       	rjmp	.-122    	; 0x1afc <xTaskResumeAll+0x38>
    1b76:	cd 2b       	or	r28, r29
    1b78:	11 f0       	breq	.+4      	; 0x1b7e <xTaskResumeAll+0xba>
    1b7a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <prvResetNextTaskUnblockTime>
    1b7e:	c0 91 2a 2c 	lds	r28, 0x2C2A	; 0x802c2a <uxPendedTicks>
    1b82:	cc 23       	and	r28, r28
    1b84:	51 f0       	breq	.+20     	; 0x1b9a <xTaskResumeAll+0xd6>
    1b86:	d1 e0       	ldi	r29, 0x01	; 1
    1b88:	0e 94 8f 0c 	call	0x191e	; 0x191e <xTaskIncrementTick>
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	d0 93 29 2c 	sts	0x2C29, r29	; 0x802c29 <xYieldPending>
    1b92:	c1 50       	subi	r28, 0x01	; 1
    1b94:	c9 f7       	brne	.-14     	; 0x1b88 <xTaskResumeAll+0xc4>
    1b96:	10 92 2a 2c 	sts	0x2C2A, r1	; 0x802c2a <uxPendedTicks>
    1b9a:	80 91 29 2c 	lds	r24, 0x2C29	; 0x802c29 <xYieldPending>
    1b9e:	88 23       	and	r24, r24
    1ba0:	31 f0       	breq	.+12     	; 0x1bae <xTaskResumeAll+0xea>
    1ba2:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <xTaskResumeAll+0xec>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <xTaskResumeAll+0xec>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	ff 91       	pop	r31
    1bb2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	08 95       	ret

00001bc8 <vTaskDelay>:
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	6b 01       	movw	r12, r22
    1bd2:	7c 01       	movw	r14, r24
    1bd4:	67 2b       	or	r22, r23
    1bd6:	68 2b       	or	r22, r24
    1bd8:	69 2b       	or	r22, r25
    1bda:	59 f0       	breq	.+22     	; 0x1bf2 <vTaskDelay+0x2a>
    1bdc:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	c7 01       	movw	r24, r14
    1be4:	b6 01       	movw	r22, r12
    1be6:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1bea:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    1bee:	81 11       	cpse	r24, r1
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <vTaskDelay+0x2e>
    1bf2:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	08 95       	ret

00001c00 <vTaskSwitchContext>:
    1c00:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1c04:	88 23       	and	r24, r24
    1c06:	21 f0       	breq	.+8      	; 0x1c10 <vTaskSwitchContext+0x10>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1c0e:	08 95       	ret
    1c10:	10 92 29 2c 	sts	0x2C29, r1	; 0x802c29 <xYieldPending>
    1c14:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1c18:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1c1c:	03 8c       	ldd	r0, Z+27	; 0x1b
    1c1e:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1c20:	e0 2d       	mov	r30, r0
    1c22:	80 81       	ld	r24, Z
    1c24:	91 81       	ldd	r25, Z+1	; 0x01
    1c26:	a2 81       	ldd	r26, Z+2	; 0x02
    1c28:	b3 81       	ldd	r27, Z+3	; 0x03
    1c2a:	85 3a       	cpi	r24, 0xA5	; 165
    1c2c:	95 4a       	sbci	r25, 0xA5	; 165
    1c2e:	a5 4a       	sbci	r26, 0xA5	; 165
    1c30:	b5 4a       	sbci	r27, 0xA5	; 165
    1c32:	d9 f4       	brne	.+54     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c34:	84 81       	ldd	r24, Z+4	; 0x04
    1c36:	95 81       	ldd	r25, Z+5	; 0x05
    1c38:	a6 81       	ldd	r26, Z+6	; 0x06
    1c3a:	b7 81       	ldd	r27, Z+7	; 0x07
    1c3c:	85 3a       	cpi	r24, 0xA5	; 165
    1c3e:	95 4a       	sbci	r25, 0xA5	; 165
    1c40:	a5 4a       	sbci	r26, 0xA5	; 165
    1c42:	b5 4a       	sbci	r27, 0xA5	; 165
    1c44:	91 f4       	brne	.+36     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c46:	80 85       	ldd	r24, Z+8	; 0x08
    1c48:	91 85       	ldd	r25, Z+9	; 0x09
    1c4a:	a2 85       	ldd	r26, Z+10	; 0x0a
    1c4c:	b3 85       	ldd	r27, Z+11	; 0x0b
    1c4e:	85 3a       	cpi	r24, 0xA5	; 165
    1c50:	95 4a       	sbci	r25, 0xA5	; 165
    1c52:	a5 4a       	sbci	r26, 0xA5	; 165
    1c54:	b5 4a       	sbci	r27, 0xA5	; 165
    1c56:	49 f4       	brne	.+18     	; 0x1c6a <vTaskSwitchContext+0x6a>
    1c58:	84 85       	ldd	r24, Z+12	; 0x0c
    1c5a:	95 85       	ldd	r25, Z+13	; 0x0d
    1c5c:	a6 85       	ldd	r26, Z+14	; 0x0e
    1c5e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1c60:	85 3a       	cpi	r24, 0xA5	; 165
    1c62:	95 4a       	sbci	r25, 0xA5	; 165
    1c64:	a5 4a       	sbci	r26, 0xA5	; 165
    1c66:	b5 4a       	sbci	r27, 0xA5	; 165
    1c68:	61 f0       	breq	.+24     	; 0x1c82 <vTaskSwitchContext+0x82>
    1c6a:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1c6e:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1c72:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1c76:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1c7a:	63 5e       	subi	r22, 0xE3	; 227
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <vApplicationStackOverflowHook>
    1c82:	80 91 2c 2c 	lds	r24, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	9b e0       	ldi	r25, 0x0B	; 11
    1c8c:	89 9f       	mul	r24, r25
    1c8e:	f0 01       	movw	r30, r0
    1c90:	11 24       	eor	r1, r1
    1c92:	ee 59       	subi	r30, 0x9E	; 158
    1c94:	f3 4d       	sbci	r31, 0xD3	; 211
    1c96:	90 81       	ld	r25, Z
    1c98:	91 11       	cpse	r25, r1
    1c9a:	0e c0       	rjmp	.+28     	; 0x1cb8 <vTaskSwitchContext+0xb8>
    1c9c:	4b e0       	ldi	r20, 0x0B	; 11
    1c9e:	81 50       	subi	r24, 0x01	; 1
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	42 9f       	mul	r20, r18
    1ca6:	f0 01       	movw	r30, r0
    1ca8:	43 9f       	mul	r20, r19
    1caa:	f0 0d       	add	r31, r0
    1cac:	11 24       	eor	r1, r1
    1cae:	ee 59       	subi	r30, 0x9E	; 158
    1cb0:	f3 4d       	sbci	r31, 0xD3	; 211
    1cb2:	90 81       	ld	r25, Z
    1cb4:	99 23       	and	r25, r25
    1cb6:	99 f3       	breq	.-26     	; 0x1c9e <vTaskSwitchContext+0x9e>
    1cb8:	9b e0       	ldi	r25, 0x0B	; 11
    1cba:	92 9f       	mul	r25, r18
    1cbc:	a0 01       	movw	r20, r0
    1cbe:	93 9f       	mul	r25, r19
    1cc0:	50 0d       	add	r21, r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	da 01       	movw	r26, r20
    1cc6:	ae 59       	subi	r26, 0x9E	; 158
    1cc8:	b3 4d       	sbci	r27, 0xD3	; 211
    1cca:	11 96       	adiw	r26, 0x01	; 1
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	12 97       	sbiw	r26, 0x02	; 2
    1cd2:	04 80       	ldd	r0, Z+4	; 0x04
    1cd4:	f5 81       	ldd	r31, Z+5	; 0x05
    1cd6:	e0 2d       	mov	r30, r0
    1cd8:	11 96       	adiw	r26, 0x01	; 1
    1cda:	ed 93       	st	X+, r30
    1cdc:	fc 93       	st	X, r31
    1cde:	12 97       	sbiw	r26, 0x02	; 2
    1ce0:	4b 59       	subi	r20, 0x9B	; 155
    1ce2:	53 4d       	sbci	r21, 0xD3	; 211
    1ce4:	e4 17       	cp	r30, r20
    1ce6:	f5 07       	cpc	r31, r21
    1ce8:	29 f4       	brne	.+10     	; 0x1cf4 <vTaskSwitchContext+0xf4>
    1cea:	44 81       	ldd	r20, Z+4	; 0x04
    1cec:	55 81       	ldd	r21, Z+5	; 0x05
    1cee:	fd 01       	movw	r30, r26
    1cf0:	41 83       	std	Z+1, r20	; 0x01
    1cf2:	52 83       	std	Z+2, r21	; 0x02
    1cf4:	9b e0       	ldi	r25, 0x0B	; 11
    1cf6:	92 9f       	mul	r25, r18
    1cf8:	f0 01       	movw	r30, r0
    1cfa:	93 9f       	mul	r25, r19
    1cfc:	f0 0d       	add	r31, r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	ee 59       	subi	r30, 0x9E	; 158
    1d02:	f3 4d       	sbci	r31, 0xD3	; 211
    1d04:	01 80       	ldd	r0, Z+1	; 0x01
    1d06:	f2 81       	ldd	r31, Z+2	; 0x02
    1d08:	e0 2d       	mov	r30, r0
    1d0a:	20 85       	ldd	r18, Z+8	; 0x08
    1d0c:	31 85       	ldd	r19, Z+9	; 0x09
    1d0e:	20 93 8e 2c 	sts	0x2C8E, r18	; 0x802c8e <pxCurrentTCB>
    1d12:	30 93 8f 2c 	sts	0x2C8F, r19	; 0x802c8f <pxCurrentTCB+0x1>
    1d16:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1d1a:	08 95       	ret

00001d1c <vTaskPlaceOnEventList>:
    1d1c:	cf 92       	push	r12
    1d1e:	df 92       	push	r13
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	6a 01       	movw	r12, r20
    1d26:	7b 01       	movw	r14, r22
    1d28:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1d2c:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1d30:	62 5f       	subi	r22, 0xF2	; 242
    1d32:	7f 4f       	sbci	r23, 0xFF	; 255
    1d34:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	08 95       	ret

00001d4c <vTaskPlaceOnUnorderedEventList>:
    1d4c:	cf 92       	push	r12
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	68 01       	movw	r12, r16
    1d5a:	79 01       	movw	r14, r18
    1d5c:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1d60:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1d64:	70 68       	ori	r23, 0x80	; 128
    1d66:	46 87       	std	Z+14, r20	; 0x0e
    1d68:	57 87       	std	Z+15, r21	; 0x0f
    1d6a:	60 8b       	std	Z+16, r22	; 0x10
    1d6c:	71 8b       	std	Z+17, r23	; 0x11
    1d6e:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1d72:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1d76:	62 5f       	subi	r22, 0xF2	; 242
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	c7 01       	movw	r24, r14
    1d82:	b6 01       	movw	r22, r12
    1d84:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	08 95       	ret

00001d96 <vTaskPlaceOnEventListRestricted>:
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	cf 93       	push	r28
    1da0:	6a 01       	movw	r12, r20
    1da2:	7b 01       	movw	r14, r22
    1da4:	c2 2f       	mov	r28, r18
    1da6:	60 91 8e 2c 	lds	r22, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1daa:	70 91 8f 2c 	lds	r23, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1dae:	62 5f       	subi	r22, 0xF2	; 242
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1db6:	cc 23       	and	r28, r28
    1db8:	21 f0       	breq	.+8      	; 0x1dc2 <vTaskPlaceOnEventListRestricted+0x2c>
    1dba:	cc 24       	eor	r12, r12
    1dbc:	ca 94       	dec	r12
    1dbe:	dc 2c       	mov	r13, r12
    1dc0:	76 01       	movw	r14, r12
    1dc2:	4c 2f       	mov	r20, r28
    1dc4:	c7 01       	movw	r24, r14
    1dc6:	b6 01       	movw	r22, r12
    1dc8:	0e 94 a6 0a 	call	0x154c	; 0x154c <prvAddCurrentTaskToDelayedList>
    1dcc:	cf 91       	pop	r28
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	08 95       	ret

00001dd8 <xTaskRemoveFromEventList>:
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	dc 01       	movw	r26, r24
    1de2:	17 96       	adiw	r26, 0x07	; 7
    1de4:	ed 91       	ld	r30, X+
    1de6:	fc 91       	ld	r31, X
    1de8:	18 97       	sbiw	r26, 0x08	; 8
    1dea:	c0 85       	ldd	r28, Z+8	; 0x08
    1dec:	d1 85       	ldd	r29, Z+9	; 0x09
    1dee:	8e 01       	movw	r16, r28
    1df0:	02 5f       	subi	r16, 0xF2	; 242
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	c8 01       	movw	r24, r16
    1df6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1dfa:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1dfe:	81 11       	cpse	r24, r1
    1e00:	16 c0       	rjmp	.+44     	; 0x1e2e <xTaskRemoveFromEventList+0x56>
    1e02:	0c 50       	subi	r16, 0x0C	; 12
    1e04:	11 09       	sbc	r17, r1
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e0e:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1e12:	98 17       	cp	r25, r24
    1e14:	10 f4       	brcc	.+4      	; 0x1e1a <xTaskRemoveFromEventList+0x42>
    1e16:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1e1a:	bb e0       	ldi	r27, 0x0B	; 11
    1e1c:	8b 9f       	mul	r24, r27
    1e1e:	c0 01       	movw	r24, r0
    1e20:	11 24       	eor	r1, r1
    1e22:	b8 01       	movw	r22, r16
    1e24:	8e 59       	subi	r24, 0x9E	; 158
    1e26:	93 4d       	sbci	r25, 0xD3	; 211
    1e28:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1e2c:	05 c0       	rjmp	.+10     	; 0x1e38 <xTaskRemoveFromEventList+0x60>
    1e2e:	b8 01       	movw	r22, r16
    1e30:	8d e3       	ldi	r24, 0x3D	; 61
    1e32:	9c e2       	ldi	r25, 0x2C	; 44
    1e34:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1e38:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1e3c:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1e40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e42:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e44:	89 17       	cp	r24, r25
    1e46:	20 f4       	brcc	.+8      	; 0x1e50 <xTaskRemoveFromEventList+0x78>
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <xTaskRemoveFromEventList+0x7a>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	08 95       	ret

00001e5c <vTaskRemoveFromUnorderedEventList>:
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	70 68       	ori	r23, 0x80	; 128
    1e66:	fc 01       	movw	r30, r24
    1e68:	40 83       	st	Z, r20
    1e6a:	51 83       	std	Z+1, r21	; 0x01
    1e6c:	62 83       	std	Z+2, r22	; 0x02
    1e6e:	73 83       	std	Z+3, r23	; 0x03
    1e70:	c0 85       	ldd	r28, Z+8	; 0x08
    1e72:	d1 85       	ldd	r29, Z+9	; 0x09
    1e74:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e78:	8e 01       	movw	r16, r28
    1e7a:	0e 5f       	subi	r16, 0xFE	; 254
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7e:	c8 01       	movw	r24, r16
    1e80:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    1e84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e86:	90 91 2c 2c 	lds	r25, 0x2C2C	; 0x802c2c <uxTopReadyPriority>
    1e8a:	98 17       	cp	r25, r24
    1e8c:	10 f4       	brcc	.+4      	; 0x1e92 <vTaskRemoveFromUnorderedEventList+0x36>
    1e8e:	80 93 2c 2c 	sts	0x2C2C, r24	; 0x802c2c <uxTopReadyPriority>
    1e92:	fb e0       	ldi	r31, 0x0B	; 11
    1e94:	8f 9f       	mul	r24, r31
    1e96:	c0 01       	movw	r24, r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	b8 01       	movw	r22, r16
    1e9c:	8e 59       	subi	r24, 0x9E	; 158
    1e9e:	93 4d       	sbci	r25, 0xD3	; 211
    1ea0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vListInsertEnd>
    1ea4:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1ea8:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1eac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1eae:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eb0:	89 17       	cp	r24, r25
    1eb2:	18 f4       	brcc	.+6      	; 0x1eba <vTaskRemoveFromUnorderedEventList+0x5e>
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <vTaskInternalSetTimeOutState>:
    1ec4:	20 91 28 2c 	lds	r18, 0x2C28	; 0x802c28 <xNumOfOverflows>
    1ec8:	fc 01       	movw	r30, r24
    1eca:	20 83       	st	Z, r18
    1ecc:	40 91 2d 2c 	lds	r20, 0x2C2D	; 0x802c2d <xTickCount>
    1ed0:	50 91 2e 2c 	lds	r21, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    1ed4:	60 91 2f 2c 	lds	r22, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1ed8:	70 91 30 2c 	lds	r23, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1edc:	41 83       	std	Z+1, r20	; 0x01
    1ede:	52 83       	std	Z+2, r21	; 0x02
    1ee0:	63 83       	std	Z+3, r22	; 0x03
    1ee2:	74 83       	std	Z+4, r23	; 0x04
    1ee4:	08 95       	ret

00001ee6 <xTaskCheckForTimeOut>:
    1ee6:	cf 92       	push	r12
    1ee8:	df 92       	push	r13
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	db 01       	movw	r26, r22
    1ef8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1efc:	ff 93       	push	r31
    1efe:	f8 7f       	andi	r31, 0xF8	; 248
    1f00:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f04:	40 91 2d 2c 	lds	r20, 0x2C2D	; 0x802c2d <xTickCount>
    1f08:	50 91 2e 2c 	lds	r21, 0x2C2E	; 0x802c2e <xTickCount+0x1>
    1f0c:	60 91 2f 2c 	lds	r22, 0x2C2F	; 0x802c2f <xTickCount+0x2>
    1f10:	70 91 30 2c 	lds	r23, 0x2C30	; 0x802c30 <xTickCount+0x3>
    1f14:	0d 91       	ld	r16, X+
    1f16:	1d 91       	ld	r17, X+
    1f18:	2d 91       	ld	r18, X+
    1f1a:	3c 91       	ld	r19, X
    1f1c:	13 97       	sbiw	r26, 0x03	; 3
    1f1e:	0f 3f       	cpi	r16, 0xFF	; 255
    1f20:	cf ef       	ldi	r28, 0xFF	; 255
    1f22:	1c 07       	cpc	r17, r28
    1f24:	2c 07       	cpc	r18, r28
    1f26:	3c 07       	cpc	r19, r28
    1f28:	69 f1       	breq	.+90     	; 0x1f84 <xTaskCheckForTimeOut+0x9e>
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	c1 80       	ldd	r12, Z+1	; 0x01
    1f2e:	d2 80       	ldd	r13, Z+2	; 0x02
    1f30:	e3 80       	ldd	r14, Z+3	; 0x03
    1f32:	f4 80       	ldd	r15, Z+4	; 0x04
    1f34:	e0 91 28 2c 	lds	r30, 0x2C28	; 0x802c28 <xNumOfOverflows>
    1f38:	ec 01       	movw	r28, r24
    1f3a:	f8 81       	ld	r31, Y
    1f3c:	fe 17       	cp	r31, r30
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <xTaskCheckForTimeOut+0x64>
    1f40:	4c 15       	cp	r20, r12
    1f42:	5d 05       	cpc	r21, r13
    1f44:	6e 05       	cpc	r22, r14
    1f46:	7f 05       	cpc	r23, r15
    1f48:	f8 f4       	brcc	.+62     	; 0x1f88 <xTaskCheckForTimeOut+0xa2>
    1f4a:	4c 19       	sub	r20, r12
    1f4c:	5d 09       	sbc	r21, r13
    1f4e:	6e 09       	sbc	r22, r14
    1f50:	7f 09       	sbc	r23, r15
    1f52:	40 17       	cp	r20, r16
    1f54:	51 07       	cpc	r21, r17
    1f56:	62 07       	cpc	r22, r18
    1f58:	73 07       	cpc	r23, r19
    1f5a:	68 f4       	brcc	.+26     	; 0x1f76 <xTaskCheckForTimeOut+0x90>
    1f5c:	fd 01       	movw	r30, r26
    1f5e:	04 1b       	sub	r16, r20
    1f60:	15 0b       	sbc	r17, r21
    1f62:	26 0b       	sbc	r18, r22
    1f64:	37 0b       	sbc	r19, r23
    1f66:	00 83       	st	Z, r16
    1f68:	11 83       	std	Z+1, r17	; 0x01
    1f6a:	22 83       	std	Z+2, r18	; 0x02
    1f6c:	33 83       	std	Z+3, r19	; 0x03
    1f6e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskInternalSetTimeOutState>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	0a c0       	rjmp	.+20     	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f76:	1d 92       	st	X+, r1
    1f78:	1d 92       	st	X+, r1
    1f7a:	1d 92       	st	X+, r1
    1f7c:	1c 92       	st	X, r1
    1f7e:	13 97       	sbiw	r26, 0x03	; 3
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <xTaskCheckForTimeOut+0xa4>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	ff 91       	pop	r31
    1f8c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	ff 90       	pop	r15
    1f9a:	ef 90       	pop	r14
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	08 95       	ret

00001fa2 <vTaskMissedYield>:
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <xYieldPending>
    1fa8:	08 95       	ret

00001faa <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1faa:	80 91 2b 2c 	lds	r24, 0x2C2B	; 0x802c2b <xSchedulerRunning>
    1fae:	88 23       	and	r24, r24
    1fb0:	31 f0       	breq	.+12     	; 0x1fbe <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1fb2:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <uxSchedulerSuspended>
    1fb6:	88 23       	and	r24, r24
    1fb8:	21 f0       	breq	.+8      	; 0x1fc2 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    1fc4:	08 95       	ret

00001fc6 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1fc6:	cf 92       	push	r12
    1fc8:	df 92       	push	r13
    1fca:	ef 92       	push	r14
    1fcc:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1fce:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1fd2:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1fd6:	66 85       	ldd	r22, Z+14	; 0x0e
    1fd8:	77 85       	ldd	r23, Z+15	; 0x0f
    1fda:	80 89       	ldd	r24, Z+16	; 0x10
    1fdc:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1fde:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1fe2:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1fe6:	a0 91 8e 2c 	lds	r26, 0x2C8E	; 0x802c8e <pxCurrentTCB>
    1fea:	b0 91 8f 2c 	lds	r27, 0x2C8F	; 0x802c8f <pxCurrentTCB+0x1>
    1fee:	5a 96       	adiw	r26, 0x1a	; 26
    1ff0:	2c 91       	ld	r18, X
    1ff2:	c1 2c       	mov	r12, r1
    1ff4:	d1 2c       	mov	r13, r1
    1ff6:	76 01       	movw	r14, r12
    1ff8:	68 94       	set
    1ffa:	c2 f8       	bld	r12, 2
    1ffc:	c2 1a       	sub	r12, r18
    1ffe:	d1 08       	sbc	r13, r1
    2000:	e1 08       	sbc	r14, r1
    2002:	f1 08       	sbc	r15, r1
    2004:	c6 86       	std	Z+14, r12	; 0x0e
    2006:	d7 86       	std	Z+15, r13	; 0x0f
    2008:	e0 8a       	std	Z+16, r14	; 0x10
    200a:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    200c:	ff 90       	pop	r15
    200e:	ef 90       	pop	r14
    2010:	df 90       	pop	r13
    2012:	cf 90       	pop	r12
    2014:	08 95       	ret

00002016 <prvInsertTimerInActiveList>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	fc 01       	movw	r30, r24
    2024:	42 83       	std	Z+2, r20	; 0x02
    2026:	53 83       	std	Z+3, r21	; 0x03
    2028:	64 83       	std	Z+4, r22	; 0x04
    202a:	75 83       	std	Z+5, r23	; 0x05
    202c:	82 87       	std	Z+10, r24	; 0x0a
    202e:	93 87       	std	Z+11, r25	; 0x0b
    2030:	04 17       	cp	r16, r20
    2032:	15 07       	cpc	r17, r21
    2034:	26 07       	cpc	r18, r22
    2036:	37 07       	cpc	r19, r23
    2038:	c0 f0       	brcs	.+48     	; 0x206a <prvInsertTimerInActiveList+0x54>
    203a:	0c 19       	sub	r16, r12
    203c:	1d 09       	sbc	r17, r13
    203e:	2e 09       	sbc	r18, r14
    2040:	3f 09       	sbc	r19, r15
    2042:	86 85       	ldd	r24, Z+14	; 0x0e
    2044:	97 85       	ldd	r25, Z+15	; 0x0f
    2046:	a0 89       	ldd	r26, Z+16	; 0x10
    2048:	b1 89       	ldd	r27, Z+17	; 0x11
    204a:	08 17       	cp	r16, r24
    204c:	19 07       	cpc	r17, r25
    204e:	2a 07       	cpc	r18, r26
    2050:	3b 07       	cpc	r19, r27
    2052:	00 f5       	brcc	.+64     	; 0x2094 <prvInsertTimerInActiveList+0x7e>
    2054:	bf 01       	movw	r22, r30
    2056:	6e 5f       	subi	r22, 0xFE	; 254
    2058:	7f 4f       	sbci	r23, 0xFF	; 255
    205a:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <pxOverflowTimerList>
    205e:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <pxOverflowTimerList+0x1>
    2062:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	18 c0       	rjmp	.+48     	; 0x209a <prvInsertTimerInActiveList+0x84>
    206a:	0c 15       	cp	r16, r12
    206c:	1d 05       	cpc	r17, r13
    206e:	2e 05       	cpc	r18, r14
    2070:	3f 05       	cpc	r19, r15
    2072:	28 f4       	brcc	.+10     	; 0x207e <prvInsertTimerInActiveList+0x68>
    2074:	4c 15       	cp	r20, r12
    2076:	5d 05       	cpc	r21, r13
    2078:	6e 05       	cpc	r22, r14
    207a:	7f 05       	cpc	r23, r15
    207c:	68 f4       	brcc	.+26     	; 0x2098 <prvInsertTimerInActiveList+0x82>
    207e:	bf 01       	movw	r22, r30
    2080:	6e 5f       	subi	r22, 0xFE	; 254
    2082:	7f 4f       	sbci	r23, 0xFF	; 255
    2084:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    2088:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    208c:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	03 c0       	rjmp	.+6      	; 0x209a <prvInsertTimerInActiveList+0x84>
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	01 c0       	rjmp	.+2      	; 0x209a <prvInsertTimerInActiveList+0x84>
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	08 95       	ret

000020a8 <prvCheckForValidListAndQueue>:
    20a8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    20ac:	ff 93       	push	r31
    20ae:	f8 7f       	andi	r31, 0xF8	; 248
    20b0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    20b4:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    20b8:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    20bc:	89 2b       	or	r24, r25
    20be:	e9 f4       	brne	.+58     	; 0x20fa <prvCheckForValidListAndQueue+0x52>
    20c0:	87 ea       	ldi	r24, 0xA7	; 167
    20c2:	9c e2       	ldi	r25, 0x2C	; 44
    20c4:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    20c8:	8c e9       	ldi	r24, 0x9C	; 156
    20ca:	9c e2       	ldi	r25, 0x2C	; 44
    20cc:	0e 94 2a 05 	call	0xa54	; 0xa54 <vListInitialise>
    20d0:	87 ea       	ldi	r24, 0xA7	; 167
    20d2:	9c e2       	ldi	r25, 0x2C	; 44
    20d4:	80 93 9a 2c 	sts	0x2C9A, r24	; 0x802c9a <pxCurrentTimerList>
    20d8:	90 93 9b 2c 	sts	0x2C9B, r25	; 0x802c9b <pxCurrentTimerList+0x1>
    20dc:	8c e9       	ldi	r24, 0x9C	; 156
    20de:	9c e2       	ldi	r25, 0x2C	; 44
    20e0:	80 93 98 2c 	sts	0x2C98, r24	; 0x802c98 <pxOverflowTimerList>
    20e4:	90 93 99 2c 	sts	0x2C99, r25	; 0x802c99 <pxOverflowTimerList+0x1>
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	69 e0       	ldi	r22, 0x09	; 9
    20ec:	85 e0       	ldi	r24, 0x05	; 5
    20ee:	0e 94 8d 08 	call	0x111a	; 0x111a <xQueueGenericCreate>
    20f2:	80 93 96 2c 	sts	0x2C96, r24	; 0x802c96 <xTimerQueue>
    20f6:	90 93 97 2c 	sts	0x2C97, r25	; 0x802c97 <xTimerQueue+0x1>
    20fa:	ff 91       	pop	r31
    20fc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2100:	08 95       	ret

00002102 <xTimerCreateTimerTask>:
    2102:	ef 92       	push	r14
    2104:	ff 92       	push	r15
    2106:	0f 93       	push	r16
    2108:	0e 94 54 10 	call	0x20a8	; 0x20a8 <prvCheckForValidListAndQueue>
    210c:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    2110:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    2114:	89 2b       	or	r24, r25
    2116:	91 f0       	breq	.+36     	; 0x213c <xTimerCreateTimerTask+0x3a>
    2118:	0f 2e       	mov	r0, r31
    211a:	f4 e9       	ldi	r31, 0x94	; 148
    211c:	ef 2e       	mov	r14, r31
    211e:	fc e2       	ldi	r31, 0x2C	; 44
    2120:	ff 2e       	mov	r15, r31
    2122:	f0 2d       	mov	r31, r0
    2124:	03 e0       	ldi	r16, 0x03	; 3
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	48 ec       	ldi	r20, 0xC8	; 200
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	62 e5       	ldi	r22, 0x52	; 82
    2130:	70 e2       	ldi	r23, 0x20	; 32
    2132:	84 e9       	ldi	r24, 0x94	; 148
    2134:	91 e1       	ldi	r25, 0x11	; 17
    2136:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
    213a:	01 c0       	rjmp	.+2      	; 0x213e <xTimerCreateTimerTask+0x3c>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	08 95       	ret

00002146 <xTimerGenericCommand>:
    2146:	8f 92       	push	r8
    2148:	9f 92       	push	r9
    214a:	af 92       	push	r10
    214c:	bf 92       	push	r11
    214e:	cf 92       	push	r12
    2150:	df 92       	push	r13
    2152:	ef 92       	push	r14
    2154:	ff 92       	push	r15
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	29 97       	sbiw	r28, 0x09	; 9
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	e0 91 96 2c 	lds	r30, 0x2C96	; 0x802c96 <xTimerQueue>
    216c:	f0 91 97 2c 	lds	r31, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    2170:	30 97       	sbiw	r30, 0x00	; 0
    2172:	89 f1       	breq	.+98     	; 0x21d6 <xTimerGenericCommand+0x90>
    2174:	69 83       	std	Y+1, r22	; 0x01
    2176:	2a 83       	std	Y+2, r18	; 0x02
    2178:	3b 83       	std	Y+3, r19	; 0x03
    217a:	4c 83       	std	Y+4, r20	; 0x04
    217c:	5d 83       	std	Y+5, r21	; 0x05
    217e:	8e 83       	std	Y+6, r24	; 0x06
    2180:	9f 83       	std	Y+7, r25	; 0x07
    2182:	66 30       	cpi	r22, 0x06	; 6
    2184:	fc f4       	brge	.+62     	; 0x21c4 <xTimerGenericCommand+0x7e>
    2186:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xTaskGetSchedulerState>
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	69 f4       	brne	.+26     	; 0x21a8 <xTimerGenericCommand+0x62>
    218e:	00 e0       	ldi	r16, 0x00	; 0
    2190:	a7 01       	movw	r20, r14
    2192:	96 01       	movw	r18, r12
    2194:	be 01       	movw	r22, r28
    2196:	6f 5f       	subi	r22, 0xFF	; 255
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    219e:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    21a2:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
    21a6:	18 c0       	rjmp	.+48     	; 0x21d8 <xTimerGenericCommand+0x92>
    21a8:	00 e0       	ldi	r16, 0x00	; 0
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	a9 01       	movw	r20, r18
    21b0:	be 01       	movw	r22, r28
    21b2:	6f 5f       	subi	r22, 0xFF	; 255
    21b4:	7f 4f       	sbci	r23, 0xFF	; 255
    21b6:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    21ba:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    21be:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
    21c2:	0a c0       	rjmp	.+20     	; 0x21d8 <xTimerGenericCommand+0x92>
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	a8 01       	movw	r20, r16
    21c8:	be 01       	movw	r22, r28
    21ca:	6f 5f       	subi	r22, 0xFF	; 255
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	cf 01       	movw	r24, r30
    21d0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xQueueGenericSendFromISR>
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <xTimerGenericCommand+0x92>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	29 96       	adiw	r28, 0x09	; 9
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	ff 90       	pop	r15
    21e8:	ef 90       	pop	r14
    21ea:	df 90       	pop	r13
    21ec:	cf 90       	pop	r12
    21ee:	bf 90       	pop	r11
    21f0:	af 90       	pop	r10
    21f2:	9f 90       	pop	r9
    21f4:	8f 90       	pop	r8
    21f6:	08 95       	ret

000021f8 <prvSampleTimeNow>:
    21f8:	2f 92       	push	r2
    21fa:	3f 92       	push	r3
    21fc:	4f 92       	push	r4
    21fe:	5f 92       	push	r5
    2200:	6f 92       	push	r6
    2202:	7f 92       	push	r7
    2204:	8f 92       	push	r8
    2206:	9f 92       	push	r9
    2208:	af 92       	push	r10
    220a:	bf 92       	push	r11
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	1c 01       	movw	r2, r24
    221e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <xTaskGetTickCount>
    2222:	2b 01       	movw	r4, r22
    2224:	3c 01       	movw	r6, r24
    2226:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xLastTime.4745>
    222a:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <xLastTime.4745+0x1>
    222e:	a0 91 92 2c 	lds	r26, 0x2C92	; 0x802c92 <xLastTime.4745+0x2>
    2232:	b0 91 93 2c 	lds	r27, 0x2C93	; 0x802c93 <xLastTime.4745+0x3>
    2236:	48 16       	cp	r4, r24
    2238:	59 06       	cpc	r5, r25
    223a:	6a 06       	cpc	r6, r26
    223c:	7b 06       	cpc	r7, r27
    223e:	08 f0       	brcs	.+2      	; 0x2242 <prvSampleTimeNow+0x4a>
    2240:	54 c0       	rjmp	.+168    	; 0x22ea <prvSampleTimeNow+0xf2>
    2242:	3c c0       	rjmp	.+120    	; 0x22bc <prvSampleTimeNow+0xc4>
    2244:	07 80       	ldd	r0, Z+7	; 0x07
    2246:	f0 85       	ldd	r31, Z+8	; 0x08
    2248:	e0 2d       	mov	r30, r0
    224a:	80 80       	ld	r8, Z
    224c:	91 80       	ldd	r9, Z+1	; 0x01
    224e:	a2 80       	ldd	r10, Z+2	; 0x02
    2250:	b3 80       	ldd	r11, Z+3	; 0x03
    2252:	c0 85       	ldd	r28, Z+8	; 0x08
    2254:	d1 85       	ldd	r29, Z+9	; 0x09
    2256:	8e 01       	movw	r16, r28
    2258:	0e 5f       	subi	r16, 0xFE	; 254
    225a:	1f 4f       	sbci	r17, 0xFF	; 255
    225c:	c8 01       	movw	r24, r16
    225e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    2262:	ed 89       	ldd	r30, Y+21	; 0x15
    2264:	fe 89       	ldd	r31, Y+22	; 0x16
    2266:	ce 01       	movw	r24, r28
    2268:	19 95       	eicall
    226a:	8a 89       	ldd	r24, Y+18	; 0x12
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	31 f5       	brne	.+76     	; 0x22bc <prvSampleTimeNow+0xc4>
    2270:	8e 85       	ldd	r24, Y+14	; 0x0e
    2272:	9f 85       	ldd	r25, Y+15	; 0x0f
    2274:	a8 89       	ldd	r26, Y+16	; 0x10
    2276:	b9 89       	ldd	r27, Y+17	; 0x11
    2278:	88 0d       	add	r24, r8
    227a:	99 1d       	adc	r25, r9
    227c:	aa 1d       	adc	r26, r10
    227e:	bb 1d       	adc	r27, r11
    2280:	88 16       	cp	r8, r24
    2282:	99 06       	cpc	r9, r25
    2284:	aa 06       	cpc	r10, r26
    2286:	bb 06       	cpc	r11, r27
    2288:	70 f4       	brcc	.+28     	; 0x22a6 <prvSampleTimeNow+0xae>
    228a:	8a 83       	std	Y+2, r24	; 0x02
    228c:	9b 83       	std	Y+3, r25	; 0x03
    228e:	ac 83       	std	Y+4, r26	; 0x04
    2290:	bd 83       	std	Y+5, r27	; 0x05
    2292:	ca 87       	std	Y+10, r28	; 0x0a
    2294:	db 87       	std	Y+11, r29	; 0x0b
    2296:	b8 01       	movw	r22, r16
    2298:	80 91 9a 2c 	lds	r24, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    229c:	90 91 9b 2c 	lds	r25, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    22a0:	0e 94 60 05 	call	0xac0	; 0xac0 <vListInsert>
    22a4:	0b c0       	rjmp	.+22     	; 0x22bc <prvSampleTimeNow+0xc4>
    22a6:	c1 2c       	mov	r12, r1
    22a8:	d1 2c       	mov	r13, r1
    22aa:	76 01       	movw	r14, r12
    22ac:	00 e0       	ldi	r16, 0x00	; 0
    22ae:	10 e0       	ldi	r17, 0x00	; 0
    22b0:	a5 01       	movw	r20, r10
    22b2:	94 01       	movw	r18, r8
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	ce 01       	movw	r24, r28
    22b8:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    22bc:	e0 91 9a 2c 	lds	r30, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    22c0:	f0 91 9b 2c 	lds	r31, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    22c4:	80 81       	ld	r24, Z
    22c6:	81 11       	cpse	r24, r1
    22c8:	bd cf       	rjmp	.-134    	; 0x2244 <prvSampleTimeNow+0x4c>
    22ca:	80 91 98 2c 	lds	r24, 0x2C98	; 0x802c98 <pxOverflowTimerList>
    22ce:	90 91 99 2c 	lds	r25, 0x2C99	; 0x802c99 <pxOverflowTimerList+0x1>
    22d2:	80 93 9a 2c 	sts	0x2C9A, r24	; 0x802c9a <pxCurrentTimerList>
    22d6:	90 93 9b 2c 	sts	0x2C9B, r25	; 0x802c9b <pxCurrentTimerList+0x1>
    22da:	e0 93 98 2c 	sts	0x2C98, r30	; 0x802c98 <pxOverflowTimerList>
    22de:	f0 93 99 2c 	sts	0x2C99, r31	; 0x802c99 <pxOverflowTimerList+0x1>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	f1 01       	movw	r30, r2
    22e6:	80 83       	st	Z, r24
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <prvSampleTimeNow+0xf6>
    22ea:	f1 01       	movw	r30, r2
    22ec:	10 82       	st	Z, r1
    22ee:	40 92 90 2c 	sts	0x2C90, r4	; 0x802c90 <xLastTime.4745>
    22f2:	50 92 91 2c 	sts	0x2C91, r5	; 0x802c91 <xLastTime.4745+0x1>
    22f6:	60 92 92 2c 	sts	0x2C92, r6	; 0x802c92 <xLastTime.4745+0x2>
    22fa:	70 92 93 2c 	sts	0x2C93, r7	; 0x802c93 <xLastTime.4745+0x3>
    22fe:	c3 01       	movw	r24, r6
    2300:	b2 01       	movw	r22, r4
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	df 90       	pop	r13
    2310:	cf 90       	pop	r12
    2312:	bf 90       	pop	r11
    2314:	af 90       	pop	r10
    2316:	9f 90       	pop	r9
    2318:	8f 90       	pop	r8
    231a:	7f 90       	pop	r7
    231c:	6f 90       	pop	r6
    231e:	5f 90       	pop	r5
    2320:	4f 90       	pop	r4
    2322:	3f 90       	pop	r3
    2324:	2f 90       	pop	r2
    2326:	08 95       	ret

00002328 <prvTimerTask>:
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	2e 97       	sbiw	r28, 0x0e	; 14
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	ce 01       	movw	r24, r28
    2338:	01 96       	adiw	r24, 0x01	; 1
    233a:	1c 01       	movw	r2, r24
    233c:	a8 2e       	mov	r10, r24
    233e:	b3 2c       	mov	r11, r3
    2340:	e0 91 9a 2c 	lds	r30, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    2344:	f0 91 9b 2c 	lds	r31, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    2348:	80 81       	ld	r24, Z
    234a:	88 23       	and	r24, r24
    234c:	09 f4       	brne	.+2      	; 0x2350 <prvTimerTask+0x28>
    234e:	03 c1       	rjmp	.+518    	; 0x2556 <prvTimerTask+0x22e>
    2350:	07 80       	ldd	r0, Z+7	; 0x07
    2352:	f0 85       	ldd	r31, Z+8	; 0x08
    2354:	e0 2d       	mov	r30, r0
    2356:	40 80       	ld	r4, Z
    2358:	51 80       	ldd	r5, Z+1	; 0x01
    235a:	62 80       	ldd	r6, Z+2	; 0x02
    235c:	73 80       	ldd	r7, Z+3	; 0x03
    235e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    2362:	c1 01       	movw	r24, r2
    2364:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    2368:	6b 87       	std	Y+11, r22	; 0x0b
    236a:	7c 87       	std	Y+12, r23	; 0x0c
    236c:	8d 87       	std	Y+13, r24	; 0x0d
    236e:	9e 87       	std	Y+14, r25	; 0x0e
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	81 11       	cpse	r24, r1
    2374:	5e c0       	rjmp	.+188    	; 0x2432 <prvTimerTask+0x10a>
    2376:	8b 85       	ldd	r24, Y+11	; 0x0b
    2378:	9c 85       	ldd	r25, Y+12	; 0x0c
    237a:	ad 85       	ldd	r26, Y+13	; 0x0d
    237c:	be 85       	ldd	r27, Y+14	; 0x0e
    237e:	84 15       	cp	r24, r4
    2380:	95 05       	cpc	r25, r5
    2382:	a6 05       	cpc	r26, r6
    2384:	b7 05       	cpc	r27, r7
    2386:	e8 f1       	brcs	.+122    	; 0x2402 <prvTimerTask+0xda>
    2388:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    238c:	e0 91 9a 2c 	lds	r30, 0x2C9A	; 0x802c9a <pxCurrentTimerList>
    2390:	f0 91 9b 2c 	lds	r31, 0x2C9B	; 0x802c9b <pxCurrentTimerList+0x1>
    2394:	07 80       	ldd	r0, Z+7	; 0x07
    2396:	f0 85       	ldd	r31, Z+8	; 0x08
    2398:	e0 2d       	mov	r30, r0
    239a:	80 84       	ldd	r8, Z+8	; 0x08
    239c:	91 84       	ldd	r9, Z+9	; 0x09
    239e:	c4 01       	movw	r24, r8
    23a0:	02 96       	adiw	r24, 0x02	; 2
    23a2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    23a6:	d4 01       	movw	r26, r8
    23a8:	52 96       	adiw	r26, 0x12	; 18
    23aa:	8c 91       	ld	r24, X
    23ac:	52 97       	sbiw	r26, 0x12	; 18
    23ae:	81 30       	cpi	r24, 0x01	; 1
    23b0:	01 f5       	brne	.+64     	; 0x23f2 <prvTimerTask+0xca>
    23b2:	1e 96       	adiw	r26, 0x0e	; 14
    23b4:	4d 91       	ld	r20, X+
    23b6:	5d 91       	ld	r21, X+
    23b8:	6d 91       	ld	r22, X+
    23ba:	7c 91       	ld	r23, X
    23bc:	51 97       	sbiw	r26, 0x11	; 17
    23be:	44 0d       	add	r20, r4
    23c0:	55 1d       	adc	r21, r5
    23c2:	66 1d       	adc	r22, r6
    23c4:	77 1d       	adc	r23, r7
    23c6:	73 01       	movw	r14, r6
    23c8:	62 01       	movw	r12, r4
    23ca:	0b 85       	ldd	r16, Y+11	; 0x0b
    23cc:	1c 85       	ldd	r17, Y+12	; 0x0c
    23ce:	2d 85       	ldd	r18, Y+13	; 0x0d
    23d0:	3e 85       	ldd	r19, Y+14	; 0x0e
    23d2:	c4 01       	movw	r24, r8
    23d4:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    23d8:	88 23       	and	r24, r24
    23da:	59 f0       	breq	.+22     	; 0x23f2 <prvTimerTask+0xca>
    23dc:	c1 2c       	mov	r12, r1
    23de:	d1 2c       	mov	r13, r1
    23e0:	76 01       	movw	r14, r12
    23e2:	00 e0       	ldi	r16, 0x00	; 0
    23e4:	10 e0       	ldi	r17, 0x00	; 0
    23e6:	a3 01       	movw	r20, r6
    23e8:	92 01       	movw	r18, r4
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	c4 01       	movw	r24, r8
    23ee:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    23f2:	d4 01       	movw	r26, r8
    23f4:	55 96       	adiw	r26, 0x15	; 21
    23f6:	ed 91       	ld	r30, X+
    23f8:	fc 91       	ld	r31, X
    23fa:	56 97       	sbiw	r26, 0x16	; 22
    23fc:	c4 01       	movw	r24, r8
    23fe:	19 95       	eicall
    2400:	9c c0       	rjmp	.+312    	; 0x253a <prvTimerTask+0x212>
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	b3 01       	movw	r22, r6
    2406:	a2 01       	movw	r20, r4
    2408:	8b 85       	ldd	r24, Y+11	; 0x0b
    240a:	9c 85       	ldd	r25, Y+12	; 0x0c
    240c:	ad 85       	ldd	r26, Y+13	; 0x0d
    240e:	be 85       	ldd	r27, Y+14	; 0x0e
    2410:	48 1b       	sub	r20, r24
    2412:	59 0b       	sbc	r21, r25
    2414:	6a 0b       	sbc	r22, r26
    2416:	7b 0b       	sbc	r23, r27
    2418:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    241c:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    2420:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <vQueueWaitForMessageRestricted>
    2424:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    2428:	81 11       	cpse	r24, r1
    242a:	87 c0       	rjmp	.+270    	; 0x253a <prvTimerTask+0x212>
    242c:	0e 94 88 06 	call	0xd10	; 0xd10 <vPortYield>
    2430:	84 c0       	rjmp	.+264    	; 0x253a <prvTimerTask+0x212>
    2432:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xTaskResumeAll>
    2436:	81 c0       	rjmp	.+258    	; 0x253a <prvTimerTask+0x212>
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	88 23       	and	r24, r24
    243c:	6c f4       	brge	.+26     	; 0x2458 <prvTimerTask+0x130>
    243e:	4e 81       	ldd	r20, Y+6	; 0x06
    2440:	5f 81       	ldd	r21, Y+7	; 0x07
    2442:	68 85       	ldd	r22, Y+8	; 0x08
    2444:	79 85       	ldd	r23, Y+9	; 0x09
    2446:	ea 81       	ldd	r30, Y+2	; 0x02
    2448:	fb 81       	ldd	r31, Y+3	; 0x03
    244a:	8c 81       	ldd	r24, Y+4	; 0x04
    244c:	9d 81       	ldd	r25, Y+5	; 0x05
    244e:	19 95       	eicall
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	88 23       	and	r24, r24
    2454:	0c f4       	brge	.+2      	; 0x2458 <prvTimerTask+0x130>
    2456:	71 c0       	rjmp	.+226    	; 0x253a <prvTimerTask+0x212>
    2458:	8e 80       	ldd	r8, Y+6	; 0x06
    245a:	9f 80       	ldd	r9, Y+7	; 0x07
    245c:	d4 01       	movw	r26, r8
    245e:	1c 96       	adiw	r26, 0x0c	; 12
    2460:	8d 91       	ld	r24, X+
    2462:	9c 91       	ld	r25, X
    2464:	1d 97       	sbiw	r26, 0x0d	; 13
    2466:	89 2b       	or	r24, r25
    2468:	21 f0       	breq	.+8      	; 0x2472 <prvTimerTask+0x14a>
    246a:	c4 01       	movw	r24, r8
    246c:	02 96       	adiw	r24, 0x02	; 2
    246e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <uxListRemove>
    2472:	ce 01       	movw	r24, r28
    2474:	0a 96       	adiw	r24, 0x0a	; 10
    2476:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    247a:	8b 01       	movw	r16, r22
    247c:	9c 01       	movw	r18, r24
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	08 2e       	mov	r0, r24
    2482:	00 0c       	add	r0, r0
    2484:	99 0b       	sbc	r25, r25
    2486:	aa 0b       	sbc	r26, r26
    2488:	bb 0b       	sbc	r27, r27
    248a:	8a 30       	cpi	r24, 0x0A	; 10
    248c:	91 05       	cpc	r25, r1
    248e:	08 f0       	brcs	.+2      	; 0x2492 <prvTimerTask+0x16a>
    2490:	54 c0       	rjmp	.+168    	; 0x253a <prvTimerTask+0x212>
    2492:	fc 01       	movw	r30, r24
    2494:	88 27       	eor	r24, r24
    2496:	e2 50       	subi	r30, 0x02	; 2
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	8f 4f       	sbci	r24, 0xFF	; 255
    249c:	0c 94 96 24 	jmp	0x492c	; 0x492c <__tablejump2__>
    24a0:	ca 80       	ldd	r12, Y+2	; 0x02
    24a2:	db 80       	ldd	r13, Y+3	; 0x03
    24a4:	ec 80       	ldd	r14, Y+4	; 0x04
    24a6:	fd 80       	ldd	r15, Y+5	; 0x05
    24a8:	f4 01       	movw	r30, r8
    24aa:	46 85       	ldd	r20, Z+14	; 0x0e
    24ac:	57 85       	ldd	r21, Z+15	; 0x0f
    24ae:	60 89       	ldd	r22, Z+16	; 0x10
    24b0:	71 89       	ldd	r23, Z+17	; 0x11
    24b2:	4c 0d       	add	r20, r12
    24b4:	5d 1d       	adc	r21, r13
    24b6:	6e 1d       	adc	r22, r14
    24b8:	7f 1d       	adc	r23, r15
    24ba:	c4 01       	movw	r24, r8
    24bc:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    24c0:	88 23       	and	r24, r24
    24c2:	d9 f1       	breq	.+118    	; 0x253a <prvTimerTask+0x212>
    24c4:	d4 01       	movw	r26, r8
    24c6:	55 96       	adiw	r26, 0x15	; 21
    24c8:	ed 91       	ld	r30, X+
    24ca:	fc 91       	ld	r31, X
    24cc:	56 97       	sbiw	r26, 0x16	; 22
    24ce:	c4 01       	movw	r24, r8
    24d0:	19 95       	eicall
    24d2:	f4 01       	movw	r30, r8
    24d4:	82 89       	ldd	r24, Z+18	; 0x12
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	81 f5       	brne	.+96     	; 0x253a <prvTimerTask+0x212>
    24da:	4a 81       	ldd	r20, Y+2	; 0x02
    24dc:	5b 81       	ldd	r21, Y+3	; 0x03
    24de:	6c 81       	ldd	r22, Y+4	; 0x04
    24e0:	7d 81       	ldd	r23, Y+5	; 0x05
    24e2:	86 85       	ldd	r24, Z+14	; 0x0e
    24e4:	97 85       	ldd	r25, Z+15	; 0x0f
    24e6:	a0 89       	ldd	r26, Z+16	; 0x10
    24e8:	b1 89       	ldd	r27, Z+17	; 0x11
    24ea:	9a 01       	movw	r18, r20
    24ec:	ab 01       	movw	r20, r22
    24ee:	28 0f       	add	r18, r24
    24f0:	39 1f       	adc	r19, r25
    24f2:	4a 1f       	adc	r20, r26
    24f4:	5b 1f       	adc	r21, r27
    24f6:	c1 2c       	mov	r12, r1
    24f8:	d1 2c       	mov	r13, r1
    24fa:	76 01       	movw	r14, r12
    24fc:	00 e0       	ldi	r16, 0x00	; 0
    24fe:	10 e0       	ldi	r17, 0x00	; 0
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	c4 01       	movw	r24, r8
    2504:	0e 94 a3 10 	call	0x2146	; 0x2146 <xTimerGenericCommand>
    2508:	18 c0       	rjmp	.+48     	; 0x253a <prvTimerTask+0x212>
    250a:	4a 81       	ldd	r20, Y+2	; 0x02
    250c:	5b 81       	ldd	r21, Y+3	; 0x03
    250e:	6c 81       	ldd	r22, Y+4	; 0x04
    2510:	7d 81       	ldd	r23, Y+5	; 0x05
    2512:	d4 01       	movw	r26, r8
    2514:	1e 96       	adiw	r26, 0x0e	; 14
    2516:	4d 93       	st	X+, r20
    2518:	5d 93       	st	X+, r21
    251a:	6d 93       	st	X+, r22
    251c:	7c 93       	st	X, r23
    251e:	51 97       	sbiw	r26, 0x11	; 17
    2520:	40 0f       	add	r20, r16
    2522:	51 1f       	adc	r21, r17
    2524:	62 1f       	adc	r22, r18
    2526:	73 1f       	adc	r23, r19
    2528:	68 01       	movw	r12, r16
    252a:	79 01       	movw	r14, r18
    252c:	c4 01       	movw	r24, r8
    252e:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvInsertTimerInActiveList>
    2532:	03 c0       	rjmp	.+6      	; 0x253a <prvTimerTask+0x212>
    2534:	c4 01       	movw	r24, r8
    2536:	0e 94 29 05 	call	0xa52	; 0xa52 <vPortFree>
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	a9 01       	movw	r20, r18
    2540:	6a 2d       	mov	r22, r10
    2542:	7b 2d       	mov	r23, r11
    2544:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    2548:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    254c:	0e 94 a9 09 	call	0x1352	; 0x1352 <xQueueReceive>
    2550:	81 11       	cpse	r24, r1
    2552:	72 cf       	rjmp	.-284    	; 0x2438 <prvTimerTask+0x110>
    2554:	f5 ce       	rjmp	.-534    	; 0x2340 <prvTimerTask+0x18>
    2556:	0e 94 77 0c 	call	0x18ee	; 0x18ee <vTaskSuspendAll>
    255a:	c1 01       	movw	r24, r2
    255c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <prvSampleTimeNow>
    2560:	6b 87       	std	Y+11, r22	; 0x0b
    2562:	7c 87       	std	Y+12, r23	; 0x0c
    2564:	8d 87       	std	Y+13, r24	; 0x0d
    2566:	9e 87       	std	Y+14, r25	; 0x0e
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	81 11       	cpse	r24, r1
    256c:	62 cf       	rjmp	.-316    	; 0x2432 <prvTimerTask+0x10a>
    256e:	e0 91 98 2c 	lds	r30, 0x2C98	; 0x802c98 <pxOverflowTimerList>
    2572:	f0 91 99 2c 	lds	r31, 0x2C99	; 0x802c99 <pxOverflowTimerList+0x1>
    2576:	80 81       	ld	r24, Z
    2578:	21 e0       	ldi	r18, 0x01	; 1
    257a:	81 11       	cpse	r24, r1
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	41 2c       	mov	r4, r1
    2580:	51 2c       	mov	r5, r1
    2582:	32 01       	movw	r6, r4
    2584:	3f cf       	rjmp	.-386    	; 0x2404 <prvTimerTask+0xdc>

00002586 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2586:	0f 93       	push	r16
    2588:	1f 93       	push	r17
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	29 97       	sbiw	r28, 0x09	; 9
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    2598:	ee ef       	ldi	r30, 0xFE	; 254
    259a:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    259c:	8a 83       	std	Y+2, r24	; 0x02
    259e:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    25a0:	6c 83       	std	Y+4, r22	; 0x04
    25a2:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    25a4:	2e 83       	std	Y+6, r18	; 0x06
    25a6:	3f 83       	std	Y+7, r19	; 0x07
    25a8:	48 87       	std	Y+8, r20	; 0x08
    25aa:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	a8 01       	movw	r20, r16
    25b0:	be 01       	movw	r22, r28
    25b2:	6f 5f       	subi	r22, 0xFF	; 255
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	80 91 96 2c 	lds	r24, 0x2C96	; 0x802c96 <xTimerQueue>
    25ba:	90 91 97 2c 	lds	r25, 0x2C97	; 0x802c97 <xTimerQueue+0x1>
    25be:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    25c2:	29 96       	adiw	r28, 0x09	; 9
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	08 95       	ret

000025d2 <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    25d2:	e0 e5       	ldi	r30, 0x50	; 80
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	81 60       	ori	r24, 0x01	; 1
    25da:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    25dc:	81 81       	ldd	r24, Z+1	; 0x01
    25de:	80 ff       	sbrs	r24, 0
    25e0:	fd cf       	rjmp	.-6      	; 0x25dc <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	0e 94 35 03 	call	0x66a	; 0x66a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    25e8:	8e e1       	ldi	r24, 0x1E	; 30
    25ea:	0e 94 25 03 	call	0x64a	; 0x64a <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	0e 94 2f 03 	call	0x65e	; 0x65e <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    25f6:	43 e0       	ldi	r20, 0x03	; 3
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	80 e4       	ldi	r24, 0x40	; 64
    25fc:	0e 94 16 03 	call	0x62c	; 0x62c <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    2600:	e0 e5       	ldi	r30, 0x50	; 80
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	88 60       	ori	r24, 0x08	; 8
    2608:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    260a:	81 81       	ldd	r24, Z+1	; 0x01
    260c:	83 ff       	sbrs	r24, 3
    260e:	fd cf       	rjmp	.-6      	; 0x260a <vInitClock+0x38>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    2610:	64 e0       	ldi	r22, 0x04	; 4
    2612:	80 ec       	ldi	r24, 0xC0	; 192
    2614:	0e 94 20 03 	call	0x640	; 0x640 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    2618:	e0 e5       	ldi	r30, 0x50	; 80
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	80 61       	ori	r24, 0x10	; 16
    2620:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	0e 94 2f 03 	call	0x65e	; 0x65e <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    262a:	e0 e5       	ldi	r30, 0x50	; 80
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	81 81       	ldd	r24, Z+1	; 0x01
    2630:	84 ff       	sbrs	r24, 4
    2632:	fd cf       	rjmp	.-6      	; 0x262e <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    2634:	84 e0       	ldi	r24, 0x04	; 4
    2636:	0e 94 35 03 	call	0x66a	; 0x66a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    263a:	87 e0       	ldi	r24, 0x07	; 7
    263c:	0e 94 25 03 	call	0x64a	; 0x64a <CLKSYS_Disable>
    2640:	08 95       	ret

00002642 <vApplicationIdleHook>:
double dPi4;
long i;


void vApplicationIdleHook( void )
{	
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
	
}
    264a:	00 00       	nop
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	08 95       	ret

00002652 <main>:

int main(void)
{
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
	vInitClock();
    2660:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <vInitClock>
	vInitDisplay();
    2664:	0e 94 02 17 	call	0x2e04	; 0x2e04 <vInitDisplay>
	egPiStates = xEventGroupCreate();
    2668:	0e 94 66 03 	call	0x6cc	; 0x6cc <xEventGroupCreate>
    266c:	80 93 e3 2c 	sts	0x2CE3, r24	; 0x802ce3 <egPiStates>
    2670:	90 93 e4 2c 	sts	0x2CE4, r25	; 0x802ce4 <egPiStates+0x1>
	
	xTaskCreate( vButton, (const char *) "Button", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    2674:	e1 2c       	mov	r14, r1
    2676:	f1 2c       	mov	r15, r1
    2678:	03 e0       	ldi	r16, 0x03	; 3
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	48 ec       	ldi	r20, 0xC8	; 200
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	70 e2       	ldi	r23, 0x20	; 32
    2686:	8c e4       	ldi	r24, 0x4C	; 76
    2688:	94 e1       	ldi	r25, 0x14	; 20
    268a:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
	xTaskCreate( vGUI, (const char *) "GUITask", configMINIMAL_STACK_SIZE, NULL, 2, &GUITask);
    268e:	0f 2e       	mov	r0, r31
    2690:	f9 ee       	ldi	r31, 0xE9	; 233
    2692:	ef 2e       	mov	r14, r31
    2694:	fc e2       	ldi	r31, 0x2C	; 44
    2696:	ff 2e       	mov	r15, r31
    2698:	f0 2d       	mov	r31, r0
    269a:	02 e0       	ldi	r16, 0x02	; 2
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	48 ec       	ldi	r20, 0xC8	; 200
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	67 e0       	ldi	r22, 0x07	; 7
    26a6:	70 e2       	ldi	r23, 0x20	; 32
    26a8:	8f e6       	ldi	r24, 0x6F	; 111
    26aa:	93 e1       	ldi	r25, 0x13	; 19
    26ac:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
	xTaskCreate( vCalc, (const char *) "Calc", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    26b0:	e1 2c       	mov	r14, r1
    26b2:	f1 2c       	mov	r15, r1
    26b4:	01 e0       	ldi	r16, 0x01	; 1
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	48 ec       	ldi	r20, 0xC8	; 200
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	6f e0       	ldi	r22, 0x0F	; 15
    26c0:	70 e2       	ldi	r23, 0x20	; 32
    26c2:	8f e8       	ldi	r24, 0x8F	; 143
    26c4:	94 e1       	ldi	r25, 0x14	; 20
    26c6:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>

	vTaskStartScheduler();
    26ca:	0e 94 3c 0c 	call	0x1878	; 0x1878 <vTaskStartScheduler>
	return 0;
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
}
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	0f 91       	pop	r16
    26d8:	ff 90       	pop	r15
    26da:	ef 90       	pop	r14
    26dc:	08 95       	ret

000026de <vGUI>:

void vGUI(void *pvParameters) {
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	6b 97       	sbiw	r28, 0x1b	; 27
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	8a 8f       	std	Y+26, r24	; 0x1a
    26ee:	9b 8f       	std	Y+27, r25	; 0x1b
	char Pi[10] = "";			
    26f0:	19 82       	std	Y+1, r1	; 0x01
    26f2:	1a 82       	std	Y+2, r1	; 0x02
    26f4:	28 e0       	ldi	r18, 0x08	; 8
    26f6:	ce 01       	movw	r24, r28
    26f8:	03 96       	adiw	r24, 0x03	; 3
    26fa:	fc 01       	movw	r30, r24
    26fc:	32 2f       	mov	r19, r18
    26fe:	11 92       	st	Z+, r1
    2700:	3a 95       	dec	r19
    2702:	e9 f7       	brne	.-6      	; 0x26fe <vGUI+0x20>
	char Iter[15] = "";
    2704:	1b 86       	std	Y+11, r1	; 0x0b
    2706:	1c 86       	std	Y+12, r1	; 0x0c
    2708:	2d e0       	ldi	r18, 0x0D	; 13
    270a:	ce 01       	movw	r24, r28
    270c:	0d 96       	adiw	r24, 0x0d	; 13
    270e:	fc 01       	movw	r30, r24
    2710:	32 2f       	mov	r19, r18
    2712:	11 92       	st	Z+, r1
    2714:	3a 95       	dec	r19
    2716:	e9 f7       	brne	.-6      	; 0x2712 <vGUI+0x34>
	for(;;) {
		
		xEventGroupClearBits(egPiStates, FINISHCALC);
    2718:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    271c:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    2720:	48 e0       	ldi	r20, 0x08	; 8
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	70 e0       	ldi	r23, 0x00	; 0
    2728:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
		sprintf(Pi, "%f", 4*dPi4);
    272c:	80 91 df 2c 	lds	r24, 0x2CDF	; 0x802cdf <dPi4>
    2730:	90 91 e0 2c 	lds	r25, 0x2CE0	; 0x802ce0 <dPi4+0x1>
    2734:	a0 91 e1 2c 	lds	r26, 0x2CE1	; 0x802ce1 <dPi4+0x2>
    2738:	b0 91 e2 2c 	lds	r27, 0x2CE2	; 0x802ce2 <dPi4+0x3>
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	50 e4       	ldi	r21, 0x40	; 64
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 89 20 	call	0x4112	; 0x4112 <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	2b 2f       	mov	r18, r27
    2752:	2f 93       	push	r18
    2754:	2a 2f       	mov	r18, r26
    2756:	2f 93       	push	r18
    2758:	29 2f       	mov	r18, r25
    275a:	2f 93       	push	r18
    275c:	8f 93       	push	r24
    275e:	84 e1       	ldi	r24, 0x14	; 20
    2760:	90 e2       	ldi	r25, 0x20	; 32
    2762:	89 2f       	mov	r24, r25
    2764:	8f 93       	push	r24
    2766:	84 e1       	ldi	r24, 0x14	; 20
    2768:	90 e2       	ldi	r25, 0x20	; 32
    276a:	8f 93       	push	r24
    276c:	ce 01       	movw	r24, r28
    276e:	01 96       	adiw	r24, 0x01	; 1
    2770:	9f 93       	push	r25
    2772:	8f 93       	push	r24
    2774:	0e 94 11 26 	call	0x4c22	; 0x4c22 <sprintf>
    2778:	8d b7       	in	r24, 0x3d	; 61
    277a:	9e b7       	in	r25, 0x3e	; 62
    277c:	08 96       	adiw	r24, 0x08	; 8
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	de bf       	out	0x3e, r29	; 62
		sprintf(Iter, "%ld", i);
    2782:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <i>
    2786:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <i+0x1>
    278a:	a0 91 e7 2c 	lds	r26, 0x2CE7	; 0x802ce7 <i+0x2>
    278e:	b0 91 e8 2c 	lds	r27, 0x2CE8	; 0x802ce8 <i+0x3>
    2792:	2b 2f       	mov	r18, r27
    2794:	2f 93       	push	r18
    2796:	2a 2f       	mov	r18, r26
    2798:	2f 93       	push	r18
    279a:	29 2f       	mov	r18, r25
    279c:	2f 93       	push	r18
    279e:	8f 93       	push	r24
    27a0:	87 e1       	ldi	r24, 0x17	; 23
    27a2:	90 e2       	ldi	r25, 0x20	; 32
    27a4:	89 2f       	mov	r24, r25
    27a6:	8f 93       	push	r24
    27a8:	87 e1       	ldi	r24, 0x17	; 23
    27aa:	90 e2       	ldi	r25, 0x20	; 32
    27ac:	8f 93       	push	r24
    27ae:	ce 01       	movw	r24, r28
    27b0:	0b 96       	adiw	r24, 0x0b	; 11
    27b2:	29 2f       	mov	r18, r25
    27b4:	2f 93       	push	r18
    27b6:	8f 93       	push	r24
    27b8:	0e 94 11 26 	call	0x4c22	; 0x4c22 <sprintf>
    27bc:	ed b7       	in	r30, 0x3d	; 61
    27be:	fe b7       	in	r31, 0x3e	; 62
    27c0:	38 96       	adiw	r30, 0x08	; 8
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	de bf       	out	0x3e, r29	; 62
		vDisplayClear();
    27c6:	0e 94 4d 19 	call	0x329a	; 0x329a <vDisplayClear>
		vDisplayWriteStringAtPos(0,0,"PI Calculator");
    27ca:	8b e1       	ldi	r24, 0x1B	; 27
    27cc:	90 e2       	ldi	r25, 0x20	; 32
    27ce:	89 2f       	mov	r24, r25
    27d0:	8f 93       	push	r24
    27d2:	8b e1       	ldi	r24, 0x1B	; 27
    27d4:	90 e2       	ldi	r25, 0x20	; 32
    27d6:	8f 93       	push	r24
    27d8:	1f 92       	push	r1
    27da:	1f 92       	push	r1
    27dc:	1f 92       	push	r1
    27de:	1f 92       	push	r1
    27e0:	0e 94 5f 19 	call	0x32be	; 0x32be <vDisplayWriteStringAtPos>
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
		vDisplayWriteStringAtPos(1,0,"%s", Iter);
    27f0:	ce 01       	movw	r24, r28
    27f2:	0b 96       	adiw	r24, 0x0b	; 11
    27f4:	29 2f       	mov	r18, r25
    27f6:	2f 93       	push	r18
    27f8:	8f 93       	push	r24
    27fa:	89 e2       	ldi	r24, 0x29	; 41
    27fc:	90 e2       	ldi	r25, 0x20	; 32
    27fe:	89 2f       	mov	r24, r25
    2800:	8f 93       	push	r24
    2802:	89 e2       	ldi	r24, 0x29	; 41
    2804:	90 e2       	ldi	r25, 0x20	; 32
    2806:	8f 93       	push	r24
    2808:	1f 92       	push	r1
    280a:	1f 92       	push	r1
    280c:	1f 92       	push	r1
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	8f 93       	push	r24
    2812:	0e 94 5f 19 	call	0x32be	; 0x32be <vDisplayWriteStringAtPos>
    2816:	8d b7       	in	r24, 0x3d	; 61
    2818:	9e b7       	in	r25, 0x3e	; 62
    281a:	08 96       	adiw	r24, 0x08	; 8
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(2,0,"Pi: %s", Pi);
    2820:	ce 01       	movw	r24, r28
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	9f 93       	push	r25
    2826:	8f 93       	push	r24
    2828:	8c e2       	ldi	r24, 0x2C	; 44
    282a:	90 e2       	ldi	r25, 0x20	; 32
    282c:	89 2f       	mov	r24, r25
    282e:	8f 93       	push	r24
    2830:	8c e2       	ldi	r24, 0x2C	; 44
    2832:	90 e2       	ldi	r25, 0x20	; 32
    2834:	8f 93       	push	r24
    2836:	1f 92       	push	r1
    2838:	1f 92       	push	r1
    283a:	1f 92       	push	r1
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	8f 93       	push	r24
    2840:	0e 94 5f 19 	call	0x32be	; 0x32be <vDisplayWriteStringAtPos>
    2844:	ed b7       	in	r30, 0x3d	; 61
    2846:	fe b7       	in	r31, 0x3e	; 62
    2848:	38 96       	adiw	r30, 0x08	; 8
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(3,0,"Zeit: xxxxxxms");
    284e:	83 e3       	ldi	r24, 0x33	; 51
    2850:	90 e2       	ldi	r25, 0x20	; 32
    2852:	89 2f       	mov	r24, r25
    2854:	8f 93       	push	r24
    2856:	83 e3       	ldi	r24, 0x33	; 51
    2858:	90 e2       	ldi	r25, 0x20	; 32
    285a:	8f 93       	push	r24
    285c:	1f 92       	push	r1
    285e:	1f 92       	push	r1
    2860:	1f 92       	push	r1
    2862:	83 e0       	ldi	r24, 0x03	; 3
    2864:	8f 93       	push	r24
    2866:	0e 94 5f 19 	call	0x32be	; 0x32be <vDisplayWriteStringAtPos>
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
		xEventGroupSetBits(egPiStates, FINISHCALC);
    2876:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    287a:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    287e:	48 e0       	ldi	r20, 0x08	; 8
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
		
		vTaskDelay(500 / portTICK_RATE_MS);
    288a:	64 ef       	ldi	r22, 0xF4	; 244
    288c:	71 e0       	ldi	r23, 0x01	; 1
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
	}
    2896:	40 cf       	rjmp	.-384    	; 0x2718 <vGUI+0x3a>

00002898 <vButton>:
}

void vButton(void *pvParameters) {
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	1f 92       	push	r1
    289e:	1f 92       	push	r1
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	9a 83       	std	Y+2, r25	; 0x02
	initButtons();
    28a8:	0e 94 ca 01 	call	0x394	; 0x394 <initButtons>
	
	while (1) {
		updateButtons();
    28ac:	0e 94 e6 01 	call	0x3cc	; 0x3cc <updateButtons>
		if (getButtonPress(BUTTON1) == SHORT_PRESSED) {
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>
    28b6:	81 30       	cpi	r24, 0x01	; 1
    28b8:	51 f4       	brne	.+20     	; 0x28ce <vButton+0x36>
			xEventGroupSetBits(egPiStates, STARTCALC);
    28ba:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    28be:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	50 e0       	ldi	r21, 0x00	; 0
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
//			xEventGroupClearBits(egPiStates, STOPCALC);
		}

		if (getButtonPress(BUTTON2) == SHORT_PRESSED) {
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>
    28d4:	81 30       	cpi	r24, 0x01	; 1
    28d6:	51 f4       	brne	.+20     	; 0x28ec <vButton+0x54>
//			xEventGroupSetBits(egPiStates, STOPCALC);
			xEventGroupClearBits(egPiStates, STARTCALC);
    28d8:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    28dc:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	50 e0       	ldi	r21, 0x00	; 0
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	70 e0       	ldi	r23, 0x00	; 0
    28e8:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
		}
		
		if (getButtonPress(BUTTON3) == SHORT_PRESSED) {
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>
    28f2:	81 30       	cpi	r24, 0x01	; 1
    28f4:	51 f4       	brne	.+20     	; 0x290a <vButton+0x72>
			xEventGroupSetBits(egPiStates, RESETCALC);
    28f6:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    28fa:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    28fe:	44 e0       	ldi	r20, 0x04	; 4
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	70 e0       	ldi	r23, 0x00	; 0
    2906:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
			
		}		

		if (getButtonPress(BUTTON4) == SHORT_PRESSED) {
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <getButtonPress>

		}

		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    2910:	6a e0       	ldi	r22, 0x0A	; 10
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
	}
    291c:	c7 cf       	rjmp	.-114    	; 0x28ac <vButton+0x14>

0000291e <vCalc>:
}

void vCalc(void *pvParameters) {
    291e:	cf 92       	push	r12
    2920:	df 92       	push	r13
    2922:	ef 92       	push	r14
    2924:	ff 92       	push	r15
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	00 d0       	rcall	.+0      	; 0x292c <vCalc+0xe>
    292c:	1f 92       	push	r1
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	8b 83       	std	Y+3, r24	; 0x03
    2934:	9c 83       	std	Y+4, r25	; 0x04
	dPi4 = 1;
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 e8       	ldi	r26, 0x80	; 128
    293c:	bf e3       	ldi	r27, 0x3F	; 63
    293e:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <dPi4>
    2942:	90 93 e0 2c 	sts	0x2CE0, r25	; 0x802ce0 <dPi4+0x1>
    2946:	a0 93 e1 2c 	sts	0x2CE1, r26	; 0x802ce1 <dPi4+0x2>
    294a:	b0 93 e2 2c 	sts	0x2CE2, r27	; 0x802ce2 <dPi4+0x3>
	uint16_t calcstate = 0x0000;
    294e:	19 82       	std	Y+1, r1	; 0x01
    2950:	1a 82       	std	Y+2, r1	; 0x02
	i = 0;
    2952:	10 92 e5 2c 	sts	0x2CE5, r1	; 0x802ce5 <i>
    2956:	10 92 e6 2c 	sts	0x2CE6, r1	; 0x802ce6 <i+0x1>
    295a:	10 92 e7 2c 	sts	0x2CE7, r1	; 0x802ce7 <i+0x2>
    295e:	10 92 e8 2c 	sts	0x2CE8, r1	; 0x802ce8 <i+0x3>
	
	for(;;) {
		
		calcstate = xEventGroupGetBits(egPiStates);
    2962:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    2966:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	ba 01       	movw	r22, r20
    2970:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	9a 83       	std	Y+2, r25	; 0x02
	//	xEventGroupWaitBits(egPiStates, STARTCALC, pdFALSE, pdFALSE, portMAX_DELAY);
		
		if (calcstate & FINISHCALC) {
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	88 70       	andi	r24, 0x08	; 8
    2982:	99 27       	eor	r25, r25
    2984:	89 2b       	or	r24, r25
    2986:	09 f4       	brne	.+2      	; 0x298a <vCalc+0x6c>
    2988:	82 c0       	rjmp	.+260    	; 0x2a8e <vCalc+0x170>
			if (calcstate & STARTCALC) {
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	81 70       	andi	r24, 0x01	; 1
    2990:	99 27       	eor	r25, r25
    2992:	89 2b       	or	r24, r25
    2994:	09 f4       	brne	.+2      	; 0x2998 <vCalc+0x7a>
    2996:	7b c0       	rjmp	.+246    	; 0x2a8e <vCalc+0x170>
				dPi4 = dPi4 - (1.0/(3+4*i)) + (1.0/(5+4*i));
    2998:	c0 90 df 2c 	lds	r12, 0x2CDF	; 0x802cdf <dPi4>
    299c:	d0 90 e0 2c 	lds	r13, 0x2CE0	; 0x802ce0 <dPi4+0x1>
    29a0:	e0 90 e1 2c 	lds	r14, 0x2CE1	; 0x802ce1 <dPi4+0x2>
    29a4:	f0 90 e2 2c 	lds	r15, 0x2CE2	; 0x802ce2 <dPi4+0x3>
    29a8:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <i>
    29ac:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <i+0x1>
    29b0:	a0 91 e7 2c 	lds	r26, 0x2CE7	; 0x802ce7 <i+0x2>
    29b4:	b0 91 e8 2c 	lds	r27, 0x2CE8	; 0x802ce8 <i+0x3>
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	aa 1f       	adc	r26, r26
    29be:	bb 1f       	adc	r27, r27
    29c0:	88 0f       	add	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	aa 1f       	adc	r26, r26
    29c6:	bb 1f       	adc	r27, r27
    29c8:	03 96       	adiw	r24, 0x03	; 3
    29ca:	a1 1d       	adc	r26, r1
    29cc:	b1 1d       	adc	r27, r1
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__floatsisf>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9c 01       	movw	r18, r24
    29dc:	ad 01       	movw	r20, r26
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	80 e8       	ldi	r24, 0x80	; 128
    29e4:	9f e3       	ldi	r25, 0x3F	; 63
    29e6:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__divsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	9c 01       	movw	r18, r24
    29f0:	ad 01       	movw	r20, r26
    29f2:	c7 01       	movw	r24, r14
    29f4:	b6 01       	movw	r22, r12
    29f6:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__subsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	6c 01       	movw	r12, r24
    2a00:	7d 01       	movw	r14, r26
    2a02:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <i>
    2a06:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <i+0x1>
    2a0a:	a0 91 e7 2c 	lds	r26, 0x2CE7	; 0x802ce7 <i+0x2>
    2a0e:	b0 91 e8 2c 	lds	r27, 0x2CE8	; 0x802ce8 <i+0x3>
    2a12:	88 0f       	add	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	aa 1f       	adc	r26, r26
    2a18:	bb 1f       	adc	r27, r27
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	aa 1f       	adc	r26, r26
    2a20:	bb 1f       	adc	r27, r27
    2a22:	05 96       	adiw	r24, 0x05	; 5
    2a24:	a1 1d       	adc	r26, r1
    2a26:	b1 1d       	adc	r27, r1
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__floatsisf>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9c 01       	movw	r18, r24
    2a36:	ad 01       	movw	r20, r26
    2a38:	60 e0       	ldi	r22, 0x00	; 0
    2a3a:	70 e0       	ldi	r23, 0x00	; 0
    2a3c:	80 e8       	ldi	r24, 0x80	; 128
    2a3e:	9f e3       	ldi	r25, 0x3F	; 63
    2a40:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__divsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9c 01       	movw	r18, r24
    2a4a:	ad 01       	movw	r20, r26
    2a4c:	c7 01       	movw	r24, r14
    2a4e:	b6 01       	movw	r22, r12
    2a50:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__addsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <dPi4>
    2a5c:	90 93 e0 2c 	sts	0x2CE0, r25	; 0x802ce0 <dPi4+0x1>
    2a60:	a0 93 e1 2c 	sts	0x2CE1, r26	; 0x802ce1 <dPi4+0x2>
    2a64:	b0 93 e2 2c 	sts	0x2CE2, r27	; 0x802ce2 <dPi4+0x3>
				i++;
    2a68:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <i>
    2a6c:	90 91 e6 2c 	lds	r25, 0x2CE6	; 0x802ce6 <i+0x1>
    2a70:	a0 91 e7 2c 	lds	r26, 0x2CE7	; 0x802ce7 <i+0x2>
    2a74:	b0 91 e8 2c 	lds	r27, 0x2CE8	; 0x802ce8 <i+0x3>
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	a1 1d       	adc	r26, r1
    2a7c:	b1 1d       	adc	r27, r1
    2a7e:	80 93 e5 2c 	sts	0x2CE5, r24	; 0x802ce5 <i>
    2a82:	90 93 e6 2c 	sts	0x2CE6, r25	; 0x802ce6 <i+0x1>
    2a86:	a0 93 e7 2c 	sts	0x2CE7, r26	; 0x802ce7 <i+0x2>
    2a8a:	b0 93 e8 2c 	sts	0x2CE8, r27	; 0x802ce8 <i+0x3>
		}
/*		if (calcstate & STOPCALC) {
			// do nothing
		}
*/
		if (calcstate & RESETCALC) {
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	9a 81       	ldd	r25, Y+2	; 0x02
    2a92:	84 70       	andi	r24, 0x04	; 4
    2a94:	99 27       	eor	r25, r25
    2a96:	89 2b       	or	r24, r25
    2a98:	09 f4       	brne	.+2      	; 0x2a9c <vCalc+0x17e>
    2a9a:	63 cf       	rjmp	.-314    	; 0x2962 <vCalc+0x44>
			dPi4 = 1;
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	a0 e8       	ldi	r26, 0x80	; 128
    2aa2:	bf e3       	ldi	r27, 0x3F	; 63
    2aa4:	80 93 df 2c 	sts	0x2CDF, r24	; 0x802cdf <dPi4>
    2aa8:	90 93 e0 2c 	sts	0x2CE0, r25	; 0x802ce0 <dPi4+0x1>
    2aac:	a0 93 e1 2c 	sts	0x2CE1, r26	; 0x802ce1 <dPi4+0x2>
    2ab0:	b0 93 e2 2c 	sts	0x2CE2, r27	; 0x802ce2 <dPi4+0x3>
			i = 0;
    2ab4:	10 92 e5 2c 	sts	0x2CE5, r1	; 0x802ce5 <i>
    2ab8:	10 92 e6 2c 	sts	0x2CE6, r1	; 0x802ce6 <i+0x1>
    2abc:	10 92 e7 2c 	sts	0x2CE7, r1	; 0x802ce7 <i+0x2>
    2ac0:	10 92 e8 2c 	sts	0x2CE8, r1	; 0x802ce8 <i+0x3>
			xEventGroupClearBits(egPiStates, RESETCALC);
    2ac4:	80 91 e3 2c 	lds	r24, 0x2CE3	; 0x802ce3 <egPiStates>
    2ac8:	90 91 e4 2c 	lds	r25, 0x2CE4	; 0x802ce4 <egPiStates+0x1>
    2acc:	44 e0       	ldi	r20, 0x04	; 4
    2ace:	50 e0       	ldi	r21, 0x00	; 0
    2ad0:	60 e0       	ldi	r22, 0x00	; 0
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
		
		
		
		
		//vTaskDelay(1/portTICK_RATE_MS);
	}
    2ad8:	44 cf       	rjmp	.-376    	; 0x2962 <vCalc+0x44>

00002ada <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    2ada:	1f 92       	push	r1
    2adc:	0f 92       	push	r0
    2ade:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ae2:	0f 92       	push	r0
    2ae4:	11 24       	eor	r1, r1
    2ae6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2aea:	0f 92       	push	r0
    2aec:	2f 93       	push	r18
    2aee:	3f 93       	push	r19
    2af0:	4f 93       	push	r20
    2af2:	5f 93       	push	r21
    2af4:	6f 93       	push	r22
    2af6:	7f 93       	push	r23
    2af8:	8f 93       	push	r24
    2afa:	9f 93       	push	r25
    2afc:	af 93       	push	r26
    2afe:	bf 93       	push	r27
    2b00:	ef 93       	push	r30
    2b02:	ff 93       	push	r31
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	1f 92       	push	r1
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	19 82       	std	Y+1, r1	; 0x01
    2b10:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egDisplayTiming>
    2b14:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egDisplayTiming+0x1>
    2b18:	9e 01       	movw	r18, r28
    2b1a:	2f 5f       	subi	r18, 0xFF	; 255
    2b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1e:	41 e0       	ldi	r20, 0x01	; 1
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	60 e0       	ldi	r22, 0x00	; 0
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	0e 94 f6 04 	call	0x9ec	; 0x9ec <xEventGroupSetBitsFromISR>
    2b2a:	60 e0       	ldi	r22, 0x00	; 0
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	9b e0       	ldi	r25, 0x0B	; 11
    2b30:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	9b e0       	ldi	r25, 0x0B	; 11
    2b38:	fc 01       	movw	r30, r24
    2b3a:	16 82       	std	Z+6, r1	; 0x06
    2b3c:	00 00       	nop
    2b3e:	0f 90       	pop	r0
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	ff 91       	pop	r31
    2b46:	ef 91       	pop	r30
    2b48:	bf 91       	pop	r27
    2b4a:	af 91       	pop	r26
    2b4c:	9f 91       	pop	r25
    2b4e:	8f 91       	pop	r24
    2b50:	7f 91       	pop	r23
    2b52:	6f 91       	pop	r22
    2b54:	5f 91       	pop	r21
    2b56:	4f 91       	pop	r20
    2b58:	3f 91       	pop	r19
    2b5a:	2f 91       	pop	r18
    2b5c:	0f 90       	pop	r0
    2b5e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b62:	0f 90       	pop	r0
    2b64:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2b68:	0f 90       	pop	r0
    2b6a:	1f 90       	pop	r1
    2b6c:	18 95       	reti

00002b6e <delayUS>:
    2b6e:	cf 92       	push	r12
    2b70:	df 92       	push	r13
    2b72:	ef 92       	push	r14
    2b74:	ff 92       	push	r15
    2b76:	0f 93       	push	r16
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	00 d0       	rcall	.+0      	; 0x2b7e <delayUS+0x10>
    2b7e:	1f 92       	push	r1
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	69 83       	std	Y+1, r22	; 0x01
    2b86:	7a 83       	std	Y+2, r23	; 0x02
    2b88:	8b 83       	std	Y+3, r24	; 0x03
    2b8a:	9c 83       	std	Y+4, r25	; 0x04
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b90:	ab 81       	ldd	r26, Y+3	; 0x03
    2b92:	bc 81       	ldd	r27, Y+4	; 0x04
    2b94:	02 97       	sbiw	r24, 0x02	; 2
    2b96:	a1 05       	cpc	r26, r1
    2b98:	b1 05       	cpc	r27, r1
    2b9a:	40 f4       	brcc	.+16     	; 0x2bac <delayUS+0x3e>
    2b9c:	82 e0       	ldi	r24, 0x02	; 2
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	a0 e0       	ldi	r26, 0x00	; 0
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	ab 83       	std	Y+3, r26	; 0x03
    2baa:	bc 83       	std	Y+4, r27	; 0x04
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	9b e0       	ldi	r25, 0x0B	; 11
    2bb0:	21 e0       	ldi	r18, 0x01	; 1
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	26 83       	std	Z+6, r18	; 0x06
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	9b e0       	ldi	r25, 0x0B	; 11
    2bba:	fc 01       	movw	r30, r24
    2bbc:	10 a2       	std	Z+32, r1	; 0x20
    2bbe:	11 a2       	std	Z+33, r1	; 0x21
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	9b e0       	ldi	r25, 0x0B	; 11
    2bc6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <TC0_ConfigWGM>
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bce:	ab 81       	ldd	r26, Y+3	; 0x03
    2bd0:	bc 81       	ldd	r27, Y+4	; 0x04
    2bd2:	8e 3f       	cpi	r24, 0xFE	; 254
    2bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd6:	a1 05       	cpc	r26, r1
    2bd8:	b1 05       	cpc	r27, r1
    2bda:	98 f4       	brcc	.+38     	; 0x2c02 <delayUS+0x94>
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	3b e0       	ldi	r19, 0x0B	; 11
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	9a 81       	ldd	r25, Y+2	; 0x02
    2be4:	ab 81       	ldd	r26, Y+3	; 0x03
    2be6:	bc 81       	ldd	r27, Y+4	; 0x04
    2be8:	b6 95       	lsr	r27
    2bea:	a7 95       	ror	r26
    2bec:	97 95       	ror	r25
    2bee:	87 95       	ror	r24
    2bf0:	f9 01       	movw	r30, r18
    2bf2:	86 a3       	std	Z+38, r24	; 0x26
    2bf4:	97 a3       	std	Z+39, r25	; 0x27
    2bf6:	65 e0       	ldi	r22, 0x05	; 5
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	9b e0       	ldi	r25, 0x0B	; 11
    2bfc:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2c00:	1f c0       	rjmp	.+62     	; 0x2c40 <delayUS+0xd2>
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	9a 81       	ldd	r25, Y+2	; 0x02
    2c06:	ab 81       	ldd	r26, Y+3	; 0x03
    2c08:	bc 81       	ldd	r27, Y+4	; 0x04
    2c0a:	80 34       	cpi	r24, 0x40	; 64
    2c0c:	92 44       	sbci	r25, 0x42	; 66
    2c0e:	af 40       	sbci	r26, 0x0F	; 15
    2c10:	b1 05       	cpc	r27, r1
    2c12:	b0 f4       	brcc	.+44     	; 0x2c40 <delayUS+0xd2>
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3b e0       	ldi	r19, 0x0B	; 11
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c1e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c20:	68 94       	set
    2c22:	14 f8       	bld	r1, 4
    2c24:	b6 95       	lsr	r27
    2c26:	a7 95       	ror	r26
    2c28:	97 95       	ror	r25
    2c2a:	87 95       	ror	r24
    2c2c:	16 94       	lsr	r1
    2c2e:	d1 f7       	brne	.-12     	; 0x2c24 <delayUS+0xb6>
    2c30:	f9 01       	movw	r30, r18
    2c32:	86 a3       	std	Z+38, r24	; 0x26
    2c34:	97 a3       	std	Z+39, r25	; 0x27
    2c36:	67 e0       	ldi	r22, 0x07	; 7
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	9b e0       	ldi	r25, 0x0B	; 11
    2c3c:	0e 94 4a 03 	call	0x694	; 0x694 <TC0_ConfigClockSource>
    2c40:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egDisplayTiming>
    2c44:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egDisplayTiming+0x1>
    2c48:	0f 2e       	mov	r0, r31
    2c4a:	f4 ef       	ldi	r31, 0xF4	; 244
    2c4c:	cf 2e       	mov	r12, r31
    2c4e:	dd 24       	eor	r13, r13
    2c50:	d3 94       	inc	r13
    2c52:	e1 2c       	mov	r14, r1
    2c54:	f1 2c       	mov	r15, r1
    2c56:	f0 2d       	mov	r31, r0
    2c58:	00 e0       	ldi	r16, 0x00	; 0
    2c5a:	21 e0       	ldi	r18, 0x01	; 1
    2c5c:	41 e0       	ldi	r20, 0x01	; 1
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	70 e0       	ldi	r23, 0x00	; 0
    2c64:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <xEventGroupWaitBits>
    2c68:	00 00       	nop
    2c6a:	24 96       	adiw	r28, 0x04	; 4
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	0f 91       	pop	r16
    2c76:	ff 90       	pop	r15
    2c78:	ef 90       	pop	r14
    2c7a:	df 90       	pop	r13
    2c7c:	cf 90       	pop	r12
    2c7e:	08 95       	ret

00002c80 <setPort>:
    2c80:	cf 93       	push	r28
    2c82:	df 93       	push	r29
    2c84:	1f 92       	push	r1
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	8f 70       	andi	r24, 0x0F	; 15
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	82 95       	swap	r24
    2c96:	80 7f       	andi	r24, 0xF0	; 240
    2c98:	89 83       	std	Y+1, r24	; 0x01
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	96 e0       	ldi	r25, 0x06	; 6
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	36 e0       	ldi	r19, 0x06	; 6
    2ca2:	f9 01       	movw	r30, r18
    2ca4:	34 81       	ldd	r19, Z+4	; 0x04
    2ca6:	29 81       	ldd	r18, Y+1	; 0x01
    2ca8:	2f 60       	ori	r18, 0x0F	; 15
    2caa:	23 23       	and	r18, r19
    2cac:	fc 01       	movw	r30, r24
    2cae:	24 83       	std	Z+4, r18	; 0x04
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	96 e0       	ldi	r25, 0x06	; 6
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	36 e0       	ldi	r19, 0x06	; 6
    2cb8:	f9 01       	movw	r30, r18
    2cba:	34 81       	ldd	r19, Z+4	; 0x04
    2cbc:	29 81       	ldd	r18, Y+1	; 0x01
    2cbe:	23 2b       	or	r18, r19
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	24 83       	std	Z+4, r18	; 0x04
    2cc4:	00 00       	nop
    2cc6:	0f 90       	pop	r0
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	08 95       	ret

00002cce <setRS>:
    2cce:	cf 93       	push	r28
    2cd0:	df 93       	push	r29
    2cd2:	1f 92       	push	r1
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
    2cd8:	89 83       	std	Y+1, r24	; 0x01
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	88 23       	and	r24, r24
    2cde:	31 f0       	breq	.+12     	; 0x2cec <setRS+0x1e>
    2ce0:	80 e6       	ldi	r24, 0x60	; 96
    2ce2:	96 e0       	ldi	r25, 0x06	; 6
    2ce4:	21 e0       	ldi	r18, 0x01	; 1
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	25 83       	std	Z+5, r18	; 0x05
    2cea:	05 c0       	rjmp	.+10     	; 0x2cf6 <setRS+0x28>
    2cec:	80 e6       	ldi	r24, 0x60	; 96
    2cee:	96 e0       	ldi	r25, 0x06	; 6
    2cf0:	21 e0       	ldi	r18, 0x01	; 1
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	26 83       	std	Z+6, r18	; 0x06
    2cf6:	00 00       	nop
    2cf8:	0f 90       	pop	r0
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	08 95       	ret

00002d00 <setRW>:
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29
    2d04:	1f 92       	push	r1
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	88 23       	and	r24, r24
    2d10:	31 f0       	breq	.+12     	; 0x2d1e <setRW+0x1e>
    2d12:	80 e6       	ldi	r24, 0x60	; 96
    2d14:	96 e0       	ldi	r25, 0x06	; 6
    2d16:	22 e0       	ldi	r18, 0x02	; 2
    2d18:	fc 01       	movw	r30, r24
    2d1a:	25 83       	std	Z+5, r18	; 0x05
    2d1c:	05 c0       	rjmp	.+10     	; 0x2d28 <setRW+0x28>
    2d1e:	80 e6       	ldi	r24, 0x60	; 96
    2d20:	96 e0       	ldi	r25, 0x06	; 6
    2d22:	22 e0       	ldi	r18, 0x02	; 2
    2d24:	fc 01       	movw	r30, r24
    2d26:	26 83       	std	Z+6, r18	; 0x06
    2d28:	00 00       	nop
    2d2a:	0f 90       	pop	r0
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	08 95       	ret

00002d32 <setE>:
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	1f 92       	push	r1
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	89 83       	std	Y+1, r24	; 0x01
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	88 23       	and	r24, r24
    2d42:	31 f0       	breq	.+12     	; 0x2d50 <setE+0x1e>
    2d44:	80 e6       	ldi	r24, 0x60	; 96
    2d46:	96 e0       	ldi	r25, 0x06	; 6
    2d48:	24 e0       	ldi	r18, 0x04	; 4
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	25 83       	std	Z+5, r18	; 0x05
    2d4e:	05 c0       	rjmp	.+10     	; 0x2d5a <setE+0x28>
    2d50:	80 e6       	ldi	r24, 0x60	; 96
    2d52:	96 e0       	ldi	r25, 0x06	; 6
    2d54:	24 e0       	ldi	r18, 0x04	; 4
    2d56:	fc 01       	movw	r30, r24
    2d58:	26 83       	std	Z+6, r18	; 0x06
    2d5a:	00 00       	nop
    2d5c:	0f 90       	pop	r0
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	08 95       	ret

00002d64 <Nybble>:
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <setE>
    2d72:	61 e0       	ldi	r22, 0x01	; 1
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <delayUS>
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	0e 94 99 16 	call	0x2d32	; 0x2d32 <setE>
    2d84:	00 00       	nop
    2d86:	df 91       	pop	r29
    2d88:	cf 91       	pop	r28
    2d8a:	08 95       	ret

00002d8c <command>:
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	1f 92       	push	r1
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	89 83       	std	Y+1, r24	; 0x01
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	82 95       	swap	r24
    2d9c:	8f 70       	andi	r24, 0x0F	; 15
    2d9e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setPort>
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	0e 94 67 16 	call	0x2cce	; 0x2cce <setRS>
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	0e 94 80 16 	call	0x2d00	; 0x2d00 <setRW>
    2dae:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <Nybble>
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	8f 70       	andi	r24, 0x0F	; 15
    2db6:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setPort>
    2dba:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <Nybble>
    2dbe:	00 00       	nop
    2dc0:	0f 90       	pop	r0
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	08 95       	ret

00002dc8 <write>:
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	1f 92       	push	r1
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	89 83       	std	Y+1, r24	; 0x01
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	82 95       	swap	r24
    2dd8:	8f 70       	andi	r24, 0x0F	; 15
    2dda:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setPort>
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	0e 94 67 16 	call	0x2cce	; 0x2cce <setRS>
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	0e 94 80 16 	call	0x2d00	; 0x2d00 <setRW>
    2dea:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <Nybble>
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	8f 70       	andi	r24, 0x0F	; 15
    2df2:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setPort>
    2df6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <Nybble>
    2dfa:	00 00       	nop
    2dfc:	0f 90       	pop	r0
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	08 95       	ret

00002e04 <vInitDisplay>:
 
 void vInitDisplay() {
    2e04:	ef 92       	push	r14
    2e06:	ff 92       	push	r15
    2e08:	0f 93       	push	r16
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	96 e0       	ldi	r25, 0x06	; 6
    2e16:	20 e1       	ldi	r18, 0x10	; 16
    2e18:	fc 01       	movw	r30, r24
    2e1a:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	96 e0       	ldi	r25, 0x06	; 6
    2e20:	20 e2       	ldi	r18, 0x20	; 32
    2e22:	fc 01       	movw	r30, r24
    2e24:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	96 e0       	ldi	r25, 0x06	; 6
    2e2a:	20 e4       	ldi	r18, 0x40	; 64
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	96 e0       	ldi	r25, 0x06	; 6
    2e34:	20 e8       	ldi	r18, 0x80	; 128
    2e36:	fc 01       	movw	r30, r24
    2e38:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    2e3a:	80 e6       	ldi	r24, 0x60	; 96
    2e3c:	96 e0       	ldi	r25, 0x06	; 6
    2e3e:	21 e0       	ldi	r18, 0x01	; 1
    2e40:	fc 01       	movw	r30, r24
    2e42:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    2e44:	80 e6       	ldi	r24, 0x60	; 96
    2e46:	96 e0       	ldi	r25, 0x06	; 6
    2e48:	22 e0       	ldi	r18, 0x02	; 2
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    2e4e:	80 e6       	ldi	r24, 0x60	; 96
    2e50:	96 e0       	ldi	r25, 0x06	; 6
    2e52:	24 e0       	ldi	r18, 0x04	; 4
    2e54:	fc 01       	movw	r30, r24
    2e56:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	96 e0       	ldi	r25, 0x06	; 6
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	36 e0       	ldi	r19, 0x06	; 6
    2e60:	f9 01       	movw	r30, r18
    2e62:	24 81       	ldd	r18, Z+4	; 0x04
    2e64:	2f 70       	andi	r18, 0x0F	; 15
    2e66:	fc 01       	movw	r30, r24
    2e68:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    2e6a:	80 e6       	ldi	r24, 0x60	; 96
    2e6c:	96 e0       	ldi	r25, 0x06	; 6
    2e6e:	20 e6       	ldi	r18, 0x60	; 96
    2e70:	36 e0       	ldi	r19, 0x06	; 6
    2e72:	f9 01       	movw	r30, r18
    2e74:	24 81       	ldd	r18, Z+4	; 0x04
    2e76:	28 7f       	andi	r18, 0xF8	; 248
    2e78:	fc 01       	movw	r30, r24
    2e7a:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    2e7c:	40 e0       	ldi	r20, 0x00	; 0
    2e7e:	66 e1       	ldi	r22, 0x16	; 22
    2e80:	88 e0       	ldi	r24, 0x08	; 8
    2e82:	0e 94 8d 08 	call	0x111a	; 0x111a <xQueueGenericCreate>
    2e86:	80 93 eb 2c 	sts	0x2CEB, r24	; 0x802ceb <displayLineQueue>
    2e8a:	90 93 ec 2c 	sts	0x2CEC, r25	; 0x802cec <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    2e8e:	0e 94 66 03 	call	0x6cc	; 0x6cc <xEventGroupCreate>
    2e92:	80 93 ed 2c 	sts	0x2CED, r24	; 0x802ced <egDisplayTiming>
    2e96:	90 93 ee 2c 	sts	0x2CEE, r25	; 0x802cee <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);	//von Hand auf Prio 2 gestellt
    2e9a:	e1 2c       	mov	r14, r1
    2e9c:	f1 2c       	mov	r15, r1
    2e9e:	02 e0       	ldi	r16, 0x02	; 2
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	4e e5       	ldi	r20, 0x5E	; 94
    2ea6:	51 e0       	ldi	r21, 0x01	; 1
    2ea8:	62 e4       	ldi	r22, 0x42	; 66
    2eaa:	70 e2       	ldi	r23, 0x20	; 32
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	98 e1       	ldi	r25, 0x18	; 24
    2eb0:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
 }
    2eb4:	00 00       	nop
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	0f 91       	pop	r16
    2ebc:	ff 90       	pop	r15
    2ebe:	ef 90       	pop	r14
    2ec0:	08 95       	ret

00002ec2 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    2ec2:	cf 93       	push	r28
    2ec4:	df 93       	push	r29
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <_displaySetPos+0x6>
    2ec8:	1f 92       	push	r1
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	6b 83       	std	Y+3, r22	; 0x03
    2ed4:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eda:	81 30       	cpi	r24, 0x01	; 1
    2edc:	91 05       	cpc	r25, r1
    2ede:	89 f0       	breq	.+34     	; 0x2f02 <_displaySetPos+0x40>
    2ee0:	82 30       	cpi	r24, 0x02	; 2
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	1c f4       	brge	.+6      	; 0x2eec <_displaySetPos+0x2a>
    2ee6:	89 2b       	or	r24, r25
    2ee8:	39 f0       	breq	.+14     	; 0x2ef8 <_displaySetPos+0x36>
    2eea:	1a c0       	rjmp	.+52     	; 0x2f20 <_displaySetPos+0x5e>
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	91 05       	cpc	r25, r1
    2ef0:	69 f0       	breq	.+26     	; 0x2f0c <_displaySetPos+0x4a>
    2ef2:	03 97       	sbiw	r24, 0x03	; 3
    2ef4:	81 f0       	breq	.+32     	; 0x2f16 <_displaySetPos+0x54>
    2ef6:	14 c0       	rjmp	.+40     	; 0x2f20 <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	80 58       	subi	r24, 0x80	; 128
    2efc:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <command>
		 break;
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    2f02:	8b 81       	ldd	r24, Y+3	; 0x03
    2f04:	80 54       	subi	r24, 0x40	; 64
    2f06:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <command>
		 break;
    2f0a:	0a c0       	rjmp	.+20     	; 0x2f20 <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	8c 56       	subi	r24, 0x6C	; 108
    2f10:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <command>
		 break;
    2f14:	05 c0       	rjmp	.+10     	; 0x2f20 <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	8c 52       	subi	r24, 0x2C	; 44
    2f1a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <command>
		 break;
    2f1e:	00 00       	nop
	 }
	 delayUS(39);
    2f20:	67 e2       	ldi	r22, 0x27	; 39
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <delayUS>
 }
    2f2c:	00 00       	nop
    2f2e:	24 96       	adiw	r28, 0x04	; 4
    2f30:	cd bf       	out	0x3d, r28	; 61
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	08 95       	ret

00002f3a <_displayWriteChar>:

 void _displayWriteChar(char c) {
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	1f 92       	push	r1
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <write>
	 delayUS(43);
    2f4c:	6b e2       	ldi	r22, 0x2B	; 43
    2f4e:	70 e0       	ldi	r23, 0x00	; 0
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <delayUS>
 }
    2f58:	00 00       	nop
    2f5a:	0f 90       	pop	r0
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	08 95       	ret

00002f62 <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <_displayWriteString+0x6>
    2f68:	1f 92       	push	r1
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	8b 83       	std	Y+3, r24	; 0x03
    2f70:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    2f72:	19 82       	std	Y+1, r1	; 0x01
    2f74:	1a 82       	std	Y+2, r1	; 0x02
    2f76:	19 c0       	rjmp	.+50     	; 0x2faa <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f7e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f80:	82 0f       	add	r24, r18
    2f82:	93 1f       	adc	r25, r19
    2f84:	fc 01       	movw	r30, r24
    2f86:	80 81       	ld	r24, Z
    2f88:	88 23       	and	r24, r24
    2f8a:	a1 f0       	breq	.+40     	; 0x2fb4 <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f90:	2b 81       	ldd	r18, Y+3	; 0x03
    2f92:	3c 81       	ldd	r19, Y+4	; 0x04
    2f94:	82 0f       	add	r24, r18
    2f96:	93 1f       	adc	r25, r19
    2f98:	fc 01       	movw	r30, r24
    2f9a:	80 81       	ld	r24, Z
    2f9c:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa4:	01 96       	adiw	r24, 0x01	; 1
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	9a 83       	std	Y+2, r25	; 0x02
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	9a 81       	ldd	r25, Y+2	; 0x02
    2fae:	44 97       	sbiw	r24, 0x14	; 20
    2fb0:	1c f3       	brlt	.-58     	; 0x2f78 <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    2fb2:	01 c0       	rjmp	.+2      	; 0x2fb6 <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    2fb4:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    2fb6:	00 00       	nop
    2fb8:	24 96       	adiw	r28, 0x04	; 4
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	08 95       	ret

00002fc4 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <_displayWriteStringAtPos+0x6>
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <_displayWriteStringAtPos+0x8>
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	89 83       	std	Y+1, r24	; 0x01
    2fd2:	9a 83       	std	Y+2, r25	; 0x02
    2fd4:	6b 83       	std	Y+3, r22	; 0x03
    2fd6:	7c 83       	std	Y+4, r23	; 0x04
    2fd8:	4d 83       	std	Y+5, r20	; 0x05
    2fda:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    2fdc:	2b 81       	ldd	r18, Y+3	; 0x03
    2fde:	3c 81       	ldd	r19, Y+4	; 0x04
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe4:	b9 01       	movw	r22, r18
    2fe6:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <_displaySetPos>
	 _displayWriteString(s);
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <_displayWriteString>
 }
    2ff2:	00 00       	nop
    2ff4:	26 96       	adiw	r28, 0x06	; 6
    2ff6:	cd bf       	out	0x3d, r28	; 61
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	df 91       	pop	r29
    2ffc:	cf 91       	pop	r28
    2ffe:	08 95       	ret

00003000 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	c0 57       	subi	r28, 0x70	; 112
    300a:	d1 09       	sbc	r29, r1
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	9e 01       	movw	r18, r28
    3012:	21 59       	subi	r18, 0x91	; 145
    3014:	3f 4f       	sbci	r19, 0xFF	; 255
    3016:	f9 01       	movw	r30, r18
    3018:	80 83       	st	Z, r24
    301a:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    301c:	19 82       	std	Y+1, r1	; 0x01
    301e:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    3020:	1b 82       	std	Y+3, r1	; 0x03
    3022:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    3024:	1d 82       	std	Y+5, r1	; 0x05
    3026:	1e 82       	std	Y+6, r1	; 0x06
    3028:	26 c0       	rjmp	.+76     	; 0x3076 <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    302a:	1f 82       	std	Y+7, r1	; 0x07
    302c:	18 86       	std	Y+8, r1	; 0x08
    302e:	1a c0       	rjmp	.+52     	; 0x3064 <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    3030:	2d 81       	ldd	r18, Y+5	; 0x05
    3032:	3e 81       	ldd	r19, Y+6	; 0x06
    3034:	44 e1       	ldi	r20, 0x14	; 20
    3036:	42 9f       	mul	r20, r18
    3038:	c0 01       	movw	r24, r0
    303a:	43 9f       	mul	r20, r19
    303c:	90 0d       	add	r25, r0
    303e:	11 24       	eor	r1, r1
    3040:	9e 01       	movw	r18, r28
    3042:	2f 5f       	subi	r18, 0xFF	; 255
    3044:	3f 4f       	sbci	r19, 0xFF	; 255
    3046:	28 0f       	add	r18, r24
    3048:	39 1f       	adc	r19, r25
    304a:	8f 81       	ldd	r24, Y+7	; 0x07
    304c:	98 85       	ldd	r25, Y+8	; 0x08
    304e:	82 0f       	add	r24, r18
    3050:	93 1f       	adc	r25, r19
    3052:	08 96       	adiw	r24, 0x08	; 8
    3054:	20 e2       	ldi	r18, 0x20	; 32
    3056:	fc 01       	movw	r30, r24
    3058:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    305a:	8f 81       	ldd	r24, Y+7	; 0x07
    305c:	98 85       	ldd	r25, Y+8	; 0x08
    305e:	01 96       	adiw	r24, 0x01	; 1
    3060:	8f 83       	std	Y+7, r24	; 0x07
    3062:	98 87       	std	Y+8, r25	; 0x08
    3064:	8f 81       	ldd	r24, Y+7	; 0x07
    3066:	98 85       	ldd	r25, Y+8	; 0x08
    3068:	44 97       	sbiw	r24, 0x14	; 20
    306a:	14 f3       	brlt	.-60     	; 0x3030 <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    306c:	8d 81       	ldd	r24, Y+5	; 0x05
    306e:	9e 81       	ldd	r25, Y+6	; 0x06
    3070:	01 96       	adiw	r24, 0x01	; 1
    3072:	8d 83       	std	Y+5, r24	; 0x05
    3074:	9e 83       	std	Y+6, r25	; 0x06
    3076:	8d 81       	ldd	r24, Y+5	; 0x05
    3078:	9e 81       	ldd	r25, Y+6	; 0x06
    307a:	04 97       	sbiw	r24, 0x04	; 4
    307c:	b4 f2       	brlt	.-84     	; 0x302a <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    307e:	60 e4       	ldi	r22, 0x40	; 64
    3080:	7c e9       	ldi	r23, 0x9C	; 156
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <delayUS>
	 setPort(0x03);
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setPort>
	 delayUS(5000);
    3090:	68 e8       	ldi	r22, 0x88	; 136
    3092:	73 e1       	ldi	r23, 0x13	; 19
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <delayUS>
	 Nybble();
    309c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <Nybble>
	 delayUS(160);
    30a0:	60 ea       	ldi	r22, 0xA0	; 160
    30a2:	70 e0       	ldi	r23, 0x00	; 0
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <delayUS>
	 Nybble();
    30ac:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <Nybble>
	 delayUS(160);
    30b0:	60 ea       	ldi	r22, 0xA0	; 160
    30b2:	70 e0       	ldi	r23, 0x00	; 0
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <delayUS>
	 Nybble();
    30bc:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <Nybble>
	 delayUS(160);
    30c0:	60 ea       	ldi	r22, 0xA0	; 160
    30c2:	70 e0       	ldi	r23, 0x00	; 0
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <delayUS>
	 setPort(0x02);
    30cc:	82 e0       	ldi	r24, 0x02	; 2
    30ce:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setPort>
	 Nybble();
    30d2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <Nybble>
	 command(0x28);
    30d6:	88 e2       	ldi	r24, 0x28	; 40
    30d8:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <command>
	 command(0x10);
    30dc:	80 e1       	ldi	r24, 0x10	; 16
    30de:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <command>
	 command(0x0C); //Cursor and Blinking off
    30e2:	8c e0       	ldi	r24, 0x0C	; 12
    30e4:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <command>
	 command(0x06);
    30e8:	86 e0       	ldi	r24, 0x06	; 6
    30ea:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    30ee:	68 ec       	ldi	r22, 0xC8	; 200
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    30fa:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egDisplayTiming>
    30fe:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egDisplayTiming+0x1>
    3102:	40 e0       	ldi	r20, 0x00	; 0
    3104:	50 e0       	ldi	r21, 0x00	; 0
    3106:	ba 01       	movw	r22, r20
    3108:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	89 2b       	or	r24, r25
    3112:	8a 2b       	or	r24, r26
    3114:	8b 2b       	or	r24, r27
    3116:	09 f4       	brne	.+2      	; 0x311a <vDisplayUpdateTask+0x11a>
    3118:	96 c0       	rjmp	.+300    	; 0x3246 <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    311a:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egDisplayTiming>
    311e:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egDisplayTiming+0x1>
    3122:	42 e0       	ldi	r20, 0x02	; 2
    3124:	50 e0       	ldi	r21, 0x00	; 0
    3126:	60 e0       	ldi	r22, 0x00	; 0
    3128:	70 e0       	ldi	r23, 0x00	; 0
    312a:	0e 94 40 04 	call	0x880	; 0x880 <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    312e:	19 82       	std	Y+1, r1	; 0x01
    3130:	1a 82       	std	Y+2, r1	; 0x02
    3132:	26 c0       	rjmp	.+76     	; 0x3180 <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    3134:	1b 82       	std	Y+3, r1	; 0x03
    3136:	1c 82       	std	Y+4, r1	; 0x04
    3138:	1a c0       	rjmp	.+52     	; 0x316e <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    313a:	29 81       	ldd	r18, Y+1	; 0x01
    313c:	3a 81       	ldd	r19, Y+2	; 0x02
    313e:	44 e1       	ldi	r20, 0x14	; 20
    3140:	42 9f       	mul	r20, r18
    3142:	c0 01       	movw	r24, r0
    3144:	43 9f       	mul	r20, r19
    3146:	90 0d       	add	r25, r0
    3148:	11 24       	eor	r1, r1
    314a:	9e 01       	movw	r18, r28
    314c:	2f 5f       	subi	r18, 0xFF	; 255
    314e:	3f 4f       	sbci	r19, 0xFF	; 255
    3150:	28 0f       	add	r18, r24
    3152:	39 1f       	adc	r19, r25
    3154:	8b 81       	ldd	r24, Y+3	; 0x03
    3156:	9c 81       	ldd	r25, Y+4	; 0x04
    3158:	82 0f       	add	r24, r18
    315a:	93 1f       	adc	r25, r19
    315c:	08 96       	adiw	r24, 0x08	; 8
    315e:	20 e2       	ldi	r18, 0x20	; 32
    3160:	fc 01       	movw	r30, r24
    3162:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    3164:	8b 81       	ldd	r24, Y+3	; 0x03
    3166:	9c 81       	ldd	r25, Y+4	; 0x04
    3168:	01 96       	adiw	r24, 0x01	; 1
    316a:	8b 83       	std	Y+3, r24	; 0x03
    316c:	9c 83       	std	Y+4, r25	; 0x04
    316e:	8b 81       	ldd	r24, Y+3	; 0x03
    3170:	9c 81       	ldd	r25, Y+4	; 0x04
    3172:	44 97       	sbiw	r24, 0x14	; 20
    3174:	14 f3       	brlt	.-60     	; 0x313a <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	9a 81       	ldd	r25, Y+2	; 0x02
    317a:	01 96       	adiw	r24, 0x01	; 1
    317c:	89 83       	std	Y+1, r24	; 0x01
    317e:	9a 83       	std	Y+2, r25	; 0x02
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	9a 81       	ldd	r25, Y+2	; 0x02
    3184:	04 97       	sbiw	r24, 0x04	; 4
    3186:	b4 f2       	brlt	.-84     	; 0x3134 <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    3188:	5e c0       	rjmp	.+188    	; 0x3246 <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    318a:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <displayLineQueue>
    318e:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <displayLineQueue+0x1>
    3192:	be 01       	movw	r22, r28
    3194:	67 5a       	subi	r22, 0xA7	; 167
    3196:	7f 4f       	sbci	r23, 0xFF	; 255
    3198:	2f ef       	ldi	r18, 0xFF	; 255
    319a:	3f ef       	ldi	r19, 0xFF	; 255
    319c:	a9 01       	movw	r20, r18
    319e:	0e 94 a9 09 	call	0x1352	; 0x1352 <xQueueReceive>
    31a2:	88 23       	and	r24, r24
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <vDisplayUpdateTask+0x1a8>
    31a6:	4f c0       	rjmp	.+158    	; 0x3246 <vDisplayUpdateTask+0x246>
				i=0;			
    31a8:	19 82       	std	Y+1, r1	; 0x01
    31aa:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    31ac:	32 c0       	rjmp	.+100    	; 0x3212 <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    31ae:	ce 01       	movw	r24, r28
    31b0:	87 5a       	subi	r24, 0xA7	; 167
    31b2:	9f 4f       	sbci	r25, 0xFF	; 255
    31b4:	fc 01       	movw	r30, r24
    31b6:	80 81       	ld	r24, Z
    31b8:	48 2f       	mov	r20, r24
    31ba:	50 e0       	ldi	r21, 0x00	; 0
    31bc:	ce 01       	movw	r24, r28
    31be:	87 5a       	subi	r24, 0xA7	; 167
    31c0:	9f 4f       	sbci	r25, 0xFF	; 255
    31c2:	fc 01       	movw	r30, r24
    31c4:	81 81       	ldd	r24, Z+1	; 0x01
    31c6:	28 2f       	mov	r18, r24
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	9a 81       	ldd	r25, Y+2	; 0x02
    31ce:	82 0f       	add	r24, r18
    31d0:	93 1f       	adc	r25, r19
    31d2:	be 01       	movw	r22, r28
    31d4:	67 5a       	subi	r22, 0xA7	; 167
    31d6:	7f 4f       	sbci	r23, 0xFF	; 255
    31d8:	29 81       	ldd	r18, Y+1	; 0x01
    31da:	3a 81       	ldd	r19, Y+2	; 0x02
    31dc:	26 0f       	add	r18, r22
    31de:	37 1f       	adc	r19, r23
    31e0:	2e 5f       	subi	r18, 0xFE	; 254
    31e2:	3f 4f       	sbci	r19, 0xFF	; 255
    31e4:	f9 01       	movw	r30, r18
    31e6:	60 81       	ld	r22, Z
    31e8:	74 e1       	ldi	r23, 0x14	; 20
    31ea:	74 9f       	mul	r23, r20
    31ec:	90 01       	movw	r18, r0
    31ee:	75 9f       	mul	r23, r21
    31f0:	30 0d       	add	r19, r0
    31f2:	11 24       	eor	r1, r1
    31f4:	ae 01       	movw	r20, r28
    31f6:	4f 5f       	subi	r20, 0xFF	; 255
    31f8:	5f 4f       	sbci	r21, 0xFF	; 255
    31fa:	24 0f       	add	r18, r20
    31fc:	35 1f       	adc	r19, r21
    31fe:	82 0f       	add	r24, r18
    3200:	93 1f       	adc	r25, r19
    3202:	08 96       	adiw	r24, 0x08	; 8
    3204:	fc 01       	movw	r30, r24
    3206:	60 83       	st	Z, r22
					i++;
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	9a 81       	ldd	r25, Y+2	; 0x02
    320c:	01 96       	adiw	r24, 0x01	; 1
    320e:	89 83       	std	Y+1, r24	; 0x01
    3210:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    3212:	ce 01       	movw	r24, r28
    3214:	87 5a       	subi	r24, 0xA7	; 167
    3216:	9f 4f       	sbci	r25, 0xFF	; 255
    3218:	fc 01       	movw	r30, r24
    321a:	81 81       	ldd	r24, Z+1	; 0x01
    321c:	28 2f       	mov	r18, r24
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	9a 81       	ldd	r25, Y+2	; 0x02
    3224:	82 0f       	add	r24, r18
    3226:	93 1f       	adc	r25, r19
    3228:	44 97       	sbiw	r24, 0x14	; 20
    322a:	6c f4       	brge	.+26     	; 0x3246 <vDisplayUpdateTask+0x246>
    322c:	9e 01       	movw	r18, r28
    322e:	27 5a       	subi	r18, 0xA7	; 167
    3230:	3f 4f       	sbci	r19, 0xFF	; 255
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	9a 81       	ldd	r25, Y+2	; 0x02
    3236:	82 0f       	add	r24, r18
    3238:	93 1f       	adc	r25, r19
    323a:	02 96       	adiw	r24, 0x02	; 2
    323c:	fc 01       	movw	r30, r24
    323e:	80 81       	ld	r24, Z
    3240:	88 23       	and	r24, r24
    3242:	09 f0       	breq	.+2      	; 0x3246 <vDisplayUpdateTask+0x246>
    3244:	b4 cf       	rjmp	.-152    	; 0x31ae <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    3246:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <displayLineQueue>
    324a:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <displayLineQueue+0x1>
    324e:	0e 94 4f 0a 	call	0x149e	; 0x149e <uxQueueMessagesWaiting>
    3252:	88 23       	and	r24, r24
    3254:	09 f0       	breq	.+2      	; 0x3258 <vDisplayUpdateTask+0x258>
    3256:	99 cf       	rjmp	.-206    	; 0x318a <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    3258:	19 82       	std	Y+1, r1	; 0x01
    325a:	1a 82       	std	Y+2, r1	; 0x02
    325c:	19 c0       	rjmp	.+50     	; 0x3290 <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    325e:	9e 01       	movw	r18, r28
    3260:	27 5f       	subi	r18, 0xF7	; 247
    3262:	3f 4f       	sbci	r19, 0xFF	; 255
    3264:	49 81       	ldd	r20, Y+1	; 0x01
    3266:	5a 81       	ldd	r21, Y+2	; 0x02
    3268:	64 e1       	ldi	r22, 0x14	; 20
    326a:	64 9f       	mul	r22, r20
    326c:	c0 01       	movw	r24, r0
    326e:	65 9f       	mul	r22, r21
    3270:	90 0d       	add	r25, r0
    3272:	11 24       	eor	r1, r1
    3274:	28 0f       	add	r18, r24
    3276:	39 1f       	adc	r19, r25
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	a9 01       	movw	r20, r18
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	9a 81       	ldd	r25, Y+2	; 0x02
    328a:	01 96       	adiw	r24, 0x01	; 1
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	9a 83       	std	Y+2, r25	; 0x02
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	9a 81       	ldd	r25, Y+2	; 0x02
    3294:	04 97       	sbiw	r24, 0x04	; 4
    3296:	1c f3       	brlt	.-58     	; 0x325e <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    3298:	2a cf       	rjmp	.-428    	; 0x30ee <vDisplayUpdateTask+0xee>

0000329a <vDisplayClear>:
 }
 

void vDisplayClear() {
    329a:	cf 93       	push	r28
    329c:	df 93       	push	r29
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    32a2:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egDisplayTiming>
    32a6:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egDisplayTiming+0x1>
    32aa:	42 e0       	ldi	r20, 0x02	; 2
    32ac:	50 e0       	ldi	r21, 0x00	; 0
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xEventGroupSetBits>
}
    32b6:	00 00       	nop
    32b8:	df 91       	pop	r29
    32ba:	cf 91       	pop	r28
    32bc:	08 95       	ret

000032be <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    32be:	cf 93       	push	r28
    32c0:	df 93       	push	r29
    32c2:	1f 92       	push	r1
    32c4:	1f 92       	push	r1
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    32ca:	ce 01       	movw	r24, r28
    32cc:	0e 96       	adiw	r24, 0x0e	; 14
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    32d2:	29 81       	ldd	r18, Y+1	; 0x01
    32d4:	3a 81       	ldd	r19, Y+2	; 0x02
    32d6:	4c 85       	ldd	r20, Y+12	; 0x0c
    32d8:	5d 85       	ldd	r21, Y+13	; 0x0d
    32da:	6a 85       	ldd	r22, Y+10	; 0x0a
    32dc:	7b 85       	ldd	r23, Y+11	; 0x0b
    32de:	88 85       	ldd	r24, Y+8	; 0x08
    32e0:	99 85       	ldd	r25, Y+9	; 0x09
    32e2:	0e 94 79 19 	call	0x32f2	; 0x32f2 <display_vprintf>
	va_end(arg);	
}
    32e6:	00 00       	nop
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	08 95       	ret

000032f2 <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    32f2:	0f 93       	push	r16
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	ec 97       	sbiw	r28, 0x3c	; 60
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	de bf       	out	0x3e, r29	; 62
    3302:	8d ab       	std	Y+53, r24	; 0x35
    3304:	9e ab       	std	Y+54, r25	; 0x36
    3306:	6f ab       	std	Y+55, r22	; 0x37
    3308:	78 af       	std	Y+56, r23	; 0x38
    330a:	49 af       	std	Y+57, r20	; 0x39
    330c:	5a af       	std	Y+58, r21	; 0x3a
    330e:	2b af       	std	Y+59, r18	; 0x3b
    3310:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    3312:	19 82       	std	Y+1, r1	; 0x01
    3314:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    3316:	1b 82       	std	Y+3, r1	; 0x03
    3318:	1c 82       	std	Y+4, r1	; 0x04
    331a:	0b c0       	rjmp	.+22     	; 0x3332 <display_vprintf+0x40>
		buffer[i] = 0x00;
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	9c 81       	ldd	r25, Y+4	; 0x04
    3320:	8e 54       	subi	r24, 0x4E	; 78
    3322:	93 4d       	sbci	r25, 0xD3	; 211
    3324:	fc 01       	movw	r30, r24
    3326:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    3328:	8b 81       	ldd	r24, Y+3	; 0x03
    332a:	9c 81       	ldd	r25, Y+4	; 0x04
    332c:	01 96       	adiw	r24, 0x01	; 1
    332e:	8b 83       	std	Y+3, r24	; 0x03
    3330:	9c 83       	std	Y+4, r25	; 0x04
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	9c 81       	ldd	r25, Y+4	; 0x04
    3336:	44 97       	sbiw	r24, 0x14	; 20
    3338:	8c f3       	brlt	.-30     	; 0x331c <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    333a:	1d 82       	std	Y+5, r1	; 0x05
    333c:	1e 82       	std	Y+6, r1	; 0x06
    333e:	0b c0       	rjmp	.+22     	; 0x3356 <display_vprintf+0x64>
		str[i] = 0x00;
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	9e 81       	ldd	r25, Y+6	; 0x06
    3344:	8a 53       	subi	r24, 0x3A	; 58
    3346:	93 4d       	sbci	r25, 0xD3	; 211
    3348:	fc 01       	movw	r30, r24
    334a:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	9e 81       	ldd	r25, Y+6	; 0x06
    3350:	01 96       	adiw	r24, 0x01	; 1
    3352:	8d 83       	std	Y+5, r24	; 0x05
    3354:	9e 83       	std	Y+6, r25	; 0x06
    3356:	8d 81       	ldd	r24, Y+5	; 0x05
    3358:	9e 81       	ldd	r25, Y+6	; 0x06
    335a:	44 97       	sbiw	r24, 0x14	; 20
    335c:	8c f3       	brlt	.-30     	; 0x3340 <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    335e:	be c1       	rjmp	.+892    	; 0x36dc <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    3360:	8d 89       	ldd	r24, Y+21	; 0x15
    3362:	85 32       	cpi	r24, 0x25	; 37
    3364:	09 f0       	breq	.+2      	; 0x3368 <display_vprintf+0x76>
    3366:	a0 c1       	rjmp	.+832    	; 0x36a8 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    3368:	89 ad       	ldd	r24, Y+57	; 0x39
    336a:	9a ad       	ldd	r25, Y+58	; 0x3a
    336c:	9c 01       	movw	r18, r24
    336e:	2f 5f       	subi	r18, 0xFF	; 255
    3370:	3f 4f       	sbci	r19, 0xFF	; 255
    3372:	29 af       	std	Y+57, r18	; 0x39
    3374:	3a af       	std	Y+58, r19	; 0x3a
    3376:	fc 01       	movw	r30, r24
    3378:	80 81       	ld	r24, Z
    337a:	8d 8b       	std	Y+21, r24	; 0x15
    337c:	8d 89       	ldd	r24, Y+21	; 0x15
    337e:	88 2f       	mov	r24, r24
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	85 36       	cpi	r24, 0x65	; 101
    3384:	91 05       	cpc	r25, r1
    3386:	09 f4       	brne	.+2      	; 0x338a <display_vprintf+0x98>
    3388:	46 c1       	rjmp	.+652    	; 0x3616 <display_vprintf+0x324>
    338a:	86 36       	cpi	r24, 0x66	; 102
    338c:	91 05       	cpc	r25, r1
    338e:	54 f4       	brge	.+20     	; 0x33a4 <display_vprintf+0xb2>
    3390:	83 36       	cpi	r24, 0x63	; 99
    3392:	91 05       	cpc	r25, r1
    3394:	01 f1       	breq	.+64     	; 0x33d6 <display_vprintf+0xe4>
    3396:	84 36       	cpi	r24, 0x64	; 100
    3398:	91 05       	cpc	r25, r1
    339a:	0c f0       	brlt	.+2      	; 0x339e <display_vprintf+0xac>
    339c:	70 c0       	rjmp	.+224    	; 0x347e <display_vprintf+0x18c>
    339e:	85 97       	sbiw	r24, 0x25	; 37
    33a0:	69 f0       	breq	.+26     	; 0x33bc <display_vprintf+0xca>
    33a2:	9c c1       	rjmp	.+824    	; 0x36dc <display_vprintf+0x3ea>
    33a4:	83 37       	cpi	r24, 0x73	; 115
    33a6:	91 05       	cpc	r25, r1
    33a8:	71 f1       	breq	.+92     	; 0x3406 <display_vprintf+0x114>
    33aa:	88 37       	cpi	r24, 0x78	; 120
    33ac:	91 05       	cpc	r25, r1
    33ae:	09 f4       	brne	.+2      	; 0x33b2 <display_vprintf+0xc0>
    33b0:	a8 c0       	rjmp	.+336    	; 0x3502 <display_vprintf+0x210>
    33b2:	86 36       	cpi	r24, 0x66	; 102
    33b4:	91 05       	cpc	r25, r1
    33b6:	09 f4       	brne	.+2      	; 0x33ba <display_vprintf+0xc8>
    33b8:	e6 c0       	rjmp	.+460    	; 0x3586 <display_vprintf+0x294>
    33ba:	90 c1       	rjmp	.+800    	; 0x36dc <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	9a 81       	ldd	r25, Y+2	; 0x02
    33c0:	8a 53       	subi	r24, 0x3A	; 58
    33c2:	93 4d       	sbci	r25, 0xD3	; 211
    33c4:	25 e2       	ldi	r18, 0x25	; 37
    33c6:	fc 01       	movw	r30, r24
    33c8:	20 83       	st	Z, r18
				length++;
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	9a 81       	ldd	r25, Y+2	; 0x02
    33ce:	01 96       	adiw	r24, 0x01	; 1
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	9a 83       	std	Y+2, r25	; 0x02
				break;
    33d4:	83 c1       	rjmp	.+774    	; 0x36dc <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    33d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    33d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    33da:	9c 01       	movw	r18, r24
    33dc:	2e 5f       	subi	r18, 0xFE	; 254
    33de:	3f 4f       	sbci	r19, 0xFF	; 255
    33e0:	2b af       	std	Y+59, r18	; 0x3b
    33e2:	3c af       	std	Y+60, r19	; 0x3c
    33e4:	fc 01       	movw	r30, r24
    33e6:	80 81       	ld	r24, Z
    33e8:	91 81       	ldd	r25, Z+1	; 0x01
    33ea:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	9a 81       	ldd	r25, Y+2	; 0x02
    33f0:	8a 53       	subi	r24, 0x3A	; 58
    33f2:	93 4d       	sbci	r25, 0xD3	; 211
    33f4:	2e 89       	ldd	r18, Y+22	; 0x16
    33f6:	fc 01       	movw	r30, r24
    33f8:	20 83       	st	Z, r18
				length++;
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	9a 81       	ldd	r25, Y+2	; 0x02
    33fe:	01 96       	adiw	r24, 0x01	; 1
    3400:	89 83       	std	Y+1, r24	; 0x01
    3402:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3404:	6b c1       	rjmp	.+726    	; 0x36dc <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    3406:	8b ad       	ldd	r24, Y+59	; 0x3b
    3408:	9c ad       	ldd	r25, Y+60	; 0x3c
    340a:	9c 01       	movw	r18, r24
    340c:	2e 5f       	subi	r18, 0xFE	; 254
    340e:	3f 4f       	sbci	r19, 0xFF	; 255
    3410:	2b af       	std	Y+59, r18	; 0x3b
    3412:	3c af       	std	Y+60, r19	; 0x3c
    3414:	fc 01       	movw	r30, r24
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	8f 8b       	std	Y+23, r24	; 0x17
    341c:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    341e:	1f 82       	std	Y+7, r1	; 0x07
    3420:	18 86       	std	Y+8, r1	; 0x08
    3422:	17 c0       	rjmp	.+46     	; 0x3452 <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    3424:	29 81       	ldd	r18, Y+1	; 0x01
    3426:	3a 81       	ldd	r19, Y+2	; 0x02
    3428:	8f 81       	ldd	r24, Y+7	; 0x07
    342a:	98 85       	ldd	r25, Y+8	; 0x08
    342c:	82 0f       	add	r24, r18
    342e:	93 1f       	adc	r25, r19
    3430:	2f 81       	ldd	r18, Y+7	; 0x07
    3432:	38 85       	ldd	r19, Y+8	; 0x08
    3434:	4f 89       	ldd	r20, Y+23	; 0x17
    3436:	58 8d       	ldd	r21, Y+24	; 0x18
    3438:	24 0f       	add	r18, r20
    343a:	35 1f       	adc	r19, r21
    343c:	f9 01       	movw	r30, r18
    343e:	20 81       	ld	r18, Z
    3440:	8a 53       	subi	r24, 0x3A	; 58
    3442:	93 4d       	sbci	r25, 0xD3	; 211
    3444:	fc 01       	movw	r30, r24
    3446:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    3448:	8f 81       	ldd	r24, Y+7	; 0x07
    344a:	98 85       	ldd	r25, Y+8	; 0x08
    344c:	01 96       	adiw	r24, 0x01	; 1
    344e:	8f 83       	std	Y+7, r24	; 0x07
    3450:	98 87       	std	Y+8, r25	; 0x08
    3452:	8f 89       	ldd	r24, Y+23	; 0x17
    3454:	98 8d       	ldd	r25, Y+24	; 0x18
    3456:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strlen>
    345a:	9c 01       	movw	r18, r24
    345c:	8f 81       	ldd	r24, Y+7	; 0x07
    345e:	98 85       	ldd	r25, Y+8	; 0x08
    3460:	82 17       	cp	r24, r18
    3462:	93 07       	cpc	r25, r19
    3464:	f8 f2       	brcs	.-66     	; 0x3424 <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    3466:	8f 89       	ldd	r24, Y+23	; 0x17
    3468:	98 8d       	ldd	r25, Y+24	; 0x18
    346a:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strlen>
    346e:	9c 01       	movw	r18, r24
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	9a 81       	ldd	r25, Y+2	; 0x02
    3474:	82 0f       	add	r24, r18
    3476:	93 1f       	adc	r25, r19
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	9a 83       	std	Y+2, r25	; 0x02
				break;
    347c:	2f c1       	rjmp	.+606    	; 0x36dc <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    347e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3480:	9c ad       	ldd	r25, Y+60	; 0x3c
    3482:	9c 01       	movw	r18, r24
    3484:	2e 5f       	subi	r18, 0xFE	; 254
    3486:	3f 4f       	sbci	r19, 0xFF	; 255
    3488:	2b af       	std	Y+59, r18	; 0x3b
    348a:	3c af       	std	Y+60, r19	; 0x3c
    348c:	fc 01       	movw	r30, r24
    348e:	80 81       	ld	r24, Z
    3490:	91 81       	ldd	r25, Z+1	; 0x01
    3492:	89 8f       	std	Y+25, r24	; 0x19
    3494:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    3496:	89 8d       	ldd	r24, Y+25	; 0x19
    3498:	9a 8d       	ldd	r25, Y+26	; 0x1a
    349a:	4a e0       	ldi	r20, 0x0A	; 10
    349c:	50 e0       	ldi	r21, 0x00	; 0
    349e:	62 eb       	ldi	r22, 0xB2	; 178
    34a0:	7c e2       	ldi	r23, 0x2C	; 44
    34a2:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    34a6:	19 86       	std	Y+9, r1	; 0x09
    34a8:	1a 86       	std	Y+10, r1	; 0x0a
    34aa:	15 c0       	rjmp	.+42     	; 0x34d6 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    34ac:	29 81       	ldd	r18, Y+1	; 0x01
    34ae:	3a 81       	ldd	r19, Y+2	; 0x02
    34b0:	89 85       	ldd	r24, Y+9	; 0x09
    34b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b4:	82 0f       	add	r24, r18
    34b6:	93 1f       	adc	r25, r19
    34b8:	29 85       	ldd	r18, Y+9	; 0x09
    34ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    34bc:	2e 54       	subi	r18, 0x4E	; 78
    34be:	33 4d       	sbci	r19, 0xD3	; 211
    34c0:	f9 01       	movw	r30, r18
    34c2:	20 81       	ld	r18, Z
    34c4:	8a 53       	subi	r24, 0x3A	; 58
    34c6:	93 4d       	sbci	r25, 0xD3	; 211
    34c8:	fc 01       	movw	r30, r24
    34ca:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    34cc:	89 85       	ldd	r24, Y+9	; 0x09
    34ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d0:	01 96       	adiw	r24, 0x01	; 1
    34d2:	89 87       	std	Y+9, r24	; 0x09
    34d4:	9a 87       	std	Y+10, r25	; 0x0a
    34d6:	82 eb       	ldi	r24, 0xB2	; 178
    34d8:	9c e2       	ldi	r25, 0x2C	; 44
    34da:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strlen>
    34de:	9c 01       	movw	r18, r24
    34e0:	89 85       	ldd	r24, Y+9	; 0x09
    34e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e4:	82 17       	cp	r24, r18
    34e6:	93 07       	cpc	r25, r19
    34e8:	08 f3       	brcs	.-62     	; 0x34ac <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    34ea:	82 eb       	ldi	r24, 0xB2	; 178
    34ec:	9c e2       	ldi	r25, 0x2C	; 44
    34ee:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strlen>
    34f2:	9c 01       	movw	r18, r24
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	9a 81       	ldd	r25, Y+2	; 0x02
    34f8:	82 0f       	add	r24, r18
    34fa:	93 1f       	adc	r25, r19
    34fc:	89 83       	std	Y+1, r24	; 0x01
    34fe:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3500:	ed c0       	rjmp	.+474    	; 0x36dc <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    3502:	8b ad       	ldd	r24, Y+59	; 0x3b
    3504:	9c ad       	ldd	r25, Y+60	; 0x3c
    3506:	9c 01       	movw	r18, r24
    3508:	2e 5f       	subi	r18, 0xFE	; 254
    350a:	3f 4f       	sbci	r19, 0xFF	; 255
    350c:	2b af       	std	Y+59, r18	; 0x3b
    350e:	3c af       	std	Y+60, r19	; 0x3c
    3510:	fc 01       	movw	r30, r24
    3512:	80 81       	ld	r24, Z
    3514:	91 81       	ldd	r25, Z+1	; 0x01
    3516:	89 8f       	std	Y+25, r24	; 0x19
    3518:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    351a:	89 8d       	ldd	r24, Y+25	; 0x19
    351c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    351e:	40 e1       	ldi	r20, 0x10	; 16
    3520:	50 e0       	ldi	r21, 0x00	; 0
    3522:	62 eb       	ldi	r22, 0xB2	; 178
    3524:	7c e2       	ldi	r23, 0x2C	; 44
    3526:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    352a:	1b 86       	std	Y+11, r1	; 0x0b
    352c:	1c 86       	std	Y+12, r1	; 0x0c
    352e:	15 c0       	rjmp	.+42     	; 0x355a <display_vprintf+0x268>
					str[length+i] = buffer[i];
    3530:	29 81       	ldd	r18, Y+1	; 0x01
    3532:	3a 81       	ldd	r19, Y+2	; 0x02
    3534:	8b 85       	ldd	r24, Y+11	; 0x0b
    3536:	9c 85       	ldd	r25, Y+12	; 0x0c
    3538:	82 0f       	add	r24, r18
    353a:	93 1f       	adc	r25, r19
    353c:	2b 85       	ldd	r18, Y+11	; 0x0b
    353e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3540:	2e 54       	subi	r18, 0x4E	; 78
    3542:	33 4d       	sbci	r19, 0xD3	; 211
    3544:	f9 01       	movw	r30, r18
    3546:	20 81       	ld	r18, Z
    3548:	8a 53       	subi	r24, 0x3A	; 58
    354a:	93 4d       	sbci	r25, 0xD3	; 211
    354c:	fc 01       	movw	r30, r24
    354e:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    3550:	8b 85       	ldd	r24, Y+11	; 0x0b
    3552:	9c 85       	ldd	r25, Y+12	; 0x0c
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	8b 87       	std	Y+11, r24	; 0x0b
    3558:	9c 87       	std	Y+12, r25	; 0x0c
    355a:	82 eb       	ldi	r24, 0xB2	; 178
    355c:	9c e2       	ldi	r25, 0x2C	; 44
    355e:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strlen>
    3562:	9c 01       	movw	r18, r24
    3564:	8b 85       	ldd	r24, Y+11	; 0x0b
    3566:	9c 85       	ldd	r25, Y+12	; 0x0c
    3568:	82 17       	cp	r24, r18
    356a:	93 07       	cpc	r25, r19
    356c:	08 f3       	brcs	.-62     	; 0x3530 <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    356e:	82 eb       	ldi	r24, 0xB2	; 178
    3570:	9c e2       	ldi	r25, 0x2C	; 44
    3572:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strlen>
    3576:	9c 01       	movw	r18, r24
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	9a 81       	ldd	r25, Y+2	; 0x02
    357c:	82 0f       	add	r24, r18
    357e:	93 1f       	adc	r25, r19
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3584:	ab c0       	rjmp	.+342    	; 0x36dc <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    3586:	8b ad       	ldd	r24, Y+59	; 0x3b
    3588:	9c ad       	ldd	r25, Y+60	; 0x3c
    358a:	9c 01       	movw	r18, r24
    358c:	2c 5f       	subi	r18, 0xFC	; 252
    358e:	3f 4f       	sbci	r19, 0xFF	; 255
    3590:	2b af       	std	Y+59, r18	; 0x3b
    3592:	3c af       	std	Y+60, r19	; 0x3c
    3594:	fc 01       	movw	r30, r24
    3596:	80 81       	ld	r24, Z
    3598:	91 81       	ldd	r25, Z+1	; 0x01
    359a:	a2 81       	ldd	r26, Z+2	; 0x02
    359c:	b3 81       	ldd	r27, Z+3	; 0x03
    359e:	8b 8f       	std	Y+27, r24	; 0x1b
    35a0:	9c 8f       	std	Y+28, r25	; 0x1c
    35a2:	ad 8f       	std	Y+29, r26	; 0x1d
    35a4:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    35a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35aa:	ad 8d       	ldd	r26, Y+29	; 0x1d
    35ac:	be 8d       	ldd	r27, Y+30	; 0x1e
    35ae:	ac 01       	movw	r20, r24
    35b0:	bd 01       	movw	r22, r26
    35b2:	82 eb       	ldi	r24, 0xB2	; 178
    35b4:	9c e2       	ldi	r25, 0x2C	; 44
    35b6:	0e 94 48 1c 	call	0x3890	; 0x3890 <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    35ba:	1d 86       	std	Y+13, r1	; 0x0d
    35bc:	1e 86       	std	Y+14, r1	; 0x0e
    35be:	15 c0       	rjmp	.+42     	; 0x35ea <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    35c0:	29 81       	ldd	r18, Y+1	; 0x01
    35c2:	3a 81       	ldd	r19, Y+2	; 0x02
    35c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c8:	82 0f       	add	r24, r18
    35ca:	93 1f       	adc	r25, r19
    35cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    35ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    35d0:	2e 54       	subi	r18, 0x4E	; 78
    35d2:	33 4d       	sbci	r19, 0xD3	; 211
    35d4:	f9 01       	movw	r30, r18
    35d6:	20 81       	ld	r18, Z
    35d8:	8a 53       	subi	r24, 0x3A	; 58
    35da:	93 4d       	sbci	r25, 0xD3	; 211
    35dc:	fc 01       	movw	r30, r24
    35de:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    35e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e4:	01 96       	adiw	r24, 0x01	; 1
    35e6:	8d 87       	std	Y+13, r24	; 0x0d
    35e8:	9e 87       	std	Y+14, r25	; 0x0e
    35ea:	82 eb       	ldi	r24, 0xB2	; 178
    35ec:	9c e2       	ldi	r25, 0x2C	; 44
    35ee:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strlen>
    35f2:	9c 01       	movw	r18, r24
    35f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f8:	82 17       	cp	r24, r18
    35fa:	93 07       	cpc	r25, r19
    35fc:	08 f3       	brcs	.-62     	; 0x35c0 <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    35fe:	82 eb       	ldi	r24, 0xB2	; 178
    3600:	9c e2       	ldi	r25, 0x2C	; 44
    3602:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strlen>
    3606:	9c 01       	movw	r18, r24
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	9a 81       	ldd	r25, Y+2	; 0x02
    360c:	82 0f       	add	r24, r18
    360e:	93 1f       	adc	r25, r19
    3610:	89 83       	std	Y+1, r24	; 0x01
    3612:	9a 83       	std	Y+2, r25	; 0x02
				break;
    3614:	63 c0       	rjmp	.+198    	; 0x36dc <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    3616:	8b ad       	ldd	r24, Y+59	; 0x3b
    3618:	9c ad       	ldd	r25, Y+60	; 0x3c
    361a:	9c 01       	movw	r18, r24
    361c:	2c 5f       	subi	r18, 0xFC	; 252
    361e:	3f 4f       	sbci	r19, 0xFF	; 255
    3620:	2b af       	std	Y+59, r18	; 0x3b
    3622:	3c af       	std	Y+60, r19	; 0x3c
    3624:	fc 01       	movw	r30, r24
    3626:	80 81       	ld	r24, Z
    3628:	91 81       	ldd	r25, Z+1	; 0x01
    362a:	a2 81       	ldd	r26, Z+2	; 0x02
    362c:	b3 81       	ldd	r27, Z+3	; 0x03
    362e:	8b 8f       	std	Y+27, r24	; 0x1b
    3630:	9c 8f       	std	Y+28, r25	; 0x1c
    3632:	ad 8f       	std	Y+29, r26	; 0x1d
    3634:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    3636:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3638:	9c 8d       	ldd	r25, Y+28	; 0x1c
    363a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    363c:	be 8d       	ldd	r27, Y+30	; 0x1e
    363e:	ac 01       	movw	r20, r24
    3640:	bd 01       	movw	r22, r26
    3642:	82 eb       	ldi	r24, 0xB2	; 178
    3644:	9c e2       	ldi	r25, 0x2C	; 44
    3646:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    364a:	1f 86       	std	Y+15, r1	; 0x0f
    364c:	18 8a       	std	Y+16, r1	; 0x10
    364e:	15 c0       	rjmp	.+42     	; 0x367a <display_vprintf+0x388>
					str[length+i] = buffer[i];
    3650:	29 81       	ldd	r18, Y+1	; 0x01
    3652:	3a 81       	ldd	r19, Y+2	; 0x02
    3654:	8f 85       	ldd	r24, Y+15	; 0x0f
    3656:	98 89       	ldd	r25, Y+16	; 0x10
    3658:	82 0f       	add	r24, r18
    365a:	93 1f       	adc	r25, r19
    365c:	2f 85       	ldd	r18, Y+15	; 0x0f
    365e:	38 89       	ldd	r19, Y+16	; 0x10
    3660:	2e 54       	subi	r18, 0x4E	; 78
    3662:	33 4d       	sbci	r19, 0xD3	; 211
    3664:	f9 01       	movw	r30, r18
    3666:	20 81       	ld	r18, Z
    3668:	8a 53       	subi	r24, 0x3A	; 58
    366a:	93 4d       	sbci	r25, 0xD3	; 211
    366c:	fc 01       	movw	r30, r24
    366e:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    3670:	8f 85       	ldd	r24, Y+15	; 0x0f
    3672:	98 89       	ldd	r25, Y+16	; 0x10
    3674:	01 96       	adiw	r24, 0x01	; 1
    3676:	8f 87       	std	Y+15, r24	; 0x0f
    3678:	98 8b       	std	Y+16, r25	; 0x10
    367a:	82 eb       	ldi	r24, 0xB2	; 178
    367c:	9c e2       	ldi	r25, 0x2C	; 44
    367e:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strlen>
    3682:	9c 01       	movw	r18, r24
    3684:	8f 85       	ldd	r24, Y+15	; 0x0f
    3686:	98 89       	ldd	r25, Y+16	; 0x10
    3688:	82 17       	cp	r24, r18
    368a:	93 07       	cpc	r25, r19
    368c:	08 f3       	brcs	.-62     	; 0x3650 <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    368e:	82 eb       	ldi	r24, 0xB2	; 178
    3690:	9c e2       	ldi	r25, 0x2C	; 44
    3692:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strlen>
    3696:	9c 01       	movw	r18, r24
    3698:	89 81       	ldd	r24, Y+1	; 0x01
    369a:	9a 81       	ldd	r25, Y+2	; 0x02
    369c:	82 0f       	add	r24, r18
    369e:	93 1f       	adc	r25, r19
    36a0:	89 83       	std	Y+1, r24	; 0x01
    36a2:	9a 83       	std	Y+2, r25	; 0x02
				break;
    36a4:	00 00       	nop
    36a6:	1a c0       	rjmp	.+52     	; 0x36dc <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	9a 81       	ldd	r25, Y+2	; 0x02
    36ac:	8a 53       	subi	r24, 0x3A	; 58
    36ae:	93 4d       	sbci	r25, 0xD3	; 211
    36b0:	2d 89       	ldd	r18, Y+21	; 0x15
    36b2:	fc 01       	movw	r30, r24
    36b4:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ba:	8a 53       	subi	r24, 0x3A	; 58
    36bc:	93 4d       	sbci	r25, 0xD3	; 211
    36be:	fc 01       	movw	r30, r24
    36c0:	80 81       	ld	r24, Z
    36c2:	8a 30       	cpi	r24, 0x0A	; 10
    36c4:	31 f4       	brne	.+12     	; 0x36d2 <display_vprintf+0x3e0>
				str[length] = '\0';				
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ca:	8a 53       	subi	r24, 0x3A	; 58
    36cc:	93 4d       	sbci	r25, 0xD3	; 211
    36ce:	fc 01       	movw	r30, r24
    36d0:	10 82       	st	Z, r1
			}
			length++;
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	9a 81       	ldd	r25, Y+2	; 0x02
    36d6:	01 96       	adiw	r24, 0x01	; 1
    36d8:	89 83       	std	Y+1, r24	; 0x01
    36da:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    36dc:	89 ad       	ldd	r24, Y+57	; 0x39
    36de:	9a ad       	ldd	r25, Y+58	; 0x3a
    36e0:	9c 01       	movw	r18, r24
    36e2:	2f 5f       	subi	r18, 0xFF	; 255
    36e4:	3f 4f       	sbci	r19, 0xFF	; 255
    36e6:	29 af       	std	Y+57, r18	; 0x39
    36e8:	3a af       	std	Y+58, r19	; 0x3a
    36ea:	fc 01       	movw	r30, r24
    36ec:	80 81       	ld	r24, Z
    36ee:	8d 8b       	std	Y+21, r24	; 0x15
    36f0:	8d 89       	ldd	r24, Y+21	; 0x15
    36f2:	88 23       	and	r24, r24
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <display_vprintf+0x406>
    36f6:	34 ce       	rjmp	.-920    	; 0x3360 <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    36f8:	29 81       	ldd	r18, Y+1	; 0x01
    36fa:	3a 81       	ldd	r19, Y+2	; 0x02
    36fc:	8f a9       	ldd	r24, Y+55	; 0x37
    36fe:	98 ad       	ldd	r25, Y+56	; 0x38
    3700:	82 0f       	add	r24, r18
    3702:	93 1f       	adc	r25, r19
    3704:	44 97       	sbiw	r24, 0x14	; 20
    3706:	54 f0       	brlt	.+20     	; 0x371c <display_vprintf+0x42a>
		length = 20-pos;
    3708:	24 e1       	ldi	r18, 0x14	; 20
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	8f a9       	ldd	r24, Y+55	; 0x37
    370e:	98 ad       	ldd	r25, Y+56	; 0x38
    3710:	a9 01       	movw	r20, r18
    3712:	48 1b       	sub	r20, r24
    3714:	59 0b       	sbc	r21, r25
    3716:	ca 01       	movw	r24, r20
    3718:	89 83       	std	Y+1, r24	; 0x01
    371a:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    371c:	19 8a       	std	Y+17, r1	; 0x11
    371e:	1a 8a       	std	Y+18, r1	; 0x12
    3720:	0e c0       	rjmp	.+28     	; 0x373e <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    3722:	9e 01       	movw	r18, r28
    3724:	2f 5d       	subi	r18, 0xDF	; 223
    3726:	3f 4f       	sbci	r19, 0xFF	; 255
    3728:	89 89       	ldd	r24, Y+17	; 0x11
    372a:	9a 89       	ldd	r25, Y+18	; 0x12
    372c:	82 0f       	add	r24, r18
    372e:	93 1f       	adc	r25, r19
    3730:	fc 01       	movw	r30, r24
    3732:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    3734:	89 89       	ldd	r24, Y+17	; 0x11
    3736:	9a 89       	ldd	r25, Y+18	; 0x12
    3738:	01 96       	adiw	r24, 0x01	; 1
    373a:	89 8b       	std	Y+17, r24	; 0x11
    373c:	9a 8b       	std	Y+18, r25	; 0x12
    373e:	89 89       	ldd	r24, Y+17	; 0x11
    3740:	9a 89       	ldd	r25, Y+18	; 0x12
    3742:	44 97       	sbiw	r24, 0x14	; 20
    3744:	74 f3       	brlt	.-36     	; 0x3722 <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    3746:	8d a9       	ldd	r24, Y+53	; 0x35
    3748:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    374a:	8f a9       	ldd	r24, Y+55	; 0x37
    374c:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    374e:	1b 8a       	std	Y+19, r1	; 0x13
    3750:	1c 8a       	std	Y+20, r1	; 0x14
    3752:	14 c0       	rjmp	.+40     	; 0x377c <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    3754:	8b 89       	ldd	r24, Y+19	; 0x13
    3756:	9c 89       	ldd	r25, Y+20	; 0x14
    3758:	8a 53       	subi	r24, 0x3A	; 58
    375a:	93 4d       	sbci	r25, 0xD3	; 211
    375c:	fc 01       	movw	r30, r24
    375e:	40 81       	ld	r20, Z
    3760:	9e 01       	movw	r18, r28
    3762:	2f 5d       	subi	r18, 0xDF	; 223
    3764:	3f 4f       	sbci	r19, 0xFF	; 255
    3766:	8b 89       	ldd	r24, Y+19	; 0x13
    3768:	9c 89       	ldd	r25, Y+20	; 0x14
    376a:	82 0f       	add	r24, r18
    376c:	93 1f       	adc	r25, r19
    376e:	fc 01       	movw	r30, r24
    3770:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    3772:	8b 89       	ldd	r24, Y+19	; 0x13
    3774:	9c 89       	ldd	r25, Y+20	; 0x14
    3776:	01 96       	adiw	r24, 0x01	; 1
    3778:	8b 8b       	std	Y+19, r24	; 0x13
    377a:	9c 8b       	std	Y+20, r25	; 0x14
    377c:	2b 89       	ldd	r18, Y+19	; 0x13
    377e:	3c 89       	ldd	r19, Y+20	; 0x14
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	9a 81       	ldd	r25, Y+2	; 0x02
    3784:	28 17       	cp	r18, r24
    3786:	39 07       	cpc	r19, r25
    3788:	2c f3       	brlt	.-54     	; 0x3754 <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    378a:	80 91 eb 2c 	lds	r24, 0x2CEB	; 0x802ceb <displayLineQueue>
    378e:	90 91 ec 2c 	lds	r25, 0x2CEC	; 0x802cec <displayLineQueue+0x1>
    3792:	be 01       	movw	r22, r28
    3794:	61 5e       	subi	r22, 0xE1	; 225
    3796:	7f 4f       	sbci	r23, 0xFF	; 255
    3798:	00 e0       	ldi	r16, 0x00	; 0
    379a:	2f ef       	ldi	r18, 0xFF	; 255
    379c:	3f ef       	ldi	r19, 0xFF	; 255
    379e:	a9 01       	movw	r20, r18
    37a0:	0e 94 be 08 	call	0x117c	; 0x117c <xQueueGenericSend>
	
	
	return length;
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    37a8:	ec 96       	adiw	r28, 0x3c	; 60
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	de bf       	out	0x3e, r29	; 62
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	0f 91       	pop	r16
    37b4:	08 95       	ret

000037b6 <normalize>:

static int normalize(double *val) {
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	cd b7       	in	r28, 0x3d	; 61
    37bc:	de b7       	in	r29, 0x3e	; 62
    37be:	28 97       	sbiw	r28, 0x08	; 8
    37c0:	cd bf       	out	0x3d, r28	; 61
    37c2:	de bf       	out	0x3e, r29	; 62
    37c4:	8f 83       	std	Y+7, r24	; 0x07
    37c6:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    37c8:	19 82       	std	Y+1, r1	; 0x01
    37ca:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    37cc:	8f 81       	ldd	r24, Y+7	; 0x07
    37ce:	98 85       	ldd	r25, Y+8	; 0x08
    37d0:	fc 01       	movw	r30, r24
    37d2:	80 81       	ld	r24, Z
    37d4:	91 81       	ldd	r25, Z+1	; 0x01
    37d6:	a2 81       	ldd	r26, Z+2	; 0x02
    37d8:	b3 81       	ldd	r27, Z+3	; 0x03
    37da:	8b 83       	std	Y+3, r24	; 0x03
    37dc:	9c 83       	std	Y+4, r25	; 0x04
    37de:	ad 83       	std	Y+5, r26	; 0x05
    37e0:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    37e2:	15 c0       	rjmp	.+42     	; 0x380e <normalize+0x58>
        value /= 10.0;
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	40 e2       	ldi	r20, 0x20	; 32
    37ea:	51 e4       	ldi	r21, 0x41	; 65
    37ec:	6b 81       	ldd	r22, Y+3	; 0x03
    37ee:	7c 81       	ldd	r23, Y+4	; 0x04
    37f0:	8d 81       	ldd	r24, Y+5	; 0x05
    37f2:	9e 81       	ldd	r25, Y+6	; 0x06
    37f4:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__divsf3>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	8b 83       	std	Y+3, r24	; 0x03
    37fe:	9c 83       	std	Y+4, r25	; 0x04
    3800:	ad 83       	std	Y+5, r26	; 0x05
    3802:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	9a 81       	ldd	r25, Y+2	; 0x02
    3808:	01 96       	adiw	r24, 0x01	; 1
    380a:	89 83       	std	Y+1, r24	; 0x01
    380c:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	40 e8       	ldi	r20, 0x80	; 128
    3814:	5f e3       	ldi	r21, 0x3F	; 63
    3816:	6b 81       	ldd	r22, Y+3	; 0x03
    3818:	7c 81       	ldd	r23, Y+4	; 0x04
    381a:	8d 81       	ldd	r24, Y+5	; 0x05
    381c:	9e 81       	ldd	r25, Y+6	; 0x06
    381e:	0e 94 84 20 	call	0x4108	; 0x4108 <__gesf2>
    3822:	88 23       	and	r24, r24
    3824:	fc f6       	brge	.-66     	; 0x37e4 <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    3826:	15 c0       	rjmp	.+42     	; 0x3852 <normalize+0x9c>
        value *= 10.0;
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	40 e2       	ldi	r20, 0x20	; 32
    382e:	51 e4       	ldi	r21, 0x41	; 65
    3830:	6b 81       	ldd	r22, Y+3	; 0x03
    3832:	7c 81       	ldd	r23, Y+4	; 0x04
    3834:	8d 81       	ldd	r24, Y+5	; 0x05
    3836:	9e 81       	ldd	r25, Y+6	; 0x06
    3838:	0e 94 89 20 	call	0x4112	; 0x4112 <__mulsf3>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	8b 83       	std	Y+3, r24	; 0x03
    3842:	9c 83       	std	Y+4, r25	; 0x04
    3844:	ad 83       	std	Y+5, r26	; 0x05
    3846:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    3848:	89 81       	ldd	r24, Y+1	; 0x01
    384a:	9a 81       	ldd	r25, Y+2	; 0x02
    384c:	01 97       	sbiw	r24, 0x01	; 1
    384e:	89 83       	std	Y+1, r24	; 0x01
    3850:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    3852:	2d ec       	ldi	r18, 0xCD	; 205
    3854:	3c ec       	ldi	r19, 0xCC	; 204
    3856:	4c ec       	ldi	r20, 0xCC	; 204
    3858:	5d e3       	ldi	r21, 0x3D	; 61
    385a:	6b 81       	ldd	r22, Y+3	; 0x03
    385c:	7c 81       	ldd	r23, Y+4	; 0x04
    385e:	8d 81       	ldd	r24, Y+5	; 0x05
    3860:	9e 81       	ldd	r25, Y+6	; 0x06
    3862:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <__cmpsf2>
    3866:	88 23       	and	r24, r24
    3868:	fc f2       	brlt	.-66     	; 0x3828 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    386a:	2f 81       	ldd	r18, Y+7	; 0x07
    386c:	38 85       	ldd	r19, Y+8	; 0x08
    386e:	8b 81       	ldd	r24, Y+3	; 0x03
    3870:	9c 81       	ldd	r25, Y+4	; 0x04
    3872:	ad 81       	ldd	r26, Y+5	; 0x05
    3874:	be 81       	ldd	r27, Y+6	; 0x06
    3876:	f9 01       	movw	r30, r18
    3878:	80 83       	st	Z, r24
    387a:	91 83       	std	Z+1, r25	; 0x01
    387c:	a2 83       	std	Z+2, r26	; 0x02
    387e:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3884:	28 96       	adiw	r28, 0x08	; 8
    3886:	cd bf       	out	0x3d, r28	; 61
    3888:	de bf       	out	0x3e, r29	; 62
    388a:	df 91       	pop	r29
    388c:	cf 91       	pop	r28
    388e:	08 95       	ret

00003890 <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    3890:	cf 92       	push	r12
    3892:	df 92       	push	r13
    3894:	ef 92       	push	r14
    3896:	ff 92       	push	r15
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	2e 97       	sbiw	r28, 0x0e	; 14
    38a2:	cd bf       	out	0x3d, r28	; 61
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	89 87       	std	Y+9, r24	; 0x09
    38a8:	9a 87       	std	Y+10, r25	; 0x0a
    38aa:	4b 87       	std	Y+11, r20	; 0x0b
    38ac:	5c 87       	std	Y+12, r21	; 0x0c
    38ae:	6d 87       	std	Y+13, r22	; 0x0d
    38b0:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    38b2:	19 82       	std	Y+1, r1	; 0x01
    38b4:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    38b6:	1b 82       	std	Y+3, r1	; 0x03
    38b8:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    38ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    38bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    38be:	ad 85       	ldd	r26, Y+13	; 0x0d
    38c0:	be 85       	ldd	r27, Y+14	; 0x0e
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	a9 01       	movw	r20, r18
    38c8:	bc 01       	movw	r22, r24
    38ca:	cd 01       	movw	r24, r26
    38cc:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <__cmpsf2>
    38d0:	88 23       	and	r24, r24
    38d2:	59 f4       	brne	.+22     	; 0x38ea <ftoa_fixed+0x5a>
        buffer[0] = '0';
    38d4:	89 85       	ldd	r24, Y+9	; 0x09
    38d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d8:	20 e3       	ldi	r18, 0x30	; 48
    38da:	fc 01       	movw	r30, r24
    38dc:	20 83       	st	Z, r18
        buffer[1] = '\0';
    38de:	89 85       	ldd	r24, Y+9	; 0x09
    38e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e2:	01 96       	adiw	r24, 0x01	; 1
    38e4:	fc 01       	movw	r30, r24
    38e6:	10 82       	st	Z, r1
        return;
    38e8:	18 c1       	rjmp	.+560    	; 0x3b1a <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    38ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    38ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    38ee:	ad 85       	ldd	r26, Y+13	; 0x0d
    38f0:	be 85       	ldd	r27, Y+14	; 0x0e
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	a9 01       	movw	r20, r18
    38f8:	bc 01       	movw	r22, r24
    38fa:	cd 01       	movw	r24, r26
    38fc:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <__cmpsf2>
    3900:	88 23       	and	r24, r24
    3902:	9c f4       	brge	.+38     	; 0x392a <ftoa_fixed+0x9a>
        *buffer++ = '-';
    3904:	89 85       	ldd	r24, Y+9	; 0x09
    3906:	9a 85       	ldd	r25, Y+10	; 0x0a
    3908:	9c 01       	movw	r18, r24
    390a:	2f 5f       	subi	r18, 0xFF	; 255
    390c:	3f 4f       	sbci	r19, 0xFF	; 255
    390e:	29 87       	std	Y+9, r18	; 0x09
    3910:	3a 87       	std	Y+10, r19	; 0x0a
    3912:	2d e2       	ldi	r18, 0x2D	; 45
    3914:	fc 01       	movw	r30, r24
    3916:	20 83       	st	Z, r18
        value = -value;
    3918:	8b 85       	ldd	r24, Y+11	; 0x0b
    391a:	9c 85       	ldd	r25, Y+12	; 0x0c
    391c:	ad 85       	ldd	r26, Y+13	; 0x0d
    391e:	be 85       	ldd	r27, Y+14	; 0x0e
    3920:	b0 58       	subi	r27, 0x80	; 128
    3922:	8b 87       	std	Y+11, r24	; 0x0b
    3924:	9c 87       	std	Y+12, r25	; 0x0c
    3926:	ad 87       	std	Y+13, r26	; 0x0d
    3928:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    392a:	ce 01       	movw	r24, r28
    392c:	0b 96       	adiw	r24, 0x0b	; 11
    392e:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <normalize>
    3932:	89 83       	std	Y+1, r24	; 0x01
    3934:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    3936:	53 c0       	rjmp	.+166    	; 0x39de <ftoa_fixed+0x14e>
        int digit = value * 10;
    3938:	8b 85       	ldd	r24, Y+11	; 0x0b
    393a:	9c 85       	ldd	r25, Y+12	; 0x0c
    393c:	ad 85       	ldd	r26, Y+13	; 0x0d
    393e:	be 85       	ldd	r27, Y+14	; 0x0e
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e2       	ldi	r20, 0x20	; 32
    3946:	51 e4       	ldi	r21, 0x41	; 65
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	0e 94 89 20 	call	0x4112	; 0x4112 <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	bc 01       	movw	r22, r24
    3956:	cd 01       	movw	r24, r26
    3958:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__fixsfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	8d 83       	std	Y+5, r24	; 0x05
    3962:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    3964:	89 85       	ldd	r24, Y+9	; 0x09
    3966:	9a 85       	ldd	r25, Y+10	; 0x0a
    3968:	9c 01       	movw	r18, r24
    396a:	2f 5f       	subi	r18, 0xFF	; 255
    396c:	3f 4f       	sbci	r19, 0xFF	; 255
    396e:	29 87       	std	Y+9, r18	; 0x09
    3970:	3a 87       	std	Y+10, r19	; 0x0a
    3972:	2d 81       	ldd	r18, Y+5	; 0x05
    3974:	20 5d       	subi	r18, 0xD0	; 208
    3976:	fc 01       	movw	r30, r24
    3978:	20 83       	st	Z, r18
        value = value * 10 - digit;
    397a:	8b 85       	ldd	r24, Y+11	; 0x0b
    397c:	9c 85       	ldd	r25, Y+12	; 0x0c
    397e:	ad 85       	ldd	r26, Y+13	; 0x0d
    3980:	be 85       	ldd	r27, Y+14	; 0x0e
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	40 e2       	ldi	r20, 0x20	; 32
    3988:	51 e4       	ldi	r21, 0x41	; 65
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	0e 94 89 20 	call	0x4112	; 0x4112 <__mulsf3>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	6c 01       	movw	r12, r24
    3998:	7d 01       	movw	r14, r26
    399a:	8d 81       	ldd	r24, Y+5	; 0x05
    399c:	9e 81       	ldd	r25, Y+6	; 0x06
    399e:	09 2e       	mov	r0, r25
    39a0:	00 0c       	add	r0, r0
    39a2:	aa 0b       	sbc	r26, r26
    39a4:	bb 0b       	sbc	r27, r27
    39a6:	bc 01       	movw	r22, r24
    39a8:	cd 01       	movw	r24, r26
    39aa:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__floatsisf>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	9c 01       	movw	r18, r24
    39b4:	ad 01       	movw	r20, r26
    39b6:	c7 01       	movw	r24, r14
    39b8:	b6 01       	movw	r22, r12
    39ba:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__subsf3>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	8b 87       	std	Y+11, r24	; 0x0b
    39c4:	9c 87       	std	Y+12, r25	; 0x0c
    39c6:	ad 87       	std	Y+13, r26	; 0x0d
    39c8:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    39ca:	8b 81       	ldd	r24, Y+3	; 0x03
    39cc:	9c 81       	ldd	r25, Y+4	; 0x04
    39ce:	01 96       	adiw	r24, 0x01	; 1
    39d0:	8b 83       	std	Y+3, r24	; 0x03
    39d2:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    39d4:	89 81       	ldd	r24, Y+1	; 0x01
    39d6:	9a 81       	ldd	r25, Y+2	; 0x02
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	89 83       	std	Y+1, r24	; 0x01
    39dc:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	9a 81       	ldd	r25, Y+2	; 0x02
    39e2:	18 16       	cp	r1, r24
    39e4:	19 06       	cpc	r1, r25
    39e6:	0c f4       	brge	.+2      	; 0x39ea <ftoa_fixed+0x15a>
    39e8:	a7 cf       	rjmp	.-178    	; 0x3938 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    39ea:	8b 81       	ldd	r24, Y+3	; 0x03
    39ec:	9c 81       	ldd	r25, Y+4	; 0x04
    39ee:	89 2b       	or	r24, r25
    39f0:	51 f4       	brne	.+20     	; 0x3a06 <ftoa_fixed+0x176>
        *buffer++ = '0';
    39f2:	89 85       	ldd	r24, Y+9	; 0x09
    39f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f6:	9c 01       	movw	r18, r24
    39f8:	2f 5f       	subi	r18, 0xFF	; 255
    39fa:	3f 4f       	sbci	r19, 0xFF	; 255
    39fc:	29 87       	std	Y+9, r18	; 0x09
    39fe:	3a 87       	std	Y+10, r19	; 0x0a
    3a00:	20 e3       	ldi	r18, 0x30	; 48
    3a02:	fc 01       	movw	r30, r24
    3a04:	20 83       	st	Z, r18

    *buffer++ = '.';
    3a06:	89 85       	ldd	r24, Y+9	; 0x09
    3a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a0a:	9c 01       	movw	r18, r24
    3a0c:	2f 5f       	subi	r18, 0xFF	; 255
    3a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a10:	29 87       	std	Y+9, r18	; 0x09
    3a12:	3a 87       	std	Y+10, r19	; 0x0a
    3a14:	2e e2       	ldi	r18, 0x2E	; 46
    3a16:	fc 01       	movw	r30, r24
    3a18:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    3a1a:	14 c0       	rjmp	.+40     	; 0x3a44 <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    3a1c:	89 85       	ldd	r24, Y+9	; 0x09
    3a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a20:	9c 01       	movw	r18, r24
    3a22:	2f 5f       	subi	r18, 0xFF	; 255
    3a24:	3f 4f       	sbci	r19, 0xFF	; 255
    3a26:	29 87       	std	Y+9, r18	; 0x09
    3a28:	3a 87       	std	Y+10, r19	; 0x0a
    3a2a:	20 e3       	ldi	r18, 0x30	; 48
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	20 83       	st	Z, r18
        --exponent;
    3a30:	89 81       	ldd	r24, Y+1	; 0x01
    3a32:	9a 81       	ldd	r25, Y+2	; 0x02
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	89 83       	std	Y+1, r24	; 0x01
    3a38:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    3a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3e:	01 96       	adiw	r24, 0x01	; 1
    3a40:	8b 83       	std	Y+3, r24	; 0x03
    3a42:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	9a 81       	ldd	r25, Y+2	; 0x02
    3a48:	99 23       	and	r25, r25
    3a4a:	0c f0       	brlt	.+2      	; 0x3a4e <ftoa_fixed+0x1be>
    3a4c:	58 c0       	rjmp	.+176    	; 0x3afe <ftoa_fixed+0x26e>
    3a4e:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <width.5062>
    3a52:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <width.5062+0x1>
    3a56:	2b 81       	ldd	r18, Y+3	; 0x03
    3a58:	3c 81       	ldd	r19, Y+4	; 0x04
    3a5a:	28 17       	cp	r18, r24
    3a5c:	39 07       	cpc	r19, r25
    3a5e:	f4 f2       	brlt	.-68     	; 0x3a1c <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    3a60:	4e c0       	rjmp	.+156    	; 0x3afe <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    3a62:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a64:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a66:	ad 85       	ldd	r26, Y+13	; 0x0d
    3a68:	be 85       	ldd	r27, Y+14	; 0x0e
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	40 e2       	ldi	r20, 0x20	; 32
    3a70:	51 e4       	ldi	r21, 0x41	; 65
    3a72:	bc 01       	movw	r22, r24
    3a74:	cd 01       	movw	r24, r26
    3a76:	0e 94 89 20 	call	0x4112	; 0x4112 <__mulsf3>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	bc 01       	movw	r22, r24
    3a80:	cd 01       	movw	r24, r26
    3a82:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__fixsfsi>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	8f 83       	std	Y+7, r24	; 0x07
    3a8c:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    3a8e:	89 85       	ldd	r24, Y+9	; 0x09
    3a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a92:	9c 01       	movw	r18, r24
    3a94:	2f 5f       	subi	r18, 0xFF	; 255
    3a96:	3f 4f       	sbci	r19, 0xFF	; 255
    3a98:	29 87       	std	Y+9, r18	; 0x09
    3a9a:	3a 87       	std	Y+10, r19	; 0x0a
    3a9c:	2f 81       	ldd	r18, Y+7	; 0x07
    3a9e:	20 5d       	subi	r18, 0xD0	; 208
    3aa0:	fc 01       	movw	r30, r24
    3aa2:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    3aa4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3aa6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3aa8:	ad 85       	ldd	r26, Y+13	; 0x0d
    3aaa:	be 85       	ldd	r27, Y+14	; 0x0e
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e2       	ldi	r20, 0x20	; 32
    3ab2:	51 e4       	ldi	r21, 0x41	; 65
    3ab4:	bc 01       	movw	r22, r24
    3ab6:	cd 01       	movw	r24, r26
    3ab8:	0e 94 89 20 	call	0x4112	; 0x4112 <__mulsf3>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	6c 01       	movw	r12, r24
    3ac2:	7d 01       	movw	r14, r26
    3ac4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ac6:	98 85       	ldd	r25, Y+8	; 0x08
    3ac8:	09 2e       	mov	r0, r25
    3aca:	00 0c       	add	r0, r0
    3acc:	aa 0b       	sbc	r26, r26
    3ace:	bb 0b       	sbc	r27, r27
    3ad0:	bc 01       	movw	r22, r24
    3ad2:	cd 01       	movw	r24, r26
    3ad4:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__floatsisf>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	9c 01       	movw	r18, r24
    3ade:	ad 01       	movw	r20, r26
    3ae0:	c7 01       	movw	r24, r14
    3ae2:	b6 01       	movw	r22, r12
    3ae4:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__subsf3>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	8b 87       	std	Y+11, r24	; 0x0b
    3aee:	9c 87       	std	Y+12, r25	; 0x0c
    3af0:	ad 87       	std	Y+13, r26	; 0x0d
    3af2:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    3af4:	8b 81       	ldd	r24, Y+3	; 0x03
    3af6:	9c 81       	ldd	r25, Y+4	; 0x04
    3af8:	01 96       	adiw	r24, 0x01	; 1
    3afa:	8b 83       	std	Y+3, r24	; 0x03
    3afc:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    3afe:	80 91 5a 20 	lds	r24, 0x205A	; 0x80205a <width.5062>
    3b02:	90 91 5b 20 	lds	r25, 0x205B	; 0x80205b <width.5062+0x1>
    3b06:	2b 81       	ldd	r18, Y+3	; 0x03
    3b08:	3c 81       	ldd	r19, Y+4	; 0x04
    3b0a:	28 17       	cp	r18, r24
    3b0c:	39 07       	cpc	r19, r25
    3b0e:	0c f4       	brge	.+2      	; 0x3b12 <ftoa_fixed+0x282>
    3b10:	a8 cf       	rjmp	.-176    	; 0x3a62 <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    3b12:	89 85       	ldd	r24, Y+9	; 0x09
    3b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b16:	fc 01       	movw	r30, r24
    3b18:	10 82       	st	Z, r1
}
    3b1a:	2e 96       	adiw	r28, 0x0e	; 14
    3b1c:	cd bf       	out	0x3d, r28	; 61
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	df 91       	pop	r29
    3b22:	cf 91       	pop	r28
    3b24:	ff 90       	pop	r15
    3b26:	ef 90       	pop	r14
    3b28:	df 90       	pop	r13
    3b2a:	cf 90       	pop	r12
    3b2c:	08 95       	ret

00003b2e <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    3b2e:	cf 92       	push	r12
    3b30:	df 92       	push	r13
    3b32:	ef 92       	push	r14
    3b34:	ff 92       	push	r15
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	2e 97       	sbiw	r28, 0x0e	; 14
    3b40:	cd bf       	out	0x3d, r28	; 61
    3b42:	de bf       	out	0x3e, r29	; 62
    3b44:	89 87       	std	Y+9, r24	; 0x09
    3b46:	9a 87       	std	Y+10, r25	; 0x0a
    3b48:	4b 87       	std	Y+11, r20	; 0x0b
    3b4a:	5c 87       	std	Y+12, r21	; 0x0c
    3b4c:	6d 87       	std	Y+13, r22	; 0x0d
    3b4e:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    3b50:	1b 82       	std	Y+3, r1	; 0x03
    3b52:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    3b54:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b56:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b58:	ad 85       	ldd	r26, Y+13	; 0x0d
    3b5a:	be 85       	ldd	r27, Y+14	; 0x0e
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	a9 01       	movw	r20, r18
    3b62:	bc 01       	movw	r22, r24
    3b64:	cd 01       	movw	r24, r26
    3b66:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <__cmpsf2>
    3b6a:	88 23       	and	r24, r24
    3b6c:	59 f4       	brne	.+22     	; 0x3b84 <ftoa_sci+0x56>
        buffer[0] = '0';
    3b6e:	89 85       	ldd	r24, Y+9	; 0x09
    3b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b72:	20 e3       	ldi	r18, 0x30	; 48
    3b74:	fc 01       	movw	r30, r24
    3b76:	20 83       	st	Z, r18
        buffer[1] = '\0';
    3b78:	89 85       	ldd	r24, Y+9	; 0x09
    3b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7c:	01 96       	adiw	r24, 0x01	; 1
    3b7e:	fc 01       	movw	r30, r24
    3b80:	10 82       	st	Z, r1
        return;
    3b82:	ec c0       	rjmp	.+472    	; 0x3d5c <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    3b84:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b86:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b88:	ad 85       	ldd	r26, Y+13	; 0x0d
    3b8a:	be 85       	ldd	r27, Y+14	; 0x0e
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	a9 01       	movw	r20, r18
    3b92:	bc 01       	movw	r22, r24
    3b94:	cd 01       	movw	r24, r26
    3b96:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <__cmpsf2>
    3b9a:	88 23       	and	r24, r24
    3b9c:	9c f4       	brge	.+38     	; 0x3bc4 <ftoa_sci+0x96>
        *buffer++ = '-';
    3b9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba2:	9c 01       	movw	r18, r24
    3ba4:	2f 5f       	subi	r18, 0xFF	; 255
    3ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ba8:	29 87       	std	Y+9, r18	; 0x09
    3baa:	3a 87       	std	Y+10, r19	; 0x0a
    3bac:	2d e2       	ldi	r18, 0x2D	; 45
    3bae:	fc 01       	movw	r30, r24
    3bb0:	20 83       	st	Z, r18
        value = -value;
    3bb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3bb6:	ad 85       	ldd	r26, Y+13	; 0x0d
    3bb8:	be 85       	ldd	r27, Y+14	; 0x0e
    3bba:	b0 58       	subi	r27, 0x80	; 128
    3bbc:	8b 87       	std	Y+11, r24	; 0x0b
    3bbe:	9c 87       	std	Y+12, r25	; 0x0c
    3bc0:	ad 87       	std	Y+13, r26	; 0x0d
    3bc2:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    3bc4:	ce 01       	movw	r24, r28
    3bc6:	0b 96       	adiw	r24, 0x0b	; 11
    3bc8:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <normalize>
    3bcc:	8b 83       	std	Y+3, r24	; 0x03
    3bce:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    3bd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3bd4:	ad 85       	ldd	r26, Y+13	; 0x0d
    3bd6:	be 85       	ldd	r27, Y+14	; 0x0e
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	40 e2       	ldi	r20, 0x20	; 32
    3bde:	51 e4       	ldi	r21, 0x41	; 65
    3be0:	bc 01       	movw	r22, r24
    3be2:	cd 01       	movw	r24, r26
    3be4:	0e 94 89 20 	call	0x4112	; 0x4112 <__mulsf3>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	bc 01       	movw	r22, r24
    3bee:	cd 01       	movw	r24, r26
    3bf0:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__fixsfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	8d 83       	std	Y+5, r24	; 0x05
    3bfa:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    3bfc:	89 85       	ldd	r24, Y+9	; 0x09
    3bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c00:	9c 01       	movw	r18, r24
    3c02:	2f 5f       	subi	r18, 0xFF	; 255
    3c04:	3f 4f       	sbci	r19, 0xFF	; 255
    3c06:	29 87       	std	Y+9, r18	; 0x09
    3c08:	3a 87       	std	Y+10, r19	; 0x0a
    3c0a:	2d 81       	ldd	r18, Y+5	; 0x05
    3c0c:	20 5d       	subi	r18, 0xD0	; 208
    3c0e:	fc 01       	movw	r30, r24
    3c10:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    3c12:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c14:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c16:	ad 85       	ldd	r26, Y+13	; 0x0d
    3c18:	be 85       	ldd	r27, Y+14	; 0x0e
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	40 e2       	ldi	r20, 0x20	; 32
    3c20:	51 e4       	ldi	r21, 0x41	; 65
    3c22:	bc 01       	movw	r22, r24
    3c24:	cd 01       	movw	r24, r26
    3c26:	0e 94 89 20 	call	0x4112	; 0x4112 <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	6c 01       	movw	r12, r24
    3c30:	7d 01       	movw	r14, r26
    3c32:	8d 81       	ldd	r24, Y+5	; 0x05
    3c34:	9e 81       	ldd	r25, Y+6	; 0x06
    3c36:	09 2e       	mov	r0, r25
    3c38:	00 0c       	add	r0, r0
    3c3a:	aa 0b       	sbc	r26, r26
    3c3c:	bb 0b       	sbc	r27, r27
    3c3e:	bc 01       	movw	r22, r24
    3c40:	cd 01       	movw	r24, r26
    3c42:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__floatsisf>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	9c 01       	movw	r18, r24
    3c4c:	ad 01       	movw	r20, r26
    3c4e:	c7 01       	movw	r24, r14
    3c50:	b6 01       	movw	r22, r12
    3c52:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__subsf3>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	8b 87       	std	Y+11, r24	; 0x0b
    3c5c:	9c 87       	std	Y+12, r25	; 0x0c
    3c5e:	ad 87       	std	Y+13, r26	; 0x0d
    3c60:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    3c62:	8b 81       	ldd	r24, Y+3	; 0x03
    3c64:	9c 81       	ldd	r25, Y+4	; 0x04
    3c66:	01 97       	sbiw	r24, 0x01	; 1
    3c68:	8b 83       	std	Y+3, r24	; 0x03
    3c6a:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    3c6c:	89 85       	ldd	r24, Y+9	; 0x09
    3c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c70:	9c 01       	movw	r18, r24
    3c72:	2f 5f       	subi	r18, 0xFF	; 255
    3c74:	3f 4f       	sbci	r19, 0xFF	; 255
    3c76:	29 87       	std	Y+9, r18	; 0x09
    3c78:	3a 87       	std	Y+10, r19	; 0x0a
    3c7a:	2e e2       	ldi	r18, 0x2E	; 46
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    3c80:	19 82       	std	Y+1, r1	; 0x01
    3c82:	1a 82       	std	Y+2, r1	; 0x02
    3c84:	4e c0       	rjmp	.+156    	; 0x3d22 <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    3c86:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c88:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c8a:	ad 85       	ldd	r26, Y+13	; 0x0d
    3c8c:	be 85       	ldd	r27, Y+14	; 0x0e
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	40 e2       	ldi	r20, 0x20	; 32
    3c94:	51 e4       	ldi	r21, 0x41	; 65
    3c96:	bc 01       	movw	r22, r24
    3c98:	cd 01       	movw	r24, r26
    3c9a:	0e 94 89 20 	call	0x4112	; 0x4112 <__mulsf3>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	bc 01       	movw	r22, r24
    3ca4:	cd 01       	movw	r24, r26
    3ca6:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__fixsfsi>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	8f 83       	std	Y+7, r24	; 0x07
    3cb0:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    3cb2:	89 85       	ldd	r24, Y+9	; 0x09
    3cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb6:	9c 01       	movw	r18, r24
    3cb8:	2f 5f       	subi	r18, 0xFF	; 255
    3cba:	3f 4f       	sbci	r19, 0xFF	; 255
    3cbc:	29 87       	std	Y+9, r18	; 0x09
    3cbe:	3a 87       	std	Y+10, r19	; 0x0a
    3cc0:	2f 81       	ldd	r18, Y+7	; 0x07
    3cc2:	20 5d       	subi	r18, 0xD0	; 208
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    3cc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3cca:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ccc:	ad 85       	ldd	r26, Y+13	; 0x0d
    3cce:	be 85       	ldd	r27, Y+14	; 0x0e
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 e2       	ldi	r20, 0x20	; 32
    3cd6:	51 e4       	ldi	r21, 0x41	; 65
    3cd8:	bc 01       	movw	r22, r24
    3cda:	cd 01       	movw	r24, r26
    3cdc:	0e 94 89 20 	call	0x4112	; 0x4112 <__mulsf3>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	6c 01       	movw	r12, r24
    3ce6:	7d 01       	movw	r14, r26
    3ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    3cea:	98 85       	ldd	r25, Y+8	; 0x08
    3cec:	09 2e       	mov	r0, r25
    3cee:	00 0c       	add	r0, r0
    3cf0:	aa 0b       	sbc	r26, r26
    3cf2:	bb 0b       	sbc	r27, r27
    3cf4:	bc 01       	movw	r22, r24
    3cf6:	cd 01       	movw	r24, r26
    3cf8:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__floatsisf>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	9c 01       	movw	r18, r24
    3d02:	ad 01       	movw	r20, r26
    3d04:	c7 01       	movw	r24, r14
    3d06:	b6 01       	movw	r22, r12
    3d08:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__subsf3>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	8b 87       	std	Y+11, r24	; 0x0b
    3d12:	9c 87       	std	Y+12, r25	; 0x0c
    3d14:	ad 87       	std	Y+13, r26	; 0x0d
    3d16:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    3d18:	89 81       	ldd	r24, Y+1	; 0x01
    3d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1c:	01 96       	adiw	r24, 0x01	; 1
    3d1e:	89 83       	std	Y+1, r24	; 0x01
    3d20:	9a 83       	std	Y+2, r25	; 0x02
    3d22:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <width.5079>
    3d26:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <width.5079+0x1>
    3d2a:	29 81       	ldd	r18, Y+1	; 0x01
    3d2c:	3a 81       	ldd	r19, Y+2	; 0x02
    3d2e:	28 17       	cp	r18, r24
    3d30:	39 07       	cpc	r19, r25
    3d32:	0c f4       	brge	.+2      	; 0x3d36 <ftoa_sci+0x208>
    3d34:	a8 cf       	rjmp	.-176    	; 0x3c86 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    3d36:	89 85       	ldd	r24, Y+9	; 0x09
    3d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3a:	9c 01       	movw	r18, r24
    3d3c:	2f 5f       	subi	r18, 0xFF	; 255
    3d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d40:	29 87       	std	Y+9, r18	; 0x09
    3d42:	3a 87       	std	Y+10, r19	; 0x0a
    3d44:	25 e6       	ldi	r18, 0x65	; 101
    3d46:	fc 01       	movw	r30, r24
    3d48:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    3d4a:	29 85       	ldd	r18, Y+9	; 0x09
    3d4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d50:	9c 81       	ldd	r25, Y+4	; 0x04
    3d52:	4a e0       	ldi	r20, 0x0A	; 10
    3d54:	50 e0       	ldi	r21, 0x00	; 0
    3d56:	b9 01       	movw	r22, r18
    3d58:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <itoa>
}
    3d5c:	2e 96       	adiw	r28, 0x0e	; 14
    3d5e:	cd bf       	out	0x3d, r28	; 61
    3d60:	de bf       	out	0x3e, r29	; 62
    3d62:	df 91       	pop	r29
    3d64:	cf 91       	pop	r28
    3d66:	ff 90       	pop	r15
    3d68:	ef 90       	pop	r14
    3d6a:	df 90       	pop	r13
    3d6c:	cf 90       	pop	r12
    3d6e:	08 95       	ret

00003d70 <__subsf3>:
    3d70:	50 58       	subi	r21, 0x80	; 128

00003d72 <__addsf3>:
    3d72:	bb 27       	eor	r27, r27
    3d74:	aa 27       	eor	r26, r26
    3d76:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <__addsf3x>
    3d7a:	0c 94 4a 20 	jmp	0x4094	; 0x4094 <__fp_round>
    3d7e:	0e 94 3c 20 	call	0x4078	; 0x4078 <__fp_pscA>
    3d82:	38 f0       	brcs	.+14     	; 0x3d92 <__addsf3+0x20>
    3d84:	0e 94 43 20 	call	0x4086	; 0x4086 <__fp_pscB>
    3d88:	20 f0       	brcs	.+8      	; 0x3d92 <__addsf3+0x20>
    3d8a:	39 f4       	brne	.+14     	; 0x3d9a <__addsf3+0x28>
    3d8c:	9f 3f       	cpi	r25, 0xFF	; 255
    3d8e:	19 f4       	brne	.+6      	; 0x3d96 <__addsf3+0x24>
    3d90:	26 f4       	brtc	.+8      	; 0x3d9a <__addsf3+0x28>
    3d92:	0c 94 39 20 	jmp	0x4072	; 0x4072 <__fp_nan>
    3d96:	0e f4       	brtc	.+2      	; 0x3d9a <__addsf3+0x28>
    3d98:	e0 95       	com	r30
    3d9a:	e7 fb       	bst	r30, 7
    3d9c:	0c 94 33 20 	jmp	0x4066	; 0x4066 <__fp_inf>

00003da0 <__addsf3x>:
    3da0:	e9 2f       	mov	r30, r25
    3da2:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__fp_split3>
    3da6:	58 f3       	brcs	.-42     	; 0x3d7e <__addsf3+0xc>
    3da8:	ba 17       	cp	r27, r26
    3daa:	62 07       	cpc	r22, r18
    3dac:	73 07       	cpc	r23, r19
    3dae:	84 07       	cpc	r24, r20
    3db0:	95 07       	cpc	r25, r21
    3db2:	20 f0       	brcs	.+8      	; 0x3dbc <__addsf3x+0x1c>
    3db4:	79 f4       	brne	.+30     	; 0x3dd4 <__addsf3x+0x34>
    3db6:	a6 f5       	brtc	.+104    	; 0x3e20 <__addsf3x+0x80>
    3db8:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__fp_zero>
    3dbc:	0e f4       	brtc	.+2      	; 0x3dc0 <__addsf3x+0x20>
    3dbe:	e0 95       	com	r30
    3dc0:	0b 2e       	mov	r0, r27
    3dc2:	ba 2f       	mov	r27, r26
    3dc4:	a0 2d       	mov	r26, r0
    3dc6:	0b 01       	movw	r0, r22
    3dc8:	b9 01       	movw	r22, r18
    3dca:	90 01       	movw	r18, r0
    3dcc:	0c 01       	movw	r0, r24
    3dce:	ca 01       	movw	r24, r20
    3dd0:	a0 01       	movw	r20, r0
    3dd2:	11 24       	eor	r1, r1
    3dd4:	ff 27       	eor	r31, r31
    3dd6:	59 1b       	sub	r21, r25
    3dd8:	99 f0       	breq	.+38     	; 0x3e00 <__addsf3x+0x60>
    3dda:	59 3f       	cpi	r21, 0xF9	; 249
    3ddc:	50 f4       	brcc	.+20     	; 0x3df2 <__addsf3x+0x52>
    3dde:	50 3e       	cpi	r21, 0xE0	; 224
    3de0:	68 f1       	brcs	.+90     	; 0x3e3c <__addsf3x+0x9c>
    3de2:	1a 16       	cp	r1, r26
    3de4:	f0 40       	sbci	r31, 0x00	; 0
    3de6:	a2 2f       	mov	r26, r18
    3de8:	23 2f       	mov	r18, r19
    3dea:	34 2f       	mov	r19, r20
    3dec:	44 27       	eor	r20, r20
    3dee:	58 5f       	subi	r21, 0xF8	; 248
    3df0:	f3 cf       	rjmp	.-26     	; 0x3dd8 <__addsf3x+0x38>
    3df2:	46 95       	lsr	r20
    3df4:	37 95       	ror	r19
    3df6:	27 95       	ror	r18
    3df8:	a7 95       	ror	r26
    3dfa:	f0 40       	sbci	r31, 0x00	; 0
    3dfc:	53 95       	inc	r21
    3dfe:	c9 f7       	brne	.-14     	; 0x3df2 <__addsf3x+0x52>
    3e00:	7e f4       	brtc	.+30     	; 0x3e20 <__addsf3x+0x80>
    3e02:	1f 16       	cp	r1, r31
    3e04:	ba 0b       	sbc	r27, r26
    3e06:	62 0b       	sbc	r22, r18
    3e08:	73 0b       	sbc	r23, r19
    3e0a:	84 0b       	sbc	r24, r20
    3e0c:	ba f0       	brmi	.+46     	; 0x3e3c <__addsf3x+0x9c>
    3e0e:	91 50       	subi	r25, 0x01	; 1
    3e10:	a1 f0       	breq	.+40     	; 0x3e3a <__addsf3x+0x9a>
    3e12:	ff 0f       	add	r31, r31
    3e14:	bb 1f       	adc	r27, r27
    3e16:	66 1f       	adc	r22, r22
    3e18:	77 1f       	adc	r23, r23
    3e1a:	88 1f       	adc	r24, r24
    3e1c:	c2 f7       	brpl	.-16     	; 0x3e0e <__addsf3x+0x6e>
    3e1e:	0e c0       	rjmp	.+28     	; 0x3e3c <__addsf3x+0x9c>
    3e20:	ba 0f       	add	r27, r26
    3e22:	62 1f       	adc	r22, r18
    3e24:	73 1f       	adc	r23, r19
    3e26:	84 1f       	adc	r24, r20
    3e28:	48 f4       	brcc	.+18     	; 0x3e3c <__addsf3x+0x9c>
    3e2a:	87 95       	ror	r24
    3e2c:	77 95       	ror	r23
    3e2e:	67 95       	ror	r22
    3e30:	b7 95       	ror	r27
    3e32:	f7 95       	ror	r31
    3e34:	9e 3f       	cpi	r25, 0xFE	; 254
    3e36:	08 f0       	brcs	.+2      	; 0x3e3a <__addsf3x+0x9a>
    3e38:	b0 cf       	rjmp	.-160    	; 0x3d9a <__addsf3+0x28>
    3e3a:	93 95       	inc	r25
    3e3c:	88 0f       	add	r24, r24
    3e3e:	08 f0       	brcs	.+2      	; 0x3e42 <__addsf3x+0xa2>
    3e40:	99 27       	eor	r25, r25
    3e42:	ee 0f       	add	r30, r30
    3e44:	97 95       	ror	r25
    3e46:	87 95       	ror	r24
    3e48:	08 95       	ret

00003e4a <__cmpsf2>:
    3e4a:	0e 94 0f 20 	call	0x401e	; 0x401e <__fp_cmp>
    3e4e:	08 f4       	brcc	.+2      	; 0x3e52 <__cmpsf2+0x8>
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	08 95       	ret

00003e54 <__divsf3>:
    3e54:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__divsf3x>
    3e58:	0c 94 4a 20 	jmp	0x4094	; 0x4094 <__fp_round>
    3e5c:	0e 94 43 20 	call	0x4086	; 0x4086 <__fp_pscB>
    3e60:	58 f0       	brcs	.+22     	; 0x3e78 <__divsf3+0x24>
    3e62:	0e 94 3c 20 	call	0x4078	; 0x4078 <__fp_pscA>
    3e66:	40 f0       	brcs	.+16     	; 0x3e78 <__divsf3+0x24>
    3e68:	29 f4       	brne	.+10     	; 0x3e74 <__divsf3+0x20>
    3e6a:	5f 3f       	cpi	r21, 0xFF	; 255
    3e6c:	29 f0       	breq	.+10     	; 0x3e78 <__divsf3+0x24>
    3e6e:	0c 94 33 20 	jmp	0x4066	; 0x4066 <__fp_inf>
    3e72:	51 11       	cpse	r21, r1
    3e74:	0c 94 7e 20 	jmp	0x40fc	; 0x40fc <__fp_szero>
    3e78:	0c 94 39 20 	jmp	0x4072	; 0x4072 <__fp_nan>

00003e7c <__divsf3x>:
    3e7c:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__fp_split3>
    3e80:	68 f3       	brcs	.-38     	; 0x3e5c <__divsf3+0x8>

00003e82 <__divsf3_pse>:
    3e82:	99 23       	and	r25, r25
    3e84:	b1 f3       	breq	.-20     	; 0x3e72 <__divsf3+0x1e>
    3e86:	55 23       	and	r21, r21
    3e88:	91 f3       	breq	.-28     	; 0x3e6e <__divsf3+0x1a>
    3e8a:	95 1b       	sub	r25, r21
    3e8c:	55 0b       	sbc	r21, r21
    3e8e:	bb 27       	eor	r27, r27
    3e90:	aa 27       	eor	r26, r26
    3e92:	62 17       	cp	r22, r18
    3e94:	73 07       	cpc	r23, r19
    3e96:	84 07       	cpc	r24, r20
    3e98:	38 f0       	brcs	.+14     	; 0x3ea8 <__divsf3_pse+0x26>
    3e9a:	9f 5f       	subi	r25, 0xFF	; 255
    3e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e9e:	22 0f       	add	r18, r18
    3ea0:	33 1f       	adc	r19, r19
    3ea2:	44 1f       	adc	r20, r20
    3ea4:	aa 1f       	adc	r26, r26
    3ea6:	a9 f3       	breq	.-22     	; 0x3e92 <__divsf3_pse+0x10>
    3ea8:	35 d0       	rcall	.+106    	; 0x3f14 <__divsf3_pse+0x92>
    3eaa:	0e 2e       	mov	r0, r30
    3eac:	3a f0       	brmi	.+14     	; 0x3ebc <__divsf3_pse+0x3a>
    3eae:	e0 e8       	ldi	r30, 0x80	; 128
    3eb0:	32 d0       	rcall	.+100    	; 0x3f16 <__divsf3_pse+0x94>
    3eb2:	91 50       	subi	r25, 0x01	; 1
    3eb4:	50 40       	sbci	r21, 0x00	; 0
    3eb6:	e6 95       	lsr	r30
    3eb8:	00 1c       	adc	r0, r0
    3eba:	ca f7       	brpl	.-14     	; 0x3eae <__divsf3_pse+0x2c>
    3ebc:	2b d0       	rcall	.+86     	; 0x3f14 <__divsf3_pse+0x92>
    3ebe:	fe 2f       	mov	r31, r30
    3ec0:	29 d0       	rcall	.+82     	; 0x3f14 <__divsf3_pse+0x92>
    3ec2:	66 0f       	add	r22, r22
    3ec4:	77 1f       	adc	r23, r23
    3ec6:	88 1f       	adc	r24, r24
    3ec8:	bb 1f       	adc	r27, r27
    3eca:	26 17       	cp	r18, r22
    3ecc:	37 07       	cpc	r19, r23
    3ece:	48 07       	cpc	r20, r24
    3ed0:	ab 07       	cpc	r26, r27
    3ed2:	b0 e8       	ldi	r27, 0x80	; 128
    3ed4:	09 f0       	breq	.+2      	; 0x3ed8 <__divsf3_pse+0x56>
    3ed6:	bb 0b       	sbc	r27, r27
    3ed8:	80 2d       	mov	r24, r0
    3eda:	bf 01       	movw	r22, r30
    3edc:	ff 27       	eor	r31, r31
    3ede:	93 58       	subi	r25, 0x83	; 131
    3ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ee2:	3a f0       	brmi	.+14     	; 0x3ef2 <__divsf3_pse+0x70>
    3ee4:	9e 3f       	cpi	r25, 0xFE	; 254
    3ee6:	51 05       	cpc	r21, r1
    3ee8:	78 f0       	brcs	.+30     	; 0x3f08 <__divsf3_pse+0x86>
    3eea:	0c 94 33 20 	jmp	0x4066	; 0x4066 <__fp_inf>
    3eee:	0c 94 7e 20 	jmp	0x40fc	; 0x40fc <__fp_szero>
    3ef2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ef4:	e4 f3       	brlt	.-8      	; 0x3eee <__divsf3_pse+0x6c>
    3ef6:	98 3e       	cpi	r25, 0xE8	; 232
    3ef8:	d4 f3       	brlt	.-12     	; 0x3eee <__divsf3_pse+0x6c>
    3efa:	86 95       	lsr	r24
    3efc:	77 95       	ror	r23
    3efe:	67 95       	ror	r22
    3f00:	b7 95       	ror	r27
    3f02:	f7 95       	ror	r31
    3f04:	9f 5f       	subi	r25, 0xFF	; 255
    3f06:	c9 f7       	brne	.-14     	; 0x3efa <__divsf3_pse+0x78>
    3f08:	88 0f       	add	r24, r24
    3f0a:	91 1d       	adc	r25, r1
    3f0c:	96 95       	lsr	r25
    3f0e:	87 95       	ror	r24
    3f10:	97 f9       	bld	r25, 7
    3f12:	08 95       	ret
    3f14:	e1 e0       	ldi	r30, 0x01	; 1
    3f16:	66 0f       	add	r22, r22
    3f18:	77 1f       	adc	r23, r23
    3f1a:	88 1f       	adc	r24, r24
    3f1c:	bb 1f       	adc	r27, r27
    3f1e:	62 17       	cp	r22, r18
    3f20:	73 07       	cpc	r23, r19
    3f22:	84 07       	cpc	r24, r20
    3f24:	ba 07       	cpc	r27, r26
    3f26:	20 f0       	brcs	.+8      	; 0x3f30 <__divsf3_pse+0xae>
    3f28:	62 1b       	sub	r22, r18
    3f2a:	73 0b       	sbc	r23, r19
    3f2c:	84 0b       	sbc	r24, r20
    3f2e:	ba 0b       	sbc	r27, r26
    3f30:	ee 1f       	adc	r30, r30
    3f32:	88 f7       	brcc	.-30     	; 0x3f16 <__divsf3_pse+0x94>
    3f34:	e0 95       	com	r30
    3f36:	08 95       	ret

00003f38 <__fixsfsi>:
    3f38:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <__fixunssfsi>
    3f3c:	68 94       	set
    3f3e:	b1 11       	cpse	r27, r1
    3f40:	0c 94 7e 20 	jmp	0x40fc	; 0x40fc <__fp_szero>
    3f44:	08 95       	ret

00003f46 <__fixunssfsi>:
    3f46:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__fp_splitA>
    3f4a:	88 f0       	brcs	.+34     	; 0x3f6e <__fixunssfsi+0x28>
    3f4c:	9f 57       	subi	r25, 0x7F	; 127
    3f4e:	98 f0       	brcs	.+38     	; 0x3f76 <__fixunssfsi+0x30>
    3f50:	b9 2f       	mov	r27, r25
    3f52:	99 27       	eor	r25, r25
    3f54:	b7 51       	subi	r27, 0x17	; 23
    3f56:	b0 f0       	brcs	.+44     	; 0x3f84 <__fixunssfsi+0x3e>
    3f58:	e1 f0       	breq	.+56     	; 0x3f92 <__fixunssfsi+0x4c>
    3f5a:	66 0f       	add	r22, r22
    3f5c:	77 1f       	adc	r23, r23
    3f5e:	88 1f       	adc	r24, r24
    3f60:	99 1f       	adc	r25, r25
    3f62:	1a f0       	brmi	.+6      	; 0x3f6a <__fixunssfsi+0x24>
    3f64:	ba 95       	dec	r27
    3f66:	c9 f7       	brne	.-14     	; 0x3f5a <__fixunssfsi+0x14>
    3f68:	14 c0       	rjmp	.+40     	; 0x3f92 <__fixunssfsi+0x4c>
    3f6a:	b1 30       	cpi	r27, 0x01	; 1
    3f6c:	91 f0       	breq	.+36     	; 0x3f92 <__fixunssfsi+0x4c>
    3f6e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__fp_zero>
    3f72:	b1 e0       	ldi	r27, 0x01	; 1
    3f74:	08 95       	ret
    3f76:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__fp_zero>
    3f7a:	67 2f       	mov	r22, r23
    3f7c:	78 2f       	mov	r23, r24
    3f7e:	88 27       	eor	r24, r24
    3f80:	b8 5f       	subi	r27, 0xF8	; 248
    3f82:	39 f0       	breq	.+14     	; 0x3f92 <__fixunssfsi+0x4c>
    3f84:	b9 3f       	cpi	r27, 0xF9	; 249
    3f86:	cc f3       	brlt	.-14     	; 0x3f7a <__fixunssfsi+0x34>
    3f88:	86 95       	lsr	r24
    3f8a:	77 95       	ror	r23
    3f8c:	67 95       	ror	r22
    3f8e:	b3 95       	inc	r27
    3f90:	d9 f7       	brne	.-10     	; 0x3f88 <__fixunssfsi+0x42>
    3f92:	3e f4       	brtc	.+14     	; 0x3fa2 <__fixunssfsi+0x5c>
    3f94:	90 95       	com	r25
    3f96:	80 95       	com	r24
    3f98:	70 95       	com	r23
    3f9a:	61 95       	neg	r22
    3f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9e:	8f 4f       	sbci	r24, 0xFF	; 255
    3fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fa2:	08 95       	ret

00003fa4 <__floatunsisf>:
    3fa4:	e8 94       	clt
    3fa6:	09 c0       	rjmp	.+18     	; 0x3fba <__floatsisf+0x12>

00003fa8 <__floatsisf>:
    3fa8:	97 fb       	bst	r25, 7
    3faa:	3e f4       	brtc	.+14     	; 0x3fba <__floatsisf+0x12>
    3fac:	90 95       	com	r25
    3fae:	80 95       	com	r24
    3fb0:	70 95       	com	r23
    3fb2:	61 95       	neg	r22
    3fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb6:	8f 4f       	sbci	r24, 0xFF	; 255
    3fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3fba:	99 23       	and	r25, r25
    3fbc:	a9 f0       	breq	.+42     	; 0x3fe8 <__floatsisf+0x40>
    3fbe:	f9 2f       	mov	r31, r25
    3fc0:	96 e9       	ldi	r25, 0x96	; 150
    3fc2:	bb 27       	eor	r27, r27
    3fc4:	93 95       	inc	r25
    3fc6:	f6 95       	lsr	r31
    3fc8:	87 95       	ror	r24
    3fca:	77 95       	ror	r23
    3fcc:	67 95       	ror	r22
    3fce:	b7 95       	ror	r27
    3fd0:	f1 11       	cpse	r31, r1
    3fd2:	f8 cf       	rjmp	.-16     	; 0x3fc4 <__floatsisf+0x1c>
    3fd4:	fa f4       	brpl	.+62     	; 0x4014 <__stack+0x15>
    3fd6:	bb 0f       	add	r27, r27
    3fd8:	11 f4       	brne	.+4      	; 0x3fde <__floatsisf+0x36>
    3fda:	60 ff       	sbrs	r22, 0
    3fdc:	1b c0       	rjmp	.+54     	; 0x4014 <__stack+0x15>
    3fde:	6f 5f       	subi	r22, 0xFF	; 255
    3fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe2:	8f 4f       	sbci	r24, 0xFF	; 255
    3fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe6:	16 c0       	rjmp	.+44     	; 0x4014 <__stack+0x15>
    3fe8:	88 23       	and	r24, r24
    3fea:	11 f0       	breq	.+4      	; 0x3ff0 <__floatsisf+0x48>
    3fec:	96 e9       	ldi	r25, 0x96	; 150
    3fee:	11 c0       	rjmp	.+34     	; 0x4012 <__stack+0x13>
    3ff0:	77 23       	and	r23, r23
    3ff2:	21 f0       	breq	.+8      	; 0x3ffc <__floatsisf+0x54>
    3ff4:	9e e8       	ldi	r25, 0x8E	; 142
    3ff6:	87 2f       	mov	r24, r23
    3ff8:	76 2f       	mov	r23, r22
    3ffa:	05 c0       	rjmp	.+10     	; 0x4006 <__stack+0x7>
    3ffc:	66 23       	and	r22, r22
    3ffe:	71 f0       	breq	.+28     	; 0x401c <__stack+0x1d>
    4000:	96 e8       	ldi	r25, 0x86	; 134
    4002:	86 2f       	mov	r24, r22
    4004:	70 e0       	ldi	r23, 0x00	; 0
    4006:	60 e0       	ldi	r22, 0x00	; 0
    4008:	2a f0       	brmi	.+10     	; 0x4014 <__stack+0x15>
    400a:	9a 95       	dec	r25
    400c:	66 0f       	add	r22, r22
    400e:	77 1f       	adc	r23, r23
    4010:	88 1f       	adc	r24, r24
    4012:	da f7       	brpl	.-10     	; 0x400a <__stack+0xb>
    4014:	88 0f       	add	r24, r24
    4016:	96 95       	lsr	r25
    4018:	87 95       	ror	r24
    401a:	97 f9       	bld	r25, 7
    401c:	08 95       	ret

0000401e <__fp_cmp>:
    401e:	99 0f       	add	r25, r25
    4020:	00 08       	sbc	r0, r0
    4022:	55 0f       	add	r21, r21
    4024:	aa 0b       	sbc	r26, r26
    4026:	e0 e8       	ldi	r30, 0x80	; 128
    4028:	fe ef       	ldi	r31, 0xFE	; 254
    402a:	16 16       	cp	r1, r22
    402c:	17 06       	cpc	r1, r23
    402e:	e8 07       	cpc	r30, r24
    4030:	f9 07       	cpc	r31, r25
    4032:	c0 f0       	brcs	.+48     	; 0x4064 <__fp_cmp+0x46>
    4034:	12 16       	cp	r1, r18
    4036:	13 06       	cpc	r1, r19
    4038:	e4 07       	cpc	r30, r20
    403a:	f5 07       	cpc	r31, r21
    403c:	98 f0       	brcs	.+38     	; 0x4064 <__fp_cmp+0x46>
    403e:	62 1b       	sub	r22, r18
    4040:	73 0b       	sbc	r23, r19
    4042:	84 0b       	sbc	r24, r20
    4044:	95 0b       	sbc	r25, r21
    4046:	39 f4       	brne	.+14     	; 0x4056 <__fp_cmp+0x38>
    4048:	0a 26       	eor	r0, r26
    404a:	61 f0       	breq	.+24     	; 0x4064 <__fp_cmp+0x46>
    404c:	23 2b       	or	r18, r19
    404e:	24 2b       	or	r18, r20
    4050:	25 2b       	or	r18, r21
    4052:	21 f4       	brne	.+8      	; 0x405c <__fp_cmp+0x3e>
    4054:	08 95       	ret
    4056:	0a 26       	eor	r0, r26
    4058:	09 f4       	brne	.+2      	; 0x405c <__fp_cmp+0x3e>
    405a:	a1 40       	sbci	r26, 0x01	; 1
    405c:	a6 95       	lsr	r26
    405e:	8f ef       	ldi	r24, 0xFF	; 255
    4060:	81 1d       	adc	r24, r1
    4062:	81 1d       	adc	r24, r1
    4064:	08 95       	ret

00004066 <__fp_inf>:
    4066:	97 f9       	bld	r25, 7
    4068:	9f 67       	ori	r25, 0x7F	; 127
    406a:	80 e8       	ldi	r24, 0x80	; 128
    406c:	70 e0       	ldi	r23, 0x00	; 0
    406e:	60 e0       	ldi	r22, 0x00	; 0
    4070:	08 95       	ret

00004072 <__fp_nan>:
    4072:	9f ef       	ldi	r25, 0xFF	; 255
    4074:	80 ec       	ldi	r24, 0xC0	; 192
    4076:	08 95       	ret

00004078 <__fp_pscA>:
    4078:	00 24       	eor	r0, r0
    407a:	0a 94       	dec	r0
    407c:	16 16       	cp	r1, r22
    407e:	17 06       	cpc	r1, r23
    4080:	18 06       	cpc	r1, r24
    4082:	09 06       	cpc	r0, r25
    4084:	08 95       	ret

00004086 <__fp_pscB>:
    4086:	00 24       	eor	r0, r0
    4088:	0a 94       	dec	r0
    408a:	12 16       	cp	r1, r18
    408c:	13 06       	cpc	r1, r19
    408e:	14 06       	cpc	r1, r20
    4090:	05 06       	cpc	r0, r21
    4092:	08 95       	ret

00004094 <__fp_round>:
    4094:	09 2e       	mov	r0, r25
    4096:	03 94       	inc	r0
    4098:	00 0c       	add	r0, r0
    409a:	11 f4       	brne	.+4      	; 0x40a0 <__fp_round+0xc>
    409c:	88 23       	and	r24, r24
    409e:	52 f0       	brmi	.+20     	; 0x40b4 <__fp_round+0x20>
    40a0:	bb 0f       	add	r27, r27
    40a2:	40 f4       	brcc	.+16     	; 0x40b4 <__fp_round+0x20>
    40a4:	bf 2b       	or	r27, r31
    40a6:	11 f4       	brne	.+4      	; 0x40ac <__fp_round+0x18>
    40a8:	60 ff       	sbrs	r22, 0
    40aa:	04 c0       	rjmp	.+8      	; 0x40b4 <__fp_round+0x20>
    40ac:	6f 5f       	subi	r22, 0xFF	; 255
    40ae:	7f 4f       	sbci	r23, 0xFF	; 255
    40b0:	8f 4f       	sbci	r24, 0xFF	; 255
    40b2:	9f 4f       	sbci	r25, 0xFF	; 255
    40b4:	08 95       	ret

000040b6 <__fp_split3>:
    40b6:	57 fd       	sbrc	r21, 7
    40b8:	90 58       	subi	r25, 0x80	; 128
    40ba:	44 0f       	add	r20, r20
    40bc:	55 1f       	adc	r21, r21
    40be:	59 f0       	breq	.+22     	; 0x40d6 <__fp_splitA+0x10>
    40c0:	5f 3f       	cpi	r21, 0xFF	; 255
    40c2:	71 f0       	breq	.+28     	; 0x40e0 <__fp_splitA+0x1a>
    40c4:	47 95       	ror	r20

000040c6 <__fp_splitA>:
    40c6:	88 0f       	add	r24, r24
    40c8:	97 fb       	bst	r25, 7
    40ca:	99 1f       	adc	r25, r25
    40cc:	61 f0       	breq	.+24     	; 0x40e6 <__fp_splitA+0x20>
    40ce:	9f 3f       	cpi	r25, 0xFF	; 255
    40d0:	79 f0       	breq	.+30     	; 0x40f0 <__fp_splitA+0x2a>
    40d2:	87 95       	ror	r24
    40d4:	08 95       	ret
    40d6:	12 16       	cp	r1, r18
    40d8:	13 06       	cpc	r1, r19
    40da:	14 06       	cpc	r1, r20
    40dc:	55 1f       	adc	r21, r21
    40de:	f2 cf       	rjmp	.-28     	; 0x40c4 <__fp_split3+0xe>
    40e0:	46 95       	lsr	r20
    40e2:	f1 df       	rcall	.-30     	; 0x40c6 <__fp_splitA>
    40e4:	08 c0       	rjmp	.+16     	; 0x40f6 <__fp_splitA+0x30>
    40e6:	16 16       	cp	r1, r22
    40e8:	17 06       	cpc	r1, r23
    40ea:	18 06       	cpc	r1, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	f1 cf       	rjmp	.-30     	; 0x40d2 <__fp_splitA+0xc>
    40f0:	86 95       	lsr	r24
    40f2:	71 05       	cpc	r23, r1
    40f4:	61 05       	cpc	r22, r1
    40f6:	08 94       	sec
    40f8:	08 95       	ret

000040fa <__fp_zero>:
    40fa:	e8 94       	clt

000040fc <__fp_szero>:
    40fc:	bb 27       	eor	r27, r27
    40fe:	66 27       	eor	r22, r22
    4100:	77 27       	eor	r23, r23
    4102:	cb 01       	movw	r24, r22
    4104:	97 f9       	bld	r25, 7
    4106:	08 95       	ret

00004108 <__gesf2>:
    4108:	0e 94 0f 20 	call	0x401e	; 0x401e <__fp_cmp>
    410c:	08 f4       	brcc	.+2      	; 0x4110 <__gesf2+0x8>
    410e:	8f ef       	ldi	r24, 0xFF	; 255
    4110:	08 95       	ret

00004112 <__mulsf3>:
    4112:	0e 94 9c 20 	call	0x4138	; 0x4138 <__mulsf3x>
    4116:	0c 94 4a 20 	jmp	0x4094	; 0x4094 <__fp_round>
    411a:	0e 94 3c 20 	call	0x4078	; 0x4078 <__fp_pscA>
    411e:	38 f0       	brcs	.+14     	; 0x412e <__mulsf3+0x1c>
    4120:	0e 94 43 20 	call	0x4086	; 0x4086 <__fp_pscB>
    4124:	20 f0       	brcs	.+8      	; 0x412e <__mulsf3+0x1c>
    4126:	95 23       	and	r25, r21
    4128:	11 f0       	breq	.+4      	; 0x412e <__mulsf3+0x1c>
    412a:	0c 94 33 20 	jmp	0x4066	; 0x4066 <__fp_inf>
    412e:	0c 94 39 20 	jmp	0x4072	; 0x4072 <__fp_nan>
    4132:	11 24       	eor	r1, r1
    4134:	0c 94 7e 20 	jmp	0x40fc	; 0x40fc <__fp_szero>

00004138 <__mulsf3x>:
    4138:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__fp_split3>
    413c:	70 f3       	brcs	.-36     	; 0x411a <__mulsf3+0x8>

0000413e <__mulsf3_pse>:
    413e:	95 9f       	mul	r25, r21
    4140:	c1 f3       	breq	.-16     	; 0x4132 <__mulsf3+0x20>
    4142:	95 0f       	add	r25, r21
    4144:	50 e0       	ldi	r21, 0x00	; 0
    4146:	55 1f       	adc	r21, r21
    4148:	62 9f       	mul	r22, r18
    414a:	f0 01       	movw	r30, r0
    414c:	72 9f       	mul	r23, r18
    414e:	bb 27       	eor	r27, r27
    4150:	f0 0d       	add	r31, r0
    4152:	b1 1d       	adc	r27, r1
    4154:	63 9f       	mul	r22, r19
    4156:	aa 27       	eor	r26, r26
    4158:	f0 0d       	add	r31, r0
    415a:	b1 1d       	adc	r27, r1
    415c:	aa 1f       	adc	r26, r26
    415e:	64 9f       	mul	r22, r20
    4160:	66 27       	eor	r22, r22
    4162:	b0 0d       	add	r27, r0
    4164:	a1 1d       	adc	r26, r1
    4166:	66 1f       	adc	r22, r22
    4168:	82 9f       	mul	r24, r18
    416a:	22 27       	eor	r18, r18
    416c:	b0 0d       	add	r27, r0
    416e:	a1 1d       	adc	r26, r1
    4170:	62 1f       	adc	r22, r18
    4172:	73 9f       	mul	r23, r19
    4174:	b0 0d       	add	r27, r0
    4176:	a1 1d       	adc	r26, r1
    4178:	62 1f       	adc	r22, r18
    417a:	83 9f       	mul	r24, r19
    417c:	a0 0d       	add	r26, r0
    417e:	61 1d       	adc	r22, r1
    4180:	22 1f       	adc	r18, r18
    4182:	74 9f       	mul	r23, r20
    4184:	33 27       	eor	r19, r19
    4186:	a0 0d       	add	r26, r0
    4188:	61 1d       	adc	r22, r1
    418a:	23 1f       	adc	r18, r19
    418c:	84 9f       	mul	r24, r20
    418e:	60 0d       	add	r22, r0
    4190:	21 1d       	adc	r18, r1
    4192:	82 2f       	mov	r24, r18
    4194:	76 2f       	mov	r23, r22
    4196:	6a 2f       	mov	r22, r26
    4198:	11 24       	eor	r1, r1
    419a:	9f 57       	subi	r25, 0x7F	; 127
    419c:	50 40       	sbci	r21, 0x00	; 0
    419e:	9a f0       	brmi	.+38     	; 0x41c6 <__mulsf3_pse+0x88>
    41a0:	f1 f0       	breq	.+60     	; 0x41de <__mulsf3_pse+0xa0>
    41a2:	88 23       	and	r24, r24
    41a4:	4a f0       	brmi	.+18     	; 0x41b8 <__mulsf3_pse+0x7a>
    41a6:	ee 0f       	add	r30, r30
    41a8:	ff 1f       	adc	r31, r31
    41aa:	bb 1f       	adc	r27, r27
    41ac:	66 1f       	adc	r22, r22
    41ae:	77 1f       	adc	r23, r23
    41b0:	88 1f       	adc	r24, r24
    41b2:	91 50       	subi	r25, 0x01	; 1
    41b4:	50 40       	sbci	r21, 0x00	; 0
    41b6:	a9 f7       	brne	.-22     	; 0x41a2 <__mulsf3_pse+0x64>
    41b8:	9e 3f       	cpi	r25, 0xFE	; 254
    41ba:	51 05       	cpc	r21, r1
    41bc:	80 f0       	brcs	.+32     	; 0x41de <__mulsf3_pse+0xa0>
    41be:	0c 94 33 20 	jmp	0x4066	; 0x4066 <__fp_inf>
    41c2:	0c 94 7e 20 	jmp	0x40fc	; 0x40fc <__fp_szero>
    41c6:	5f 3f       	cpi	r21, 0xFF	; 255
    41c8:	e4 f3       	brlt	.-8      	; 0x41c2 <__mulsf3_pse+0x84>
    41ca:	98 3e       	cpi	r25, 0xE8	; 232
    41cc:	d4 f3       	brlt	.-12     	; 0x41c2 <__mulsf3_pse+0x84>
    41ce:	86 95       	lsr	r24
    41d0:	77 95       	ror	r23
    41d2:	67 95       	ror	r22
    41d4:	b7 95       	ror	r27
    41d6:	f7 95       	ror	r31
    41d8:	e7 95       	ror	r30
    41da:	9f 5f       	subi	r25, 0xFF	; 255
    41dc:	c1 f7       	brne	.-16     	; 0x41ce <__mulsf3_pse+0x90>
    41de:	fe 2b       	or	r31, r30
    41e0:	88 0f       	add	r24, r24
    41e2:	91 1d       	adc	r25, r1
    41e4:	96 95       	lsr	r25
    41e6:	87 95       	ror	r24
    41e8:	97 f9       	bld	r25, 7
    41ea:	08 95       	ret

000041ec <vfprintf>:
    41ec:	2f 92       	push	r2
    41ee:	3f 92       	push	r3
    41f0:	4f 92       	push	r4
    41f2:	5f 92       	push	r5
    41f4:	6f 92       	push	r6
    41f6:	7f 92       	push	r7
    41f8:	8f 92       	push	r8
    41fa:	9f 92       	push	r9
    41fc:	af 92       	push	r10
    41fe:	bf 92       	push	r11
    4200:	cf 92       	push	r12
    4202:	df 92       	push	r13
    4204:	ef 92       	push	r14
    4206:	ff 92       	push	r15
    4208:	0f 93       	push	r16
    420a:	1f 93       	push	r17
    420c:	cf 93       	push	r28
    420e:	df 93       	push	r29
    4210:	cd b7       	in	r28, 0x3d	; 61
    4212:	de b7       	in	r29, 0x3e	; 62
    4214:	60 97       	sbiw	r28, 0x10	; 16
    4216:	cd bf       	out	0x3d, r28	; 61
    4218:	de bf       	out	0x3e, r29	; 62
    421a:	7c 01       	movw	r14, r24
    421c:	1b 01       	movw	r2, r22
    421e:	6a 01       	movw	r12, r20
    4220:	fc 01       	movw	r30, r24
    4222:	16 82       	std	Z+6, r1	; 0x06
    4224:	17 82       	std	Z+7, r1	; 0x07
    4226:	83 81       	ldd	r24, Z+3	; 0x03
    4228:	81 ff       	sbrs	r24, 1
    422a:	44 c3       	rjmp	.+1672   	; 0x48b4 <vfprintf+0x6c8>
    422c:	9e 01       	movw	r18, r28
    422e:	2f 5f       	subi	r18, 0xFF	; 255
    4230:	3f 4f       	sbci	r19, 0xFF	; 255
    4232:	39 01       	movw	r6, r18
    4234:	f7 01       	movw	r30, r14
    4236:	93 81       	ldd	r25, Z+3	; 0x03
    4238:	f1 01       	movw	r30, r2
    423a:	93 fd       	sbrc	r25, 3
    423c:	85 91       	lpm	r24, Z+
    423e:	93 ff       	sbrs	r25, 3
    4240:	81 91       	ld	r24, Z+
    4242:	1f 01       	movw	r2, r30
    4244:	88 23       	and	r24, r24
    4246:	09 f4       	brne	.+2      	; 0x424a <vfprintf+0x5e>
    4248:	31 c3       	rjmp	.+1634   	; 0x48ac <vfprintf+0x6c0>
    424a:	85 32       	cpi	r24, 0x25	; 37
    424c:	39 f4       	brne	.+14     	; 0x425c <vfprintf+0x70>
    424e:	93 fd       	sbrc	r25, 3
    4250:	85 91       	lpm	r24, Z+
    4252:	93 ff       	sbrs	r25, 3
    4254:	81 91       	ld	r24, Z+
    4256:	1f 01       	movw	r2, r30
    4258:	85 32       	cpi	r24, 0x25	; 37
    425a:	39 f4       	brne	.+14     	; 0x426a <vfprintf+0x7e>
    425c:	b7 01       	movw	r22, r14
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    4264:	56 01       	movw	r10, r12
    4266:	65 01       	movw	r12, r10
    4268:	e5 cf       	rjmp	.-54     	; 0x4234 <vfprintf+0x48>
    426a:	10 e0       	ldi	r17, 0x00	; 0
    426c:	51 2c       	mov	r5, r1
    426e:	91 2c       	mov	r9, r1
    4270:	ff e1       	ldi	r31, 0x1F	; 31
    4272:	f9 15       	cp	r31, r9
    4274:	d8 f0       	brcs	.+54     	; 0x42ac <vfprintf+0xc0>
    4276:	8b 32       	cpi	r24, 0x2B	; 43
    4278:	79 f0       	breq	.+30     	; 0x4298 <vfprintf+0xac>
    427a:	38 f4       	brcc	.+14     	; 0x428a <vfprintf+0x9e>
    427c:	80 32       	cpi	r24, 0x20	; 32
    427e:	79 f0       	breq	.+30     	; 0x429e <vfprintf+0xb2>
    4280:	83 32       	cpi	r24, 0x23	; 35
    4282:	a1 f4       	brne	.+40     	; 0x42ac <vfprintf+0xc0>
    4284:	f9 2d       	mov	r31, r9
    4286:	f0 61       	ori	r31, 0x10	; 16
    4288:	2e c0       	rjmp	.+92     	; 0x42e6 <vfprintf+0xfa>
    428a:	8d 32       	cpi	r24, 0x2D	; 45
    428c:	61 f0       	breq	.+24     	; 0x42a6 <vfprintf+0xba>
    428e:	80 33       	cpi	r24, 0x30	; 48
    4290:	69 f4       	brne	.+26     	; 0x42ac <vfprintf+0xc0>
    4292:	29 2d       	mov	r18, r9
    4294:	21 60       	ori	r18, 0x01	; 1
    4296:	2d c0       	rjmp	.+90     	; 0x42f2 <vfprintf+0x106>
    4298:	39 2d       	mov	r19, r9
    429a:	32 60       	ori	r19, 0x02	; 2
    429c:	93 2e       	mov	r9, r19
    429e:	89 2d       	mov	r24, r9
    42a0:	84 60       	ori	r24, 0x04	; 4
    42a2:	98 2e       	mov	r9, r24
    42a4:	2a c0       	rjmp	.+84     	; 0x42fa <vfprintf+0x10e>
    42a6:	e9 2d       	mov	r30, r9
    42a8:	e8 60       	ori	r30, 0x08	; 8
    42aa:	15 c0       	rjmp	.+42     	; 0x42d6 <vfprintf+0xea>
    42ac:	97 fc       	sbrc	r9, 7
    42ae:	2d c0       	rjmp	.+90     	; 0x430a <vfprintf+0x11e>
    42b0:	20 ed       	ldi	r18, 0xD0	; 208
    42b2:	28 0f       	add	r18, r24
    42b4:	2a 30       	cpi	r18, 0x0A	; 10
    42b6:	88 f4       	brcc	.+34     	; 0x42da <vfprintf+0xee>
    42b8:	96 fe       	sbrs	r9, 6
    42ba:	06 c0       	rjmp	.+12     	; 0x42c8 <vfprintf+0xdc>
    42bc:	3a e0       	ldi	r19, 0x0A	; 10
    42be:	13 9f       	mul	r17, r19
    42c0:	20 0d       	add	r18, r0
    42c2:	11 24       	eor	r1, r1
    42c4:	12 2f       	mov	r17, r18
    42c6:	19 c0       	rjmp	.+50     	; 0x42fa <vfprintf+0x10e>
    42c8:	8a e0       	ldi	r24, 0x0A	; 10
    42ca:	58 9e       	mul	r5, r24
    42cc:	20 0d       	add	r18, r0
    42ce:	11 24       	eor	r1, r1
    42d0:	52 2e       	mov	r5, r18
    42d2:	e9 2d       	mov	r30, r9
    42d4:	e0 62       	ori	r30, 0x20	; 32
    42d6:	9e 2e       	mov	r9, r30
    42d8:	10 c0       	rjmp	.+32     	; 0x42fa <vfprintf+0x10e>
    42da:	8e 32       	cpi	r24, 0x2E	; 46
    42dc:	31 f4       	brne	.+12     	; 0x42ea <vfprintf+0xfe>
    42de:	96 fc       	sbrc	r9, 6
    42e0:	e5 c2       	rjmp	.+1482   	; 0x48ac <vfprintf+0x6c0>
    42e2:	f9 2d       	mov	r31, r9
    42e4:	f0 64       	ori	r31, 0x40	; 64
    42e6:	9f 2e       	mov	r9, r31
    42e8:	08 c0       	rjmp	.+16     	; 0x42fa <vfprintf+0x10e>
    42ea:	8c 36       	cpi	r24, 0x6C	; 108
    42ec:	21 f4       	brne	.+8      	; 0x42f6 <vfprintf+0x10a>
    42ee:	29 2d       	mov	r18, r9
    42f0:	20 68       	ori	r18, 0x80	; 128
    42f2:	92 2e       	mov	r9, r18
    42f4:	02 c0       	rjmp	.+4      	; 0x42fa <vfprintf+0x10e>
    42f6:	88 36       	cpi	r24, 0x68	; 104
    42f8:	41 f4       	brne	.+16     	; 0x430a <vfprintf+0x11e>
    42fa:	f1 01       	movw	r30, r2
    42fc:	93 fd       	sbrc	r25, 3
    42fe:	85 91       	lpm	r24, Z+
    4300:	93 ff       	sbrs	r25, 3
    4302:	81 91       	ld	r24, Z+
    4304:	1f 01       	movw	r2, r30
    4306:	81 11       	cpse	r24, r1
    4308:	b3 cf       	rjmp	.-154    	; 0x4270 <vfprintf+0x84>
    430a:	9b eb       	ldi	r25, 0xBB	; 187
    430c:	98 0f       	add	r25, r24
    430e:	93 30       	cpi	r25, 0x03	; 3
    4310:	20 f4       	brcc	.+8      	; 0x431a <vfprintf+0x12e>
    4312:	99 2d       	mov	r25, r9
    4314:	90 61       	ori	r25, 0x10	; 16
    4316:	80 5e       	subi	r24, 0xE0	; 224
    4318:	07 c0       	rjmp	.+14     	; 0x4328 <vfprintf+0x13c>
    431a:	9b e9       	ldi	r25, 0x9B	; 155
    431c:	98 0f       	add	r25, r24
    431e:	93 30       	cpi	r25, 0x03	; 3
    4320:	08 f0       	brcs	.+2      	; 0x4324 <vfprintf+0x138>
    4322:	66 c1       	rjmp	.+716    	; 0x45f0 <vfprintf+0x404>
    4324:	99 2d       	mov	r25, r9
    4326:	9f 7e       	andi	r25, 0xEF	; 239
    4328:	96 ff       	sbrs	r25, 6
    432a:	16 e0       	ldi	r17, 0x06	; 6
    432c:	9f 73       	andi	r25, 0x3F	; 63
    432e:	99 2e       	mov	r9, r25
    4330:	85 36       	cpi	r24, 0x65	; 101
    4332:	19 f4       	brne	.+6      	; 0x433a <vfprintf+0x14e>
    4334:	90 64       	ori	r25, 0x40	; 64
    4336:	99 2e       	mov	r9, r25
    4338:	08 c0       	rjmp	.+16     	; 0x434a <vfprintf+0x15e>
    433a:	86 36       	cpi	r24, 0x66	; 102
    433c:	21 f4       	brne	.+8      	; 0x4346 <vfprintf+0x15a>
    433e:	39 2f       	mov	r19, r25
    4340:	30 68       	ori	r19, 0x80	; 128
    4342:	93 2e       	mov	r9, r19
    4344:	02 c0       	rjmp	.+4      	; 0x434a <vfprintf+0x15e>
    4346:	11 11       	cpse	r17, r1
    4348:	11 50       	subi	r17, 0x01	; 1
    434a:	97 fe       	sbrs	r9, 7
    434c:	07 c0       	rjmp	.+14     	; 0x435c <vfprintf+0x170>
    434e:	1c 33       	cpi	r17, 0x3C	; 60
    4350:	50 f4       	brcc	.+20     	; 0x4366 <vfprintf+0x17a>
    4352:	44 24       	eor	r4, r4
    4354:	43 94       	inc	r4
    4356:	41 0e       	add	r4, r17
    4358:	27 e0       	ldi	r18, 0x07	; 7
    435a:	0b c0       	rjmp	.+22     	; 0x4372 <vfprintf+0x186>
    435c:	18 30       	cpi	r17, 0x08	; 8
    435e:	38 f0       	brcs	.+14     	; 0x436e <vfprintf+0x182>
    4360:	27 e0       	ldi	r18, 0x07	; 7
    4362:	17 e0       	ldi	r17, 0x07	; 7
    4364:	05 c0       	rjmp	.+10     	; 0x4370 <vfprintf+0x184>
    4366:	27 e0       	ldi	r18, 0x07	; 7
    4368:	9c e3       	ldi	r25, 0x3C	; 60
    436a:	49 2e       	mov	r4, r25
    436c:	02 c0       	rjmp	.+4      	; 0x4372 <vfprintf+0x186>
    436e:	21 2f       	mov	r18, r17
    4370:	41 2c       	mov	r4, r1
    4372:	56 01       	movw	r10, r12
    4374:	84 e0       	ldi	r24, 0x04	; 4
    4376:	a8 0e       	add	r10, r24
    4378:	b1 1c       	adc	r11, r1
    437a:	f6 01       	movw	r30, r12
    437c:	60 81       	ld	r22, Z
    437e:	71 81       	ldd	r23, Z+1	; 0x01
    4380:	82 81       	ldd	r24, Z+2	; 0x02
    4382:	93 81       	ldd	r25, Z+3	; 0x03
    4384:	04 2d       	mov	r16, r4
    4386:	a3 01       	movw	r20, r6
    4388:	0e 94 9e 24 	call	0x493c	; 0x493c <__ftoa_engine>
    438c:	6c 01       	movw	r12, r24
    438e:	f9 81       	ldd	r31, Y+1	; 0x01
    4390:	fc 87       	std	Y+12, r31	; 0x0c
    4392:	f0 ff       	sbrs	r31, 0
    4394:	02 c0       	rjmp	.+4      	; 0x439a <vfprintf+0x1ae>
    4396:	f3 ff       	sbrs	r31, 3
    4398:	06 c0       	rjmp	.+12     	; 0x43a6 <vfprintf+0x1ba>
    439a:	91 fc       	sbrc	r9, 1
    439c:	06 c0       	rjmp	.+12     	; 0x43aa <vfprintf+0x1be>
    439e:	92 fe       	sbrs	r9, 2
    43a0:	06 c0       	rjmp	.+12     	; 0x43ae <vfprintf+0x1c2>
    43a2:	00 e2       	ldi	r16, 0x20	; 32
    43a4:	05 c0       	rjmp	.+10     	; 0x43b0 <vfprintf+0x1c4>
    43a6:	0d e2       	ldi	r16, 0x2D	; 45
    43a8:	03 c0       	rjmp	.+6      	; 0x43b0 <vfprintf+0x1c4>
    43aa:	0b e2       	ldi	r16, 0x2B	; 43
    43ac:	01 c0       	rjmp	.+2      	; 0x43b0 <vfprintf+0x1c4>
    43ae:	00 e0       	ldi	r16, 0x00	; 0
    43b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    43b2:	8c 70       	andi	r24, 0x0C	; 12
    43b4:	19 f0       	breq	.+6      	; 0x43bc <vfprintf+0x1d0>
    43b6:	01 11       	cpse	r16, r1
    43b8:	5a c2       	rjmp	.+1204   	; 0x486e <vfprintf+0x682>
    43ba:	9b c2       	rjmp	.+1334   	; 0x48f2 <vfprintf+0x706>
    43bc:	97 fe       	sbrs	r9, 7
    43be:	10 c0       	rjmp	.+32     	; 0x43e0 <vfprintf+0x1f4>
    43c0:	4c 0c       	add	r4, r12
    43c2:	fc 85       	ldd	r31, Y+12	; 0x0c
    43c4:	f4 ff       	sbrs	r31, 4
    43c6:	04 c0       	rjmp	.+8      	; 0x43d0 <vfprintf+0x1e4>
    43c8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ca:	81 33       	cpi	r24, 0x31	; 49
    43cc:	09 f4       	brne	.+2      	; 0x43d0 <vfprintf+0x1e4>
    43ce:	4a 94       	dec	r4
    43d0:	14 14       	cp	r1, r4
    43d2:	74 f5       	brge	.+92     	; 0x4430 <vfprintf+0x244>
    43d4:	28 e0       	ldi	r18, 0x08	; 8
    43d6:	24 15       	cp	r18, r4
    43d8:	78 f5       	brcc	.+94     	; 0x4438 <vfprintf+0x24c>
    43da:	88 e0       	ldi	r24, 0x08	; 8
    43dc:	48 2e       	mov	r4, r24
    43de:	2c c0       	rjmp	.+88     	; 0x4438 <vfprintf+0x24c>
    43e0:	96 fc       	sbrc	r9, 6
    43e2:	2a c0       	rjmp	.+84     	; 0x4438 <vfprintf+0x24c>
    43e4:	81 2f       	mov	r24, r17
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	8c 15       	cp	r24, r12
    43ea:	9d 05       	cpc	r25, r13
    43ec:	9c f0       	brlt	.+38     	; 0x4414 <vfprintf+0x228>
    43ee:	3c ef       	ldi	r19, 0xFC	; 252
    43f0:	c3 16       	cp	r12, r19
    43f2:	3f ef       	ldi	r19, 0xFF	; 255
    43f4:	d3 06       	cpc	r13, r19
    43f6:	74 f0       	brlt	.+28     	; 0x4414 <vfprintf+0x228>
    43f8:	89 2d       	mov	r24, r9
    43fa:	80 68       	ori	r24, 0x80	; 128
    43fc:	98 2e       	mov	r9, r24
    43fe:	0a c0       	rjmp	.+20     	; 0x4414 <vfprintf+0x228>
    4400:	e2 e0       	ldi	r30, 0x02	; 2
    4402:	f0 e0       	ldi	r31, 0x00	; 0
    4404:	ec 0f       	add	r30, r28
    4406:	fd 1f       	adc	r31, r29
    4408:	e1 0f       	add	r30, r17
    440a:	f1 1d       	adc	r31, r1
    440c:	80 81       	ld	r24, Z
    440e:	80 33       	cpi	r24, 0x30	; 48
    4410:	19 f4       	brne	.+6      	; 0x4418 <vfprintf+0x22c>
    4412:	11 50       	subi	r17, 0x01	; 1
    4414:	11 11       	cpse	r17, r1
    4416:	f4 cf       	rjmp	.-24     	; 0x4400 <vfprintf+0x214>
    4418:	97 fe       	sbrs	r9, 7
    441a:	0e c0       	rjmp	.+28     	; 0x4438 <vfprintf+0x24c>
    441c:	44 24       	eor	r4, r4
    441e:	43 94       	inc	r4
    4420:	41 0e       	add	r4, r17
    4422:	81 2f       	mov	r24, r17
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	c8 16       	cp	r12, r24
    4428:	d9 06       	cpc	r13, r25
    442a:	2c f4       	brge	.+10     	; 0x4436 <vfprintf+0x24a>
    442c:	1c 19       	sub	r17, r12
    442e:	04 c0       	rjmp	.+8      	; 0x4438 <vfprintf+0x24c>
    4430:	44 24       	eor	r4, r4
    4432:	43 94       	inc	r4
    4434:	01 c0       	rjmp	.+2      	; 0x4438 <vfprintf+0x24c>
    4436:	10 e0       	ldi	r17, 0x00	; 0
    4438:	97 fe       	sbrs	r9, 7
    443a:	06 c0       	rjmp	.+12     	; 0x4448 <vfprintf+0x25c>
    443c:	1c 14       	cp	r1, r12
    443e:	1d 04       	cpc	r1, r13
    4440:	34 f4       	brge	.+12     	; 0x444e <vfprintf+0x262>
    4442:	c6 01       	movw	r24, r12
    4444:	01 96       	adiw	r24, 0x01	; 1
    4446:	05 c0       	rjmp	.+10     	; 0x4452 <vfprintf+0x266>
    4448:	85 e0       	ldi	r24, 0x05	; 5
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	02 c0       	rjmp	.+4      	; 0x4452 <vfprintf+0x266>
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	01 11       	cpse	r16, r1
    4454:	01 96       	adiw	r24, 0x01	; 1
    4456:	11 23       	and	r17, r17
    4458:	31 f0       	breq	.+12     	; 0x4466 <vfprintf+0x27a>
    445a:	21 2f       	mov	r18, r17
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	2f 5f       	subi	r18, 0xFF	; 255
    4460:	3f 4f       	sbci	r19, 0xFF	; 255
    4462:	82 0f       	add	r24, r18
    4464:	93 1f       	adc	r25, r19
    4466:	25 2d       	mov	r18, r5
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	82 17       	cp	r24, r18
    446c:	93 07       	cpc	r25, r19
    446e:	14 f4       	brge	.+4      	; 0x4474 <vfprintf+0x288>
    4470:	58 1a       	sub	r5, r24
    4472:	01 c0       	rjmp	.+2      	; 0x4476 <vfprintf+0x28a>
    4474:	51 2c       	mov	r5, r1
    4476:	89 2d       	mov	r24, r9
    4478:	89 70       	andi	r24, 0x09	; 9
    447a:	49 f4       	brne	.+18     	; 0x448e <vfprintf+0x2a2>
    447c:	55 20       	and	r5, r5
    447e:	39 f0       	breq	.+14     	; 0x448e <vfprintf+0x2a2>
    4480:	b7 01       	movw	r22, r14
    4482:	80 e2       	ldi	r24, 0x20	; 32
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    448a:	5a 94       	dec	r5
    448c:	f7 cf       	rjmp	.-18     	; 0x447c <vfprintf+0x290>
    448e:	00 23       	and	r16, r16
    4490:	29 f0       	breq	.+10     	; 0x449c <vfprintf+0x2b0>
    4492:	b7 01       	movw	r22, r14
    4494:	80 2f       	mov	r24, r16
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    449c:	93 fc       	sbrc	r9, 3
    449e:	09 c0       	rjmp	.+18     	; 0x44b2 <vfprintf+0x2c6>
    44a0:	55 20       	and	r5, r5
    44a2:	39 f0       	breq	.+14     	; 0x44b2 <vfprintf+0x2c6>
    44a4:	b7 01       	movw	r22, r14
    44a6:	80 e3       	ldi	r24, 0x30	; 48
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    44ae:	5a 94       	dec	r5
    44b0:	f7 cf       	rjmp	.-18     	; 0x44a0 <vfprintf+0x2b4>
    44b2:	97 fe       	sbrs	r9, 7
    44b4:	4c c0       	rjmp	.+152    	; 0x454e <vfprintf+0x362>
    44b6:	46 01       	movw	r8, r12
    44b8:	d7 fe       	sbrs	r13, 7
    44ba:	02 c0       	rjmp	.+4      	; 0x44c0 <vfprintf+0x2d4>
    44bc:	81 2c       	mov	r8, r1
    44be:	91 2c       	mov	r9, r1
    44c0:	c6 01       	movw	r24, r12
    44c2:	88 19       	sub	r24, r8
    44c4:	99 09       	sbc	r25, r9
    44c6:	f3 01       	movw	r30, r6
    44c8:	e8 0f       	add	r30, r24
    44ca:	f9 1f       	adc	r31, r25
    44cc:	ed 87       	std	Y+13, r30	; 0x0d
    44ce:	fe 87       	std	Y+14, r31	; 0x0e
    44d0:	96 01       	movw	r18, r12
    44d2:	24 19       	sub	r18, r4
    44d4:	31 09       	sbc	r19, r1
    44d6:	2f 87       	std	Y+15, r18	; 0x0f
    44d8:	38 8b       	std	Y+16, r19	; 0x10
    44da:	01 2f       	mov	r16, r17
    44dc:	10 e0       	ldi	r17, 0x00	; 0
    44de:	11 95       	neg	r17
    44e0:	01 95       	neg	r16
    44e2:	11 09       	sbc	r17, r1
    44e4:	3f ef       	ldi	r19, 0xFF	; 255
    44e6:	83 16       	cp	r8, r19
    44e8:	93 06       	cpc	r9, r19
    44ea:	29 f4       	brne	.+10     	; 0x44f6 <vfprintf+0x30a>
    44ec:	b7 01       	movw	r22, r14
    44ee:	8e e2       	ldi	r24, 0x2E	; 46
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    44f6:	c8 14       	cp	r12, r8
    44f8:	d9 04       	cpc	r13, r9
    44fa:	4c f0       	brlt	.+18     	; 0x450e <vfprintf+0x322>
    44fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    44fe:	98 89       	ldd	r25, Y+16	; 0x10
    4500:	88 15       	cp	r24, r8
    4502:	99 05       	cpc	r25, r9
    4504:	24 f4       	brge	.+8      	; 0x450e <vfprintf+0x322>
    4506:	ed 85       	ldd	r30, Y+13	; 0x0d
    4508:	fe 85       	ldd	r31, Y+14	; 0x0e
    450a:	81 81       	ldd	r24, Z+1	; 0x01
    450c:	01 c0       	rjmp	.+2      	; 0x4510 <vfprintf+0x324>
    450e:	80 e3       	ldi	r24, 0x30	; 48
    4510:	f1 e0       	ldi	r31, 0x01	; 1
    4512:	8f 1a       	sub	r8, r31
    4514:	91 08       	sbc	r9, r1
    4516:	2d 85       	ldd	r18, Y+13	; 0x0d
    4518:	3e 85       	ldd	r19, Y+14	; 0x0e
    451a:	2f 5f       	subi	r18, 0xFF	; 255
    451c:	3f 4f       	sbci	r19, 0xFF	; 255
    451e:	2d 87       	std	Y+13, r18	; 0x0d
    4520:	3e 87       	std	Y+14, r19	; 0x0e
    4522:	80 16       	cp	r8, r16
    4524:	91 06       	cpc	r9, r17
    4526:	2c f0       	brlt	.+10     	; 0x4532 <vfprintf+0x346>
    4528:	b7 01       	movw	r22, r14
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    4530:	d9 cf       	rjmp	.-78     	; 0x44e4 <vfprintf+0x2f8>
    4532:	c8 14       	cp	r12, r8
    4534:	d9 04       	cpc	r13, r9
    4536:	41 f4       	brne	.+16     	; 0x4548 <vfprintf+0x35c>
    4538:	9a 81       	ldd	r25, Y+2	; 0x02
    453a:	96 33       	cpi	r25, 0x36	; 54
    453c:	20 f4       	brcc	.+8      	; 0x4546 <vfprintf+0x35a>
    453e:	95 33       	cpi	r25, 0x35	; 53
    4540:	19 f4       	brne	.+6      	; 0x4548 <vfprintf+0x35c>
    4542:	3c 85       	ldd	r19, Y+12	; 0x0c
    4544:	34 ff       	sbrs	r19, 4
    4546:	81 e3       	ldi	r24, 0x31	; 49
    4548:	b7 01       	movw	r22, r14
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	4e c0       	rjmp	.+156    	; 0x45ea <vfprintf+0x3fe>
    454e:	8a 81       	ldd	r24, Y+2	; 0x02
    4550:	81 33       	cpi	r24, 0x31	; 49
    4552:	19 f0       	breq	.+6      	; 0x455a <vfprintf+0x36e>
    4554:	9c 85       	ldd	r25, Y+12	; 0x0c
    4556:	9f 7e       	andi	r25, 0xEF	; 239
    4558:	9c 87       	std	Y+12, r25	; 0x0c
    455a:	b7 01       	movw	r22, r14
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    4562:	11 11       	cpse	r17, r1
    4564:	05 c0       	rjmp	.+10     	; 0x4570 <vfprintf+0x384>
    4566:	94 fc       	sbrc	r9, 4
    4568:	18 c0       	rjmp	.+48     	; 0x459a <vfprintf+0x3ae>
    456a:	85 e6       	ldi	r24, 0x65	; 101
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	17 c0       	rjmp	.+46     	; 0x459e <vfprintf+0x3b2>
    4570:	b7 01       	movw	r22, r14
    4572:	8e e2       	ldi	r24, 0x2E	; 46
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    457a:	1e 5f       	subi	r17, 0xFE	; 254
    457c:	82 e0       	ldi	r24, 0x02	; 2
    457e:	01 e0       	ldi	r16, 0x01	; 1
    4580:	08 0f       	add	r16, r24
    4582:	f3 01       	movw	r30, r6
    4584:	e8 0f       	add	r30, r24
    4586:	f1 1d       	adc	r31, r1
    4588:	80 81       	ld	r24, Z
    458a:	b7 01       	movw	r22, r14
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    4592:	80 2f       	mov	r24, r16
    4594:	01 13       	cpse	r16, r17
    4596:	f3 cf       	rjmp	.-26     	; 0x457e <vfprintf+0x392>
    4598:	e6 cf       	rjmp	.-52     	; 0x4566 <vfprintf+0x37a>
    459a:	85 e4       	ldi	r24, 0x45	; 69
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	b7 01       	movw	r22, r14
    45a0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    45a4:	d7 fc       	sbrc	r13, 7
    45a6:	06 c0       	rjmp	.+12     	; 0x45b4 <vfprintf+0x3c8>
    45a8:	c1 14       	cp	r12, r1
    45aa:	d1 04       	cpc	r13, r1
    45ac:	41 f4       	brne	.+16     	; 0x45be <vfprintf+0x3d2>
    45ae:	ec 85       	ldd	r30, Y+12	; 0x0c
    45b0:	e4 ff       	sbrs	r30, 4
    45b2:	05 c0       	rjmp	.+10     	; 0x45be <vfprintf+0x3d2>
    45b4:	d1 94       	neg	r13
    45b6:	c1 94       	neg	r12
    45b8:	d1 08       	sbc	r13, r1
    45ba:	8d e2       	ldi	r24, 0x2D	; 45
    45bc:	01 c0       	rjmp	.+2      	; 0x45c0 <vfprintf+0x3d4>
    45be:	8b e2       	ldi	r24, 0x2B	; 43
    45c0:	b7 01       	movw	r22, r14
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    45c8:	80 e3       	ldi	r24, 0x30	; 48
    45ca:	2a e0       	ldi	r18, 0x0A	; 10
    45cc:	c2 16       	cp	r12, r18
    45ce:	d1 04       	cpc	r13, r1
    45d0:	2c f0       	brlt	.+10     	; 0x45dc <vfprintf+0x3f0>
    45d2:	8f 5f       	subi	r24, 0xFF	; 255
    45d4:	fa e0       	ldi	r31, 0x0A	; 10
    45d6:	cf 1a       	sub	r12, r31
    45d8:	d1 08       	sbc	r13, r1
    45da:	f7 cf       	rjmp	.-18     	; 0x45ca <vfprintf+0x3de>
    45dc:	b7 01       	movw	r22, r14
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    45e4:	b7 01       	movw	r22, r14
    45e6:	c6 01       	movw	r24, r12
    45e8:	c0 96       	adiw	r24, 0x30	; 48
    45ea:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    45ee:	54 c1       	rjmp	.+680    	; 0x4898 <vfprintf+0x6ac>
    45f0:	83 36       	cpi	r24, 0x63	; 99
    45f2:	31 f0       	breq	.+12     	; 0x4600 <vfprintf+0x414>
    45f4:	83 37       	cpi	r24, 0x73	; 115
    45f6:	79 f0       	breq	.+30     	; 0x4616 <vfprintf+0x42a>
    45f8:	83 35       	cpi	r24, 0x53	; 83
    45fa:	09 f0       	breq	.+2      	; 0x45fe <vfprintf+0x412>
    45fc:	56 c0       	rjmp	.+172    	; 0x46aa <vfprintf+0x4be>
    45fe:	20 c0       	rjmp	.+64     	; 0x4640 <vfprintf+0x454>
    4600:	56 01       	movw	r10, r12
    4602:	32 e0       	ldi	r19, 0x02	; 2
    4604:	a3 0e       	add	r10, r19
    4606:	b1 1c       	adc	r11, r1
    4608:	f6 01       	movw	r30, r12
    460a:	80 81       	ld	r24, Z
    460c:	89 83       	std	Y+1, r24	; 0x01
    460e:	01 e0       	ldi	r16, 0x01	; 1
    4610:	10 e0       	ldi	r17, 0x00	; 0
    4612:	63 01       	movw	r12, r6
    4614:	12 c0       	rjmp	.+36     	; 0x463a <vfprintf+0x44e>
    4616:	56 01       	movw	r10, r12
    4618:	f2 e0       	ldi	r31, 0x02	; 2
    461a:	af 0e       	add	r10, r31
    461c:	b1 1c       	adc	r11, r1
    461e:	f6 01       	movw	r30, r12
    4620:	c0 80       	ld	r12, Z
    4622:	d1 80       	ldd	r13, Z+1	; 0x01
    4624:	96 fe       	sbrs	r9, 6
    4626:	03 c0       	rjmp	.+6      	; 0x462e <vfprintf+0x442>
    4628:	61 2f       	mov	r22, r17
    462a:	70 e0       	ldi	r23, 0x00	; 0
    462c:	02 c0       	rjmp	.+4      	; 0x4632 <vfprintf+0x446>
    462e:	6f ef       	ldi	r22, 0xFF	; 255
    4630:	7f ef       	ldi	r23, 0xFF	; 255
    4632:	c6 01       	movw	r24, r12
    4634:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <strnlen>
    4638:	8c 01       	movw	r16, r24
    463a:	f9 2d       	mov	r31, r9
    463c:	ff 77       	andi	r31, 0x7F	; 127
    463e:	14 c0       	rjmp	.+40     	; 0x4668 <vfprintf+0x47c>
    4640:	56 01       	movw	r10, r12
    4642:	22 e0       	ldi	r18, 0x02	; 2
    4644:	a2 0e       	add	r10, r18
    4646:	b1 1c       	adc	r11, r1
    4648:	f6 01       	movw	r30, r12
    464a:	c0 80       	ld	r12, Z
    464c:	d1 80       	ldd	r13, Z+1	; 0x01
    464e:	96 fe       	sbrs	r9, 6
    4650:	03 c0       	rjmp	.+6      	; 0x4658 <vfprintf+0x46c>
    4652:	61 2f       	mov	r22, r17
    4654:	70 e0       	ldi	r23, 0x00	; 0
    4656:	02 c0       	rjmp	.+4      	; 0x465c <vfprintf+0x470>
    4658:	6f ef       	ldi	r22, 0xFF	; 255
    465a:	7f ef       	ldi	r23, 0xFF	; 255
    465c:	c6 01       	movw	r24, r12
    465e:	0e 94 76 25 	call	0x4aec	; 0x4aec <strnlen_P>
    4662:	8c 01       	movw	r16, r24
    4664:	f9 2d       	mov	r31, r9
    4666:	f0 68       	ori	r31, 0x80	; 128
    4668:	9f 2e       	mov	r9, r31
    466a:	f3 fd       	sbrc	r31, 3
    466c:	1a c0       	rjmp	.+52     	; 0x46a2 <vfprintf+0x4b6>
    466e:	85 2d       	mov	r24, r5
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	08 17       	cp	r16, r24
    4674:	19 07       	cpc	r17, r25
    4676:	a8 f4       	brcc	.+42     	; 0x46a2 <vfprintf+0x4b6>
    4678:	b7 01       	movw	r22, r14
    467a:	80 e2       	ldi	r24, 0x20	; 32
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    4682:	5a 94       	dec	r5
    4684:	f4 cf       	rjmp	.-24     	; 0x466e <vfprintf+0x482>
    4686:	f6 01       	movw	r30, r12
    4688:	97 fc       	sbrc	r9, 7
    468a:	85 91       	lpm	r24, Z+
    468c:	97 fe       	sbrs	r9, 7
    468e:	81 91       	ld	r24, Z+
    4690:	6f 01       	movw	r12, r30
    4692:	b7 01       	movw	r22, r14
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    469a:	51 10       	cpse	r5, r1
    469c:	5a 94       	dec	r5
    469e:	01 50       	subi	r16, 0x01	; 1
    46a0:	11 09       	sbc	r17, r1
    46a2:	01 15       	cp	r16, r1
    46a4:	11 05       	cpc	r17, r1
    46a6:	79 f7       	brne	.-34     	; 0x4686 <vfprintf+0x49a>
    46a8:	f7 c0       	rjmp	.+494    	; 0x4898 <vfprintf+0x6ac>
    46aa:	84 36       	cpi	r24, 0x64	; 100
    46ac:	11 f0       	breq	.+4      	; 0x46b2 <vfprintf+0x4c6>
    46ae:	89 36       	cpi	r24, 0x69	; 105
    46b0:	61 f5       	brne	.+88     	; 0x470a <vfprintf+0x51e>
    46b2:	56 01       	movw	r10, r12
    46b4:	97 fe       	sbrs	r9, 7
    46b6:	09 c0       	rjmp	.+18     	; 0x46ca <vfprintf+0x4de>
    46b8:	24 e0       	ldi	r18, 0x04	; 4
    46ba:	a2 0e       	add	r10, r18
    46bc:	b1 1c       	adc	r11, r1
    46be:	f6 01       	movw	r30, r12
    46c0:	60 81       	ld	r22, Z
    46c2:	71 81       	ldd	r23, Z+1	; 0x01
    46c4:	82 81       	ldd	r24, Z+2	; 0x02
    46c6:	93 81       	ldd	r25, Z+3	; 0x03
    46c8:	0a c0       	rjmp	.+20     	; 0x46de <vfprintf+0x4f2>
    46ca:	f2 e0       	ldi	r31, 0x02	; 2
    46cc:	af 0e       	add	r10, r31
    46ce:	b1 1c       	adc	r11, r1
    46d0:	f6 01       	movw	r30, r12
    46d2:	60 81       	ld	r22, Z
    46d4:	71 81       	ldd	r23, Z+1	; 0x01
    46d6:	07 2e       	mov	r0, r23
    46d8:	00 0c       	add	r0, r0
    46da:	88 0b       	sbc	r24, r24
    46dc:	99 0b       	sbc	r25, r25
    46de:	f9 2d       	mov	r31, r9
    46e0:	ff 76       	andi	r31, 0x6F	; 111
    46e2:	9f 2e       	mov	r9, r31
    46e4:	97 ff       	sbrs	r25, 7
    46e6:	09 c0       	rjmp	.+18     	; 0x46fa <vfprintf+0x50e>
    46e8:	90 95       	com	r25
    46ea:	80 95       	com	r24
    46ec:	70 95       	com	r23
    46ee:	61 95       	neg	r22
    46f0:	7f 4f       	sbci	r23, 0xFF	; 255
    46f2:	8f 4f       	sbci	r24, 0xFF	; 255
    46f4:	9f 4f       	sbci	r25, 0xFF	; 255
    46f6:	f0 68       	ori	r31, 0x80	; 128
    46f8:	9f 2e       	mov	r9, r31
    46fa:	2a e0       	ldi	r18, 0x0A	; 10
    46fc:	30 e0       	ldi	r19, 0x00	; 0
    46fe:	a3 01       	movw	r20, r6
    4700:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <__ultoa_invert>
    4704:	c8 2e       	mov	r12, r24
    4706:	c6 18       	sub	r12, r6
    4708:	3f c0       	rjmp	.+126    	; 0x4788 <vfprintf+0x59c>
    470a:	09 2d       	mov	r16, r9
    470c:	85 37       	cpi	r24, 0x75	; 117
    470e:	21 f4       	brne	.+8      	; 0x4718 <vfprintf+0x52c>
    4710:	0f 7e       	andi	r16, 0xEF	; 239
    4712:	2a e0       	ldi	r18, 0x0A	; 10
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	1d c0       	rjmp	.+58     	; 0x4752 <vfprintf+0x566>
    4718:	09 7f       	andi	r16, 0xF9	; 249
    471a:	8f 36       	cpi	r24, 0x6F	; 111
    471c:	91 f0       	breq	.+36     	; 0x4742 <vfprintf+0x556>
    471e:	18 f4       	brcc	.+6      	; 0x4726 <vfprintf+0x53a>
    4720:	88 35       	cpi	r24, 0x58	; 88
    4722:	59 f0       	breq	.+22     	; 0x473a <vfprintf+0x54e>
    4724:	c3 c0       	rjmp	.+390    	; 0x48ac <vfprintf+0x6c0>
    4726:	80 37       	cpi	r24, 0x70	; 112
    4728:	19 f0       	breq	.+6      	; 0x4730 <vfprintf+0x544>
    472a:	88 37       	cpi	r24, 0x78	; 120
    472c:	11 f0       	breq	.+4      	; 0x4732 <vfprintf+0x546>
    472e:	be c0       	rjmp	.+380    	; 0x48ac <vfprintf+0x6c0>
    4730:	00 61       	ori	r16, 0x10	; 16
    4732:	04 ff       	sbrs	r16, 4
    4734:	09 c0       	rjmp	.+18     	; 0x4748 <vfprintf+0x55c>
    4736:	04 60       	ori	r16, 0x04	; 4
    4738:	07 c0       	rjmp	.+14     	; 0x4748 <vfprintf+0x55c>
    473a:	94 fe       	sbrs	r9, 4
    473c:	08 c0       	rjmp	.+16     	; 0x474e <vfprintf+0x562>
    473e:	06 60       	ori	r16, 0x06	; 6
    4740:	06 c0       	rjmp	.+12     	; 0x474e <vfprintf+0x562>
    4742:	28 e0       	ldi	r18, 0x08	; 8
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	05 c0       	rjmp	.+10     	; 0x4752 <vfprintf+0x566>
    4748:	20 e1       	ldi	r18, 0x10	; 16
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	02 c0       	rjmp	.+4      	; 0x4752 <vfprintf+0x566>
    474e:	20 e1       	ldi	r18, 0x10	; 16
    4750:	32 e0       	ldi	r19, 0x02	; 2
    4752:	56 01       	movw	r10, r12
    4754:	07 ff       	sbrs	r16, 7
    4756:	09 c0       	rjmp	.+18     	; 0x476a <vfprintf+0x57e>
    4758:	84 e0       	ldi	r24, 0x04	; 4
    475a:	a8 0e       	add	r10, r24
    475c:	b1 1c       	adc	r11, r1
    475e:	f6 01       	movw	r30, r12
    4760:	60 81       	ld	r22, Z
    4762:	71 81       	ldd	r23, Z+1	; 0x01
    4764:	82 81       	ldd	r24, Z+2	; 0x02
    4766:	93 81       	ldd	r25, Z+3	; 0x03
    4768:	08 c0       	rjmp	.+16     	; 0x477a <vfprintf+0x58e>
    476a:	f2 e0       	ldi	r31, 0x02	; 2
    476c:	af 0e       	add	r10, r31
    476e:	b1 1c       	adc	r11, r1
    4770:	f6 01       	movw	r30, r12
    4772:	60 81       	ld	r22, Z
    4774:	71 81       	ldd	r23, Z+1	; 0x01
    4776:	80 e0       	ldi	r24, 0x00	; 0
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	a3 01       	movw	r20, r6
    477c:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <__ultoa_invert>
    4780:	c8 2e       	mov	r12, r24
    4782:	c6 18       	sub	r12, r6
    4784:	0f 77       	andi	r16, 0x7F	; 127
    4786:	90 2e       	mov	r9, r16
    4788:	96 fe       	sbrs	r9, 6
    478a:	0b c0       	rjmp	.+22     	; 0x47a2 <vfprintf+0x5b6>
    478c:	09 2d       	mov	r16, r9
    478e:	0e 7f       	andi	r16, 0xFE	; 254
    4790:	c1 16       	cp	r12, r17
    4792:	50 f4       	brcc	.+20     	; 0x47a8 <vfprintf+0x5bc>
    4794:	94 fe       	sbrs	r9, 4
    4796:	0a c0       	rjmp	.+20     	; 0x47ac <vfprintf+0x5c0>
    4798:	92 fc       	sbrc	r9, 2
    479a:	08 c0       	rjmp	.+16     	; 0x47ac <vfprintf+0x5c0>
    479c:	09 2d       	mov	r16, r9
    479e:	0e 7e       	andi	r16, 0xEE	; 238
    47a0:	05 c0       	rjmp	.+10     	; 0x47ac <vfprintf+0x5c0>
    47a2:	dc 2c       	mov	r13, r12
    47a4:	09 2d       	mov	r16, r9
    47a6:	03 c0       	rjmp	.+6      	; 0x47ae <vfprintf+0x5c2>
    47a8:	dc 2c       	mov	r13, r12
    47aa:	01 c0       	rjmp	.+2      	; 0x47ae <vfprintf+0x5c2>
    47ac:	d1 2e       	mov	r13, r17
    47ae:	04 ff       	sbrs	r16, 4
    47b0:	0d c0       	rjmp	.+26     	; 0x47cc <vfprintf+0x5e0>
    47b2:	fe 01       	movw	r30, r28
    47b4:	ec 0d       	add	r30, r12
    47b6:	f1 1d       	adc	r31, r1
    47b8:	80 81       	ld	r24, Z
    47ba:	80 33       	cpi	r24, 0x30	; 48
    47bc:	11 f4       	brne	.+4      	; 0x47c2 <vfprintf+0x5d6>
    47be:	09 7e       	andi	r16, 0xE9	; 233
    47c0:	09 c0       	rjmp	.+18     	; 0x47d4 <vfprintf+0x5e8>
    47c2:	02 ff       	sbrs	r16, 2
    47c4:	06 c0       	rjmp	.+12     	; 0x47d2 <vfprintf+0x5e6>
    47c6:	d3 94       	inc	r13
    47c8:	d3 94       	inc	r13
    47ca:	04 c0       	rjmp	.+8      	; 0x47d4 <vfprintf+0x5e8>
    47cc:	80 2f       	mov	r24, r16
    47ce:	86 78       	andi	r24, 0x86	; 134
    47d0:	09 f0       	breq	.+2      	; 0x47d4 <vfprintf+0x5e8>
    47d2:	d3 94       	inc	r13
    47d4:	03 fd       	sbrc	r16, 3
    47d6:	11 c0       	rjmp	.+34     	; 0x47fa <vfprintf+0x60e>
    47d8:	00 ff       	sbrs	r16, 0
    47da:	06 c0       	rjmp	.+12     	; 0x47e8 <vfprintf+0x5fc>
    47dc:	1c 2d       	mov	r17, r12
    47de:	d5 14       	cp	r13, r5
    47e0:	80 f4       	brcc	.+32     	; 0x4802 <vfprintf+0x616>
    47e2:	15 0d       	add	r17, r5
    47e4:	1d 19       	sub	r17, r13
    47e6:	0d c0       	rjmp	.+26     	; 0x4802 <vfprintf+0x616>
    47e8:	d5 14       	cp	r13, r5
    47ea:	58 f4       	brcc	.+22     	; 0x4802 <vfprintf+0x616>
    47ec:	b7 01       	movw	r22, r14
    47ee:	80 e2       	ldi	r24, 0x20	; 32
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    47f6:	d3 94       	inc	r13
    47f8:	f7 cf       	rjmp	.-18     	; 0x47e8 <vfprintf+0x5fc>
    47fa:	d5 14       	cp	r13, r5
    47fc:	10 f4       	brcc	.+4      	; 0x4802 <vfprintf+0x616>
    47fe:	5d 18       	sub	r5, r13
    4800:	01 c0       	rjmp	.+2      	; 0x4804 <vfprintf+0x618>
    4802:	51 2c       	mov	r5, r1
    4804:	04 ff       	sbrs	r16, 4
    4806:	10 c0       	rjmp	.+32     	; 0x4828 <vfprintf+0x63c>
    4808:	b7 01       	movw	r22, r14
    480a:	80 e3       	ldi	r24, 0x30	; 48
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    4812:	02 ff       	sbrs	r16, 2
    4814:	17 c0       	rjmp	.+46     	; 0x4844 <vfprintf+0x658>
    4816:	01 fd       	sbrc	r16, 1
    4818:	03 c0       	rjmp	.+6      	; 0x4820 <vfprintf+0x634>
    481a:	88 e7       	ldi	r24, 0x78	; 120
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	02 c0       	rjmp	.+4      	; 0x4824 <vfprintf+0x638>
    4820:	88 e5       	ldi	r24, 0x58	; 88
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	b7 01       	movw	r22, r14
    4826:	0c c0       	rjmp	.+24     	; 0x4840 <vfprintf+0x654>
    4828:	80 2f       	mov	r24, r16
    482a:	86 78       	andi	r24, 0x86	; 134
    482c:	59 f0       	breq	.+22     	; 0x4844 <vfprintf+0x658>
    482e:	01 ff       	sbrs	r16, 1
    4830:	02 c0       	rjmp	.+4      	; 0x4836 <vfprintf+0x64a>
    4832:	8b e2       	ldi	r24, 0x2B	; 43
    4834:	01 c0       	rjmp	.+2      	; 0x4838 <vfprintf+0x64c>
    4836:	80 e2       	ldi	r24, 0x20	; 32
    4838:	07 fd       	sbrc	r16, 7
    483a:	8d e2       	ldi	r24, 0x2D	; 45
    483c:	b7 01       	movw	r22, r14
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    4844:	c1 16       	cp	r12, r17
    4846:	38 f4       	brcc	.+14     	; 0x4856 <vfprintf+0x66a>
    4848:	b7 01       	movw	r22, r14
    484a:	80 e3       	ldi	r24, 0x30	; 48
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    4852:	11 50       	subi	r17, 0x01	; 1
    4854:	f7 cf       	rjmp	.-18     	; 0x4844 <vfprintf+0x658>
    4856:	ca 94       	dec	r12
    4858:	f3 01       	movw	r30, r6
    485a:	ec 0d       	add	r30, r12
    485c:	f1 1d       	adc	r31, r1
    485e:	80 81       	ld	r24, Z
    4860:	b7 01       	movw	r22, r14
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    4868:	c1 10       	cpse	r12, r1
    486a:	f5 cf       	rjmp	.-22     	; 0x4856 <vfprintf+0x66a>
    486c:	15 c0       	rjmp	.+42     	; 0x4898 <vfprintf+0x6ac>
    486e:	f4 e0       	ldi	r31, 0x04	; 4
    4870:	f5 15       	cp	r31, r5
    4872:	60 f5       	brcc	.+88     	; 0x48cc <vfprintf+0x6e0>
    4874:	84 e0       	ldi	r24, 0x04	; 4
    4876:	58 1a       	sub	r5, r24
    4878:	93 fe       	sbrs	r9, 3
    487a:	1f c0       	rjmp	.+62     	; 0x48ba <vfprintf+0x6ce>
    487c:	01 11       	cpse	r16, r1
    487e:	27 c0       	rjmp	.+78     	; 0x48ce <vfprintf+0x6e2>
    4880:	2c 85       	ldd	r18, Y+12	; 0x0c
    4882:	23 ff       	sbrs	r18, 3
    4884:	2a c0       	rjmp	.+84     	; 0x48da <vfprintf+0x6ee>
    4886:	0c e3       	ldi	r16, 0x3C	; 60
    4888:	12 e0       	ldi	r17, 0x02	; 2
    488a:	39 2d       	mov	r19, r9
    488c:	30 71       	andi	r19, 0x10	; 16
    488e:	93 2e       	mov	r9, r19
    4890:	f8 01       	movw	r30, r16
    4892:	84 91       	lpm	r24, Z
    4894:	81 11       	cpse	r24, r1
    4896:	24 c0       	rjmp	.+72     	; 0x48e0 <vfprintf+0x6f4>
    4898:	55 20       	and	r5, r5
    489a:	09 f4       	brne	.+2      	; 0x489e <vfprintf+0x6b2>
    489c:	e4 cc       	rjmp	.-1592   	; 0x4266 <vfprintf+0x7a>
    489e:	b7 01       	movw	r22, r14
    48a0:	80 e2       	ldi	r24, 0x20	; 32
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    48a8:	5a 94       	dec	r5
    48aa:	f6 cf       	rjmp	.-20     	; 0x4898 <vfprintf+0x6ac>
    48ac:	f7 01       	movw	r30, r14
    48ae:	86 81       	ldd	r24, Z+6	; 0x06
    48b0:	97 81       	ldd	r25, Z+7	; 0x07
    48b2:	26 c0       	rjmp	.+76     	; 0x4900 <vfprintf+0x714>
    48b4:	8f ef       	ldi	r24, 0xFF	; 255
    48b6:	9f ef       	ldi	r25, 0xFF	; 255
    48b8:	23 c0       	rjmp	.+70     	; 0x4900 <vfprintf+0x714>
    48ba:	b7 01       	movw	r22, r14
    48bc:	80 e2       	ldi	r24, 0x20	; 32
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    48c4:	5a 94       	dec	r5
    48c6:	51 10       	cpse	r5, r1
    48c8:	f8 cf       	rjmp	.-16     	; 0x48ba <vfprintf+0x6ce>
    48ca:	d8 cf       	rjmp	.-80     	; 0x487c <vfprintf+0x690>
    48cc:	51 2c       	mov	r5, r1
    48ce:	b7 01       	movw	r22, r14
    48d0:	80 2f       	mov	r24, r16
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    48d8:	d3 cf       	rjmp	.-90     	; 0x4880 <vfprintf+0x694>
    48da:	00 e4       	ldi	r16, 0x40	; 64
    48dc:	12 e0       	ldi	r17, 0x02	; 2
    48de:	d5 cf       	rjmp	.-86     	; 0x488a <vfprintf+0x69e>
    48e0:	91 10       	cpse	r9, r1
    48e2:	80 52       	subi	r24, 0x20	; 32
    48e4:	b7 01       	movw	r22, r14
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0e 94 d5 25 	call	0x4baa	; 0x4baa <fputc>
    48ec:	0f 5f       	subi	r16, 0xFF	; 255
    48ee:	1f 4f       	sbci	r17, 0xFF	; 255
    48f0:	cf cf       	rjmp	.-98     	; 0x4890 <vfprintf+0x6a4>
    48f2:	23 e0       	ldi	r18, 0x03	; 3
    48f4:	25 15       	cp	r18, r5
    48f6:	10 f4       	brcc	.+4      	; 0x48fc <vfprintf+0x710>
    48f8:	83 e0       	ldi	r24, 0x03	; 3
    48fa:	bd cf       	rjmp	.-134    	; 0x4876 <vfprintf+0x68a>
    48fc:	51 2c       	mov	r5, r1
    48fe:	c0 cf       	rjmp	.-128    	; 0x4880 <vfprintf+0x694>
    4900:	60 96       	adiw	r28, 0x10	; 16
    4902:	cd bf       	out	0x3d, r28	; 61
    4904:	de bf       	out	0x3e, r29	; 62
    4906:	df 91       	pop	r29
    4908:	cf 91       	pop	r28
    490a:	1f 91       	pop	r17
    490c:	0f 91       	pop	r16
    490e:	ff 90       	pop	r15
    4910:	ef 90       	pop	r14
    4912:	df 90       	pop	r13
    4914:	cf 90       	pop	r12
    4916:	bf 90       	pop	r11
    4918:	af 90       	pop	r10
    491a:	9f 90       	pop	r9
    491c:	8f 90       	pop	r8
    491e:	7f 90       	pop	r7
    4920:	6f 90       	pop	r6
    4922:	5f 90       	pop	r5
    4924:	4f 90       	pop	r4
    4926:	3f 90       	pop	r3
    4928:	2f 90       	pop	r2
    492a:	08 95       	ret

0000492c <__tablejump2__>:
    492c:	ee 0f       	add	r30, r30
    492e:	ff 1f       	adc	r31, r31
    4930:	88 1f       	adc	r24, r24
    4932:	8b bf       	out	0x3b, r24	; 59
    4934:	07 90       	elpm	r0, Z+
    4936:	f6 91       	elpm	r31, Z
    4938:	e0 2d       	mov	r30, r0
    493a:	19 94       	eijmp

0000493c <__ftoa_engine>:
    493c:	28 30       	cpi	r18, 0x08	; 8
    493e:	08 f0       	brcs	.+2      	; 0x4942 <__ftoa_engine+0x6>
    4940:	27 e0       	ldi	r18, 0x07	; 7
    4942:	33 27       	eor	r19, r19
    4944:	da 01       	movw	r26, r20
    4946:	99 0f       	add	r25, r25
    4948:	31 1d       	adc	r19, r1
    494a:	87 fd       	sbrc	r24, 7
    494c:	91 60       	ori	r25, 0x01	; 1
    494e:	00 96       	adiw	r24, 0x00	; 0
    4950:	61 05       	cpc	r22, r1
    4952:	71 05       	cpc	r23, r1
    4954:	39 f4       	brne	.+14     	; 0x4964 <__ftoa_engine+0x28>
    4956:	32 60       	ori	r19, 0x02	; 2
    4958:	2e 5f       	subi	r18, 0xFE	; 254
    495a:	3d 93       	st	X+, r19
    495c:	30 e3       	ldi	r19, 0x30	; 48
    495e:	2a 95       	dec	r18
    4960:	e1 f7       	brne	.-8      	; 0x495a <__ftoa_engine+0x1e>
    4962:	08 95       	ret
    4964:	9f 3f       	cpi	r25, 0xFF	; 255
    4966:	30 f0       	brcs	.+12     	; 0x4974 <__ftoa_engine+0x38>
    4968:	80 38       	cpi	r24, 0x80	; 128
    496a:	71 05       	cpc	r23, r1
    496c:	61 05       	cpc	r22, r1
    496e:	09 f0       	breq	.+2      	; 0x4972 <__ftoa_engine+0x36>
    4970:	3c 5f       	subi	r19, 0xFC	; 252
    4972:	3c 5f       	subi	r19, 0xFC	; 252
    4974:	3d 93       	st	X+, r19
    4976:	91 30       	cpi	r25, 0x01	; 1
    4978:	08 f0       	brcs	.+2      	; 0x497c <__ftoa_engine+0x40>
    497a:	80 68       	ori	r24, 0x80	; 128
    497c:	91 1d       	adc	r25, r1
    497e:	df 93       	push	r29
    4980:	cf 93       	push	r28
    4982:	1f 93       	push	r17
    4984:	0f 93       	push	r16
    4986:	ff 92       	push	r15
    4988:	ef 92       	push	r14
    498a:	19 2f       	mov	r17, r25
    498c:	98 7f       	andi	r25, 0xF8	; 248
    498e:	96 95       	lsr	r25
    4990:	e9 2f       	mov	r30, r25
    4992:	96 95       	lsr	r25
    4994:	96 95       	lsr	r25
    4996:	e9 0f       	add	r30, r25
    4998:	ff 27       	eor	r31, r31
    499a:	e2 56       	subi	r30, 0x62	; 98
    499c:	fd 4f       	sbci	r31, 0xFD	; 253
    499e:	99 27       	eor	r25, r25
    49a0:	33 27       	eor	r19, r19
    49a2:	ee 24       	eor	r14, r14
    49a4:	ff 24       	eor	r15, r15
    49a6:	a7 01       	movw	r20, r14
    49a8:	e7 01       	movw	r28, r14
    49aa:	05 90       	lpm	r0, Z+
    49ac:	08 94       	sec
    49ae:	07 94       	ror	r0
    49b0:	28 f4       	brcc	.+10     	; 0x49bc <__ftoa_engine+0x80>
    49b2:	36 0f       	add	r19, r22
    49b4:	e7 1e       	adc	r14, r23
    49b6:	f8 1e       	adc	r15, r24
    49b8:	49 1f       	adc	r20, r25
    49ba:	51 1d       	adc	r21, r1
    49bc:	66 0f       	add	r22, r22
    49be:	77 1f       	adc	r23, r23
    49c0:	88 1f       	adc	r24, r24
    49c2:	99 1f       	adc	r25, r25
    49c4:	06 94       	lsr	r0
    49c6:	a1 f7       	brne	.-24     	; 0x49b0 <__ftoa_engine+0x74>
    49c8:	05 90       	lpm	r0, Z+
    49ca:	07 94       	ror	r0
    49cc:	28 f4       	brcc	.+10     	; 0x49d8 <__ftoa_engine+0x9c>
    49ce:	e7 0e       	add	r14, r23
    49d0:	f8 1e       	adc	r15, r24
    49d2:	49 1f       	adc	r20, r25
    49d4:	56 1f       	adc	r21, r22
    49d6:	c1 1d       	adc	r28, r1
    49d8:	77 0f       	add	r23, r23
    49da:	88 1f       	adc	r24, r24
    49dc:	99 1f       	adc	r25, r25
    49de:	66 1f       	adc	r22, r22
    49e0:	06 94       	lsr	r0
    49e2:	a1 f7       	brne	.-24     	; 0x49cc <__ftoa_engine+0x90>
    49e4:	05 90       	lpm	r0, Z+
    49e6:	07 94       	ror	r0
    49e8:	28 f4       	brcc	.+10     	; 0x49f4 <__ftoa_engine+0xb8>
    49ea:	f8 0e       	add	r15, r24
    49ec:	49 1f       	adc	r20, r25
    49ee:	56 1f       	adc	r21, r22
    49f0:	c7 1f       	adc	r28, r23
    49f2:	d1 1d       	adc	r29, r1
    49f4:	88 0f       	add	r24, r24
    49f6:	99 1f       	adc	r25, r25
    49f8:	66 1f       	adc	r22, r22
    49fa:	77 1f       	adc	r23, r23
    49fc:	06 94       	lsr	r0
    49fe:	a1 f7       	brne	.-24     	; 0x49e8 <__ftoa_engine+0xac>
    4a00:	05 90       	lpm	r0, Z+
    4a02:	07 94       	ror	r0
    4a04:	20 f4       	brcc	.+8      	; 0x4a0e <__ftoa_engine+0xd2>
    4a06:	49 0f       	add	r20, r25
    4a08:	56 1f       	adc	r21, r22
    4a0a:	c7 1f       	adc	r28, r23
    4a0c:	d8 1f       	adc	r29, r24
    4a0e:	99 0f       	add	r25, r25
    4a10:	66 1f       	adc	r22, r22
    4a12:	77 1f       	adc	r23, r23
    4a14:	88 1f       	adc	r24, r24
    4a16:	06 94       	lsr	r0
    4a18:	a9 f7       	brne	.-22     	; 0x4a04 <__ftoa_engine+0xc8>
    4a1a:	84 91       	lpm	r24, Z
    4a1c:	10 95       	com	r17
    4a1e:	17 70       	andi	r17, 0x07	; 7
    4a20:	41 f0       	breq	.+16     	; 0x4a32 <__ftoa_engine+0xf6>
    4a22:	d6 95       	lsr	r29
    4a24:	c7 95       	ror	r28
    4a26:	57 95       	ror	r21
    4a28:	47 95       	ror	r20
    4a2a:	f7 94       	ror	r15
    4a2c:	e7 94       	ror	r14
    4a2e:	1a 95       	dec	r17
    4a30:	c1 f7       	brne	.-16     	; 0x4a22 <__ftoa_engine+0xe6>
    4a32:	e4 e4       	ldi	r30, 0x44	; 68
    4a34:	f2 e0       	ldi	r31, 0x02	; 2
    4a36:	68 94       	set
    4a38:	15 90       	lpm	r1, Z+
    4a3a:	15 91       	lpm	r17, Z+
    4a3c:	35 91       	lpm	r19, Z+
    4a3e:	65 91       	lpm	r22, Z+
    4a40:	95 91       	lpm	r25, Z+
    4a42:	05 90       	lpm	r0, Z+
    4a44:	7f e2       	ldi	r23, 0x2F	; 47
    4a46:	73 95       	inc	r23
    4a48:	e1 18       	sub	r14, r1
    4a4a:	f1 0a       	sbc	r15, r17
    4a4c:	43 0b       	sbc	r20, r19
    4a4e:	56 0b       	sbc	r21, r22
    4a50:	c9 0b       	sbc	r28, r25
    4a52:	d0 09       	sbc	r29, r0
    4a54:	c0 f7       	brcc	.-16     	; 0x4a46 <__ftoa_engine+0x10a>
    4a56:	e1 0c       	add	r14, r1
    4a58:	f1 1e       	adc	r15, r17
    4a5a:	43 1f       	adc	r20, r19
    4a5c:	56 1f       	adc	r21, r22
    4a5e:	c9 1f       	adc	r28, r25
    4a60:	d0 1d       	adc	r29, r0
    4a62:	7e f4       	brtc	.+30     	; 0x4a82 <__ftoa_engine+0x146>
    4a64:	70 33       	cpi	r23, 0x30	; 48
    4a66:	11 f4       	brne	.+4      	; 0x4a6c <__ftoa_engine+0x130>
    4a68:	8a 95       	dec	r24
    4a6a:	e6 cf       	rjmp	.-52     	; 0x4a38 <__ftoa_engine+0xfc>
    4a6c:	e8 94       	clt
    4a6e:	01 50       	subi	r16, 0x01	; 1
    4a70:	30 f0       	brcs	.+12     	; 0x4a7e <__ftoa_engine+0x142>
    4a72:	08 0f       	add	r16, r24
    4a74:	0a f4       	brpl	.+2      	; 0x4a78 <__ftoa_engine+0x13c>
    4a76:	00 27       	eor	r16, r16
    4a78:	02 17       	cp	r16, r18
    4a7a:	08 f4       	brcc	.+2      	; 0x4a7e <__ftoa_engine+0x142>
    4a7c:	20 2f       	mov	r18, r16
    4a7e:	23 95       	inc	r18
    4a80:	02 2f       	mov	r16, r18
    4a82:	7a 33       	cpi	r23, 0x3A	; 58
    4a84:	28 f0       	brcs	.+10     	; 0x4a90 <__ftoa_engine+0x154>
    4a86:	79 e3       	ldi	r23, 0x39	; 57
    4a88:	7d 93       	st	X+, r23
    4a8a:	2a 95       	dec	r18
    4a8c:	e9 f7       	brne	.-6      	; 0x4a88 <__ftoa_engine+0x14c>
    4a8e:	10 c0       	rjmp	.+32     	; 0x4ab0 <__ftoa_engine+0x174>
    4a90:	7d 93       	st	X+, r23
    4a92:	2a 95       	dec	r18
    4a94:	89 f6       	brne	.-94     	; 0x4a38 <__ftoa_engine+0xfc>
    4a96:	06 94       	lsr	r0
    4a98:	97 95       	ror	r25
    4a9a:	67 95       	ror	r22
    4a9c:	37 95       	ror	r19
    4a9e:	17 95       	ror	r17
    4aa0:	17 94       	ror	r1
    4aa2:	e1 18       	sub	r14, r1
    4aa4:	f1 0a       	sbc	r15, r17
    4aa6:	43 0b       	sbc	r20, r19
    4aa8:	56 0b       	sbc	r21, r22
    4aaa:	c9 0b       	sbc	r28, r25
    4aac:	d0 09       	sbc	r29, r0
    4aae:	98 f0       	brcs	.+38     	; 0x4ad6 <__ftoa_engine+0x19a>
    4ab0:	23 95       	inc	r18
    4ab2:	7e 91       	ld	r23, -X
    4ab4:	73 95       	inc	r23
    4ab6:	7a 33       	cpi	r23, 0x3A	; 58
    4ab8:	08 f0       	brcs	.+2      	; 0x4abc <__ftoa_engine+0x180>
    4aba:	70 e3       	ldi	r23, 0x30	; 48
    4abc:	7c 93       	st	X, r23
    4abe:	20 13       	cpse	r18, r16
    4ac0:	b8 f7       	brcc	.-18     	; 0x4ab0 <__ftoa_engine+0x174>
    4ac2:	7e 91       	ld	r23, -X
    4ac4:	70 61       	ori	r23, 0x10	; 16
    4ac6:	7d 93       	st	X+, r23
    4ac8:	30 f0       	brcs	.+12     	; 0x4ad6 <__ftoa_engine+0x19a>
    4aca:	83 95       	inc	r24
    4acc:	71 e3       	ldi	r23, 0x31	; 49
    4ace:	7d 93       	st	X+, r23
    4ad0:	70 e3       	ldi	r23, 0x30	; 48
    4ad2:	2a 95       	dec	r18
    4ad4:	e1 f7       	brne	.-8      	; 0x4ace <__ftoa_engine+0x192>
    4ad6:	11 24       	eor	r1, r1
    4ad8:	ef 90       	pop	r14
    4ada:	ff 90       	pop	r15
    4adc:	0f 91       	pop	r16
    4ade:	1f 91       	pop	r17
    4ae0:	cf 91       	pop	r28
    4ae2:	df 91       	pop	r29
    4ae4:	99 27       	eor	r25, r25
    4ae6:	87 fd       	sbrc	r24, 7
    4ae8:	90 95       	com	r25
    4aea:	08 95       	ret

00004aec <strnlen_P>:
    4aec:	fc 01       	movw	r30, r24
    4aee:	05 90       	lpm	r0, Z+
    4af0:	61 50       	subi	r22, 0x01	; 1
    4af2:	70 40       	sbci	r23, 0x00	; 0
    4af4:	01 10       	cpse	r0, r1
    4af6:	d8 f7       	brcc	.-10     	; 0x4aee <strnlen_P+0x2>
    4af8:	80 95       	com	r24
    4afa:	90 95       	com	r25
    4afc:	8e 0f       	add	r24, r30
    4afe:	9f 1f       	adc	r25, r31
    4b00:	08 95       	ret

00004b02 <memcpy>:
    4b02:	fb 01       	movw	r30, r22
    4b04:	dc 01       	movw	r26, r24
    4b06:	02 c0       	rjmp	.+4      	; 0x4b0c <memcpy+0xa>
    4b08:	01 90       	ld	r0, Z+
    4b0a:	0d 92       	st	X+, r0
    4b0c:	41 50       	subi	r20, 0x01	; 1
    4b0e:	50 40       	sbci	r21, 0x00	; 0
    4b10:	d8 f7       	brcc	.-10     	; 0x4b08 <memcpy+0x6>
    4b12:	08 95       	ret

00004b14 <memset>:
    4b14:	dc 01       	movw	r26, r24
    4b16:	01 c0       	rjmp	.+2      	; 0x4b1a <memset+0x6>
    4b18:	6d 93       	st	X+, r22
    4b1a:	41 50       	subi	r20, 0x01	; 1
    4b1c:	50 40       	sbci	r21, 0x00	; 0
    4b1e:	e0 f7       	brcc	.-8      	; 0x4b18 <memset+0x4>
    4b20:	08 95       	ret

00004b22 <strlen>:
    4b22:	fc 01       	movw	r30, r24
    4b24:	01 90       	ld	r0, Z+
    4b26:	00 20       	and	r0, r0
    4b28:	e9 f7       	brne	.-6      	; 0x4b24 <strlen+0x2>
    4b2a:	80 95       	com	r24
    4b2c:	90 95       	com	r25
    4b2e:	8e 0f       	add	r24, r30
    4b30:	9f 1f       	adc	r25, r31
    4b32:	08 95       	ret

00004b34 <strnlen>:
    4b34:	fc 01       	movw	r30, r24
    4b36:	61 50       	subi	r22, 0x01	; 1
    4b38:	70 40       	sbci	r23, 0x00	; 0
    4b3a:	01 90       	ld	r0, Z+
    4b3c:	01 10       	cpse	r0, r1
    4b3e:	d8 f7       	brcc	.-10     	; 0x4b36 <strnlen+0x2>
    4b40:	80 95       	com	r24
    4b42:	90 95       	com	r25
    4b44:	8e 0f       	add	r24, r30
    4b46:	9f 1f       	adc	r25, r31
    4b48:	08 95       	ret

00004b4a <itoa>:
    4b4a:	45 32       	cpi	r20, 0x25	; 37
    4b4c:	51 05       	cpc	r21, r1
    4b4e:	20 f4       	brcc	.+8      	; 0x4b58 <itoa+0xe>
    4b50:	42 30       	cpi	r20, 0x02	; 2
    4b52:	10 f0       	brcs	.+4      	; 0x4b58 <itoa+0xe>
    4b54:	0c 94 b0 25 	jmp	0x4b60	; 0x4b60 <__itoa_ncheck>
    4b58:	fb 01       	movw	r30, r22
    4b5a:	10 82       	st	Z, r1
    4b5c:	cb 01       	movw	r24, r22
    4b5e:	08 95       	ret

00004b60 <__itoa_ncheck>:
    4b60:	bb 27       	eor	r27, r27
    4b62:	4a 30       	cpi	r20, 0x0A	; 10
    4b64:	31 f4       	brne	.+12     	; 0x4b72 <__itoa_ncheck+0x12>
    4b66:	99 23       	and	r25, r25
    4b68:	22 f4       	brpl	.+8      	; 0x4b72 <__itoa_ncheck+0x12>
    4b6a:	bd e2       	ldi	r27, 0x2D	; 45
    4b6c:	90 95       	com	r25
    4b6e:	81 95       	neg	r24
    4b70:	9f 4f       	sbci	r25, 0xFF	; 255
    4b72:	0c 94 bc 25 	jmp	0x4b78	; 0x4b78 <__utoa_common>

00004b76 <__utoa_ncheck>:
    4b76:	bb 27       	eor	r27, r27

00004b78 <__utoa_common>:
    4b78:	fb 01       	movw	r30, r22
    4b7a:	55 27       	eor	r21, r21
    4b7c:	aa 27       	eor	r26, r26
    4b7e:	88 0f       	add	r24, r24
    4b80:	99 1f       	adc	r25, r25
    4b82:	aa 1f       	adc	r26, r26
    4b84:	a4 17       	cp	r26, r20
    4b86:	10 f0       	brcs	.+4      	; 0x4b8c <__utoa_common+0x14>
    4b88:	a4 1b       	sub	r26, r20
    4b8a:	83 95       	inc	r24
    4b8c:	50 51       	subi	r21, 0x10	; 16
    4b8e:	b9 f7       	brne	.-18     	; 0x4b7e <__utoa_common+0x6>
    4b90:	a0 5d       	subi	r26, 0xD0	; 208
    4b92:	aa 33       	cpi	r26, 0x3A	; 58
    4b94:	08 f0       	brcs	.+2      	; 0x4b98 <__utoa_common+0x20>
    4b96:	a9 5d       	subi	r26, 0xD9	; 217
    4b98:	a1 93       	st	Z+, r26
    4b9a:	00 97       	sbiw	r24, 0x00	; 0
    4b9c:	79 f7       	brne	.-34     	; 0x4b7c <__utoa_common+0x4>
    4b9e:	b1 11       	cpse	r27, r1
    4ba0:	b1 93       	st	Z+, r27
    4ba2:	11 92       	st	Z+, r1
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	0c 94 98 26 	jmp	0x4d30	; 0x4d30 <strrev>

00004baa <fputc>:
    4baa:	0f 93       	push	r16
    4bac:	1f 93       	push	r17
    4bae:	cf 93       	push	r28
    4bb0:	df 93       	push	r29
    4bb2:	fb 01       	movw	r30, r22
    4bb4:	23 81       	ldd	r18, Z+3	; 0x03
    4bb6:	21 fd       	sbrc	r18, 1
    4bb8:	03 c0       	rjmp	.+6      	; 0x4bc0 <fputc+0x16>
    4bba:	8f ef       	ldi	r24, 0xFF	; 255
    4bbc:	9f ef       	ldi	r25, 0xFF	; 255
    4bbe:	2c c0       	rjmp	.+88     	; 0x4c18 <fputc+0x6e>
    4bc0:	22 ff       	sbrs	r18, 2
    4bc2:	16 c0       	rjmp	.+44     	; 0x4bf0 <fputc+0x46>
    4bc4:	46 81       	ldd	r20, Z+6	; 0x06
    4bc6:	57 81       	ldd	r21, Z+7	; 0x07
    4bc8:	24 81       	ldd	r18, Z+4	; 0x04
    4bca:	35 81       	ldd	r19, Z+5	; 0x05
    4bcc:	42 17       	cp	r20, r18
    4bce:	53 07       	cpc	r21, r19
    4bd0:	44 f4       	brge	.+16     	; 0x4be2 <fputc+0x38>
    4bd2:	a0 81       	ld	r26, Z
    4bd4:	b1 81       	ldd	r27, Z+1	; 0x01
    4bd6:	9d 01       	movw	r18, r26
    4bd8:	2f 5f       	subi	r18, 0xFF	; 255
    4bda:	3f 4f       	sbci	r19, 0xFF	; 255
    4bdc:	20 83       	st	Z, r18
    4bde:	31 83       	std	Z+1, r19	; 0x01
    4be0:	8c 93       	st	X, r24
    4be2:	26 81       	ldd	r18, Z+6	; 0x06
    4be4:	37 81       	ldd	r19, Z+7	; 0x07
    4be6:	2f 5f       	subi	r18, 0xFF	; 255
    4be8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bea:	26 83       	std	Z+6, r18	; 0x06
    4bec:	37 83       	std	Z+7, r19	; 0x07
    4bee:	14 c0       	rjmp	.+40     	; 0x4c18 <fputc+0x6e>
    4bf0:	8b 01       	movw	r16, r22
    4bf2:	ec 01       	movw	r28, r24
    4bf4:	fb 01       	movw	r30, r22
    4bf6:	00 84       	ldd	r0, Z+8	; 0x08
    4bf8:	f1 85       	ldd	r31, Z+9	; 0x09
    4bfa:	e0 2d       	mov	r30, r0
    4bfc:	19 95       	eicall
    4bfe:	89 2b       	or	r24, r25
    4c00:	e1 f6       	brne	.-72     	; 0x4bba <fputc+0x10>
    4c02:	d8 01       	movw	r26, r16
    4c04:	16 96       	adiw	r26, 0x06	; 6
    4c06:	8d 91       	ld	r24, X+
    4c08:	9c 91       	ld	r25, X
    4c0a:	17 97       	sbiw	r26, 0x07	; 7
    4c0c:	01 96       	adiw	r24, 0x01	; 1
    4c0e:	16 96       	adiw	r26, 0x06	; 6
    4c10:	8d 93       	st	X+, r24
    4c12:	9c 93       	st	X, r25
    4c14:	17 97       	sbiw	r26, 0x07	; 7
    4c16:	ce 01       	movw	r24, r28
    4c18:	df 91       	pop	r29
    4c1a:	cf 91       	pop	r28
    4c1c:	1f 91       	pop	r17
    4c1e:	0f 91       	pop	r16
    4c20:	08 95       	ret

00004c22 <sprintf>:
    4c22:	0f 93       	push	r16
    4c24:	1f 93       	push	r17
    4c26:	cf 93       	push	r28
    4c28:	df 93       	push	r29
    4c2a:	cd b7       	in	r28, 0x3d	; 61
    4c2c:	de b7       	in	r29, 0x3e	; 62
    4c2e:	2e 97       	sbiw	r28, 0x0e	; 14
    4c30:	cd bf       	out	0x3d, r28	; 61
    4c32:	de bf       	out	0x3e, r29	; 62
    4c34:	0e 89       	ldd	r16, Y+22	; 0x16
    4c36:	1f 89       	ldd	r17, Y+23	; 0x17
    4c38:	86 e0       	ldi	r24, 0x06	; 6
    4c3a:	8c 83       	std	Y+4, r24	; 0x04
    4c3c:	09 83       	std	Y+1, r16	; 0x01
    4c3e:	1a 83       	std	Y+2, r17	; 0x02
    4c40:	8f ef       	ldi	r24, 0xFF	; 255
    4c42:	9f e7       	ldi	r25, 0x7F	; 127
    4c44:	8d 83       	std	Y+5, r24	; 0x05
    4c46:	9e 83       	std	Y+6, r25	; 0x06
    4c48:	ae 01       	movw	r20, r28
    4c4a:	46 5e       	subi	r20, 0xE6	; 230
    4c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c4e:	68 8d       	ldd	r22, Y+24	; 0x18
    4c50:	79 8d       	ldd	r23, Y+25	; 0x19
    4c52:	ce 01       	movw	r24, r28
    4c54:	01 96       	adiw	r24, 0x01	; 1
    4c56:	0e 94 f6 20 	call	0x41ec	; 0x41ec <vfprintf>
    4c5a:	ef 81       	ldd	r30, Y+7	; 0x07
    4c5c:	f8 85       	ldd	r31, Y+8	; 0x08
    4c5e:	e0 0f       	add	r30, r16
    4c60:	f1 1f       	adc	r31, r17
    4c62:	10 82       	st	Z, r1
    4c64:	2e 96       	adiw	r28, 0x0e	; 14
    4c66:	cd bf       	out	0x3d, r28	; 61
    4c68:	de bf       	out	0x3e, r29	; 62
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	1f 91       	pop	r17
    4c70:	0f 91       	pop	r16
    4c72:	08 95       	ret

00004c74 <__ultoa_invert>:
    4c74:	fa 01       	movw	r30, r20
    4c76:	aa 27       	eor	r26, r26
    4c78:	28 30       	cpi	r18, 0x08	; 8
    4c7a:	51 f1       	breq	.+84     	; 0x4cd0 <__ultoa_invert+0x5c>
    4c7c:	20 31       	cpi	r18, 0x10	; 16
    4c7e:	81 f1       	breq	.+96     	; 0x4ce0 <__ultoa_invert+0x6c>
    4c80:	e8 94       	clt
    4c82:	6f 93       	push	r22
    4c84:	6e 7f       	andi	r22, 0xFE	; 254
    4c86:	6e 5f       	subi	r22, 0xFE	; 254
    4c88:	7f 4f       	sbci	r23, 0xFF	; 255
    4c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    4c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c8e:	af 4f       	sbci	r26, 0xFF	; 255
    4c90:	b1 e0       	ldi	r27, 0x01	; 1
    4c92:	3e d0       	rcall	.+124    	; 0x4d10 <__ultoa_invert+0x9c>
    4c94:	b4 e0       	ldi	r27, 0x04	; 4
    4c96:	3c d0       	rcall	.+120    	; 0x4d10 <__ultoa_invert+0x9c>
    4c98:	67 0f       	add	r22, r23
    4c9a:	78 1f       	adc	r23, r24
    4c9c:	89 1f       	adc	r24, r25
    4c9e:	9a 1f       	adc	r25, r26
    4ca0:	a1 1d       	adc	r26, r1
    4ca2:	68 0f       	add	r22, r24
    4ca4:	79 1f       	adc	r23, r25
    4ca6:	8a 1f       	adc	r24, r26
    4ca8:	91 1d       	adc	r25, r1
    4caa:	a1 1d       	adc	r26, r1
    4cac:	6a 0f       	add	r22, r26
    4cae:	71 1d       	adc	r23, r1
    4cb0:	81 1d       	adc	r24, r1
    4cb2:	91 1d       	adc	r25, r1
    4cb4:	a1 1d       	adc	r26, r1
    4cb6:	20 d0       	rcall	.+64     	; 0x4cf8 <__ultoa_invert+0x84>
    4cb8:	09 f4       	brne	.+2      	; 0x4cbc <__ultoa_invert+0x48>
    4cba:	68 94       	set
    4cbc:	3f 91       	pop	r19
    4cbe:	2a e0       	ldi	r18, 0x0A	; 10
    4cc0:	26 9f       	mul	r18, r22
    4cc2:	11 24       	eor	r1, r1
    4cc4:	30 19       	sub	r19, r0
    4cc6:	30 5d       	subi	r19, 0xD0	; 208
    4cc8:	31 93       	st	Z+, r19
    4cca:	de f6       	brtc	.-74     	; 0x4c82 <__ultoa_invert+0xe>
    4ccc:	cf 01       	movw	r24, r30
    4cce:	08 95       	ret
    4cd0:	46 2f       	mov	r20, r22
    4cd2:	47 70       	andi	r20, 0x07	; 7
    4cd4:	40 5d       	subi	r20, 0xD0	; 208
    4cd6:	41 93       	st	Z+, r20
    4cd8:	b3 e0       	ldi	r27, 0x03	; 3
    4cda:	0f d0       	rcall	.+30     	; 0x4cfa <__ultoa_invert+0x86>
    4cdc:	c9 f7       	brne	.-14     	; 0x4cd0 <__ultoa_invert+0x5c>
    4cde:	f6 cf       	rjmp	.-20     	; 0x4ccc <__ultoa_invert+0x58>
    4ce0:	46 2f       	mov	r20, r22
    4ce2:	4f 70       	andi	r20, 0x0F	; 15
    4ce4:	40 5d       	subi	r20, 0xD0	; 208
    4ce6:	4a 33       	cpi	r20, 0x3A	; 58
    4ce8:	18 f0       	brcs	.+6      	; 0x4cf0 <__ultoa_invert+0x7c>
    4cea:	49 5d       	subi	r20, 0xD9	; 217
    4cec:	31 fd       	sbrc	r19, 1
    4cee:	40 52       	subi	r20, 0x20	; 32
    4cf0:	41 93       	st	Z+, r20
    4cf2:	02 d0       	rcall	.+4      	; 0x4cf8 <__ultoa_invert+0x84>
    4cf4:	a9 f7       	brne	.-22     	; 0x4ce0 <__ultoa_invert+0x6c>
    4cf6:	ea cf       	rjmp	.-44     	; 0x4ccc <__ultoa_invert+0x58>
    4cf8:	b4 e0       	ldi	r27, 0x04	; 4
    4cfa:	a6 95       	lsr	r26
    4cfc:	97 95       	ror	r25
    4cfe:	87 95       	ror	r24
    4d00:	77 95       	ror	r23
    4d02:	67 95       	ror	r22
    4d04:	ba 95       	dec	r27
    4d06:	c9 f7       	brne	.-14     	; 0x4cfa <__ultoa_invert+0x86>
    4d08:	00 97       	sbiw	r24, 0x00	; 0
    4d0a:	61 05       	cpc	r22, r1
    4d0c:	71 05       	cpc	r23, r1
    4d0e:	08 95       	ret
    4d10:	9b 01       	movw	r18, r22
    4d12:	ac 01       	movw	r20, r24
    4d14:	0a 2e       	mov	r0, r26
    4d16:	06 94       	lsr	r0
    4d18:	57 95       	ror	r21
    4d1a:	47 95       	ror	r20
    4d1c:	37 95       	ror	r19
    4d1e:	27 95       	ror	r18
    4d20:	ba 95       	dec	r27
    4d22:	c9 f7       	brne	.-14     	; 0x4d16 <__ultoa_invert+0xa2>
    4d24:	62 0f       	add	r22, r18
    4d26:	73 1f       	adc	r23, r19
    4d28:	84 1f       	adc	r24, r20
    4d2a:	95 1f       	adc	r25, r21
    4d2c:	a0 1d       	adc	r26, r0
    4d2e:	08 95       	ret

00004d30 <strrev>:
    4d30:	dc 01       	movw	r26, r24
    4d32:	fc 01       	movw	r30, r24
    4d34:	67 2f       	mov	r22, r23
    4d36:	71 91       	ld	r23, Z+
    4d38:	77 23       	and	r23, r23
    4d3a:	e1 f7       	brne	.-8      	; 0x4d34 <strrev+0x4>
    4d3c:	32 97       	sbiw	r30, 0x02	; 2
    4d3e:	04 c0       	rjmp	.+8      	; 0x4d48 <strrev+0x18>
    4d40:	7c 91       	ld	r23, X
    4d42:	6d 93       	st	X+, r22
    4d44:	70 83       	st	Z, r23
    4d46:	62 91       	ld	r22, -Z
    4d48:	ae 17       	cp	r26, r30
    4d4a:	bf 07       	cpc	r27, r31
    4d4c:	c8 f3       	brcs	.-14     	; 0x4d40 <strrev+0x10>
    4d4e:	08 95       	ret

00004d50 <_exit>:
    4d50:	f8 94       	cli

00004d52 <__stop_program>:
    4d52:	ff cf       	rjmp	.-2      	; 0x4d52 <__stop_program>
