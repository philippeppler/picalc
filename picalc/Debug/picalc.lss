
picalc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00802000  00003502  00003596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c7b  0080205e  0080205e  000035f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000708  00000000  00000000  00003664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dd04  00000000  00000000  00003d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004d2b  00000000  00000000  00011a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000048bd  00000000  00000000  0001679b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001730  00000000  00000000  0001b058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000542e  00000000  00000000  0001c788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008c0a  00000000  00000000  00021bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c8  00000000  00000000  0002a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_14>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      70:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      74:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      78:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      7c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      80:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      84:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      88:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      8c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      90:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      94:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      98:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      9c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      a0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      a4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      a8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      ac:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      b0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      b4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      b8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      bc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      c0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      c4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      c8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      cc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      d0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      d4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      d8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      dc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      e0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      e4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      e8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      ec:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      f0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      f4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      f8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      fc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     100:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     104:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     108:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     10c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     110:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     114:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     118:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     11c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     120:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     124:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     128:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     12c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     130:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     134:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     138:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     13c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     140:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     144:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     148:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     14c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     150:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     154:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     158:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     15c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     160:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     164:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     168:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     16c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     170:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     174:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     178:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     17c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     180:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     184:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     188:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     18c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     190:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     194:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     198:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     19c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1a0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1a4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1a8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1ac:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1b0:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__vector_108>
     1b4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1b8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1bc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1c0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1c4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1c8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1cc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1d0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1d4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1d8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1dc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1e0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1e4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1e8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1ec:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1f0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1f4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1f8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1fc:	94 10       	cpse	r9, r4
     1fe:	94 10       	cpse	r9, r4
     200:	94 10       	cpse	r9, r4
     202:	e1 10       	cpse	r14, r1
     204:	c9 10       	cpse	r12, r9
     206:	de 10       	cpse	r13, r14
     208:	94 10       	cpse	r9, r4
     20a:	94 10       	cpse	r9, r4
     20c:	e1 10       	cpse	r14, r1
     20e:	c9 10       	cpse	r12, r9

00000210 <__trampolines_start>:
     210:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <prvTimerTask+0x212>
     214:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <vDisplay>
     218:	0c 94 37 03 	jmp	0x66e	; 0x66e <vEventGroupSetBitsCallback>
     21c:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <prvTimerTask>
     220:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <prvTimerTask+0x1e2>
     224:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <prvTimerTask+0x20c>
     228:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <vDisplayUpdateTask>
     22c:	0c 94 94 10 	jmp	0x2128	; 0x2128 <prvTimerTask+0x178>
     230:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <prvIdleTask>

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	df e3       	ldi	r29, 0x3F	; 63
     23e:	de bf       	out	0x3e, r29	; 62
     240:	00 e0       	ldi	r16, 0x00	; 0
     242:	0c bf       	out	0x3c, r16	; 60

00000244 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     244:	e9 ed       	ldi	r30, 0xD9	; 217
     246:	fc e2       	ldi	r31, 0x2C	; 44
     248:	8a ea       	ldi	r24, 0xAA	; 170
     24a:	90 e4       	ldi	r25, 0x40	; 64
     24c:	81 93       	st	Z+, r24
     24e:	e0 30       	cpi	r30, 0x00	; 0
     250:	f9 07       	cpc	r31, r25
     252:	e0 f3       	brcs	.-8      	; 0x24c <init_mem+0x8>

00000254 <__do_copy_data>:
     254:	10 e2       	ldi	r17, 0x20	; 32
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b0 e2       	ldi	r27, 0x20	; 32
     25a:	e2 e0       	ldi	r30, 0x02	; 2
     25c:	f5 e3       	ldi	r31, 0x35	; 53
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	0b bf       	out	0x3b, r16	; 59
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x14>
     264:	07 90       	elpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	ae 35       	cpi	r26, 0x5E	; 94
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0x10>

0000026e <__do_clear_bss>:
     26e:	2c e2       	ldi	r18, 0x2C	; 44
     270:	ae e5       	ldi	r26, 0x5E	; 94
     272:	b0 e2       	ldi	r27, 0x20	; 32
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a9 3d       	cpi	r26, 0xD9	; 217
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 77 11 	call	0x22ee	; 0x22ee <main>
     282:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     28a:	0f 93       	push	r16
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	1f 92       	push	r1
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     296:	2f b7       	in	r18, 0x3f	; 63
     298:	29 83       	std	Y+1, r18	; 0x01
     29a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     29c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     29e:	fc 01       	movw	r30, r24
     2a0:	08 ed       	ldi	r16, 0xD8	; 216
     2a2:	04 bf       	out	0x34, r16	; 52
     2a4:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	8f bf       	out	0x3f, r24	; 63
#endif
}
     2aa:	0f 90       	pop	r0
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	0f 91       	pop	r16
     2b2:	08 95       	ret

000002b4 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     2b4:	61 11       	cpse	r22, r1
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <CLKSYS_XOSC_Config+0x8>
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <CLKSYS_XOSC_Config+0xa>
     2bc:	90 e2       	ldi	r25, 0x20	; 32
     2be:	84 2b       	or	r24, r20
     2c0:	89 2b       	or	r24, r25
     2c2:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     2c6:	08 95       	ret

000002c8 <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     2c8:	6f 71       	andi	r22, 0x1F	; 31
     2ca:	86 2b       	or	r24, r22
     2cc:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     2d0:	08 95       	ret

000002d2 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	90 81       	ld	r25, Z
     2d8:	28 2f       	mov	r18, r24
     2da:	20 95       	com	r18
     2dc:	92 23       	and	r25, r18
     2de:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     2e0:	90 81       	ld	r25, Z
	return clkEnabled;
}
     2e2:	89 23       	and	r24, r25
     2e4:	08 95       	ret

000002e6 <CLKSYS_Prescalers_Config>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     2e6:	68 2b       	or	r22, r24
     2e8:	81 e4       	ldi	r24, 0x41	; 65
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 45 01 	call	0x28a	; 0x28a <CCPWrite>
     2f0:	08 95       	ret

000002f2 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     2fa:	00 e4       	ldi	r16, 0x40	; 64
     2fc:	10 e0       	ldi	r17, 0x00	; 0
     2fe:	f8 01       	movw	r30, r16
     300:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
     302:	68 7f       	andi	r22, 0xF8	; 248
     304:	68 2b       	or	r22, r24
     306:	80 e4       	ldi	r24, 0x40	; 64
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 45 01 	call	0x28a	; 0x28a <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     30e:	f8 01       	movw	r30, r16
     310:	80 81       	ld	r24, Z
	return clkCtrl;
}
     312:	8c 23       	and	r24, r28
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	08 95       	ret

0000031c <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     31c:	fc 01       	movw	r30, r24
     31e:	90 81       	ld	r25, Z
     320:	90 7f       	andi	r25, 0xF0	; 240
     322:	69 2b       	or	r22, r25
     324:	60 83       	st	Z, r22
     326:	08 95       	ret

00000328 <TC0_ConfigWGM>:
     328:	fc 01       	movw	r30, r24
     32a:	91 81       	ldd	r25, Z+1	; 0x01
     32c:	98 7f       	andi	r25, 0xF8	; 248
     32e:	69 2b       	or	r22, r25
     330:	61 83       	std	Z+1, r22	; 0x01
     332:	08 95       	ret

00000334 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     334:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     336:	96 81       	ldd	r25, Z+6	; 0x06
     338:	9c 7f       	andi	r25, 0xFC	; 252
     33a:	69 2b       	or	r22, r25
     33c:	66 83       	std	Z+6, r22	; 0x06
     33e:	08 95       	ret

00000340 <software_reset>:
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     340:	00 00       	nop
     342:	88 ed       	ldi	r24, 0xD8	; 216
     344:	84 bf       	out	0x34, r24	; 52
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     34c:	08 95       	ret

0000034e <vApplicationStackOverflowHook>:
     34e:	0e 94 a0 01 	call	0x340	; 0x340 <software_reset>
     352:	08 95       	ret

00000354 <xEventGroupCreate>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	80 e1       	ldi	r24, 0x10	; 16
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 47 03 	call	0x68e	; 0x68e <pvPortMalloc>
     360:	ec 01       	movw	r28, r24
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	41 f0       	breq	.+16     	; 0x376 <xEventGroupCreate+0x22>
     366:	fc 01       	movw	r30, r24
     368:	11 92       	st	Z+, r1
     36a:	11 92       	st	Z+, r1
     36c:	11 92       	st	Z+, r1
     36e:	11 92       	st	Z+, r1
     370:	cf 01       	movw	r24, r30
     372:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
     376:	ce 01       	movw	r24, r28
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <xEventGroupWaitBits>:
     37e:	2f 92       	push	r2
     380:	3f 92       	push	r3
     382:	4f 92       	push	r4
     384:	5f 92       	push	r5
     386:	6f 92       	push	r6
     388:	7f 92       	push	r7
     38a:	8f 92       	push	r8
     38c:	9f 92       	push	r9
     38e:	af 92       	push	r10
     390:	bf 92       	push	r11
     392:	cf 92       	push	r12
     394:	df 92       	push	r13
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	ec 01       	movw	r28, r24
     3a4:	4a 01       	movw	r8, r20
     3a6:	5b 01       	movw	r10, r22
     3a8:	62 2e       	mov	r6, r18
     3aa:	70 2e       	mov	r7, r16
     3ac:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vTaskSuspendAll>
     3b0:	28 80       	ld	r2, Y
     3b2:	39 80       	ldd	r3, Y+1	; 0x01
     3b4:	4a 80       	ldd	r4, Y+2	; 0x02
     3b6:	5b 80       	ldd	r5, Y+3	; 0x03
     3b8:	01 11       	cpse	r16, r1
     3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <xEventGroupWaitBits+0x58>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	b2 01       	movw	r22, r4
     3c0:	a1 01       	movw	r20, r2
     3c2:	48 21       	and	r20, r8
     3c4:	59 21       	and	r21, r9
     3c6:	6a 21       	and	r22, r10
     3c8:	7b 21       	and	r23, r11
     3ca:	45 2b       	or	r20, r21
     3cc:	46 2b       	or	r20, r22
     3ce:	47 2b       	or	r20, r23
     3d0:	79 f4       	brne	.+30     	; 0x3f0 <xEventGroupWaitBits+0x72>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	0d c0       	rjmp	.+26     	; 0x3f0 <xEventGroupWaitBits+0x72>
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	b2 01       	movw	r22, r4
     3da:	a1 01       	movw	r20, r2
     3dc:	48 21       	and	r20, r8
     3de:	59 21       	and	r21, r9
     3e0:	6a 21       	and	r22, r10
     3e2:	7b 21       	and	r23, r11
     3e4:	48 15       	cp	r20, r8
     3e6:	59 05       	cpc	r21, r9
     3e8:	6a 05       	cpc	r22, r10
     3ea:	7b 05       	cpc	r23, r11
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <xEventGroupWaitBits+0x72>
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	88 23       	and	r24, r24
     3f2:	81 f0       	breq	.+32     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3f4:	66 20       	and	r6, r6
     3f6:	09 f4       	brne	.+2      	; 0x3fa <xEventGroupWaitBits+0x7c>
     3f8:	70 c0       	rjmp	.+224    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     3fa:	80 94       	com	r8
     3fc:	90 94       	com	r9
     3fe:	a0 94       	com	r10
     400:	b0 94       	com	r11
     402:	82 20       	and	r8, r2
     404:	93 20       	and	r9, r3
     406:	a4 20       	and	r10, r4
     408:	b5 20       	and	r11, r5
     40a:	88 82       	st	Y, r8
     40c:	99 82       	std	Y+1, r9	; 0x01
     40e:	aa 82       	std	Y+2, r10	; 0x02
     410:	bb 82       	std	Y+3, r11	; 0x03
     412:	63 c0       	rjmp	.+198    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     414:	c1 14       	cp	r12, r1
     416:	d1 04       	cpc	r13, r1
     418:	e1 04       	cpc	r14, r1
     41a:	f1 04       	cpc	r15, r1
     41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	5d c0       	rjmp	.+186    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     420:	66 20       	and	r6, r6
     422:	29 f0       	breq	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	71 e0       	ldi	r23, 0x01	; 1
     42c:	03 c0       	rjmp	.+6      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     42e:	40 e0       	ldi	r20, 0x00	; 0
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	ba 01       	movw	r22, r20
     434:	71 10       	cpse	r7, r1
     436:	74 60       	ori	r23, 0x04	; 4
     438:	48 29       	or	r20, r8
     43a:	59 29       	or	r21, r9
     43c:	6a 29       	or	r22, r10
     43e:	7b 29       	or	r23, r11
     440:	97 01       	movw	r18, r14
     442:	86 01       	movw	r16, r12
     444:	ce 01       	movw	r24, r28
     446:	04 96       	adiw	r24, 0x04	; 4
     448:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <vTaskPlaceOnUnorderedEventList>
     44c:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
     450:	81 11       	cpse	r24, r1
     452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     454:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
     458:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <uxTaskResetEventItemValue>
     45c:	91 fd       	sbrc	r25, 1
     45e:	39 c0       	rjmp	.+114    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     460:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     464:	ff 93       	push	r31
     466:	f8 7f       	andi	r31, 0xF8	; 248
     468:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     46c:	68 81       	ld	r22, Y
     46e:	79 81       	ldd	r23, Y+1	; 0x01
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	9b 81       	ldd	r25, Y+3	; 0x03
     474:	71 10       	cpse	r7, r1
     476:	0d c0       	rjmp	.+26     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     478:	21 e0       	ldi	r18, 0x01	; 1
     47a:	75 01       	movw	r14, r10
     47c:	64 01       	movw	r12, r8
     47e:	c6 22       	and	r12, r22
     480:	d7 22       	and	r13, r23
     482:	e8 22       	and	r14, r24
     484:	f9 22       	and	r15, r25
     486:	cd 28       	or	r12, r13
     488:	ce 28       	or	r12, r14
     48a:	cf 28       	or	r12, r15
     48c:	79 f4       	brne	.+30     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	0d c0       	rjmp	.+26     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	75 01       	movw	r14, r10
     496:	64 01       	movw	r12, r8
     498:	c6 22       	and	r12, r22
     49a:	d7 22       	and	r13, r23
     49c:	e8 22       	and	r14, r24
     49e:	f9 22       	and	r15, r25
     4a0:	c8 14       	cp	r12, r8
     4a2:	d9 04       	cpc	r13, r9
     4a4:	ea 04       	cpc	r14, r10
     4a6:	fb 04       	cpc	r15, r11
     4a8:	09 f0       	breq	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	22 23       	and	r18, r18
     4ae:	71 f0       	breq	.+28     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4b0:	66 20       	and	r6, r6
     4b2:	61 f0       	breq	.+24     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4b4:	80 94       	com	r8
     4b6:	90 94       	com	r9
     4b8:	a0 94       	com	r10
     4ba:	b0 94       	com	r11
     4bc:	86 22       	and	r8, r22
     4be:	97 22       	and	r9, r23
     4c0:	a8 22       	and	r10, r24
     4c2:	b9 22       	and	r11, r25
     4c4:	88 82       	st	Y, r8
     4c6:	99 82       	std	Y+1, r9	; 0x01
     4c8:	aa 82       	std	Y+2, r10	; 0x02
     4ca:	bb 82       	std	Y+3, r11	; 0x03
     4cc:	ff 91       	pop	r31
     4ce:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     4d2:	1b 01       	movw	r2, r22
     4d4:	2c 01       	movw	r4, r24
     4d6:	55 24       	eor	r5, r5
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4da:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
     4de:	c2 01       	movw	r24, r4
     4e0:	b1 01       	movw	r22, r2
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	bf 90       	pop	r11
     4f4:	af 90       	pop	r10
     4f6:	9f 90       	pop	r9
     4f8:	8f 90       	pop	r8
     4fa:	7f 90       	pop	r7
     4fc:	6f 90       	pop	r6
     4fe:	5f 90       	pop	r5
     500:	4f 90       	pop	r4
     502:	3f 90       	pop	r3
     504:	2f 90       	pop	r2
     506:	08 95       	ret

00000508 <xEventGroupClearBits>:
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     510:	ff 93       	push	r31
     512:	f8 7f       	andi	r31, 0xF8	; 248
     514:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     518:	fc 01       	movw	r30, r24
     51a:	00 81       	ld	r16, Z
     51c:	11 81       	ldd	r17, Z+1	; 0x01
     51e:	22 81       	ldd	r18, Z+2	; 0x02
     520:	33 81       	ldd	r19, Z+3	; 0x03
     522:	40 95       	com	r20
     524:	50 95       	com	r21
     526:	60 95       	com	r22
     528:	70 95       	com	r23
     52a:	40 23       	and	r20, r16
     52c:	51 23       	and	r21, r17
     52e:	62 23       	and	r22, r18
     530:	73 23       	and	r23, r19
     532:	40 83       	st	Z, r20
     534:	51 83       	std	Z+1, r21	; 0x01
     536:	62 83       	std	Z+2, r22	; 0x02
     538:	73 83       	std	Z+3, r23	; 0x03
     53a:	ff 91       	pop	r31
     53c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     540:	c9 01       	movw	r24, r18
     542:	b8 01       	movw	r22, r16
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <xEventGroupSetBits>:
     54a:	4f 92       	push	r4
     54c:	5f 92       	push	r5
     54e:	6f 92       	push	r6
     550:	7f 92       	push	r7
     552:	af 92       	push	r10
     554:	bf 92       	push	r11
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	ec 01       	movw	r28, r24
     568:	6a 01       	movw	r12, r20
     56a:	7b 01       	movw	r14, r22
     56c:	8c 01       	movw	r16, r24
     56e:	09 5f       	subi	r16, 0xF9	; 249
     570:	1f 4f       	sbci	r17, 0xFF	; 255
     572:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vTaskSuspendAll>
     576:	eb 85       	ldd	r30, Y+11	; 0x0b
     578:	fc 85       	ldd	r31, Y+12	; 0x0c
     57a:	88 81       	ld	r24, Y
     57c:	99 81       	ldd	r25, Y+1	; 0x01
     57e:	aa 81       	ldd	r26, Y+2	; 0x02
     580:	bb 81       	ldd	r27, Y+3	; 0x03
     582:	c8 2a       	or	r12, r24
     584:	d9 2a       	or	r13, r25
     586:	ea 2a       	or	r14, r26
     588:	fb 2a       	or	r15, r27
     58a:	c8 82       	st	Y, r12
     58c:	d9 82       	std	Y+1, r13	; 0x01
     58e:	ea 82       	std	Y+2, r14	; 0x02
     590:	fb 82       	std	Y+3, r15	; 0x03
     592:	0e 17       	cp	r16, r30
     594:	1f 07       	cpc	r17, r31
     596:	09 f4       	brne	.+2      	; 0x59a <xEventGroupSetBits+0x50>
     598:	42 c0       	rjmp	.+132    	; 0x61e <xEventGroupSetBits+0xd4>
     59a:	c1 2c       	mov	r12, r1
     59c:	d1 2c       	mov	r13, r1
     59e:	76 01       	movw	r14, r12
     5a0:	a4 80       	ldd	r10, Z+4	; 0x04
     5a2:	b5 80       	ldd	r11, Z+5	; 0x05
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	a2 81       	ldd	r26, Z+2	; 0x02
     5aa:	b3 81       	ldd	r27, Z+3	; 0x03
     5ac:	ac 01       	movw	r20, r24
     5ae:	bd 01       	movw	r22, r26
     5b0:	77 27       	eor	r23, r23
     5b2:	b2 fd       	sbrc	r27, 2
     5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <xEventGroupSetBits+0x8a>
     5b6:	48 80       	ld	r4, Y
     5b8:	59 80       	ldd	r5, Y+1	; 0x01
     5ba:	6a 80       	ldd	r6, Y+2	; 0x02
     5bc:	7b 80       	ldd	r7, Y+3	; 0x03
     5be:	44 22       	and	r4, r20
     5c0:	55 22       	and	r5, r21
     5c2:	66 22       	and	r6, r22
     5c4:	77 22       	and	r7, r23
     5c6:	21 e0       	ldi	r18, 0x01	; 1
     5c8:	45 28       	or	r4, r5
     5ca:	46 28       	or	r4, r6
     5cc:	47 28       	or	r4, r7
     5ce:	89 f4       	brne	.+34     	; 0x5f2 <xEventGroupSetBits+0xa8>
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <xEventGroupSetBits+0xa8>
     5d4:	48 80       	ld	r4, Y
     5d6:	59 80       	ldd	r5, Y+1	; 0x01
     5d8:	6a 80       	ldd	r6, Y+2	; 0x02
     5da:	7b 80       	ldd	r7, Y+3	; 0x03
     5dc:	44 22       	and	r4, r20
     5de:	55 22       	and	r5, r21
     5e0:	66 22       	and	r6, r22
     5e2:	77 22       	and	r7, r23
     5e4:	21 e0       	ldi	r18, 0x01	; 1
     5e6:	44 16       	cp	r4, r20
     5e8:	55 06       	cpc	r5, r21
     5ea:	66 06       	cpc	r6, r22
     5ec:	77 06       	cpc	r7, r23
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <xEventGroupSetBits+0xa8>
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	22 23       	and	r18, r18
     5f4:	71 f0       	breq	.+28     	; 0x612 <xEventGroupSetBits+0xc8>
     5f6:	b0 ff       	sbrs	r27, 0
     5f8:	04 c0       	rjmp	.+8      	; 0x602 <xEventGroupSetBits+0xb8>
     5fa:	c4 2a       	or	r12, r20
     5fc:	d5 2a       	or	r13, r21
     5fe:	e6 2a       	or	r14, r22
     600:	f7 2a       	or	r15, r23
     602:	48 81       	ld	r20, Y
     604:	59 81       	ldd	r21, Y+1	; 0x01
     606:	6a 81       	ldd	r22, Y+2	; 0x02
     608:	7b 81       	ldd	r23, Y+3	; 0x03
     60a:	72 60       	ori	r23, 0x02	; 2
     60c:	cf 01       	movw	r24, r30
     60e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <vTaskRemoveFromUnorderedEventList>
     612:	ea 2d       	mov	r30, r10
     614:	fb 2d       	mov	r31, r11
     616:	0e 17       	cp	r16, r30
     618:	1f 07       	cpc	r17, r31
     61a:	11 f6       	brne	.-124    	; 0x5a0 <xEventGroupSetBits+0x56>
     61c:	03 c0       	rjmp	.+6      	; 0x624 <xEventGroupSetBits+0xda>
     61e:	c1 2c       	mov	r12, r1
     620:	d1 2c       	mov	r13, r1
     622:	76 01       	movw	r14, r12
     624:	c0 94       	com	r12
     626:	d0 94       	com	r13
     628:	e0 94       	com	r14
     62a:	f0 94       	com	r15
     62c:	88 81       	ld	r24, Y
     62e:	99 81       	ldd	r25, Y+1	; 0x01
     630:	aa 81       	ldd	r26, Y+2	; 0x02
     632:	bb 81       	ldd	r27, Y+3	; 0x03
     634:	c8 22       	and	r12, r24
     636:	d9 22       	and	r13, r25
     638:	ea 22       	and	r14, r26
     63a:	fb 22       	and	r15, r27
     63c:	c8 82       	st	Y, r12
     63e:	d9 82       	std	Y+1, r13	; 0x01
     640:	ea 82       	std	Y+2, r14	; 0x02
     642:	fb 82       	std	Y+3, r15	; 0x03
     644:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
     648:	68 81       	ld	r22, Y
     64a:	79 81       	ldd	r23, Y+1	; 0x01
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	9b 81       	ldd	r25, Y+3	; 0x03
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	df 90       	pop	r13
     65e:	cf 90       	pop	r12
     660:	bf 90       	pop	r11
     662:	af 90       	pop	r10
     664:	7f 90       	pop	r7
     666:	6f 90       	pop	r6
     668:	5f 90       	pop	r5
     66a:	4f 90       	pop	r4
     66c:	08 95       	ret

0000066e <vEventGroupSetBitsCallback>:
     66e:	0e 94 a5 02 	call	0x54a	; 0x54a <xEventGroupSetBits>
     672:	08 95       	ret

00000674 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     678:	89 01       	movw	r16, r18
     67a:	9a 01       	movw	r18, r20
     67c:	ab 01       	movw	r20, r22
     67e:	bc 01       	movw	r22, r24
     680:	87 e3       	ldi	r24, 0x37	; 55
     682:	93 e0       	ldi	r25, 0x03	; 3
     684:	0e 94 07 11 	call	0x220e	; 0x220e <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	08 95       	ret

0000068e <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     694:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     698:	20 91 5e 20 	lds	r18, 0x205E	; 0x80205e <__data_end>
     69c:	30 91 5f 20 	lds	r19, 0x205F	; 0x80205f <__data_end+0x1>
     6a0:	c9 01       	movw	r24, r18
     6a2:	8c 0f       	add	r24, r28
     6a4:	9d 1f       	adc	r25, r29
     6a6:	88 3b       	cpi	r24, 0xB8	; 184
     6a8:	4b e0       	ldi	r20, 0x0B	; 11
     6aa:	94 07       	cpc	r25, r20
     6ac:	58 f4       	brcc	.+22     	; 0x6c4 <pvPortMalloc+0x36>
     6ae:	28 17       	cp	r18, r24
     6b0:	39 07       	cpc	r19, r25
     6b2:	58 f4       	brcc	.+22     	; 0x6ca <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     6b4:	e9 01       	movw	r28, r18
     6b6:	c0 5a       	subi	r28, 0xA0	; 160
     6b8:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     6ba:	80 93 5e 20 	sts	0x205E, r24	; 0x80205e <__data_end>
     6be:	90 93 5f 20 	sts	0x205F, r25	; 0x80205f <__data_end+0x1>
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     6c4:	c0 e0       	ldi	r28, 0x00	; 0
     6c6:	d0 e0       	ldi	r29, 0x00	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <pvPortMalloc+0x40>
     6ca:	c0 e0       	ldi	r28, 0x00	; 0
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     6ce:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     6d2:	ce 01       	movw	r24, r28
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6da:	08 95       	ret

000006dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6dc:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6de:	03 96       	adiw	r24, 0x03	; 3
     6e0:	81 83       	std	Z+1, r24	; 0x01
     6e2:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6e4:	4f ef       	ldi	r20, 0xFF	; 255
     6e6:	5f ef       	ldi	r21, 0xFF	; 255
     6e8:	ba 01       	movw	r22, r20
     6ea:	43 83       	std	Z+3, r20	; 0x03
     6ec:	54 83       	std	Z+4, r21	; 0x04
     6ee:	65 83       	std	Z+5, r22	; 0x05
     6f0:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6f2:	87 83       	std	Z+7, r24	; 0x07
     6f4:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6f6:	81 87       	std	Z+9, r24	; 0x09
     6f8:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     6fa:	10 82       	st	Z, r1
     6fc:	08 95       	ret

000006fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     6fe:	fc 01       	movw	r30, r24
     700:	12 86       	std	Z+10, r1	; 0x0a
     702:	13 86       	std	Z+11, r1	; 0x0b
     704:	08 95       	ret

00000706 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	9c 01       	movw	r18, r24
     70c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     70e:	dc 01       	movw	r26, r24
     710:	11 96       	adiw	r26, 0x01	; 1
     712:	cd 91       	ld	r28, X+
     714:	dc 91       	ld	r29, X
     716:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     718:	c4 83       	std	Z+4, r28	; 0x04
     71a:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     71c:	8e 81       	ldd	r24, Y+6	; 0x06
     71e:	9f 81       	ldd	r25, Y+7	; 0x07
     720:	86 83       	std	Z+6, r24	; 0x06
     722:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     724:	8e 81       	ldd	r24, Y+6	; 0x06
     726:	9f 81       	ldd	r25, Y+7	; 0x07
     728:	dc 01       	movw	r26, r24
     72a:	14 96       	adiw	r26, 0x04	; 4
     72c:	6d 93       	st	X+, r22
     72e:	7c 93       	st	X, r23
     730:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     732:	6e 83       	std	Y+6, r22	; 0x06
     734:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     736:	22 87       	std	Z+10, r18	; 0x0a
     738:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     73a:	f9 01       	movw	r30, r18
     73c:	80 81       	ld	r24, Z
     73e:	8f 5f       	subi	r24, 0xFF	; 255
     740:	80 83       	st	Z, r24
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     752:	08 81       	ld	r16, Y
     754:	19 81       	ldd	r17, Y+1	; 0x01
     756:	2a 81       	ldd	r18, Y+2	; 0x02
     758:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     75a:	0f 3f       	cpi	r16, 0xFF	; 255
     75c:	4f ef       	ldi	r20, 0xFF	; 255
     75e:	14 07       	cpc	r17, r20
     760:	24 07       	cpc	r18, r20
     762:	34 07       	cpc	r19, r20
     764:	21 f4       	brne	.+8      	; 0x76e <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     766:	fc 01       	movw	r30, r24
     768:	a1 85       	ldd	r26, Z+9	; 0x09
     76a:	b2 85       	ldd	r27, Z+10	; 0x0a
     76c:	11 c0       	rjmp	.+34     	; 0x790 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     76e:	dc 01       	movw	r26, r24
     770:	13 96       	adiw	r26, 0x03	; 3
     772:	01 c0       	rjmp	.+2      	; 0x776 <vListInsert+0x2e>
     774:	df 01       	movw	r26, r30
     776:	14 96       	adiw	r26, 0x04	; 4
     778:	ed 91       	ld	r30, X+
     77a:	fc 91       	ld	r31, X
     77c:	15 97       	sbiw	r26, 0x05	; 5
     77e:	40 81       	ld	r20, Z
     780:	51 81       	ldd	r21, Z+1	; 0x01
     782:	62 81       	ldd	r22, Z+2	; 0x02
     784:	73 81       	ldd	r23, Z+3	; 0x03
     786:	04 17       	cp	r16, r20
     788:	15 07       	cpc	r17, r21
     78a:	26 07       	cpc	r18, r22
     78c:	37 07       	cpc	r19, r23
     78e:	90 f7       	brcc	.-28     	; 0x774 <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     790:	14 96       	adiw	r26, 0x04	; 4
     792:	ed 91       	ld	r30, X+
     794:	fc 91       	ld	r31, X
     796:	15 97       	sbiw	r26, 0x05	; 5
     798:	ec 83       	std	Y+4, r30	; 0x04
     79a:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     79c:	c6 83       	std	Z+6, r28	; 0x06
     79e:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     7a0:	ae 83       	std	Y+6, r26	; 0x06
     7a2:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     7a4:	14 96       	adiw	r26, 0x04	; 4
     7a6:	cd 93       	st	X+, r28
     7a8:	dc 93       	st	X, r29
     7aa:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     7ac:	8a 87       	std	Y+10, r24	; 0x0a
     7ae:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 81       	ld	r18, Z
     7b4:	2f 5f       	subi	r18, 0xFF	; 255
     7b6:	20 83       	st	Z, r18
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     7c8:	a2 85       	ldd	r26, Z+10	; 0x0a
     7ca:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7cc:	c4 81       	ldd	r28, Z+4	; 0x04
     7ce:	d5 81       	ldd	r29, Z+5	; 0x05
     7d0:	86 81       	ldd	r24, Z+6	; 0x06
     7d2:	97 81       	ldd	r25, Z+7	; 0x07
     7d4:	8e 83       	std	Y+6, r24	; 0x06
     7d6:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7d8:	c6 81       	ldd	r28, Z+6	; 0x06
     7da:	d7 81       	ldd	r29, Z+7	; 0x07
     7dc:	84 81       	ldd	r24, Z+4	; 0x04
     7de:	95 81       	ldd	r25, Z+5	; 0x05
     7e0:	8c 83       	std	Y+4, r24	; 0x04
     7e2:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     7e4:	11 96       	adiw	r26, 0x01	; 1
     7e6:	8d 91       	ld	r24, X+
     7e8:	9c 91       	ld	r25, X
     7ea:	12 97       	sbiw	r26, 0x02	; 2
     7ec:	e8 17       	cp	r30, r24
     7ee:	f9 07       	cpc	r31, r25
     7f0:	31 f4       	brne	.+12     	; 0x7fe <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     7f2:	86 81       	ldd	r24, Z+6	; 0x06
     7f4:	97 81       	ldd	r25, Z+7	; 0x07
     7f6:	11 96       	adiw	r26, 0x01	; 1
     7f8:	8d 93       	st	X+, r24
     7fa:	9c 93       	st	X, r25
     7fc:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     7fe:	12 86       	std	Z+10, r1	; 0x0a
     800:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     802:	8c 91       	ld	r24, X
     804:	81 50       	subi	r24, 0x01	; 1
     806:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     808:	8c 91       	ld	r24, X
}
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <_portSetInterruptMaskFromIsr>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     810:	e0 ea       	ldi	r30, 0xA0	; 160
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	82 81       	ldd	r24, Z+2	; 0x02
     816:	92 81       	ldd	r25, Z+2	; 0x02
     818:	98 7f       	andi	r25, 0xF8	; 248
     81a:	92 83       	std	Z+2, r25	; 0x02
     81c:	08 95       	ret

0000081e <pxPortInitialiseStack>:
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	31 e1       	ldi	r19, 0x11	; 17
     828:	fc 01       	movw	r30, r24
     82a:	30 83       	st	Z, r19
     82c:	31 97       	sbiw	r30, 0x01	; 1
     82e:	22 e2       	ldi	r18, 0x22	; 34
     830:	20 83       	st	Z, r18
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	a3 e3       	ldi	r26, 0x33	; 51
     836:	a0 83       	st	Z, r26
     838:	6b 01       	movw	r12, r22
     83a:	e1 2c       	mov	r14, r1
     83c:	f1 2c       	mov	r15, r1
     83e:	31 97       	sbiw	r30, 0x01	; 1
     840:	60 83       	st	Z, r22
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	d0 82       	st	Z, r13
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	e0 82       	st	Z, r14
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	61 e3       	ldi	r22, 0x31	; 49
     84e:	60 83       	st	Z, r22
     850:	31 97       	sbiw	r30, 0x01	; 1
     852:	60 e8       	ldi	r22, 0x80	; 128
     854:	60 83       	st	Z, r22
     856:	31 97       	sbiw	r30, 0x01	; 1
     858:	67 e8       	ldi	r22, 0x87	; 135
     85a:	60 83       	st	Z, r22
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	10 82       	st	Z, r1
     860:	31 97       	sbiw	r30, 0x01	; 1
     862:	10 82       	st	Z, r1
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	62 e0       	ldi	r22, 0x02	; 2
     868:	60 83       	st	Z, r22
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	63 e0       	ldi	r22, 0x03	; 3
     86e:	60 83       	st	Z, r22
     870:	31 97       	sbiw	r30, 0x01	; 1
     872:	64 e0       	ldi	r22, 0x04	; 4
     874:	60 83       	st	Z, r22
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	65 e0       	ldi	r22, 0x05	; 5
     87a:	60 83       	st	Z, r22
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	66 e0       	ldi	r22, 0x06	; 6
     880:	60 83       	st	Z, r22
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	67 e0       	ldi	r22, 0x07	; 7
     886:	60 83       	st	Z, r22
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	68 e0       	ldi	r22, 0x08	; 8
     88c:	60 83       	st	Z, r22
     88e:	31 97       	sbiw	r30, 0x01	; 1
     890:	69 e0       	ldi	r22, 0x09	; 9
     892:	60 83       	st	Z, r22
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	60 e1       	ldi	r22, 0x10	; 16
     898:	60 83       	st	Z, r22
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	30 83       	st	Z, r19
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	32 e1       	ldi	r19, 0x12	; 18
     8a2:	30 83       	st	Z, r19
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	33 e1       	ldi	r19, 0x13	; 19
     8a8:	30 83       	st	Z, r19
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	34 e1       	ldi	r19, 0x14	; 20
     8ae:	30 83       	st	Z, r19
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	35 e1       	ldi	r19, 0x15	; 21
     8b4:	30 83       	st	Z, r19
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	36 e1       	ldi	r19, 0x16	; 22
     8ba:	30 83       	st	Z, r19
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	37 e1       	ldi	r19, 0x17	; 23
     8c0:	30 83       	st	Z, r19
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	38 e1       	ldi	r19, 0x18	; 24
     8c6:	30 83       	st	Z, r19
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	39 e1       	ldi	r19, 0x19	; 25
     8cc:	30 83       	st	Z, r19
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	30 e2       	ldi	r19, 0x20	; 32
     8d2:	30 83       	st	Z, r19
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	31 e2       	ldi	r19, 0x21	; 33
     8d8:	30 83       	st	Z, r19
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	20 83       	st	Z, r18
     8de:	31 97       	sbiw	r30, 0x01	; 1
     8e0:	23 e2       	ldi	r18, 0x23	; 35
     8e2:	20 83       	st	Z, r18
     8e4:	6a 01       	movw	r12, r20
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	40 83       	st	Z, r20
     8ea:	31 97       	sbiw	r30, 0x01	; 1
     8ec:	d0 82       	st	Z, r13
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	26 e2       	ldi	r18, 0x26	; 38
     8f2:	20 83       	st	Z, r18
     8f4:	31 97       	sbiw	r30, 0x01	; 1
     8f6:	27 e2       	ldi	r18, 0x27	; 39
     8f8:	20 83       	st	Z, r18
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	28 e2       	ldi	r18, 0x28	; 40
     8fe:	20 83       	st	Z, r18
     900:	31 97       	sbiw	r30, 0x01	; 1
     902:	29 e2       	ldi	r18, 0x29	; 41
     904:	20 83       	st	Z, r18
     906:	31 97       	sbiw	r30, 0x01	; 1
     908:	20 e3       	ldi	r18, 0x30	; 48
     90a:	20 83       	st	Z, r18
     90c:	88 97       	sbiw	r24, 0x28	; 40
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	08 95       	ret

00000918 <xPortStartScheduler>:
     918:	83 ef       	ldi	r24, 0xF3	; 243
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     920:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     924:	65 e0       	ldi	r22, 0x05	; 5
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	98 e0       	ldi	r25, 0x08	; 8
     92a:	0e 94 8e 01 	call	0x31c	; 0x31c <TC0_ConfigClockSource>
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	98 e0       	ldi	r25, 0x08	; 8
     934:	0e 94 9a 01 	call	0x334	; 0x334 <TC0_SetOverflowIntLevel>
     938:	a0 91 86 2c 	lds	r26, 0x2C86	; 0x802c86 <pxCurrentTCB>
     93c:	b0 91 87 2c 	lds	r27, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
     940:	0d 90       	ld	r0, X+
     942:	0d be       	out	0x3d, r0	; 61
     944:	0d 90       	ld	r0, X+
     946:	0e be       	out	0x3e, r0	; 62
     948:	ef 91       	pop	r30
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	7f 91       	pop	r23
     958:	6f 91       	pop	r22
     95a:	5f 91       	pop	r21
     95c:	4f 91       	pop	r20
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	9f 90       	pop	r9
     974:	8f 90       	pop	r8
     976:	7f 90       	pop	r7
     978:	6f 90       	pop	r6
     97a:	5f 90       	pop	r5
     97c:	4f 90       	pop	r4
     97e:	3f 90       	pop	r3
     980:	2f 90       	pop	r2
     982:	1f 90       	pop	r1
     984:	0f 90       	pop	r0
     986:	ff 91       	pop	r31
     988:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     98c:	ff 91       	pop	r31
     98e:	ff bf       	out	0x3f, r31	; 63
     990:	ff 91       	pop	r31
     992:	08 95       	ret
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	08 95       	ret

00000998 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     998:	ff 93       	push	r31
     99a:	ff b7       	in	r31, 0x3f	; 63
     99c:	ff 93       	push	r31
     99e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     9a2:	ff 93       	push	r31
     9a4:	f8 7f       	andi	r31, 0xF8	; 248
     9a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     9aa:	0f 92       	push	r0
     9ac:	1f 92       	push	r1
     9ae:	11 24       	eor	r1, r1
     9b0:	2f 92       	push	r2
     9b2:	3f 92       	push	r3
     9b4:	4f 92       	push	r4
     9b6:	5f 92       	push	r5
     9b8:	6f 92       	push	r6
     9ba:	7f 92       	push	r7
     9bc:	8f 92       	push	r8
     9be:	9f 92       	push	r9
     9c0:	af 92       	push	r10
     9c2:	bf 92       	push	r11
     9c4:	cf 92       	push	r12
     9c6:	df 92       	push	r13
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	2f 93       	push	r18
     9d2:	3f 93       	push	r19
     9d4:	4f 93       	push	r20
     9d6:	5f 93       	push	r21
     9d8:	6f 93       	push	r22
     9da:	7f 93       	push	r23
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	ef 93       	push	r30
     9ea:	a0 91 86 2c 	lds	r26, 0x2C86	; 0x802c86 <pxCurrentTCB>
     9ee:	b0 91 87 2c 	lds	r27, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
     9f2:	0d b6       	in	r0, 0x3d	; 61
     9f4:	0d 92       	st	X+, r0
     9f6:	0e b6       	in	r0, 0x3e	; 62
     9f8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     9fa:	0e 94 44 0c 	call	0x1888	; 0x1888 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     9fe:	a0 91 86 2c 	lds	r26, 0x2C86	; 0x802c86 <pxCurrentTCB>
     a02:	b0 91 87 2c 	lds	r27, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
     a06:	0d 90       	ld	r0, X+
     a08:	0d be       	out	0x3d, r0	; 61
     a0a:	0d 90       	ld	r0, X+
     a0c:	0e be       	out	0x3e, r0	; 62
     a0e:	ef 91       	pop	r30
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	bf 91       	pop	r27
     a16:	af 91       	pop	r26
     a18:	9f 91       	pop	r25
     a1a:	8f 91       	pop	r24
     a1c:	7f 91       	pop	r23
     a1e:	6f 91       	pop	r22
     a20:	5f 91       	pop	r21
     a22:	4f 91       	pop	r20
     a24:	3f 91       	pop	r19
     a26:	2f 91       	pop	r18
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	ff 90       	pop	r15
     a2e:	ef 90       	pop	r14
     a30:	df 90       	pop	r13
     a32:	cf 90       	pop	r12
     a34:	bf 90       	pop	r11
     a36:	af 90       	pop	r10
     a38:	9f 90       	pop	r9
     a3a:	8f 90       	pop	r8
     a3c:	7f 90       	pop	r7
     a3e:	6f 90       	pop	r6
     a40:	5f 90       	pop	r5
     a42:	4f 90       	pop	r4
     a44:	3f 90       	pop	r3
     a46:	2f 90       	pop	r2
     a48:	1f 90       	pop	r1
     a4a:	0f 90       	pop	r0
     a4c:	ff 91       	pop	r31
     a4e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     a52:	ff 91       	pop	r31
     a54:	ff bf       	out	0x3f, r31	; 63
     a56:	ff 91       	pop	r31
	asm volatile ( "ret" );
     a58:	08 95       	ret

00000a5a <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     a5a:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     a5c:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <intTaskSwitchPending>
     a60:	89 2b       	or	r24, r25
     a62:	80 93 d2 2c 	sts	0x2CD2, r24	; 0x802cd2 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     a66:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     a6a:	91 30       	cpi	r25, 0x01	; 1
     a6c:	41 f0       	breq	.+16     	; 0xa7e <portTaskSwitchContext+0x24>
     a6e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     a72:	92 30       	cpi	r25, 0x02	; 2
     a74:	21 f0       	breq	.+8      	; 0xa7e <portTaskSwitchContext+0x24>
     a76:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     a7a:	94 30       	cpi	r25, 0x04	; 4
     a7c:	59 f4       	brne	.+22     	; 0xa94 <portTaskSwitchContext+0x3a>
     a7e:	88 23       	and	r24, r24
     a80:	49 f0       	breq	.+18     	; 0xa94 <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     a82:	0e 94 08 04 	call	0x810	; 0x810 <_portSetInterruptMaskFromIsr>
     a86:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     a88:	10 92 d2 2c 	sts	0x2CD2, r1	; 0x802cd2 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     a8c:	0e 94 44 0c 	call	0x1888	; 0x1888 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     a90:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		}                                          					
	}
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     a98:	ff 93       	push	r31
     a9a:	ff b7       	in	r31, 0x3f	; 63
     a9c:	ff 93       	push	r31
     a9e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     aa2:	ff 93       	push	r31
     aa4:	f8 7f       	andi	r31, 0xF8	; 248
     aa6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     aaa:	0f 92       	push	r0
     aac:	1f 92       	push	r1
     aae:	11 24       	eor	r1, r1
     ab0:	2f 92       	push	r2
     ab2:	3f 92       	push	r3
     ab4:	4f 92       	push	r4
     ab6:	5f 92       	push	r5
     ab8:	6f 92       	push	r6
     aba:	7f 92       	push	r7
     abc:	8f 92       	push	r8
     abe:	9f 92       	push	r9
     ac0:	af 92       	push	r10
     ac2:	bf 92       	push	r11
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	2f 93       	push	r18
     ad2:	3f 93       	push	r19
     ad4:	4f 93       	push	r20
     ad6:	5f 93       	push	r21
     ad8:	6f 93       	push	r22
     ada:	7f 93       	push	r23
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25
     ae0:	af 93       	push	r26
     ae2:	bf 93       	push	r27
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ef 93       	push	r30
     aea:	a0 91 86 2c 	lds	r26, 0x2C86	; 0x802c86 <pxCurrentTCB>
     aee:	b0 91 87 2c 	lds	r27, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
     af2:	0d b6       	in	r0, 0x3d	; 61
     af4:	0d 92       	st	X+, r0
     af6:	0e b6       	in	r0, 0x3e	; 62
     af8:	0d 92       	st	X+, r0
	//
	static void portTaskIncrementTick( void )
	{
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
     afa:	0e 94 08 04 	call	0x810	; 0x810 <_portSetInterruptMaskFromIsr>
     afe:	c8 2f       	mov	r28, r24
		xTaskIncrementTick();
     b00:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
     b04:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
		portTaskIncrementTick();
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <portTaskSwitchContext>
     b0e:	a0 91 86 2c 	lds	r26, 0x2C86	; 0x802c86 <pxCurrentTCB>
     b12:	b0 91 87 2c 	lds	r27, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
     b16:	0d 90       	ld	r0, X+
     b18:	0d be       	out	0x3d, r0	; 61
     b1a:	0d 90       	ld	r0, X+
     b1c:	0e be       	out	0x3e, r0	; 62
     b1e:	ef 91       	pop	r30
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	7f 91       	pop	r23
     b2e:	6f 91       	pop	r22
     b30:	5f 91       	pop	r21
     b32:	4f 91       	pop	r20
     b34:	3f 91       	pop	r19
     b36:	2f 91       	pop	r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	df 90       	pop	r13
     b42:	cf 90       	pop	r12
     b44:	bf 90       	pop	r11
     b46:	af 90       	pop	r10
     b48:	9f 90       	pop	r9
     b4a:	8f 90       	pop	r8
     b4c:	7f 90       	pop	r7
     b4e:	6f 90       	pop	r6
     b50:	5f 90       	pop	r5
     b52:	4f 90       	pop	r4
     b54:	3f 90       	pop	r3
     b56:	2f 90       	pop	r2
     b58:	1f 90       	pop	r1
     b5a:	0f 90       	pop	r0
     b5c:	ff 91       	pop	r31
     b5e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b62:	ff 91       	pop	r31
     b64:	ff bf       	out	0x3f, r31	; 63
     b66:	ff 91       	pop	r31
     b68:	18 95       	reti

00000b6a <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     b6a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b6e:	ff 93       	push	r31
     b70:	f8 7f       	andi	r31, 0xF8	; 248
     b72:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b76:	fc 01       	movw	r30, r24
     b78:	96 8d       	ldd	r25, Z+30	; 0x1e
     b7a:	ff 91       	pop	r31
     b7c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	91 11       	cpse	r25, r1
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	08 95       	ret

00000b88 <prvIsQueueFull>:
     b88:	dc 01       	movw	r26, r24
     b8a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b8e:	ff 93       	push	r31
     b90:	f8 7f       	andi	r31, 0xF8	; 248
     b92:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b96:	5e 96       	adiw	r26, 0x1e	; 30
     b98:	9c 91       	ld	r25, X
     b9a:	5e 97       	sbiw	r26, 0x1e	; 30
     b9c:	ff 91       	pop	r31
     b9e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	5f 96       	adiw	r26, 0x1f	; 31
     ba6:	2c 91       	ld	r18, X
     ba8:	29 13       	cpse	r18, r25
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	08 95       	ret

00000bae <prvCopyDataToQueue>:
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	ec 01       	movw	r28, r24
     bb8:	04 2f       	mov	r16, r20
     bba:	1e 8d       	ldd	r17, Y+30	; 0x1e
     bbc:	48 a1       	ldd	r20, Y+32	; 0x20
     bbe:	44 23       	and	r20, r20
     bc0:	b9 f1       	breq	.+110    	; 0xc30 <prvCopyDataToQueue+0x82>
     bc2:	01 11       	cpse	r16, r1
     bc4:	16 c0       	rjmp	.+44     	; 0xbf2 <prvCopyDataToQueue+0x44>
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	8c 81       	ldd	r24, Y+4	; 0x04
     bca:	9d 81       	ldd	r25, Y+5	; 0x05
     bcc:	0e 94 3a 1a 	call	0x3474	; 0x3474 <memcpy>
     bd0:	28 a1       	ldd	r18, Y+32	; 0x20
     bd2:	8c 81       	ldd	r24, Y+4	; 0x04
     bd4:	9d 81       	ldd	r25, Y+5	; 0x05
     bd6:	82 0f       	add	r24, r18
     bd8:	91 1d       	adc	r25, r1
     bda:	8c 83       	std	Y+4, r24	; 0x04
     bdc:	9d 83       	std	Y+5, r25	; 0x05
     bde:	2a 81       	ldd	r18, Y+2	; 0x02
     be0:	3b 81       	ldd	r19, Y+3	; 0x03
     be2:	82 17       	cp	r24, r18
     be4:	93 07       	cpc	r25, r19
     be6:	20 f1       	brcs	.+72     	; 0xc30 <prvCopyDataToQueue+0x82>
     be8:	88 81       	ld	r24, Y
     bea:	99 81       	ldd	r25, Y+1	; 0x01
     bec:	8c 83       	std	Y+4, r24	; 0x04
     bee:	9d 83       	std	Y+5, r25	; 0x05
     bf0:	1f c0       	rjmp	.+62     	; 0xc30 <prvCopyDataToQueue+0x82>
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	9f 81       	ldd	r25, Y+7	; 0x07
     bf8:	0e 94 3a 1a 	call	0x3474	; 0x3474 <memcpy>
     bfc:	88 a1       	ldd	r24, Y+32	; 0x20
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	91 95       	neg	r25
     c02:	81 95       	neg	r24
     c04:	91 09       	sbc	r25, r1
     c06:	2e 81       	ldd	r18, Y+6	; 0x06
     c08:	3f 81       	ldd	r19, Y+7	; 0x07
     c0a:	28 0f       	add	r18, r24
     c0c:	39 1f       	adc	r19, r25
     c0e:	2e 83       	std	Y+6, r18	; 0x06
     c10:	3f 83       	std	Y+7, r19	; 0x07
     c12:	48 81       	ld	r20, Y
     c14:	59 81       	ldd	r21, Y+1	; 0x01
     c16:	24 17       	cp	r18, r20
     c18:	35 07       	cpc	r19, r21
     c1a:	30 f4       	brcc	.+12     	; 0xc28 <prvCopyDataToQueue+0x7a>
     c1c:	2a 81       	ldd	r18, Y+2	; 0x02
     c1e:	3b 81       	ldd	r19, Y+3	; 0x03
     c20:	82 0f       	add	r24, r18
     c22:	93 1f       	adc	r25, r19
     c24:	8e 83       	std	Y+6, r24	; 0x06
     c26:	9f 83       	std	Y+7, r25	; 0x07
     c28:	02 30       	cpi	r16, 0x02	; 2
     c2a:	11 f4       	brne	.+4      	; 0xc30 <prvCopyDataToQueue+0x82>
     c2c:	11 11       	cpse	r17, r1
     c2e:	11 50       	subi	r17, 0x01	; 1
     c30:	1f 5f       	subi	r17, 0xFF	; 255
     c32:	1e 8f       	std	Y+30, r17	; 0x1e
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	08 95       	ret

00000c40 <prvCopyDataFromQueue>:
     c40:	fc 01       	movw	r30, r24
     c42:	40 a1       	ldd	r20, Z+32	; 0x20
     c44:	44 23       	and	r20, r20
     c46:	a9 f0       	breq	.+42     	; 0xc72 <prvCopyDataFromQueue+0x32>
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	26 81       	ldd	r18, Z+6	; 0x06
     c4c:	37 81       	ldd	r19, Z+7	; 0x07
     c4e:	24 0f       	add	r18, r20
     c50:	35 1f       	adc	r19, r21
     c52:	26 83       	std	Z+6, r18	; 0x06
     c54:	37 83       	std	Z+7, r19	; 0x07
     c56:	82 81       	ldd	r24, Z+2	; 0x02
     c58:	93 81       	ldd	r25, Z+3	; 0x03
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	20 f0       	brcs	.+8      	; 0xc68 <prvCopyDataFromQueue+0x28>
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	86 83       	std	Z+6, r24	; 0x06
     c66:	97 83       	std	Z+7, r25	; 0x07
     c68:	cb 01       	movw	r24, r22
     c6a:	66 81       	ldd	r22, Z+6	; 0x06
     c6c:	77 81       	ldd	r23, Z+7	; 0x07
     c6e:	0e 94 3a 1a 	call	0x3474	; 0x3474 <memcpy>
     c72:	08 95       	ret

00000c74 <prvUnlockQueue>:
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	8c 01       	movw	r16, r24
     c80:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c84:	ff 93       	push	r31
     c86:	f8 7f       	andi	r31, 0xF8	; 248
     c88:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     c8c:	fc 01       	movw	r30, r24
     c8e:	c2 a1       	ldd	r28, Z+34	; 0x22
     c90:	1c 16       	cp	r1, r28
     c92:	ac f4       	brge	.+42     	; 0xcbe <prvUnlockQueue+0x4a>
     c94:	83 89       	ldd	r24, Z+19	; 0x13
     c96:	81 11       	cpse	r24, r1
     c98:	06 c0       	rjmp	.+12     	; 0xca6 <prvUnlockQueue+0x32>
     c9a:	11 c0       	rjmp	.+34     	; 0xcbe <prvUnlockQueue+0x4a>
     c9c:	f8 01       	movw	r30, r16
     c9e:	83 89       	ldd	r24, Z+19	; 0x13
     ca0:	81 11       	cpse	r24, r1
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <prvUnlockQueue+0x3a>
     ca4:	0c c0       	rjmp	.+24     	; 0xcbe <prvUnlockQueue+0x4a>
     ca6:	78 01       	movw	r14, r16
     ca8:	f3 e1       	ldi	r31, 0x13	; 19
     caa:	ef 0e       	add	r14, r31
     cac:	f1 1c       	adc	r15, r1
     cae:	c7 01       	movw	r24, r14
     cb0:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xTaskRemoveFromEventList>
     cb4:	81 11       	cpse	r24, r1
     cb6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <vTaskMissedYield>
     cba:	c1 50       	subi	r28, 0x01	; 1
     cbc:	79 f7       	brne	.-34     	; 0xc9c <prvUnlockQueue+0x28>
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	f8 01       	movw	r30, r16
     cc2:	82 a3       	std	Z+34, r24	; 0x22
     cc4:	ff 91       	pop	r31
     cc6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cca:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cce:	ff 93       	push	r31
     cd0:	f8 7f       	andi	r31, 0xF8	; 248
     cd2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cd6:	f8 01       	movw	r30, r16
     cd8:	c1 a1       	ldd	r28, Z+33	; 0x21
     cda:	1c 16       	cp	r1, r28
     cdc:	ac f4       	brge	.+42     	; 0xd08 <prvUnlockQueue+0x94>
     cde:	80 85       	ldd	r24, Z+8	; 0x08
     ce0:	81 11       	cpse	r24, r1
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <prvUnlockQueue+0x7c>
     ce4:	11 c0       	rjmp	.+34     	; 0xd08 <prvUnlockQueue+0x94>
     ce6:	f8 01       	movw	r30, r16
     ce8:	80 85       	ldd	r24, Z+8	; 0x08
     cea:	81 11       	cpse	r24, r1
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <prvUnlockQueue+0x84>
     cee:	0c c0       	rjmp	.+24     	; 0xd08 <prvUnlockQueue+0x94>
     cf0:	78 01       	movw	r14, r16
     cf2:	f8 e0       	ldi	r31, 0x08	; 8
     cf4:	ef 0e       	add	r14, r31
     cf6:	f1 1c       	adc	r15, r1
     cf8:	c7 01       	movw	r24, r14
     cfa:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xTaskRemoveFromEventList>
     cfe:	81 11       	cpse	r24, r1
     d00:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <vTaskMissedYield>
     d04:	c1 50       	subi	r28, 0x01	; 1
     d06:	79 f7       	brne	.-34     	; 0xce6 <prvUnlockQueue+0x72>
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	f8 01       	movw	r30, r16
     d0c:	81 a3       	std	Z+33, r24	; 0x21
     d0e:	ff 91       	pop	r31
     d10:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	08 95       	ret

00000d20 <xQueueGenericReset>:
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	ec 01       	movw	r28, r24
     d26:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d2a:	ff 93       	push	r31
     d2c:	f8 7f       	andi	r31, 0xF8	; 248
     d2e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d32:	48 81       	ld	r20, Y
     d34:	59 81       	ldd	r21, Y+1	; 0x01
     d36:	28 a1       	ldd	r18, Y+32	; 0x20
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	7f 8d       	ldd	r23, Y+31	; 0x1f
     d3c:	72 9f       	mul	r23, r18
     d3e:	c0 01       	movw	r24, r0
     d40:	73 9f       	mul	r23, r19
     d42:	90 0d       	add	r25, r0
     d44:	11 24       	eor	r1, r1
     d46:	fa 01       	movw	r30, r20
     d48:	e8 0f       	add	r30, r24
     d4a:	f9 1f       	adc	r31, r25
     d4c:	ea 83       	std	Y+2, r30	; 0x02
     d4e:	fb 83       	std	Y+3, r31	; 0x03
     d50:	1e 8e       	std	Y+30, r1	; 0x1e
     d52:	4c 83       	std	Y+4, r20	; 0x04
     d54:	5d 83       	std	Y+5, r21	; 0x05
     d56:	82 1b       	sub	r24, r18
     d58:	93 0b       	sbc	r25, r19
     d5a:	84 0f       	add	r24, r20
     d5c:	95 1f       	adc	r25, r21
     d5e:	8e 83       	std	Y+6, r24	; 0x06
     d60:	9f 83       	std	Y+7, r25	; 0x07
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	89 a3       	std	Y+33, r24	; 0x21
     d66:	8a a3       	std	Y+34, r24	; 0x22
     d68:	61 11       	cpse	r22, r1
     d6a:	0c c0       	rjmp	.+24     	; 0xd84 <xQueueGenericReset+0x64>
     d6c:	88 85       	ldd	r24, Y+8	; 0x08
     d6e:	88 23       	and	r24, r24
     d70:	89 f0       	breq	.+34     	; 0xd94 <xQueueGenericReset+0x74>
     d72:	ce 01       	movw	r24, r28
     d74:	08 96       	adiw	r24, 0x08	; 8
     d76:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xTaskRemoveFromEventList>
     d7a:	88 23       	and	r24, r24
     d7c:	59 f0       	breq	.+22     	; 0xd94 <xQueueGenericReset+0x74>
     d7e:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
     d82:	08 c0       	rjmp	.+16     	; 0xd94 <xQueueGenericReset+0x74>
     d84:	ce 01       	movw	r24, r28
     d86:	08 96       	adiw	r24, 0x08	; 8
     d88:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
     d8c:	ce 01       	movw	r24, r28
     d8e:	43 96       	adiw	r24, 0x13	; 19
     d90:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
     d94:	ff 91       	pop	r31
     d96:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <xQueueGenericCreate>:
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	08 2f       	mov	r16, r24
     dae:	16 2f       	mov	r17, r22
     db0:	f4 2e       	mov	r15, r20
     db2:	66 23       	and	r22, r22
     db4:	c9 f0       	breq	.+50     	; 0xde8 <xQueueGenericCreate+0x46>
     db6:	86 9f       	mul	r24, r22
     db8:	c0 01       	movw	r24, r0
     dba:	11 24       	eor	r1, r1
     dbc:	85 96       	adiw	r24, 0x25	; 37
     dbe:	0e 94 47 03 	call	0x68e	; 0x68e <pvPortMalloc>
     dc2:	ec 01       	movw	r28, r24
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	49 f4       	brne	.+18     	; 0xdda <xQueueGenericCreate+0x38>
     dc8:	16 c0       	rjmp	.+44     	; 0xdf6 <xQueueGenericCreate+0x54>
     dca:	0f 8f       	std	Y+31, r16	; 0x1f
     dcc:	18 a3       	std	Y+32, r17	; 0x20
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	ce 01       	movw	r24, r28
     dd2:	0e 94 90 06 	call	0xd20	; 0xd20 <xQueueGenericReset>
     dd6:	fc a2       	std	Y+36, r15	; 0x24
     dd8:	0e c0       	rjmp	.+28     	; 0xdf6 <xQueueGenericCreate+0x54>
     dda:	85 96       	adiw	r24, 0x25	; 37
     ddc:	88 83       	st	Y, r24
     dde:	99 83       	std	Y+1, r25	; 0x01
     de0:	f4 cf       	rjmp	.-24     	; 0xdca <xQueueGenericCreate+0x28>
     de2:	c8 83       	st	Y, r28
     de4:	d9 83       	std	Y+1, r29	; 0x01
     de6:	f1 cf       	rjmp	.-30     	; 0xdca <xQueueGenericCreate+0x28>
     de8:	85 e2       	ldi	r24, 0x25	; 37
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 47 03 	call	0x68e	; 0x68e <pvPortMalloc>
     df0:	ec 01       	movw	r28, r24
     df2:	89 2b       	or	r24, r25
     df4:	b1 f7       	brne	.-20     	; 0xde2 <xQueueGenericCreate+0x40>
     df6:	ce 01       	movw	r24, r28
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	08 95       	ret

00000e04 <xQueueGenericSend>:
     e04:	af 92       	push	r10
     e06:	bf 92       	push	r11
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	29 97       	sbiw	r28, 0x09	; 9
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	7c 01       	movw	r14, r24
     e24:	5b 01       	movw	r10, r22
     e26:	2e 83       	std	Y+6, r18	; 0x06
     e28:	3f 83       	std	Y+7, r19	; 0x07
     e2a:	48 87       	std	Y+8, r20	; 0x08
     e2c:	59 87       	std	Y+9, r21	; 0x09
     e2e:	10 e0       	ldi	r17, 0x00	; 0
     e30:	6c 01       	movw	r12, r24
     e32:	88 e0       	ldi	r24, 0x08	; 8
     e34:	c8 0e       	add	r12, r24
     e36:	d1 1c       	adc	r13, r1
     e38:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e3c:	ff 93       	push	r31
     e3e:	f8 7f       	andi	r31, 0xF8	; 248
     e40:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e44:	f7 01       	movw	r30, r14
     e46:	96 8d       	ldd	r25, Z+30	; 0x1e
     e48:	87 8d       	ldd	r24, Z+31	; 0x1f
     e4a:	98 17       	cp	r25, r24
     e4c:	10 f0       	brcs	.+4      	; 0xe52 <xQueueGenericSend+0x4e>
     e4e:	02 30       	cpi	r16, 0x02	; 2
     e50:	d1 f4       	brne	.+52     	; 0xe86 <xQueueGenericSend+0x82>
     e52:	40 2f       	mov	r20, r16
     e54:	b5 01       	movw	r22, r10
     e56:	c7 01       	movw	r24, r14
     e58:	0e 94 d7 05 	call	0xbae	; 0xbae <prvCopyDataToQueue>
     e5c:	f7 01       	movw	r30, r14
     e5e:	93 89       	ldd	r25, Z+19	; 0x13
     e60:	99 23       	and	r25, r25
     e62:	49 f0       	breq	.+18     	; 0xe76 <xQueueGenericSend+0x72>
     e64:	c7 01       	movw	r24, r14
     e66:	43 96       	adiw	r24, 0x13	; 19
     e68:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xTaskRemoveFromEventList>
     e6c:	88 23       	and	r24, r24
     e6e:	31 f0       	breq	.+12     	; 0xe7c <xQueueGenericSend+0x78>
     e70:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <xQueueGenericSend+0x78>
     e76:	81 11       	cpse	r24, r1
     e78:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
     e7c:	ff 91       	pop	r31
     e7e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	57 c0       	rjmp	.+174    	; 0xf34 <xQueueGenericSend+0x130>
     e86:	8e 81       	ldd	r24, Y+6	; 0x06
     e88:	9f 81       	ldd	r25, Y+7	; 0x07
     e8a:	a8 85       	ldd	r26, Y+8	; 0x08
     e8c:	b9 85       	ldd	r27, Y+9	; 0x09
     e8e:	89 2b       	or	r24, r25
     e90:	8a 2b       	or	r24, r26
     e92:	8b 2b       	or	r24, r27
     e94:	29 f4       	brne	.+10     	; 0xea0 <xQueueGenericSend+0x9c>
     e96:	ff 91       	pop	r31
     e98:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	4a c0       	rjmp	.+148    	; 0xf34 <xQueueGenericSend+0x130>
     ea0:	11 11       	cpse	r17, r1
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <xQueueGenericSend+0xaa>
     ea4:	ce 01       	movw	r24, r28
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <vTaskInternalSetTimeOutState>
     eac:	11 e0       	ldi	r17, 0x01	; 1
     eae:	ff 91       	pop	r31
     eb0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eb4:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vTaskSuspendAll>
     eb8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ebc:	ff 93       	push	r31
     ebe:	f8 7f       	andi	r31, 0xF8	; 248
     ec0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ec4:	f7 01       	movw	r30, r14
     ec6:	81 a1       	ldd	r24, Z+33	; 0x21
     ec8:	8f 3f       	cpi	r24, 0xFF	; 255
     eca:	09 f4       	brne	.+2      	; 0xece <xQueueGenericSend+0xca>
     ecc:	11 a2       	std	Z+33, r1	; 0x21
     ece:	f7 01       	movw	r30, r14
     ed0:	82 a1       	ldd	r24, Z+34	; 0x22
     ed2:	8f 3f       	cpi	r24, 0xFF	; 255
     ed4:	09 f4       	brne	.+2      	; 0xed8 <xQueueGenericSend+0xd4>
     ed6:	12 a2       	std	Z+34, r1	; 0x22
     ed8:	ff 91       	pop	r31
     eda:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ede:	be 01       	movw	r22, r28
     ee0:	6a 5f       	subi	r22, 0xFA	; 250
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xTaskCheckForTimeOut>
     eec:	81 11       	cpse	r24, r1
     eee:	1c c0       	rjmp	.+56     	; 0xf28 <xQueueGenericSend+0x124>
     ef0:	c7 01       	movw	r24, r14
     ef2:	0e 94 c4 05 	call	0xb88	; 0xb88 <prvIsQueueFull>
     ef6:	88 23       	and	r24, r24
     ef8:	89 f0       	breq	.+34     	; 0xf1c <xQueueGenericSend+0x118>
     efa:	4e 81       	ldd	r20, Y+6	; 0x06
     efc:	5f 81       	ldd	r21, Y+7	; 0x07
     efe:	68 85       	ldd	r22, Y+8	; 0x08
     f00:	79 85       	ldd	r23, Y+9	; 0x09
     f02:	c6 01       	movw	r24, r12
     f04:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <vTaskPlaceOnEventList>
     f08:	c7 01       	movw	r24, r14
     f0a:	0e 94 3a 06 	call	0xc74	; 0xc74 <prvUnlockQueue>
     f0e:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
     f12:	81 11       	cpse	r24, r1
     f14:	91 cf       	rjmp	.-222    	; 0xe38 <xQueueGenericSend+0x34>
     f16:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
     f1a:	8e cf       	rjmp	.-228    	; 0xe38 <xQueueGenericSend+0x34>
     f1c:	c7 01       	movw	r24, r14
     f1e:	0e 94 3a 06 	call	0xc74	; 0xc74 <prvUnlockQueue>
     f22:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
     f26:	88 cf       	rjmp	.-240    	; 0xe38 <xQueueGenericSend+0x34>
     f28:	c7 01       	movw	r24, r14
     f2a:	0e 94 3a 06 	call	0xc74	; 0xc74 <prvUnlockQueue>
     f2e:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	29 96       	adiw	r28, 0x09	; 9
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	08 95       	ret

00000f50 <xQueueGenericSendFromISR>:
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ec 01       	movw	r28, r24
     f64:	6b 01       	movw	r12, r22
     f66:	5a 01       	movw	r10, r20
     f68:	02 2f       	mov	r16, r18
     f6a:	0e 94 08 04 	call	0x810	; 0x810 <_portSetInterruptMaskFromIsr>
     f6e:	f8 2e       	mov	r15, r24
     f70:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f72:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f74:	98 17       	cp	r25, r24
     f76:	10 f0       	brcs	.+4      	; 0xf7c <xQueueGenericSendFromISR+0x2c>
     f78:	02 30       	cpi	r16, 0x02	; 2
     f7a:	e1 f4       	brne	.+56     	; 0xfb4 <xQueueGenericSendFromISR+0x64>
     f7c:	1a a1       	ldd	r17, Y+34	; 0x22
     f7e:	40 2f       	mov	r20, r16
     f80:	b6 01       	movw	r22, r12
     f82:	ce 01       	movw	r24, r28
     f84:	0e 94 d7 05 	call	0xbae	; 0xbae <prvCopyDataToQueue>
     f88:	1f 3f       	cpi	r17, 0xFF	; 255
     f8a:	81 f4       	brne	.+32     	; 0xfac <xQueueGenericSendFromISR+0x5c>
     f8c:	8b 89       	ldd	r24, Y+19	; 0x13
     f8e:	88 23       	and	r24, r24
     f90:	99 f0       	breq	.+38     	; 0xfb8 <xQueueGenericSendFromISR+0x68>
     f92:	ce 01       	movw	r24, r28
     f94:	43 96       	adiw	r24, 0x13	; 19
     f96:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xTaskRemoveFromEventList>
     f9a:	88 23       	and	r24, r24
     f9c:	79 f0       	breq	.+30     	; 0xfbc <xQueueGenericSendFromISR+0x6c>
     f9e:	a1 14       	cp	r10, r1
     fa0:	b1 04       	cpc	r11, r1
     fa2:	71 f0       	breq	.+28     	; 0xfc0 <xQueueGenericSendFromISR+0x70>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	f5 01       	movw	r30, r10
     fa8:	80 83       	st	Z, r24
     faa:	0b c0       	rjmp	.+22     	; 0xfc2 <xQueueGenericSendFromISR+0x72>
     fac:	1f 5f       	subi	r17, 0xFF	; 255
     fae:	1a a3       	std	Y+34, r17	; 0x22
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	07 c0       	rjmp	.+14     	; 0xfc2 <xQueueGenericSendFromISR+0x72>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	05 c0       	rjmp	.+10     	; 0xfc2 <xQueueGenericSendFromISR+0x72>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <xQueueGenericSendFromISR+0x72>
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <xQueueGenericSendFromISR+0x72>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	df 90       	pop	r13
     fd2:	cf 90       	pop	r12
     fd4:	bf 90       	pop	r11
     fd6:	af 90       	pop	r10
     fd8:	08 95       	ret

00000fda <xQueueReceive>:
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	29 97       	sbiw	r28, 0x09	; 9
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	8c 01       	movw	r16, r24
     ffa:	5b 01       	movw	r10, r22
     ffc:	2e 83       	std	Y+6, r18	; 0x06
     ffe:	3f 83       	std	Y+7, r19	; 0x07
    1000:	48 87       	std	Y+8, r20	; 0x08
    1002:	59 87       	std	Y+9, r21	; 0x09
    1004:	e1 2c       	mov	r14, r1
    1006:	6c 01       	movw	r12, r24
    1008:	83 e1       	ldi	r24, 0x13	; 19
    100a:	c8 0e       	add	r12, r24
    100c:	d1 1c       	adc	r13, r1
    100e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1012:	ff 93       	push	r31
    1014:	f8 7f       	andi	r31, 0xF8	; 248
    1016:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    101a:	f8 01       	movw	r30, r16
    101c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    101e:	ff 20       	and	r15, r15
    1020:	b1 f0       	breq	.+44     	; 0x104e <xQueueReceive+0x74>
    1022:	b5 01       	movw	r22, r10
    1024:	c8 01       	movw	r24, r16
    1026:	0e 94 20 06 	call	0xc40	; 0xc40 <prvCopyDataFromQueue>
    102a:	fa 94       	dec	r15
    102c:	f8 01       	movw	r30, r16
    102e:	f6 8e       	std	Z+30, r15	; 0x1e
    1030:	80 85       	ldd	r24, Z+8	; 0x08
    1032:	88 23       	and	r24, r24
    1034:	39 f0       	breq	.+14     	; 0x1044 <xQueueReceive+0x6a>
    1036:	c8 01       	movw	r24, r16
    1038:	08 96       	adiw	r24, 0x08	; 8
    103a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xTaskRemoveFromEventList>
    103e:	81 11       	cpse	r24, r1
    1040:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
    1044:	ff 91       	pop	r31
    1046:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	5e c0       	rjmp	.+188    	; 0x110a <xQueueReceive+0x130>
    104e:	8e 81       	ldd	r24, Y+6	; 0x06
    1050:	9f 81       	ldd	r25, Y+7	; 0x07
    1052:	a8 85       	ldd	r26, Y+8	; 0x08
    1054:	b9 85       	ldd	r27, Y+9	; 0x09
    1056:	89 2b       	or	r24, r25
    1058:	8a 2b       	or	r24, r26
    105a:	8b 2b       	or	r24, r27
    105c:	29 f4       	brne	.+10     	; 0x1068 <xQueueReceive+0x8e>
    105e:	ff 91       	pop	r31
    1060:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	51 c0       	rjmp	.+162    	; 0x110a <xQueueReceive+0x130>
    1068:	e1 10       	cpse	r14, r1
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <xQueueReceive+0x9e>
    106c:	ce 01       	movw	r24, r28
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <vTaskInternalSetTimeOutState>
    1074:	ee 24       	eor	r14, r14
    1076:	e3 94       	inc	r14
    1078:	ff 91       	pop	r31
    107a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    107e:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vTaskSuspendAll>
    1082:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1086:	ff 93       	push	r31
    1088:	f8 7f       	andi	r31, 0xF8	; 248
    108a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    108e:	f8 01       	movw	r30, r16
    1090:	81 a1       	ldd	r24, Z+33	; 0x21
    1092:	8f 3f       	cpi	r24, 0xFF	; 255
    1094:	09 f4       	brne	.+2      	; 0x1098 <xQueueReceive+0xbe>
    1096:	11 a2       	std	Z+33, r1	; 0x21
    1098:	f8 01       	movw	r30, r16
    109a:	82 a1       	ldd	r24, Z+34	; 0x22
    109c:	8f 3f       	cpi	r24, 0xFF	; 255
    109e:	09 f4       	brne	.+2      	; 0x10a2 <xQueueReceive+0xc8>
    10a0:	12 a2       	std	Z+34, r1	; 0x22
    10a2:	ff 91       	pop	r31
    10a4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10a8:	be 01       	movw	r22, r28
    10aa:	6a 5f       	subi	r22, 0xFA	; 250
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	ce 01       	movw	r24, r28
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xTaskCheckForTimeOut>
    10b6:	81 11       	cpse	r24, r1
    10b8:	1c c0       	rjmp	.+56     	; 0x10f2 <xQueueReceive+0x118>
    10ba:	c8 01       	movw	r24, r16
    10bc:	0e 94 b5 05 	call	0xb6a	; 0xb6a <prvIsQueueEmpty>
    10c0:	88 23       	and	r24, r24
    10c2:	89 f0       	breq	.+34     	; 0x10e6 <xQueueReceive+0x10c>
    10c4:	4e 81       	ldd	r20, Y+6	; 0x06
    10c6:	5f 81       	ldd	r21, Y+7	; 0x07
    10c8:	68 85       	ldd	r22, Y+8	; 0x08
    10ca:	79 85       	ldd	r23, Y+9	; 0x09
    10cc:	c6 01       	movw	r24, r12
    10ce:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <vTaskPlaceOnEventList>
    10d2:	c8 01       	movw	r24, r16
    10d4:	0e 94 3a 06 	call	0xc74	; 0xc74 <prvUnlockQueue>
    10d8:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
    10dc:	81 11       	cpse	r24, r1
    10de:	97 cf       	rjmp	.-210    	; 0x100e <xQueueReceive+0x34>
    10e0:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
    10e4:	94 cf       	rjmp	.-216    	; 0x100e <xQueueReceive+0x34>
    10e6:	c8 01       	movw	r24, r16
    10e8:	0e 94 3a 06 	call	0xc74	; 0xc74 <prvUnlockQueue>
    10ec:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
    10f0:	8e cf       	rjmp	.-228    	; 0x100e <xQueueReceive+0x34>
    10f2:	c8 01       	movw	r24, r16
    10f4:	0e 94 3a 06 	call	0xc74	; 0xc74 <prvUnlockQueue>
    10f8:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
    10fc:	c8 01       	movw	r24, r16
    10fe:	0e 94 b5 05 	call	0xb6a	; 0xb6a <prvIsQueueEmpty>
    1102:	88 23       	and	r24, r24
    1104:	09 f4       	brne	.+2      	; 0x1108 <xQueueReceive+0x12e>
    1106:	83 cf       	rjmp	.-250    	; 0x100e <xQueueReceive+0x34>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	29 96       	adiw	r28, 0x09	; 9
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ff 90       	pop	r15
    111a:	ef 90       	pop	r14
    111c:	df 90       	pop	r13
    111e:	cf 90       	pop	r12
    1120:	bf 90       	pop	r11
    1122:	af 90       	pop	r10
    1124:	08 95       	ret

00001126 <uxQueueMessagesWaiting>:
    1126:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    112a:	ff 93       	push	r31
    112c:	f8 7f       	andi	r31, 0xF8	; 248
    112e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1132:	fc 01       	movw	r30, r24
    1134:	86 8d       	ldd	r24, Z+30	; 0x1e
    1136:	ff 91       	pop	r31
    1138:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    113c:	08 95       	ret

0000113e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1144:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1148:	ff 93       	push	r31
    114a:	f8 7f       	andi	r31, 0xF8	; 248
    114c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1150:	89 a1       	ldd	r24, Y+33	; 0x21
    1152:	8f 3f       	cpi	r24, 0xFF	; 255
    1154:	09 f4       	brne	.+2      	; 0x1158 <vQueueWaitForMessageRestricted+0x1a>
    1156:	19 a2       	std	Y+33, r1	; 0x21
    1158:	8a a1       	ldd	r24, Y+34	; 0x22
    115a:	8f 3f       	cpi	r24, 0xFF	; 255
    115c:	09 f4       	brne	.+2      	; 0x1160 <vQueueWaitForMessageRestricted+0x22>
    115e:	1a a2       	std	Y+34, r1	; 0x22
    1160:	ff 91       	pop	r31
    1162:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1166:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1168:	81 11       	cpse	r24, r1
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    116c:	ce 01       	movw	r24, r28
    116e:	43 96       	adiw	r24, 0x13	; 19
    1170:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1174:	ce 01       	movw	r24, r28
    1176:	0e 94 3a 06 	call	0xc74	; 0xc74 <prvUnlockQueue>
	}
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    1180:	e0 91 42 2c 	lds	r30, 0x2C42	; 0x802c42 <pxDelayedTaskList>
    1184:	f0 91 43 2c 	lds	r31, 0x2C43	; 0x802c43 <pxDelayedTaskList+0x1>
    1188:	80 81       	ld	r24, Z
    118a:	81 11       	cpse	r24, r1
    118c:	0c c0       	rjmp	.+24     	; 0x11a6 <prvResetNextTaskUnblockTime+0x26>
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f ef       	ldi	r25, 0xFF	; 255
    1192:	dc 01       	movw	r26, r24
    1194:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <xNextTaskUnblockTime>
    1198:	90 93 1c 2c 	sts	0x2C1C, r25	; 0x802c1c <xNextTaskUnblockTime+0x1>
    119c:	a0 93 1d 2c 	sts	0x2C1D, r26	; 0x802c1d <xNextTaskUnblockTime+0x2>
    11a0:	b0 93 1e 2c 	sts	0x2C1E, r27	; 0x802c1e <xNextTaskUnblockTime+0x3>
    11a4:	08 95       	ret
    11a6:	e0 91 42 2c 	lds	r30, 0x2C42	; 0x802c42 <pxDelayedTaskList>
    11aa:	f0 91 43 2c 	lds	r31, 0x2C43	; 0x802c43 <pxDelayedTaskList+0x1>
    11ae:	07 80       	ldd	r0, Z+7	; 0x07
    11b0:	f0 85       	ldd	r31, Z+8	; 0x08
    11b2:	e0 2d       	mov	r30, r0
    11b4:	00 84       	ldd	r0, Z+8	; 0x08
    11b6:	f1 85       	ldd	r31, Z+9	; 0x09
    11b8:	e0 2d       	mov	r30, r0
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	93 81       	ldd	r25, Z+3	; 0x03
    11be:	a4 81       	ldd	r26, Z+4	; 0x04
    11c0:	b5 81       	ldd	r27, Z+5	; 0x05
    11c2:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <xNextTaskUnblockTime>
    11c6:	90 93 1c 2c 	sts	0x2C1C, r25	; 0x802c1c <xNextTaskUnblockTime+0x1>
    11ca:	a0 93 1d 2c 	sts	0x2C1D, r26	; 0x802c1d <xNextTaskUnblockTime+0x2>
    11ce:	b0 93 1e 2c 	sts	0x2C1E, r27	; 0x802c1e <xNextTaskUnblockTime+0x3>
    11d2:	08 95       	ret

000011d4 <prvAddCurrentTaskToDelayedList>:
    11d4:	8f 92       	push	r8
    11d6:	9f 92       	push	r9
    11d8:	af 92       	push	r10
    11da:	bf 92       	push	r11
    11dc:	cf 92       	push	r12
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	cf 93       	push	r28
    11e6:	6b 01       	movw	r12, r22
    11e8:	7c 01       	movw	r14, r24
    11ea:	c4 2f       	mov	r28, r20
    11ec:	80 90 25 2c 	lds	r8, 0x2C25	; 0x802c25 <xTickCount>
    11f0:	90 90 26 2c 	lds	r9, 0x2C26	; 0x802c26 <xTickCount+0x1>
    11f4:	a0 90 27 2c 	lds	r10, 0x2C27	; 0x802c27 <xTickCount+0x2>
    11f8:	b0 90 28 2c 	lds	r11, 0x2C28	; 0x802c28 <xTickCount+0x3>
    11fc:	80 91 86 2c 	lds	r24, 0x2C86	; 0x802c86 <pxCurrentTCB>
    1200:	90 91 87 2c 	lds	r25, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1204:	02 96       	adiw	r24, 0x02	; 2
    1206:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	c8 16       	cp	r12, r24
    120e:	d8 06       	cpc	r13, r24
    1210:	e8 06       	cpc	r14, r24
    1212:	f8 06       	cpc	r15, r24
    1214:	69 f4       	brne	.+26     	; 0x1230 <prvAddCurrentTaskToDelayedList+0x5c>
    1216:	cc 23       	and	r28, r28
    1218:	59 f0       	breq	.+22     	; 0x1230 <prvAddCurrentTaskToDelayedList+0x5c>
    121a:	60 91 86 2c 	lds	r22, 0x2C86	; 0x802c86 <pxCurrentTCB>
    121e:	70 91 87 2c 	lds	r23, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1222:	6e 5f       	subi	r22, 0xFE	; 254
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	8a e2       	ldi	r24, 0x2A	; 42
    1228:	9c e2       	ldi	r25, 0x2C	; 44
    122a:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    122e:	3f c0       	rjmp	.+126    	; 0x12ae <prvAddCurrentTaskToDelayedList+0xda>
    1230:	c8 0c       	add	r12, r8
    1232:	d9 1c       	adc	r13, r9
    1234:	ea 1c       	adc	r14, r10
    1236:	fb 1c       	adc	r15, r11
    1238:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    123c:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1240:	c2 82       	std	Z+2, r12	; 0x02
    1242:	d3 82       	std	Z+3, r13	; 0x03
    1244:	e4 82       	std	Z+4, r14	; 0x04
    1246:	f5 82       	std	Z+5, r15	; 0x05
    1248:	c8 14       	cp	r12, r8
    124a:	d9 04       	cpc	r13, r9
    124c:	ea 04       	cpc	r14, r10
    124e:	fb 04       	cpc	r15, r11
    1250:	68 f4       	brcc	.+26     	; 0x126c <prvAddCurrentTaskToDelayedList+0x98>
    1252:	60 91 86 2c 	lds	r22, 0x2C86	; 0x802c86 <pxCurrentTCB>
    1256:	70 91 87 2c 	lds	r23, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    125a:	80 91 40 2c 	lds	r24, 0x2C40	; 0x802c40 <pxOverflowDelayedTaskList>
    125e:	90 91 41 2c 	lds	r25, 0x2C41	; 0x802c41 <pxOverflowDelayedTaskList+0x1>
    1262:	6e 5f       	subi	r22, 0xFE	; 254
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	0e 94 a4 03 	call	0x748	; 0x748 <vListInsert>
    126a:	21 c0       	rjmp	.+66     	; 0x12ae <prvAddCurrentTaskToDelayedList+0xda>
    126c:	60 91 86 2c 	lds	r22, 0x2C86	; 0x802c86 <pxCurrentTCB>
    1270:	70 91 87 2c 	lds	r23, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1274:	80 91 42 2c 	lds	r24, 0x2C42	; 0x802c42 <pxDelayedTaskList>
    1278:	90 91 43 2c 	lds	r25, 0x2C43	; 0x802c43 <pxDelayedTaskList+0x1>
    127c:	6e 5f       	subi	r22, 0xFE	; 254
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	0e 94 a4 03 	call	0x748	; 0x748 <vListInsert>
    1284:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <xNextTaskUnblockTime>
    1288:	90 91 1c 2c 	lds	r25, 0x2C1C	; 0x802c1c <xNextTaskUnblockTime+0x1>
    128c:	a0 91 1d 2c 	lds	r26, 0x2C1D	; 0x802c1d <xNextTaskUnblockTime+0x2>
    1290:	b0 91 1e 2c 	lds	r27, 0x2C1E	; 0x802c1e <xNextTaskUnblockTime+0x3>
    1294:	c8 16       	cp	r12, r24
    1296:	d9 06       	cpc	r13, r25
    1298:	ea 06       	cpc	r14, r26
    129a:	fb 06       	cpc	r15, r27
    129c:	40 f4       	brcc	.+16     	; 0x12ae <prvAddCurrentTaskToDelayedList+0xda>
    129e:	c0 92 1b 2c 	sts	0x2C1B, r12	; 0x802c1b <xNextTaskUnblockTime>
    12a2:	d0 92 1c 2c 	sts	0x2C1C, r13	; 0x802c1c <xNextTaskUnblockTime+0x1>
    12a6:	e0 92 1d 2c 	sts	0x2C1D, r14	; 0x802c1d <xNextTaskUnblockTime+0x2>
    12aa:	f0 92 1e 2c 	sts	0x2C1E, r15	; 0x802c1e <xNextTaskUnblockTime+0x3>
    12ae:	cf 91       	pop	r28
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	df 90       	pop	r13
    12b6:	cf 90       	pop	r12
    12b8:	bf 90       	pop	r11
    12ba:	af 90       	pop	r10
    12bc:	9f 90       	pop	r9
    12be:	8f 90       	pop	r8
    12c0:	08 95       	ret

000012c2 <prvIdleTask>:
    12c2:	ca e5       	ldi	r28, 0x5A	; 90
    12c4:	dc e2       	ldi	r29, 0x2C	; 44
    12c6:	88 81       	ld	r24, Y
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	10 f0       	brcs	.+4      	; 0x12d0 <prvIdleTask+0xe>
    12cc:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
    12d0:	0e 94 76 11 	call	0x22ec	; 0x22ec <vApplicationIdleHook>
    12d4:	f8 cf       	rjmp	.-16     	; 0x12c6 <prvIdleTask+0x4>

000012d6 <xTaskCreate>:
    12d6:	4f 92       	push	r4
    12d8:	5f 92       	push	r5
    12da:	6f 92       	push	r6
    12dc:	7f 92       	push	r7
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	4c 01       	movw	r8, r24
    12f6:	6b 01       	movw	r12, r22
    12f8:	5a 01       	movw	r10, r20
    12fa:	29 01       	movw	r4, r18
    12fc:	ca 01       	movw	r24, r20
    12fe:	0e 94 47 03 	call	0x68e	; 0x68e <pvPortMalloc>
    1302:	3c 01       	movw	r6, r24
    1304:	89 2b       	or	r24, r25
    1306:	09 f4       	brne	.+2      	; 0x130a <xTaskCreate+0x34>
    1308:	ea c0       	rjmp	.+468    	; 0x14de <xTaskCreate+0x208>
    130a:	8c e2       	ldi	r24, 0x2C	; 44
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 47 03 	call	0x68e	; 0x68e <pvPortMalloc>
    1312:	ec 01       	movw	r28, r24
    1314:	89 2b       	or	r24, r25
    1316:	b1 f0       	breq	.+44     	; 0x1344 <xTaskCreate+0x6e>
    1318:	6b 8e       	std	Y+27, r6	; 0x1b
    131a:	7c 8e       	std	Y+28, r7	; 0x1c
    131c:	a5 01       	movw	r20, r10
    131e:	65 ea       	ldi	r22, 0xA5	; 165
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	c3 01       	movw	r24, r6
    1324:	0e 94 43 1a 	call	0x3486	; 0x3486 <memset>
    1328:	21 e0       	ldi	r18, 0x01	; 1
    132a:	a2 1a       	sub	r10, r18
    132c:	b1 08       	sbc	r11, r1
    132e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1330:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1332:	a8 0e       	add	r10, r24
    1334:	b9 1e       	adc	r11, r25
    1336:	d6 01       	movw	r26, r12
    1338:	8c 91       	ld	r24, X
    133a:	8d 8f       	std	Y+29, r24	; 0x1d
    133c:	8c 91       	ld	r24, X
    133e:	81 11       	cpse	r24, r1
    1340:	05 c0       	rjmp	.+10     	; 0x134c <xTaskCreate+0x76>
    1342:	18 c0       	rjmp	.+48     	; 0x1374 <xTaskCreate+0x9e>
    1344:	c3 01       	movw	r24, r6
    1346:	0e 94 6d 03 	call	0x6da	; 0x6da <vPortFree>
    134a:	c9 c0       	rjmp	.+402    	; 0x14de <xTaskCreate+0x208>
    134c:	ae 01       	movw	r20, r28
    134e:	42 5e       	subi	r20, 0xE2	; 226
    1350:	5f 4f       	sbci	r21, 0xFF	; 255
    1352:	f6 01       	movw	r30, r12
    1354:	31 96       	adiw	r30, 0x01	; 1
    1356:	b8 e0       	ldi	r27, 0x08	; 8
    1358:	cb 0e       	add	r12, r27
    135a:	d1 1c       	adc	r13, r1
    135c:	cf 01       	movw	r24, r30
    135e:	21 91       	ld	r18, Z+
    1360:	da 01       	movw	r26, r20
    1362:	2d 93       	st	X+, r18
    1364:	ad 01       	movw	r20, r26
    1366:	dc 01       	movw	r26, r24
    1368:	8c 91       	ld	r24, X
    136a:	88 23       	and	r24, r24
    136c:	19 f0       	breq	.+6      	; 0x1374 <xTaskCreate+0x9e>
    136e:	ec 15       	cp	r30, r12
    1370:	fd 05       	cpc	r31, r13
    1372:	a1 f7       	brne	.-24     	; 0x135c <xTaskCreate+0x86>
    1374:	1c a2       	std	Y+36, r1	; 0x24
    1376:	04 30       	cpi	r16, 0x04	; 4
    1378:	08 f0       	brcs	.+2      	; 0x137c <xTaskCreate+0xa6>
    137a:	03 e0       	ldi	r16, 0x03	; 3
    137c:	0a 8f       	std	Y+26, r16	; 0x1a
    137e:	6e 01       	movw	r12, r28
    1380:	b2 e0       	ldi	r27, 0x02	; 2
    1382:	cb 0e       	add	r12, r27
    1384:	d1 1c       	adc	r13, r1
    1386:	c6 01       	movw	r24, r12
    1388:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialiseItem>
    138c:	ce 01       	movw	r24, r28
    138e:	0e 96       	adiw	r24, 0x0e	; 14
    1390:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialiseItem>
    1394:	ca 87       	std	Y+10, r28	; 0x0a
    1396:	db 87       	std	Y+11, r29	; 0x0b
    1398:	84 e0       	ldi	r24, 0x04	; 4
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a0 e0       	ldi	r26, 0x00	; 0
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	80 1b       	sub	r24, r16
    13a2:	91 09       	sbc	r25, r1
    13a4:	a1 09       	sbc	r26, r1
    13a6:	b1 09       	sbc	r27, r1
    13a8:	8e 87       	std	Y+14, r24	; 0x0e
    13aa:	9f 87       	std	Y+15, r25	; 0x0f
    13ac:	a8 8b       	std	Y+16, r26	; 0x10
    13ae:	b9 8b       	std	Y+17, r27	; 0x11
    13b0:	ce 8b       	std	Y+22, r28	; 0x16
    13b2:	df 8b       	std	Y+23, r29	; 0x17
    13b4:	1f a2       	std	Y+39, r1	; 0x27
    13b6:	18 a6       	std	Y+40, r1	; 0x28
    13b8:	19 a6       	std	Y+41, r1	; 0x29
    13ba:	1a a6       	std	Y+42, r1	; 0x2a
    13bc:	1b a6       	std	Y+43, r1	; 0x2b
    13be:	a2 01       	movw	r20, r4
    13c0:	b4 01       	movw	r22, r8
    13c2:	c5 01       	movw	r24, r10
    13c4:	0e 94 0f 04 	call	0x81e	; 0x81e <pxPortInitialiseStack>
    13c8:	88 83       	st	Y, r24
    13ca:	99 83       	std	Y+1, r25	; 0x01
    13cc:	e1 14       	cp	r14, r1
    13ce:	f1 04       	cpc	r15, r1
    13d0:	19 f0       	breq	.+6      	; 0x13d8 <xTaskCreate+0x102>
    13d2:	f7 01       	movw	r30, r14
    13d4:	c0 83       	st	Z, r28
    13d6:	d1 83       	std	Z+1, r29	; 0x01
    13d8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13dc:	ff 93       	push	r31
    13de:	f8 7f       	andi	r31, 0xF8	; 248
    13e0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    13e4:	80 91 29 2c 	lds	r24, 0x2C29	; 0x802c29 <uxCurrentNumberOfTasks>
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	80 93 29 2c 	sts	0x2C29, r24	; 0x802c29 <uxCurrentNumberOfTasks>
    13ee:	80 91 86 2c 	lds	r24, 0x2C86	; 0x802c86 <pxCurrentTCB>
    13f2:	90 91 87 2c 	lds	r25, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    13f6:	89 2b       	or	r24, r25
    13f8:	a9 f5       	brne	.+106    	; 0x1464 <xTaskCreate+0x18e>
    13fa:	c0 93 86 2c 	sts	0x2C86, r28	; 0x802c86 <pxCurrentTCB>
    13fe:	d0 93 87 2c 	sts	0x2C87, r29	; 0x802c87 <pxCurrentTCB+0x1>
    1402:	80 91 29 2c 	lds	r24, 0x2C29	; 0x802c29 <uxCurrentNumberOfTasks>
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	e9 f5       	brne	.+122    	; 0x1484 <xTaskCreate+0x1ae>
    140a:	8a e5       	ldi	r24, 0x5A	; 90
    140c:	9c e2       	ldi	r25, 0x2C	; 44
    140e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    1412:	85 e6       	ldi	r24, 0x65	; 101
    1414:	9c e2       	ldi	r25, 0x2C	; 44
    1416:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    141a:	80 e7       	ldi	r24, 0x70	; 112
    141c:	9c e2       	ldi	r25, 0x2C	; 44
    141e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    1422:	8b e7       	ldi	r24, 0x7B	; 123
    1424:	9c e2       	ldi	r25, 0x2C	; 44
    1426:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    142a:	8f e4       	ldi	r24, 0x4F	; 79
    142c:	9c e2       	ldi	r25, 0x2C	; 44
    142e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    1432:	84 e4       	ldi	r24, 0x44	; 68
    1434:	9c e2       	ldi	r25, 0x2C	; 44
    1436:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    143a:	85 e3       	ldi	r24, 0x35	; 53
    143c:	9c e2       	ldi	r25, 0x2C	; 44
    143e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    1442:	8a e2       	ldi	r24, 0x2A	; 42
    1444:	9c e2       	ldi	r25, 0x2C	; 44
    1446:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    144a:	8f e4       	ldi	r24, 0x4F	; 79
    144c:	9c e2       	ldi	r25, 0x2C	; 44
    144e:	80 93 42 2c 	sts	0x2C42, r24	; 0x802c42 <pxDelayedTaskList>
    1452:	90 93 43 2c 	sts	0x2C43, r25	; 0x802c43 <pxDelayedTaskList+0x1>
    1456:	84 e4       	ldi	r24, 0x44	; 68
    1458:	9c e2       	ldi	r25, 0x2C	; 44
    145a:	80 93 40 2c 	sts	0x2C40, r24	; 0x802c40 <pxOverflowDelayedTaskList>
    145e:	90 93 41 2c 	sts	0x2C41, r25	; 0x802c41 <pxOverflowDelayedTaskList+0x1>
    1462:	10 c0       	rjmp	.+32     	; 0x1484 <xTaskCreate+0x1ae>
    1464:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <xSchedulerRunning>
    1468:	81 11       	cpse	r24, r1
    146a:	0c c0       	rjmp	.+24     	; 0x1484 <xTaskCreate+0x1ae>
    146c:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    1470:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1474:	92 8d       	ldd	r25, Z+26	; 0x1a
    1476:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1478:	89 17       	cp	r24, r25
    147a:	20 f0       	brcs	.+8      	; 0x1484 <xTaskCreate+0x1ae>
    147c:	c0 93 86 2c 	sts	0x2C86, r28	; 0x802c86 <pxCurrentTCB>
    1480:	d0 93 87 2c 	sts	0x2C87, r29	; 0x802c87 <pxCurrentTCB+0x1>
    1484:	80 91 1f 2c 	lds	r24, 0x2C1F	; 0x802c1f <uxTaskNumber>
    1488:	8f 5f       	subi	r24, 0xFF	; 255
    148a:	80 93 1f 2c 	sts	0x2C1F, r24	; 0x802c1f <uxTaskNumber>
    148e:	8d a3       	std	Y+37, r24	; 0x25
    1490:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1492:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <uxTopReadyPriority>
    1496:	98 17       	cp	r25, r24
    1498:	10 f4       	brcc	.+4      	; 0x149e <xTaskCreate+0x1c8>
    149a:	80 93 24 2c 	sts	0x2C24, r24	; 0x802c24 <uxTopReadyPriority>
    149e:	fb e0       	ldi	r31, 0x0B	; 11
    14a0:	8f 9f       	mul	r24, r31
    14a2:	c0 01       	movw	r24, r0
    14a4:	11 24       	eor	r1, r1
    14a6:	b6 01       	movw	r22, r12
    14a8:	86 5a       	subi	r24, 0xA6	; 166
    14aa:	93 4d       	sbci	r25, 0xD3	; 211
    14ac:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    14b0:	ff 91       	pop	r31
    14b2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14b6:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <xSchedulerRunning>
    14ba:	88 23       	and	r24, r24
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <xTaskCreate+0x200>
    14be:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    14c2:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    14c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    14c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14ca:	98 17       	cp	r25, r24
    14cc:	30 f4       	brcc	.+12     	; 0x14da <xTaskCreate+0x204>
    14ce:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	05 c0       	rjmp	.+10     	; 0x14e0 <xTaskCreate+0x20a>
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <xTaskCreate+0x20a>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <xTaskCreate+0x20a>
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	bf 90       	pop	r11
    14f0:	af 90       	pop	r10
    14f2:	9f 90       	pop	r9
    14f4:	8f 90       	pop	r8
    14f6:	7f 90       	pop	r7
    14f8:	6f 90       	pop	r6
    14fa:	5f 90       	pop	r5
    14fc:	4f 90       	pop	r4
    14fe:	08 95       	ret

00001500 <vTaskStartScheduler>:
    1500:	ef 92       	push	r14
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	0f 2e       	mov	r0, r31
    1508:	f9 e1       	ldi	r31, 0x19	; 25
    150a:	ef 2e       	mov	r14, r31
    150c:	fc e2       	ldi	r31, 0x2C	; 44
    150e:	ff 2e       	mov	r15, r31
    1510:	f0 2d       	mov	r31, r0
    1512:	00 e0       	ldi	r16, 0x00	; 0
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	48 ec       	ldi	r20, 0xC8	; 200
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	70 e2       	ldi	r23, 0x20	; 32
    1520:	81 e6       	ldi	r24, 0x61	; 97
    1522:	99 e0       	ldi	r25, 0x09	; 9
    1524:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <xTaskCreate>
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	09 f5       	brne	.+66     	; 0x156e <vTaskStartScheduler+0x6e>
    152c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <xTimerCreateTimerTask>
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	e9 f4       	brne	.+58     	; 0x156e <vTaskStartScheduler+0x6e>
    1534:	e0 ea       	ldi	r30, 0xA0	; 160
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	88 7f       	andi	r24, 0xF8	; 248
    153c:	82 83       	std	Z+2, r24	; 0x02
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	9f ef       	ldi	r25, 0xFF	; 255
    1542:	dc 01       	movw	r26, r24
    1544:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <xNextTaskUnblockTime>
    1548:	90 93 1c 2c 	sts	0x2C1C, r25	; 0x802c1c <xNextTaskUnblockTime+0x1>
    154c:	a0 93 1d 2c 	sts	0x2C1D, r26	; 0x802c1d <xNextTaskUnblockTime+0x2>
    1550:	b0 93 1e 2c 	sts	0x2C1E, r27	; 0x802c1e <xNextTaskUnblockTime+0x3>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <xSchedulerRunning>
    155a:	10 92 25 2c 	sts	0x2C25, r1	; 0x802c25 <xTickCount>
    155e:	10 92 26 2c 	sts	0x2C26, r1	; 0x802c26 <xTickCount+0x1>
    1562:	10 92 27 2c 	sts	0x2C27, r1	; 0x802c27 <xTickCount+0x2>
    1566:	10 92 28 2c 	sts	0x2C28, r1	; 0x802c28 <xTickCount+0x3>
    156a:	0e 94 8c 04 	call	0x918	; 0x918 <xPortStartScheduler>
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	08 95       	ret

00001576 <vTaskSuspendAll>:
    1576:	80 91 18 2c 	lds	r24, 0x2C18	; 0x802c18 <uxSchedulerSuspended>
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	80 93 18 2c 	sts	0x2C18, r24	; 0x802c18 <uxSchedulerSuspended>
    1580:	08 95       	ret

00001582 <xTaskGetTickCount>:
    1582:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1586:	ff 93       	push	r31
    1588:	f8 7f       	andi	r31, 0xF8	; 248
    158a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    158e:	60 91 25 2c 	lds	r22, 0x2C25	; 0x802c25 <xTickCount>
    1592:	70 91 26 2c 	lds	r23, 0x2C26	; 0x802c26 <xTickCount+0x1>
    1596:	80 91 27 2c 	lds	r24, 0x2C27	; 0x802c27 <xTickCount+0x2>
    159a:	90 91 28 2c 	lds	r25, 0x2C28	; 0x802c28 <xTickCount+0x3>
    159e:	ff 91       	pop	r31
    15a0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    15a4:	08 95       	ret

000015a6 <xTaskIncrementTick>:
    15a6:	af 92       	push	r10
    15a8:	bf 92       	push	r11
    15aa:	cf 92       	push	r12
    15ac:	df 92       	push	r13
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	80 91 18 2c 	lds	r24, 0x2C18	; 0x802c18 <uxSchedulerSuspended>
    15be:	81 11       	cpse	r24, r1
    15c0:	ad c0       	rjmp	.+346    	; 0x171c <xTaskIncrementTick+0x176>
    15c2:	c0 90 25 2c 	lds	r12, 0x2C25	; 0x802c25 <xTickCount>
    15c6:	d0 90 26 2c 	lds	r13, 0x2C26	; 0x802c26 <xTickCount+0x1>
    15ca:	e0 90 27 2c 	lds	r14, 0x2C27	; 0x802c27 <xTickCount+0x2>
    15ce:	f0 90 28 2c 	lds	r15, 0x2C28	; 0x802c28 <xTickCount+0x3>
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	c8 1a       	sub	r12, r24
    15d6:	d8 0a       	sbc	r13, r24
    15d8:	e8 0a       	sbc	r14, r24
    15da:	f8 0a       	sbc	r15, r24
    15dc:	c0 92 25 2c 	sts	0x2C25, r12	; 0x802c25 <xTickCount>
    15e0:	d0 92 26 2c 	sts	0x2C26, r13	; 0x802c26 <xTickCount+0x1>
    15e4:	e0 92 27 2c 	sts	0x2C27, r14	; 0x802c27 <xTickCount+0x2>
    15e8:	f0 92 28 2c 	sts	0x2C28, r15	; 0x802c28 <xTickCount+0x3>
    15ec:	c1 14       	cp	r12, r1
    15ee:	d1 04       	cpc	r13, r1
    15f0:	e1 04       	cpc	r14, r1
    15f2:	f1 04       	cpc	r15, r1
    15f4:	b9 f4       	brne	.+46     	; 0x1624 <xTaskIncrementTick+0x7e>
    15f6:	80 91 42 2c 	lds	r24, 0x2C42	; 0x802c42 <pxDelayedTaskList>
    15fa:	90 91 43 2c 	lds	r25, 0x2C43	; 0x802c43 <pxDelayedTaskList+0x1>
    15fe:	20 91 40 2c 	lds	r18, 0x2C40	; 0x802c40 <pxOverflowDelayedTaskList>
    1602:	30 91 41 2c 	lds	r19, 0x2C41	; 0x802c41 <pxOverflowDelayedTaskList+0x1>
    1606:	20 93 42 2c 	sts	0x2C42, r18	; 0x802c42 <pxDelayedTaskList>
    160a:	30 93 43 2c 	sts	0x2C43, r19	; 0x802c43 <pxDelayedTaskList+0x1>
    160e:	80 93 40 2c 	sts	0x2C40, r24	; 0x802c40 <pxOverflowDelayedTaskList>
    1612:	90 93 41 2c 	sts	0x2C41, r25	; 0x802c41 <pxOverflowDelayedTaskList+0x1>
    1616:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <xNumOfOverflows>
    161a:	8f 5f       	subi	r24, 0xFF	; 255
    161c:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <xNumOfOverflows>
    1620:	0e 94 c0 08 	call	0x1180	; 0x1180 <prvResetNextTaskUnblockTime>
    1624:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <xNextTaskUnblockTime>
    1628:	90 91 1c 2c 	lds	r25, 0x2C1C	; 0x802c1c <xNextTaskUnblockTime+0x1>
    162c:	a0 91 1d 2c 	lds	r26, 0x2C1D	; 0x802c1d <xNextTaskUnblockTime+0x2>
    1630:	b0 91 1e 2c 	lds	r27, 0x2C1E	; 0x802c1e <xNextTaskUnblockTime+0x3>
    1634:	c8 16       	cp	r12, r24
    1636:	d9 06       	cpc	r13, r25
    1638:	ea 06       	cpc	r14, r26
    163a:	fb 06       	cpc	r15, r27
    163c:	10 f4       	brcc	.+4      	; 0x1642 <xTaskIncrementTick+0x9c>
    163e:	b1 2c       	mov	r11, r1
    1640:	5c c0       	rjmp	.+184    	; 0x16fa <xTaskIncrementTick+0x154>
    1642:	b1 2c       	mov	r11, r1
    1644:	0f 2e       	mov	r0, r31
    1646:	fb e0       	ldi	r31, 0x0B	; 11
    1648:	af 2e       	mov	r10, r31
    164a:	f0 2d       	mov	r31, r0
    164c:	e0 91 42 2c 	lds	r30, 0x2C42	; 0x802c42 <pxDelayedTaskList>
    1650:	f0 91 43 2c 	lds	r31, 0x2C43	; 0x802c43 <pxDelayedTaskList+0x1>
    1654:	80 81       	ld	r24, Z
    1656:	81 11       	cpse	r24, r1
    1658:	0c c0       	rjmp	.+24     	; 0x1672 <xTaskIncrementTick+0xcc>
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	9f ef       	ldi	r25, 0xFF	; 255
    165e:	dc 01       	movw	r26, r24
    1660:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <xNextTaskUnblockTime>
    1664:	90 93 1c 2c 	sts	0x2C1C, r25	; 0x802c1c <xNextTaskUnblockTime+0x1>
    1668:	a0 93 1d 2c 	sts	0x2C1D, r26	; 0x802c1d <xNextTaskUnblockTime+0x2>
    166c:	b0 93 1e 2c 	sts	0x2C1E, r27	; 0x802c1e <xNextTaskUnblockTime+0x3>
    1670:	44 c0       	rjmp	.+136    	; 0x16fa <xTaskIncrementTick+0x154>
    1672:	e0 91 42 2c 	lds	r30, 0x2C42	; 0x802c42 <pxDelayedTaskList>
    1676:	f0 91 43 2c 	lds	r31, 0x2C43	; 0x802c43 <pxDelayedTaskList+0x1>
    167a:	07 80       	ldd	r0, Z+7	; 0x07
    167c:	f0 85       	ldd	r31, Z+8	; 0x08
    167e:	e0 2d       	mov	r30, r0
    1680:	c0 85       	ldd	r28, Z+8	; 0x08
    1682:	d1 85       	ldd	r29, Z+9	; 0x09
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	ac 81       	ldd	r26, Y+4	; 0x04
    168a:	bd 81       	ldd	r27, Y+5	; 0x05
    168c:	c8 16       	cp	r12, r24
    168e:	d9 06       	cpc	r13, r25
    1690:	ea 06       	cpc	r14, r26
    1692:	fb 06       	cpc	r15, r27
    1694:	48 f4       	brcc	.+18     	; 0x16a8 <xTaskIncrementTick+0x102>
    1696:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <xNextTaskUnblockTime>
    169a:	90 93 1c 2c 	sts	0x2C1C, r25	; 0x802c1c <xNextTaskUnblockTime+0x1>
    169e:	a0 93 1d 2c 	sts	0x2C1D, r26	; 0x802c1d <xNextTaskUnblockTime+0x2>
    16a2:	b0 93 1e 2c 	sts	0x2C1E, r27	; 0x802c1e <xNextTaskUnblockTime+0x3>
    16a6:	29 c0       	rjmp	.+82     	; 0x16fa <xTaskIncrementTick+0x154>
    16a8:	8e 01       	movw	r16, r28
    16aa:	0e 5f       	subi	r16, 0xFE	; 254
    16ac:	1f 4f       	sbci	r17, 0xFF	; 255
    16ae:	c8 01       	movw	r24, r16
    16b0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    16b4:	88 8d       	ldd	r24, Y+24	; 0x18
    16b6:	99 8d       	ldd	r25, Y+25	; 0x19
    16b8:	89 2b       	or	r24, r25
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <xTaskIncrementTick+0x11e>
    16bc:	ce 01       	movw	r24, r28
    16be:	0e 96       	adiw	r24, 0x0e	; 14
    16c0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    16c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16c6:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <uxTopReadyPriority>
    16ca:	98 17       	cp	r25, r24
    16cc:	10 f4       	brcc	.+4      	; 0x16d2 <xTaskIncrementTick+0x12c>
    16ce:	80 93 24 2c 	sts	0x2C24, r24	; 0x802c24 <uxTopReadyPriority>
    16d2:	a8 9e       	mul	r10, r24
    16d4:	c0 01       	movw	r24, r0
    16d6:	11 24       	eor	r1, r1
    16d8:	b8 01       	movw	r22, r16
    16da:	86 5a       	subi	r24, 0xA6	; 166
    16dc:	93 4d       	sbci	r25, 0xD3	; 211
    16de:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    16e2:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    16e6:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    16ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    16ee:	98 17       	cp	r25, r24
    16f0:	08 f4       	brcc	.+2      	; 0x16f4 <xTaskIncrementTick+0x14e>
    16f2:	ac cf       	rjmp	.-168    	; 0x164c <xTaskIncrementTick+0xa6>
    16f4:	bb 24       	eor	r11, r11
    16f6:	b3 94       	inc	r11
    16f8:	a9 cf       	rjmp	.-174    	; 0x164c <xTaskIncrementTick+0xa6>
    16fa:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    16fe:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1702:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1704:	8b e0       	ldi	r24, 0x0B	; 11
    1706:	e8 9f       	mul	r30, r24
    1708:	f0 01       	movw	r30, r0
    170a:	11 24       	eor	r1, r1
    170c:	e6 5a       	subi	r30, 0xA6	; 166
    170e:	f3 4d       	sbci	r31, 0xD3	; 211
    1710:	80 81       	ld	r24, Z
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	48 f0       	brcs	.+18     	; 0x1728 <xTaskIncrementTick+0x182>
    1716:	bb 24       	eor	r11, r11
    1718:	b3 94       	inc	r11
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <xTaskIncrementTick+0x182>
    171c:	80 91 22 2c 	lds	r24, 0x2C22	; 0x802c22 <uxPendedTicks>
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	80 93 22 2c 	sts	0x2C22, r24	; 0x802c22 <uxPendedTicks>
    1726:	b1 2c       	mov	r11, r1
    1728:	80 91 21 2c 	lds	r24, 0x2C21	; 0x802c21 <xYieldPending>
    172c:	88 23       	and	r24, r24
    172e:	11 f0       	breq	.+4      	; 0x1734 <xTaskIncrementTick+0x18e>
    1730:	bb 24       	eor	r11, r11
    1732:	b3 94       	inc	r11
    1734:	8b 2d       	mov	r24, r11
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	cf 90       	pop	r12
    1746:	bf 90       	pop	r11
    1748:	af 90       	pop	r10
    174a:	08 95       	ret

0000174c <xTaskResumeAll>:
    174c:	cf 92       	push	r12
    174e:	df 92       	push	r13
    1750:	ef 92       	push	r14
    1752:	ff 92       	push	r15
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1760:	ff 93       	push	r31
    1762:	f8 7f       	andi	r31, 0xF8	; 248
    1764:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1768:	80 91 18 2c 	lds	r24, 0x2C18	; 0x802c18 <uxSchedulerSuspended>
    176c:	81 50       	subi	r24, 0x01	; 1
    176e:	80 93 18 2c 	sts	0x2C18, r24	; 0x802c18 <uxSchedulerSuspended>
    1772:	80 91 18 2c 	lds	r24, 0x2C18	; 0x802c18 <uxSchedulerSuspended>
    1776:	81 11       	cpse	r24, r1
    1778:	5c c0       	rjmp	.+184    	; 0x1832 <xTaskResumeAll+0xe6>
    177a:	80 91 29 2c 	lds	r24, 0x2C29	; 0x802c29 <uxCurrentNumberOfTasks>
    177e:	81 11       	cpse	r24, r1
    1780:	2c c0       	rjmp	.+88     	; 0x17da <xTaskResumeAll+0x8e>
    1782:	5a c0       	rjmp	.+180    	; 0x1838 <xTaskResumeAll+0xec>
    1784:	d7 01       	movw	r26, r14
    1786:	17 96       	adiw	r26, 0x07	; 7
    1788:	ed 91       	ld	r30, X+
    178a:	fc 91       	ld	r31, X
    178c:	18 97       	sbiw	r26, 0x08	; 8
    178e:	c0 85       	ldd	r28, Z+8	; 0x08
    1790:	d1 85       	ldd	r29, Z+9	; 0x09
    1792:	ce 01       	movw	r24, r28
    1794:	0e 96       	adiw	r24, 0x0e	; 14
    1796:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    179a:	8e 01       	movw	r16, r28
    179c:	0e 5f       	subi	r16, 0xFE	; 254
    179e:	1f 4f       	sbci	r17, 0xFF	; 255
    17a0:	c8 01       	movw	r24, r16
    17a2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    17a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17a8:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <uxTopReadyPriority>
    17ac:	98 17       	cp	r25, r24
    17ae:	10 f4       	brcc	.+4      	; 0x17b4 <xTaskResumeAll+0x68>
    17b0:	80 93 24 2c 	sts	0x2C24, r24	; 0x802c24 <uxTopReadyPriority>
    17b4:	d8 9e       	mul	r13, r24
    17b6:	c0 01       	movw	r24, r0
    17b8:	11 24       	eor	r1, r1
    17ba:	b8 01       	movw	r22, r16
    17bc:	86 5a       	subi	r24, 0xA6	; 166
    17be:	93 4d       	sbci	r25, 0xD3	; 211
    17c0:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    17c4:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    17c8:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    17cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    17d0:	98 17       	cp	r25, r24
    17d2:	88 f0       	brcs	.+34     	; 0x17f6 <xTaskResumeAll+0xaa>
    17d4:	c0 92 21 2c 	sts	0x2C21, r12	; 0x802c21 <xYieldPending>
    17d8:	0e c0       	rjmp	.+28     	; 0x17f6 <xTaskResumeAll+0xaa>
    17da:	c0 e0       	ldi	r28, 0x00	; 0
    17dc:	d0 e0       	ldi	r29, 0x00	; 0
    17de:	0f 2e       	mov	r0, r31
    17e0:	f5 e3       	ldi	r31, 0x35	; 53
    17e2:	ef 2e       	mov	r14, r31
    17e4:	fc e2       	ldi	r31, 0x2C	; 44
    17e6:	ff 2e       	mov	r15, r31
    17e8:	f0 2d       	mov	r31, r0
    17ea:	0f 2e       	mov	r0, r31
    17ec:	fb e0       	ldi	r31, 0x0B	; 11
    17ee:	df 2e       	mov	r13, r31
    17f0:	f0 2d       	mov	r31, r0
    17f2:	cc 24       	eor	r12, r12
    17f4:	c3 94       	inc	r12
    17f6:	f7 01       	movw	r30, r14
    17f8:	80 81       	ld	r24, Z
    17fa:	81 11       	cpse	r24, r1
    17fc:	c3 cf       	rjmp	.-122    	; 0x1784 <xTaskResumeAll+0x38>
    17fe:	cd 2b       	or	r28, r29
    1800:	11 f0       	breq	.+4      	; 0x1806 <xTaskResumeAll+0xba>
    1802:	0e 94 c0 08 	call	0x1180	; 0x1180 <prvResetNextTaskUnblockTime>
    1806:	c0 91 22 2c 	lds	r28, 0x2C22	; 0x802c22 <uxPendedTicks>
    180a:	cc 23       	and	r28, r28
    180c:	51 f0       	breq	.+20     	; 0x1822 <xTaskResumeAll+0xd6>
    180e:	d1 e0       	ldi	r29, 0x01	; 1
    1810:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <xTaskIncrementTick>
    1814:	81 11       	cpse	r24, r1
    1816:	d0 93 21 2c 	sts	0x2C21, r29	; 0x802c21 <xYieldPending>
    181a:	c1 50       	subi	r28, 0x01	; 1
    181c:	c9 f7       	brne	.-14     	; 0x1810 <xTaskResumeAll+0xc4>
    181e:	10 92 22 2c 	sts	0x2C22, r1	; 0x802c22 <uxPendedTicks>
    1822:	80 91 21 2c 	lds	r24, 0x2C21	; 0x802c21 <xYieldPending>
    1826:	88 23       	and	r24, r24
    1828:	31 f0       	breq	.+12     	; 0x1836 <xTaskResumeAll+0xea>
    182a:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	03 c0       	rjmp	.+6      	; 0x1838 <xTaskResumeAll+0xec>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <xTaskResumeAll+0xec>
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	ff 91       	pop	r31
    183a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	df 90       	pop	r13
    184c:	cf 90       	pop	r12
    184e:	08 95       	ret

00001850 <vTaskDelay>:
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	6b 01       	movw	r12, r22
    185a:	7c 01       	movw	r14, r24
    185c:	67 2b       	or	r22, r23
    185e:	68 2b       	or	r22, r24
    1860:	69 2b       	or	r22, r25
    1862:	59 f0       	breq	.+22     	; 0x187a <vTaskDelay+0x2a>
    1864:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vTaskSuspendAll>
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	c7 01       	movw	r24, r14
    186c:	b6 01       	movw	r22, r12
    186e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <prvAddCurrentTaskToDelayedList>
    1872:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
    1876:	81 11       	cpse	r24, r1
    1878:	02 c0       	rjmp	.+4      	; 0x187e <vTaskDelay+0x2e>
    187a:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
    187e:	ff 90       	pop	r15
    1880:	ef 90       	pop	r14
    1882:	df 90       	pop	r13
    1884:	cf 90       	pop	r12
    1886:	08 95       	ret

00001888 <vTaskSwitchContext>:
    1888:	80 91 18 2c 	lds	r24, 0x2C18	; 0x802c18 <uxSchedulerSuspended>
    188c:	88 23       	and	r24, r24
    188e:	21 f0       	breq	.+8      	; 0x1898 <vTaskSwitchContext+0x10>
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	80 93 21 2c 	sts	0x2C21, r24	; 0x802c21 <xYieldPending>
    1896:	08 95       	ret
    1898:	10 92 21 2c 	sts	0x2C21, r1	; 0x802c21 <xYieldPending>
    189c:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    18a0:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    18a4:	03 8c       	ldd	r0, Z+27	; 0x1b
    18a6:	f4 8d       	ldd	r31, Z+28	; 0x1c
    18a8:	e0 2d       	mov	r30, r0
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	a2 81       	ldd	r26, Z+2	; 0x02
    18b0:	b3 81       	ldd	r27, Z+3	; 0x03
    18b2:	85 3a       	cpi	r24, 0xA5	; 165
    18b4:	95 4a       	sbci	r25, 0xA5	; 165
    18b6:	a5 4a       	sbci	r26, 0xA5	; 165
    18b8:	b5 4a       	sbci	r27, 0xA5	; 165
    18ba:	d9 f4       	brne	.+54     	; 0x18f2 <vTaskSwitchContext+0x6a>
    18bc:	84 81       	ldd	r24, Z+4	; 0x04
    18be:	95 81       	ldd	r25, Z+5	; 0x05
    18c0:	a6 81       	ldd	r26, Z+6	; 0x06
    18c2:	b7 81       	ldd	r27, Z+7	; 0x07
    18c4:	85 3a       	cpi	r24, 0xA5	; 165
    18c6:	95 4a       	sbci	r25, 0xA5	; 165
    18c8:	a5 4a       	sbci	r26, 0xA5	; 165
    18ca:	b5 4a       	sbci	r27, 0xA5	; 165
    18cc:	91 f4       	brne	.+36     	; 0x18f2 <vTaskSwitchContext+0x6a>
    18ce:	80 85       	ldd	r24, Z+8	; 0x08
    18d0:	91 85       	ldd	r25, Z+9	; 0x09
    18d2:	a2 85       	ldd	r26, Z+10	; 0x0a
    18d4:	b3 85       	ldd	r27, Z+11	; 0x0b
    18d6:	85 3a       	cpi	r24, 0xA5	; 165
    18d8:	95 4a       	sbci	r25, 0xA5	; 165
    18da:	a5 4a       	sbci	r26, 0xA5	; 165
    18dc:	b5 4a       	sbci	r27, 0xA5	; 165
    18de:	49 f4       	brne	.+18     	; 0x18f2 <vTaskSwitchContext+0x6a>
    18e0:	84 85       	ldd	r24, Z+12	; 0x0c
    18e2:	95 85       	ldd	r25, Z+13	; 0x0d
    18e4:	a6 85       	ldd	r26, Z+14	; 0x0e
    18e6:	b7 85       	ldd	r27, Z+15	; 0x0f
    18e8:	85 3a       	cpi	r24, 0xA5	; 165
    18ea:	95 4a       	sbci	r25, 0xA5	; 165
    18ec:	a5 4a       	sbci	r26, 0xA5	; 165
    18ee:	b5 4a       	sbci	r27, 0xA5	; 165
    18f0:	61 f0       	breq	.+24     	; 0x190a <vTaskSwitchContext+0x82>
    18f2:	60 91 86 2c 	lds	r22, 0x2C86	; 0x802c86 <pxCurrentTCB>
    18f6:	70 91 87 2c 	lds	r23, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    18fa:	80 91 86 2c 	lds	r24, 0x2C86	; 0x802c86 <pxCurrentTCB>
    18fe:	90 91 87 2c 	lds	r25, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1902:	63 5e       	subi	r22, 0xE3	; 227
    1904:	7f 4f       	sbci	r23, 0xFF	; 255
    1906:	0e 94 a7 01 	call	0x34e	; 0x34e <vApplicationStackOverflowHook>
    190a:	80 91 24 2c 	lds	r24, 0x2C24	; 0x802c24 <uxTopReadyPriority>
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	9b e0       	ldi	r25, 0x0B	; 11
    1914:	89 9f       	mul	r24, r25
    1916:	f0 01       	movw	r30, r0
    1918:	11 24       	eor	r1, r1
    191a:	e6 5a       	subi	r30, 0xA6	; 166
    191c:	f3 4d       	sbci	r31, 0xD3	; 211
    191e:	90 81       	ld	r25, Z
    1920:	91 11       	cpse	r25, r1
    1922:	0e c0       	rjmp	.+28     	; 0x1940 <vTaskSwitchContext+0xb8>
    1924:	4b e0       	ldi	r20, 0x0B	; 11
    1926:	81 50       	subi	r24, 0x01	; 1
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	42 9f       	mul	r20, r18
    192e:	f0 01       	movw	r30, r0
    1930:	43 9f       	mul	r20, r19
    1932:	f0 0d       	add	r31, r0
    1934:	11 24       	eor	r1, r1
    1936:	e6 5a       	subi	r30, 0xA6	; 166
    1938:	f3 4d       	sbci	r31, 0xD3	; 211
    193a:	90 81       	ld	r25, Z
    193c:	99 23       	and	r25, r25
    193e:	99 f3       	breq	.-26     	; 0x1926 <vTaskSwitchContext+0x9e>
    1940:	9b e0       	ldi	r25, 0x0B	; 11
    1942:	92 9f       	mul	r25, r18
    1944:	a0 01       	movw	r20, r0
    1946:	93 9f       	mul	r25, r19
    1948:	50 0d       	add	r21, r0
    194a:	11 24       	eor	r1, r1
    194c:	da 01       	movw	r26, r20
    194e:	a6 5a       	subi	r26, 0xA6	; 166
    1950:	b3 4d       	sbci	r27, 0xD3	; 211
    1952:	11 96       	adiw	r26, 0x01	; 1
    1954:	ed 91       	ld	r30, X+
    1956:	fc 91       	ld	r31, X
    1958:	12 97       	sbiw	r26, 0x02	; 2
    195a:	04 80       	ldd	r0, Z+4	; 0x04
    195c:	f5 81       	ldd	r31, Z+5	; 0x05
    195e:	e0 2d       	mov	r30, r0
    1960:	11 96       	adiw	r26, 0x01	; 1
    1962:	ed 93       	st	X+, r30
    1964:	fc 93       	st	X, r31
    1966:	12 97       	sbiw	r26, 0x02	; 2
    1968:	43 5a       	subi	r20, 0xA3	; 163
    196a:	53 4d       	sbci	r21, 0xD3	; 211
    196c:	e4 17       	cp	r30, r20
    196e:	f5 07       	cpc	r31, r21
    1970:	29 f4       	brne	.+10     	; 0x197c <vTaskSwitchContext+0xf4>
    1972:	44 81       	ldd	r20, Z+4	; 0x04
    1974:	55 81       	ldd	r21, Z+5	; 0x05
    1976:	fd 01       	movw	r30, r26
    1978:	41 83       	std	Z+1, r20	; 0x01
    197a:	52 83       	std	Z+2, r21	; 0x02
    197c:	9b e0       	ldi	r25, 0x0B	; 11
    197e:	92 9f       	mul	r25, r18
    1980:	f0 01       	movw	r30, r0
    1982:	93 9f       	mul	r25, r19
    1984:	f0 0d       	add	r31, r0
    1986:	11 24       	eor	r1, r1
    1988:	e6 5a       	subi	r30, 0xA6	; 166
    198a:	f3 4d       	sbci	r31, 0xD3	; 211
    198c:	01 80       	ldd	r0, Z+1	; 0x01
    198e:	f2 81       	ldd	r31, Z+2	; 0x02
    1990:	e0 2d       	mov	r30, r0
    1992:	20 85       	ldd	r18, Z+8	; 0x08
    1994:	31 85       	ldd	r19, Z+9	; 0x09
    1996:	20 93 86 2c 	sts	0x2C86, r18	; 0x802c86 <pxCurrentTCB>
    199a:	30 93 87 2c 	sts	0x2C87, r19	; 0x802c87 <pxCurrentTCB+0x1>
    199e:	80 93 24 2c 	sts	0x2C24, r24	; 0x802c24 <uxTopReadyPriority>
    19a2:	08 95       	ret

000019a4 <vTaskPlaceOnEventList>:
    19a4:	cf 92       	push	r12
    19a6:	df 92       	push	r13
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	6a 01       	movw	r12, r20
    19ae:	7b 01       	movw	r14, r22
    19b0:	60 91 86 2c 	lds	r22, 0x2C86	; 0x802c86 <pxCurrentTCB>
    19b4:	70 91 87 2c 	lds	r23, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    19b8:	62 5f       	subi	r22, 0xF2	; 242
    19ba:	7f 4f       	sbci	r23, 0xFF	; 255
    19bc:	0e 94 a4 03 	call	0x748	; 0x748 <vListInsert>
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	c7 01       	movw	r24, r14
    19c4:	b6 01       	movw	r22, r12
    19c6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <prvAddCurrentTaskToDelayedList>
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	08 95       	ret

000019d4 <vTaskPlaceOnUnorderedEventList>:
    19d4:	cf 92       	push	r12
    19d6:	df 92       	push	r13
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	68 01       	movw	r12, r16
    19e2:	79 01       	movw	r14, r18
    19e4:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    19e8:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    19ec:	70 68       	ori	r23, 0x80	; 128
    19ee:	46 87       	std	Z+14, r20	; 0x0e
    19f0:	57 87       	std	Z+15, r21	; 0x0f
    19f2:	60 8b       	std	Z+16, r22	; 0x10
    19f4:	71 8b       	std	Z+17, r23	; 0x11
    19f6:	60 91 86 2c 	lds	r22, 0x2C86	; 0x802c86 <pxCurrentTCB>
    19fa:	70 91 87 2c 	lds	r23, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    19fe:	62 5f       	subi	r22, 0xF2	; 242
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	c7 01       	movw	r24, r14
    1a0a:	b6 01       	movw	r22, r12
    1a0c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <prvAddCurrentTaskToDelayedList>
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	df 90       	pop	r13
    1a1a:	cf 90       	pop	r12
    1a1c:	08 95       	ret

00001a1e <vTaskPlaceOnEventListRestricted>:
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	cf 93       	push	r28
    1a28:	6a 01       	movw	r12, r20
    1a2a:	7b 01       	movw	r14, r22
    1a2c:	c2 2f       	mov	r28, r18
    1a2e:	60 91 86 2c 	lds	r22, 0x2C86	; 0x802c86 <pxCurrentTCB>
    1a32:	70 91 87 2c 	lds	r23, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1a36:	62 5f       	subi	r22, 0xF2	; 242
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    1a3e:	cc 23       	and	r28, r28
    1a40:	21 f0       	breq	.+8      	; 0x1a4a <vTaskPlaceOnEventListRestricted+0x2c>
    1a42:	cc 24       	eor	r12, r12
    1a44:	ca 94       	dec	r12
    1a46:	dc 2c       	mov	r13, r12
    1a48:	76 01       	movw	r14, r12
    1a4a:	4c 2f       	mov	r20, r28
    1a4c:	c7 01       	movw	r24, r14
    1a4e:	b6 01       	movw	r22, r12
    1a50:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <prvAddCurrentTaskToDelayedList>
    1a54:	cf 91       	pop	r28
    1a56:	ff 90       	pop	r15
    1a58:	ef 90       	pop	r14
    1a5a:	df 90       	pop	r13
    1a5c:	cf 90       	pop	r12
    1a5e:	08 95       	ret

00001a60 <xTaskRemoveFromEventList>:
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	dc 01       	movw	r26, r24
    1a6a:	17 96       	adiw	r26, 0x07	; 7
    1a6c:	ed 91       	ld	r30, X+
    1a6e:	fc 91       	ld	r31, X
    1a70:	18 97       	sbiw	r26, 0x08	; 8
    1a72:	c0 85       	ldd	r28, Z+8	; 0x08
    1a74:	d1 85       	ldd	r29, Z+9	; 0x09
    1a76:	8e 01       	movw	r16, r28
    1a78:	02 5f       	subi	r16, 0xF2	; 242
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	c8 01       	movw	r24, r16
    1a7e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    1a82:	80 91 18 2c 	lds	r24, 0x2C18	; 0x802c18 <uxSchedulerSuspended>
    1a86:	81 11       	cpse	r24, r1
    1a88:	16 c0       	rjmp	.+44     	; 0x1ab6 <xTaskRemoveFromEventList+0x56>
    1a8a:	0c 50       	subi	r16, 0x0C	; 12
    1a8c:	11 09       	sbc	r17, r1
    1a8e:	c8 01       	movw	r24, r16
    1a90:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    1a94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a96:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <uxTopReadyPriority>
    1a9a:	98 17       	cp	r25, r24
    1a9c:	10 f4       	brcc	.+4      	; 0x1aa2 <xTaskRemoveFromEventList+0x42>
    1a9e:	80 93 24 2c 	sts	0x2C24, r24	; 0x802c24 <uxTopReadyPriority>
    1aa2:	bb e0       	ldi	r27, 0x0B	; 11
    1aa4:	8b 9f       	mul	r24, r27
    1aa6:	c0 01       	movw	r24, r0
    1aa8:	11 24       	eor	r1, r1
    1aaa:	b8 01       	movw	r22, r16
    1aac:	86 5a       	subi	r24, 0xA6	; 166
    1aae:	93 4d       	sbci	r25, 0xD3	; 211
    1ab0:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    1ab4:	05 c0       	rjmp	.+10     	; 0x1ac0 <xTaskRemoveFromEventList+0x60>
    1ab6:	b8 01       	movw	r22, r16
    1ab8:	85 e3       	ldi	r24, 0x35	; 53
    1aba:	9c e2       	ldi	r25, 0x2C	; 44
    1abc:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    1ac0:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    1ac4:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1ac8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1aca:	82 8d       	ldd	r24, Z+26	; 0x1a
    1acc:	89 17       	cp	r24, r25
    1ace:	20 f4       	brcc	.+8      	; 0x1ad8 <xTaskRemoveFromEventList+0x78>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	80 93 21 2c 	sts	0x2C21, r24	; 0x802c21 <xYieldPending>
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <xTaskRemoveFromEventList+0x7a>
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	08 95       	ret

00001ae4 <vTaskRemoveFromUnorderedEventList>:
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	70 68       	ori	r23, 0x80	; 128
    1aee:	fc 01       	movw	r30, r24
    1af0:	40 83       	st	Z, r20
    1af2:	51 83       	std	Z+1, r21	; 0x01
    1af4:	62 83       	std	Z+2, r22	; 0x02
    1af6:	73 83       	std	Z+3, r23	; 0x03
    1af8:	c0 85       	ldd	r28, Z+8	; 0x08
    1afa:	d1 85       	ldd	r29, Z+9	; 0x09
    1afc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    1b00:	8e 01       	movw	r16, r28
    1b02:	0e 5f       	subi	r16, 0xFE	; 254
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
    1b06:	c8 01       	movw	r24, r16
    1b08:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    1b0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b0e:	90 91 24 2c 	lds	r25, 0x2C24	; 0x802c24 <uxTopReadyPriority>
    1b12:	98 17       	cp	r25, r24
    1b14:	10 f4       	brcc	.+4      	; 0x1b1a <vTaskRemoveFromUnorderedEventList+0x36>
    1b16:	80 93 24 2c 	sts	0x2C24, r24	; 0x802c24 <uxTopReadyPriority>
    1b1a:	fb e0       	ldi	r31, 0x0B	; 11
    1b1c:	8f 9f       	mul	r24, r31
    1b1e:	c0 01       	movw	r24, r0
    1b20:	11 24       	eor	r1, r1
    1b22:	b8 01       	movw	r22, r16
    1b24:	86 5a       	subi	r24, 0xA6	; 166
    1b26:	93 4d       	sbci	r25, 0xD3	; 211
    1b28:	0e 94 83 03 	call	0x706	; 0x706 <vListInsertEnd>
    1b2c:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    1b30:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1b34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b36:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b38:	89 17       	cp	r24, r25
    1b3a:	18 f4       	brcc	.+6      	; 0x1b42 <vTaskRemoveFromUnorderedEventList+0x5e>
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	80 93 21 2c 	sts	0x2C21, r24	; 0x802c21 <xYieldPending>
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	08 95       	ret

00001b4c <vTaskInternalSetTimeOutState>:
    1b4c:	20 91 20 2c 	lds	r18, 0x2C20	; 0x802c20 <xNumOfOverflows>
    1b50:	fc 01       	movw	r30, r24
    1b52:	20 83       	st	Z, r18
    1b54:	40 91 25 2c 	lds	r20, 0x2C25	; 0x802c25 <xTickCount>
    1b58:	50 91 26 2c 	lds	r21, 0x2C26	; 0x802c26 <xTickCount+0x1>
    1b5c:	60 91 27 2c 	lds	r22, 0x2C27	; 0x802c27 <xTickCount+0x2>
    1b60:	70 91 28 2c 	lds	r23, 0x2C28	; 0x802c28 <xTickCount+0x3>
    1b64:	41 83       	std	Z+1, r20	; 0x01
    1b66:	52 83       	std	Z+2, r21	; 0x02
    1b68:	63 83       	std	Z+3, r22	; 0x03
    1b6a:	74 83       	std	Z+4, r23	; 0x04
    1b6c:	08 95       	ret

00001b6e <xTaskCheckForTimeOut>:
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	db 01       	movw	r26, r22
    1b80:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b84:	ff 93       	push	r31
    1b86:	f8 7f       	andi	r31, 0xF8	; 248
    1b88:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b8c:	40 91 25 2c 	lds	r20, 0x2C25	; 0x802c25 <xTickCount>
    1b90:	50 91 26 2c 	lds	r21, 0x2C26	; 0x802c26 <xTickCount+0x1>
    1b94:	60 91 27 2c 	lds	r22, 0x2C27	; 0x802c27 <xTickCount+0x2>
    1b98:	70 91 28 2c 	lds	r23, 0x2C28	; 0x802c28 <xTickCount+0x3>
    1b9c:	0d 91       	ld	r16, X+
    1b9e:	1d 91       	ld	r17, X+
    1ba0:	2d 91       	ld	r18, X+
    1ba2:	3c 91       	ld	r19, X
    1ba4:	13 97       	sbiw	r26, 0x03	; 3
    1ba6:	0f 3f       	cpi	r16, 0xFF	; 255
    1ba8:	cf ef       	ldi	r28, 0xFF	; 255
    1baa:	1c 07       	cpc	r17, r28
    1bac:	2c 07       	cpc	r18, r28
    1bae:	3c 07       	cpc	r19, r28
    1bb0:	69 f1       	breq	.+90     	; 0x1c0c <xTaskCheckForTimeOut+0x9e>
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	c1 80       	ldd	r12, Z+1	; 0x01
    1bb6:	d2 80       	ldd	r13, Z+2	; 0x02
    1bb8:	e3 80       	ldd	r14, Z+3	; 0x03
    1bba:	f4 80       	ldd	r15, Z+4	; 0x04
    1bbc:	e0 91 20 2c 	lds	r30, 0x2C20	; 0x802c20 <xNumOfOverflows>
    1bc0:	ec 01       	movw	r28, r24
    1bc2:	f8 81       	ld	r31, Y
    1bc4:	fe 17       	cp	r31, r30
    1bc6:	29 f0       	breq	.+10     	; 0x1bd2 <xTaskCheckForTimeOut+0x64>
    1bc8:	4c 15       	cp	r20, r12
    1bca:	5d 05       	cpc	r21, r13
    1bcc:	6e 05       	cpc	r22, r14
    1bce:	7f 05       	cpc	r23, r15
    1bd0:	f8 f4       	brcc	.+62     	; 0x1c10 <xTaskCheckForTimeOut+0xa2>
    1bd2:	4c 19       	sub	r20, r12
    1bd4:	5d 09       	sbc	r21, r13
    1bd6:	6e 09       	sbc	r22, r14
    1bd8:	7f 09       	sbc	r23, r15
    1bda:	40 17       	cp	r20, r16
    1bdc:	51 07       	cpc	r21, r17
    1bde:	62 07       	cpc	r22, r18
    1be0:	73 07       	cpc	r23, r19
    1be2:	68 f4       	brcc	.+26     	; 0x1bfe <xTaskCheckForTimeOut+0x90>
    1be4:	fd 01       	movw	r30, r26
    1be6:	04 1b       	sub	r16, r20
    1be8:	15 0b       	sbc	r17, r21
    1bea:	26 0b       	sbc	r18, r22
    1bec:	37 0b       	sbc	r19, r23
    1bee:	00 83       	st	Z, r16
    1bf0:	11 83       	std	Z+1, r17	; 0x01
    1bf2:	22 83       	std	Z+2, r18	; 0x02
    1bf4:	33 83       	std	Z+3, r19	; 0x03
    1bf6:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <vTaskInternalSetTimeOutState>
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	0a c0       	rjmp	.+20     	; 0x1c12 <xTaskCheckForTimeOut+0xa4>
    1bfe:	1d 92       	st	X+, r1
    1c00:	1d 92       	st	X+, r1
    1c02:	1d 92       	st	X+, r1
    1c04:	1c 92       	st	X, r1
    1c06:	13 97       	sbiw	r26, 0x03	; 3
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	03 c0       	rjmp	.+6      	; 0x1c12 <xTaskCheckForTimeOut+0xa4>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <xTaskCheckForTimeOut+0xa4>
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	ff 91       	pop	r31
    1c14:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	df 90       	pop	r13
    1c26:	cf 90       	pop	r12
    1c28:	08 95       	ret

00001c2a <vTaskMissedYield>:
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	80 93 21 2c 	sts	0x2C21, r24	; 0x802c21 <xYieldPending>
    1c30:	08 95       	ret

00001c32 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1c32:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <xSchedulerRunning>
    1c36:	88 23       	and	r24, r24
    1c38:	31 f0       	breq	.+12     	; 0x1c46 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1c3a:	80 91 18 2c 	lds	r24, 0x2C18	; 0x802c18 <uxSchedulerSuspended>
    1c3e:	88 23       	and	r24, r24
    1c40:	21 f0       	breq	.+8      	; 0x1c4a <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    1c4a:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    1c4c:	08 95       	ret

00001c4e <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1c56:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    1c5a:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1c5e:	66 85       	ldd	r22, Z+14	; 0x0e
    1c60:	77 85       	ldd	r23, Z+15	; 0x0f
    1c62:	80 89       	ldd	r24, Z+16	; 0x10
    1c64:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1c66:	e0 91 86 2c 	lds	r30, 0x2C86	; 0x802c86 <pxCurrentTCB>
    1c6a:	f0 91 87 2c 	lds	r31, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1c6e:	a0 91 86 2c 	lds	r26, 0x2C86	; 0x802c86 <pxCurrentTCB>
    1c72:	b0 91 87 2c 	lds	r27, 0x2C87	; 0x802c87 <pxCurrentTCB+0x1>
    1c76:	5a 96       	adiw	r26, 0x1a	; 26
    1c78:	2c 91       	ld	r18, X
    1c7a:	c1 2c       	mov	r12, r1
    1c7c:	d1 2c       	mov	r13, r1
    1c7e:	76 01       	movw	r14, r12
    1c80:	68 94       	set
    1c82:	c2 f8       	bld	r12, 2
    1c84:	c2 1a       	sub	r12, r18
    1c86:	d1 08       	sbc	r13, r1
    1c88:	e1 08       	sbc	r14, r1
    1c8a:	f1 08       	sbc	r15, r1
    1c8c:	c6 86       	std	Z+14, r12	; 0x0e
    1c8e:	d7 86       	std	Z+15, r13	; 0x0f
    1c90:	e0 8a       	std	Z+16, r14	; 0x10
    1c92:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    1c94:	ff 90       	pop	r15
    1c96:	ef 90       	pop	r14
    1c98:	df 90       	pop	r13
    1c9a:	cf 90       	pop	r12
    1c9c:	08 95       	ret

00001c9e <prvInsertTimerInActiveList>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1c9e:	cf 92       	push	r12
    1ca0:	df 92       	push	r13
    1ca2:	ef 92       	push	r14
    1ca4:	ff 92       	push	r15
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	fc 01       	movw	r30, r24
    1cac:	42 83       	std	Z+2, r20	; 0x02
    1cae:	53 83       	std	Z+3, r21	; 0x03
    1cb0:	64 83       	std	Z+4, r22	; 0x04
    1cb2:	75 83       	std	Z+5, r23	; 0x05
    1cb4:	82 87       	std	Z+10, r24	; 0x0a
    1cb6:	93 87       	std	Z+11, r25	; 0x0b
    1cb8:	04 17       	cp	r16, r20
    1cba:	15 07       	cpc	r17, r21
    1cbc:	26 07       	cpc	r18, r22
    1cbe:	37 07       	cpc	r19, r23
    1cc0:	c0 f0       	brcs	.+48     	; 0x1cf2 <prvInsertTimerInActiveList+0x54>
    1cc2:	0c 19       	sub	r16, r12
    1cc4:	1d 09       	sbc	r17, r13
    1cc6:	2e 09       	sbc	r18, r14
    1cc8:	3f 09       	sbc	r19, r15
    1cca:	86 85       	ldd	r24, Z+14	; 0x0e
    1ccc:	97 85       	ldd	r25, Z+15	; 0x0f
    1cce:	a0 89       	ldd	r26, Z+16	; 0x10
    1cd0:	b1 89       	ldd	r27, Z+17	; 0x11
    1cd2:	08 17       	cp	r16, r24
    1cd4:	19 07       	cpc	r17, r25
    1cd6:	2a 07       	cpc	r18, r26
    1cd8:	3b 07       	cpc	r19, r27
    1cda:	00 f5       	brcc	.+64     	; 0x1d1c <prvInsertTimerInActiveList+0x7e>
    1cdc:	bf 01       	movw	r22, r30
    1cde:	6e 5f       	subi	r22, 0xFE	; 254
    1ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce2:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <pxOverflowTimerList>
    1ce6:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <pxOverflowTimerList+0x1>
    1cea:	0e 94 a4 03 	call	0x748	; 0x748 <vListInsert>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	18 c0       	rjmp	.+48     	; 0x1d22 <prvInsertTimerInActiveList+0x84>
    1cf2:	0c 15       	cp	r16, r12
    1cf4:	1d 05       	cpc	r17, r13
    1cf6:	2e 05       	cpc	r18, r14
    1cf8:	3f 05       	cpc	r19, r15
    1cfa:	28 f4       	brcc	.+10     	; 0x1d06 <prvInsertTimerInActiveList+0x68>
    1cfc:	4c 15       	cp	r20, r12
    1cfe:	5d 05       	cpc	r21, r13
    1d00:	6e 05       	cpc	r22, r14
    1d02:	7f 05       	cpc	r23, r15
    1d04:	68 f4       	brcc	.+26     	; 0x1d20 <prvInsertTimerInActiveList+0x82>
    1d06:	bf 01       	movw	r22, r30
    1d08:	6e 5f       	subi	r22, 0xFE	; 254
    1d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0c:	80 91 92 2c 	lds	r24, 0x2C92	; 0x802c92 <pxCurrentTimerList>
    1d10:	90 91 93 2c 	lds	r25, 0x2C93	; 0x802c93 <pxCurrentTimerList+0x1>
    1d14:	0e 94 a4 03 	call	0x748	; 0x748 <vListInsert>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <prvInsertTimerInActiveList+0x84>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <prvInsertTimerInActiveList+0x84>
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	ff 90       	pop	r15
    1d28:	ef 90       	pop	r14
    1d2a:	df 90       	pop	r13
    1d2c:	cf 90       	pop	r12
    1d2e:	08 95       	ret

00001d30 <prvCheckForValidListAndQueue>:
    1d30:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d34:	ff 93       	push	r31
    1d36:	f8 7f       	andi	r31, 0xF8	; 248
    1d38:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d3c:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <xTimerQueue>
    1d40:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <xTimerQueue+0x1>
    1d44:	89 2b       	or	r24, r25
    1d46:	e9 f4       	brne	.+58     	; 0x1d82 <prvCheckForValidListAndQueue+0x52>
    1d48:	8f e9       	ldi	r24, 0x9F	; 159
    1d4a:	9c e2       	ldi	r25, 0x2C	; 44
    1d4c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    1d50:	84 e9       	ldi	r24, 0x94	; 148
    1d52:	9c e2       	ldi	r25, 0x2C	; 44
    1d54:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vListInitialise>
    1d58:	8f e9       	ldi	r24, 0x9F	; 159
    1d5a:	9c e2       	ldi	r25, 0x2C	; 44
    1d5c:	80 93 92 2c 	sts	0x2C92, r24	; 0x802c92 <pxCurrentTimerList>
    1d60:	90 93 93 2c 	sts	0x2C93, r25	; 0x802c93 <pxCurrentTimerList+0x1>
    1d64:	84 e9       	ldi	r24, 0x94	; 148
    1d66:	9c e2       	ldi	r25, 0x2C	; 44
    1d68:	80 93 90 2c 	sts	0x2C90, r24	; 0x802c90 <pxOverflowTimerList>
    1d6c:	90 93 91 2c 	sts	0x2C91, r25	; 0x802c91 <pxOverflowTimerList+0x1>
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	69 e0       	ldi	r22, 0x09	; 9
    1d74:	85 e0       	ldi	r24, 0x05	; 5
    1d76:	0e 94 d1 06 	call	0xda2	; 0xda2 <xQueueGenericCreate>
    1d7a:	80 93 8e 2c 	sts	0x2C8E, r24	; 0x802c8e <xTimerQueue>
    1d7e:	90 93 8f 2c 	sts	0x2C8F, r25	; 0x802c8f <xTimerQueue+0x1>
    1d82:	ff 91       	pop	r31
    1d84:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d88:	08 95       	ret

00001d8a <xTimerCreateTimerTask>:
    1d8a:	ef 92       	push	r14
    1d8c:	ff 92       	push	r15
    1d8e:	0f 93       	push	r16
    1d90:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <prvCheckForValidListAndQueue>
    1d94:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <xTimerQueue>
    1d98:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <xTimerQueue+0x1>
    1d9c:	89 2b       	or	r24, r25
    1d9e:	91 f0       	breq	.+36     	; 0x1dc4 <xTimerCreateTimerTask+0x3a>
    1da0:	0f 2e       	mov	r0, r31
    1da2:	fc e8       	ldi	r31, 0x8C	; 140
    1da4:	ef 2e       	mov	r14, r31
    1da6:	fc e2       	ldi	r31, 0x2C	; 44
    1da8:	ff 2e       	mov	r15, r31
    1daa:	f0 2d       	mov	r31, r0
    1dac:	03 e0       	ldi	r16, 0x03	; 3
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	48 ec       	ldi	r20, 0xC8	; 200
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	65 e0       	ldi	r22, 0x05	; 5
    1db8:	70 e2       	ldi	r23, 0x20	; 32
    1dba:	88 ed       	ldi	r24, 0xD8	; 216
    1dbc:	9f e0       	ldi	r25, 0x0F	; 15
    1dbe:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <xTaskCreate>
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <xTimerCreateTimerTask+0x3c>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	0f 91       	pop	r16
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	08 95       	ret

00001dce <xTimerGenericCommand>:
    1dce:	8f 92       	push	r8
    1dd0:	9f 92       	push	r9
    1dd2:	af 92       	push	r10
    1dd4:	bf 92       	push	r11
    1dd6:	cf 92       	push	r12
    1dd8:	df 92       	push	r13
    1dda:	ef 92       	push	r14
    1ddc:	ff 92       	push	r15
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	29 97       	sbiw	r28, 0x09	; 9
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <xTimerQueue>
    1df4:	f0 91 8f 2c 	lds	r31, 0x2C8F	; 0x802c8f <xTimerQueue+0x1>
    1df8:	30 97       	sbiw	r30, 0x00	; 0
    1dfa:	89 f1       	breq	.+98     	; 0x1e5e <xTimerGenericCommand+0x90>
    1dfc:	69 83       	std	Y+1, r22	; 0x01
    1dfe:	2a 83       	std	Y+2, r18	; 0x02
    1e00:	3b 83       	std	Y+3, r19	; 0x03
    1e02:	4c 83       	std	Y+4, r20	; 0x04
    1e04:	5d 83       	std	Y+5, r21	; 0x05
    1e06:	8e 83       	std	Y+6, r24	; 0x06
    1e08:	9f 83       	std	Y+7, r25	; 0x07
    1e0a:	66 30       	cpi	r22, 0x06	; 6
    1e0c:	fc f4       	brge	.+62     	; 0x1e4c <xTimerGenericCommand+0x7e>
    1e0e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <xTaskGetSchedulerState>
    1e12:	82 30       	cpi	r24, 0x02	; 2
    1e14:	69 f4       	brne	.+26     	; 0x1e30 <xTimerGenericCommand+0x62>
    1e16:	00 e0       	ldi	r16, 0x00	; 0
    1e18:	a7 01       	movw	r20, r14
    1e1a:	96 01       	movw	r18, r12
    1e1c:	be 01       	movw	r22, r28
    1e1e:	6f 5f       	subi	r22, 0xFF	; 255
    1e20:	7f 4f       	sbci	r23, 0xFF	; 255
    1e22:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <xTimerQueue>
    1e26:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <xTimerQueue+0x1>
    1e2a:	0e 94 02 07 	call	0xe04	; 0xe04 <xQueueGenericSend>
    1e2e:	18 c0       	rjmp	.+48     	; 0x1e60 <xTimerGenericCommand+0x92>
    1e30:	00 e0       	ldi	r16, 0x00	; 0
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	a9 01       	movw	r20, r18
    1e38:	be 01       	movw	r22, r28
    1e3a:	6f 5f       	subi	r22, 0xFF	; 255
    1e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3e:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <xTimerQueue>
    1e42:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <xTimerQueue+0x1>
    1e46:	0e 94 02 07 	call	0xe04	; 0xe04 <xQueueGenericSend>
    1e4a:	0a c0       	rjmp	.+20     	; 0x1e60 <xTimerGenericCommand+0x92>
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	a8 01       	movw	r20, r16
    1e50:	be 01       	movw	r22, r28
    1e52:	6f 5f       	subi	r22, 0xFF	; 255
    1e54:	7f 4f       	sbci	r23, 0xFF	; 255
    1e56:	cf 01       	movw	r24, r30
    1e58:	0e 94 a8 07 	call	0xf50	; 0xf50 <xQueueGenericSendFromISR>
    1e5c:	01 c0       	rjmp	.+2      	; 0x1e60 <xTimerGenericCommand+0x92>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	29 96       	adiw	r28, 0x09	; 9
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	ff 90       	pop	r15
    1e70:	ef 90       	pop	r14
    1e72:	df 90       	pop	r13
    1e74:	cf 90       	pop	r12
    1e76:	bf 90       	pop	r11
    1e78:	af 90       	pop	r10
    1e7a:	9f 90       	pop	r9
    1e7c:	8f 90       	pop	r8
    1e7e:	08 95       	ret

00001e80 <prvSampleTimeNow>:
    1e80:	2f 92       	push	r2
    1e82:	3f 92       	push	r3
    1e84:	4f 92       	push	r4
    1e86:	5f 92       	push	r5
    1e88:	6f 92       	push	r6
    1e8a:	7f 92       	push	r7
    1e8c:	8f 92       	push	r8
    1e8e:	9f 92       	push	r9
    1e90:	af 92       	push	r10
    1e92:	bf 92       	push	r11
    1e94:	cf 92       	push	r12
    1e96:	df 92       	push	r13
    1e98:	ef 92       	push	r14
    1e9a:	ff 92       	push	r15
    1e9c:	0f 93       	push	r16
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	1c 01       	movw	r2, r24
    1ea6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <xTaskGetTickCount>
    1eaa:	2b 01       	movw	r4, r22
    1eac:	3c 01       	movw	r6, r24
    1eae:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <xLastTime.4745>
    1eb2:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <xLastTime.4745+0x1>
    1eb6:	a0 91 8a 2c 	lds	r26, 0x2C8A	; 0x802c8a <xLastTime.4745+0x2>
    1eba:	b0 91 8b 2c 	lds	r27, 0x2C8B	; 0x802c8b <xLastTime.4745+0x3>
    1ebe:	48 16       	cp	r4, r24
    1ec0:	59 06       	cpc	r5, r25
    1ec2:	6a 06       	cpc	r6, r26
    1ec4:	7b 06       	cpc	r7, r27
    1ec6:	08 f0       	brcs	.+2      	; 0x1eca <prvSampleTimeNow+0x4a>
    1ec8:	54 c0       	rjmp	.+168    	; 0x1f72 <prvSampleTimeNow+0xf2>
    1eca:	3c c0       	rjmp	.+120    	; 0x1f44 <prvSampleTimeNow+0xc4>
    1ecc:	07 80       	ldd	r0, Z+7	; 0x07
    1ece:	f0 85       	ldd	r31, Z+8	; 0x08
    1ed0:	e0 2d       	mov	r30, r0
    1ed2:	80 80       	ld	r8, Z
    1ed4:	91 80       	ldd	r9, Z+1	; 0x01
    1ed6:	a2 80       	ldd	r10, Z+2	; 0x02
    1ed8:	b3 80       	ldd	r11, Z+3	; 0x03
    1eda:	c0 85       	ldd	r28, Z+8	; 0x08
    1edc:	d1 85       	ldd	r29, Z+9	; 0x09
    1ede:	8e 01       	movw	r16, r28
    1ee0:	0e 5f       	subi	r16, 0xFE	; 254
    1ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee4:	c8 01       	movw	r24, r16
    1ee6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    1eea:	ed 89       	ldd	r30, Y+21	; 0x15
    1eec:	fe 89       	ldd	r31, Y+22	; 0x16
    1eee:	ce 01       	movw	r24, r28
    1ef0:	19 95       	eicall
    1ef2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	31 f5       	brne	.+76     	; 0x1f44 <prvSampleTimeNow+0xc4>
    1ef8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1efa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1efc:	a8 89       	ldd	r26, Y+16	; 0x10
    1efe:	b9 89       	ldd	r27, Y+17	; 0x11
    1f00:	88 0d       	add	r24, r8
    1f02:	99 1d       	adc	r25, r9
    1f04:	aa 1d       	adc	r26, r10
    1f06:	bb 1d       	adc	r27, r11
    1f08:	88 16       	cp	r8, r24
    1f0a:	99 06       	cpc	r9, r25
    1f0c:	aa 06       	cpc	r10, r26
    1f0e:	bb 06       	cpc	r11, r27
    1f10:	70 f4       	brcc	.+28     	; 0x1f2e <prvSampleTimeNow+0xae>
    1f12:	8a 83       	std	Y+2, r24	; 0x02
    1f14:	9b 83       	std	Y+3, r25	; 0x03
    1f16:	ac 83       	std	Y+4, r26	; 0x04
    1f18:	bd 83       	std	Y+5, r27	; 0x05
    1f1a:	ca 87       	std	Y+10, r28	; 0x0a
    1f1c:	db 87       	std	Y+11, r29	; 0x0b
    1f1e:	b8 01       	movw	r22, r16
    1f20:	80 91 92 2c 	lds	r24, 0x2C92	; 0x802c92 <pxCurrentTimerList>
    1f24:	90 91 93 2c 	lds	r25, 0x2C93	; 0x802c93 <pxCurrentTimerList+0x1>
    1f28:	0e 94 a4 03 	call	0x748	; 0x748 <vListInsert>
    1f2c:	0b c0       	rjmp	.+22     	; 0x1f44 <prvSampleTimeNow+0xc4>
    1f2e:	c1 2c       	mov	r12, r1
    1f30:	d1 2c       	mov	r13, r1
    1f32:	76 01       	movw	r14, r12
    1f34:	00 e0       	ldi	r16, 0x00	; 0
    1f36:	10 e0       	ldi	r17, 0x00	; 0
    1f38:	a5 01       	movw	r20, r10
    1f3a:	94 01       	movw	r18, r8
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	ce 01       	movw	r24, r28
    1f40:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <xTimerGenericCommand>
    1f44:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTimerList>
    1f48:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTimerList+0x1>
    1f4c:	80 81       	ld	r24, Z
    1f4e:	81 11       	cpse	r24, r1
    1f50:	bd cf       	rjmp	.-134    	; 0x1ecc <prvSampleTimeNow+0x4c>
    1f52:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <pxOverflowTimerList>
    1f56:	90 91 91 2c 	lds	r25, 0x2C91	; 0x802c91 <pxOverflowTimerList+0x1>
    1f5a:	80 93 92 2c 	sts	0x2C92, r24	; 0x802c92 <pxCurrentTimerList>
    1f5e:	90 93 93 2c 	sts	0x2C93, r25	; 0x802c93 <pxCurrentTimerList+0x1>
    1f62:	e0 93 90 2c 	sts	0x2C90, r30	; 0x802c90 <pxOverflowTimerList>
    1f66:	f0 93 91 2c 	sts	0x2C91, r31	; 0x802c91 <pxOverflowTimerList+0x1>
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	f1 01       	movw	r30, r2
    1f6e:	80 83       	st	Z, r24
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <prvSampleTimeNow+0xf6>
    1f72:	f1 01       	movw	r30, r2
    1f74:	10 82       	st	Z, r1
    1f76:	40 92 88 2c 	sts	0x2C88, r4	; 0x802c88 <xLastTime.4745>
    1f7a:	50 92 89 2c 	sts	0x2C89, r5	; 0x802c89 <xLastTime.4745+0x1>
    1f7e:	60 92 8a 2c 	sts	0x2C8A, r6	; 0x802c8a <xLastTime.4745+0x2>
    1f82:	70 92 8b 2c 	sts	0x2C8B, r7	; 0x802c8b <xLastTime.4745+0x3>
    1f86:	c3 01       	movw	r24, r6
    1f88:	b2 01       	movw	r22, r4
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	ff 90       	pop	r15
    1f94:	ef 90       	pop	r14
    1f96:	df 90       	pop	r13
    1f98:	cf 90       	pop	r12
    1f9a:	bf 90       	pop	r11
    1f9c:	af 90       	pop	r10
    1f9e:	9f 90       	pop	r9
    1fa0:	8f 90       	pop	r8
    1fa2:	7f 90       	pop	r7
    1fa4:	6f 90       	pop	r6
    1fa6:	5f 90       	pop	r5
    1fa8:	4f 90       	pop	r4
    1faa:	3f 90       	pop	r3
    1fac:	2f 90       	pop	r2
    1fae:	08 95       	ret

00001fb0 <prvTimerTask>:
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	2e 97       	sbiw	r28, 0x0e	; 14
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	1c 01       	movw	r2, r24
    1fc4:	a8 2e       	mov	r10, r24
    1fc6:	b3 2c       	mov	r11, r3
    1fc8:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTimerList>
    1fcc:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTimerList+0x1>
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 23       	and	r24, r24
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <prvTimerTask+0x28>
    1fd6:	03 c1       	rjmp	.+518    	; 0x21de <prvTimerTask+0x22e>
    1fd8:	07 80       	ldd	r0, Z+7	; 0x07
    1fda:	f0 85       	ldd	r31, Z+8	; 0x08
    1fdc:	e0 2d       	mov	r30, r0
    1fde:	40 80       	ld	r4, Z
    1fe0:	51 80       	ldd	r5, Z+1	; 0x01
    1fe2:	62 80       	ldd	r6, Z+2	; 0x02
    1fe4:	73 80       	ldd	r7, Z+3	; 0x03
    1fe6:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vTaskSuspendAll>
    1fea:	c1 01       	movw	r24, r2
    1fec:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <prvSampleTimeNow>
    1ff0:	6b 87       	std	Y+11, r22	; 0x0b
    1ff2:	7c 87       	std	Y+12, r23	; 0x0c
    1ff4:	8d 87       	std	Y+13, r24	; 0x0d
    1ff6:	9e 87       	std	Y+14, r25	; 0x0e
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	81 11       	cpse	r24, r1
    1ffc:	5e c0       	rjmp	.+188    	; 0x20ba <prvTimerTask+0x10a>
    1ffe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2000:	9c 85       	ldd	r25, Y+12	; 0x0c
    2002:	ad 85       	ldd	r26, Y+13	; 0x0d
    2004:	be 85       	ldd	r27, Y+14	; 0x0e
    2006:	84 15       	cp	r24, r4
    2008:	95 05       	cpc	r25, r5
    200a:	a6 05       	cpc	r26, r6
    200c:	b7 05       	cpc	r27, r7
    200e:	e8 f1       	brcs	.+122    	; 0x208a <prvTimerTask+0xda>
    2010:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
    2014:	e0 91 92 2c 	lds	r30, 0x2C92	; 0x802c92 <pxCurrentTimerList>
    2018:	f0 91 93 2c 	lds	r31, 0x2C93	; 0x802c93 <pxCurrentTimerList+0x1>
    201c:	07 80       	ldd	r0, Z+7	; 0x07
    201e:	f0 85       	ldd	r31, Z+8	; 0x08
    2020:	e0 2d       	mov	r30, r0
    2022:	80 84       	ldd	r8, Z+8	; 0x08
    2024:	91 84       	ldd	r9, Z+9	; 0x09
    2026:	c4 01       	movw	r24, r8
    2028:	02 96       	adiw	r24, 0x02	; 2
    202a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    202e:	d4 01       	movw	r26, r8
    2030:	52 96       	adiw	r26, 0x12	; 18
    2032:	8c 91       	ld	r24, X
    2034:	52 97       	sbiw	r26, 0x12	; 18
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	01 f5       	brne	.+64     	; 0x207a <prvTimerTask+0xca>
    203a:	1e 96       	adiw	r26, 0x0e	; 14
    203c:	4d 91       	ld	r20, X+
    203e:	5d 91       	ld	r21, X+
    2040:	6d 91       	ld	r22, X+
    2042:	7c 91       	ld	r23, X
    2044:	51 97       	sbiw	r26, 0x11	; 17
    2046:	44 0d       	add	r20, r4
    2048:	55 1d       	adc	r21, r5
    204a:	66 1d       	adc	r22, r6
    204c:	77 1d       	adc	r23, r7
    204e:	73 01       	movw	r14, r6
    2050:	62 01       	movw	r12, r4
    2052:	0b 85       	ldd	r16, Y+11	; 0x0b
    2054:	1c 85       	ldd	r17, Y+12	; 0x0c
    2056:	2d 85       	ldd	r18, Y+13	; 0x0d
    2058:	3e 85       	ldd	r19, Y+14	; 0x0e
    205a:	c4 01       	movw	r24, r8
    205c:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <prvInsertTimerInActiveList>
    2060:	88 23       	and	r24, r24
    2062:	59 f0       	breq	.+22     	; 0x207a <prvTimerTask+0xca>
    2064:	c1 2c       	mov	r12, r1
    2066:	d1 2c       	mov	r13, r1
    2068:	76 01       	movw	r14, r12
    206a:	00 e0       	ldi	r16, 0x00	; 0
    206c:	10 e0       	ldi	r17, 0x00	; 0
    206e:	a3 01       	movw	r20, r6
    2070:	92 01       	movw	r18, r4
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	c4 01       	movw	r24, r8
    2076:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <xTimerGenericCommand>
    207a:	d4 01       	movw	r26, r8
    207c:	55 96       	adiw	r26, 0x15	; 21
    207e:	ed 91       	ld	r30, X+
    2080:	fc 91       	ld	r31, X
    2082:	56 97       	sbiw	r26, 0x16	; 22
    2084:	c4 01       	movw	r24, r8
    2086:	19 95       	eicall
    2088:	9c c0       	rjmp	.+312    	; 0x21c2 <prvTimerTask+0x212>
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	b3 01       	movw	r22, r6
    208e:	a2 01       	movw	r20, r4
    2090:	8b 85       	ldd	r24, Y+11	; 0x0b
    2092:	9c 85       	ldd	r25, Y+12	; 0x0c
    2094:	ad 85       	ldd	r26, Y+13	; 0x0d
    2096:	be 85       	ldd	r27, Y+14	; 0x0e
    2098:	48 1b       	sub	r20, r24
    209a:	59 0b       	sbc	r21, r25
    209c:	6a 0b       	sbc	r22, r26
    209e:	7b 0b       	sbc	r23, r27
    20a0:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <xTimerQueue>
    20a4:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <xTimerQueue+0x1>
    20a8:	0e 94 9f 08 	call	0x113e	; 0x113e <vQueueWaitForMessageRestricted>
    20ac:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
    20b0:	81 11       	cpse	r24, r1
    20b2:	87 c0       	rjmp	.+270    	; 0x21c2 <prvTimerTask+0x212>
    20b4:	0e 94 cc 04 	call	0x998	; 0x998 <vPortYield>
    20b8:	84 c0       	rjmp	.+264    	; 0x21c2 <prvTimerTask+0x212>
    20ba:	0e 94 a6 0b 	call	0x174c	; 0x174c <xTaskResumeAll>
    20be:	81 c0       	rjmp	.+258    	; 0x21c2 <prvTimerTask+0x212>
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	88 23       	and	r24, r24
    20c4:	6c f4       	brge	.+26     	; 0x20e0 <prvTimerTask+0x130>
    20c6:	4e 81       	ldd	r20, Y+6	; 0x06
    20c8:	5f 81       	ldd	r21, Y+7	; 0x07
    20ca:	68 85       	ldd	r22, Y+8	; 0x08
    20cc:	79 85       	ldd	r23, Y+9	; 0x09
    20ce:	ea 81       	ldd	r30, Y+2	; 0x02
    20d0:	fb 81       	ldd	r31, Y+3	; 0x03
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	9d 81       	ldd	r25, Y+5	; 0x05
    20d6:	19 95       	eicall
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	88 23       	and	r24, r24
    20dc:	0c f4       	brge	.+2      	; 0x20e0 <prvTimerTask+0x130>
    20de:	71 c0       	rjmp	.+226    	; 0x21c2 <prvTimerTask+0x212>
    20e0:	8e 80       	ldd	r8, Y+6	; 0x06
    20e2:	9f 80       	ldd	r9, Y+7	; 0x07
    20e4:	d4 01       	movw	r26, r8
    20e6:	1c 96       	adiw	r26, 0x0c	; 12
    20e8:	8d 91       	ld	r24, X+
    20ea:	9c 91       	ld	r25, X
    20ec:	1d 97       	sbiw	r26, 0x0d	; 13
    20ee:	89 2b       	or	r24, r25
    20f0:	21 f0       	breq	.+8      	; 0x20fa <prvTimerTask+0x14a>
    20f2:	c4 01       	movw	r24, r8
    20f4:	02 96       	adiw	r24, 0x02	; 2
    20f6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <uxListRemove>
    20fa:	ce 01       	movw	r24, r28
    20fc:	0a 96       	adiw	r24, 0x0a	; 10
    20fe:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <prvSampleTimeNow>
    2102:	8b 01       	movw	r16, r22
    2104:	9c 01       	movw	r18, r24
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	08 2e       	mov	r0, r24
    210a:	00 0c       	add	r0, r0
    210c:	99 0b       	sbc	r25, r25
    210e:	aa 0b       	sbc	r26, r26
    2110:	bb 0b       	sbc	r27, r27
    2112:	8a 30       	cpi	r24, 0x0A	; 10
    2114:	91 05       	cpc	r25, r1
    2116:	08 f0       	brcs	.+2      	; 0x211a <prvTimerTask+0x16a>
    2118:	54 c0       	rjmp	.+168    	; 0x21c2 <prvTimerTask+0x212>
    211a:	fc 01       	movw	r30, r24
    211c:	88 27       	eor	r24, r24
    211e:	e2 50       	subi	r30, 0x02	; 2
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	8f 4f       	sbci	r24, 0xFF	; 255
    2124:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__tablejump2__>
    2128:	ca 80       	ldd	r12, Y+2	; 0x02
    212a:	db 80       	ldd	r13, Y+3	; 0x03
    212c:	ec 80       	ldd	r14, Y+4	; 0x04
    212e:	fd 80       	ldd	r15, Y+5	; 0x05
    2130:	f4 01       	movw	r30, r8
    2132:	46 85       	ldd	r20, Z+14	; 0x0e
    2134:	57 85       	ldd	r21, Z+15	; 0x0f
    2136:	60 89       	ldd	r22, Z+16	; 0x10
    2138:	71 89       	ldd	r23, Z+17	; 0x11
    213a:	4c 0d       	add	r20, r12
    213c:	5d 1d       	adc	r21, r13
    213e:	6e 1d       	adc	r22, r14
    2140:	7f 1d       	adc	r23, r15
    2142:	c4 01       	movw	r24, r8
    2144:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <prvInsertTimerInActiveList>
    2148:	88 23       	and	r24, r24
    214a:	d9 f1       	breq	.+118    	; 0x21c2 <prvTimerTask+0x212>
    214c:	d4 01       	movw	r26, r8
    214e:	55 96       	adiw	r26, 0x15	; 21
    2150:	ed 91       	ld	r30, X+
    2152:	fc 91       	ld	r31, X
    2154:	56 97       	sbiw	r26, 0x16	; 22
    2156:	c4 01       	movw	r24, r8
    2158:	19 95       	eicall
    215a:	f4 01       	movw	r30, r8
    215c:	82 89       	ldd	r24, Z+18	; 0x12
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	81 f5       	brne	.+96     	; 0x21c2 <prvTimerTask+0x212>
    2162:	4a 81       	ldd	r20, Y+2	; 0x02
    2164:	5b 81       	ldd	r21, Y+3	; 0x03
    2166:	6c 81       	ldd	r22, Y+4	; 0x04
    2168:	7d 81       	ldd	r23, Y+5	; 0x05
    216a:	86 85       	ldd	r24, Z+14	; 0x0e
    216c:	97 85       	ldd	r25, Z+15	; 0x0f
    216e:	a0 89       	ldd	r26, Z+16	; 0x10
    2170:	b1 89       	ldd	r27, Z+17	; 0x11
    2172:	9a 01       	movw	r18, r20
    2174:	ab 01       	movw	r20, r22
    2176:	28 0f       	add	r18, r24
    2178:	39 1f       	adc	r19, r25
    217a:	4a 1f       	adc	r20, r26
    217c:	5b 1f       	adc	r21, r27
    217e:	c1 2c       	mov	r12, r1
    2180:	d1 2c       	mov	r13, r1
    2182:	76 01       	movw	r14, r12
    2184:	00 e0       	ldi	r16, 0x00	; 0
    2186:	10 e0       	ldi	r17, 0x00	; 0
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	c4 01       	movw	r24, r8
    218c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <xTimerGenericCommand>
    2190:	18 c0       	rjmp	.+48     	; 0x21c2 <prvTimerTask+0x212>
    2192:	4a 81       	ldd	r20, Y+2	; 0x02
    2194:	5b 81       	ldd	r21, Y+3	; 0x03
    2196:	6c 81       	ldd	r22, Y+4	; 0x04
    2198:	7d 81       	ldd	r23, Y+5	; 0x05
    219a:	d4 01       	movw	r26, r8
    219c:	1e 96       	adiw	r26, 0x0e	; 14
    219e:	4d 93       	st	X+, r20
    21a0:	5d 93       	st	X+, r21
    21a2:	6d 93       	st	X+, r22
    21a4:	7c 93       	st	X, r23
    21a6:	51 97       	sbiw	r26, 0x11	; 17
    21a8:	40 0f       	add	r20, r16
    21aa:	51 1f       	adc	r21, r17
    21ac:	62 1f       	adc	r22, r18
    21ae:	73 1f       	adc	r23, r19
    21b0:	68 01       	movw	r12, r16
    21b2:	79 01       	movw	r14, r18
    21b4:	c4 01       	movw	r24, r8
    21b6:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <prvInsertTimerInActiveList>
    21ba:	03 c0       	rjmp	.+6      	; 0x21c2 <prvTimerTask+0x212>
    21bc:	c4 01       	movw	r24, r8
    21be:	0e 94 6d 03 	call	0x6da	; 0x6da <vPortFree>
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	a9 01       	movw	r20, r18
    21c8:	6a 2d       	mov	r22, r10
    21ca:	7b 2d       	mov	r23, r11
    21cc:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <xTimerQueue>
    21d0:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <xTimerQueue+0x1>
    21d4:	0e 94 ed 07 	call	0xfda	; 0xfda <xQueueReceive>
    21d8:	81 11       	cpse	r24, r1
    21da:	72 cf       	rjmp	.-284    	; 0x20c0 <prvTimerTask+0x110>
    21dc:	f5 ce       	rjmp	.-534    	; 0x1fc8 <prvTimerTask+0x18>
    21de:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vTaskSuspendAll>
    21e2:	c1 01       	movw	r24, r2
    21e4:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <prvSampleTimeNow>
    21e8:	6b 87       	std	Y+11, r22	; 0x0b
    21ea:	7c 87       	std	Y+12, r23	; 0x0c
    21ec:	8d 87       	std	Y+13, r24	; 0x0d
    21ee:	9e 87       	std	Y+14, r25	; 0x0e
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	81 11       	cpse	r24, r1
    21f4:	62 cf       	rjmp	.-316    	; 0x20ba <prvTimerTask+0x10a>
    21f6:	e0 91 90 2c 	lds	r30, 0x2C90	; 0x802c90 <pxOverflowTimerList>
    21fa:	f0 91 91 2c 	lds	r31, 0x2C91	; 0x802c91 <pxOverflowTimerList+0x1>
    21fe:	80 81       	ld	r24, Z
    2200:	21 e0       	ldi	r18, 0x01	; 1
    2202:	81 11       	cpse	r24, r1
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	41 2c       	mov	r4, r1
    2208:	51 2c       	mov	r5, r1
    220a:	32 01       	movw	r6, r4
    220c:	3f cf       	rjmp	.-386    	; 0x208c <prvTimerTask+0xdc>

0000220e <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	29 97       	sbiw	r28, 0x09	; 9
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    2220:	ee ef       	ldi	r30, 0xFE	; 254
    2222:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    2224:	8a 83       	std	Y+2, r24	; 0x02
    2226:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2228:	6c 83       	std	Y+4, r22	; 0x04
    222a:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    222c:	2e 83       	std	Y+6, r18	; 0x06
    222e:	3f 83       	std	Y+7, r19	; 0x07
    2230:	48 87       	std	Y+8, r20	; 0x08
    2232:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	a8 01       	movw	r20, r16
    2238:	be 01       	movw	r22, r28
    223a:	6f 5f       	subi	r22, 0xFF	; 255
    223c:	7f 4f       	sbci	r23, 0xFF	; 255
    223e:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <xTimerQueue>
    2242:	90 91 8f 2c 	lds	r25, 0x2C8F	; 0x802c8f <xTimerQueue+0x1>
    2246:	0e 94 a8 07 	call	0xf50	; 0xf50 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    224a:	29 96       	adiw	r28, 0x09	; 9
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	08 95       	ret

0000225a <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    225a:	e0 e5       	ldi	r30, 0x50	; 80
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	81 60       	ori	r24, 0x01	; 1
    2262:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    2264:	81 81       	ldd	r24, Z+1	; 0x01
    2266:	80 ff       	sbrs	r24, 0
    2268:	fd cf       	rjmp	.-6      	; 0x2264 <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    2270:	8e e1       	ldi	r24, 0x1E	; 30
    2272:	0e 94 69 01 	call	0x2d2	; 0x2d2 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    227e:	43 e0       	ldi	r20, 0x03	; 3
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	80 e4       	ldi	r24, 0x40	; 64
    2284:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    2288:	e0 e5       	ldi	r30, 0x50	; 80
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	88 60       	ori	r24, 0x08	; 8
    2290:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    2292:	81 81       	ldd	r24, Z+1	; 0x01
    2294:	83 ff       	sbrs	r24, 3
    2296:	fd cf       	rjmp	.-6      	; 0x2292 <vInitClock+0x38>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    2298:	64 e0       	ldi	r22, 0x04	; 4
    229a:	80 ec       	ldi	r24, 0xC0	; 192
    229c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    22a0:	e0 e5       	ldi	r30, 0x50	; 80
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	80 61       	ori	r24, 0x10	; 16
    22a8:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    22b2:	e0 e5       	ldi	r30, 0x50	; 80
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	81 81       	ldd	r24, Z+1	; 0x01
    22b8:	84 ff       	sbrs	r24, 4
    22ba:	fd cf       	rjmp	.-6      	; 0x22b6 <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    22bc:	84 e0       	ldi	r24, 0x04	; 4
    22be:	0e 94 79 01 	call	0x2f2	; 0x2f2 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    22c2:	87 e0       	ldi	r24, 0x07	; 7
    22c4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <CLKSYS_Disable>
    22c8:	08 95       	ret

000022ca <vDisplay>:
	return 0;
}

void vDisplay(void *pvParameters) {
	(void) pvParameters;
	PORTF.DIRSET = PIN0_bm; /*LED1*/
    22ca:	e0 ea       	ldi	r30, 0xA0	; 160
    22cc:	f6 e0       	ldi	r31, 0x06	; 6
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUT = 0x01;
    22d2:	84 83       	std	Z+4, r24	; 0x04
// 		vDisplayClear();
// 		vDisplayWriteStringAtPos(0,0,"Stack: %d", stack);
// 		vDisplayWriteStringAtPos(1,0,"Heap: %d", heap);
// 		vDisplayWriteStringAtPos(2,0,"TaskStack: %d", taskStack);
// 		vDisplayWriteStringAtPos(3,0,"FreeSpace: %d", stack+heap);
		PORTF.OUTTGL = 0x01;				
    22d4:	00 ea       	ldi	r16, 0xA0	; 160
    22d6:	16 e0       	ldi	r17, 0x06	; 6
    22d8:	c1 e0       	ldi	r28, 0x01	; 1
    22da:	f8 01       	movw	r30, r16
    22dc:	c7 83       	std	Z+7, r28	; 0x07
		vTaskDelay(500 / portTICK_RATE_MS);
    22de:	64 ef       	ldi	r22, 0xF4	; 244
    22e0:	71 e0       	ldi	r23, 0x01	; 1
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	0e 94 28 0c 	call	0x1850	; 0x1850 <vTaskDelay>
    22ea:	f7 cf       	rjmp	.-18     	; 0x22da <vDisplay+0x10>

000022ec <vApplicationIdleHook>:
void vDisplay(void *pvParameters);

TaskHandle_t DisplayTask;

void vApplicationIdleHook( void )
{	
    22ec:	08 95       	ret

000022ee <main>:
	
}

int main(void)
{
    22ee:	ef 92       	push	r14
    22f0:	ff 92       	push	r15
    22f2:	0f 93       	push	r16
   // resetReason_t reason = getResetReason();

	vInitClock();
    22f4:	0e 94 2d 11 	call	0x225a	; 0x225a <vInitClock>
	vInitDisplay();
    22f8:	0e 94 ca 12 	call	0x2594	; 0x2594 <vInitDisplay>
	
	xTaskCreate( vDisplay, (const char *) "DisplayTask", configMINIMAL_STACK_SIZE, NULL, 1, &DisplayTask);
    22fc:	0f 2e       	mov	r0, r31
    22fe:	f3 ed       	ldi	r31, 0xD3	; 211
    2300:	ef 2e       	mov	r14, r31
    2302:	fc e2       	ldi	r31, 0x2C	; 44
    2304:	ff 2e       	mov	r15, r31
    2306:	f0 2d       	mov	r31, r0
    2308:	01 e0       	ldi	r16, 0x01	; 1
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	48 ec       	ldi	r20, 0xC8	; 200
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	6d e0       	ldi	r22, 0x0D	; 13
    2314:	70 e2       	ldi	r23, 0x20	; 32
    2316:	85 e6       	ldi	r24, 0x65	; 101
    2318:	91 e1       	ldi	r25, 0x11	; 17
    231a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <xTaskCreate>

	vDisplayClear();
    231e:	0e 94 46 14 	call	0x288c	; 0x288c <vDisplayClear>
	vDisplayWriteStringAtPos(0,0,"PI Calculator");
    2322:	89 e1       	ldi	r24, 0x19	; 25
    2324:	90 e2       	ldi	r25, 0x20	; 32
    2326:	9f 93       	push	r25
    2328:	8f 93       	push	r24
    232a:	1f 92       	push	r1
    232c:	1f 92       	push	r1
    232e:	1f 92       	push	r1
    2330:	1f 92       	push	r1
    2332:	0e 94 51 14 	call	0x28a2	; 0x28a2 <vDisplayWriteStringAtPos>
	vDisplayWriteStringAtPos(1,0,"Philipp Eppler");
    2336:	87 e2       	ldi	r24, 0x27	; 39
    2338:	90 e2       	ldi	r25, 0x20	; 32
    233a:	9f 93       	push	r25
    233c:	8f 93       	push	r24
    233e:	1f 92       	push	r1
    2340:	1f 92       	push	r1
    2342:	1f 92       	push	r1
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	8f 93       	push	r24
    2348:	0e 94 51 14 	call	0x28a2	; 0x28a2 <vDisplayWriteStringAtPos>
	vDisplayWriteStringAtPos(2,0,"Pi: 3.1415xxx");
    234c:	86 e3       	ldi	r24, 0x36	; 54
    234e:	90 e2       	ldi	r25, 0x20	; 32
    2350:	9f 93       	push	r25
    2352:	8f 93       	push	r24
    2354:	1f 92       	push	r1
    2356:	1f 92       	push	r1
    2358:	1f 92       	push	r1
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	8f 93       	push	r24
    235e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <vDisplayWriteStringAtPos>
	vDisplayWriteStringAtPos(3,0,"Zeit: xxxxxxms");
    2362:	84 e4       	ldi	r24, 0x44	; 68
    2364:	90 e2       	ldi	r25, 0x20	; 32
    2366:	9f 93       	push	r25
    2368:	8f 93       	push	r24
    236a:	1f 92       	push	r1
    236c:	1f 92       	push	r1
    236e:	1f 92       	push	r1
    2370:	83 e0       	ldi	r24, 0x03	; 3
    2372:	8f 93       	push	r24
    2374:	0e 94 51 14 	call	0x28a2	; 0x28a2 <vDisplayWriteStringAtPos>
	vTaskStartScheduler();
    2378:	0e 94 80 0a 	call	0x1500	; 0x1500 <vTaskStartScheduler>
    237c:	8d b7       	in	r24, 0x3d	; 61
    237e:	9e b7       	in	r25, 0x3e	; 62
    2380:	48 96       	adiw	r24, 0x18	; 24
    2382:	8d bf       	out	0x3d, r24	; 61
    2384:	9e bf       	out	0x3e, r25	; 62
	return 0;
}
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0f 91       	pop	r16
    238c:	ff 90       	pop	r15
    238e:	ef 90       	pop	r14
    2390:	08 95       	ret

00002392 <__vector_108>:
 void displayHome() {
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
    2392:	1f 92       	push	r1
    2394:	0f 92       	push	r0
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	0f 92       	push	r0
    239a:	11 24       	eor	r1, r1
    239c:	0b b6       	in	r0, 0x3b	; 59
    239e:	0f 92       	push	r0
    23a0:	2f 93       	push	r18
    23a2:	3f 93       	push	r19
    23a4:	4f 93       	push	r20
    23a6:	5f 93       	push	r21
    23a8:	6f 93       	push	r22
    23aa:	7f 93       	push	r23
    23ac:	8f 93       	push	r24
    23ae:	9f 93       	push	r25
    23b0:	af 93       	push	r26
    23b2:	bf 93       	push	r27
    23b4:	ef 93       	push	r30
    23b6:	ff 93       	push	r31
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	1f 92       	push	r1
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	19 82       	std	Y+1, r1	; 0x01
    23c4:	9e 01       	movw	r18, r28
    23c6:	2f 5f       	subi	r18, 0xFF	; 255
    23c8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	70 e0       	ldi	r23, 0x00	; 0
    23d2:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <egDisplayTiming>
    23d6:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <egDisplayTiming+0x1>
    23da:	0e 94 3a 03 	call	0x674	; 0x674 <xEventGroupSetBitsFromISR>
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	9b e0       	ldi	r25, 0x0B	; 11
    23e4:	0e 94 8e 01 	call	0x31c	; 0x31c <TC0_ConfigClockSource>
    23e8:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x700b06>
    23ec:	0f 90       	pop	r0
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	ff 91       	pop	r31
    23f4:	ef 91       	pop	r30
    23f6:	bf 91       	pop	r27
    23f8:	af 91       	pop	r26
    23fa:	9f 91       	pop	r25
    23fc:	8f 91       	pop	r24
    23fe:	7f 91       	pop	r23
    2400:	6f 91       	pop	r22
    2402:	5f 91       	pop	r21
    2404:	4f 91       	pop	r20
    2406:	3f 91       	pop	r19
    2408:	2f 91       	pop	r18
    240a:	0f 90       	pop	r0
    240c:	0b be       	out	0x3b, r0	; 59
    240e:	0f 90       	pop	r0
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	0f 90       	pop	r0
    2414:	1f 90       	pop	r1
    2416:	18 95       	reti

00002418 <delayUS>:
    2418:	cf 92       	push	r12
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	6b 01       	movw	r12, r22
    2424:	7c 01       	movw	r14, r24
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	c8 16       	cp	r12, r24
    242a:	d1 04       	cpc	r13, r1
    242c:	e1 04       	cpc	r14, r1
    242e:	f1 04       	cpc	r15, r1
    2430:	08 f4       	brcc	.+2      	; 0x2434 <delayUS+0x1c>
    2432:	4e c0       	rjmp	.+156    	; 0x24d0 <delayUS+0xb8>
    2434:	e0 e0       	ldi	r30, 0x00	; 0
    2436:	fb e0       	ldi	r31, 0x0B	; 11
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	86 83       	std	Z+6, r24	; 0x06
    243c:	10 a2       	std	Z+32, r1	; 0x20
    243e:	11 a2       	std	Z+33, r1	; 0x21
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	9b e0       	ldi	r25, 0x0B	; 11
    2446:	0e 94 94 01 	call	0x328	; 0x328 <TC0_ConfigWGM>
    244a:	8e ef       	ldi	r24, 0xFE	; 254
    244c:	c8 16       	cp	r12, r24
    244e:	8f ef       	ldi	r24, 0xFF	; 255
    2450:	d8 06       	cpc	r13, r24
    2452:	e1 04       	cpc	r14, r1
    2454:	f1 04       	cpc	r15, r1
    2456:	70 f4       	brcc	.+28     	; 0x2474 <delayUS+0x5c>
    2458:	f6 94       	lsr	r15
    245a:	e7 94       	ror	r14
    245c:	d7 94       	ror	r13
    245e:	c7 94       	ror	r12
    2460:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    2464:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    2468:	65 e0       	ldi	r22, 0x05	; 5
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	9b e0       	ldi	r25, 0x0B	; 11
    246e:	0e 94 8e 01 	call	0x31c	; 0x31c <TC0_ConfigClockSource>
    2472:	19 c0       	rjmp	.+50     	; 0x24a6 <delayUS+0x8e>
    2474:	80 e4       	ldi	r24, 0x40	; 64
    2476:	c8 16       	cp	r12, r24
    2478:	82 e4       	ldi	r24, 0x42	; 66
    247a:	d8 06       	cpc	r13, r24
    247c:	8f e0       	ldi	r24, 0x0F	; 15
    247e:	e8 06       	cpc	r14, r24
    2480:	f1 04       	cpc	r15, r1
    2482:	88 f4       	brcc	.+34     	; 0x24a6 <delayUS+0x8e>
    2484:	68 94       	set
    2486:	14 f8       	bld	r1, 4
    2488:	f6 94       	lsr	r15
    248a:	e7 94       	ror	r14
    248c:	d7 94       	ror	r13
    248e:	c7 94       	ror	r12
    2490:	16 94       	lsr	r1
    2492:	d1 f7       	brne	.-12     	; 0x2488 <delayUS+0x70>
    2494:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    2498:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    249c:	67 e0       	ldi	r22, 0x07	; 7
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	9b e0       	ldi	r25, 0x0B	; 11
    24a2:	0e 94 8e 01 	call	0x31c	; 0x31c <TC0_ConfigClockSource>
    24a6:	0f 2e       	mov	r0, r31
    24a8:	f4 ef       	ldi	r31, 0xF4	; 244
    24aa:	cf 2e       	mov	r12, r31
    24ac:	dd 24       	eor	r13, r13
    24ae:	d3 94       	inc	r13
    24b0:	e1 2c       	mov	r14, r1
    24b2:	f1 2c       	mov	r15, r1
    24b4:	f0 2d       	mov	r31, r0
    24b6:	00 e0       	ldi	r16, 0x00	; 0
    24b8:	21 e0       	ldi	r18, 0x01	; 1
    24ba:	41 e0       	ldi	r20, 0x01	; 1
    24bc:	50 e0       	ldi	r21, 0x00	; 0
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	70 e0       	ldi	r23, 0x00	; 0
    24c2:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <egDisplayTiming>
    24c6:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <egDisplayTiming+0x1>
    24ca:	0e 94 bf 01 	call	0x37e	; 0x37e <xEventGroupWaitBits>
    24ce:	11 c0       	rjmp	.+34     	; 0x24f2 <delayUS+0xda>
    24d0:	e0 e0       	ldi	r30, 0x00	; 0
    24d2:	fb e0       	ldi	r31, 0x0B	; 11
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	86 83       	std	Z+6, r24	; 0x06
    24d8:	10 a2       	std	Z+32, r1	; 0x20
    24da:	11 a2       	std	Z+33, r1	; 0x21
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	9b e0       	ldi	r25, 0x0B	; 11
    24e2:	0e 94 94 01 	call	0x328	; 0x328 <TC0_ConfigWGM>
    24e6:	c1 2c       	mov	r12, r1
    24e8:	d1 2c       	mov	r13, r1
    24ea:	76 01       	movw	r14, r12
    24ec:	68 94       	set
    24ee:	c1 f8       	bld	r12, 1
    24f0:	b3 cf       	rjmp	.-154    	; 0x2458 <delayUS+0x40>
    24f2:	0f 91       	pop	r16
    24f4:	ff 90       	pop	r15
    24f6:	ef 90       	pop	r14
    24f8:	df 90       	pop	r13
    24fa:	cf 90       	pop	r12
    24fc:	08 95       	ret

000024fe <setPort>:
    24fe:	82 95       	swap	r24
    2500:	80 7f       	andi	r24, 0xF0	; 240
    2502:	e0 e0       	ldi	r30, 0x00	; 0
    2504:	f6 e0       	ldi	r31, 0x06	; 6
    2506:	94 81       	ldd	r25, Z+4	; 0x04
    2508:	28 2f       	mov	r18, r24
    250a:	2f 60       	ori	r18, 0x0F	; 15
    250c:	92 23       	and	r25, r18
    250e:	94 83       	std	Z+4, r25	; 0x04
    2510:	94 81       	ldd	r25, Z+4	; 0x04
    2512:	89 2b       	or	r24, r25
    2514:	84 83       	std	Z+4, r24	; 0x04
    2516:	08 95       	ret

00002518 <Nybble>:
    2518:	1f 93       	push	r17
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	c0 e6       	ldi	r28, 0x60	; 96
    2520:	d6 e0       	ldi	r29, 0x06	; 6
    2522:	14 e0       	ldi	r17, 0x04	; 4
    2524:	1d 83       	std	Y+5, r17	; 0x05
    2526:	61 e0       	ldi	r22, 0x01	; 1
    2528:	70 e0       	ldi	r23, 0x00	; 0
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	0e 94 0c 12 	call	0x2418	; 0x2418 <delayUS>
    2532:	1e 83       	std	Y+6, r17	; 0x06
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	1f 91       	pop	r17
    253a:	08 95       	ret

0000253c <command>:
    253c:	cf 93       	push	r28
    253e:	c8 2f       	mov	r28, r24
    2540:	82 95       	swap	r24
    2542:	8f 70       	andi	r24, 0x0F	; 15
    2544:	0e 94 7f 12 	call	0x24fe	; 0x24fe <setPort>
    2548:	e0 e6       	ldi	r30, 0x60	; 96
    254a:	f6 e0       	ldi	r31, 0x06	; 6
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	86 83       	std	Z+6, r24	; 0x06
    2550:	82 e0       	ldi	r24, 0x02	; 2
    2552:	86 83       	std	Z+6, r24	; 0x06
    2554:	0e 94 8c 12 	call	0x2518	; 0x2518 <Nybble>
    2558:	8c 2f       	mov	r24, r28
    255a:	8f 70       	andi	r24, 0x0F	; 15
    255c:	0e 94 7f 12 	call	0x24fe	; 0x24fe <setPort>
    2560:	0e 94 8c 12 	call	0x2518	; 0x2518 <Nybble>
    2564:	cf 91       	pop	r28
    2566:	08 95       	ret

00002568 <write>:
    2568:	cf 93       	push	r28
    256a:	c8 2f       	mov	r28, r24
    256c:	82 95       	swap	r24
    256e:	8f 70       	andi	r24, 0x0F	; 15
    2570:	0e 94 7f 12 	call	0x24fe	; 0x24fe <setPort>
    2574:	e0 e6       	ldi	r30, 0x60	; 96
    2576:	f6 e0       	ldi	r31, 0x06	; 6
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	85 83       	std	Z+5, r24	; 0x05
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	86 83       	std	Z+6, r24	; 0x06
    2580:	0e 94 8c 12 	call	0x2518	; 0x2518 <Nybble>
    2584:	8c 2f       	mov	r24, r28
    2586:	8f 70       	andi	r24, 0x0F	; 15
    2588:	0e 94 7f 12 	call	0x24fe	; 0x24fe <setPort>
    258c:	0e 94 8c 12 	call	0x2518	; 0x2518 <Nybble>
    2590:	cf 91       	pop	r28
    2592:	08 95       	ret

00002594 <vInitDisplay>:
 }
 
 void vInitDisplay() {
    2594:	ef 92       	push	r14
    2596:	ff 92       	push	r15
    2598:	0f 93       	push	r16
	PORTA.DIRSET = PIN4_bm;
    259a:	e0 e0       	ldi	r30, 0x00	; 0
    259c:	f6 e0       	ldi	r31, 0x06	; 6
    259e:	80 e1       	ldi	r24, 0x10	; 16
    25a0:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN5_bm;
    25a2:	80 e2       	ldi	r24, 0x20	; 32
    25a4:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN6_bm;
    25a6:	80 e4       	ldi	r24, 0x40	; 64
    25a8:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN7_bm;
    25aa:	80 e8       	ldi	r24, 0x80	; 128
    25ac:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN0_bm;
    25ae:	a0 e6       	ldi	r26, 0x60	; 96
    25b0:	b6 e0       	ldi	r27, 0x06	; 6
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	11 96       	adiw	r26, 0x01	; 1
    25b6:	8c 93       	st	X, r24
    25b8:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN1_bm;
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	11 96       	adiw	r26, 0x01	; 1
    25be:	8c 93       	st	X, r24
    25c0:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN2_bm;
    25c2:	84 e0       	ldi	r24, 0x04	; 4
    25c4:	11 96       	adiw	r26, 0x01	; 1
    25c6:	8c 93       	st	X, r24
    25c8:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.OUT &= 0x0F;
    25ca:	84 81       	ldd	r24, Z+4	; 0x04
    25cc:	8f 70       	andi	r24, 0x0F	; 15
    25ce:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= 0xF8;
    25d0:	14 96       	adiw	r26, 0x04	; 4
    25d2:	8c 91       	ld	r24, X
    25d4:	14 97       	sbiw	r26, 0x04	; 4
    25d6:	88 7f       	andi	r24, 0xF8	; 248
    25d8:	14 96       	adiw	r26, 0x04	; 4
    25da:	8c 93       	st	X, r24

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	66 e1       	ldi	r22, 0x16	; 22
    25e0:	88 e0       	ldi	r24, 0x08	; 8
    25e2:	0e 94 d1 06 	call	0xda2	; 0xda2 <xQueueGenericCreate>
    25e6:	80 93 d5 2c 	sts	0x2CD5, r24	; 0x802cd5 <displayLineQueue>
    25ea:	90 93 d6 2c 	sts	0x2CD6, r25	; 0x802cd6 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    25ee:	0e 94 aa 01 	call	0x354	; 0x354 <xEventGroupCreate>
    25f2:	80 93 d7 2c 	sts	0x2CD7, r24	; 0x802cd7 <egDisplayTiming>
    25f6:	90 93 d8 2c 	sts	0x2CD8, r25	; 0x802cd8 <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    25fa:	e1 2c       	mov	r14, r1
    25fc:	f1 2c       	mov	r15, r1
    25fe:	01 e0       	ldi	r16, 0x01	; 1
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4e e5       	ldi	r20, 0x5E	; 94
    2606:	51 e0       	ldi	r21, 0x01	; 1
    2608:	63 e5       	ldi	r22, 0x53	; 83
    260a:	70 e2       	ldi	r23, 0x20	; 32
    260c:	88 e6       	ldi	r24, 0x68	; 104
    260e:	93 e1       	ldi	r25, 0x13	; 19
    2610:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <xTaskCreate>
 }
    2614:	0f 91       	pop	r16
    2616:	ff 90       	pop	r15
    2618:	ef 90       	pop	r14
    261a:	08 95       	ret

0000261c <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
	 switch(line) {
    261c:	81 30       	cpi	r24, 0x01	; 1
    261e:	91 05       	cpc	r25, r1
    2620:	79 f0       	breq	.+30     	; 0x2640 <_displaySetPos+0x24>
    2622:	1c f4       	brge	.+6      	; 0x262a <_displaySetPos+0xe>
    2624:	89 2b       	or	r24, r25
    2626:	39 f0       	breq	.+14     	; 0x2636 <_displaySetPos+0x1a>
    2628:	19 c0       	rjmp	.+50     	; 0x265c <_displaySetPos+0x40>
    262a:	82 30       	cpi	r24, 0x02	; 2
    262c:	91 05       	cpc	r25, r1
    262e:	69 f0       	breq	.+26     	; 0x264a <_displaySetPos+0x2e>
    2630:	03 97       	sbiw	r24, 0x03	; 3
    2632:	81 f0       	breq	.+32     	; 0x2654 <_displaySetPos+0x38>
    2634:	13 c0       	rjmp	.+38     	; 0x265c <_displaySetPos+0x40>
		 case 0:
		 command(0x80 + 0x00 + pos);
    2636:	80 e8       	ldi	r24, 0x80	; 128
    2638:	86 0f       	add	r24, r22
    263a:	0e 94 9e 12 	call	0x253c	; 0x253c <command>
		 break;
    263e:	0e c0       	rjmp	.+28     	; 0x265c <_displaySetPos+0x40>
		 case 1:
		 command(0x80 + 0x40 + pos);
    2640:	80 ec       	ldi	r24, 0xC0	; 192
    2642:	86 0f       	add	r24, r22
    2644:	0e 94 9e 12 	call	0x253c	; 0x253c <command>
		 break;
    2648:	09 c0       	rjmp	.+18     	; 0x265c <_displaySetPos+0x40>
		 case 2:
		 command(0x80 + 0x14 + pos);
    264a:	84 e9       	ldi	r24, 0x94	; 148
    264c:	86 0f       	add	r24, r22
    264e:	0e 94 9e 12 	call	0x253c	; 0x253c <command>
		 break;
    2652:	04 c0       	rjmp	.+8      	; 0x265c <_displaySetPos+0x40>
		 case 3:
		 command(0x80 + 0x54 + pos);
    2654:	84 ed       	ldi	r24, 0xD4	; 212
    2656:	86 0f       	add	r24, r22
    2658:	0e 94 9e 12 	call	0x253c	; 0x253c <command>
		 break;
	 }
	 delayUS(39);
    265c:	67 e2       	ldi	r22, 0x27	; 39
    265e:	70 e0       	ldi	r23, 0x00	; 0
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	0e 94 0c 12 	call	0x2418	; 0x2418 <delayUS>
    2668:	08 95       	ret

0000266a <_displayWriteChar>:
 }

 void _displayWriteChar(char c) {
	 write(c);
    266a:	0e 94 b4 12 	call	0x2568	; 0x2568 <write>
	 delayUS(43);
    266e:	6b e2       	ldi	r22, 0x2B	; 43
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 0c 12 	call	0x2418	; 0x2418 <delayUS>
    267a:	08 95       	ret

0000267c <_displayWriteString>:
 }
 
 void _displayWriteString(char* s) {
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	fc 01       	movw	r30, r24
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
    2686:	80 81       	ld	r24, Z
    2688:	81 11       	cpse	r24, r1
    268a:	0a c0       	rjmp	.+20     	; 0x26a0 <_displayWriteString+0x24>
    268c:	11 c0       	rjmp	.+34     	; 0x26b0 <_displayWriteString+0x34>
    268e:	89 91       	ld	r24, Y+
    2690:	88 23       	and	r24, r24
    2692:	71 f0       	breq	.+28     	; 0x26b0 <_displayWriteString+0x34>
			 break;
		 }
		 _displayWriteChar(s[i]);
    2694:	0e 94 35 13 	call	0x266a	; 0x266a <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    2698:	0c 17       	cp	r16, r28
    269a:	1d 07       	cpc	r17, r29
    269c:	c1 f7       	brne	.-16     	; 0x268e <_displayWriteString+0x12>
    269e:	08 c0       	rjmp	.+16     	; 0x26b0 <_displayWriteString+0x34>
    26a0:	8f 01       	movw	r16, r30
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
    26a2:	0e 94 35 13 	call	0x266a	; 0x266a <_displayWriteChar>
    26a6:	e8 01       	movw	r28, r16
    26a8:	21 96       	adiw	r28, 0x01	; 1
    26aa:	0c 5e       	subi	r16, 0xEC	; 236
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	ef cf       	rjmp	.-34     	; 0x268e <_displayWriteString+0x12>
	 }
 }
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	1f 91       	pop	r17
    26b6:	0f 91       	pop	r16
    26b8:	08 95       	ret

000026ba <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	ea 01       	movw	r28, r20
	 _displaySetPos(line, pos);
    26c0:	0e 94 0e 13 	call	0x261c	; 0x261c <_displaySetPos>
	 _displayWriteString(s);
    26c4:	ce 01       	movw	r24, r28
    26c6:	0e 94 3e 13 	call	0x267c	; 0x267c <_displayWriteString>
 }
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	c6 56       	subi	r28, 0x66	; 102
    26da:	d1 09       	sbc	r29, r1
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	5e 01       	movw	r10, r28
    26e2:	41 e5       	ldi	r20, 0x51	; 81
    26e4:	a4 0e       	add	r10, r20
    26e6:	b1 1c       	adc	r11, r1
    26e8:	fe 01       	movw	r30, r28
    26ea:	31 96       	adiw	r30, 0x01	; 1
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
			displayLines[i][j] = 0x20;
    26ec:	20 e2       	ldi	r18, 0x20	; 32
    26ee:	08 c0       	rjmp	.+16     	; 0x2700 <vDisplayUpdateTask+0x30>
    26f0:	21 93       	st	Z+, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    26f2:	e8 17       	cp	r30, r24
    26f4:	f9 07       	cpc	r31, r25
    26f6:	e1 f7       	brne	.-8      	; 0x26f0 <vDisplayUpdateTask+0x20>
    26f8:	fc 01       	movw	r30, r24

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    26fa:	a8 16       	cp	r10, r24
    26fc:	b9 06       	cpc	r11, r25
    26fe:	19 f0       	breq	.+6      	; 0x2706 <vDisplayUpdateTask+0x36>
    2700:	cf 01       	movw	r24, r30
    2702:	44 96       	adiw	r24, 0x14	; 20
    2704:	f5 cf       	rjmp	.-22     	; 0x26f0 <vDisplayUpdateTask+0x20>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    2706:	60 e4       	ldi	r22, 0x40	; 64
    2708:	7c e9       	ldi	r23, 0x9C	; 156
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 0c 12 	call	0x2418	; 0x2418 <delayUS>
	 setPort(0x03);
    2712:	83 e0       	ldi	r24, 0x03	; 3
    2714:	0e 94 7f 12 	call	0x24fe	; 0x24fe <setPort>
	 delayUS(5000);
    2718:	68 e8       	ldi	r22, 0x88	; 136
    271a:	73 e1       	ldi	r23, 0x13	; 19
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	0e 94 0c 12 	call	0x2418	; 0x2418 <delayUS>
	 Nybble();
    2724:	0e 94 8c 12 	call	0x2518	; 0x2518 <Nybble>
	 delayUS(160);
    2728:	60 ea       	ldi	r22, 0xA0	; 160
    272a:	70 e0       	ldi	r23, 0x00	; 0
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 0c 12 	call	0x2418	; 0x2418 <delayUS>
	 Nybble();
    2734:	0e 94 8c 12 	call	0x2518	; 0x2518 <Nybble>
	 delayUS(160);
    2738:	60 ea       	ldi	r22, 0xA0	; 160
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 0c 12 	call	0x2418	; 0x2418 <delayUS>
	 Nybble();
    2744:	0e 94 8c 12 	call	0x2518	; 0x2518 <Nybble>
	 delayUS(160);
    2748:	60 ea       	ldi	r22, 0xA0	; 160
    274a:	70 e0       	ldi	r23, 0x00	; 0
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	0e 94 0c 12 	call	0x2418	; 0x2418 <delayUS>
	 setPort(0x02);
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	0e 94 7f 12 	call	0x24fe	; 0x24fe <setPort>
	 Nybble();
    275a:	0e 94 8c 12 	call	0x2518	; 0x2518 <Nybble>
	 command(0x28);
    275e:	88 e2       	ldi	r24, 0x28	; 40
    2760:	0e 94 9e 12 	call	0x253c	; 0x253c <command>
	 command(0x10);
    2764:	80 e1       	ldi	r24, 0x10	; 16
    2766:	0e 94 9e 12 	call	0x253c	; 0x253c <command>
	 command(0x0C); //Cursor and Blinking off
    276a:	8c e0       	ldi	r24, 0x0C	; 12
    276c:	0e 94 9e 12 	call	0x253c	; 0x253c <command>
	 command(0x06);
    2770:	86 e0       	ldi	r24, 0x06	; 6
    2772:	0e 94 9e 12 	call	0x253c	; 0x253c <command>
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    2776:	10 e2       	ldi	r17, 0x20	; 32
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    2778:	6e 01       	movw	r12, r28
    277a:	51 e5       	ldi	r21, 0x51	; 81
    277c:	c5 0e       	add	r12, r21
    277e:	d1 1c       	adc	r13, r1
    2780:	0f 2e       	mov	r0, r31
    2782:	f4 e1       	ldi	r31, 0x14	; 20
    2784:	4f 2e       	mov	r4, r31
    2786:	f0 2d       	mov	r31, r0
    2788:	0f 2e       	mov	r0, r31
    278a:	f6 e1       	ldi	r31, 0x16	; 22
    278c:	8f 2e       	mov	r8, r31
    278e:	91 2c       	mov	r9, r1
    2790:	f0 2d       	mov	r31, r0
    2792:	5c 2c       	mov	r5, r12
    2794:	0d 2d       	mov	r16, r13
	 command(0x10);
	 command(0x0C); //Cursor and Blinking off
	 command(0x06);
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    2796:	68 ec       	ldi	r22, 0xC8	; 200
    2798:	70 e0       	ldi	r23, 0x00	; 0
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 28 0c 	call	0x1850	; 0x1850 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    27a2:	40 e0       	ldi	r20, 0x00	; 0
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	ba 01       	movw	r22, r20
    27a8:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <egDisplayTiming>
    27ac:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <egDisplayTiming+0x1>
    27b0:	0e 94 84 02 	call	0x508	; 0x508 <xEventGroupClearBits>
    27b4:	67 2b       	or	r22, r23
    27b6:	68 2b       	or	r22, r24
    27b8:	69 2b       	or	r22, r25
    27ba:	09 f4       	brne	.+2      	; 0x27be <vDisplayUpdateTask+0xee>
    27bc:	49 c0       	rjmp	.+146    	; 0x2850 <vDisplayUpdateTask+0x180>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    27be:	42 e0       	ldi	r20, 0x02	; 2
    27c0:	50 e0       	ldi	r21, 0x00	; 0
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <egDisplayTiming>
    27ca:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <egDisplayTiming+0x1>
    27ce:	0e 94 84 02 	call	0x508	; 0x508 <xEventGroupClearBits>
    27d2:	fe 01       	movw	r30, r28
    27d4:	31 96       	adiw	r30, 0x01	; 1
    27d6:	08 c0       	rjmp	.+16     	; 0x27e8 <vDisplayUpdateTask+0x118>
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    27d8:	11 93       	st	Z+, r17
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    27da:	e8 17       	cp	r30, r24
    27dc:	f9 07       	cpc	r31, r25
    27de:	e1 f7       	brne	.-8      	; 0x27d8 <vDisplayUpdateTask+0x108>
    27e0:	fc 01       	movw	r30, r24
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    27e2:	8a 15       	cp	r24, r10
    27e4:	9b 05       	cpc	r25, r11
    27e6:	a1 f1       	breq	.+104    	; 0x2850 <vDisplayUpdateTask+0x180>
    27e8:	cf 01       	movw	r24, r30
    27ea:	44 96       	adiw	r24, 0x14	; 20
    27ec:	f5 cf       	rjmp	.-22     	; 0x27d8 <vDisplayUpdateTask+0x108>
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    27ee:	2f ef       	ldi	r18, 0xFF	; 255
    27f0:	3f ef       	ldi	r19, 0xFF	; 255
    27f2:	a9 01       	movw	r20, r18
    27f4:	65 2d       	mov	r22, r5
    27f6:	70 2f       	mov	r23, r16
    27f8:	80 91 d5 2c 	lds	r24, 0x2CD5	; 0x802cd5 <displayLineQueue>
    27fc:	90 91 d6 2c 	lds	r25, 0x2CD6	; 0x802cd6 <displayLineQueue+0x1>
    2800:	0e 94 ed 07 	call	0xfda	; 0xfda <xQueueReceive>
    2804:	88 23       	and	r24, r24
    2806:	21 f1       	breq	.+72     	; 0x2850 <vDisplayUpdateTask+0x180>
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    2808:	f6 01       	movw	r30, r12
    280a:	21 81       	ldd	r18, Z+1	; 0x01
    280c:	82 2f       	mov	r24, r18
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	44 97       	sbiw	r24, 0x14	; 20
    2812:	f4 f4       	brge	.+60     	; 0x2850 <vDisplayUpdateTask+0x180>
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	88 23       	and	r24, r24
    2818:	d9 f0       	breq	.+54     	; 0x2850 <vDisplayUpdateTask+0x180>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    281a:	90 81       	ld	r25, Z
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	d9 01       	movw	r26, r18
    2820:	49 9e       	mul	r4, r25
    2822:	a0 0d       	add	r26, r0
    2824:	b1 1d       	adc	r27, r1
    2826:	11 24       	eor	r1, r1
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	4c 0f       	add	r20, r28
    282e:	5d 1f       	adc	r21, r29
    2830:	a4 0f       	add	r26, r20
    2832:	b5 1f       	adc	r27, r21
    2834:	33 96       	adiw	r30, 0x03	; 3
    2836:	a4 01       	movw	r20, r8
    2838:	42 1b       	sub	r20, r18
    283a:	53 0b       	sbc	r21, r19
    283c:	9a 01       	movw	r18, r20
    283e:	2c 0d       	add	r18, r12
    2840:	3d 1d       	adc	r19, r13
    2842:	8d 93       	st	X+, r24
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    2844:	e2 17       	cp	r30, r18
    2846:	f3 07       	cpc	r31, r19
    2848:	19 f0       	breq	.+6      	; 0x2850 <vDisplayUpdateTask+0x180>
    284a:	81 91       	ld	r24, Z+
    284c:	81 11       	cpse	r24, r1
    284e:	f9 cf       	rjmp	.-14     	; 0x2842 <vDisplayUpdateTask+0x172>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    2850:	80 91 d5 2c 	lds	r24, 0x2CD5	; 0x802cd5 <displayLineQueue>
    2854:	90 91 d6 2c 	lds	r25, 0x2CD6	; 0x802cd6 <displayLineQueue+0x1>
    2858:	0e 94 93 08 	call	0x1126	; 0x1126 <uxQueueMessagesWaiting>
    285c:	81 11       	cpse	r24, r1
    285e:	c7 cf       	rjmp	.-114    	; 0x27ee <vDisplayUpdateTask+0x11e>
    2860:	ce 01       	movw	r24, r28
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	7c 01       	movw	r14, r24
    2866:	61 2c       	mov	r6, r1
    2868:	71 2c       	mov	r7, r1
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    286a:	a7 01       	movw	r20, r14
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	c3 01       	movw	r24, r6
    2872:	0e 94 5d 13 	call	0x26ba	; 0x26ba <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    2876:	9f ef       	ldi	r25, 0xFF	; 255
    2878:	69 1a       	sub	r6, r25
    287a:	79 0a       	sbc	r7, r25
    287c:	e4 e1       	ldi	r30, 0x14	; 20
    287e:	ee 0e       	add	r14, r30
    2880:	f1 1c       	adc	r15, r1
    2882:	f4 e0       	ldi	r31, 0x04	; 4
    2884:	6f 16       	cp	r6, r31
    2886:	71 04       	cpc	r7, r1
    2888:	81 f7       	brne	.-32     	; 0x286a <vDisplayUpdateTask+0x19a>
    288a:	85 cf       	rjmp	.-246    	; 0x2796 <vDisplayUpdateTask+0xc6>

0000288c <vDisplayClear>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    288c:	42 e0       	ldi	r20, 0x02	; 2
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	70 e0       	ldi	r23, 0x00	; 0
    2894:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <egDisplayTiming>
    2898:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <egDisplayTiming+0x1>
    289c:	0e 94 a5 02 	call	0x54a	; 0x54a <xEventGroupSetBits>
    28a0:	08 95       	ret

000028a2 <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    28a2:	2f 92       	push	r2
    28a4:	3f 92       	push	r3
    28a6:	4f 92       	push	r4
    28a8:	5f 92       	push	r5
    28aa:	6f 92       	push	r6
    28ac:	7f 92       	push	r7
    28ae:	8f 92       	push	r8
    28b0:	9f 92       	push	r9
    28b2:	af 92       	push	r10
    28b4:	bf 92       	push	r11
    28b6:	cf 92       	push	r12
    28b8:	df 92       	push	r13
    28ba:	ef 92       	push	r14
    28bc:	ff 92       	push	r15
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	6d 97       	sbiw	r28, 0x1d	; 29
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	2b a9       	ldd	r18, Y+51	; 0x33
    28d2:	2b 8f       	std	Y+27, r18	; 0x1b
    28d4:	af a9       	ldd	r26, Y+55	; 0x37
    28d6:	b8 ad       	ldd	r27, Y+56	; 0x38
	va_list arg;	
	va_start(arg, fmt);
    28d8:	7e 01       	movw	r14, r28
    28da:	39 e3       	ldi	r19, 0x39	; 57
    28dc:	e3 0e       	add	r14, r19
    28de:	f1 1c       	adc	r15, r1
    28e0:	22 ed       	ldi	r18, 0xD2	; 210
    28e2:	3c e2       	ldi	r19, 0x2C	; 44
	display_vprintf(line, pos, fmt, arg);
    28e4:	ee eb       	ldi	r30, 0xBE	; 190
    28e6:	fc e2       	ldi	r31, 0x2C	; 44
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
    28e8:	11 92       	st	Z+, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    28ea:	e2 17       	cp	r30, r18
    28ec:	f3 07       	cpc	r31, r19
    28ee:	e1 f7       	brne	.-8      	; 0x28e8 <vDisplayWriteStringAtPos+0x46>
    28f0:	0f 2e       	mov	r0, r31
    28f2:	fa ea       	ldi	r31, 0xAA	; 170
    28f4:	af 2e       	mov	r10, r31
    28f6:	fc e2       	ldi	r31, 0x2C	; 44
    28f8:	bf 2e       	mov	r11, r31
    28fa:	f0 2d       	mov	r31, r0
    28fc:	2e eb       	ldi	r18, 0xBE	; 190
    28fe:	3c e2       	ldi	r19, 0x2C	; 44
    2900:	f5 01       	movw	r30, r10
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
    2902:	11 92       	st	Z+, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    2904:	e2 17       	cp	r30, r18
    2906:	f3 07       	cpc	r31, r19
    2908:	e1 f7       	brne	.-8      	; 0x2902 <vDisplayWriteStringAtPos+0x60>
    290a:	81 2c       	mov	r8, r1
    290c:	91 2c       	mov	r9, r1
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    290e:	0f 2e       	mov	r0, r31
    2910:	fe eb       	ldi	r31, 0xBE	; 190
    2912:	cf 2e       	mov	r12, r31
    2914:	fc e2       	ldi	r31, 0x2C	; 44
    2916:	df 2e       	mov	r13, r31
    2918:	f0 2d       	mov	r31, r0
    291a:	fc c2       	rjmp	.+1528   	; 0x2f14 <vDisplayWriteStringAtPos+0x672>
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
    291c:	85 32       	cpi	r24, 0x25	; 37
    291e:	09 f0       	breq	.+2      	; 0x2922 <vDisplayWriteStringAtPos+0x80>
    2920:	e8 c2       	rjmp	.+1488   	; 0x2ef2 <vDisplayWriteStringAtPos+0x650>
			switch (ch = *fmt++) {
    2922:	2d 01       	movw	r4, r26
    2924:	82 e0       	ldi	r24, 0x02	; 2
    2926:	48 0e       	add	r4, r24
    2928:	51 1c       	adc	r5, r1
    292a:	11 96       	adiw	r26, 0x01	; 1
    292c:	8c 91       	ld	r24, X
    292e:	85 36       	cpi	r24, 0x65	; 101
    2930:	09 f4       	brne	.+2      	; 0x2934 <vDisplayWriteStringAtPos+0x92>
    2932:	db c1       	rjmp	.+950    	; 0x2cea <vDisplayWriteStringAtPos+0x448>
    2934:	38 f4       	brcc	.+14     	; 0x2944 <vDisplayWriteStringAtPos+0xa2>
    2936:	83 36       	cpi	r24, 0x63	; 99
    2938:	c1 f0       	breq	.+48     	; 0x296a <vDisplayWriteStringAtPos+0xc8>
    293a:	08 f0       	brcs	.+2      	; 0x293e <vDisplayWriteStringAtPos+0x9c>
    293c:	48 c0       	rjmp	.+144    	; 0x29ce <vDisplayWriteStringAtPos+0x12c>
    293e:	85 32       	cpi	r24, 0x25	; 37
    2940:	51 f0       	breq	.+20     	; 0x2956 <vDisplayWriteStringAtPos+0xb4>
    2942:	e7 c2       	rjmp	.+1486   	; 0x2f12 <vDisplayWriteStringAtPos+0x670>
    2944:	83 37       	cpi	r24, 0x73	; 115
    2946:	f9 f0       	breq	.+62     	; 0x2986 <vDisplayWriteStringAtPos+0xe4>
    2948:	88 37       	cpi	r24, 0x78	; 120
    294a:	09 f4       	brne	.+2      	; 0x294e <vDisplayWriteStringAtPos+0xac>
    294c:	68 c0       	rjmp	.+208    	; 0x2a1e <vDisplayWriteStringAtPos+0x17c>
    294e:	86 36       	cpi	r24, 0x66	; 102
    2950:	09 f0       	breq	.+2      	; 0x2954 <vDisplayWriteStringAtPos+0xb2>
    2952:	df c2       	rjmp	.+1470   	; 0x2f12 <vDisplayWriteStringAtPos+0x670>
    2954:	8c c0       	rjmp	.+280    	; 0x2a6e <vDisplayWriteStringAtPos+0x1cc>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    2956:	f4 01       	movw	r30, r8
    2958:	e6 55       	subi	r30, 0x56	; 86
    295a:	f3 4d       	sbci	r31, 0xD3	; 211
    295c:	95 e2       	ldi	r25, 0x25	; 37
    295e:	90 83       	st	Z, r25
				length++;
    2960:	af ef       	ldi	r26, 0xFF	; 255
    2962:	8a 1a       	sub	r8, r26
    2964:	9a 0a       	sbc	r9, r26
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2966:	d2 01       	movw	r26, r4
    2968:	d5 c2       	rjmp	.+1450   	; 0x2f14 <vDisplayWriteStringAtPos+0x672>
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
				str[length] = char_temp;
    296a:	f4 01       	movw	r30, r8
    296c:	e6 55       	subi	r30, 0x56	; 86
    296e:	f3 4d       	sbci	r31, 0xD3	; 211
    2970:	d7 01       	movw	r26, r14
    2972:	8c 91       	ld	r24, X
    2974:	80 83       	st	Z, r24
				length++;
    2976:	bf ef       	ldi	r27, 0xFF	; 255
    2978:	8b 1a       	sub	r8, r27
    297a:	9b 0a       	sbc	r9, r27
				length++;
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    297c:	f7 01       	movw	r30, r14
    297e:	32 96       	adiw	r30, 0x02	; 2
    2980:	7f 01       	movw	r14, r30
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2982:	d2 01       	movw	r26, r4
    2984:	c7 c2       	rjmp	.+1422   	; 0x2f14 <vDisplayWriteStringAtPos+0x672>
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    2986:	a7 01       	movw	r20, r14
    2988:	4e 5f       	subi	r20, 0xFE	; 254
    298a:	5f 4f       	sbci	r21, 0xFF	; 255
    298c:	d7 01       	movw	r26, r14
    298e:	8d 91       	ld	r24, X+
    2990:	9c 91       	ld	r25, X
    2992:	9c 01       	movw	r18, r24
    2994:	b4 01       	movw	r22, r8
    2996:	f4 01       	movw	r30, r8
    2998:	e6 55       	subi	r30, 0x56	; 86
    299a:	f3 4d       	sbci	r31, 0xD3	; 211
				for(int i = 0; i < strlen(string_temp);i++) {
    299c:	00 e0       	ldi	r16, 0x00	; 0
    299e:	10 e0       	ldi	r17, 0x00	; 0
    29a0:	06 c0       	rjmp	.+12     	; 0x29ae <vDisplayWriteStringAtPos+0x10c>
					str[length+i] = string_temp[i];
    29a2:	d9 01       	movw	r26, r18
    29a4:	fd 90       	ld	r15, X+
    29a6:	9d 01       	movw	r18, r26
    29a8:	f1 92       	st	Z+, r15
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    29aa:	0f 5f       	subi	r16, 0xFF	; 255
    29ac:	1f 4f       	sbci	r17, 0xFF	; 255
    29ae:	dc 01       	movw	r26, r24
    29b0:	0d 90       	ld	r0, X+
    29b2:	00 20       	and	r0, r0
    29b4:	e9 f7       	brne	.-6      	; 0x29b0 <vDisplayWriteStringAtPos+0x10e>
    29b6:	11 97       	sbiw	r26, 0x01	; 1
    29b8:	a8 1b       	sub	r26, r24
    29ba:	b9 0b       	sbc	r27, r25
    29bc:	0a 17       	cp	r16, r26
    29be:	1b 07       	cpc	r17, r27
    29c0:	80 f3       	brcs	.-32     	; 0x29a2 <vDisplayWriteStringAtPos+0x100>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    29c2:	4d 01       	movw	r8, r26
    29c4:	86 0e       	add	r8, r22
    29c6:	97 1e       	adc	r9, r23
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    29c8:	7a 01       	movw	r14, r20
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    29ca:	d2 01       	movw	r26, r4
    29cc:	a3 c2       	rjmp	.+1350   	; 0x2f14 <vDisplayWriteStringAtPos+0x672>
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    29ce:	87 01       	movw	r16, r14
    29d0:	0e 5f       	subi	r16, 0xFE	; 254
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    29d4:	4a e0       	ldi	r20, 0x0A	; 10
    29d6:	b6 01       	movw	r22, r12
    29d8:	f7 01       	movw	r30, r14
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__itoa_ncheck>
    29e2:	94 01       	movw	r18, r8
    29e4:	d4 01       	movw	r26, r8
    29e6:	a6 55       	subi	r26, 0x56	; 86
    29e8:	b3 4d       	sbci	r27, 0xD3	; 211
    29ea:	4e eb       	ldi	r20, 0xBE	; 190
    29ec:	5c e2       	ldi	r21, 0x2C	; 44
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	05 c0       	rjmp	.+10     	; 0x29fe <vDisplayWriteStringAtPos+0x15c>
					str[length+i] = buffer[i];
    29f4:	fa 01       	movw	r30, r20
    29f6:	61 91       	ld	r22, Z+
    29f8:	af 01       	movw	r20, r30
    29fa:	6d 93       	st	X+, r22

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    29fc:	01 96       	adiw	r24, 0x01	; 1
    29fe:	f6 01       	movw	r30, r12
    2a00:	01 90       	ld	r0, Z+
    2a02:	00 20       	and	r0, r0
    2a04:	e9 f7       	brne	.-6      	; 0x2a00 <vDisplayWriteStringAtPos+0x15e>
    2a06:	31 97       	sbiw	r30, 0x01	; 1
    2a08:	ee 5b       	subi	r30, 0xBE	; 190
    2a0a:	fc 42       	sbci	r31, 0x2C	; 44
    2a0c:	8e 17       	cp	r24, r30
    2a0e:	9f 07       	cpc	r25, r31
    2a10:	88 f3       	brcs	.-30     	; 0x29f4 <vDisplayWriteStringAtPos+0x152>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2a12:	4f 01       	movw	r8, r30
    2a14:	82 0e       	add	r8, r18
    2a16:	93 1e       	adc	r9, r19
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    2a18:	78 01       	movw	r14, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2a1a:	d2 01       	movw	r26, r4
    2a1c:	7b c2       	rjmp	.+1270   	; 0x2f14 <vDisplayWriteStringAtPos+0x672>
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2a1e:	87 01       	movw	r16, r14
    2a20:	0e 5f       	subi	r16, 0xFE	; 254
    2a22:	1f 4f       	sbci	r17, 0xFF	; 255
    2a24:	40 e1       	ldi	r20, 0x10	; 16
    2a26:	b6 01       	movw	r22, r12
    2a28:	d7 01       	movw	r26, r14
    2a2a:	8d 91       	ld	r24, X+
    2a2c:	9c 91       	ld	r25, X
    2a2e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__itoa_ncheck>
    2a32:	94 01       	movw	r18, r8
    2a34:	f4 01       	movw	r30, r8
    2a36:	e6 55       	subi	r30, 0x56	; 86
    2a38:	f3 4d       	sbci	r31, 0xD3	; 211
    2a3a:	4e eb       	ldi	r20, 0xBE	; 190
    2a3c:	5c e2       	ldi	r21, 0x2C	; 44
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	05 c0       	rjmp	.+10     	; 0x2a4e <vDisplayWriteStringAtPos+0x1ac>
					str[length+i] = buffer[i];
    2a44:	da 01       	movw	r26, r20
    2a46:	6d 91       	ld	r22, X+
    2a48:	ad 01       	movw	r20, r26
    2a4a:	61 93       	st	Z+, r22

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	d6 01       	movw	r26, r12
    2a50:	0d 90       	ld	r0, X+
    2a52:	00 20       	and	r0, r0
    2a54:	e9 f7       	brne	.-6      	; 0x2a50 <vDisplayWriteStringAtPos+0x1ae>
    2a56:	11 97       	sbiw	r26, 0x01	; 1
    2a58:	ae 5b       	subi	r26, 0xBE	; 190
    2a5a:	bc 42       	sbci	r27, 0x2C	; 44
    2a5c:	8a 17       	cp	r24, r26
    2a5e:	9b 07       	cpc	r25, r27
    2a60:	88 f3       	brcs	.-30     	; 0x2a44 <vDisplayWriteStringAtPos+0x1a2>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2a62:	4d 01       	movw	r8, r26
    2a64:	82 0e       	add	r8, r18
    2a66:	93 1e       	adc	r9, r19
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2a68:	78 01       	movw	r14, r16
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2a6a:	d2 01       	movw	r26, r4
    2a6c:	53 c2       	rjmp	.+1190   	; 0x2f14 <vDisplayWriteStringAtPos+0x672>
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    2a6e:	17 01       	movw	r2, r14
    2a70:	b4 e0       	ldi	r27, 0x04	; 4
    2a72:	2b 0e       	add	r2, r27
    2a74:	31 1c       	adc	r3, r1
    2a76:	d7 01       	movw	r26, r14
    2a78:	8d 91       	ld	r24, X+
    2a7a:	9d 91       	ld	r25, X+
    2a7c:	0d 90       	ld	r0, X+
    2a7e:	bc 91       	ld	r27, X
    2a80:	a0 2d       	mov	r26, r0
    2a82:	8f 8b       	std	Y+23, r24	; 0x17
    2a84:	98 8f       	std	Y+24, r25	; 0x18
    2a86:	a9 8f       	std	Y+25, r26	; 0x19
    2a88:	ba 8f       	std	Y+26, r27	; 0x1a

    int exponent = 0;
    int places = 0;
    static const int width = 4;

    if (value == 0.0) {
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	a9 01       	movw	r20, r18
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2a98:	81 11       	cpse	r24, r1
    2a9a:	05 c0       	rjmp	.+10     	; 0x2aa6 <vDisplayWriteStringAtPos+0x204>
        buffer[0] = '0';
    2a9c:	20 e3       	ldi	r18, 0x30	; 48
    2a9e:	f6 01       	movw	r30, r12
    2aa0:	20 83       	st	Z, r18
        buffer[1] = '\0';
    2aa2:	11 82       	std	Z+1, r1	; 0x01
    2aa4:	04 c1       	rjmp	.+520    	; 0x2cae <vDisplayWriteStringAtPos+0x40c>
        return;
    }         

    if (value < 0.0) {
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	a9 01       	movw	r20, r18
    2aac:	6f 89       	ldd	r22, Y+23	; 0x17
    2aae:	78 8d       	ldd	r23, Y+24	; 0x18
    2ab0:	89 8d       	ldd	r24, Y+25	; 0x19
    2ab2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ab4:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2ab8:	88 23       	and	r24, r24
    2aba:	9c f4       	brge	.+38     	; 0x2ae2 <vDisplayWriteStringAtPos+0x240>
        *buffer++ = '-';
    2abc:	ed e2       	ldi	r30, 0x2D	; 45
    2abe:	d6 01       	movw	r26, r12
    2ac0:	ec 93       	st	X, r30
        value = -value;
    2ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac6:	a9 8d       	ldd	r26, Y+25	; 0x19
    2ac8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2aca:	b0 58       	subi	r27, 0x80	; 128
    2acc:	8f 8b       	std	Y+23, r24	; 0x17
    2ace:	98 8f       	std	Y+24, r25	; 0x18
    2ad0:	a9 8f       	std	Y+25, r26	; 0x19
    2ad2:	ba 8f       	std	Y+26, r27	; 0x1a
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
        *buffer++ = '-';
    2ad4:	0f 2e       	mov	r0, r31
    2ad6:	ff eb       	ldi	r31, 0xBF	; 191
    2ad8:	6f 2e       	mov	r6, r31
    2ada:	fc e2       	ldi	r31, 0x2C	; 44
    2adc:	7f 2e       	mov	r7, r31
    2ade:	f0 2d       	mov	r31, r0
    2ae0:	01 c0       	rjmp	.+2      	; 0x2ae4 <vDisplayWriteStringAtPos+0x242>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
    2ae2:	36 01       	movw	r6, r12

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e8       	ldi	r20, 0x80	; 128
    2aea:	5f e3       	ldi	r21, 0x3F	; 63
    2aec:	6f 89       	ldd	r22, Y+23	; 0x17
    2aee:	78 8d       	ldd	r23, Y+24	; 0x18
    2af0:	89 8d       	ldd	r24, Y+25	; 0x19
    2af2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2af4:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gesf2>
    2af8:	88 23       	and	r24, r24
    2afa:	0c f4       	brge	.+2      	; 0x2afe <vDisplayWriteStringAtPos+0x25c>
    2afc:	44 c2       	rjmp	.+1160   	; 0x2f86 <vDisplayWriteStringAtPos+0x6e4>
    2afe:	00 e0       	ldi	r16, 0x00	; 0
    2b00:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e2       	ldi	r20, 0x20	; 32
    2b08:	51 e4       	ldi	r21, 0x41	; 65
    2b0a:	6f 89       	ldd	r22, Y+23	; 0x17
    2b0c:	78 8d       	ldd	r23, Y+24	; 0x18
    2b0e:	89 8d       	ldd	r24, Y+25	; 0x19
    2b10:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b12:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divsf3>
    2b16:	6f 8b       	std	Y+23, r22	; 0x17
    2b18:	78 8f       	std	Y+24, r23	; 0x18
    2b1a:	89 8f       	std	Y+25, r24	; 0x19
    2b1c:	9a 8f       	std	Y+26, r25	; 0x1a
        ++exponent;
    2b1e:	0f 5f       	subi	r16, 0xFF	; 255
    2b20:	1f 4f       	sbci	r17, 0xFF	; 255

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e8       	ldi	r20, 0x80	; 128
    2b28:	5f e3       	ldi	r21, 0x3F	; 63
    2b2a:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gesf2>
    2b2e:	88 23       	and	r24, r24
    2b30:	44 f7       	brge	.-48     	; 0x2b02 <vDisplayWriteStringAtPos+0x260>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2b32:	2d ec       	ldi	r18, 0xCD	; 205
    2b34:	3c ec       	ldi	r19, 0xCC	; 204
    2b36:	4c ec       	ldi	r20, 0xCC	; 204
    2b38:	5d e3       	ldi	r21, 0x3D	; 61
    2b3a:	6f 89       	ldd	r22, Y+23	; 0x17
    2b3c:	78 8d       	ldd	r23, Y+24	; 0x18
    2b3e:	89 8d       	ldd	r24, Y+25	; 0x19
    2b40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b42:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2b46:	88 23       	and	r24, r24
    2b48:	1c f0       	brlt	.+6      	; 0x2b50 <vDisplayWriteStringAtPos+0x2ae>
    2b4a:	1a c0       	rjmp	.+52     	; 0x2b80 <vDisplayWriteStringAtPos+0x2de>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    2b4c:	00 e0       	ldi	r16, 0x00	; 0
    2b4e:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
        value *= 10.0;
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e2       	ldi	r20, 0x20	; 32
    2b56:	51 e4       	ldi	r21, 0x41	; 65
    2b58:	6f 89       	ldd	r22, Y+23	; 0x17
    2b5a:	78 8d       	ldd	r23, Y+24	; 0x18
    2b5c:	89 8d       	ldd	r24, Y+25	; 0x19
    2b5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b60:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulsf3>
    2b64:	6f 8b       	std	Y+23, r22	; 0x17
    2b66:	78 8f       	std	Y+24, r23	; 0x18
    2b68:	89 8f       	std	Y+25, r24	; 0x19
    2b6a:	9a 8f       	std	Y+26, r25	; 0x1a
        --exponent;
    2b6c:	01 50       	subi	r16, 0x01	; 1
    2b6e:	11 09       	sbc	r17, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2b70:	2d ec       	ldi	r18, 0xCD	; 205
    2b72:	3c ec       	ldi	r19, 0xCC	; 204
    2b74:	4c ec       	ldi	r20, 0xCC	; 204
    2b76:	5d e3       	ldi	r21, 0x3D	; 61
    2b78:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2b7c:	88 23       	and	r24, r24
    2b7e:	44 f3       	brlt	.-48     	; 0x2b50 <vDisplayWriteStringAtPos+0x2ae>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2b80:	10 16       	cp	r1, r16
    2b82:	11 06       	cpc	r1, r17
    2b84:	ac f5       	brge	.+106    	; 0x2bf0 <vDisplayWriteStringAtPos+0x34e>
    2b86:	73 01       	movw	r14, r6
    2b88:	d3 01       	movw	r26, r6
    2b8a:	a0 0f       	add	r26, r16
    2b8c:	b1 1f       	adc	r27, r17
    2b8e:	ac 8f       	std	Y+28, r26	; 0x1c
    2b90:	bd 8f       	std	Y+29, r27	; 0x1d
    2b92:	3d 01       	movw	r6, r26
    2b94:	6f 89       	ldd	r22, Y+23	; 0x17
    2b96:	78 8d       	ldd	r23, Y+24	; 0x18
    2b98:	89 8d       	ldd	r24, Y+25	; 0x19
    2b9a:	9a 8d       	ldd	r25, Y+26	; 0x1a
        int digit = value * 10;
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e2       	ldi	r20, 0x20	; 32
    2ba2:	51 e4       	ldi	r21, 0x41	; 65
    2ba4:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulsf3>
    2ba8:	6f 8b       	std	Y+23, r22	; 0x17
    2baa:	78 8f       	std	Y+24, r23	; 0x18
    2bac:	89 8f       	std	Y+25, r24	; 0x19
    2bae:	9a 8f       	std	Y+26, r25	; 0x1a
    2bb0:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixsfsi>
        *buffer++ = digit + '0';
    2bb4:	20 e3       	ldi	r18, 0x30	; 48
    2bb6:	26 0f       	add	r18, r22
    2bb8:	f7 01       	movw	r30, r14
    2bba:	21 93       	st	Z+, r18
    2bbc:	7f 01       	movw	r14, r30
        value = value * 10 - digit;
    2bbe:	07 2e       	mov	r0, r23
    2bc0:	00 0c       	add	r0, r0
    2bc2:	88 0b       	sbc	r24, r24
    2bc4:	99 0b       	sbc	r25, r25
    2bc6:	0e 94 10 19 	call	0x3220	; 0x3220 <__floatsisf>
    2bca:	9b 01       	movw	r18, r22
    2bcc:	ac 01       	movw	r20, r24
    2bce:	6f 89       	ldd	r22, Y+23	; 0x17
    2bd0:	78 8d       	ldd	r23, Y+24	; 0x18
    2bd2:	89 8d       	ldd	r24, Y+25	; 0x19
    2bd4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bd6:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__subsf3>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2bda:	e6 14       	cp	r14, r6
    2bdc:	f7 04       	cpc	r15, r7
    2bde:	f1 f6       	brne	.-68     	; 0x2b9c <vDisplayWriteStringAtPos+0x2fa>
    2be0:	6f 8b       	std	Y+23, r22	; 0x17
    2be2:	78 8f       	std	Y+24, r23	; 0x18
    2be4:	89 8f       	std	Y+25, r24	; 0x19
    2be6:	9a 8f       	std	Y+26, r25	; 0x1a
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    2be8:	01 15       	cp	r16, r1
    2bea:	11 05       	cpc	r17, r1
    2bec:	89 f4       	brne	.+34     	; 0x2c10 <vDisplayWriteStringAtPos+0x36e>
    2bee:	db c1       	rjmp	.+950    	; 0x2fa6 <vDisplayWriteStringAtPos+0x704>
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    2bf0:	c8 01       	movw	r24, r16
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    2bf2:	e0 e3       	ldi	r30, 0x30	; 48
    2bf4:	d3 01       	movw	r26, r6
    2bf6:	ec 93       	st	X, r30

    *buffer++ = '.';
    2bf8:	73 01       	movw	r14, r6
    2bfa:	f2 e0       	ldi	r31, 0x02	; 2
    2bfc:	ef 0e       	add	r14, r31
    2bfe:	f1 1c       	adc	r15, r1
    2c00:	2e e2       	ldi	r18, 0x2E	; 46
    2c02:	11 96       	adiw	r26, 0x01	; 1
    2c04:	2c 93       	st	X, r18

    while (exponent < 0 && places < width) {
    2c06:	99 23       	and	r25, r25
    2c08:	6c f0       	brlt	.+26     	; 0x2c24 <vDisplayWriteStringAtPos+0x382>
    2c0a:	00 e0       	ldi	r16, 0x00	; 0
    2c0c:	10 e0       	ldi	r17, 0x00	; 0
    2c0e:	1f c0       	rjmp	.+62     	; 0x2c4e <vDisplayWriteStringAtPos+0x3ac>
    }

    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';
    2c10:	ec 8c       	ldd	r14, Y+28	; 0x1c
    2c12:	fd 8c       	ldd	r15, Y+29	; 0x1d
    2c14:	3f ef       	ldi	r19, 0xFF	; 255
    2c16:	e3 1a       	sub	r14, r19
    2c18:	f3 0a       	sbc	r15, r19
    2c1a:	ee e2       	ldi	r30, 0x2E	; 46
    2c1c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2c1e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2c20:	ec 93       	st	X, r30
    2c22:	12 c0       	rjmp	.+36     	; 0x2c48 <vDisplayWriteStringAtPos+0x3a6>

    while (exponent < 0 && places < width) {
    2c24:	00 e0       	ldi	r16, 0x00	; 0
    2c26:	10 e0       	ldi	r17, 0x00	; 0
        *buffer++ = '0';
    2c28:	ff ef       	ldi	r31, 0xFF	; 255
    2c2a:	ef 1a       	sub	r14, r31
    2c2c:	ff 0a       	sbc	r15, r31
    2c2e:	f7 01       	movw	r30, r14
    2c30:	31 97       	sbiw	r30, 0x01	; 1
    2c32:	20 e3       	ldi	r18, 0x30	; 48
    2c34:	20 83       	st	Z, r18
        --exponent;
    2c36:	01 97       	sbiw	r24, 0x01	; 1
        ++places;
    2c38:	0f 5f       	subi	r16, 0xFF	; 255
    2c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    2c3c:	99 23       	and	r25, r25
    2c3e:	24 f4       	brge	.+8      	; 0x2c48 <vDisplayWriteStringAtPos+0x3a6>
    2c40:	04 30       	cpi	r16, 0x04	; 4
    2c42:	11 05       	cpc	r17, r1
    2c44:	8c f3       	brlt	.-30     	; 0x2c28 <vDisplayWriteStringAtPos+0x386>
    2c46:	31 c0       	rjmp	.+98     	; 0x2caa <vDisplayWriteStringAtPos+0x408>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    2c48:	04 30       	cpi	r16, 0x04	; 4
    2c4a:	11 05       	cpc	r17, r1
    2c4c:	74 f5       	brge	.+92     	; 0x2caa <vDisplayWriteStringAtPos+0x408>
    2c4e:	37 01       	movw	r6, r14
    2c50:	84 e0       	ldi	r24, 0x04	; 4
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	80 1b       	sub	r24, r16
    2c56:	91 0b       	sbc	r25, r17
    2c58:	e8 0e       	add	r14, r24
    2c5a:	f9 1e       	adc	r15, r25
    2c5c:	87 01       	movw	r16, r14
    2c5e:	6f 89       	ldd	r22, Y+23	; 0x17
    2c60:	78 8d       	ldd	r23, Y+24	; 0x18
    2c62:	89 8d       	ldd	r24, Y+25	; 0x19
    2c64:	9a 8d       	ldd	r25, Y+26	; 0x1a
        int digit = value * 10.0;
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e2       	ldi	r20, 0x20	; 32
    2c6c:	51 e4       	ldi	r21, 0x41	; 65
    2c6e:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulsf3>
    2c72:	6f 8b       	std	Y+23, r22	; 0x17
    2c74:	78 8f       	std	Y+24, r23	; 0x18
    2c76:	89 8f       	std	Y+25, r24	; 0x19
    2c78:	9a 8f       	std	Y+26, r25	; 0x1a
    2c7a:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixsfsi>
        *buffer++ = digit + '0';
    2c7e:	20 e3       	ldi	r18, 0x30	; 48
    2c80:	26 0f       	add	r18, r22
    2c82:	d3 01       	movw	r26, r6
    2c84:	2d 93       	st	X+, r18
    2c86:	3d 01       	movw	r6, r26
        value = value * 10.0 - digit;
    2c88:	07 2e       	mov	r0, r23
    2c8a:	00 0c       	add	r0, r0
    2c8c:	88 0b       	sbc	r24, r24
    2c8e:	99 0b       	sbc	r25, r25
    2c90:	0e 94 10 19 	call	0x3220	; 0x3220 <__floatsisf>
    2c94:	9b 01       	movw	r18, r22
    2c96:	ac 01       	movw	r20, r24
    2c98:	6f 89       	ldd	r22, Y+23	; 0x17
    2c9a:	78 8d       	ldd	r23, Y+24	; 0x18
    2c9c:	89 8d       	ldd	r24, Y+25	; 0x19
    2c9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ca0:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__subsf3>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    2ca4:	60 16       	cp	r6, r16
    2ca6:	71 06       	cpc	r7, r17
    2ca8:	f1 f6       	brne	.-68     	; 0x2c66 <vDisplayWriteStringAtPos+0x3c4>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    2caa:	f7 01       	movw	r30, r14
    2cac:	10 82       	st	Z, r1
    2cae:	94 01       	movw	r18, r8
    2cb0:	f4 01       	movw	r30, r8
    2cb2:	e6 55       	subi	r30, 0x56	; 86
    2cb4:	f3 4d       	sbci	r31, 0xD3	; 211
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    2cb6:	4e eb       	ldi	r20, 0xBE	; 190
    2cb8:	5c e2       	ldi	r21, 0x2C	; 44
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	05 c0       	rjmp	.+10     	; 0x2cca <vDisplayWriteStringAtPos+0x428>

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    2cc0:	da 01       	movw	r26, r20
    2cc2:	6d 91       	ld	r22, X+
    2cc4:	ad 01       	movw	r20, r26
    2cc6:	61 93       	st	Z+, r22
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    2cc8:	01 96       	adiw	r24, 0x01	; 1
    2cca:	d6 01       	movw	r26, r12
    2ccc:	0d 90       	ld	r0, X+
    2cce:	00 20       	and	r0, r0
    2cd0:	e9 f7       	brne	.-6      	; 0x2ccc <vDisplayWriteStringAtPos+0x42a>
    2cd2:	11 97       	sbiw	r26, 0x01	; 1
    2cd4:	ae 5b       	subi	r26, 0xBE	; 190
    2cd6:	bc 42       	sbci	r27, 0x2C	; 44
    2cd8:	8a 17       	cp	r24, r26
    2cda:	9b 07       	cpc	r25, r27
    2cdc:	88 f3       	brcs	.-30     	; 0x2cc0 <vDisplayWriteStringAtPos+0x41e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2cde:	4d 01       	movw	r8, r26
    2ce0:	82 0e       	add	r8, r18
    2ce2:	93 1e       	adc	r9, r19
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    2ce4:	71 01       	movw	r14, r2
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2ce6:	d2 01       	movw	r26, r4
    2ce8:	15 c1       	rjmp	.+554    	; 0x2f14 <vDisplayWriteStringAtPos+0x672>
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    2cea:	17 01       	movw	r2, r14
    2cec:	b4 e0       	ldi	r27, 0x04	; 4
    2cee:	2b 0e       	add	r2, r27
    2cf0:	31 1c       	adc	r3, r1
    2cf2:	d7 01       	movw	r26, r14
    2cf4:	8d 91       	ld	r24, X+
    2cf6:	9d 91       	ld	r25, X+
    2cf8:	0d 90       	ld	r0, X+
    2cfa:	bc 91       	ld	r27, X
    2cfc:	a0 2d       	mov	r26, r0
    2cfe:	8f 8b       	std	Y+23, r24	; 0x17
    2d00:	98 8f       	std	Y+24, r25	; 0x18
    2d02:	a9 8f       	std	Y+25, r26	; 0x19
    2d04:	ba 8f       	std	Y+26, r27	; 0x1a

void ftoa_sci(char *buffer, double value) {
    int exponent = 0;    
    static const int width = 4;

    if (value == 0.0) {
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	a9 01       	movw	r20, r18
    2d0c:	bc 01       	movw	r22, r24
    2d0e:	cd 01       	movw	r24, r26
    2d10:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2d14:	81 11       	cpse	r24, r1
    2d16:	05 c0       	rjmp	.+10     	; 0x2d22 <vDisplayWriteStringAtPos+0x480>
        buffer[0] = '0';
    2d18:	20 e3       	ldi	r18, 0x30	; 48
    2d1a:	f6 01       	movw	r30, r12
    2d1c:	20 83       	st	Z, r18
        buffer[1] = '\0';
    2d1e:	11 82       	std	Z+1, r1	; 0x01
    2d20:	ca c0       	rjmp	.+404    	; 0x2eb6 <vDisplayWriteStringAtPos+0x614>
        return;
    }

    if (value < 0.0) {
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	a9 01       	movw	r20, r18
    2d28:	6f 89       	ldd	r22, Y+23	; 0x17
    2d2a:	78 8d       	ldd	r23, Y+24	; 0x18
    2d2c:	89 8d       	ldd	r24, Y+25	; 0x19
    2d2e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d30:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2d34:	88 23       	and	r24, r24
    2d36:	9c f4       	brge	.+38     	; 0x2d5e <vDisplayWriteStringAtPos+0x4bc>
        *buffer++ = '-';
    2d38:	ed e2       	ldi	r30, 0x2D	; 45
    2d3a:	d6 01       	movw	r26, r12
    2d3c:	ec 93       	st	X, r30
        value = -value;
    2d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d40:	98 8d       	ldd	r25, Y+24	; 0x18
    2d42:	a9 8d       	ldd	r26, Y+25	; 0x19
    2d44:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2d46:	b0 58       	subi	r27, 0x80	; 128
    2d48:	8f 8b       	std	Y+23, r24	; 0x17
    2d4a:	98 8f       	std	Y+24, r25	; 0x18
    2d4c:	a9 8f       	std	Y+25, r26	; 0x19
    2d4e:	ba 8f       	std	Y+26, r27	; 0x1a
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
        *buffer++ = '-';
    2d50:	0f 2e       	mov	r0, r31
    2d52:	ff eb       	ldi	r31, 0xBF	; 191
    2d54:	6f 2e       	mov	r6, r31
    2d56:	fc e2       	ldi	r31, 0x2C	; 44
    2d58:	7f 2e       	mov	r7, r31
    2d5a:	f0 2d       	mov	r31, r0
    2d5c:	01 c0       	rjmp	.+2      	; 0x2d60 <vDisplayWriteStringAtPos+0x4be>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
    2d5e:	36 01       	movw	r6, r12

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	6f 89       	ldd	r22, Y+23	; 0x17
    2d6a:	78 8d       	ldd	r23, Y+24	; 0x18
    2d6c:	89 8d       	ldd	r24, Y+25	; 0x19
    2d6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d70:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gesf2>
    2d74:	88 23       	and	r24, r24
    2d76:	dc f0       	brlt	.+54     	; 0x2dae <vDisplayWriteStringAtPos+0x50c>
    2d78:	00 e0       	ldi	r16, 0x00	; 0
    2d7a:	10 e0       	ldi	r17, 0x00	; 0
        value /= 10.0;
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e2       	ldi	r20, 0x20	; 32
    2d82:	51 e4       	ldi	r21, 0x41	; 65
    2d84:	6f 89       	ldd	r22, Y+23	; 0x17
    2d86:	78 8d       	ldd	r23, Y+24	; 0x18
    2d88:	89 8d       	ldd	r24, Y+25	; 0x19
    2d8a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d8c:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divsf3>
    2d90:	6f 8b       	std	Y+23, r22	; 0x17
    2d92:	78 8f       	std	Y+24, r23	; 0x18
    2d94:	89 8f       	std	Y+25, r24	; 0x19
    2d96:	9a 8f       	std	Y+26, r25	; 0x1a
        ++exponent;
    2d98:	0f 5f       	subi	r16, 0xFF	; 255
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e8       	ldi	r20, 0x80	; 128
    2da2:	5f e3       	ldi	r21, 0x3F	; 63
    2da4:	0e 94 c0 19 	call	0x3380	; 0x3380 <__gesf2>
    2da8:	88 23       	and	r24, r24
    2daa:	44 f7       	brge	.-48     	; 0x2d7c <vDisplayWriteStringAtPos+0x4da>
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <vDisplayWriteStringAtPos+0x510>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    2dae:	00 e0       	ldi	r16, 0x00	; 0
    2db0:	10 e0       	ldi	r17, 0x00	; 0
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2db2:	2d ec       	ldi	r18, 0xCD	; 205
    2db4:	3c ec       	ldi	r19, 0xCC	; 204
    2db6:	4c ec       	ldi	r20, 0xCC	; 204
    2db8:	5d e3       	ldi	r21, 0x3D	; 61
    2dba:	6f 89       	ldd	r22, Y+23	; 0x17
    2dbc:	78 8d       	ldd	r23, Y+24	; 0x18
    2dbe:	89 8d       	ldd	r24, Y+25	; 0x19
    2dc0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2dc2:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2dc6:	88 23       	and	r24, r24
    2dc8:	c4 f4       	brge	.+48     	; 0x2dfa <vDisplayWriteStringAtPos+0x558>
        value *= 10.0;
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e2       	ldi	r20, 0x20	; 32
    2dd0:	51 e4       	ldi	r21, 0x41	; 65
    2dd2:	6f 89       	ldd	r22, Y+23	; 0x17
    2dd4:	78 8d       	ldd	r23, Y+24	; 0x18
    2dd6:	89 8d       	ldd	r24, Y+25	; 0x19
    2dd8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2dda:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulsf3>
    2dde:	6f 8b       	std	Y+23, r22	; 0x17
    2de0:	78 8f       	std	Y+24, r23	; 0x18
    2de2:	89 8f       	std	Y+25, r24	; 0x19
    2de4:	9a 8f       	std	Y+26, r25	; 0x1a
        --exponent;
    2de6:	01 50       	subi	r16, 0x01	; 1
    2de8:	11 09       	sbc	r17, r1
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2dea:	2d ec       	ldi	r18, 0xCD	; 205
    2dec:	3c ec       	ldi	r19, 0xCC	; 204
    2dee:	4c ec       	ldi	r20, 0xCC	; 204
    2df0:	5d e3       	ldi	r21, 0x3D	; 61
    2df2:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2df6:	88 23       	and	r24, r24
    2df8:	44 f3       	brlt	.-48     	; 0x2dca <vDisplayWriteStringAtPos+0x528>
        value = -value;
    }

    exponent = normalize(&value);

    int digit = value * 10.0;
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e2       	ldi	r20, 0x20	; 32
    2e00:	51 e4       	ldi	r21, 0x41	; 65
    2e02:	6f 89       	ldd	r22, Y+23	; 0x17
    2e04:	78 8d       	ldd	r23, Y+24	; 0x18
    2e06:	89 8d       	ldd	r24, Y+25	; 0x19
    2e08:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e0a:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulsf3>
    2e0e:	6f 8b       	std	Y+23, r22	; 0x17
    2e10:	78 8f       	std	Y+24, r23	; 0x18
    2e12:	89 8f       	std	Y+25, r24	; 0x19
    2e14:	9a 8f       	std	Y+26, r25	; 0x1a
    2e16:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixsfsi>
    *buffer++ = digit + '0';
    2e1a:	20 e3       	ldi	r18, 0x30	; 48
    2e1c:	26 0f       	add	r18, r22
    2e1e:	d3 01       	movw	r26, r6
    2e20:	2c 93       	st	X, r18
    value = value * 10.0 - digit;
    2e22:	07 2e       	mov	r0, r23
    2e24:	00 0c       	add	r0, r0
    2e26:	88 0b       	sbc	r24, r24
    2e28:	99 0b       	sbc	r25, r25
    2e2a:	0e 94 10 19 	call	0x3220	; 0x3220 <__floatsisf>
    2e2e:	9b 01       	movw	r18, r22
    2e30:	ac 01       	movw	r20, r24
    2e32:	6f 89       	ldd	r22, Y+23	; 0x17
    2e34:	78 8d       	ldd	r23, Y+24	; 0x18
    2e36:	89 8d       	ldd	r24, Y+25	; 0x19
    2e38:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e3a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__subsf3>
    --exponent;
    2e3e:	f8 01       	movw	r30, r16
    2e40:	31 97       	sbiw	r30, 0x01	; 1
    2e42:	ec 8f       	std	Y+28, r30	; 0x1c
    2e44:	fd 8f       	std	Y+29, r31	; 0x1d

    *buffer++ = '.';
    2e46:	ee e2       	ldi	r30, 0x2E	; 46
    2e48:	d3 01       	movw	r26, r6
    2e4a:	11 96       	adiw	r26, 0x01	; 1
    2e4c:	ec 93       	st	X, r30
    2e4e:	83 01       	movw	r16, r6
    2e50:	0e 5f       	subi	r16, 0xFE	; 254
    2e52:	1f 4f       	sbci	r17, 0xFF	; 255
    2e54:	73 01       	movw	r14, r6
    2e56:	f6 e0       	ldi	r31, 0x06	; 6
    2e58:	ef 0e       	add	r14, r31
    2e5a:	f1 1c       	adc	r15, r1

    for (int i = 0; i < width; i++) {
        int digit = value * 10.0;
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e2       	ldi	r20, 0x20	; 32
    2e62:	51 e4       	ldi	r21, 0x41	; 65
    2e64:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulsf3>
    2e68:	6f 8b       	std	Y+23, r22	; 0x17
    2e6a:	78 8f       	std	Y+24, r23	; 0x18
    2e6c:	89 8f       	std	Y+25, r24	; 0x19
    2e6e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e70:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixsfsi>
        *buffer++ = digit + '0';
    2e74:	20 e3       	ldi	r18, 0x30	; 48
    2e76:	26 0f       	add	r18, r22
    2e78:	d8 01       	movw	r26, r16
    2e7a:	2d 93       	st	X+, r18
    2e7c:	8d 01       	movw	r16, r26
        value = value * 10.0 - digit;
    2e7e:	07 2e       	mov	r0, r23
    2e80:	00 0c       	add	r0, r0
    2e82:	88 0b       	sbc	r24, r24
    2e84:	99 0b       	sbc	r25, r25
    2e86:	0e 94 10 19 	call	0x3220	; 0x3220 <__floatsisf>
    2e8a:	9b 01       	movw	r18, r22
    2e8c:	ac 01       	movw	r20, r24
    2e8e:	6f 89       	ldd	r22, Y+23	; 0x17
    2e90:	78 8d       	ldd	r23, Y+24	; 0x18
    2e92:	89 8d       	ldd	r24, Y+25	; 0x19
    2e94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e96:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__subsf3>
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    2e9a:	0e 15       	cp	r16, r14
    2e9c:	1f 05       	cpc	r17, r15
    2e9e:	f1 f6       	brne	.-68     	; 0x2e5c <vDisplayWriteStringAtPos+0x5ba>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    2ea0:	25 e6       	ldi	r18, 0x65	; 101
    2ea2:	f3 01       	movw	r30, r6
    2ea4:	26 83       	std	Z+6, r18	; 0x06
    2ea6:	b3 01       	movw	r22, r6
    2ea8:	69 5f       	subi	r22, 0xF9	; 249
    2eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    2eac:	4a e0       	ldi	r20, 0x0A	; 10
    2eae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2eb0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2eb2:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__itoa_ncheck>
    2eb6:	94 01       	movw	r18, r8
    2eb8:	f4 01       	movw	r30, r8
    2eba:	e6 55       	subi	r30, 0x56	; 86
    2ebc:	f3 4d       	sbci	r31, 0xD3	; 211
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    2ebe:	4e eb       	ldi	r20, 0xBE	; 190
    2ec0:	5c e2       	ldi	r21, 0x2C	; 44
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	05 c0       	rjmp	.+10     	; 0x2ed2 <vDisplayWriteStringAtPos+0x630>

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
					str[length+i] = buffer[i];
    2ec8:	da 01       	movw	r26, r20
    2eca:	6d 91       	ld	r22, X+
    2ecc:	ad 01       	movw	r20, r26
    2ece:	61 93       	st	Z+, r22
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    2ed0:	01 96       	adiw	r24, 0x01	; 1
    2ed2:	d6 01       	movw	r26, r12
    2ed4:	0d 90       	ld	r0, X+
    2ed6:	00 20       	and	r0, r0
    2ed8:	e9 f7       	brne	.-6      	; 0x2ed4 <vDisplayWriteStringAtPos+0x632>
    2eda:	11 97       	sbiw	r26, 0x01	; 1
    2edc:	ae 5b       	subi	r26, 0xBE	; 190
    2ede:	bc 42       	sbci	r27, 0x2C	; 44
    2ee0:	8a 17       	cp	r24, r26
    2ee2:	9b 07       	cpc	r25, r27
    2ee4:	88 f3       	brcs	.-30     	; 0x2ec8 <vDisplayWriteStringAtPos+0x626>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    2ee6:	4d 01       	movw	r8, r26
    2ee8:	82 0e       	add	r8, r18
    2eea:	93 1e       	adc	r9, r19
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    2eec:	71 01       	movw	r14, r2
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2eee:	d2 01       	movw	r26, r4
    2ef0:	11 c0       	rjmp	.+34     	; 0x2f14 <vDisplayWriteStringAtPos+0x672>
				break;
			}
		}
		else {
			str[length] = ch;
			if(str[length] == '\n') {
    2ef2:	8a 30       	cpi	r24, 0x0A	; 10
    2ef4:	29 f0       	breq	.+10     	; 0x2f00 <vDisplayWriteStringAtPos+0x65e>
				length += strlen(buffer);
				break;
			}
		}
		else {
			str[length] = ch;
    2ef6:	f4 01       	movw	r30, r8
    2ef8:	e6 55       	subi	r30, 0x56	; 86
    2efa:	f3 4d       	sbci	r31, 0xD3	; 211
    2efc:	80 83       	st	Z, r24
    2efe:	04 c0       	rjmp	.+8      	; 0x2f08 <vDisplayWriteStringAtPos+0x666>
			if(str[length] == '\n') {
				str[length] = '\0';				
    2f00:	f4 01       	movw	r30, r8
    2f02:	e6 55       	subi	r30, 0x56	; 86
    2f04:	f3 4d       	sbci	r31, 0xD3	; 211
    2f06:	10 82       	st	Z, r1
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    2f08:	11 96       	adiw	r26, 0x01	; 1
		else {
			str[length] = ch;
			if(str[length] == '\n') {
				str[length] = '\0';				
			}
			length++;
    2f0a:	ef ef       	ldi	r30, 0xFF	; 255
    2f0c:	8e 1a       	sub	r8, r30
    2f0e:	9e 0a       	sbc	r9, r30
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <vDisplayWriteStringAtPos+0x672>
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2f12:	d2 01       	movw	r26, r4
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    2f14:	8c 91       	ld	r24, X
    2f16:	81 11       	cpse	r24, r1
    2f18:	01 cd       	rjmp	.-1534   	; 0x291c <vDisplayWriteStringAtPos+0x7a>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    2f1a:	8d a9       	ldd	r24, Y+53	; 0x35
    2f1c:	9e a9       	ldd	r25, Y+54	; 0x36
    2f1e:	88 0d       	add	r24, r8
    2f20:	99 1d       	adc	r25, r9
    2f22:	44 97       	sbiw	r24, 0x14	; 20
    2f24:	3c f0       	brlt	.+14     	; 0x2f34 <vDisplayWriteStringAtPos+0x692>
		length = 20-pos;
    2f26:	84 e1       	ldi	r24, 0x14	; 20
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	4c 01       	movw	r8, r24
    2f2c:	2d a9       	ldd	r18, Y+53	; 0x35
    2f2e:	3e a9       	ldd	r19, Y+54	; 0x36
    2f30:	82 1a       	sub	r8, r18
    2f32:	93 0a       	sbc	r9, r19
    2f34:	fe 01       	movw	r30, r28
    2f36:	33 96       	adiw	r30, 0x03	; 3
    2f38:	ce 01       	movw	r24, r28
    2f3a:	47 96       	adiw	r24, 0x17	; 23
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    2f3c:	df 01       	movw	r26, r30
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
    2f3e:	1d 92       	st	X+, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    2f40:	a8 17       	cp	r26, r24
    2f42:	b9 07       	cpc	r27, r25
    2f44:	e1 f7       	brne	.-8      	; 0x2f3e <vDisplayWriteStringAtPos+0x69c>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    2f46:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2f48:	39 83       	std	Y+1, r19	; 0x01
	newLine.displayPos = pos;
    2f4a:	8d a9       	ldd	r24, Y+53	; 0x35
    2f4c:	8a 83       	std	Y+2, r24	; 0x02
	for(int i = 0; i < length;i++) {
    2f4e:	18 14       	cp	r1, r8
    2f50:	19 04       	cpc	r1, r9
    2f52:	5c f4       	brge	.+22     	; 0x2f6a <vDisplayWriteStringAtPos+0x6c8>
    2f54:	ce 01       	movw	r24, r28
    2f56:	88 0d       	add	r24, r8
    2f58:	99 1d       	adc	r25, r9
    2f5a:	03 96       	adiw	r24, 0x03	; 3
		newLine.displayBuffer[i] = str[i];
    2f5c:	d5 01       	movw	r26, r10
    2f5e:	2d 91       	ld	r18, X+
    2f60:	5d 01       	movw	r10, r26
    2f62:	21 93       	st	Z+, r18
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    2f64:	8e 17       	cp	r24, r30
    2f66:	9f 07       	cpc	r25, r31
    2f68:	c9 f7       	brne	.-14     	; 0x2f5c <vDisplayWriteStringAtPos+0x6ba>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    2f6a:	00 e0       	ldi	r16, 0x00	; 0
    2f6c:	2f ef       	ldi	r18, 0xFF	; 255
    2f6e:	3f ef       	ldi	r19, 0xFF	; 255
    2f70:	a9 01       	movw	r20, r18
    2f72:	be 01       	movw	r22, r28
    2f74:	6f 5f       	subi	r22, 0xFF	; 255
    2f76:	7f 4f       	sbci	r23, 0xFF	; 255
    2f78:	80 91 d5 2c 	lds	r24, 0x2CD5	; 0x802cd5 <displayLineQueue>
    2f7c:	90 91 d6 2c 	lds	r25, 0x2CD6	; 0x802cd6 <displayLineQueue+0x1>
    2f80:	0e 94 02 07 	call	0xe04	; 0xe04 <xQueueGenericSend>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    2f84:	1b c0       	rjmp	.+54     	; 0x2fbc <vDisplayWriteStringAtPos+0x71a>
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    2f86:	2d ec       	ldi	r18, 0xCD	; 205
    2f88:	3c ec       	ldi	r19, 0xCC	; 204
    2f8a:	4c ec       	ldi	r20, 0xCC	; 204
    2f8c:	5d e3       	ldi	r21, 0x3D	; 61
    2f8e:	6f 89       	ldd	r22, Y+23	; 0x17
    2f90:	78 8d       	ldd	r23, Y+24	; 0x18
    2f92:	89 8d       	ldd	r24, Y+25	; 0x19
    2f94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f96:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2f9a:	88 23       	and	r24, r24
    2f9c:	0c f4       	brge	.+2      	; 0x2fa0 <vDisplayWriteStringAtPos+0x6fe>
    2f9e:	d6 cd       	rjmp	.-1108   	; 0x2b4c <vDisplayWriteStringAtPos+0x2aa>
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	26 ce       	rjmp	.-948    	; 0x2bf2 <vDisplayWriteStringAtPos+0x350>
        ++places;
        --exponent;
    }

    if (places == 0)
        *buffer++ = '0';
    2fa6:	20 e3       	ldi	r18, 0x30	; 48
    2fa8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2faa:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2fac:	20 83       	st	Z, r18

    *buffer++ = '.';
    2fae:	7f 01       	movw	r14, r30
    2fb0:	32 e0       	ldi	r19, 0x02	; 2
    2fb2:	e3 0e       	add	r14, r19
    2fb4:	f1 1c       	adc	r15, r1
    2fb6:	8e e2       	ldi	r24, 0x2E	; 46
    2fb8:	81 83       	std	Z+1, r24	; 0x01
    2fba:	46 ce       	rjmp	.-884    	; 0x2c48 <vDisplayWriteStringAtPos+0x3a6>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    2fbc:	6d 96       	adiw	r28, 0x1d	; 29
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	df 91       	pop	r29
    2fc4:	cf 91       	pop	r28
    2fc6:	1f 91       	pop	r17
    2fc8:	0f 91       	pop	r16
    2fca:	ff 90       	pop	r15
    2fcc:	ef 90       	pop	r14
    2fce:	df 90       	pop	r13
    2fd0:	cf 90       	pop	r12
    2fd2:	bf 90       	pop	r11
    2fd4:	af 90       	pop	r10
    2fd6:	9f 90       	pop	r9
    2fd8:	8f 90       	pop	r8
    2fda:	7f 90       	pop	r7
    2fdc:	6f 90       	pop	r6
    2fde:	5f 90       	pop	r5
    2fe0:	4f 90       	pop	r4
    2fe2:	3f 90       	pop	r3
    2fe4:	2f 90       	pop	r2
    2fe6:	08 95       	ret

00002fe8 <__subsf3>:
    2fe8:	50 58       	subi	r21, 0x80	; 128

00002fea <__addsf3>:
    2fea:	bb 27       	eor	r27, r27
    2fec:	aa 27       	eor	r26, r26
    2fee:	0e 94 0c 18 	call	0x3018	; 0x3018 <__addsf3x>
    2ff2:	0c 94 86 19 	jmp	0x330c	; 0x330c <__fp_round>
    2ff6:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__fp_pscA>
    2ffa:	38 f0       	brcs	.+14     	; 0x300a <__addsf3+0x20>
    2ffc:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__fp_pscB>
    3000:	20 f0       	brcs	.+8      	; 0x300a <__addsf3+0x20>
    3002:	39 f4       	brne	.+14     	; 0x3012 <__addsf3+0x28>
    3004:	9f 3f       	cpi	r25, 0xFF	; 255
    3006:	19 f4       	brne	.+6      	; 0x300e <__addsf3+0x24>
    3008:	26 f4       	brtc	.+8      	; 0x3012 <__addsf3+0x28>
    300a:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__fp_nan>
    300e:	0e f4       	brtc	.+2      	; 0x3012 <__addsf3+0x28>
    3010:	e0 95       	com	r30
    3012:	e7 fb       	bst	r30, 7
    3014:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__fp_inf>

00003018 <__addsf3x>:
    3018:	e9 2f       	mov	r30, r25
    301a:	0e 94 97 19 	call	0x332e	; 0x332e <__fp_split3>
    301e:	58 f3       	brcs	.-42     	; 0x2ff6 <__addsf3+0xc>
    3020:	ba 17       	cp	r27, r26
    3022:	62 07       	cpc	r22, r18
    3024:	73 07       	cpc	r23, r19
    3026:	84 07       	cpc	r24, r20
    3028:	95 07       	cpc	r25, r21
    302a:	20 f0       	brcs	.+8      	; 0x3034 <__addsf3x+0x1c>
    302c:	79 f4       	brne	.+30     	; 0x304c <__addsf3x+0x34>
    302e:	a6 f5       	brtc	.+104    	; 0x3098 <__addsf3x+0x80>
    3030:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__fp_zero>
    3034:	0e f4       	brtc	.+2      	; 0x3038 <__addsf3x+0x20>
    3036:	e0 95       	com	r30
    3038:	0b 2e       	mov	r0, r27
    303a:	ba 2f       	mov	r27, r26
    303c:	a0 2d       	mov	r26, r0
    303e:	0b 01       	movw	r0, r22
    3040:	b9 01       	movw	r22, r18
    3042:	90 01       	movw	r18, r0
    3044:	0c 01       	movw	r0, r24
    3046:	ca 01       	movw	r24, r20
    3048:	a0 01       	movw	r20, r0
    304a:	11 24       	eor	r1, r1
    304c:	ff 27       	eor	r31, r31
    304e:	59 1b       	sub	r21, r25
    3050:	99 f0       	breq	.+38     	; 0x3078 <__addsf3x+0x60>
    3052:	59 3f       	cpi	r21, 0xF9	; 249
    3054:	50 f4       	brcc	.+20     	; 0x306a <__addsf3x+0x52>
    3056:	50 3e       	cpi	r21, 0xE0	; 224
    3058:	68 f1       	brcs	.+90     	; 0x30b4 <__addsf3x+0x9c>
    305a:	1a 16       	cp	r1, r26
    305c:	f0 40       	sbci	r31, 0x00	; 0
    305e:	a2 2f       	mov	r26, r18
    3060:	23 2f       	mov	r18, r19
    3062:	34 2f       	mov	r19, r20
    3064:	44 27       	eor	r20, r20
    3066:	58 5f       	subi	r21, 0xF8	; 248
    3068:	f3 cf       	rjmp	.-26     	; 0x3050 <__addsf3x+0x38>
    306a:	46 95       	lsr	r20
    306c:	37 95       	ror	r19
    306e:	27 95       	ror	r18
    3070:	a7 95       	ror	r26
    3072:	f0 40       	sbci	r31, 0x00	; 0
    3074:	53 95       	inc	r21
    3076:	c9 f7       	brne	.-14     	; 0x306a <__addsf3x+0x52>
    3078:	7e f4       	brtc	.+30     	; 0x3098 <__addsf3x+0x80>
    307a:	1f 16       	cp	r1, r31
    307c:	ba 0b       	sbc	r27, r26
    307e:	62 0b       	sbc	r22, r18
    3080:	73 0b       	sbc	r23, r19
    3082:	84 0b       	sbc	r24, r20
    3084:	ba f0       	brmi	.+46     	; 0x30b4 <__addsf3x+0x9c>
    3086:	91 50       	subi	r25, 0x01	; 1
    3088:	a1 f0       	breq	.+40     	; 0x30b2 <__addsf3x+0x9a>
    308a:	ff 0f       	add	r31, r31
    308c:	bb 1f       	adc	r27, r27
    308e:	66 1f       	adc	r22, r22
    3090:	77 1f       	adc	r23, r23
    3092:	88 1f       	adc	r24, r24
    3094:	c2 f7       	brpl	.-16     	; 0x3086 <__addsf3x+0x6e>
    3096:	0e c0       	rjmp	.+28     	; 0x30b4 <__addsf3x+0x9c>
    3098:	ba 0f       	add	r27, r26
    309a:	62 1f       	adc	r22, r18
    309c:	73 1f       	adc	r23, r19
    309e:	84 1f       	adc	r24, r20
    30a0:	48 f4       	brcc	.+18     	; 0x30b4 <__addsf3x+0x9c>
    30a2:	87 95       	ror	r24
    30a4:	77 95       	ror	r23
    30a6:	67 95       	ror	r22
    30a8:	b7 95       	ror	r27
    30aa:	f7 95       	ror	r31
    30ac:	9e 3f       	cpi	r25, 0xFE	; 254
    30ae:	08 f0       	brcs	.+2      	; 0x30b2 <__addsf3x+0x9a>
    30b0:	b0 cf       	rjmp	.-160    	; 0x3012 <__addsf3+0x28>
    30b2:	93 95       	inc	r25
    30b4:	88 0f       	add	r24, r24
    30b6:	08 f0       	brcs	.+2      	; 0x30ba <__addsf3x+0xa2>
    30b8:	99 27       	eor	r25, r25
    30ba:	ee 0f       	add	r30, r30
    30bc:	97 95       	ror	r25
    30be:	87 95       	ror	r24
    30c0:	08 95       	ret

000030c2 <__cmpsf2>:
    30c2:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fp_cmp>
    30c6:	08 f4       	brcc	.+2      	; 0x30ca <__cmpsf2+0x8>
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	08 95       	ret

000030cc <__divsf3>:
    30cc:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__divsf3x>
    30d0:	0c 94 86 19 	jmp	0x330c	; 0x330c <__fp_round>
    30d4:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__fp_pscB>
    30d8:	58 f0       	brcs	.+22     	; 0x30f0 <__divsf3+0x24>
    30da:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__fp_pscA>
    30de:	40 f0       	brcs	.+16     	; 0x30f0 <__divsf3+0x24>
    30e0:	29 f4       	brne	.+10     	; 0x30ec <__divsf3+0x20>
    30e2:	5f 3f       	cpi	r21, 0xFF	; 255
    30e4:	29 f0       	breq	.+10     	; 0x30f0 <__divsf3+0x24>
    30e6:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__fp_inf>
    30ea:	51 11       	cpse	r21, r1
    30ec:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__fp_szero>
    30f0:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__fp_nan>

000030f4 <__divsf3x>:
    30f4:	0e 94 97 19 	call	0x332e	; 0x332e <__fp_split3>
    30f8:	68 f3       	brcs	.-38     	; 0x30d4 <__divsf3+0x8>

000030fa <__divsf3_pse>:
    30fa:	99 23       	and	r25, r25
    30fc:	b1 f3       	breq	.-20     	; 0x30ea <__divsf3+0x1e>
    30fe:	55 23       	and	r21, r21
    3100:	91 f3       	breq	.-28     	; 0x30e6 <__divsf3+0x1a>
    3102:	95 1b       	sub	r25, r21
    3104:	55 0b       	sbc	r21, r21
    3106:	bb 27       	eor	r27, r27
    3108:	aa 27       	eor	r26, r26
    310a:	62 17       	cp	r22, r18
    310c:	73 07       	cpc	r23, r19
    310e:	84 07       	cpc	r24, r20
    3110:	38 f0       	brcs	.+14     	; 0x3120 <__divsf3_pse+0x26>
    3112:	9f 5f       	subi	r25, 0xFF	; 255
    3114:	5f 4f       	sbci	r21, 0xFF	; 255
    3116:	22 0f       	add	r18, r18
    3118:	33 1f       	adc	r19, r19
    311a:	44 1f       	adc	r20, r20
    311c:	aa 1f       	adc	r26, r26
    311e:	a9 f3       	breq	.-22     	; 0x310a <__divsf3_pse+0x10>
    3120:	35 d0       	rcall	.+106    	; 0x318c <__divsf3_pse+0x92>
    3122:	0e 2e       	mov	r0, r30
    3124:	3a f0       	brmi	.+14     	; 0x3134 <__divsf3_pse+0x3a>
    3126:	e0 e8       	ldi	r30, 0x80	; 128
    3128:	32 d0       	rcall	.+100    	; 0x318e <__divsf3_pse+0x94>
    312a:	91 50       	subi	r25, 0x01	; 1
    312c:	50 40       	sbci	r21, 0x00	; 0
    312e:	e6 95       	lsr	r30
    3130:	00 1c       	adc	r0, r0
    3132:	ca f7       	brpl	.-14     	; 0x3126 <__divsf3_pse+0x2c>
    3134:	2b d0       	rcall	.+86     	; 0x318c <__divsf3_pse+0x92>
    3136:	fe 2f       	mov	r31, r30
    3138:	29 d0       	rcall	.+82     	; 0x318c <__divsf3_pse+0x92>
    313a:	66 0f       	add	r22, r22
    313c:	77 1f       	adc	r23, r23
    313e:	88 1f       	adc	r24, r24
    3140:	bb 1f       	adc	r27, r27
    3142:	26 17       	cp	r18, r22
    3144:	37 07       	cpc	r19, r23
    3146:	48 07       	cpc	r20, r24
    3148:	ab 07       	cpc	r26, r27
    314a:	b0 e8       	ldi	r27, 0x80	; 128
    314c:	09 f0       	breq	.+2      	; 0x3150 <__divsf3_pse+0x56>
    314e:	bb 0b       	sbc	r27, r27
    3150:	80 2d       	mov	r24, r0
    3152:	bf 01       	movw	r22, r30
    3154:	ff 27       	eor	r31, r31
    3156:	93 58       	subi	r25, 0x83	; 131
    3158:	5f 4f       	sbci	r21, 0xFF	; 255
    315a:	3a f0       	brmi	.+14     	; 0x316a <__divsf3_pse+0x70>
    315c:	9e 3f       	cpi	r25, 0xFE	; 254
    315e:	51 05       	cpc	r21, r1
    3160:	78 f0       	brcs	.+30     	; 0x3180 <__divsf3_pse+0x86>
    3162:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__fp_inf>
    3166:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__fp_szero>
    316a:	5f 3f       	cpi	r21, 0xFF	; 255
    316c:	e4 f3       	brlt	.-8      	; 0x3166 <__divsf3_pse+0x6c>
    316e:	98 3e       	cpi	r25, 0xE8	; 232
    3170:	d4 f3       	brlt	.-12     	; 0x3166 <__divsf3_pse+0x6c>
    3172:	86 95       	lsr	r24
    3174:	77 95       	ror	r23
    3176:	67 95       	ror	r22
    3178:	b7 95       	ror	r27
    317a:	f7 95       	ror	r31
    317c:	9f 5f       	subi	r25, 0xFF	; 255
    317e:	c9 f7       	brne	.-14     	; 0x3172 <__divsf3_pse+0x78>
    3180:	88 0f       	add	r24, r24
    3182:	91 1d       	adc	r25, r1
    3184:	96 95       	lsr	r25
    3186:	87 95       	ror	r24
    3188:	97 f9       	bld	r25, 7
    318a:	08 95       	ret
    318c:	e1 e0       	ldi	r30, 0x01	; 1
    318e:	66 0f       	add	r22, r22
    3190:	77 1f       	adc	r23, r23
    3192:	88 1f       	adc	r24, r24
    3194:	bb 1f       	adc	r27, r27
    3196:	62 17       	cp	r22, r18
    3198:	73 07       	cpc	r23, r19
    319a:	84 07       	cpc	r24, r20
    319c:	ba 07       	cpc	r27, r26
    319e:	20 f0       	brcs	.+8      	; 0x31a8 <__divsf3_pse+0xae>
    31a0:	62 1b       	sub	r22, r18
    31a2:	73 0b       	sbc	r23, r19
    31a4:	84 0b       	sbc	r24, r20
    31a6:	ba 0b       	sbc	r27, r26
    31a8:	ee 1f       	adc	r30, r30
    31aa:	88 f7       	brcc	.-30     	; 0x318e <__divsf3_pse+0x94>
    31ac:	e0 95       	com	r30
    31ae:	08 95       	ret

000031b0 <__fixsfsi>:
    31b0:	0e 94 df 18 	call	0x31be	; 0x31be <__fixunssfsi>
    31b4:	68 94       	set
    31b6:	b1 11       	cpse	r27, r1
    31b8:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__fp_szero>
    31bc:	08 95       	ret

000031be <__fixunssfsi>:
    31be:	0e 94 9f 19 	call	0x333e	; 0x333e <__fp_splitA>
    31c2:	88 f0       	brcs	.+34     	; 0x31e6 <__fixunssfsi+0x28>
    31c4:	9f 57       	subi	r25, 0x7F	; 127
    31c6:	98 f0       	brcs	.+38     	; 0x31ee <__fixunssfsi+0x30>
    31c8:	b9 2f       	mov	r27, r25
    31ca:	99 27       	eor	r25, r25
    31cc:	b7 51       	subi	r27, 0x17	; 23
    31ce:	b0 f0       	brcs	.+44     	; 0x31fc <__fixunssfsi+0x3e>
    31d0:	e1 f0       	breq	.+56     	; 0x320a <__fixunssfsi+0x4c>
    31d2:	66 0f       	add	r22, r22
    31d4:	77 1f       	adc	r23, r23
    31d6:	88 1f       	adc	r24, r24
    31d8:	99 1f       	adc	r25, r25
    31da:	1a f0       	brmi	.+6      	; 0x31e2 <__fixunssfsi+0x24>
    31dc:	ba 95       	dec	r27
    31de:	c9 f7       	brne	.-14     	; 0x31d2 <__fixunssfsi+0x14>
    31e0:	14 c0       	rjmp	.+40     	; 0x320a <__fixunssfsi+0x4c>
    31e2:	b1 30       	cpi	r27, 0x01	; 1
    31e4:	91 f0       	breq	.+36     	; 0x320a <__fixunssfsi+0x4c>
    31e6:	0e 94 b9 19 	call	0x3372	; 0x3372 <__fp_zero>
    31ea:	b1 e0       	ldi	r27, 0x01	; 1
    31ec:	08 95       	ret
    31ee:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__fp_zero>
    31f2:	67 2f       	mov	r22, r23
    31f4:	78 2f       	mov	r23, r24
    31f6:	88 27       	eor	r24, r24
    31f8:	b8 5f       	subi	r27, 0xF8	; 248
    31fa:	39 f0       	breq	.+14     	; 0x320a <__fixunssfsi+0x4c>
    31fc:	b9 3f       	cpi	r27, 0xF9	; 249
    31fe:	cc f3       	brlt	.-14     	; 0x31f2 <__fixunssfsi+0x34>
    3200:	86 95       	lsr	r24
    3202:	77 95       	ror	r23
    3204:	67 95       	ror	r22
    3206:	b3 95       	inc	r27
    3208:	d9 f7       	brne	.-10     	; 0x3200 <__fixunssfsi+0x42>
    320a:	3e f4       	brtc	.+14     	; 0x321a <__fixunssfsi+0x5c>
    320c:	90 95       	com	r25
    320e:	80 95       	com	r24
    3210:	70 95       	com	r23
    3212:	61 95       	neg	r22
    3214:	7f 4f       	sbci	r23, 0xFF	; 255
    3216:	8f 4f       	sbci	r24, 0xFF	; 255
    3218:	9f 4f       	sbci	r25, 0xFF	; 255
    321a:	08 95       	ret

0000321c <__floatunsisf>:
    321c:	e8 94       	clt
    321e:	09 c0       	rjmp	.+18     	; 0x3232 <__floatsisf+0x12>

00003220 <__floatsisf>:
    3220:	97 fb       	bst	r25, 7
    3222:	3e f4       	brtc	.+14     	; 0x3232 <__floatsisf+0x12>
    3224:	90 95       	com	r25
    3226:	80 95       	com	r24
    3228:	70 95       	com	r23
    322a:	61 95       	neg	r22
    322c:	7f 4f       	sbci	r23, 0xFF	; 255
    322e:	8f 4f       	sbci	r24, 0xFF	; 255
    3230:	9f 4f       	sbci	r25, 0xFF	; 255
    3232:	99 23       	and	r25, r25
    3234:	a9 f0       	breq	.+42     	; 0x3260 <__floatsisf+0x40>
    3236:	f9 2f       	mov	r31, r25
    3238:	96 e9       	ldi	r25, 0x96	; 150
    323a:	bb 27       	eor	r27, r27
    323c:	93 95       	inc	r25
    323e:	f6 95       	lsr	r31
    3240:	87 95       	ror	r24
    3242:	77 95       	ror	r23
    3244:	67 95       	ror	r22
    3246:	b7 95       	ror	r27
    3248:	f1 11       	cpse	r31, r1
    324a:	f8 cf       	rjmp	.-16     	; 0x323c <__floatsisf+0x1c>
    324c:	fa f4       	brpl	.+62     	; 0x328c <__floatsisf+0x6c>
    324e:	bb 0f       	add	r27, r27
    3250:	11 f4       	brne	.+4      	; 0x3256 <__floatsisf+0x36>
    3252:	60 ff       	sbrs	r22, 0
    3254:	1b c0       	rjmp	.+54     	; 0x328c <__floatsisf+0x6c>
    3256:	6f 5f       	subi	r22, 0xFF	; 255
    3258:	7f 4f       	sbci	r23, 0xFF	; 255
    325a:	8f 4f       	sbci	r24, 0xFF	; 255
    325c:	9f 4f       	sbci	r25, 0xFF	; 255
    325e:	16 c0       	rjmp	.+44     	; 0x328c <__floatsisf+0x6c>
    3260:	88 23       	and	r24, r24
    3262:	11 f0       	breq	.+4      	; 0x3268 <__floatsisf+0x48>
    3264:	96 e9       	ldi	r25, 0x96	; 150
    3266:	11 c0       	rjmp	.+34     	; 0x328a <__floatsisf+0x6a>
    3268:	77 23       	and	r23, r23
    326a:	21 f0       	breq	.+8      	; 0x3274 <__floatsisf+0x54>
    326c:	9e e8       	ldi	r25, 0x8E	; 142
    326e:	87 2f       	mov	r24, r23
    3270:	76 2f       	mov	r23, r22
    3272:	05 c0       	rjmp	.+10     	; 0x327e <__floatsisf+0x5e>
    3274:	66 23       	and	r22, r22
    3276:	71 f0       	breq	.+28     	; 0x3294 <__floatsisf+0x74>
    3278:	96 e8       	ldi	r25, 0x86	; 134
    327a:	86 2f       	mov	r24, r22
    327c:	70 e0       	ldi	r23, 0x00	; 0
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	2a f0       	brmi	.+10     	; 0x328c <__floatsisf+0x6c>
    3282:	9a 95       	dec	r25
    3284:	66 0f       	add	r22, r22
    3286:	77 1f       	adc	r23, r23
    3288:	88 1f       	adc	r24, r24
    328a:	da f7       	brpl	.-10     	; 0x3282 <__floatsisf+0x62>
    328c:	88 0f       	add	r24, r24
    328e:	96 95       	lsr	r25
    3290:	87 95       	ror	r24
    3292:	97 f9       	bld	r25, 7
    3294:	08 95       	ret

00003296 <__fp_cmp>:
    3296:	99 0f       	add	r25, r25
    3298:	00 08       	sbc	r0, r0
    329a:	55 0f       	add	r21, r21
    329c:	aa 0b       	sbc	r26, r26
    329e:	e0 e8       	ldi	r30, 0x80	; 128
    32a0:	fe ef       	ldi	r31, 0xFE	; 254
    32a2:	16 16       	cp	r1, r22
    32a4:	17 06       	cpc	r1, r23
    32a6:	e8 07       	cpc	r30, r24
    32a8:	f9 07       	cpc	r31, r25
    32aa:	c0 f0       	brcs	.+48     	; 0x32dc <__fp_cmp+0x46>
    32ac:	12 16       	cp	r1, r18
    32ae:	13 06       	cpc	r1, r19
    32b0:	e4 07       	cpc	r30, r20
    32b2:	f5 07       	cpc	r31, r21
    32b4:	98 f0       	brcs	.+38     	; 0x32dc <__fp_cmp+0x46>
    32b6:	62 1b       	sub	r22, r18
    32b8:	73 0b       	sbc	r23, r19
    32ba:	84 0b       	sbc	r24, r20
    32bc:	95 0b       	sbc	r25, r21
    32be:	39 f4       	brne	.+14     	; 0x32ce <__fp_cmp+0x38>
    32c0:	0a 26       	eor	r0, r26
    32c2:	61 f0       	breq	.+24     	; 0x32dc <__fp_cmp+0x46>
    32c4:	23 2b       	or	r18, r19
    32c6:	24 2b       	or	r18, r20
    32c8:	25 2b       	or	r18, r21
    32ca:	21 f4       	brne	.+8      	; 0x32d4 <__fp_cmp+0x3e>
    32cc:	08 95       	ret
    32ce:	0a 26       	eor	r0, r26
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <__fp_cmp+0x3e>
    32d2:	a1 40       	sbci	r26, 0x01	; 1
    32d4:	a6 95       	lsr	r26
    32d6:	8f ef       	ldi	r24, 0xFF	; 255
    32d8:	81 1d       	adc	r24, r1
    32da:	81 1d       	adc	r24, r1
    32dc:	08 95       	ret

000032de <__fp_inf>:
    32de:	97 f9       	bld	r25, 7
    32e0:	9f 67       	ori	r25, 0x7F	; 127
    32e2:	80 e8       	ldi	r24, 0x80	; 128
    32e4:	70 e0       	ldi	r23, 0x00	; 0
    32e6:	60 e0       	ldi	r22, 0x00	; 0
    32e8:	08 95       	ret

000032ea <__fp_nan>:
    32ea:	9f ef       	ldi	r25, 0xFF	; 255
    32ec:	80 ec       	ldi	r24, 0xC0	; 192
    32ee:	08 95       	ret

000032f0 <__fp_pscA>:
    32f0:	00 24       	eor	r0, r0
    32f2:	0a 94       	dec	r0
    32f4:	16 16       	cp	r1, r22
    32f6:	17 06       	cpc	r1, r23
    32f8:	18 06       	cpc	r1, r24
    32fa:	09 06       	cpc	r0, r25
    32fc:	08 95       	ret

000032fe <__fp_pscB>:
    32fe:	00 24       	eor	r0, r0
    3300:	0a 94       	dec	r0
    3302:	12 16       	cp	r1, r18
    3304:	13 06       	cpc	r1, r19
    3306:	14 06       	cpc	r1, r20
    3308:	05 06       	cpc	r0, r21
    330a:	08 95       	ret

0000330c <__fp_round>:
    330c:	09 2e       	mov	r0, r25
    330e:	03 94       	inc	r0
    3310:	00 0c       	add	r0, r0
    3312:	11 f4       	brne	.+4      	; 0x3318 <__fp_round+0xc>
    3314:	88 23       	and	r24, r24
    3316:	52 f0       	brmi	.+20     	; 0x332c <__fp_round+0x20>
    3318:	bb 0f       	add	r27, r27
    331a:	40 f4       	brcc	.+16     	; 0x332c <__fp_round+0x20>
    331c:	bf 2b       	or	r27, r31
    331e:	11 f4       	brne	.+4      	; 0x3324 <__fp_round+0x18>
    3320:	60 ff       	sbrs	r22, 0
    3322:	04 c0       	rjmp	.+8      	; 0x332c <__fp_round+0x20>
    3324:	6f 5f       	subi	r22, 0xFF	; 255
    3326:	7f 4f       	sbci	r23, 0xFF	; 255
    3328:	8f 4f       	sbci	r24, 0xFF	; 255
    332a:	9f 4f       	sbci	r25, 0xFF	; 255
    332c:	08 95       	ret

0000332e <__fp_split3>:
    332e:	57 fd       	sbrc	r21, 7
    3330:	90 58       	subi	r25, 0x80	; 128
    3332:	44 0f       	add	r20, r20
    3334:	55 1f       	adc	r21, r21
    3336:	59 f0       	breq	.+22     	; 0x334e <__fp_splitA+0x10>
    3338:	5f 3f       	cpi	r21, 0xFF	; 255
    333a:	71 f0       	breq	.+28     	; 0x3358 <__fp_splitA+0x1a>
    333c:	47 95       	ror	r20

0000333e <__fp_splitA>:
    333e:	88 0f       	add	r24, r24
    3340:	97 fb       	bst	r25, 7
    3342:	99 1f       	adc	r25, r25
    3344:	61 f0       	breq	.+24     	; 0x335e <__fp_splitA+0x20>
    3346:	9f 3f       	cpi	r25, 0xFF	; 255
    3348:	79 f0       	breq	.+30     	; 0x3368 <__fp_splitA+0x2a>
    334a:	87 95       	ror	r24
    334c:	08 95       	ret
    334e:	12 16       	cp	r1, r18
    3350:	13 06       	cpc	r1, r19
    3352:	14 06       	cpc	r1, r20
    3354:	55 1f       	adc	r21, r21
    3356:	f2 cf       	rjmp	.-28     	; 0x333c <__fp_split3+0xe>
    3358:	46 95       	lsr	r20
    335a:	f1 df       	rcall	.-30     	; 0x333e <__fp_splitA>
    335c:	08 c0       	rjmp	.+16     	; 0x336e <__fp_splitA+0x30>
    335e:	16 16       	cp	r1, r22
    3360:	17 06       	cpc	r1, r23
    3362:	18 06       	cpc	r1, r24
    3364:	99 1f       	adc	r25, r25
    3366:	f1 cf       	rjmp	.-30     	; 0x334a <__fp_splitA+0xc>
    3368:	86 95       	lsr	r24
    336a:	71 05       	cpc	r23, r1
    336c:	61 05       	cpc	r22, r1
    336e:	08 94       	sec
    3370:	08 95       	ret

00003372 <__fp_zero>:
    3372:	e8 94       	clt

00003374 <__fp_szero>:
    3374:	bb 27       	eor	r27, r27
    3376:	66 27       	eor	r22, r22
    3378:	77 27       	eor	r23, r23
    337a:	cb 01       	movw	r24, r22
    337c:	97 f9       	bld	r25, 7
    337e:	08 95       	ret

00003380 <__gesf2>:
    3380:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fp_cmp>
    3384:	08 f4       	brcc	.+2      	; 0x3388 <__gesf2+0x8>
    3386:	8f ef       	ldi	r24, 0xFF	; 255
    3388:	08 95       	ret

0000338a <__mulsf3>:
    338a:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__mulsf3x>
    338e:	0c 94 86 19 	jmp	0x330c	; 0x330c <__fp_round>
    3392:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__fp_pscA>
    3396:	38 f0       	brcs	.+14     	; 0x33a6 <__mulsf3+0x1c>
    3398:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__fp_pscB>
    339c:	20 f0       	brcs	.+8      	; 0x33a6 <__mulsf3+0x1c>
    339e:	95 23       	and	r25, r21
    33a0:	11 f0       	breq	.+4      	; 0x33a6 <__mulsf3+0x1c>
    33a2:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__fp_inf>
    33a6:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__fp_nan>
    33aa:	11 24       	eor	r1, r1
    33ac:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__fp_szero>

000033b0 <__mulsf3x>:
    33b0:	0e 94 97 19 	call	0x332e	; 0x332e <__fp_split3>
    33b4:	70 f3       	brcs	.-36     	; 0x3392 <__mulsf3+0x8>

000033b6 <__mulsf3_pse>:
    33b6:	95 9f       	mul	r25, r21
    33b8:	c1 f3       	breq	.-16     	; 0x33aa <__mulsf3+0x20>
    33ba:	95 0f       	add	r25, r21
    33bc:	50 e0       	ldi	r21, 0x00	; 0
    33be:	55 1f       	adc	r21, r21
    33c0:	62 9f       	mul	r22, r18
    33c2:	f0 01       	movw	r30, r0
    33c4:	72 9f       	mul	r23, r18
    33c6:	bb 27       	eor	r27, r27
    33c8:	f0 0d       	add	r31, r0
    33ca:	b1 1d       	adc	r27, r1
    33cc:	63 9f       	mul	r22, r19
    33ce:	aa 27       	eor	r26, r26
    33d0:	f0 0d       	add	r31, r0
    33d2:	b1 1d       	adc	r27, r1
    33d4:	aa 1f       	adc	r26, r26
    33d6:	64 9f       	mul	r22, r20
    33d8:	66 27       	eor	r22, r22
    33da:	b0 0d       	add	r27, r0
    33dc:	a1 1d       	adc	r26, r1
    33de:	66 1f       	adc	r22, r22
    33e0:	82 9f       	mul	r24, r18
    33e2:	22 27       	eor	r18, r18
    33e4:	b0 0d       	add	r27, r0
    33e6:	a1 1d       	adc	r26, r1
    33e8:	62 1f       	adc	r22, r18
    33ea:	73 9f       	mul	r23, r19
    33ec:	b0 0d       	add	r27, r0
    33ee:	a1 1d       	adc	r26, r1
    33f0:	62 1f       	adc	r22, r18
    33f2:	83 9f       	mul	r24, r19
    33f4:	a0 0d       	add	r26, r0
    33f6:	61 1d       	adc	r22, r1
    33f8:	22 1f       	adc	r18, r18
    33fa:	74 9f       	mul	r23, r20
    33fc:	33 27       	eor	r19, r19
    33fe:	a0 0d       	add	r26, r0
    3400:	61 1d       	adc	r22, r1
    3402:	23 1f       	adc	r18, r19
    3404:	84 9f       	mul	r24, r20
    3406:	60 0d       	add	r22, r0
    3408:	21 1d       	adc	r18, r1
    340a:	82 2f       	mov	r24, r18
    340c:	76 2f       	mov	r23, r22
    340e:	6a 2f       	mov	r22, r26
    3410:	11 24       	eor	r1, r1
    3412:	9f 57       	subi	r25, 0x7F	; 127
    3414:	50 40       	sbci	r21, 0x00	; 0
    3416:	9a f0       	brmi	.+38     	; 0x343e <__mulsf3_pse+0x88>
    3418:	f1 f0       	breq	.+60     	; 0x3456 <__mulsf3_pse+0xa0>
    341a:	88 23       	and	r24, r24
    341c:	4a f0       	brmi	.+18     	; 0x3430 <__mulsf3_pse+0x7a>
    341e:	ee 0f       	add	r30, r30
    3420:	ff 1f       	adc	r31, r31
    3422:	bb 1f       	adc	r27, r27
    3424:	66 1f       	adc	r22, r22
    3426:	77 1f       	adc	r23, r23
    3428:	88 1f       	adc	r24, r24
    342a:	91 50       	subi	r25, 0x01	; 1
    342c:	50 40       	sbci	r21, 0x00	; 0
    342e:	a9 f7       	brne	.-22     	; 0x341a <__mulsf3_pse+0x64>
    3430:	9e 3f       	cpi	r25, 0xFE	; 254
    3432:	51 05       	cpc	r21, r1
    3434:	80 f0       	brcs	.+32     	; 0x3456 <__mulsf3_pse+0xa0>
    3436:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__fp_inf>
    343a:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__fp_szero>
    343e:	5f 3f       	cpi	r21, 0xFF	; 255
    3440:	e4 f3       	brlt	.-8      	; 0x343a <__mulsf3_pse+0x84>
    3442:	98 3e       	cpi	r25, 0xE8	; 232
    3444:	d4 f3       	brlt	.-12     	; 0x343a <__mulsf3_pse+0x84>
    3446:	86 95       	lsr	r24
    3448:	77 95       	ror	r23
    344a:	67 95       	ror	r22
    344c:	b7 95       	ror	r27
    344e:	f7 95       	ror	r31
    3450:	e7 95       	ror	r30
    3452:	9f 5f       	subi	r25, 0xFF	; 255
    3454:	c1 f7       	brne	.-16     	; 0x3446 <__mulsf3_pse+0x90>
    3456:	fe 2b       	or	r31, r30
    3458:	88 0f       	add	r24, r24
    345a:	91 1d       	adc	r25, r1
    345c:	96 95       	lsr	r25
    345e:	87 95       	ror	r24
    3460:	97 f9       	bld	r25, 7
    3462:	08 95       	ret

00003464 <__tablejump2__>:
    3464:	ee 0f       	add	r30, r30
    3466:	ff 1f       	adc	r31, r31
    3468:	88 1f       	adc	r24, r24
    346a:	8b bf       	out	0x3b, r24	; 59
    346c:	07 90       	elpm	r0, Z+
    346e:	f6 91       	elpm	r31, Z
    3470:	e0 2d       	mov	r30, r0
    3472:	19 94       	eijmp

00003474 <memcpy>:
    3474:	fb 01       	movw	r30, r22
    3476:	dc 01       	movw	r26, r24
    3478:	02 c0       	rjmp	.+4      	; 0x347e <memcpy+0xa>
    347a:	01 90       	ld	r0, Z+
    347c:	0d 92       	st	X+, r0
    347e:	41 50       	subi	r20, 0x01	; 1
    3480:	50 40       	sbci	r21, 0x00	; 0
    3482:	d8 f7       	brcc	.-10     	; 0x347a <memcpy+0x6>
    3484:	08 95       	ret

00003486 <memset>:
    3486:	dc 01       	movw	r26, r24
    3488:	01 c0       	rjmp	.+2      	; 0x348c <memset+0x6>
    348a:	6d 93       	st	X+, r22
    348c:	41 50       	subi	r20, 0x01	; 1
    348e:	50 40       	sbci	r21, 0x00	; 0
    3490:	e0 f7       	brcc	.-8      	; 0x348a <memset+0x4>
    3492:	08 95       	ret

00003494 <__itoa_ncheck>:
    3494:	bb 27       	eor	r27, r27
    3496:	4a 30       	cpi	r20, 0x0A	; 10
    3498:	31 f4       	brne	.+12     	; 0x34a6 <__itoa_ncheck+0x12>
    349a:	99 23       	and	r25, r25
    349c:	22 f4       	brpl	.+8      	; 0x34a6 <__itoa_ncheck+0x12>
    349e:	bd e2       	ldi	r27, 0x2D	; 45
    34a0:	90 95       	com	r25
    34a2:	81 95       	neg	r24
    34a4:	9f 4f       	sbci	r25, 0xFF	; 255
    34a6:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__utoa_common>

000034aa <__utoa_ncheck>:
    34aa:	bb 27       	eor	r27, r27

000034ac <__utoa_common>:
    34ac:	fb 01       	movw	r30, r22
    34ae:	55 27       	eor	r21, r21
    34b0:	aa 27       	eor	r26, r26
    34b2:	88 0f       	add	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	aa 1f       	adc	r26, r26
    34b8:	a4 17       	cp	r26, r20
    34ba:	10 f0       	brcs	.+4      	; 0x34c0 <__utoa_common+0x14>
    34bc:	a4 1b       	sub	r26, r20
    34be:	83 95       	inc	r24
    34c0:	50 51       	subi	r21, 0x10	; 16
    34c2:	b9 f7       	brne	.-18     	; 0x34b2 <__utoa_common+0x6>
    34c4:	a0 5d       	subi	r26, 0xD0	; 208
    34c6:	aa 33       	cpi	r26, 0x3A	; 58
    34c8:	08 f0       	brcs	.+2      	; 0x34cc <__utoa_common+0x20>
    34ca:	a9 5d       	subi	r26, 0xD9	; 217
    34cc:	a1 93       	st	Z+, r26
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	79 f7       	brne	.-34     	; 0x34b0 <__utoa_common+0x4>
    34d2:	b1 11       	cpse	r27, r1
    34d4:	b1 93       	st	Z+, r27
    34d6:	11 92       	st	Z+, r1
    34d8:	cb 01       	movw	r24, r22
    34da:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <strrev>

000034de <strrev>:
    34de:	dc 01       	movw	r26, r24
    34e0:	fc 01       	movw	r30, r24
    34e2:	67 2f       	mov	r22, r23
    34e4:	71 91       	ld	r23, Z+
    34e6:	77 23       	and	r23, r23
    34e8:	e1 f7       	brne	.-8      	; 0x34e2 <strrev+0x4>
    34ea:	32 97       	sbiw	r30, 0x02	; 2
    34ec:	04 c0       	rjmp	.+8      	; 0x34f6 <strrev+0x18>
    34ee:	7c 91       	ld	r23, X
    34f0:	6d 93       	st	X+, r22
    34f2:	70 83       	st	Z, r23
    34f4:	62 91       	ld	r22, -Z
    34f6:	ae 17       	cp	r26, r30
    34f8:	bf 07       	cpc	r27, r31
    34fa:	c8 f3       	brcs	.-14     	; 0x34ee <strrev+0x10>
    34fc:	08 95       	ret

000034fe <_exit>:
    34fe:	f8 94       	cli

00003500 <__stop_program>:
    3500:	ff cf       	rjmp	.-2      	; 0x3500 <__stop_program>
