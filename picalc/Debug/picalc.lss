
picalc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00802000  00006a34  00006ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c95  00802068  00802068  00006b30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006b30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f0  00000000  00000000  00006bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b9b3  00000000  00000000  000073bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004730  00000000  00000000  00012d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000073ae  00000000  00000000  0001749f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ed8  00000000  00000000  0001e850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00029c13  00000000  00000000  00020728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000416b  00000000  00000000  0004a33b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000718  00000000  00000000  0004e4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a08b  00000000  00000000  0004ebbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
       8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
       c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      10:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      14:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      18:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      1c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      20:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      24:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      28:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      2c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      30:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      34:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      38:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__vector_14>
      3c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      40:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      44:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      48:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      4c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      50:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      54:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      58:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      5c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      60:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      64:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      68:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      6c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      70:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      74:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      78:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      7c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      80:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      84:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      88:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      8c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      90:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      94:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      98:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      9c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      a8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      ac:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      b8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      bc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      c8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      cc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      d8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      dc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      e8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      ec:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      f8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
      fc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     100:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     104:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     108:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     10c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     110:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     114:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     118:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     11c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     120:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     124:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     128:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     12c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     130:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     134:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__vector_77>
     138:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     13c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     140:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     144:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     148:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     14c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     150:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     154:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     158:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     15c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     160:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     164:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     168:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     16c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     170:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     174:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     178:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     17c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     180:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     184:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     188:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     18c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     190:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     194:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     198:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     19c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1a8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1ac:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1b0:	0c 94 dd 23 	jmp	0x47ba	; 0x47ba <__vector_108>
     1b4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1b8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1bc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1c8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1cc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1d8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1dc:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1e8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1ec:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1f8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
     1fc:	98 1e       	adc	r9, r24
     1fe:	98 1e       	adc	r9, r24
     200:	98 1e       	adc	r9, r24
     202:	1f 1f       	adc	r17, r31
     204:	eb 1e       	adc	r14, r27
     206:	19 1f       	adc	r17, r25
     208:	98 1e       	adc	r9, r24
     20a:	98 1e       	adc	r9, r24
     20c:	1f 1f       	adc	r17, r31
     20e:	eb 1e       	adc	r14, r27

00000210 <__trampolines_start>:
     210:	0c 94 11 21 	jmp	0x4222	; 0x4222 <vUI>
     214:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <prvTimerTask>
     218:	0c 94 08 07 	jmp	0xe10	; 0xe10 <vEventGroupSetBitsCallback>
     21c:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <prvProcessReceivedCommands+0xce>
     220:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <prvProcessReceivedCommands+0x174>
     224:	0c 94 8e 22 	jmp	0x451c	; 0x451c <vCalc>
     228:	0c 94 45 22 	jmp	0x448a	; 0x448a <vButton>
     22c:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <prvProcessReceivedCommands+0x1dc>
     230:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <prvIdleTask>
     234:	0c 94 70 26 	jmp	0x4ce0	; 0x4ce0 <vDisplayUpdateTask>
     238:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <prvProcessReceivedCommands+0x1d0>

0000023c <__trampolines_end>:
     23c:	6e 61       	ori	r22, 0x1E	; 30
     23e:	6e 00       	.word	0x006e	; ????

00000240 <__c.2332>:
     240:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     250:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     260:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     270:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     280:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     290:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     300:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     310:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     320:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     330:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	cf ef       	ldi	r28, 0xFF	; 255
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df e3       	ldi	r29, 0x3F	; 63
     348:	de bf       	out	0x3e, r29	; 62
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	0c bf       	out	0x3c, r16	; 60

0000034e <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     34e:	ed ef       	ldi	r30, 0xFD	; 253
     350:	fc e2       	ldi	r31, 0x2C	; 44
     352:	8a ea       	ldi	r24, 0xAA	; 170
     354:	90 e4       	ldi	r25, 0x40	; 64
     356:	81 93       	st	Z+, r24
     358:	e0 30       	cpi	r30, 0x00	; 0
     35a:	f9 07       	cpc	r31, r25
     35c:	e0 f3       	brcs	.-8      	; 0x356 <init_mem+0x8>
	...

00000360 <__do_copy_data>:
     360:	10 e2       	ldi	r17, 0x20	; 32
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b0 e2       	ldi	r27, 0x20	; 32
     366:	e4 e3       	ldi	r30, 0x34	; 52
     368:	fa e6       	ldi	r31, 0x6A	; 106
     36a:	00 e0       	ldi	r16, 0x00	; 0
     36c:	0b bf       	out	0x3b, r16	; 59
     36e:	02 c0       	rjmp	.+4      	; 0x374 <__do_copy_data+0x14>
     370:	07 90       	elpm	r0, Z+
     372:	0d 92       	st	X+, r0
     374:	a8 36       	cpi	r26, 0x68	; 104
     376:	b1 07       	cpc	r27, r17
     378:	d9 f7       	brne	.-10     	; 0x370 <__do_copy_data+0x10>

0000037a <__do_clear_bss>:
     37a:	2c e2       	ldi	r18, 0x2C	; 44
     37c:	a8 e6       	ldi	r26, 0x68	; 104
     37e:	b0 e2       	ldi	r27, 0x20	; 32
     380:	01 c0       	rjmp	.+2      	; 0x384 <.do_clear_bss_start>

00000382 <.do_clear_bss_loop>:
     382:	1d 92       	st	X+, r1

00000384 <.do_clear_bss_start>:
     384:	ad 3f       	cpi	r26, 0xFD	; 253
     386:	b2 07       	cpc	r27, r18
     388:	e1 f7       	brne	.-8      	; 0x382 <.do_clear_bss_loop>
     38a:	0e 94 ca 20 	call	0x4194	; 0x4194 <main>
     38e:	0c 94 18 35 	jmp	0x6a30	; 0x6a30 <_exit>

00000392 <__bad_interrupt>:
     392:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000396 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     39e:	80 ea       	ldi	r24, 0xA0	; 160
     3a0:	96 e0       	ldi	r25, 0x06	; 6
     3a2:	20 e1       	ldi	r18, 0x10	; 16
     3a4:	fc 01       	movw	r30, r24
     3a6:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     3a8:	80 ea       	ldi	r24, 0xA0	; 160
     3aa:	96 e0       	ldi	r25, 0x06	; 6
     3ac:	20 e2       	ldi	r18, 0x20	; 32
     3ae:	fc 01       	movw	r30, r24
     3b0:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     3b2:	80 ea       	ldi	r24, 0xA0	; 160
     3b4:	96 e0       	ldi	r25, 0x06	; 6
     3b6:	20 e4       	ldi	r18, 0x40	; 64
     3b8:	fc 01       	movw	r30, r24
     3ba:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3bc:	80 ea       	ldi	r24, 0xA0	; 160
     3be:	96 e0       	ldi	r25, 0x06	; 6
     3c0:	20 e8       	ldi	r18, 0x80	; 128
     3c2:	fc 01       	movw	r30, r24
     3c4:	22 83       	std	Z+2, r18	; 0x02
 }
     3c6:	00 00       	nop
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3d6:	80 ea       	ldi	r24, 0xA0	; 160
     3d8:	96 e0       	ldi	r25, 0x06	; 6
     3da:	fc 01       	movw	r30, r24
     3dc:	80 85       	ldd	r24, Z+8	; 0x08
     3de:	88 2f       	mov	r24, r24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	80 71       	andi	r24, 0x10	; 16
     3e4:	99 27       	eor	r25, r25
     3e6:	95 95       	asr	r25
     3e8:	87 95       	ror	r24
     3ea:	95 95       	asr	r25
     3ec:	87 95       	ror	r24
     3ee:	95 95       	asr	r25
     3f0:	87 95       	ror	r24
     3f2:	95 95       	asr	r25
     3f4:	87 95       	ror	r24
     3f6:	89 2b       	or	r24, r25
     3f8:	89 f4       	brne	.+34     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		if(b1Count < 60000) {
     3fa:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <__data_end>
     3fe:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <__data_end+0x1>
     402:	80 36       	cpi	r24, 0x60	; 96
     404:	9a 4e       	sbci	r25, 0xEA	; 234
     406:	20 f5       	brcc	.+72     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			b1Count++;
     408:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <__data_end>
     40c:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <__data_end+0x1>
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	80 93 68 20 	sts	0x2068, r24	; 0x802068 <__data_end>
     416:	90 93 69 20 	sts	0x2069, r25	; 0x802069 <__data_end+0x1>
     41a:	1a c0       	rjmp	.+52     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     41c:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <__data_end>
     420:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <__data_end+0x1>
     424:	0b 97       	sbiw	r24, 0x0b	; 11
     426:	68 f0       	brcs	.+26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     428:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <__data_end>
     42c:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <__data_end+0x1>
     430:	c3 97       	sbiw	r24, 0x33	; 51
     432:	18 f0       	brcs	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     434:	10 92 e4 2c 	sts	0x2CE4, r1	; 0x802ce4 <b1Status>
     438:	07 c0       	rjmp	.+14     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	80 93 e4 2c 	sts	0x2CE4, r24	; 0x802ce4 <b1Status>
     440:	03 c0       	rjmp	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			}
		} else {
			b1Status = NOT_PRESSED;
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	80 93 e4 2c 	sts	0x2CE4, r24	; 0x802ce4 <b1Status>
		}
		b1Count = 0;
     448:	10 92 68 20 	sts	0x2068, r1	; 0x802068 <__data_end>
     44c:	10 92 69 20 	sts	0x2069, r1	; 0x802069 <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     450:	80 ea       	ldi	r24, 0xA0	; 160
     452:	96 e0       	ldi	r25, 0x06	; 6
     454:	fc 01       	movw	r30, r24
     456:	80 85       	ldd	r24, Z+8	; 0x08
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	80 72       	andi	r24, 0x20	; 32
     45e:	99 27       	eor	r25, r25
     460:	95 95       	asr	r25
     462:	87 95       	ror	r24
     464:	95 95       	asr	r25
     466:	87 95       	ror	r24
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	95 95       	asr	r25
     46e:	87 95       	ror	r24
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	89 2b       	or	r24, r25
     476:	89 f4       	brne	.+34     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		if(b2Count < 60000) {
     478:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <b2Count.3830>
     47c:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <b2Count.3830+0x1>
     480:	80 36       	cpi	r24, 0x60	; 96
     482:	9a 4e       	sbci	r25, 0xEA	; 234
     484:	20 f5       	brcc	.+72     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			b2Count++;
     486:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <b2Count.3830>
     48a:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <b2Count.3830+0x1>
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	80 93 6a 20 	sts	0x206A, r24	; 0x80206a <b2Count.3830>
     494:	90 93 6b 20 	sts	0x206B, r25	; 0x80206b <b2Count.3830+0x1>
     498:	1a c0       	rjmp	.+52     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     49a:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <b2Count.3830>
     49e:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <b2Count.3830+0x1>
     4a2:	0b 97       	sbiw	r24, 0x0b	; 11
     4a4:	68 f0       	brcs	.+26     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4a6:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <b2Count.3830>
     4aa:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <b2Count.3830+0x1>
     4ae:	c3 97       	sbiw	r24, 0x33	; 51
     4b0:	18 f0       	brcs	.+6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     4b2:	10 92 e5 2c 	sts	0x2CE5, r1	; 0x802ce5 <b2Status>
     4b6:	07 c0       	rjmp	.+14     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	80 93 e5 2c 	sts	0x2CE5, r24	; 0x802ce5 <b2Status>
     4be:	03 c0       	rjmp	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			}
		} else {
			b2Status = NOT_PRESSED;			
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	80 93 e5 2c 	sts	0x2CE5, r24	; 0x802ce5 <b2Status>
		}
		b2Count = 0;
     4c6:	10 92 6a 20 	sts	0x206A, r1	; 0x80206a <b2Count.3830>
     4ca:	10 92 6b 20 	sts	0x206B, r1	; 0x80206b <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     4ce:	80 ea       	ldi	r24, 0xA0	; 160
     4d0:	96 e0       	ldi	r25, 0x06	; 6
     4d2:	fc 01       	movw	r30, r24
     4d4:	80 85       	ldd	r24, Z+8	; 0x08
     4d6:	88 2f       	mov	r24, r24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	80 74       	andi	r24, 0x40	; 64
     4dc:	99 27       	eor	r25, r25
     4de:	08 2e       	mov	r0, r24
     4e0:	89 2f       	mov	r24, r25
     4e2:	00 0c       	add	r0, r0
     4e4:	88 1f       	adc	r24, r24
     4e6:	99 0b       	sbc	r25, r25
     4e8:	00 0c       	add	r0, r0
     4ea:	88 1f       	adc	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	89 2b       	or	r24, r25
     4f0:	89 f4       	brne	.+34     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		if(b3Count < 60000) {
     4f2:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <b3Count.3831>
     4f6:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <b3Count.3831+0x1>
     4fa:	80 36       	cpi	r24, 0x60	; 96
     4fc:	9a 4e       	sbci	r25, 0xEA	; 234
     4fe:	20 f5       	brcc	.+72     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
			b3Count++;
     500:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <b3Count.3831>
     504:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <b3Count.3831+0x1>
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	80 93 6c 20 	sts	0x206C, r24	; 0x80206c <b3Count.3831>
     50e:	90 93 6d 20 	sts	0x206D, r25	; 0x80206d <b3Count.3831+0x1>
     512:	1a c0       	rjmp	.+52     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     514:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <b3Count.3831>
     518:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <b3Count.3831+0x1>
     51c:	0b 97       	sbiw	r24, 0x0b	; 11
     51e:	68 f0       	brcs	.+26     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     520:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <b3Count.3831>
     524:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <b3Count.3831+0x1>
     528:	c3 97       	sbiw	r24, 0x33	; 51
     52a:	18 f0       	brcs	.+6      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     52c:	10 92 e6 2c 	sts	0x2CE6, r1	; 0x802ce6 <b3Status>
     530:	07 c0       	rjmp	.+14     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	80 93 e6 2c 	sts	0x2CE6, r24	; 0x802ce6 <b3Status>
     538:	03 c0       	rjmp	.+6      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
			}
		} else {
			b3Status = NOT_PRESSED;
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	80 93 e6 2c 	sts	0x2CE6, r24	; 0x802ce6 <b3Status>
		}
		b3Count = 0;
     540:	10 92 6c 20 	sts	0x206C, r1	; 0x80206c <b3Count.3831>
     544:	10 92 6d 20 	sts	0x206D, r1	; 0x80206d <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     548:	80 ea       	ldi	r24, 0xA0	; 160
     54a:	96 e0       	ldi	r25, 0x06	; 6
     54c:	fc 01       	movw	r30, r24
     54e:	80 85       	ldd	r24, Z+8	; 0x08
     550:	88 23       	and	r24, r24
     552:	8c f0       	brlt	.+34     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
		if(b4Count < 60000) {
     554:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <b4Count.3832>
     558:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <b4Count.3832+0x1>
     55c:	80 36       	cpi	r24, 0x60	; 96
     55e:	9a 4e       	sbci	r25, 0xEA	; 234
     560:	20 f5       	brcc	.+72     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
			b4Count++;
     562:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <b4Count.3832>
     566:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <b4Count.3832+0x1>
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <b4Count.3832>
     570:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     574:	1a c0       	rjmp	.+52     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     576:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <b4Count.3832>
     57a:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <b4Count.3832+0x1>
     57e:	0b 97       	sbiw	r24, 0x0b	; 11
     580:	68 f0       	brcs	.+26     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     582:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <b4Count.3832>
     586:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <b4Count.3832+0x1>
     58a:	c3 97       	sbiw	r24, 0x33	; 51
     58c:	18 f0       	brcs	.+6      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     58e:	10 92 e7 2c 	sts	0x2CE7, r1	; 0x802ce7 <b4Status>
     592:	07 c0       	rjmp	.+14     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 e7 2c 	sts	0x2CE7, r24	; 0x802ce7 <b4Status>
     59a:	03 c0       	rjmp	.+6      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
			}
		} else {
			b4Status = NOT_PRESSED;
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	80 93 e7 2c 	sts	0x2CE7, r24	; 0x802ce7 <b4Status>
		}
		b4Count = 0;
     5a2:	10 92 6e 20 	sts	0x206E, r1	; 0x80206e <b4Count.3832>
     5a6:	10 92 6f 20 	sts	0x206F, r1	; 0x80206f <b4Count.3832+0x1>
	}
 }
     5aa:	00 00       	nop
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	1f 92       	push	r1
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	88 2f       	mov	r24, r24
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	91 05       	cpc	r25, r1
     5c8:	79 f0       	breq	.+30     	; 0x5e8 <getButtonPress+0x36>
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	91 05       	cpc	r25, r1
     5ce:	1c f4       	brge	.+6      	; 0x5d6 <getButtonPress+0x24>
     5d0:	89 2b       	or	r24, r25
     5d2:	39 f0       	breq	.+14     	; 0x5e2 <getButtonPress+0x30>
     5d4:	12 c0       	rjmp	.+36     	; 0x5fa <getButtonPress+0x48>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	91 05       	cpc	r25, r1
     5da:	49 f0       	breq	.+18     	; 0x5ee <getButtonPress+0x3c>
     5dc:	03 97       	sbiw	r24, 0x03	; 3
     5de:	51 f0       	breq	.+20     	; 0x5f4 <getButtonPress+0x42>
     5e0:	0c c0       	rjmp	.+24     	; 0x5fa <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     5e2:	80 91 e4 2c 	lds	r24, 0x2CE4	; 0x802ce4 <b1Status>
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     5e8:	80 91 e5 2c 	lds	r24, 0x2CE5	; 0x802ce5 <b2Status>
     5ec:	07 c0       	rjmp	.+14     	; 0x5fc <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     5ee:	80 91 e6 2c 	lds	r24, 0x2CE6	; 0x802ce6 <b3Status>
     5f2:	04 c0       	rjmp	.+8      	; 0x5fc <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     5f4:	80 91 e7 2c 	lds	r24, 0x2CE7	; 0x802ce7 <b4Status>
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	0f 90       	pop	r0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     604:	0f 93       	push	r16
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	00 d0       	rcall	.+0      	; 0x60c <CCPWrite+0x8>
     60c:	00 d0       	rcall	.+0      	; 0x60e <CCPWrite+0xa>
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	8c 83       	std	Y+4, r24	; 0x04
     614:	9d 83       	std	Y+5, r25	; 0x05
     616:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     618:	8f e3       	ldi	r24, 0x3F	; 63
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	fc 01       	movw	r30, r24
     61e:	80 81       	ld	r24, Z
     620:	8b 83       	std	Y+3, r24	; 0x03
     622:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	9d 81       	ldd	r25, Y+5	; 0x05
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     62c:	8b e3       	ldi	r24, 0x3B	; 59
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	fc 01       	movw	r30, r24
     632:	10 82       	st	Z, r1
#endif
	asm volatile(
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	2e 81       	ldd	r18, Y+6	; 0x06
     63a:	fc 01       	movw	r30, r24
     63c:	08 ed       	ldi	r16, 0xD8	; 216
     63e:	04 bf       	out	0x34, r16	; 52
     640:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     642:	8f e3       	ldi	r24, 0x3F	; 63
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	2b 81       	ldd	r18, Y+3	; 0x03
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
#endif
}
     64c:	00 00       	nop
     64e:	26 96       	adiw	r28, 0x06	; 6
     650:	cd bf       	out	0x3d, r28	; 61
     652:	de bf       	out	0x3e, r29	; 62
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	0f 91       	pop	r16
     65a:	08 95       	ret

0000065c <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	00 d0       	rcall	.+0      	; 0x662 <CLKSYS_XOSC_Config+0x6>
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	6a 83       	std	Y+2, r22	; 0x02
     66a:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     66c:	80 e5       	ldi	r24, 0x50	; 80
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	2a 81       	ldd	r18, Y+2	; 0x02
     672:	22 23       	and	r18, r18
     674:	11 f0       	breq	.+4      	; 0x67a <CLKSYS_XOSC_Config+0x1e>
     676:	20 e2       	ldi	r18, 0x20	; 32
     678:	01 c0       	rjmp	.+2      	; 0x67c <CLKSYS_XOSC_Config+0x20>
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	39 81       	ldd	r19, Y+1	; 0x01
     67e:	32 2b       	or	r19, r18
     680:	2b 81       	ldd	r18, Y+3	; 0x03
     682:	23 2b       	or	r18, r19
     684:	fc 01       	movw	r30, r24
     686:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     688:	00 00       	nop
     68a:	23 96       	adiw	r28, 0x03	; 3
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	de bf       	out	0x3e, r29	; 62
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	1f 92       	push	r1
     69c:	1f 92       	push	r1
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	89 83       	std	Y+1, r24	; 0x01
     6a4:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	8f 71       	andi	r24, 0x1F	; 31
     6aa:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     6ac:	80 e5       	ldi	r24, 0x50	; 80
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	39 81       	ldd	r19, Y+1	; 0x01
     6b2:	2a 81       	ldd	r18, Y+2	; 0x02
     6b4:	23 2b       	or	r18, r19
     6b6:	fc 01       	movw	r30, r24
     6b8:	25 83       	std	Z+5, r18	; 0x05
}
     6ba:	00 00       	nop
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	1f 92       	push	r1
     6cc:	1f 92       	push	r1
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     6d4:	80 e5       	ldi	r24, 0x50	; 80
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	20 e5       	ldi	r18, 0x50	; 80
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	32 2f       	mov	r19, r18
     6e2:	2a 81       	ldd	r18, Y+2	; 0x02
     6e4:	20 95       	com	r18
     6e6:	23 23       	and	r18, r19
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     6ec:	80 e5       	ldi	r24, 0x50	; 80
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	fc 01       	movw	r30, r24
     6f2:	90 81       	ld	r25, Z
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	89 23       	and	r24, r25
     6f8:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	00 d0       	rcall	.+0      	; 0x70c <CLKSYS_Prescalers_Config+0x6>
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	8a 83       	std	Y+2, r24	; 0x02
     712:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     714:	9a 81       	ldd	r25, Y+2	; 0x02
     716:	8b 81       	ldd	r24, Y+3	; 0x03
     718:	89 2b       	or	r24, r25
     71a:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     71c:	69 81       	ldd	r22, Y+1	; 0x01
     71e:	81 e4       	ldi	r24, 0x41	; 65
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 02 03 	call	0x604	; 0x604 <CCPWrite>
}
     726:	00 00       	nop
     728:	23 96       	adiw	r28, 0x03	; 3
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     742:	80 e4       	ldi	r24, 0x40	; 64
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	fc 01       	movw	r30, r24
     748:	80 81       	ld	r24, Z
     74a:	98 2f       	mov	r25, r24
     74c:	98 7f       	andi	r25, 0xF8	; 248
     74e:	8a 81       	ldd	r24, Y+2	; 0x02
     750:	89 2b       	or	r24, r25
     752:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     754:	69 81       	ldd	r22, Y+1	; 0x01
     756:	80 e4       	ldi	r24, 0x40	; 64
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 02 03 	call	0x604	; 0x604 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     75e:	80 e4       	ldi	r24, 0x40	; 64
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	fc 01       	movw	r30, r24
     764:	90 81       	ld	r25, Z
     766:	8a 81       	ldd	r24, Y+2	; 0x02
     768:	89 23       	and	r24, r25
     76a:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     76c:	89 81       	ldd	r24, Y+1	; 0x01
}
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	00 d0       	rcall	.+0      	; 0x77e <TC0_ConfigClockSource+0x6>
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	89 83       	std	Y+1, r24	; 0x01
     784:	9a 83       	std	Y+2, r25	; 0x02
     786:	6b 83       	std	Y+3, r22	; 0x03
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	9a 81       	ldd	r25, Y+2	; 0x02
     78c:	fc 01       	movw	r30, r24
     78e:	80 81       	ld	r24, Z
     790:	98 2f       	mov	r25, r24
     792:	90 7f       	andi	r25, 0xF0	; 240
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	89 2b       	or	r24, r25
     798:	28 2f       	mov	r18, r24
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
     7a2:	00 00       	nop
     7a4:	23 96       	adiw	r28, 0x03	; 3
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <TC0_ConfigWGM>:
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <TC0_ConfigWGM+0x6>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	6b 83       	std	Y+3, r22	; 0x03
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	9a 81       	ldd	r25, Y+2	; 0x02
     7c4:	fc 01       	movw	r30, r24
     7c6:	81 81       	ldd	r24, Z+1	; 0x01
     7c8:	98 2f       	mov	r25, r24
     7ca:	98 7f       	andi	r25, 0xF8	; 248
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	89 2b       	or	r24, r25
     7d0:	28 2f       	mov	r18, r24
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	fc 01       	movw	r30, r24
     7d8:	21 83       	std	Z+1, r18	; 0x01
     7da:	00 00       	nop
     7dc:	23 96       	adiw	r28, 0x03	; 3
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <TC0_SetOverflowIntLevel+0x6>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	9a 83       	std	Y+2, r25	; 0x02
     7f6:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	fc 01       	movw	r30, r24
     7fe:	86 81       	ldd	r24, Z+6	; 0x06
     800:	98 2f       	mov	r25, r24
     802:	9c 7f       	andi	r25, 0xFC	; 252
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	89 2b       	or	r24, r25
     808:	28 2f       	mov	r18, r24
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	fc 01       	movw	r30, r24
     810:	26 83       	std	Z+6, r18	; 0x06
}
     812:	00 00       	nop
     814:	23 96       	adiw	r28, 0x03	; 3
     816:	cd bf       	out	0x3d, r28	; 61
     818:	de bf       	out	0x3e, r29	; 62
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <vApplicationStackOverflowHook+0x6>
     826:	1f 92       	push	r1
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	89 83       	std	Y+1, r24	; 0x01
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	6b 83       	std	Y+3, r22	; 0x03
     832:	7c 83       	std	Y+4, r23	; 0x04
     834:	8b e2       	ldi	r24, 0x2B	; 43
     836:	0e 94 24 04 	call	0x848	; 0x848 <error>
     83a:	00 00       	nop
     83c:	24 96       	adiw	r28, 0x04	; 4
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	de bf       	out	0x3e, r29	; 62
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	1f 92       	push	r1
     84e:	1f 92       	push	r1
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	8b 32       	cpi	r24, 0x2B	; 43
     85a:	19 f4       	brne	.+6      	; 0x862 <error+0x1a>
	 a = 1;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	0e c0       	rjmp	.+28     	; 0x87e <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	8c 32       	cpi	r24, 0x2C	; 44
     866:	19 f4       	brne	.+6      	; 0x86e <error+0x26>
	 a = 2;
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	08 c0       	rjmp	.+16     	; 0x87e <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	8f 32       	cpi	r24, 0x2F	; 47
     872:	19 f4       	brne	.+6      	; 0x87a <error+0x32>
	 a = 3;
     874:	83 e0       	ldi	r24, 0x03	; 3
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	02 c0       	rjmp	.+4      	; 0x87e <error+0x36>
	 else
	 a = 4;
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     87e:	0e 94 47 04 	call	0x88e	; 0x88e <software_reset>
 }
     882:	00 00       	nop
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     896:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     898:	84 e3       	ldi	r24, 0x34	; 52
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	28 ed       	ldi	r18, 0xD8	; 216
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     8a2:	88 e7       	ldi	r24, 0x78	; 120
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	fc 01       	movw	r30, r24
     8aa:	21 83       	std	Z+1, r18	; 0x01
     8ac:	00 00       	nop
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	1f 92       	push	r1
     8ba:	1f 92       	push	r1
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	80 e1       	ldi	r24, 0x10	; 16
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	89 2b       	or	r24, r25
     8d2:	61 f0       	breq	.+24     	; 0x8ec <xEventGroupCreate+0x38>
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	fc 01       	movw	r30, r24
     8da:	10 82       	st	Z, r1
     8dc:	11 82       	std	Z+1, r1	; 0x01
     8de:	12 82       	std	Z+2, r1	; 0x02
     8e0:	13 82       	std	Z+3, r1	; 0x03
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	9a 81       	ldd	r25, Y+2	; 0x02
     8e6:	04 96       	adiw	r24, 0x04	; 4
     8e8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <xEventGroupWaitBits>:
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	6d 97       	sbiw	r28, 0x1d	; 29
     910:	cd bf       	out	0x3d, r28	; 61
     912:	de bf       	out	0x3e, r29	; 62
     914:	8a 8b       	std	Y+18, r24	; 0x12
     916:	9b 8b       	std	Y+19, r25	; 0x13
     918:	4c 8b       	std	Y+20, r20	; 0x14
     91a:	5d 8b       	std	Y+21, r21	; 0x15
     91c:	6e 8b       	std	Y+22, r22	; 0x16
     91e:	7f 8b       	std	Y+23, r23	; 0x17
     920:	28 8f       	std	Y+24, r18	; 0x18
     922:	09 8f       	std	Y+25, r16	; 0x19
     924:	ca 8e       	std	Y+26, r12	; 0x1a
     926:	db 8e       	std	Y+27, r13	; 0x1b
     928:	ec 8e       	std	Y+28, r14	; 0x1c
     92a:	fd 8e       	std	Y+29, r15	; 0x1d
     92c:	8a 89       	ldd	r24, Y+18	; 0x12
     92e:	9b 89       	ldd	r25, Y+19	; 0x13
     930:	89 87       	std	Y+9, r24	; 0x09
     932:	9a 87       	std	Y+10, r25	; 0x0a
     934:	1d 82       	std	Y+5, r1	; 0x05
     936:	1e 82       	std	Y+6, r1	; 0x06
     938:	1f 82       	std	Y+7, r1	; 0x07
     93a:	18 86       	std	Y+8, r1	; 0x08
     93c:	1b 86       	std	Y+11, r1	; 0x0b
     93e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <vTaskSuspendAll>
     942:	89 85       	ldd	r24, Y+9	; 0x09
     944:	9a 85       	ldd	r25, Y+10	; 0x0a
     946:	fc 01       	movw	r30, r24
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	a2 81       	ldd	r26, Z+2	; 0x02
     94e:	b3 81       	ldd	r27, Z+3	; 0x03
     950:	8c 87       	std	Y+12, r24	; 0x0c
     952:	9d 87       	std	Y+13, r25	; 0x0d
     954:	ae 87       	std	Y+14, r26	; 0x0e
     956:	bf 87       	std	Y+15, r27	; 0x0f
     958:	2c 89       	ldd	r18, Y+20	; 0x14
     95a:	3d 89       	ldd	r19, Y+21	; 0x15
     95c:	4e 89       	ldd	r20, Y+22	; 0x16
     95e:	5f 89       	ldd	r21, Y+23	; 0x17
     960:	8c 85       	ldd	r24, Y+12	; 0x0c
     962:	9d 85       	ldd	r25, Y+13	; 0x0d
     964:	ae 85       	ldd	r26, Y+14	; 0x0e
     966:	bf 85       	ldd	r27, Y+15	; 0x0f
     968:	09 8d       	ldd	r16, Y+25	; 0x19
     96a:	bc 01       	movw	r22, r24
     96c:	cd 01       	movw	r24, r26
     96e:	0e 94 26 07 	call	0xe4c	; 0xe4c <prvTestWaitCondition>
     972:	88 8b       	std	Y+16, r24	; 0x10
     974:	88 89       	ldd	r24, Y+16	; 0x10
     976:	88 23       	and	r24, r24
     978:	59 f1       	breq	.+86     	; 0x9d0 <xEventGroupWaitBits+0xd6>
     97a:	8c 85       	ldd	r24, Y+12	; 0x0c
     97c:	9d 85       	ldd	r25, Y+13	; 0x0d
     97e:	ae 85       	ldd	r26, Y+14	; 0x0e
     980:	bf 85       	ldd	r27, Y+15	; 0x0f
     982:	89 83       	std	Y+1, r24	; 0x01
     984:	9a 83       	std	Y+2, r25	; 0x02
     986:	ab 83       	std	Y+3, r26	; 0x03
     988:	bc 83       	std	Y+4, r27	; 0x04
     98a:	1a 8e       	std	Y+26, r1	; 0x1a
     98c:	1b 8e       	std	Y+27, r1	; 0x1b
     98e:	1c 8e       	std	Y+28, r1	; 0x1c
     990:	1d 8e       	std	Y+29, r1	; 0x1d
     992:	88 8d       	ldd	r24, Y+24	; 0x18
     994:	88 23       	and	r24, r24
     996:	09 f4       	brne	.+2      	; 0x99a <xEventGroupWaitBits+0xa0>
     998:	65 c0       	rjmp	.+202    	; 0xa64 <xEventGroupWaitBits+0x16a>
     99a:	89 85       	ldd	r24, Y+9	; 0x09
     99c:	9a 85       	ldd	r25, Y+10	; 0x0a
     99e:	fc 01       	movw	r30, r24
     9a0:	20 81       	ld	r18, Z
     9a2:	31 81       	ldd	r19, Z+1	; 0x01
     9a4:	42 81       	ldd	r20, Z+2	; 0x02
     9a6:	53 81       	ldd	r21, Z+3	; 0x03
     9a8:	8c 89       	ldd	r24, Y+20	; 0x14
     9aa:	9d 89       	ldd	r25, Y+21	; 0x15
     9ac:	ae 89       	ldd	r26, Y+22	; 0x16
     9ae:	bf 89       	ldd	r27, Y+23	; 0x17
     9b0:	80 95       	com	r24
     9b2:	90 95       	com	r25
     9b4:	a0 95       	com	r26
     9b6:	b0 95       	com	r27
     9b8:	82 23       	and	r24, r18
     9ba:	93 23       	and	r25, r19
     9bc:	a4 23       	and	r26, r20
     9be:	b5 23       	and	r27, r21
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	f9 01       	movw	r30, r18
     9c6:	80 83       	st	Z, r24
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	a2 83       	std	Z+2, r26	; 0x02
     9cc:	b3 83       	std	Z+3, r27	; 0x03
     9ce:	4a c0       	rjmp	.+148    	; 0xa64 <xEventGroupWaitBits+0x16a>
     9d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9d4:	ac 8d       	ldd	r26, Y+28	; 0x1c
     9d6:	bd 8d       	ldd	r27, Y+29	; 0x1d
     9d8:	89 2b       	or	r24, r25
     9da:	8a 2b       	or	r24, r26
     9dc:	8b 2b       	or	r24, r27
     9de:	59 f4       	brne	.+22     	; 0x9f6 <xEventGroupWaitBits+0xfc>
     9e0:	8c 85       	ldd	r24, Y+12	; 0x0c
     9e2:	9d 85       	ldd	r25, Y+13	; 0x0d
     9e4:	ae 85       	ldd	r26, Y+14	; 0x0e
     9e6:	bf 85       	ldd	r27, Y+15	; 0x0f
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	9a 83       	std	Y+2, r25	; 0x02
     9ec:	ab 83       	std	Y+3, r26	; 0x03
     9ee:	bc 83       	std	Y+4, r27	; 0x04
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	8b 87       	std	Y+11, r24	; 0x0b
     9f4:	37 c0       	rjmp	.+110    	; 0xa64 <xEventGroupWaitBits+0x16a>
     9f6:	88 8d       	ldd	r24, Y+24	; 0x18
     9f8:	88 23       	and	r24, r24
     9fa:	49 f0       	breq	.+18     	; 0xa0e <xEventGroupWaitBits+0x114>
     9fc:	8d 81       	ldd	r24, Y+5	; 0x05
     9fe:	9e 81       	ldd	r25, Y+6	; 0x06
     a00:	af 81       	ldd	r26, Y+7	; 0x07
     a02:	b8 85       	ldd	r27, Y+8	; 0x08
     a04:	b1 60       	ori	r27, 0x01	; 1
     a06:	8d 83       	std	Y+5, r24	; 0x05
     a08:	9e 83       	std	Y+6, r25	; 0x06
     a0a:	af 83       	std	Y+7, r26	; 0x07
     a0c:	b8 87       	std	Y+8, r27	; 0x08
     a0e:	89 8d       	ldd	r24, Y+25	; 0x19
     a10:	88 23       	and	r24, r24
     a12:	49 f0       	breq	.+18     	; 0xa26 <xEventGroupWaitBits+0x12c>
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	9e 81       	ldd	r25, Y+6	; 0x06
     a18:	af 81       	ldd	r26, Y+7	; 0x07
     a1a:	b8 85       	ldd	r27, Y+8	; 0x08
     a1c:	b4 60       	ori	r27, 0x04	; 4
     a1e:	8d 83       	std	Y+5, r24	; 0x05
     a20:	9e 83       	std	Y+6, r25	; 0x06
     a22:	af 83       	std	Y+7, r26	; 0x07
     a24:	b8 87       	std	Y+8, r27	; 0x08
     a26:	2c 89       	ldd	r18, Y+20	; 0x14
     a28:	3d 89       	ldd	r19, Y+21	; 0x15
     a2a:	4e 89       	ldd	r20, Y+22	; 0x16
     a2c:	5f 89       	ldd	r21, Y+23	; 0x17
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	9e 81       	ldd	r25, Y+6	; 0x06
     a32:	af 81       	ldd	r26, Y+7	; 0x07
     a34:	b8 85       	ldd	r27, Y+8	; 0x08
     a36:	82 2b       	or	r24, r18
     a38:	93 2b       	or	r25, r19
     a3a:	a4 2b       	or	r26, r20
     a3c:	b5 2b       	or	r27, r21
     a3e:	29 85       	ldd	r18, Y+9	; 0x09
     a40:	3a 85       	ldd	r19, Y+10	; 0x0a
     a42:	f9 01       	movw	r30, r18
     a44:	34 96       	adiw	r30, 0x04	; 4
     a46:	2a 8d       	ldd	r18, Y+26	; 0x1a
     a48:	3b 8d       	ldd	r19, Y+27	; 0x1b
     a4a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a4c:	5d 8d       	ldd	r21, Y+29	; 0x1d
     a4e:	89 01       	movw	r16, r18
     a50:	9a 01       	movw	r18, r20
     a52:	ac 01       	movw	r20, r24
     a54:	bd 01       	movw	r22, r26
     a56:	cf 01       	movw	r24, r30
     a58:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <vTaskPlaceOnUnorderedEventList>
     a5c:	19 82       	std	Y+1, r1	; 0x01
     a5e:	1a 82       	std	Y+2, r1	; 0x02
     a60:	1b 82       	std	Y+3, r1	; 0x03
     a62:	1c 82       	std	Y+4, r1	; 0x04
     a64:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
     a68:	89 8b       	std	Y+17, r24	; 0x11
     a6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a6e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a70:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a72:	89 2b       	or	r24, r25
     a74:	8a 2b       	or	r24, r26
     a76:	8b 2b       	or	r24, r27
     a78:	09 f4       	brne	.+2      	; 0xa7c <xEventGroupWaitBits+0x182>
     a7a:	65 c0       	rjmp	.+202    	; 0xb46 <xEventGroupWaitBits+0x24c>
     a7c:	89 89       	ldd	r24, Y+17	; 0x11
     a7e:	88 23       	and	r24, r24
     a80:	11 f4       	brne	.+4      	; 0xa86 <xEventGroupWaitBits+0x18c>
     a82:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
     a86:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <uxTaskResetEventItemValue>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	89 83       	std	Y+1, r24	; 0x01
     a90:	9a 83       	std	Y+2, r25	; 0x02
     a92:	ab 83       	std	Y+3, r26	; 0x03
     a94:	bc 83       	std	Y+4, r27	; 0x04
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	ab 81       	ldd	r26, Y+3	; 0x03
     a9c:	bc 81       	ldd	r27, Y+4	; 0x04
     a9e:	88 27       	eor	r24, r24
     aa0:	99 27       	eor	r25, r25
     aa2:	aa 27       	eor	r26, r26
     aa4:	b2 70       	andi	r27, 0x02	; 2
     aa6:	89 2b       	or	r24, r25
     aa8:	8a 2b       	or	r24, r26
     aaa:	8b 2b       	or	r24, r27
     aac:	09 f0       	breq	.+2      	; 0xab0 <xEventGroupWaitBits+0x1b6>
     aae:	42 c0       	rjmp	.+132    	; 0xb34 <xEventGroupWaitBits+0x23a>
     ab0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ab4:	ff 93       	push	r31
     ab6:	f8 7f       	andi	r31, 0xF8	; 248
     ab8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     abc:	89 85       	ldd	r24, Y+9	; 0x09
     abe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac0:	fc 01       	movw	r30, r24
     ac2:	80 81       	ld	r24, Z
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	a2 81       	ldd	r26, Z+2	; 0x02
     ac8:	b3 81       	ldd	r27, Z+3	; 0x03
     aca:	89 83       	std	Y+1, r24	; 0x01
     acc:	9a 83       	std	Y+2, r25	; 0x02
     ace:	ab 83       	std	Y+3, r26	; 0x03
     ad0:	bc 83       	std	Y+4, r27	; 0x04
     ad2:	2c 89       	ldd	r18, Y+20	; 0x14
     ad4:	3d 89       	ldd	r19, Y+21	; 0x15
     ad6:	4e 89       	ldd	r20, Y+22	; 0x16
     ad8:	5f 89       	ldd	r21, Y+23	; 0x17
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	ab 81       	ldd	r26, Y+3	; 0x03
     ae0:	bc 81       	ldd	r27, Y+4	; 0x04
     ae2:	09 8d       	ldd	r16, Y+25	; 0x19
     ae4:	bc 01       	movw	r22, r24
     ae6:	cd 01       	movw	r24, r26
     ae8:	0e 94 26 07 	call	0xe4c	; 0xe4c <prvTestWaitCondition>
     aec:	88 23       	and	r24, r24
     aee:	e9 f0       	breq	.+58     	; 0xb2a <xEventGroupWaitBits+0x230>
     af0:	88 8d       	ldd	r24, Y+24	; 0x18
     af2:	88 23       	and	r24, r24
     af4:	d1 f0       	breq	.+52     	; 0xb2a <xEventGroupWaitBits+0x230>
     af6:	89 85       	ldd	r24, Y+9	; 0x09
     af8:	9a 85       	ldd	r25, Y+10	; 0x0a
     afa:	fc 01       	movw	r30, r24
     afc:	20 81       	ld	r18, Z
     afe:	31 81       	ldd	r19, Z+1	; 0x01
     b00:	42 81       	ldd	r20, Z+2	; 0x02
     b02:	53 81       	ldd	r21, Z+3	; 0x03
     b04:	8c 89       	ldd	r24, Y+20	; 0x14
     b06:	9d 89       	ldd	r25, Y+21	; 0x15
     b08:	ae 89       	ldd	r26, Y+22	; 0x16
     b0a:	bf 89       	ldd	r27, Y+23	; 0x17
     b0c:	80 95       	com	r24
     b0e:	90 95       	com	r25
     b10:	a0 95       	com	r26
     b12:	b0 95       	com	r27
     b14:	82 23       	and	r24, r18
     b16:	93 23       	and	r25, r19
     b18:	a4 23       	and	r26, r20
     b1a:	b5 23       	and	r27, r21
     b1c:	29 85       	ldd	r18, Y+9	; 0x09
     b1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     b20:	f9 01       	movw	r30, r18
     b22:	80 83       	st	Z, r24
     b24:	91 83       	std	Z+1, r25	; 0x01
     b26:	a2 83       	std	Z+2, r26	; 0x02
     b28:	b3 83       	std	Z+3, r27	; 0x03
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	8b 87       	std	Y+11, r24	; 0x0b
     b2e:	ff 91       	pop	r31
     b30:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	ab 81       	ldd	r26, Y+3	; 0x03
     b3a:	bc 81       	ldd	r27, Y+4	; 0x04
     b3c:	bb 27       	eor	r27, r27
     b3e:	89 83       	std	Y+1, r24	; 0x01
     b40:	9a 83       	std	Y+2, r25	; 0x02
     b42:	ab 83       	std	Y+3, r26	; 0x03
     b44:	bc 83       	std	Y+4, r27	; 0x04
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	ab 81       	ldd	r26, Y+3	; 0x03
     b4c:	bc 81       	ldd	r27, Y+4	; 0x04
     b4e:	bc 01       	movw	r22, r24
     b50:	cd 01       	movw	r24, r26
     b52:	6d 96       	adiw	r28, 0x1d	; 29
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	08 95       	ret

00000b6a <xEventGroupClearBits>:
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	2c 97       	sbiw	r28, 0x0c	; 12
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	8f 83       	std	Y+7, r24	; 0x07
     b7a:	98 87       	std	Y+8, r25	; 0x08
     b7c:	49 87       	std	Y+9, r20	; 0x09
     b7e:	5a 87       	std	Y+10, r21	; 0x0a
     b80:	6b 87       	std	Y+11, r22	; 0x0b
     b82:	7c 87       	std	Y+12, r23	; 0x0c
     b84:	8f 81       	ldd	r24, Y+7	; 0x07
     b86:	98 85       	ldd	r25, Y+8	; 0x08
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	9a 83       	std	Y+2, r25	; 0x02
     b8c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b90:	ff 93       	push	r31
     b92:	f8 7f       	andi	r31, 0xF8	; 248
     b94:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	fc 01       	movw	r30, r24
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	a2 81       	ldd	r26, Z+2	; 0x02
     ba4:	b3 81       	ldd	r27, Z+3	; 0x03
     ba6:	8b 83       	std	Y+3, r24	; 0x03
     ba8:	9c 83       	std	Y+4, r25	; 0x04
     baa:	ad 83       	std	Y+5, r26	; 0x05
     bac:	be 83       	std	Y+6, r27	; 0x06
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	9a 81       	ldd	r25, Y+2	; 0x02
     bb2:	fc 01       	movw	r30, r24
     bb4:	20 81       	ld	r18, Z
     bb6:	31 81       	ldd	r19, Z+1	; 0x01
     bb8:	42 81       	ldd	r20, Z+2	; 0x02
     bba:	53 81       	ldd	r21, Z+3	; 0x03
     bbc:	89 85       	ldd	r24, Y+9	; 0x09
     bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc0:	ab 85       	ldd	r26, Y+11	; 0x0b
     bc2:	bc 85       	ldd	r27, Y+12	; 0x0c
     bc4:	80 95       	com	r24
     bc6:	90 95       	com	r25
     bc8:	a0 95       	com	r26
     bca:	b0 95       	com	r27
     bcc:	82 23       	and	r24, r18
     bce:	93 23       	and	r25, r19
     bd0:	a4 23       	and	r26, r20
     bd2:	b5 23       	and	r27, r21
     bd4:	29 81       	ldd	r18, Y+1	; 0x01
     bd6:	3a 81       	ldd	r19, Y+2	; 0x02
     bd8:	f9 01       	movw	r30, r18
     bda:	80 83       	st	Z, r24
     bdc:	91 83       	std	Z+1, r25	; 0x01
     bde:	a2 83       	std	Z+2, r26	; 0x02
     be0:	b3 83       	std	Z+3, r27	; 0x03
     be2:	ff 91       	pop	r31
     be4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	ad 81       	ldd	r26, Y+5	; 0x05
     bee:	be 81       	ldd	r27, Y+6	; 0x06
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	2c 96       	adiw	r28, 0x0c	; 12
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <xEventGroupSetBits>:
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	6d 97       	sbiw	r28, 0x1d	; 29
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	88 8f       	std	Y+24, r24	; 0x18
     c10:	99 8f       	std	Y+25, r25	; 0x19
     c12:	4a 8f       	std	Y+26, r20	; 0x1a
     c14:	5b 8f       	std	Y+27, r21	; 0x1b
     c16:	6c 8f       	std	Y+28, r22	; 0x1c
     c18:	7d 8f       	std	Y+29, r23	; 0x1d
     c1a:	1b 82       	std	Y+3, r1	; 0x03
     c1c:	1c 82       	std	Y+4, r1	; 0x04
     c1e:	1d 82       	std	Y+5, r1	; 0x05
     c20:	1e 82       	std	Y+6, r1	; 0x06
     c22:	88 8d       	ldd	r24, Y+24	; 0x18
     c24:	99 8d       	ldd	r25, Y+25	; 0x19
     c26:	88 87       	std	Y+8, r24	; 0x08
     c28:	99 87       	std	Y+9, r25	; 0x09
     c2a:	1f 82       	std	Y+7, r1	; 0x07
     c2c:	88 85       	ldd	r24, Y+8	; 0x08
     c2e:	99 85       	ldd	r25, Y+9	; 0x09
     c30:	04 96       	adiw	r24, 0x04	; 4
     c32:	8a 87       	std	Y+10, r24	; 0x0a
     c34:	9b 87       	std	Y+11, r25	; 0x0b
     c36:	8a 85       	ldd	r24, Y+10	; 0x0a
     c38:	9b 85       	ldd	r25, Y+11	; 0x0b
     c3a:	03 96       	adiw	r24, 0x03	; 3
     c3c:	8c 87       	std	Y+12, r24	; 0x0c
     c3e:	9d 87       	std	Y+13, r25	; 0x0d
     c40:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <vTaskSuspendAll>
     c44:	8a 85       	ldd	r24, Y+10	; 0x0a
     c46:	9b 85       	ldd	r25, Y+11	; 0x0b
     c48:	fc 01       	movw	r30, r24
     c4a:	87 81       	ldd	r24, Z+7	; 0x07
     c4c:	90 85       	ldd	r25, Z+8	; 0x08
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	88 85       	ldd	r24, Y+8	; 0x08
     c54:	99 85       	ldd	r25, Y+9	; 0x09
     c56:	fc 01       	movw	r30, r24
     c58:	20 81       	ld	r18, Z
     c5a:	31 81       	ldd	r19, Z+1	; 0x01
     c5c:	42 81       	ldd	r20, Z+2	; 0x02
     c5e:	53 81       	ldd	r21, Z+3	; 0x03
     c60:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c62:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c64:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c66:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c68:	82 2b       	or	r24, r18
     c6a:	93 2b       	or	r25, r19
     c6c:	a4 2b       	or	r26, r20
     c6e:	b5 2b       	or	r27, r21
     c70:	28 85       	ldd	r18, Y+8	; 0x08
     c72:	39 85       	ldd	r19, Y+9	; 0x09
     c74:	f9 01       	movw	r30, r18
     c76:	80 83       	st	Z, r24
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	a2 83       	std	Z+2, r26	; 0x02
     c7c:	b3 83       	std	Z+3, r27	; 0x03
     c7e:	95 c0       	rjmp	.+298    	; 0xdaa <xEventGroupSetBits+0x1aa>
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	fc 01       	movw	r30, r24
     c86:	84 81       	ldd	r24, Z+4	; 0x04
     c88:	95 81       	ldd	r25, Z+5	; 0x05
     c8a:	8e 87       	std	Y+14, r24	; 0x0e
     c8c:	9f 87       	std	Y+15, r25	; 0x0f
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	a2 81       	ldd	r26, Z+2	; 0x02
     c9a:	b3 81       	ldd	r27, Z+3	; 0x03
     c9c:	88 8b       	std	Y+16, r24	; 0x10
     c9e:	99 8b       	std	Y+17, r25	; 0x11
     ca0:	aa 8b       	std	Y+18, r26	; 0x12
     ca2:	bb 8b       	std	Y+19, r27	; 0x13
     ca4:	1f 82       	std	Y+7, r1	; 0x07
     ca6:	88 89       	ldd	r24, Y+16	; 0x10
     ca8:	99 89       	ldd	r25, Y+17	; 0x11
     caa:	aa 89       	ldd	r26, Y+18	; 0x12
     cac:	bb 89       	ldd	r27, Y+19	; 0x13
     cae:	88 27       	eor	r24, r24
     cb0:	99 27       	eor	r25, r25
     cb2:	aa 27       	eor	r26, r26
     cb4:	8c 8b       	std	Y+20, r24	; 0x14
     cb6:	9d 8b       	std	Y+21, r25	; 0x15
     cb8:	ae 8b       	std	Y+22, r26	; 0x16
     cba:	bf 8b       	std	Y+23, r27	; 0x17
     cbc:	88 89       	ldd	r24, Y+16	; 0x10
     cbe:	99 89       	ldd	r25, Y+17	; 0x11
     cc0:	aa 89       	ldd	r26, Y+18	; 0x12
     cc2:	bb 89       	ldd	r27, Y+19	; 0x13
     cc4:	bb 27       	eor	r27, r27
     cc6:	88 8b       	std	Y+16, r24	; 0x10
     cc8:	99 8b       	std	Y+17, r25	; 0x11
     cca:	aa 8b       	std	Y+18, r26	; 0x12
     ccc:	bb 8b       	std	Y+19, r27	; 0x13
     cce:	8c 89       	ldd	r24, Y+20	; 0x14
     cd0:	9d 89       	ldd	r25, Y+21	; 0x15
     cd2:	ae 89       	ldd	r26, Y+22	; 0x16
     cd4:	bf 89       	ldd	r27, Y+23	; 0x17
     cd6:	88 27       	eor	r24, r24
     cd8:	99 27       	eor	r25, r25
     cda:	aa 27       	eor	r26, r26
     cdc:	b4 70       	andi	r27, 0x04	; 4
     cde:	89 2b       	or	r24, r25
     ce0:	8a 2b       	or	r24, r26
     ce2:	8b 2b       	or	r24, r27
     ce4:	b1 f4       	brne	.+44     	; 0xd12 <xEventGroupSetBits+0x112>
     ce6:	88 85       	ldd	r24, Y+8	; 0x08
     ce8:	99 85       	ldd	r25, Y+9	; 0x09
     cea:	fc 01       	movw	r30, r24
     cec:	20 81       	ld	r18, Z
     cee:	31 81       	ldd	r19, Z+1	; 0x01
     cf0:	42 81       	ldd	r20, Z+2	; 0x02
     cf2:	53 81       	ldd	r21, Z+3	; 0x03
     cf4:	88 89       	ldd	r24, Y+16	; 0x10
     cf6:	99 89       	ldd	r25, Y+17	; 0x11
     cf8:	aa 89       	ldd	r26, Y+18	; 0x12
     cfa:	bb 89       	ldd	r27, Y+19	; 0x13
     cfc:	82 23       	and	r24, r18
     cfe:	93 23       	and	r25, r19
     d00:	a4 23       	and	r26, r20
     d02:	b5 23       	and	r27, r21
     d04:	89 2b       	or	r24, r25
     d06:	8a 2b       	or	r24, r26
     d08:	8b 2b       	or	r24, r27
     d0a:	e9 f0       	breq	.+58     	; 0xd46 <xEventGroupSetBits+0x146>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	8f 83       	std	Y+7, r24	; 0x07
     d10:	1a c0       	rjmp	.+52     	; 0xd46 <xEventGroupSetBits+0x146>
     d12:	88 85       	ldd	r24, Y+8	; 0x08
     d14:	99 85       	ldd	r25, Y+9	; 0x09
     d16:	fc 01       	movw	r30, r24
     d18:	20 81       	ld	r18, Z
     d1a:	31 81       	ldd	r19, Z+1	; 0x01
     d1c:	42 81       	ldd	r20, Z+2	; 0x02
     d1e:	53 81       	ldd	r21, Z+3	; 0x03
     d20:	88 89       	ldd	r24, Y+16	; 0x10
     d22:	99 89       	ldd	r25, Y+17	; 0x11
     d24:	aa 89       	ldd	r26, Y+18	; 0x12
     d26:	bb 89       	ldd	r27, Y+19	; 0x13
     d28:	28 23       	and	r18, r24
     d2a:	39 23       	and	r19, r25
     d2c:	4a 23       	and	r20, r26
     d2e:	5b 23       	and	r21, r27
     d30:	88 89       	ldd	r24, Y+16	; 0x10
     d32:	99 89       	ldd	r25, Y+17	; 0x11
     d34:	aa 89       	ldd	r26, Y+18	; 0x12
     d36:	bb 89       	ldd	r27, Y+19	; 0x13
     d38:	28 17       	cp	r18, r24
     d3a:	39 07       	cpc	r19, r25
     d3c:	4a 07       	cpc	r20, r26
     d3e:	5b 07       	cpc	r21, r27
     d40:	11 f4       	brne	.+4      	; 0xd46 <xEventGroupSetBits+0x146>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	8f 83       	std	Y+7, r24	; 0x07
     d46:	8f 81       	ldd	r24, Y+7	; 0x07
     d48:	88 23       	and	r24, r24
     d4a:	59 f1       	breq	.+86     	; 0xda2 <xEventGroupSetBits+0x1a2>
     d4c:	8c 89       	ldd	r24, Y+20	; 0x14
     d4e:	9d 89       	ldd	r25, Y+21	; 0x15
     d50:	ae 89       	ldd	r26, Y+22	; 0x16
     d52:	bf 89       	ldd	r27, Y+23	; 0x17
     d54:	88 27       	eor	r24, r24
     d56:	99 27       	eor	r25, r25
     d58:	aa 27       	eor	r26, r26
     d5a:	b1 70       	andi	r27, 0x01	; 1
     d5c:	89 2b       	or	r24, r25
     d5e:	8a 2b       	or	r24, r26
     d60:	8b 2b       	or	r24, r27
     d62:	81 f0       	breq	.+32     	; 0xd84 <xEventGroupSetBits+0x184>
     d64:	2b 81       	ldd	r18, Y+3	; 0x03
     d66:	3c 81       	ldd	r19, Y+4	; 0x04
     d68:	4d 81       	ldd	r20, Y+5	; 0x05
     d6a:	5e 81       	ldd	r21, Y+6	; 0x06
     d6c:	88 89       	ldd	r24, Y+16	; 0x10
     d6e:	99 89       	ldd	r25, Y+17	; 0x11
     d70:	aa 89       	ldd	r26, Y+18	; 0x12
     d72:	bb 89       	ldd	r27, Y+19	; 0x13
     d74:	82 2b       	or	r24, r18
     d76:	93 2b       	or	r25, r19
     d78:	a4 2b       	or	r26, r20
     d7a:	b5 2b       	or	r27, r21
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	ad 83       	std	Y+5, r26	; 0x05
     d82:	be 83       	std	Y+6, r27	; 0x06
     d84:	88 85       	ldd	r24, Y+8	; 0x08
     d86:	99 85       	ldd	r25, Y+9	; 0x09
     d88:	fc 01       	movw	r30, r24
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	a2 81       	ldd	r26, Z+2	; 0x02
     d90:	b3 81       	ldd	r27, Z+3	; 0x03
     d92:	b2 60       	ori	r27, 0x02	; 2
     d94:	29 81       	ldd	r18, Y+1	; 0x01
     d96:	3a 81       	ldd	r19, Y+2	; 0x02
     d98:	ac 01       	movw	r20, r24
     d9a:	bd 01       	movw	r22, r26
     d9c:	c9 01       	movw	r24, r18
     d9e:	0e 94 9a 18 	call	0x3134	; 0x3134 <vTaskRemoveFromUnorderedEventList>
     da2:	8e 85       	ldd	r24, Y+14	; 0x0e
     da4:	9f 85       	ldd	r25, Y+15	; 0x0f
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	29 81       	ldd	r18, Y+1	; 0x01
     dac:	3a 81       	ldd	r19, Y+2	; 0x02
     dae:	8c 85       	ldd	r24, Y+12	; 0x0c
     db0:	9d 85       	ldd	r25, Y+13	; 0x0d
     db2:	28 17       	cp	r18, r24
     db4:	39 07       	cpc	r19, r25
     db6:	09 f0       	breq	.+2      	; 0xdba <xEventGroupSetBits+0x1ba>
     db8:	63 cf       	rjmp	.-314    	; 0xc80 <xEventGroupSetBits+0x80>
     dba:	88 85       	ldd	r24, Y+8	; 0x08
     dbc:	99 85       	ldd	r25, Y+9	; 0x09
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 81       	ld	r18, Z
     dc2:	31 81       	ldd	r19, Z+1	; 0x01
     dc4:	42 81       	ldd	r20, Z+2	; 0x02
     dc6:	53 81       	ldd	r21, Z+3	; 0x03
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	9c 81       	ldd	r25, Y+4	; 0x04
     dcc:	ad 81       	ldd	r26, Y+5	; 0x05
     dce:	be 81       	ldd	r27, Y+6	; 0x06
     dd0:	80 95       	com	r24
     dd2:	90 95       	com	r25
     dd4:	a0 95       	com	r26
     dd6:	b0 95       	com	r27
     dd8:	82 23       	and	r24, r18
     dda:	93 23       	and	r25, r19
     ddc:	a4 23       	and	r26, r20
     dde:	b5 23       	and	r27, r21
     de0:	28 85       	ldd	r18, Y+8	; 0x08
     de2:	39 85       	ldd	r19, Y+9	; 0x09
     de4:	f9 01       	movw	r30, r18
     de6:	80 83       	st	Z, r24
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	a2 83       	std	Z+2, r26	; 0x02
     dec:	b3 83       	std	Z+3, r27	; 0x03
     dee:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
     df2:	88 85       	ldd	r24, Y+8	; 0x08
     df4:	99 85       	ldd	r25, Y+9	; 0x09
     df6:	fc 01       	movw	r30, r24
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	a2 81       	ldd	r26, Z+2	; 0x02
     dfe:	b3 81       	ldd	r27, Z+3	; 0x03
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	6d 96       	adiw	r28, 0x1d	; 29
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <vEventGroupSetBitsCallback>:
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	00 d0       	rcall	.+0      	; 0xe16 <vEventGroupSetBitsCallback+0x6>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <vEventGroupSetBitsCallback+0x8>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	4b 83       	std	Y+3, r20	; 0x03
     e22:	5c 83       	std	Y+4, r21	; 0x04
     e24:	6d 83       	std	Y+5, r22	; 0x05
     e26:	7e 83       	std	Y+6, r23	; 0x06
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	ad 81       	ldd	r26, Y+5	; 0x05
     e2e:	be 81       	ldd	r27, Y+6	; 0x06
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	ac 01       	movw	r20, r24
     e36:	bd 01       	movw	r22, r26
     e38:	c9 01       	movw	r24, r18
     e3a:	0e 94 00 06 	call	0xc00	; 0xc00 <xEventGroupSetBits>
     e3e:	00 00       	nop
     e40:	26 96       	adiw	r28, 0x06	; 6
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

00000e4c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     e4c:	0f 93       	push	r16
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	2a 97       	sbiw	r28, 0x0a	; 10
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	6a 83       	std	Y+2, r22	; 0x02
     e5e:	7b 83       	std	Y+3, r23	; 0x03
     e60:	8c 83       	std	Y+4, r24	; 0x04
     e62:	9d 83       	std	Y+5, r25	; 0x05
     e64:	2e 83       	std	Y+6, r18	; 0x06
     e66:	3f 83       	std	Y+7, r19	; 0x07
     e68:	48 87       	std	Y+8, r20	; 0x08
     e6a:	59 87       	std	Y+9, r21	; 0x09
     e6c:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     e6e:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     e70:	8a 85       	ldd	r24, Y+10	; 0x0a
     e72:	88 23       	and	r24, r24
     e74:	99 f4       	brne	.+38     	; 0xe9c <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     e76:	2a 81       	ldd	r18, Y+2	; 0x02
     e78:	3b 81       	ldd	r19, Y+3	; 0x03
     e7a:	4c 81       	ldd	r20, Y+4	; 0x04
     e7c:	5d 81       	ldd	r21, Y+5	; 0x05
     e7e:	8e 81       	ldd	r24, Y+6	; 0x06
     e80:	9f 81       	ldd	r25, Y+7	; 0x07
     e82:	a8 85       	ldd	r26, Y+8	; 0x08
     e84:	b9 85       	ldd	r27, Y+9	; 0x09
     e86:	82 23       	and	r24, r18
     e88:	93 23       	and	r25, r19
     e8a:	a4 23       	and	r26, r20
     e8c:	b5 23       	and	r27, r21
     e8e:	89 2b       	or	r24, r25
     e90:	8a 2b       	or	r24, r26
     e92:	8b 2b       	or	r24, r27
     e94:	d1 f0       	breq	.+52     	; 0xeca <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	17 c0       	rjmp	.+46     	; 0xeca <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     e9c:	2a 81       	ldd	r18, Y+2	; 0x02
     e9e:	3b 81       	ldd	r19, Y+3	; 0x03
     ea0:	4c 81       	ldd	r20, Y+4	; 0x04
     ea2:	5d 81       	ldd	r21, Y+5	; 0x05
     ea4:	8e 81       	ldd	r24, Y+6	; 0x06
     ea6:	9f 81       	ldd	r25, Y+7	; 0x07
     ea8:	a8 85       	ldd	r26, Y+8	; 0x08
     eaa:	b9 85       	ldd	r27, Y+9	; 0x09
     eac:	28 23       	and	r18, r24
     eae:	39 23       	and	r19, r25
     eb0:	4a 23       	and	r20, r26
     eb2:	5b 23       	and	r21, r27
     eb4:	8e 81       	ldd	r24, Y+6	; 0x06
     eb6:	9f 81       	ldd	r25, Y+7	; 0x07
     eb8:	a8 85       	ldd	r26, Y+8	; 0x08
     eba:	b9 85       	ldd	r27, Y+9	; 0x09
     ebc:	28 17       	cp	r18, r24
     ebe:	39 07       	cpc	r19, r25
     ec0:	4a 07       	cpc	r20, r26
     ec2:	5b 07       	cpc	r21, r27
     ec4:	11 f4       	brne	.+4      	; 0xeca <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
}
     ecc:	2a 96       	adiw	r28, 0x0a	; 10
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	0f 91       	pop	r16
     ed8:	08 95       	ret

00000eda <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	29 97       	sbiw	r28, 0x09	; 9
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	8a 83       	std	Y+2, r24	; 0x02
     eee:	9b 83       	std	Y+3, r25	; 0x03
     ef0:	4c 83       	std	Y+4, r20	; 0x04
     ef2:	5d 83       	std	Y+5, r21	; 0x05
     ef4:	6e 83       	std	Y+6, r22	; 0x06
     ef6:	7f 83       	std	Y+7, r23	; 0x07
     ef8:	28 87       	std	Y+8, r18	; 0x08
     efa:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     efc:	28 85       	ldd	r18, Y+8	; 0x08
     efe:	39 85       	ldd	r19, Y+9	; 0x09
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	9d 81       	ldd	r25, Y+5	; 0x05
     f04:	ae 81       	ldd	r26, Y+6	; 0x06
     f06:	bf 81       	ldd	r27, Y+7	; 0x07
     f08:	6a 81       	ldd	r22, Y+2	; 0x02
     f0a:	7b 81       	ldd	r23, Y+3	; 0x03
     f0c:	89 01       	movw	r16, r18
     f0e:	9c 01       	movw	r18, r24
     f10:	ad 01       	movw	r20, r26
     f12:	88 e0       	ldi	r24, 0x08	; 8
     f14:	97 e0       	ldi	r25, 0x07	; 7
     f16:	0e 94 29 20 	call	0x4052	; 0x4052 <xTimerPendFunctionCallFromISR>
     f1a:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
	}
     f1e:	29 96       	adiw	r28, 0x09	; 9
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	08 95       	ret

00000f2e <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	00 d0       	rcall	.+0      	; 0xf34 <pvPortMalloc+0x6>
     f34:	1f 92       	push	r1
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	8b 83       	std	Y+3, r24	; 0x03
     f3c:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     f3e:	19 82       	std	Y+1, r1	; 0x01
     f40:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     f42:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f46:	20 91 28 2c 	lds	r18, 0x2C28	; 0x802c28 <xNextFreeByte>
     f4a:	30 91 29 2c 	lds	r19, 0x2C29	; 0x802c29 <xNextFreeByte+0x1>
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	88 3b       	cpi	r24, 0xB8	; 184
     f58:	9b 40       	sbci	r25, 0x0B	; 11
     f5a:	18 f5       	brcc	.+70     	; 0xfa2 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     f5c:	20 91 28 2c 	lds	r18, 0x2C28	; 0x802c28 <xNextFreeByte>
     f60:	30 91 29 2c 	lds	r19, 0x2C29	; 0x802c29 <xNextFreeByte+0x1>
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	28 0f       	add	r18, r24
     f6a:	39 1f       	adc	r19, r25
     f6c:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <xNextFreeByte>
     f70:	90 91 29 2c 	lds	r25, 0x2C29	; 0x802c29 <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f74:	82 17       	cp	r24, r18
     f76:	93 07       	cpc	r25, r19
     f78:	a0 f4       	brcc	.+40     	; 0xfa2 <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     f7a:	80 91 28 2c 	lds	r24, 0x2C28	; 0x802c28 <xNextFreeByte>
     f7e:	90 91 29 2c 	lds	r25, 0x2C29	; 0x802c29 <xNextFreeByte+0x1>
     f82:	80 59       	subi	r24, 0x90	; 144
     f84:	9f 4d       	sbci	r25, 0xDF	; 223
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
     f8a:	20 91 28 2c 	lds	r18, 0x2C28	; 0x802c28 <xNextFreeByte>
     f8e:	30 91 29 2c 	lds	r19, 0x2C29	; 0x802c29 <xNextFreeByte+0x1>
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	82 0f       	add	r24, r18
     f98:	93 1f       	adc	r25, r19
     f9a:	80 93 28 2c 	sts	0x2C28, r24	; 0x802c28 <xNextFreeByte>
     f9e:	90 93 29 2c 	sts	0x2C29, r25	; 0x802c29 <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
     fa2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     faa:	24 96       	adiw	r28, 0x04	; 4
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	1f 92       	push	r1
     fbc:	1f 92       	push	r1
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     fc6:	00 00       	nop
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	1f 92       	push	r1
     fd8:	1f 92       	push	r1
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	9c 01       	movw	r18, r24
     fe8:	2d 5f       	subi	r18, 0xFD	; 253
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	fc 01       	movw	r30, r24
     ff2:	21 83       	std	Z+1, r18	; 0x01
     ff4:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     ff6:	29 81       	ldd	r18, Y+1	; 0x01
     ff8:	3a 81       	ldd	r19, Y+2	; 0x02
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	dc 01       	movw	r26, r24
    1000:	f9 01       	movw	r30, r18
    1002:	83 83       	std	Z+3, r24	; 0x03
    1004:	94 83       	std	Z+4, r25	; 0x04
    1006:	a5 83       	std	Z+5, r26	; 0x05
    1008:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	9c 01       	movw	r18, r24
    1010:	2d 5f       	subi	r18, 0xFD	; 253
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	fc 01       	movw	r30, r24
    101a:	27 83       	std	Z+7, r18	; 0x07
    101c:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	9c 01       	movw	r18, r24
    1024:	2d 5f       	subi	r18, 0xFD	; 253
    1026:	3f 4f       	sbci	r19, 0xFF	; 255
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	9a 81       	ldd	r25, Y+2	; 0x02
    102c:	fc 01       	movw	r30, r24
    102e:	21 87       	std	Z+9, r18	; 0x09
    1030:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	fc 01       	movw	r30, r24
    1038:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    103a:	00 00       	nop
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	1f 92       	push	r1
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	fc 01       	movw	r30, r24
    105c:	12 86       	std	Z+10, r1	; 0x0a
    105e:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1060:	00 00       	nop
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	00 d0       	rcall	.+0      	; 0x1072 <vListInsertEnd+0x6>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <vListInsertEnd+0x8>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	8b 83       	std	Y+3, r24	; 0x03
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	6d 83       	std	Y+5, r22	; 0x05
    107e:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	fc 01       	movw	r30, r24
    1086:	81 81       	ldd	r24, Z+1	; 0x01
    1088:	92 81       	ldd	r25, Z+2	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	29 81       	ldd	r18, Y+1	; 0x01
    1094:	3a 81       	ldd	r19, Y+2	; 0x02
    1096:	fc 01       	movw	r30, r24
    1098:	24 83       	std	Z+4, r18	; 0x04
    109a:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	fc 01       	movw	r30, r24
    10a2:	26 81       	ldd	r18, Z+6	; 0x06
    10a4:	37 81       	ldd	r19, Z+7	; 0x07
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
    10a8:	9e 81       	ldd	r25, Y+6	; 0x06
    10aa:	fc 01       	movw	r30, r24
    10ac:	26 83       	std	Z+6, r18	; 0x06
    10ae:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	fc 01       	movw	r30, r24
    10b6:	86 81       	ldd	r24, Z+6	; 0x06
    10b8:	97 81       	ldd	r25, Z+7	; 0x07
    10ba:	2d 81       	ldd	r18, Y+5	; 0x05
    10bc:	3e 81       	ldd	r19, Y+6	; 0x06
    10be:	fc 01       	movw	r30, r24
    10c0:	24 83       	std	Z+4, r18	; 0x04
    10c2:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ca:	3e 81       	ldd	r19, Y+6	; 0x06
    10cc:	fc 01       	movw	r30, r24
    10ce:	26 83       	std	Z+6, r18	; 0x06
    10d0:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	9e 81       	ldd	r25, Y+6	; 0x06
    10d6:	2b 81       	ldd	r18, Y+3	; 0x03
    10d8:	3c 81       	ldd	r19, Y+4	; 0x04
    10da:	fc 01       	movw	r30, r24
    10dc:	22 87       	std	Z+10, r18	; 0x0a
    10de:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	fc 01       	movw	r30, r24
    10e6:	80 81       	ld	r24, Z
    10e8:	21 e0       	ldi	r18, 0x01	; 1
    10ea:	28 0f       	add	r18, r24
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 83       	st	Z, r18
}
    10f4:	00 00       	nop
    10f6:	26 96       	adiw	r28, 0x06	; 6
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	2a 97       	sbiw	r28, 0x0a	; 10
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	8f 83       	std	Y+7, r24	; 0x07
    1112:	98 87       	std	Y+8, r25	; 0x08
    1114:	69 87       	std	Y+9, r22	; 0x09
    1116:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	fc 01       	movw	r30, r24
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	a2 81       	ldd	r26, Z+2	; 0x02
    1124:	b3 81       	ldd	r27, Z+3	; 0x03
    1126:	8b 83       	std	Y+3, r24	; 0x03
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	ad 83       	std	Y+5, r26	; 0x05
    112c:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	ad 81       	ldd	r26, Y+5	; 0x05
    1134:	be 81       	ldd	r27, Y+6	; 0x06
    1136:	8f 3f       	cpi	r24, 0xFF	; 255
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	af 4f       	sbci	r26, 0xFF	; 255
    113c:	bf 4f       	sbci	r27, 0xFF	; 255
    113e:	41 f4       	brne	.+16     	; 0x1150 <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1140:	8f 81       	ldd	r24, Y+7	; 0x07
    1142:	98 85       	ldd	r25, Y+8	; 0x08
    1144:	fc 01       	movw	r30, r24
    1146:	81 85       	ldd	r24, Z+9	; 0x09
    1148:	92 85       	ldd	r25, Z+10	; 0x0a
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	20 c0       	rjmp	.+64     	; 0x1190 <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1150:	8f 81       	ldd	r24, Y+7	; 0x07
    1152:	98 85       	ldd	r25, Y+8	; 0x08
    1154:	03 96       	adiw	r24, 0x03	; 3
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	07 c0       	rjmp	.+14     	; 0x116a <vListInsert+0x68>
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	fc 01       	movw	r30, r24
    1162:	84 81       	ldd	r24, Z+4	; 0x04
    1164:	95 81       	ldd	r25, Z+5	; 0x05
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	fc 01       	movw	r30, r24
    1170:	84 81       	ldd	r24, Z+4	; 0x04
    1172:	95 81       	ldd	r25, Z+5	; 0x05
    1174:	fc 01       	movw	r30, r24
    1176:	20 81       	ld	r18, Z
    1178:	31 81       	ldd	r19, Z+1	; 0x01
    117a:	42 81       	ldd	r20, Z+2	; 0x02
    117c:	53 81       	ldd	r21, Z+3	; 0x03
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	ad 81       	ldd	r26, Y+5	; 0x05
    1184:	be 81       	ldd	r27, Y+6	; 0x06
    1186:	82 17       	cp	r24, r18
    1188:	93 07       	cpc	r25, r19
    118a:	a4 07       	cpc	r26, r20
    118c:	b5 07       	cpc	r27, r21
    118e:	30 f7       	brcc	.-52     	; 0x115c <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	fc 01       	movw	r30, r24
    1196:	24 81       	ldd	r18, Z+4	; 0x04
    1198:	35 81       	ldd	r19, Z+5	; 0x05
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	fc 01       	movw	r30, r24
    11a0:	24 83       	std	Z+4, r18	; 0x04
    11a2:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    11a4:	89 85       	ldd	r24, Y+9	; 0x09
    11a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a8:	fc 01       	movw	r30, r24
    11aa:	84 81       	ldd	r24, Z+4	; 0x04
    11ac:	95 81       	ldd	r25, Z+5	; 0x05
    11ae:	29 85       	ldd	r18, Y+9	; 0x09
    11b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11b2:	fc 01       	movw	r30, r24
    11b4:	26 83       	std	Z+6, r18	; 0x06
    11b6:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    11bc:	29 81       	ldd	r18, Y+1	; 0x01
    11be:	3a 81       	ldd	r19, Y+2	; 0x02
    11c0:	fc 01       	movw	r30, r24
    11c2:	26 83       	std	Z+6, r18	; 0x06
    11c4:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	29 85       	ldd	r18, Y+9	; 0x09
    11cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    11ce:	fc 01       	movw	r30, r24
    11d0:	24 83       	std	Z+4, r18	; 0x04
    11d2:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d8:	2f 81       	ldd	r18, Y+7	; 0x07
    11da:	38 85       	ldd	r19, Y+8	; 0x08
    11dc:	fc 01       	movw	r30, r24
    11de:	22 87       	std	Z+10, r18	; 0x0a
    11e0:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    11e2:	8f 81       	ldd	r24, Y+7	; 0x07
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	fc 01       	movw	r30, r24
    11e8:	80 81       	ld	r24, Z
    11ea:	21 e0       	ldi	r18, 0x01	; 1
    11ec:	28 0f       	add	r18, r24
    11ee:	8f 81       	ldd	r24, Y+7	; 0x07
    11f0:	98 85       	ldd	r25, Y+8	; 0x08
    11f2:	fc 01       	movw	r30, r24
    11f4:	20 83       	st	Z, r18
}
    11f6:	00 00       	nop
    11f8:	2a 96       	adiw	r28, 0x0a	; 10
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	00 d0       	rcall	.+0      	; 0x120a <uxListRemove+0x6>
    120a:	1f 92       	push	r1
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	8b 83       	std	Y+3, r24	; 0x03
    1212:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	fc 01       	movw	r30, r24
    121a:	82 85       	ldd	r24, Z+10	; 0x0a
    121c:	93 85       	ldd	r25, Z+11	; 0x0b
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	fc 01       	movw	r30, r24
    1228:	84 81       	ldd	r24, Z+4	; 0x04
    122a:	95 81       	ldd	r25, Z+5	; 0x05
    122c:	2b 81       	ldd	r18, Y+3	; 0x03
    122e:	3c 81       	ldd	r19, Y+4	; 0x04
    1230:	f9 01       	movw	r30, r18
    1232:	26 81       	ldd	r18, Z+6	; 0x06
    1234:	37 81       	ldd	r19, Z+7	; 0x07
    1236:	fc 01       	movw	r30, r24
    1238:	26 83       	std	Z+6, r18	; 0x06
    123a:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	fc 01       	movw	r30, r24
    1242:	86 81       	ldd	r24, Z+6	; 0x06
    1244:	97 81       	ldd	r25, Z+7	; 0x07
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	f9 01       	movw	r30, r18
    124c:	24 81       	ldd	r18, Z+4	; 0x04
    124e:	35 81       	ldd	r19, Z+5	; 0x05
    1250:	fc 01       	movw	r30, r24
    1252:	24 83       	std	Z+4, r18	; 0x04
    1254:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	fc 01       	movw	r30, r24
    125c:	21 81       	ldd	r18, Z+1	; 0x01
    125e:	32 81       	ldd	r19, Z+2	; 0x02
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	28 17       	cp	r18, r24
    1266:	39 07       	cpc	r19, r25
    1268:	51 f4       	brne	.+20     	; 0x127e <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	fc 01       	movw	r30, r24
    1270:	26 81       	ldd	r18, Z+6	; 0x06
    1272:	37 81       	ldd	r19, Z+7	; 0x07
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	fc 01       	movw	r30, r24
    127a:	21 83       	std	Z+1, r18	; 0x01
    127c:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	fc 01       	movw	r30, r24
    1284:	12 86       	std	Z+10, r1	; 0x0a
    1286:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	2f ef       	ldi	r18, 0xFF	; 255
    1292:	28 0f       	add	r18, r24
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	fc 01       	movw	r30, r24
    129a:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	fc 01       	movw	r30, r24
    12a2:	80 81       	ld	r24, Z
}
    12a4:	24 96       	adiw	r28, 0x04	; 4
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	80 ea       	ldi	r24, 0xA0	; 160
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	fc 01       	movw	r30, r24
    12c0:	12 81       	ldd	r17, Z+2	; 0x02
    12c2:	80 ea       	ldi	r24, 0xA0	; 160
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	20 ea       	ldi	r18, 0xA0	; 160
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	f9 01       	movw	r30, r18
    12cc:	22 81       	ldd	r18, Z+2	; 0x02
    12ce:	28 7f       	andi	r18, 0xF8	; 248
    12d0:	fc 01       	movw	r30, r24
    12d2:	22 83       	std	Z+2, r18	; 0x02
    12d4:	81 2f       	mov	r24, r17
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	08 95       	ret

000012de <pxPortInitialiseStack>:
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	2a 97       	sbiw	r28, 0x0a	; 10
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	6f 83       	std	Y+7, r22	; 0x07
    12f2:	78 87       	std	Y+8, r23	; 0x08
    12f4:	49 87       	std	Y+9, r20	; 0x09
    12f6:	5a 87       	std	Y+10, r21	; 0x0a
    12f8:	8d 81       	ldd	r24, Y+5	; 0x05
    12fa:	9e 81       	ldd	r25, Y+6	; 0x06
    12fc:	21 e1       	ldi	r18, 0x11	; 17
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	22 e2       	ldi	r18, 0x22	; 34
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	23 e3       	ldi	r18, 0x33	; 51
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	8d 83       	std	Y+5, r24	; 0x05
    1332:	9e 83       	std	Y+6, r25	; 0x06
    1334:	8f 81       	ldd	r24, Y+7	; 0x07
    1336:	98 85       	ldd	r25, Y+8	; 0x08
    1338:	cc 01       	movw	r24, r24
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	ab 83       	std	Y+3, r26	; 0x03
    1344:	bc 83       	std	Y+4, r27	; 0x04
    1346:	29 81       	ldd	r18, Y+1	; 0x01
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	fc 01       	movw	r30, r24
    134e:	20 83       	st	Z, r18
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	ab 81       	ldd	r26, Y+3	; 0x03
    1360:	bc 81       	ldd	r27, Y+4	; 0x04
    1362:	89 2f       	mov	r24, r25
    1364:	9a 2f       	mov	r25, r26
    1366:	ab 2f       	mov	r26, r27
    1368:	bb 27       	eor	r27, r27
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	ab 83       	std	Y+3, r26	; 0x03
    1370:	bc 83       	std	Y+4, r27	; 0x04
    1372:	29 81       	ldd	r18, Y+1	; 0x01
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	8d 83       	std	Y+5, r24	; 0x05
    1384:	9e 83       	std	Y+6, r25	; 0x06
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	ab 81       	ldd	r26, Y+3	; 0x03
    138c:	bc 81       	ldd	r27, Y+4	; 0x04
    138e:	89 2f       	mov	r24, r25
    1390:	9a 2f       	mov	r25, r26
    1392:	ab 2f       	mov	r26, r27
    1394:	bb 27       	eor	r27, r27
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	ab 83       	std	Y+3, r26	; 0x03
    139c:	bc 83       	std	Y+4, r27	; 0x04
    139e:	29 81       	ldd	r18, Y+1	; 0x01
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	8d 83       	std	Y+5, r24	; 0x05
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	21 e3       	ldi	r18, 0x31	; 49
    13b8:	fc 01       	movw	r30, r24
    13ba:	20 83       	st	Z, r18
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	20 e8       	ldi	r18, 0x80	; 128
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 83       	st	Z, r18
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	27 e8       	ldi	r18, 0x87	; 135
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	8d 83       	std	Y+5, r24	; 0x05
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	fc 01       	movw	r30, r24
    13f4:	10 82       	st	Z, r1
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	8d 83       	std	Y+5, r24	; 0x05
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	fc 01       	movw	r30, r24
    1406:	10 82       	st	Z, r1
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	22 e0       	ldi	r18, 0x02	; 2
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	8d 83       	std	Y+5, r24	; 0x05
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	23 e0       	ldi	r18, 0x03	; 3
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18
    1430:	8d 81       	ldd	r24, Y+5	; 0x05
    1432:	9e 81       	ldd	r25, Y+6	; 0x06
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	9e 81       	ldd	r25, Y+6	; 0x06
    143e:	24 e0       	ldi	r18, 0x04	; 4
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	25 e0       	ldi	r18, 0x05	; 5
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	9e 83       	std	Y+6, r25	; 0x06
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	26 e0       	ldi	r18, 0x06	; 6
    1468:	fc 01       	movw	r30, r24
    146a:	20 83       	st	Z, r18
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	8d 83       	std	Y+5, r24	; 0x05
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	27 e0       	ldi	r18, 0x07	; 7
    147c:	fc 01       	movw	r30, r24
    147e:	20 83       	st	Z, r18
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	28 e0       	ldi	r18, 0x08	; 8
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	8d 83       	std	Y+5, r24	; 0x05
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	29 e0       	ldi	r18, 0x09	; 9
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	8d 83       	std	Y+5, r24	; 0x05
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	20 e1       	ldi	r18, 0x10	; 16
    14b8:	fc 01       	movw	r30, r24
    14ba:	20 83       	st	Z, r18
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	8d 83       	std	Y+5, r24	; 0x05
    14c4:	9e 83       	std	Y+6, r25	; 0x06
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ca:	21 e1       	ldi	r18, 0x11	; 17
    14cc:	fc 01       	movw	r30, r24
    14ce:	20 83       	st	Z, r18
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	8d 83       	std	Y+5, r24	; 0x05
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	22 e1       	ldi	r18, 0x12	; 18
    14e0:	fc 01       	movw	r30, r24
    14e2:	20 83       	st	Z, r18
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	23 e1       	ldi	r18, 0x13	; 19
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	24 e1       	ldi	r18, 0x14	; 20
    1508:	fc 01       	movw	r30, r24
    150a:	20 83       	st	Z, r18
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	25 e1       	ldi	r18, 0x15	; 21
    151c:	fc 01       	movw	r30, r24
    151e:	20 83       	st	Z, r18
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	8d 83       	std	Y+5, r24	; 0x05
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	26 e1       	ldi	r18, 0x16	; 22
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	27 e1       	ldi	r18, 0x17	; 23
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	9e 83       	std	Y+6, r25	; 0x06
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	28 e1       	ldi	r18, 0x18	; 24
    1558:	fc 01       	movw	r30, r24
    155a:	20 83       	st	Z, r18
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	29 e1       	ldi	r18, 0x19	; 25
    156c:	fc 01       	movw	r30, r24
    156e:	20 83       	st	Z, r18
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	20 e2       	ldi	r18, 0x20	; 32
    1580:	fc 01       	movw	r30, r24
    1582:	20 83       	st	Z, r18
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	8d 83       	std	Y+5, r24	; 0x05
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	9e 81       	ldd	r25, Y+6	; 0x06
    1592:	21 e2       	ldi	r18, 0x21	; 33
    1594:	fc 01       	movw	r30, r24
    1596:	20 83       	st	Z, r18
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	9e 81       	ldd	r25, Y+6	; 0x06
    15a6:	22 e2       	ldi	r18, 0x22	; 34
    15a8:	fc 01       	movw	r30, r24
    15aa:	20 83       	st	Z, r18
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	9e 81       	ldd	r25, Y+6	; 0x06
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	8d 83       	std	Y+5, r24	; 0x05
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	23 e2       	ldi	r18, 0x23	; 35
    15bc:	fc 01       	movw	r30, r24
    15be:	20 83       	st	Z, r18
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	cc 01       	movw	r24, r24
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	ab 83       	std	Y+3, r26	; 0x03
    15da:	bc 83       	std	Y+4, r27	; 0x04
    15dc:	29 81       	ldd	r18, Y+1	; 0x01
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	fc 01       	movw	r30, r24
    15e4:	20 83       	st	Z, r18
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	ab 81       	ldd	r26, Y+3	; 0x03
    15f6:	bc 81       	ldd	r27, Y+4	; 0x04
    15f8:	89 2f       	mov	r24, r25
    15fa:	9a 2f       	mov	r25, r26
    15fc:	ab 2f       	mov	r26, r27
    15fe:	bb 27       	eor	r27, r27
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	ab 83       	std	Y+3, r26	; 0x03
    1606:	bc 83       	std	Y+4, r27	; 0x04
    1608:	29 81       	ldd	r18, Y+1	; 0x01
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	fc 01       	movw	r30, r24
    1610:	20 83       	st	Z, r18
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	26 e2       	ldi	r18, 0x26	; 38
    1622:	fc 01       	movw	r30, r24
    1624:	20 83       	st	Z, r18
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	8d 83       	std	Y+5, r24	; 0x05
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	27 e2       	ldi	r18, 0x27	; 39
    1636:	fc 01       	movw	r30, r24
    1638:	20 83       	st	Z, r18
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	9e 83       	std	Y+6, r25	; 0x06
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	28 e2       	ldi	r18, 0x28	; 40
    164a:	fc 01       	movw	r30, r24
    164c:	20 83       	st	Z, r18
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	9e 81       	ldd	r25, Y+6	; 0x06
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	8d 81       	ldd	r24, Y+5	; 0x05
    165a:	9e 81       	ldd	r25, Y+6	; 0x06
    165c:	29 e2       	ldi	r18, 0x29	; 41
    165e:	fc 01       	movw	r30, r24
    1660:	20 83       	st	Z, r18
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	8d 83       	std	Y+5, r24	; 0x05
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	20 e3       	ldi	r18, 0x30	; 48
    1672:	fc 01       	movw	r30, r24
    1674:	20 83       	st	Z, r18
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	8d 83       	std	Y+5, r24	; 0x05
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	2a 96       	adiw	r28, 0x0a	; 10
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <xPortStartScheduler>:
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	0e 94 8f 0c 	call	0x191e	; 0x191e <prvSetupTimerInterrupt>
    169c:	a0 91 2a 2c 	lds	r26, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    16a0:	b0 91 2b 2c 	lds	r27, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    16a4:	0d 90       	ld	r0, X+
    16a6:	0d be       	out	0x3d, r0	; 61
    16a8:	0d 90       	ld	r0, X+
    16aa:	0e be       	out	0x3e, r0	; 62
    16ac:	ef 91       	pop	r30
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	bf 91       	pop	r27
    16b4:	af 91       	pop	r26
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	7f 91       	pop	r23
    16bc:	6f 91       	pop	r22
    16be:	5f 91       	pop	r21
    16c0:	4f 91       	pop	r20
    16c2:	3f 91       	pop	r19
    16c4:	2f 91       	pop	r18
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	df 90       	pop	r13
    16d0:	cf 90       	pop	r12
    16d2:	bf 90       	pop	r11
    16d4:	af 90       	pop	r10
    16d6:	9f 90       	pop	r9
    16d8:	8f 90       	pop	r8
    16da:	7f 90       	pop	r7
    16dc:	6f 90       	pop	r6
    16de:	5f 90       	pop	r5
    16e0:	4f 90       	pop	r4
    16e2:	3f 90       	pop	r3
    16e4:	2f 90       	pop	r2
    16e6:	1f 90       	pop	r1
    16e8:	0f 90       	pop	r0
    16ea:	ff 91       	pop	r31
    16ec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16f0:	ff 91       	pop	r31
    16f2:	ff bf       	out	0x3f, r31	; 63
    16f4:	ff 91       	pop	r31
    16f6:	08 95       	ret
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1700:	ff 93       	push	r31
    1702:	ff b7       	in	r31, 0x3f	; 63
    1704:	ff 93       	push	r31
    1706:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    170a:	ff 93       	push	r31
    170c:	f8 7f       	andi	r31, 0xF8	; 248
    170e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1712:	0f 92       	push	r0
    1714:	1f 92       	push	r1
    1716:	11 24       	eor	r1, r1
    1718:	2f 92       	push	r2
    171a:	3f 92       	push	r3
    171c:	4f 92       	push	r4
    171e:	5f 92       	push	r5
    1720:	6f 92       	push	r6
    1722:	7f 92       	push	r7
    1724:	8f 92       	push	r8
    1726:	9f 92       	push	r9
    1728:	af 92       	push	r10
    172a:	bf 92       	push	r11
    172c:	cf 92       	push	r12
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	2f 93       	push	r18
    173a:	3f 93       	push	r19
    173c:	4f 93       	push	r20
    173e:	5f 93       	push	r21
    1740:	6f 93       	push	r22
    1742:	7f 93       	push	r23
    1744:	8f 93       	push	r24
    1746:	9f 93       	push	r25
    1748:	af 93       	push	r26
    174a:	bf 93       	push	r27
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ef 93       	push	r30
    1752:	a0 91 2a 2c 	lds	r26, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    1756:	b0 91 2b 2c 	lds	r27, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    175a:	0d b6       	in	r0, 0x3d	; 61
    175c:	0d 92       	st	X+, r0
    175e:	0e b6       	in	r0, 0x3e	; 62
    1760:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1762:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1766:	a0 91 2a 2c 	lds	r26, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    176a:	b0 91 2b 2c 	lds	r27, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    176e:	0d 90       	ld	r0, X+
    1770:	0d be       	out	0x3d, r0	; 61
    1772:	0d 90       	ld	r0, X+
    1774:	0e be       	out	0x3e, r0	; 62
    1776:	ef 91       	pop	r30
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	af 90       	pop	r10
    17a0:	9f 90       	pop	r9
    17a2:	8f 90       	pop	r8
    17a4:	7f 90       	pop	r7
    17a6:	6f 90       	pop	r6
    17a8:	5f 90       	pop	r5
    17aa:	4f 90       	pop	r4
    17ac:	3f 90       	pop	r3
    17ae:	2f 90       	pop	r2
    17b0:	1f 90       	pop	r1
    17b2:	0f 90       	pop	r0
    17b4:	ff 91       	pop	r31
    17b6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    17ba:	ff 91       	pop	r31
    17bc:	ff bf       	out	0x3f, r31	; 63
    17be:	ff 91       	pop	r31
	asm volatile ( "ret" );
    17c0:	08 95       	ret
	...

000017c4 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	1f 92       	push	r1
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    17d2:	80 91 e8 2c 	lds	r24, 0x2CE8	; 0x802ce8 <intTaskSwitchPending>
    17d6:	98 2f       	mov	r25, r24
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	89 2b       	or	r24, r25
    17dc:	80 93 e8 2c 	sts	0x2CE8, r24	; 0x802ce8 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    17e0:	80 ea       	ldi	r24, 0xA0	; 160
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	fc 01       	movw	r30, r24
    17e6:	80 81       	ld	r24, Z
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	61 f0       	breq	.+24     	; 0x1804 <portTaskSwitchContext+0x40>
    17ec:	80 ea       	ldi	r24, 0xA0	; 160
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	fc 01       	movw	r30, r24
    17f2:	80 81       	ld	r24, Z
    17f4:	82 30       	cpi	r24, 0x02	; 2
    17f6:	31 f0       	breq	.+12     	; 0x1804 <portTaskSwitchContext+0x40>
    17f8:	80 ea       	ldi	r24, 0xA0	; 160
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	fc 01       	movw	r30, r24
    17fe:	80 81       	ld	r24, Z
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	79 f4       	brne	.+30     	; 0x1822 <portTaskSwitchContext+0x5e>
    1804:	80 91 e8 2c 	lds	r24, 0x2CE8	; 0x802ce8 <intTaskSwitchPending>
    1808:	88 23       	and	r24, r24
    180a:	59 f0       	breq	.+22     	; 0x1822 <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    180c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_portSetInterruptMaskFromIsr>
    1810:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    1812:	10 92 e8 2c 	sts	0x2CE8, r1	; 0x802ce8 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    1816:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    181a:	80 ea       	ldi	r24, 0xA0	; 160
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	fc 01       	movw	r30, r24
    1820:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    1822:	00 00       	nop
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	08 95       	ret

0000182e <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    1838:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_portSetInterruptMaskFromIsr>
    183c:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    183e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    1842:	80 ea       	ldi	r24, 0xA0	; 160
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	fc 01       	movw	r30, r24
    1848:	12 83       	std	Z+2, r17	; 0x02
	}
    184a:	00 00       	nop
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	08 95       	ret

00001854 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    1854:	ff 93       	push	r31
    1856:	ff b7       	in	r31, 0x3f	; 63
    1858:	ff 93       	push	r31
    185a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    185e:	ff 93       	push	r31
    1860:	f8 7f       	andi	r31, 0xF8	; 248
    1862:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1866:	0f 92       	push	r0
    1868:	1f 92       	push	r1
    186a:	11 24       	eor	r1, r1
    186c:	2f 92       	push	r2
    186e:	3f 92       	push	r3
    1870:	4f 92       	push	r4
    1872:	5f 92       	push	r5
    1874:	6f 92       	push	r6
    1876:	7f 92       	push	r7
    1878:	8f 92       	push	r8
    187a:	9f 92       	push	r9
    187c:	af 92       	push	r10
    187e:	bf 92       	push	r11
    1880:	cf 92       	push	r12
    1882:	df 92       	push	r13
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	2f 93       	push	r18
    188e:	3f 93       	push	r19
    1890:	4f 93       	push	r20
    1892:	5f 93       	push	r21
    1894:	6f 93       	push	r22
    1896:	7f 93       	push	r23
    1898:	8f 93       	push	r24
    189a:	9f 93       	push	r25
    189c:	af 93       	push	r26
    189e:	bf 93       	push	r27
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	ef 93       	push	r30
    18a6:	a0 91 2a 2c 	lds	r26, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    18aa:	b0 91 2b 2c 	lds	r27, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    18ae:	0d b6       	in	r0, 0x3d	; 61
    18b0:	0d 92       	st	X+, r0
    18b2:	0e b6       	in	r0, 0x3e	; 62
    18b4:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    18b6:	0e 94 17 0c 	call	0x182e	; 0x182e <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <portTaskSwitchContext>
    18c0:	a0 91 2a 2c 	lds	r26, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    18c4:	b0 91 2b 2c 	lds	r27, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    18c8:	0d 90       	ld	r0, X+
    18ca:	0d be       	out	0x3d, r0	; 61
    18cc:	0d 90       	ld	r0, X+
    18ce:	0e be       	out	0x3e, r0	; 62
    18d0:	ef 91       	pop	r30
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	bf 91       	pop	r27
    18d8:	af 91       	pop	r26
    18da:	9f 91       	pop	r25
    18dc:	8f 91       	pop	r24
    18de:	7f 91       	pop	r23
    18e0:	6f 91       	pop	r22
    18e2:	5f 91       	pop	r21
    18e4:	4f 91       	pop	r20
    18e6:	3f 91       	pop	r19
    18e8:	2f 91       	pop	r18
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	bf 90       	pop	r11
    18f8:	af 90       	pop	r10
    18fa:	9f 90       	pop	r9
    18fc:	8f 90       	pop	r8
    18fe:	7f 90       	pop	r7
    1900:	6f 90       	pop	r6
    1902:	5f 90       	pop	r5
    1904:	4f 90       	pop	r4
    1906:	3f 90       	pop	r3
    1908:	2f 90       	pop	r2
    190a:	1f 90       	pop	r1
    190c:	0f 90       	pop	r0
    190e:	ff 91       	pop	r31
    1910:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1914:	ff 91       	pop	r31
    1916:	ff bf       	out	0x3f, r31	; 63
    1918:	ff 91       	pop	r31
    191a:	18 95       	reti
	...

0000191e <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	00 d0       	rcall	.+0      	; 0x1924 <prvSetupTimerInterrupt+0x6>
    1924:	1f 92       	push	r1
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	9d e7       	ldi	r25, 0x7D	; 125
    192e:	a0 e0       	ldi	r26, 0x00	; 0
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	ab 83       	std	Y+3, r26	; 0x03
    1938:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	ab 81       	ldd	r26, Y+3	; 0x03
    1940:	bc 81       	ldd	r27, Y+4	; 0x04
    1942:	68 94       	set
    1944:	15 f8       	bld	r1, 5
    1946:	b6 95       	lsr	r27
    1948:	a7 95       	ror	r26
    194a:	97 95       	ror	r25
    194c:	87 95       	ror	r24
    194e:	16 94       	lsr	r1
    1950:	d1 f7       	brne	.-12     	; 0x1946 <prvSetupTimerInterrupt+0x28>
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	ab 83       	std	Y+3, r26	; 0x03
    1958:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	ab 81       	ldd	r26, Y+3	; 0x03
    1960:	bc 81       	ldd	r27, Y+4	; 0x04
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	a1 09       	sbc	r26, r1
    1966:	b1 09       	sbc	r27, r1
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	ab 83       	std	Y+3, r26	; 0x03
    196e:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	98 e0       	ldi	r25, 0x08	; 8
    1974:	29 81       	ldd	r18, Y+1	; 0x01
    1976:	3a 81       	ldd	r19, Y+2	; 0x02
    1978:	fc 01       	movw	r30, r24
    197a:	26 a3       	std	Z+38, r18	; 0x26
    197c:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    197e:	65 e0       	ldi	r22, 0x05	; 5
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	98 e0       	ldi	r25, 0x08	; 8
    1984:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	98 e0       	ldi	r25, 0x08	; 8
    198e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    1992:	00 00       	nop
    1994:	24 96       	adiw	r28, 0x04	; 4
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	25 97       	sbiw	r28, 0x05	; 5
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	8b 83       	std	Y+3, r24	; 0x03
    19b0:	9c 83       	std	Y+4, r25	; 0x04
    19b2:	6d 83       	std	Y+5, r22	; 0x05
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19c0:	ff 93       	push	r31
    19c2:	f8 7f       	andi	r31, 0xF8	; 248
    19c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	fc 01       	movw	r30, r24
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	29 81       	ldd	r18, Y+1	; 0x01
    19d4:	3a 81       	ldd	r19, Y+2	; 0x02
    19d6:	f9 01       	movw	r30, r18
    19d8:	27 8d       	ldd	r18, Z+31	; 0x1f
    19da:	42 2f       	mov	r20, r18
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	29 81       	ldd	r18, Y+1	; 0x01
    19e0:	3a 81       	ldd	r19, Y+2	; 0x02
    19e2:	f9 01       	movw	r30, r18
    19e4:	20 a1       	ldd	r18, Z+32	; 0x20
    19e6:	22 2f       	mov	r18, r18
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	42 9f       	mul	r20, r18
    19ec:	b0 01       	movw	r22, r0
    19ee:	43 9f       	mul	r20, r19
    19f0:	70 0d       	add	r23, r0
    19f2:	52 9f       	mul	r21, r18
    19f4:	70 0d       	add	r23, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	9b 01       	movw	r18, r22
    19fa:	28 0f       	add	r18, r24
    19fc:	39 1f       	adc	r19, r25
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	fc 01       	movw	r30, r24
    1a04:	22 83       	std	Z+2, r18	; 0x02
    1a06:	33 83       	std	Z+3, r19	; 0x03
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	16 8e       	std	Z+30, r1	; 0x1e
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 81       	ld	r18, Z
    1a18:	31 81       	ldd	r19, Z+1	; 0x01
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	fc 01       	movw	r30, r24
    1a20:	24 83       	std	Z+4, r18	; 0x04
    1a22:	35 83       	std	Z+5, r19	; 0x05
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	fc 01       	movw	r30, r24
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	29 81       	ldd	r18, Y+1	; 0x01
    1a30:	3a 81       	ldd	r19, Y+2	; 0x02
    1a32:	f9 01       	movw	r30, r18
    1a34:	27 8d       	ldd	r18, Z+31	; 0x1f
    1a36:	22 2f       	mov	r18, r18
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	a9 01       	movw	r20, r18
    1a3c:	41 50       	subi	r20, 0x01	; 1
    1a3e:	51 09       	sbc	r21, r1
    1a40:	29 81       	ldd	r18, Y+1	; 0x01
    1a42:	3a 81       	ldd	r19, Y+2	; 0x02
    1a44:	f9 01       	movw	r30, r18
    1a46:	20 a1       	ldd	r18, Z+32	; 0x20
    1a48:	22 2f       	mov	r18, r18
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	42 9f       	mul	r20, r18
    1a4e:	b0 01       	movw	r22, r0
    1a50:	43 9f       	mul	r20, r19
    1a52:	70 0d       	add	r23, r0
    1a54:	52 9f       	mul	r21, r18
    1a56:	70 0d       	add	r23, r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	9b 01       	movw	r18, r22
    1a5c:	28 0f       	add	r18, r24
    1a5e:	39 1f       	adc	r19, r25
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	fc 01       	movw	r30, r24
    1a66:	26 83       	std	Z+6, r18	; 0x06
    1a68:	37 83       	std	Z+7, r19	; 0x07
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	2f ef       	ldi	r18, 0xFF	; 255
    1a70:	fc 01       	movw	r30, r24
    1a72:	21 a3       	std	Z+33, r18	; 0x21
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	2f ef       	ldi	r18, 0xFF	; 255
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	22 a3       	std	Z+34, r18	; 0x22
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	88 23       	and	r24, r24
    1a82:	81 f4       	brne	.+32     	; 0x1aa4 <xQueueGenericReset+0x104>
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	fc 01       	movw	r30, r24
    1a8a:	80 85       	ldd	r24, Z+8	; 0x08
    1a8c:	88 23       	and	r24, r24
    1a8e:	a1 f0       	breq	.+40     	; 0x1ab8 <xQueueGenericReset+0x118>
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	08 96       	adiw	r24, 0x08	; 8
    1a96:	0e 94 32 18 	call	0x3064	; 0x3064 <xTaskRemoveFromEventList>
    1a9a:	88 23       	and	r24, r24
    1a9c:	69 f0       	breq	.+26     	; 0x1ab8 <xQueueGenericReset+0x118>
    1a9e:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1aa2:	0a c0       	rjmp	.+20     	; 0x1ab8 <xQueueGenericReset+0x118>
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa8:	08 96       	adiw	r24, 0x08	; 8
    1aaa:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	43 96       	adiw	r24, 0x13	; 19
    1ab4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    1ab8:	ff 91       	pop	r31
    1aba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	25 96       	adiw	r28, 0x05	; 5
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	08 95       	ret

00001acc <xQueueGenericCreate>:
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	29 97       	sbiw	r28, 0x09	; 9
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	8f 83       	std	Y+7, r24	; 0x07
    1ae0:	68 87       	std	Y+8, r22	; 0x08
    1ae2:	49 87       	std	Y+9, r20	; 0x09
    1ae4:	88 85       	ldd	r24, Y+8	; 0x08
    1ae6:	88 23       	and	r24, r24
    1ae8:	19 f4       	brne	.+6      	; 0x1af0 <xQueueGenericCreate+0x24>
    1aea:	19 82       	std	Y+1, r1	; 0x01
    1aec:	1a 82       	std	Y+2, r1	; 0x02
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <xQueueGenericCreate+0x42>
    1af0:	8f 81       	ldd	r24, Y+7	; 0x07
    1af2:	48 2f       	mov	r20, r24
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	88 85       	ldd	r24, Y+8	; 0x08
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	42 9f       	mul	r20, r18
    1afe:	c0 01       	movw	r24, r0
    1b00:	43 9f       	mul	r20, r19
    1b02:	90 0d       	add	r25, r0
    1b04:	52 9f       	mul	r21, r18
    1b06:	90 0d       	add	r25, r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	85 96       	adiw	r24, 0x25	; 37
    1b14:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	89 2b       	or	r24, r25
    1b22:	81 f0       	breq	.+32     	; 0x1b44 <xQueueGenericCreate+0x78>
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	85 96       	adiw	r24, 0x25	; 37
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	89 01       	movw	r16, r18
    1b38:	29 85       	ldd	r18, Y+9	; 0x09
    1b3a:	ac 01       	movw	r20, r24
    1b3c:	68 85       	ldd	r22, Y+8	; 0x08
    1b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b40:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <prvInitialiseNewQueue>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	29 96       	adiw	r28, 0x09	; 9
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	08 95       	ret

00001b58 <prvInitialiseNewQueue>:
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	27 97       	sbiw	r28, 0x07	; 7
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	6a 83       	std	Y+2, r22	; 0x02
    1b6e:	4b 83       	std	Y+3, r20	; 0x03
    1b70:	5c 83       	std	Y+4, r21	; 0x04
    1b72:	2d 83       	std	Y+5, r18	; 0x05
    1b74:	0e 83       	std	Y+6, r16	; 0x06
    1b76:	1f 83       	std	Y+7, r17	; 0x07
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	88 23       	and	r24, r24
    1b7c:	41 f4       	brne	.+16     	; 0x1b8e <prvInitialiseNewQueue+0x36>
    1b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b80:	9f 81       	ldd	r25, Y+7	; 0x07
    1b82:	2e 81       	ldd	r18, Y+6	; 0x06
    1b84:	3f 81       	ldd	r19, Y+7	; 0x07
    1b86:	fc 01       	movw	r30, r24
    1b88:	20 83       	st	Z, r18
    1b8a:	31 83       	std	Z+1, r19	; 0x01
    1b8c:	07 c0       	rjmp	.+14     	; 0x1b9c <prvInitialiseNewQueue+0x44>
    1b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b90:	9f 81       	ldd	r25, Y+7	; 0x07
    1b92:	2b 81       	ldd	r18, Y+3	; 0x03
    1b94:	3c 81       	ldd	r19, Y+4	; 0x04
    1b96:	fc 01       	movw	r30, r24
    1b98:	20 83       	st	Z, r18
    1b9a:	31 83       	std	Z+1, r19	; 0x01
    1b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba0:	29 81       	ldd	r18, Y+1	; 0x01
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	27 8f       	std	Z+31, r18	; 0x1f
    1ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba8:	9f 81       	ldd	r25, Y+7	; 0x07
    1baa:	2a 81       	ldd	r18, Y+2	; 0x02
    1bac:	fc 01       	movw	r30, r24
    1bae:	20 a3       	std	Z+32, r18	; 0x20
    1bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <xQueueGenericReset>
    1bba:	8e 81       	ldd	r24, Y+6	; 0x06
    1bbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bbe:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	24 a3       	std	Z+36, r18	; 0x24
    1bc4:	00 00       	nop
    1bc6:	27 96       	adiw	r28, 0x07	; 7
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	08 95       	ret

00001bd6 <xQueueGenericSend>:
    1bd6:	0f 93       	push	r16
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	62 97       	sbiw	r28, 0x12	; 18
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	8a 87       	std	Y+10, r24	; 0x0a
    1be8:	9b 87       	std	Y+11, r25	; 0x0b
    1bea:	6c 87       	std	Y+12, r22	; 0x0c
    1bec:	7d 87       	std	Y+13, r23	; 0x0d
    1bee:	2e 87       	std	Y+14, r18	; 0x0e
    1bf0:	3f 87       	std	Y+15, r19	; 0x0f
    1bf2:	48 8b       	std	Y+16, r20	; 0x10
    1bf4:	59 8b       	std	Y+17, r21	; 0x11
    1bf6:	0a 8b       	std	Y+18, r16	; 0x12
    1bf8:	19 82       	std	Y+1, r1	; 0x01
    1bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bfc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
    1c00:	9b 83       	std	Y+3, r25	; 0x03
    1c02:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c06:	ff 93       	push	r31
    1c08:	f8 7f       	andi	r31, 0xF8	; 248
    1c0a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	9b 81       	ldd	r25, Y+3	; 0x03
    1c12:	fc 01       	movw	r30, r24
    1c14:	26 8d       	ldd	r18, Z+30	; 0x1e
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1c1e:	28 17       	cp	r18, r24
    1c20:	18 f0       	brcs	.+6      	; 0x1c28 <xQueueGenericSend+0x52>
    1c22:	8a 89       	ldd	r24, Y+18	; 0x12
    1c24:	82 30       	cpi	r24, 0x02	; 2
    1c26:	19 f5       	brne	.+70     	; 0x1c6e <xQueueGenericSend+0x98>
    1c28:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c2a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c30:	4a 89       	ldd	r20, Y+18	; 0x12
    1c32:	b9 01       	movw	r22, r18
    1c34:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <prvCopyDataToQueue>
    1c38:	8c 83       	std	Y+4, r24	; 0x04
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3e:	fc 01       	movw	r30, r24
    1c40:	83 89       	ldd	r24, Z+19	; 0x13
    1c42:	88 23       	and	r24, r24
    1c44:	51 f0       	breq	.+20     	; 0x1c5a <xQueueGenericSend+0x84>
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	43 96       	adiw	r24, 0x13	; 19
    1c4c:	0e 94 32 18 	call	0x3064	; 0x3064 <xTaskRemoveFromEventList>
    1c50:	88 23       	and	r24, r24
    1c52:	41 f0       	breq	.+16     	; 0x1c64 <xQueueGenericSend+0x8e>
    1c54:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <xQueueGenericSend+0x8e>
    1c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5c:	88 23       	and	r24, r24
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <xQueueGenericSend+0x8e>
    1c60:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1c64:	ff 91       	pop	r31
    1c66:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	6f c0       	rjmp	.+222    	; 0x1d4c <xQueueGenericSend+0x176>
    1c6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c70:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c72:	a8 89       	ldd	r26, Y+16	; 0x10
    1c74:	b9 89       	ldd	r27, Y+17	; 0x11
    1c76:	89 2b       	or	r24, r25
    1c78:	8a 2b       	or	r24, r26
    1c7a:	8b 2b       	or	r24, r27
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <xQueueGenericSend+0xb2>
    1c7e:	ff 91       	pop	r31
    1c80:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	62 c0       	rjmp	.+196    	; 0x1d4c <xQueueGenericSend+0x176>
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	88 23       	and	r24, r24
    1c8c:	31 f4       	brne	.+12     	; 0x1c9a <xQueueGenericSend+0xc4>
    1c8e:	ce 01       	movw	r24, r28
    1c90:	05 96       	adiw	r24, 0x05	; 5
    1c92:	0e 94 fd 18 	call	0x31fa	; 0x31fa <vTaskInternalSetTimeOutState>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	ff 91       	pop	r31
    1c9c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ca0:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <vTaskSuspendAll>
    1ca4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ca8:	ff 93       	push	r31
    1caa:	f8 7f       	andi	r31, 0xF8	; 248
    1cac:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	81 a1       	ldd	r24, Z+33	; 0x21
    1cb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cba:	21 f4       	brne	.+8      	; 0x1cc4 <xQueueGenericSend+0xee>
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	11 a2       	std	Z+33, r1	; 0x21
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc8:	fc 01       	movw	r30, r24
    1cca:	82 a1       	ldd	r24, Z+34	; 0x22
    1ccc:	8f 3f       	cpi	r24, 0xFF	; 255
    1cce:	21 f4       	brne	.+8      	; 0x1cd8 <xQueueGenericSend+0x102>
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	12 a2       	std	Z+34, r1	; 0x22
    1cd8:	ff 91       	pop	r31
    1cda:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1cde:	9e 01       	movw	r18, r28
    1ce0:	22 5f       	subi	r18, 0xF2	; 242
    1ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	05 96       	adiw	r24, 0x05	; 5
    1ce8:	b9 01       	movw	r22, r18
    1cea:	0e 94 20 19 	call	0x3240	; 0x3240 <xTaskCheckForTimeOut>
    1cee:	88 23       	and	r24, r24
    1cf0:	31 f5       	brne	.+76     	; 0x1d3e <xQueueGenericSend+0x168>
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <prvIsQueueFull>
    1cfa:	88 23       	and	r24, r24
    1cfc:	c9 f0       	breq	.+50     	; 0x1d30 <xQueueGenericSend+0x15a>
    1cfe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d00:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d02:	a8 89       	ldd	r26, Y+16	; 0x10
    1d04:	b9 89       	ldd	r27, Y+17	; 0x11
    1d06:	2a 81       	ldd	r18, Y+2	; 0x02
    1d08:	3b 81       	ldd	r19, Y+3	; 0x03
    1d0a:	28 5f       	subi	r18, 0xF8	; 248
    1d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0e:	ac 01       	movw	r20, r24
    1d10:	bd 01       	movw	r22, r26
    1d12:	c9 01       	movw	r24, r18
    1d14:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <vTaskPlaceOnEventList>
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1d20:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
    1d24:	88 23       	and	r24, r24
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <xQueueGenericSend+0x154>
    1d28:	6c cf       	rjmp	.-296    	; 0x1c02 <xQueueGenericSend+0x2c>
    1d2a:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1d2e:	69 cf       	rjmp	.-302    	; 0x1c02 <xQueueGenericSend+0x2c>
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1d38:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
    1d3c:	62 cf       	rjmp	.-316    	; 0x1c02 <xQueueGenericSend+0x2c>
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	9b 81       	ldd	r25, Y+3	; 0x03
    1d42:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1d46:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	62 96       	adiw	r28, 0x12	; 18
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	0f 91       	pop	r16
    1d58:	08 95       	ret

00001d5a <xQueueGenericSendFromISR>:
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	2c 97       	sbiw	r28, 0x0c	; 12
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	8e 83       	std	Y+6, r24	; 0x06
    1d6a:	9f 83       	std	Y+7, r25	; 0x07
    1d6c:	68 87       	std	Y+8, r22	; 0x08
    1d6e:	79 87       	std	Y+9, r23	; 0x09
    1d70:	4a 87       	std	Y+10, r20	; 0x0a
    1d72:	5b 87       	std	Y+11, r21	; 0x0b
    1d74:	2c 87       	std	Y+12, r18	; 0x0c
    1d76:	8e 81       	ldd	r24, Y+6	; 0x06
    1d78:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7a:	8a 83       	std	Y+2, r24	; 0x02
    1d7c:	9b 83       	std	Y+3, r25	; 0x03
    1d7e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_portSetInterruptMaskFromIsr>
    1d82:	8c 83       	std	Y+4, r24	; 0x04
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	9b 81       	ldd	r25, Y+3	; 0x03
    1d88:	fc 01       	movw	r30, r24
    1d8a:	26 8d       	ldd	r18, Z+30	; 0x1e
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d90:	fc 01       	movw	r30, r24
    1d92:	87 8d       	ldd	r24, Z+31	; 0x1f
    1d94:	28 17       	cp	r18, r24
    1d96:	18 f0       	brcs	.+6      	; 0x1d9e <xQueueGenericSendFromISR+0x44>
    1d98:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	89 f5       	brne	.+98     	; 0x1e00 <xQueueGenericSendFromISR+0xa6>
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	9b 81       	ldd	r25, Y+3	; 0x03
    1da2:	fc 01       	movw	r30, r24
    1da4:	82 a1       	ldd	r24, Z+34	; 0x22
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	28 85       	ldd	r18, Y+8	; 0x08
    1daa:	39 85       	ldd	r19, Y+9	; 0x09
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	9b 81       	ldd	r25, Y+3	; 0x03
    1db0:	4c 85       	ldd	r20, Y+12	; 0x0c
    1db2:	b9 01       	movw	r22, r18
    1db4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <prvCopyDataToQueue>
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	8f 3f       	cpi	r24, 0xFF	; 255
    1dbc:	b9 f4       	brne	.+46     	; 0x1dec <xQueueGenericSendFromISR+0x92>
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	83 89       	ldd	r24, Z+19	; 0x13
    1dc6:	88 23       	and	r24, r24
    1dc8:	c1 f0       	breq	.+48     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	43 96       	adiw	r24, 0x13	; 19
    1dd0:	0e 94 32 18 	call	0x3064	; 0x3064 <xTaskRemoveFromEventList>
    1dd4:	88 23       	and	r24, r24
    1dd6:	89 f0       	breq	.+34     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1dd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ddc:	89 2b       	or	r24, r25
    1dde:	69 f0       	breq	.+26     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1de0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de4:	21 e0       	ldi	r18, 0x01	; 1
    1de6:	fc 01       	movw	r30, r24
    1de8:	20 83       	st	Z, r18
    1dea:	07 c0       	rjmp	.+14     	; 0x1dfa <xQueueGenericSendFromISR+0xa0>
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	8f 5f       	subi	r24, 0xFF	; 255
    1df0:	28 2f       	mov	r18, r24
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	fc 01       	movw	r30, r24
    1df8:	22 a3       	std	Z+34, r18	; 0x22
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <xQueueGenericSendFromISR+0xa8>
    1e00:	19 82       	std	Y+1, r1	; 0x01
    1e02:	80 ea       	ldi	r24, 0xA0	; 160
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	2c 81       	ldd	r18, Y+4	; 0x04
    1e08:	fc 01       	movw	r30, r24
    1e0a:	22 83       	std	Z+2, r18	; 0x02
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	2c 96       	adiw	r28, 0x0c	; 12
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	08 95       	ret

00001e1a <xQueueReceive>:
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	61 97       	sbiw	r28, 0x11	; 17
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	8a 87       	std	Y+10, r24	; 0x0a
    1e2a:	9b 87       	std	Y+11, r25	; 0x0b
    1e2c:	6c 87       	std	Y+12, r22	; 0x0c
    1e2e:	7d 87       	std	Y+13, r23	; 0x0d
    1e30:	2e 87       	std	Y+14, r18	; 0x0e
    1e32:	3f 87       	std	Y+15, r19	; 0x0f
    1e34:	48 8b       	std	Y+16, r20	; 0x10
    1e36:	59 8b       	std	Y+17, r21	; 0x11
    1e38:	19 82       	std	Y+1, r1	; 0x01
    1e3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e3e:	8a 83       	std	Y+2, r24	; 0x02
    1e40:	9b 83       	std	Y+3, r25	; 0x03
    1e42:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e46:	ff 93       	push	r31
    1e48:	f8 7f       	andi	r31, 0xF8	; 248
    1e4a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	9b 81       	ldd	r25, Y+3	; 0x03
    1e52:	fc 01       	movw	r30, r24
    1e54:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e56:	8c 83       	std	Y+4, r24	; 0x04
    1e58:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5a:	88 23       	and	r24, r24
    1e5c:	11 f1       	breq	.+68     	; 0x1ea2 <xQueueReceive+0x88>
    1e5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e60:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	b9 01       	movw	r22, r18
    1e68:	0e 94 9e 10 	call	0x213c	; 0x213c <prvCopyDataFromQueue>
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	2f ef       	ldi	r18, 0xFF	; 255
    1e70:	28 0f       	add	r18, r24
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	9b 81       	ldd	r25, Y+3	; 0x03
    1e76:	fc 01       	movw	r30, r24
    1e78:	26 8f       	std	Z+30, r18	; 0x1e
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	fc 01       	movw	r30, r24
    1e80:	80 85       	ldd	r24, Z+8	; 0x08
    1e82:	88 23       	and	r24, r24
    1e84:	49 f0       	breq	.+18     	; 0x1e98 <xQueueReceive+0x7e>
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	08 96       	adiw	r24, 0x08	; 8
    1e8c:	0e 94 32 18 	call	0x3064	; 0x3064 <xTaskRemoveFromEventList>
    1e90:	88 23       	and	r24, r24
    1e92:	11 f0       	breq	.+4      	; 0x1e98 <xQueueReceive+0x7e>
    1e94:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1e98:	ff 91       	pop	r31
    1e9a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	76 c0       	rjmp	.+236    	; 0x1f8e <xQueueReceive+0x174>
    1ea2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ea6:	a8 89       	ldd	r26, Y+16	; 0x10
    1ea8:	b9 89       	ldd	r27, Y+17	; 0x11
    1eaa:	89 2b       	or	r24, r25
    1eac:	8a 2b       	or	r24, r26
    1eae:	8b 2b       	or	r24, r27
    1eb0:	29 f4       	brne	.+10     	; 0x1ebc <xQueueReceive+0xa2>
    1eb2:	ff 91       	pop	r31
    1eb4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	69 c0       	rjmp	.+210    	; 0x1f8e <xQueueReceive+0x174>
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	88 23       	and	r24, r24
    1ec0:	31 f4       	brne	.+12     	; 0x1ece <xQueueReceive+0xb4>
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	05 96       	adiw	r24, 0x05	; 5
    1ec6:	0e 94 fd 18 	call	0x31fa	; 0x31fa <vTaskInternalSetTimeOutState>
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	ff 91       	pop	r31
    1ed0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ed4:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <vTaskSuspendAll>
    1ed8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1edc:	ff 93       	push	r31
    1ede:	f8 7f       	andi	r31, 0xF8	; 248
    1ee0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	fc 01       	movw	r30, r24
    1eea:	81 a1       	ldd	r24, Z+33	; 0x21
    1eec:	8f 3f       	cpi	r24, 0xFF	; 255
    1eee:	21 f4       	brne	.+8      	; 0x1ef8 <xQueueReceive+0xde>
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	11 a2       	std	Z+33, r1	; 0x21
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	9b 81       	ldd	r25, Y+3	; 0x03
    1efc:	fc 01       	movw	r30, r24
    1efe:	82 a1       	ldd	r24, Z+34	; 0x22
    1f00:	8f 3f       	cpi	r24, 0xFF	; 255
    1f02:	21 f4       	brne	.+8      	; 0x1f0c <xQueueReceive+0xf2>
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	fc 01       	movw	r30, r24
    1f0a:	12 a2       	std	Z+34, r1	; 0x22
    1f0c:	ff 91       	pop	r31
    1f0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f12:	9e 01       	movw	r18, r28
    1f14:	22 5f       	subi	r18, 0xF2	; 242
    1f16:	3f 4f       	sbci	r19, 0xFF	; 255
    1f18:	ce 01       	movw	r24, r28
    1f1a:	05 96       	adiw	r24, 0x05	; 5
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	0e 94 20 19 	call	0x3240	; 0x3240 <xTaskCheckForTimeOut>
    1f22:	88 23       	and	r24, r24
    1f24:	31 f5       	brne	.+76     	; 0x1f72 <xQueueReceive+0x158>
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <prvIsQueueEmpty>
    1f2e:	88 23       	and	r24, r24
    1f30:	c9 f0       	breq	.+50     	; 0x1f64 <xQueueReceive+0x14a>
    1f32:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f34:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f36:	a8 89       	ldd	r26, Y+16	; 0x10
    1f38:	b9 89       	ldd	r27, Y+17	; 0x11
    1f3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f3c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f3e:	2d 5e       	subi	r18, 0xED	; 237
    1f40:	3f 4f       	sbci	r19, 0xFF	; 255
    1f42:	ac 01       	movw	r20, r24
    1f44:	bd 01       	movw	r22, r26
    1f46:	c9 01       	movw	r24, r18
    1f48:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <vTaskPlaceOnEventList>
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f50:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1f54:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
    1f58:	88 23       	and	r24, r24
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <xQueueReceive+0x144>
    1f5c:	72 cf       	rjmp	.-284    	; 0x1e42 <xQueueReceive+0x28>
    1f5e:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    1f62:	6f cf       	rjmp	.-290    	; 0x1e42 <xQueueReceive+0x28>
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1f6c:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
    1f70:	68 cf       	rjmp	.-304    	; 0x1e42 <xQueueReceive+0x28>
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
    1f7a:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	0e 94 53 11 	call	0x22a6	; 0x22a6 <prvIsQueueEmpty>
    1f86:	88 23       	and	r24, r24
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <xQueueReceive+0x172>
    1f8a:	5b cf       	rjmp	.-330    	; 0x1e42 <xQueueReceive+0x28>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	61 96       	adiw	r28, 0x11	; 17
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	08 95       	ret

00001f9a <uxQueueMessagesWaiting>:
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <uxQueueMessagesWaiting+0x6>
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	8a 83       	std	Y+2, r24	; 0x02
    1fa6:	9b 83       	std	Y+3, r25	; 0x03
    1fa8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fac:	ff 93       	push	r31
    1fae:	f8 7f       	andi	r31, 0xF8	; 248
    1fb0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	fc 01       	movw	r30, r24
    1fba:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	ff 91       	pop	r31
    1fc0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	23 96       	adiw	r28, 0x03	; 3
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <prvCopyDataToQueue>:
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	27 97       	sbiw	r28, 0x07	; 7
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	6d 83       	std	Y+5, r22	; 0x05
    1fe6:	7e 83       	std	Y+6, r23	; 0x06
    1fe8:	4f 83       	std	Y+7, r20	; 0x07
    1fea:	1a 82       	std	Y+2, r1	; 0x02
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	80 a1       	ldd	r24, Z+32	; 0x20
    1ffe:	88 23       	and	r24, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <prvCopyDataToQueue+0x32>
    2002:	8e c0       	rjmp	.+284    	; 0x2120 <prvCopyDataToQueue+0x14e>
    2004:	8f 81       	ldd	r24, Y+7	; 0x07
    2006:	88 23       	and	r24, r24
    2008:	d9 f5       	brne	.+118    	; 0x2080 <prvCopyDataToQueue+0xae>
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	fc 01       	movw	r30, r24
    2010:	80 a1       	ldd	r24, Z+32	; 0x20
    2012:	48 2f       	mov	r20, r24
    2014:	50 e0       	ldi	r21, 0x00	; 0
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	fc 01       	movw	r30, r24
    201c:	84 81       	ldd	r24, Z+4	; 0x04
    201e:	95 81       	ldd	r25, Z+5	; 0x05
    2020:	2d 81       	ldd	r18, Y+5	; 0x05
    2022:	3e 81       	ldd	r19, Y+6	; 0x06
    2024:	b9 01       	movw	r22, r18
    2026:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <memcpy>
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	fc 01       	movw	r30, r24
    2030:	24 81       	ldd	r18, Z+4	; 0x04
    2032:	35 81       	ldd	r19, Z+5	; 0x05
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	fc 01       	movw	r30, r24
    203a:	80 a1       	ldd	r24, Z+32	; 0x20
    203c:	88 2f       	mov	r24, r24
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	28 0f       	add	r18, r24
    2042:	39 1f       	adc	r19, r25
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	fc 01       	movw	r30, r24
    204a:	24 83       	std	Z+4, r18	; 0x04
    204c:	35 83       	std	Z+5, r19	; 0x05
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	9c 81       	ldd	r25, Y+4	; 0x04
    2052:	fc 01       	movw	r30, r24
    2054:	24 81       	ldd	r18, Z+4	; 0x04
    2056:	35 81       	ldd	r19, Z+5	; 0x05
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	fc 01       	movw	r30, r24
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	28 17       	cp	r18, r24
    2064:	39 07       	cpc	r19, r25
    2066:	08 f4       	brcc	.+2      	; 0x206a <prvCopyDataToQueue+0x98>
    2068:	5b c0       	rjmp	.+182    	; 0x2120 <prvCopyDataToQueue+0x14e>
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	fc 01       	movw	r30, r24
    2070:	20 81       	ld	r18, Z
    2072:	31 81       	ldd	r19, Z+1	; 0x01
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	fc 01       	movw	r30, r24
    207a:	24 83       	std	Z+4, r18	; 0x04
    207c:	35 83       	std	Z+5, r19	; 0x05
    207e:	50 c0       	rjmp	.+160    	; 0x2120 <prvCopyDataToQueue+0x14e>
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	fc 01       	movw	r30, r24
    2086:	80 a1       	ldd	r24, Z+32	; 0x20
    2088:	48 2f       	mov	r20, r24
    208a:	50 e0       	ldi	r21, 0x00	; 0
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	fc 01       	movw	r30, r24
    2092:	86 81       	ldd	r24, Z+6	; 0x06
    2094:	97 81       	ldd	r25, Z+7	; 0x07
    2096:	2d 81       	ldd	r18, Y+5	; 0x05
    2098:	3e 81       	ldd	r19, Y+6	; 0x06
    209a:	b9 01       	movw	r22, r18
    209c:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <memcpy>
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	fc 01       	movw	r30, r24
    20a6:	26 81       	ldd	r18, Z+6	; 0x06
    20a8:	37 81       	ldd	r19, Z+7	; 0x07
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	fc 01       	movw	r30, r24
    20b0:	80 a1       	ldd	r24, Z+32	; 0x20
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	91 95       	neg	r25
    20b8:	81 95       	neg	r24
    20ba:	91 09       	sbc	r25, r1
    20bc:	28 0f       	add	r18, r24
    20be:	39 1f       	adc	r19, r25
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	fc 01       	movw	r30, r24
    20c6:	26 83       	std	Z+6, r18	; 0x06
    20c8:	37 83       	std	Z+7, r19	; 0x07
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	fc 01       	movw	r30, r24
    20d0:	26 81       	ldd	r18, Z+6	; 0x06
    20d2:	37 81       	ldd	r19, Z+7	; 0x07
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	fc 01       	movw	r30, r24
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	28 17       	cp	r18, r24
    20e0:	39 07       	cpc	r19, r25
    20e2:	a8 f4       	brcc	.+42     	; 0x210e <prvCopyDataToQueue+0x13c>
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	fc 01       	movw	r30, r24
    20ea:	22 81       	ldd	r18, Z+2	; 0x02
    20ec:	33 81       	ldd	r19, Z+3	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	fc 01       	movw	r30, r24
    20f4:	80 a1       	ldd	r24, Z+32	; 0x20
    20f6:	88 2f       	mov	r24, r24
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	91 95       	neg	r25
    20fc:	81 95       	neg	r24
    20fe:	91 09       	sbc	r25, r1
    2100:	28 0f       	add	r18, r24
    2102:	39 1f       	adc	r19, r25
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	fc 01       	movw	r30, r24
    210a:	26 83       	std	Z+6, r18	; 0x06
    210c:	37 83       	std	Z+7, r19	; 0x07
    210e:	8f 81       	ldd	r24, Y+7	; 0x07
    2110:	82 30       	cpi	r24, 0x02	; 2
    2112:	31 f4       	brne	.+12     	; 0x2120 <prvCopyDataToQueue+0x14e>
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	88 23       	and	r24, r24
    2118:	19 f0       	breq	.+6      	; 0x2120 <prvCopyDataToQueue+0x14e>
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	81 50       	subi	r24, 0x01	; 1
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	21 e0       	ldi	r18, 0x01	; 1
    2124:	28 0f       	add	r18, r24
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	fc 01       	movw	r30, r24
    212c:	26 8f       	std	Z+30, r18	; 0x1e
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	27 96       	adiw	r28, 0x07	; 7
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	08 95       	ret

0000213c <prvCopyDataFromQueue>:
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	00 d0       	rcall	.+0      	; 0x2142 <prvCopyDataFromQueue+0x6>
    2142:	1f 92       	push	r1
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	6b 83       	std	Y+3, r22	; 0x03
    214e:	7c 83       	std	Y+4, r23	; 0x04
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	fc 01       	movw	r30, r24
    2156:	80 a1       	ldd	r24, Z+32	; 0x20
    2158:	88 23       	and	r24, r24
    215a:	c9 f1       	breq	.+114    	; 0x21ce <prvCopyDataFromQueue+0x92>
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	fc 01       	movw	r30, r24
    2162:	26 81       	ldd	r18, Z+6	; 0x06
    2164:	37 81       	ldd	r19, Z+7	; 0x07
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
    216a:	fc 01       	movw	r30, r24
    216c:	80 a1       	ldd	r24, Z+32	; 0x20
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	28 0f       	add	r18, r24
    2174:	39 1f       	adc	r19, r25
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	fc 01       	movw	r30, r24
    217c:	26 83       	std	Z+6, r18	; 0x06
    217e:	37 83       	std	Z+7, r19	; 0x07
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	fc 01       	movw	r30, r24
    2186:	26 81       	ldd	r18, Z+6	; 0x06
    2188:	37 81       	ldd	r19, Z+7	; 0x07
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	fc 01       	movw	r30, r24
    2190:	82 81       	ldd	r24, Z+2	; 0x02
    2192:	93 81       	ldd	r25, Z+3	; 0x03
    2194:	28 17       	cp	r18, r24
    2196:	39 07       	cpc	r19, r25
    2198:	50 f0       	brcs	.+20     	; 0x21ae <prvCopyDataFromQueue+0x72>
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	fc 01       	movw	r30, r24
    21a0:	20 81       	ld	r18, Z
    21a2:	31 81       	ldd	r19, Z+1	; 0x01
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	fc 01       	movw	r30, r24
    21aa:	26 83       	std	Z+6, r18	; 0x06
    21ac:	37 83       	std	Z+7, r19	; 0x07
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	9a 81       	ldd	r25, Y+2	; 0x02
    21b2:	fc 01       	movw	r30, r24
    21b4:	80 a1       	ldd	r24, Z+32	; 0x20
    21b6:	48 2f       	mov	r20, r24
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	fc 01       	movw	r30, r24
    21c0:	26 81       	ldd	r18, Z+6	; 0x06
    21c2:	37 81       	ldd	r19, Z+7	; 0x07
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	b9 01       	movw	r22, r18
    21ca:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <memcpy>
    21ce:	00 00       	nop
    21d0:	24 96       	adiw	r28, 0x04	; 4
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	08 95       	ret

000021dc <prvUnlockQueue>:
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <prvUnlockQueue+0x6>
    21e2:	1f 92       	push	r1
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	8b 83       	std	Y+3, r24	; 0x03
    21ea:	9c 83       	std	Y+4, r25	; 0x04
    21ec:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    21f0:	ff 93       	push	r31
    21f2:	f8 7f       	andi	r31, 0xF8	; 248
    21f4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	fc 01       	movw	r30, r24
    21fe:	82 a1       	ldd	r24, Z+34	; 0x22
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	12 c0       	rjmp	.+36     	; 0x2228 <prvUnlockQueue+0x4c>
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	fc 01       	movw	r30, r24
    220a:	83 89       	ldd	r24, Z+19	; 0x13
    220c:	88 23       	and	r24, r24
    220e:	81 f0       	breq	.+32     	; 0x2230 <prvUnlockQueue+0x54>
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	43 96       	adiw	r24, 0x13	; 19
    2216:	0e 94 32 18 	call	0x3064	; 0x3064 <xTaskRemoveFromEventList>
    221a:	88 23       	and	r24, r24
    221c:	11 f0       	breq	.+4      	; 0x2222 <prvUnlockQueue+0x46>
    221e:	0e 94 c8 19 	call	0x3390	; 0x3390 <vTaskMissedYield>
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	81 50       	subi	r24, 0x01	; 1
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	18 16       	cp	r1, r24
    222c:	5c f3       	brlt	.-42     	; 0x2204 <prvUnlockQueue+0x28>
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <prvUnlockQueue+0x56>
    2230:	00 00       	nop
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	2f ef       	ldi	r18, 0xFF	; 255
    2238:	fc 01       	movw	r30, r24
    223a:	22 a3       	std	Z+34, r18	; 0x22
    223c:	ff 91       	pop	r31
    223e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2242:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2246:	ff 93       	push	r31
    2248:	f8 7f       	andi	r31, 0xF8	; 248
    224a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	fc 01       	movw	r30, r24
    2254:	81 a1       	ldd	r24, Z+33	; 0x21
    2256:	8a 83       	std	Y+2, r24	; 0x02
    2258:	12 c0       	rjmp	.+36     	; 0x227e <prvUnlockQueue+0xa2>
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	fc 01       	movw	r30, r24
    2260:	80 85       	ldd	r24, Z+8	; 0x08
    2262:	88 23       	and	r24, r24
    2264:	81 f0       	breq	.+32     	; 0x2286 <prvUnlockQueue+0xaa>
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	08 96       	adiw	r24, 0x08	; 8
    226c:	0e 94 32 18 	call	0x3064	; 0x3064 <xTaskRemoveFromEventList>
    2270:	88 23       	and	r24, r24
    2272:	11 f0       	breq	.+4      	; 0x2278 <prvUnlockQueue+0x9c>
    2274:	0e 94 c8 19 	call	0x3390	; 0x3390 <vTaskMissedYield>
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	81 50       	subi	r24, 0x01	; 1
    227c:	8a 83       	std	Y+2, r24	; 0x02
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	18 16       	cp	r1, r24
    2282:	5c f3       	brlt	.-42     	; 0x225a <prvUnlockQueue+0x7e>
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <prvUnlockQueue+0xac>
    2286:	00 00       	nop
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	2f ef       	ldi	r18, 0xFF	; 255
    228e:	fc 01       	movw	r30, r24
    2290:	21 a3       	std	Z+33, r18	; 0x21
    2292:	ff 91       	pop	r31
    2294:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2298:	00 00       	nop
    229a:	24 96       	adiw	r28, 0x04	; 4
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <prvIsQueueEmpty>:
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <prvIsQueueEmpty+0x6>
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	8a 83       	std	Y+2, r24	; 0x02
    22b2:	9b 83       	std	Y+3, r25	; 0x03
    22b4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22b8:	ff 93       	push	r31
    22ba:	f8 7f       	andi	r31, 0xF8	; 248
    22bc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	9b 81       	ldd	r25, Y+3	; 0x03
    22c4:	fc 01       	movw	r30, r24
    22c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    22c8:	88 23       	and	r24, r24
    22ca:	19 f4       	brne	.+6      	; 0x22d2 <prvIsQueueEmpty+0x2c>
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	01 c0       	rjmp	.+2      	; 0x22d4 <prvIsQueueEmpty+0x2e>
    22d2:	19 82       	std	Y+1, r1	; 0x01
    22d4:	ff 91       	pop	r31
    22d6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	23 96       	adiw	r28, 0x03	; 3
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	08 95       	ret

000022e8 <prvIsQueueFull>:
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <prvIsQueueFull+0x6>
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	8a 83       	std	Y+2, r24	; 0x02
    22f4:	9b 83       	std	Y+3, r25	; 0x03
    22f6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22fa:	ff 93       	push	r31
    22fc:	f8 7f       	andi	r31, 0xF8	; 248
    22fe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	fc 01       	movw	r30, r24
    2308:	26 8d       	ldd	r18, Z+30	; 0x1e
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	9b 81       	ldd	r25, Y+3	; 0x03
    230e:	fc 01       	movw	r30, r24
    2310:	87 8d       	ldd	r24, Z+31	; 0x1f
    2312:	28 17       	cp	r18, r24
    2314:	19 f4       	brne	.+6      	; 0x231c <prvIsQueueFull+0x34>
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	01 c0       	rjmp	.+2      	; 0x231e <prvIsQueueFull+0x36>
    231c:	19 82       	std	Y+1, r1	; 0x01
    231e:	ff 91       	pop	r31
    2320:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	23 96       	adiw	r28, 0x03	; 3
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	08 95       	ret

00002332 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	29 97       	sbiw	r28, 0x09	; 9
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	8b 83       	std	Y+3, r24	; 0x03
    2342:	9c 83       	std	Y+4, r25	; 0x04
    2344:	4d 83       	std	Y+5, r20	; 0x05
    2346:	5e 83       	std	Y+6, r21	; 0x06
    2348:	6f 83       	std	Y+7, r22	; 0x07
    234a:	78 87       	std	Y+8, r23	; 0x08
    234c:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2356:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    235a:	ff 93       	push	r31
    235c:	f8 7f       	andi	r31, 0xF8	; 248
    235e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	fc 01       	movw	r30, r24
    2368:	81 a1       	ldd	r24, Z+33	; 0x21
    236a:	8f 3f       	cpi	r24, 0xFF	; 255
    236c:	21 f4       	brne	.+8      	; 0x2376 <vQueueWaitForMessageRestricted+0x44>
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	fc 01       	movw	r30, r24
    2374:	11 a2       	std	Z+33, r1	; 0x21
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	fc 01       	movw	r30, r24
    237c:	82 a1       	ldd	r24, Z+34	; 0x22
    237e:	8f 3f       	cpi	r24, 0xFF	; 255
    2380:	21 f4       	brne	.+8      	; 0x238a <vQueueWaitForMessageRestricted+0x58>
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	fc 01       	movw	r30, r24
    2388:	12 a2       	std	Z+34, r1	; 0x22
    238a:	ff 91       	pop	r31
    238c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
    2394:	fc 01       	movw	r30, r24
    2396:	86 8d       	ldd	r24, Z+30	; 0x1e
    2398:	88 23       	and	r24, r24
    239a:	71 f4       	brne	.+28     	; 0x23b8 <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	fc 01       	movw	r30, r24
    23a2:	73 96       	adiw	r30, 0x13	; 19
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	af 81       	ldd	r26, Y+7	; 0x07
    23aa:	b8 85       	ldd	r27, Y+8	; 0x08
    23ac:	29 85       	ldd	r18, Y+9	; 0x09
    23ae:	ac 01       	movw	r20, r24
    23b0:	bd 01       	movw	r22, r26
    23b2:	cf 01       	movw	r24, r30
    23b4:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvUnlockQueue>
	}
    23c0:	00 00       	nop
    23c2:	29 96       	adiw	r28, 0x09	; 9
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	08 95       	ret

000023ce <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    23ce:	8f 92       	push	r8
    23d0:	9f 92       	push	r9
    23d2:	af 92       	push	r10
    23d4:	bf 92       	push	r11
    23d6:	cf 92       	push	r12
    23d8:	df 92       	push	r13
    23da:	ef 92       	push	r14
    23dc:	ff 92       	push	r15
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	60 97       	sbiw	r28, 0x10	; 16
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	8e 83       	std	Y+6, r24	; 0x06
    23f2:	9f 83       	std	Y+7, r25	; 0x07
    23f4:	68 87       	std	Y+8, r22	; 0x08
    23f6:	79 87       	std	Y+9, r23	; 0x09
    23f8:	4a 87       	std	Y+10, r20	; 0x0a
    23fa:	5b 87       	std	Y+11, r21	; 0x0b
    23fc:	2c 87       	std	Y+12, r18	; 0x0c
    23fe:	3d 87       	std	Y+13, r19	; 0x0d
    2400:	0e 87       	std	Y+14, r16	; 0x0e
    2402:	ef 86       	std	Y+15, r14	; 0x0f
    2404:	f8 8a       	std	Y+16, r15	; 0x10
    2406:	8a 85       	ldd	r24, Y+10	; 0x0a
    2408:	9b 85       	ldd	r25, Y+11	; 0x0b
    240a:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
    240e:	8c 83       	std	Y+4, r24	; 0x04
    2410:	9d 83       	std	Y+5, r25	; 0x05
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	9d 81       	ldd	r25, Y+5	; 0x05
    2416:	89 2b       	or	r24, r25
    2418:	b9 f0       	breq	.+46     	; 0x2448 <xTaskCreate+0x7a>
    241a:	8c e2       	ldi	r24, 0x2C	; 44
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0e 94 97 07 	call	0xf2e	; 0xf2e <pvPortMalloc>
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	89 2b       	or	r24, r25
    242c:	41 f0       	breq	.+16     	; 0x243e <xTaskCreate+0x70>
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	9a 81       	ldd	r25, Y+2	; 0x02
    2432:	2c 81       	ldd	r18, Y+4	; 0x04
    2434:	3d 81       	ldd	r19, Y+5	; 0x05
    2436:	fc 01       	movw	r30, r24
    2438:	23 8f       	std	Z+27, r18	; 0x1b
    243a:	34 8f       	std	Z+28, r19	; 0x1c
    243c:	07 c0       	rjmp	.+14     	; 0x244c <xTaskCreate+0x7e>
    243e:	8c 81       	ldd	r24, Y+4	; 0x04
    2440:	9d 81       	ldd	r25, Y+5	; 0x05
    2442:	0e 94 db 07 	call	0xfb6	; 0xfb6 <vPortFree>
    2446:	02 c0       	rjmp	.+4      	; 0x244c <xTaskCreate+0x7e>
    2448:	19 82       	std	Y+1, r1	; 0x01
    244a:	1a 82       	std	Y+2, r1	; 0x02
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	89 2b       	or	r24, r25
    2452:	09 f1       	breq	.+66     	; 0x2496 <xTaskCreate+0xc8>
    2454:	8a 85       	ldd	r24, Y+10	; 0x0a
    2456:	9b 85       	ldd	r25, Y+11	; 0x0b
    2458:	cc 01       	movw	r24, r24
    245a:	a0 e0       	ldi	r26, 0x00	; 0
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	09 81       	ldd	r16, Y+1	; 0x01
    2460:	1a 81       	ldd	r17, Y+2	; 0x02
    2462:	4f 85       	ldd	r20, Y+15	; 0x0f
    2464:	58 89       	ldd	r21, Y+16	; 0x10
    2466:	2c 85       	ldd	r18, Y+12	; 0x0c
    2468:	3d 85       	ldd	r19, Y+13	; 0x0d
    246a:	68 85       	ldd	r22, Y+8	; 0x08
    246c:	79 85       	ldd	r23, Y+9	; 0x09
    246e:	ee 81       	ldd	r30, Y+6	; 0x06
    2470:	ff 81       	ldd	r31, Y+7	; 0x07
    2472:	81 2c       	mov	r8, r1
    2474:	91 2c       	mov	r9, r1
    2476:	58 01       	movw	r10, r16
    2478:	6a 01       	movw	r12, r20
    247a:	ee 84       	ldd	r14, Y+14	; 0x0e
    247c:	89 01       	movw	r16, r18
    247e:	9c 01       	movw	r18, r24
    2480:	ad 01       	movw	r20, r26
    2482:	cf 01       	movw	r24, r30
    2484:	0e 94 5e 12 	call	0x24bc	; 0x24bc <prvInitialiseNewTask>
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	0e 94 34 13 	call	0x2668	; 0x2668 <prvAddNewTaskToReadyList>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	8b 83       	std	Y+3, r24	; 0x03
    2494:	02 c0       	rjmp	.+4      	; 0x249a <xTaskCreate+0xcc>
    2496:	8f ef       	ldi	r24, 0xFF	; 255
    2498:	8b 83       	std	Y+3, r24	; 0x03
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	60 96       	adiw	r28, 0x10	; 16
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	cf 90       	pop	r12
    24b2:	bf 90       	pop	r11
    24b4:	af 90       	pop	r10
    24b6:	9f 90       	pop	r9
    24b8:	8f 90       	pop	r8
    24ba:	08 95       	ret

000024bc <prvInitialiseNewTask>:
    24bc:	8f 92       	push	r8
    24be:	9f 92       	push	r9
    24c0:	af 92       	push	r10
    24c2:	bf 92       	push	r11
    24c4:	cf 92       	push	r12
    24c6:	df 92       	push	r13
    24c8:	ef 92       	push	r14
    24ca:	ff 92       	push	r15
    24cc:	0f 93       	push	r16
    24ce:	1f 93       	push	r17
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	64 97       	sbiw	r28, 0x14	; 20
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	8c 83       	std	Y+4, r24	; 0x04
    24e0:	9d 83       	std	Y+5, r25	; 0x05
    24e2:	6e 83       	std	Y+6, r22	; 0x06
    24e4:	7f 83       	std	Y+7, r23	; 0x07
    24e6:	28 87       	std	Y+8, r18	; 0x08
    24e8:	39 87       	std	Y+9, r19	; 0x09
    24ea:	4a 87       	std	Y+10, r20	; 0x0a
    24ec:	5b 87       	std	Y+11, r21	; 0x0b
    24ee:	0c 87       	std	Y+12, r16	; 0x0c
    24f0:	1d 87       	std	Y+13, r17	; 0x0d
    24f2:	ee 86       	std	Y+14, r14	; 0x0e
    24f4:	cf 86       	std	Y+15, r12	; 0x0f
    24f6:	d8 8a       	std	Y+16, r13	; 0x10
    24f8:	a9 8a       	std	Y+17, r10	; 0x11
    24fa:	ba 8a       	std	Y+18, r11	; 0x12
    24fc:	8b 8a       	std	Y+19, r8	; 0x13
    24fe:	9c 8a       	std	Y+20, r9	; 0x14
    2500:	28 85       	ldd	r18, Y+8	; 0x08
    2502:	39 85       	ldd	r19, Y+9	; 0x09
    2504:	89 89       	ldd	r24, Y+17	; 0x11
    2506:	9a 89       	ldd	r25, Y+18	; 0x12
    2508:	fc 01       	movw	r30, r24
    250a:	83 8d       	ldd	r24, Z+27	; 0x1b
    250c:	94 8d       	ldd	r25, Z+28	; 0x1c
    250e:	a9 01       	movw	r20, r18
    2510:	65 ea       	ldi	r22, 0xA5	; 165
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <memset>
    2518:	89 89       	ldd	r24, Y+17	; 0x11
    251a:	9a 89       	ldd	r25, Y+18	; 0x12
    251c:	fc 01       	movw	r30, r24
    251e:	23 8d       	ldd	r18, Z+27	; 0x1b
    2520:	34 8d       	ldd	r19, Z+28	; 0x1c
    2522:	88 85       	ldd	r24, Y+8	; 0x08
    2524:	99 85       	ldd	r25, Y+9	; 0x09
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	82 0f       	add	r24, r18
    252a:	93 1f       	adc	r25, r19
    252c:	8a 83       	std	Y+2, r24	; 0x02
    252e:	9b 83       	std	Y+3, r25	; 0x03
    2530:	19 82       	std	Y+1, r1	; 0x01
    2532:	21 c0       	rjmp	.+66     	; 0x2576 <prvInitialiseNewTask+0xba>
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	88 2f       	mov	r24, r24
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	29 81       	ldd	r18, Y+1	; 0x01
    253c:	22 2f       	mov	r18, r18
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4e 81       	ldd	r20, Y+6	; 0x06
    2542:	5f 81       	ldd	r21, Y+7	; 0x07
    2544:	24 0f       	add	r18, r20
    2546:	35 1f       	adc	r19, r21
    2548:	f9 01       	movw	r30, r18
    254a:	40 81       	ld	r20, Z
    254c:	29 89       	ldd	r18, Y+17	; 0x11
    254e:	3a 89       	ldd	r19, Y+18	; 0x12
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	4d 96       	adiw	r24, 0x1d	; 29
    2556:	fc 01       	movw	r30, r24
    2558:	40 83       	st	Z, r20
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	2e 81       	ldd	r18, Y+6	; 0x06
    2562:	3f 81       	ldd	r19, Y+7	; 0x07
    2564:	82 0f       	add	r24, r18
    2566:	93 1f       	adc	r25, r19
    2568:	fc 01       	movw	r30, r24
    256a:	80 81       	ld	r24, Z
    256c:	88 23       	and	r24, r24
    256e:	39 f0       	breq	.+14     	; 0x257e <prvInitialiseNewTask+0xc2>
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	88 30       	cpi	r24, 0x08	; 8
    257a:	e0 f2       	brcs	.-72     	; 0x2534 <prvInitialiseNewTask+0x78>
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <prvInitialiseNewTask+0xc4>
    257e:	00 00       	nop
    2580:	89 89       	ldd	r24, Y+17	; 0x11
    2582:	9a 89       	ldd	r25, Y+18	; 0x12
    2584:	fc 01       	movw	r30, r24
    2586:	14 a2       	std	Z+36, r1	; 0x24
    2588:	8e 85       	ldd	r24, Y+14	; 0x0e
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	10 f0       	brcs	.+4      	; 0x2592 <prvInitialiseNewTask+0xd6>
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	8e 87       	std	Y+14, r24	; 0x0e
    2592:	89 89       	ldd	r24, Y+17	; 0x11
    2594:	9a 89       	ldd	r25, Y+18	; 0x12
    2596:	2e 85       	ldd	r18, Y+14	; 0x0e
    2598:	fc 01       	movw	r30, r24
    259a:	22 8f       	std	Z+26, r18	; 0x1a
    259c:	89 89       	ldd	r24, Y+17	; 0x11
    259e:	9a 89       	ldd	r25, Y+18	; 0x12
    25a0:	02 96       	adiw	r24, 0x02	; 2
    25a2:	0e 94 23 08 	call	0x1046	; 0x1046 <vListInitialiseItem>
    25a6:	89 89       	ldd	r24, Y+17	; 0x11
    25a8:	9a 89       	ldd	r25, Y+18	; 0x12
    25aa:	0e 96       	adiw	r24, 0x0e	; 14
    25ac:	0e 94 23 08 	call	0x1046	; 0x1046 <vListInitialiseItem>
    25b0:	89 89       	ldd	r24, Y+17	; 0x11
    25b2:	9a 89       	ldd	r25, Y+18	; 0x12
    25b4:	29 89       	ldd	r18, Y+17	; 0x11
    25b6:	3a 89       	ldd	r19, Y+18	; 0x12
    25b8:	fc 01       	movw	r30, r24
    25ba:	22 87       	std	Z+10, r18	; 0x0a
    25bc:	33 87       	std	Z+11, r19	; 0x0b
    25be:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	a0 e0       	ldi	r26, 0x00	; 0
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	24 e0       	ldi	r18, 0x04	; 4
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	79 01       	movw	r14, r18
    25d2:	8a 01       	movw	r16, r20
    25d4:	e8 1a       	sub	r14, r24
    25d6:	f9 0a       	sbc	r15, r25
    25d8:	0a 0b       	sbc	r16, r26
    25da:	1b 0b       	sbc	r17, r27
    25dc:	d8 01       	movw	r26, r16
    25de:	c7 01       	movw	r24, r14
    25e0:	29 89       	ldd	r18, Y+17	; 0x11
    25e2:	3a 89       	ldd	r19, Y+18	; 0x12
    25e4:	f9 01       	movw	r30, r18
    25e6:	86 87       	std	Z+14, r24	; 0x0e
    25e8:	97 87       	std	Z+15, r25	; 0x0f
    25ea:	a0 8b       	std	Z+16, r26	; 0x10
    25ec:	b1 8b       	std	Z+17, r27	; 0x11
    25ee:	89 89       	ldd	r24, Y+17	; 0x11
    25f0:	9a 89       	ldd	r25, Y+18	; 0x12
    25f2:	29 89       	ldd	r18, Y+17	; 0x11
    25f4:	3a 89       	ldd	r19, Y+18	; 0x12
    25f6:	fc 01       	movw	r30, r24
    25f8:	26 8b       	std	Z+22, r18	; 0x16
    25fa:	37 8b       	std	Z+23, r19	; 0x17
    25fc:	89 89       	ldd	r24, Y+17	; 0x11
    25fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2600:	fc 01       	movw	r30, r24
    2602:	17 a2       	std	Z+39, r1	; 0x27
    2604:	10 a6       	std	Z+40, r1	; 0x28
    2606:	11 a6       	std	Z+41, r1	; 0x29
    2608:	12 a6       	std	Z+42, r1	; 0x2a
    260a:	89 89       	ldd	r24, Y+17	; 0x11
    260c:	9a 89       	ldd	r25, Y+18	; 0x12
    260e:	fc 01       	movw	r30, r24
    2610:	13 a6       	std	Z+43, r1	; 0x2b
    2612:	4c 85       	ldd	r20, Y+12	; 0x0c
    2614:	5d 85       	ldd	r21, Y+13	; 0x0d
    2616:	2c 81       	ldd	r18, Y+4	; 0x04
    2618:	3d 81       	ldd	r19, Y+5	; 0x05
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	9b 81       	ldd	r25, Y+3	; 0x03
    261e:	b9 01       	movw	r22, r18
    2620:	0e 94 6f 09 	call	0x12de	; 0x12de <pxPortInitialiseStack>
    2624:	9c 01       	movw	r18, r24
    2626:	89 89       	ldd	r24, Y+17	; 0x11
    2628:	9a 89       	ldd	r25, Y+18	; 0x12
    262a:	fc 01       	movw	r30, r24
    262c:	20 83       	st	Z, r18
    262e:	31 83       	std	Z+1, r19	; 0x01
    2630:	8f 85       	ldd	r24, Y+15	; 0x0f
    2632:	98 89       	ldd	r25, Y+16	; 0x10
    2634:	89 2b       	or	r24, r25
    2636:	39 f0       	breq	.+14     	; 0x2646 <prvInitialiseNewTask+0x18a>
    2638:	8f 85       	ldd	r24, Y+15	; 0x0f
    263a:	98 89       	ldd	r25, Y+16	; 0x10
    263c:	29 89       	ldd	r18, Y+17	; 0x11
    263e:	3a 89       	ldd	r19, Y+18	; 0x12
    2640:	fc 01       	movw	r30, r24
    2642:	20 83       	st	Z, r18
    2644:	31 83       	std	Z+1, r19	; 0x01
    2646:	00 00       	nop
    2648:	64 96       	adiw	r28, 0x14	; 20
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	1f 91       	pop	r17
    2654:	0f 91       	pop	r16
    2656:	ff 90       	pop	r15
    2658:	ef 90       	pop	r14
    265a:	df 90       	pop	r13
    265c:	cf 90       	pop	r12
    265e:	bf 90       	pop	r11
    2660:	af 90       	pop	r10
    2662:	9f 90       	pop	r9
    2664:	8f 90       	pop	r8
    2666:	08 95       	ret

00002668 <prvAddNewTaskToReadyList>:
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	1f 92       	push	r1
    266e:	1f 92       	push	r1
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    267c:	ff 93       	push	r31
    267e:	f8 7f       	andi	r31, 0xF8	; 248
    2680:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2684:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <uxCurrentNumberOfTasks>
    2688:	8f 5f       	subi	r24, 0xFF	; 255
    268a:	80 93 88 2c 	sts	0x2C88, r24	; 0x802c88 <uxCurrentNumberOfTasks>
    268e:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    2692:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    2696:	89 2b       	or	r24, r25
    2698:	69 f4       	brne	.+26     	; 0x26b4 <prvAddNewTaskToReadyList+0x4c>
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	80 93 2a 2c 	sts	0x2C2A, r24	; 0x802c2a <pxCurrentTCB>
    26a2:	90 93 2b 2c 	sts	0x2C2B, r25	; 0x802c2b <pxCurrentTCB+0x1>
    26a6:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <uxCurrentNumberOfTasks>
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	c9 f4       	brne	.+50     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26ae:	0e 94 e6 19 	call	0x33cc	; 0x33cc <prvInitialiseTaskLists>
    26b2:	16 c0       	rjmp	.+44     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26b4:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <xSchedulerRunning>
    26b8:	88 23       	and	r24, r24
    26ba:	91 f4       	brne	.+36     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26bc:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    26c0:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    26c4:	fc 01       	movw	r30, r24
    26c6:	22 8d       	ldd	r18, Z+26	; 0x1a
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	fc 01       	movw	r30, r24
    26ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    26d0:	82 17       	cp	r24, r18
    26d2:	30 f0       	brcs	.+12     	; 0x26e0 <prvAddNewTaskToReadyList+0x78>
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	80 93 2a 2c 	sts	0x2C2A, r24	; 0x802c2a <pxCurrentTCB>
    26dc:	90 93 2b 2c 	sts	0x2C2B, r25	; 0x802c2b <pxCurrentTCB+0x1>
    26e0:	80 91 92 2c 	lds	r24, 0x2C92	; 0x802c92 <uxTaskNumber>
    26e4:	8f 5f       	subi	r24, 0xFF	; 255
    26e6:	80 93 92 2c 	sts	0x2C92, r24	; 0x802c92 <uxTaskNumber>
    26ea:	20 91 92 2c 	lds	r18, 0x2C92	; 0x802c92 <uxTaskNumber>
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	fc 01       	movw	r30, r24
    26f4:	25 a3       	std	Z+37, r18	; 0x25
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	9a 81       	ldd	r25, Y+2	; 0x02
    26fa:	fc 01       	movw	r30, r24
    26fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    26fe:	80 91 8d 2c 	lds	r24, 0x2C8D	; 0x802c8d <uxTopReadyPriority>
    2702:	89 17       	cp	r24, r25
    2704:	30 f4       	brcc	.+12     	; 0x2712 <prvAddNewTaskToReadyList+0xaa>
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	fc 01       	movw	r30, r24
    270c:	82 8d       	ldd	r24, Z+26	; 0x1a
    270e:	80 93 8d 2c 	sts	0x2C8D, r24	; 0x802c8d <uxTopReadyPriority>
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	9a 81       	ldd	r25, Y+2	; 0x02
    2716:	ac 01       	movw	r20, r24
    2718:	4e 5f       	subi	r20, 0xFE	; 254
    271a:	5f 4f       	sbci	r21, 0xFF	; 255
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	fc 01       	movw	r30, r24
    2722:	82 8d       	ldd	r24, Z+26	; 0x1a
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	6b e0       	ldi	r22, 0x0B	; 11
    272a:	62 9f       	mul	r22, r18
    272c:	c0 01       	movw	r24, r0
    272e:	63 9f       	mul	r22, r19
    2730:	90 0d       	add	r25, r0
    2732:	11 24       	eor	r1, r1
    2734:	84 5d       	subi	r24, 0xD4	; 212
    2736:	93 4d       	sbci	r25, 0xD3	; 211
    2738:	ba 01       	movw	r22, r20
    273a:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    273e:	ff 91       	pop	r31
    2740:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2744:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <xSchedulerRunning>
    2748:	88 23       	and	r24, r24
    274a:	71 f0       	breq	.+28     	; 0x2768 <prvAddNewTaskToReadyList+0x100>
    274c:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    2750:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    2754:	fc 01       	movw	r30, r24
    2756:	22 8d       	ldd	r18, Z+26	; 0x1a
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	fc 01       	movw	r30, r24
    275e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2760:	28 17       	cp	r18, r24
    2762:	10 f4       	brcc	.+4      	; 0x2768 <prvAddNewTaskToReadyList+0x100>
    2764:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    2768:	00 00       	nop
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	08 95       	ret

00002774 <vTaskDelayUntil>:
    2774:	ef 92       	push	r14
    2776:	ff 92       	push	r15
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	60 97       	sbiw	r28, 0x10	; 16
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	8b 87       	std	Y+11, r24	; 0x0b
    278c:	9c 87       	std	Y+12, r25	; 0x0c
    278e:	4d 87       	std	Y+13, r20	; 0x0d
    2790:	5e 87       	std	Y+14, r21	; 0x0e
    2792:	6f 87       	std	Y+15, r22	; 0x0f
    2794:	78 8b       	std	Y+16, r23	; 0x10
    2796:	19 82       	std	Y+1, r1	; 0x01
    2798:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <vTaskSuspendAll>
    279c:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <xTickCount>
    27a0:	90 91 8a 2c 	lds	r25, 0x2C8A	; 0x802c8a <xTickCount+0x1>
    27a4:	a0 91 8b 2c 	lds	r26, 0x2C8B	; 0x802c8b <xTickCount+0x2>
    27a8:	b0 91 8c 2c 	lds	r27, 0x2C8C	; 0x802c8c <xTickCount+0x3>
    27ac:	8a 83       	std	Y+2, r24	; 0x02
    27ae:	9b 83       	std	Y+3, r25	; 0x03
    27b0:	ac 83       	std	Y+4, r26	; 0x04
    27b2:	bd 83       	std	Y+5, r27	; 0x05
    27b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    27b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    27b8:	fc 01       	movw	r30, r24
    27ba:	20 81       	ld	r18, Z
    27bc:	31 81       	ldd	r19, Z+1	; 0x01
    27be:	42 81       	ldd	r20, Z+2	; 0x02
    27c0:	53 81       	ldd	r21, Z+3	; 0x03
    27c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c6:	af 85       	ldd	r26, Y+15	; 0x0f
    27c8:	b8 89       	ldd	r27, Y+16	; 0x10
    27ca:	82 0f       	add	r24, r18
    27cc:	93 1f       	adc	r25, r19
    27ce:	a4 1f       	adc	r26, r20
    27d0:	b5 1f       	adc	r27, r21
    27d2:	8e 83       	std	Y+6, r24	; 0x06
    27d4:	9f 83       	std	Y+7, r25	; 0x07
    27d6:	a8 87       	std	Y+8, r26	; 0x08
    27d8:	b9 87       	std	Y+9, r27	; 0x09
    27da:	8b 85       	ldd	r24, Y+11	; 0x0b
    27dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    27de:	fc 01       	movw	r30, r24
    27e0:	20 81       	ld	r18, Z
    27e2:	31 81       	ldd	r19, Z+1	; 0x01
    27e4:	42 81       	ldd	r20, Z+2	; 0x02
    27e6:	53 81       	ldd	r21, Z+3	; 0x03
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	9b 81       	ldd	r25, Y+3	; 0x03
    27ec:	ac 81       	ldd	r26, Y+4	; 0x04
    27ee:	bd 81       	ldd	r27, Y+5	; 0x05
    27f0:	82 17       	cp	r24, r18
    27f2:	93 07       	cpc	r25, r19
    27f4:	a4 07       	cpc	r26, r20
    27f6:	b5 07       	cpc	r27, r21
    27f8:	00 f5       	brcc	.+64     	; 0x283a <vTaskDelayUntil+0xc6>
    27fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    27fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    27fe:	fc 01       	movw	r30, r24
    2800:	20 81       	ld	r18, Z
    2802:	31 81       	ldd	r19, Z+1	; 0x01
    2804:	42 81       	ldd	r20, Z+2	; 0x02
    2806:	53 81       	ldd	r21, Z+3	; 0x03
    2808:	8e 81       	ldd	r24, Y+6	; 0x06
    280a:	9f 81       	ldd	r25, Y+7	; 0x07
    280c:	a8 85       	ldd	r26, Y+8	; 0x08
    280e:	b9 85       	ldd	r27, Y+9	; 0x09
    2810:	82 17       	cp	r24, r18
    2812:	93 07       	cpc	r25, r19
    2814:	a4 07       	cpc	r26, r20
    2816:	b5 07       	cpc	r27, r21
    2818:	78 f5       	brcc	.+94     	; 0x2878 <vTaskDelayUntil+0x104>
    281a:	2e 81       	ldd	r18, Y+6	; 0x06
    281c:	3f 81       	ldd	r19, Y+7	; 0x07
    281e:	48 85       	ldd	r20, Y+8	; 0x08
    2820:	59 85       	ldd	r21, Y+9	; 0x09
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	9b 81       	ldd	r25, Y+3	; 0x03
    2826:	ac 81       	ldd	r26, Y+4	; 0x04
    2828:	bd 81       	ldd	r27, Y+5	; 0x05
    282a:	82 17       	cp	r24, r18
    282c:	93 07       	cpc	r25, r19
    282e:	a4 07       	cpc	r26, r20
    2830:	b5 07       	cpc	r27, r21
    2832:	10 f5       	brcc	.+68     	; 0x2878 <vTaskDelayUntil+0x104>
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	89 83       	std	Y+1, r24	; 0x01
    2838:	1f c0       	rjmp	.+62     	; 0x2878 <vTaskDelayUntil+0x104>
    283a:	8b 85       	ldd	r24, Y+11	; 0x0b
    283c:	9c 85       	ldd	r25, Y+12	; 0x0c
    283e:	fc 01       	movw	r30, r24
    2840:	20 81       	ld	r18, Z
    2842:	31 81       	ldd	r19, Z+1	; 0x01
    2844:	42 81       	ldd	r20, Z+2	; 0x02
    2846:	53 81       	ldd	r21, Z+3	; 0x03
    2848:	8e 81       	ldd	r24, Y+6	; 0x06
    284a:	9f 81       	ldd	r25, Y+7	; 0x07
    284c:	a8 85       	ldd	r26, Y+8	; 0x08
    284e:	b9 85       	ldd	r27, Y+9	; 0x09
    2850:	82 17       	cp	r24, r18
    2852:	93 07       	cpc	r25, r19
    2854:	a4 07       	cpc	r26, r20
    2856:	b5 07       	cpc	r27, r21
    2858:	68 f0       	brcs	.+26     	; 0x2874 <vTaskDelayUntil+0x100>
    285a:	2e 81       	ldd	r18, Y+6	; 0x06
    285c:	3f 81       	ldd	r19, Y+7	; 0x07
    285e:	48 85       	ldd	r20, Y+8	; 0x08
    2860:	59 85       	ldd	r21, Y+9	; 0x09
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	9b 81       	ldd	r25, Y+3	; 0x03
    2866:	ac 81       	ldd	r26, Y+4	; 0x04
    2868:	bd 81       	ldd	r27, Y+5	; 0x05
    286a:	82 17       	cp	r24, r18
    286c:	93 07       	cpc	r25, r19
    286e:	a4 07       	cpc	r26, r20
    2870:	b5 07       	cpc	r27, r21
    2872:	10 f4       	brcc	.+4      	; 0x2878 <vTaskDelayUntil+0x104>
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	2b 85       	ldd	r18, Y+11	; 0x0b
    287a:	3c 85       	ldd	r19, Y+12	; 0x0c
    287c:	8e 81       	ldd	r24, Y+6	; 0x06
    287e:	9f 81       	ldd	r25, Y+7	; 0x07
    2880:	a8 85       	ldd	r26, Y+8	; 0x08
    2882:	b9 85       	ldd	r27, Y+9	; 0x09
    2884:	f9 01       	movw	r30, r18
    2886:	80 83       	st	Z, r24
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	a2 83       	std	Z+2, r26	; 0x02
    288c:	b3 83       	std	Z+3, r27	; 0x03
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	88 23       	and	r24, r24
    2892:	a9 f0       	breq	.+42     	; 0x28be <vTaskDelayUntil+0x14a>
    2894:	2e 81       	ldd	r18, Y+6	; 0x06
    2896:	3f 81       	ldd	r19, Y+7	; 0x07
    2898:	48 85       	ldd	r20, Y+8	; 0x08
    289a:	59 85       	ldd	r21, Y+9	; 0x09
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	9b 81       	ldd	r25, Y+3	; 0x03
    28a0:	ac 81       	ldd	r26, Y+4	; 0x04
    28a2:	bd 81       	ldd	r27, Y+5	; 0x05
    28a4:	79 01       	movw	r14, r18
    28a6:	8a 01       	movw	r16, r20
    28a8:	e8 1a       	sub	r14, r24
    28aa:	f9 0a       	sbc	r15, r25
    28ac:	0a 0b       	sbc	r16, r26
    28ae:	1b 0b       	sbc	r17, r27
    28b0:	d8 01       	movw	r26, r16
    28b2:	c7 01       	movw	r24, r14
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 c3 1a 	call	0x3586	; 0x3586 <prvAddCurrentTaskToDelayedList>
    28be:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
    28c2:	8a 87       	std	Y+10, r24	; 0x0a
    28c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28c6:	88 23       	and	r24, r24
    28c8:	11 f4       	brne	.+4      	; 0x28ce <vTaskDelayUntil+0x15a>
    28ca:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    28ce:	00 00       	nop
    28d0:	60 96       	adiw	r28, 0x10	; 16
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	ff 90       	pop	r15
    28e0:	ef 90       	pop	r14
    28e2:	08 95       	ret

000028e4 <vTaskDelay>:
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	25 97       	sbiw	r28, 0x05	; 5
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	6a 83       	std	Y+2, r22	; 0x02
    28f4:	7b 83       	std	Y+3, r23	; 0x03
    28f6:	8c 83       	std	Y+4, r24	; 0x04
    28f8:	9d 83       	std	Y+5, r25	; 0x05
    28fa:	19 82       	std	Y+1, r1	; 0x01
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	ac 81       	ldd	r26, Y+4	; 0x04
    2902:	bd 81       	ldd	r27, Y+5	; 0x05
    2904:	89 2b       	or	r24, r25
    2906:	8a 2b       	or	r24, r26
    2908:	8b 2b       	or	r24, r27
    290a:	71 f0       	breq	.+28     	; 0x2928 <vTaskDelay+0x44>
    290c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <vTaskSuspendAll>
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	9b 81       	ldd	r25, Y+3	; 0x03
    2914:	ac 81       	ldd	r26, Y+4	; 0x04
    2916:	bd 81       	ldd	r27, Y+5	; 0x05
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <prvAddCurrentTaskToDelayedList>
    2922:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	88 23       	and	r24, r24
    292c:	11 f4       	brne	.+4      	; 0x2932 <vTaskDelay+0x4e>
    292e:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    2932:	00 00       	nop
    2934:	25 96       	adiw	r28, 0x05	; 5
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	08 95       	ret

00002940 <vTaskStartScheduler>:
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	1f 92       	push	r1
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	0f 2e       	mov	r0, r31
    2952:	f7 e9       	ldi	r31, 0x97	; 151
    2954:	ef 2e       	mov	r14, r31
    2956:	fc e2       	ldi	r31, 0x2C	; 44
    2958:	ff 2e       	mov	r15, r31
    295a:	f0 2d       	mov	r31, r0
    295c:	00 e0       	ldi	r16, 0x00	; 0
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	48 ec       	ldi	r20, 0xC8	; 200
    2964:	50 e0       	ldi	r21, 0x00	; 0
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	70 e2       	ldi	r23, 0x20	; 32
    296a:	83 ed       	ldi	r24, 0xD3	; 211
    296c:	99 e1       	ldi	r25, 0x19	; 25
    296e:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	81 30       	cpi	r24, 0x01	; 1
    2978:	19 f4       	brne	.+6      	; 0x2980 <vTaskStartScheduler+0x40>
    297a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <xTimerCreateTimerTask>
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	81 30       	cpi	r24, 0x01	; 1
    2984:	09 f5       	brne	.+66     	; 0x29c8 <vTaskStartScheduler+0x88>
    2986:	80 ea       	ldi	r24, 0xA0	; 160
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	20 ea       	ldi	r18, 0xA0	; 160
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	f9 01       	movw	r30, r18
    2990:	22 81       	ldd	r18, Z+2	; 0x02
    2992:	28 7f       	andi	r18, 0xF8	; 248
    2994:	fc 01       	movw	r30, r24
    2996:	22 83       	std	Z+2, r18	; 0x02
    2998:	8f ef       	ldi	r24, 0xFF	; 255
    299a:	9f ef       	ldi	r25, 0xFF	; 255
    299c:	dc 01       	movw	r26, r24
    299e:	80 93 93 2c 	sts	0x2C93, r24	; 0x802c93 <xNextTaskUnblockTime>
    29a2:	90 93 94 2c 	sts	0x2C94, r25	; 0x802c94 <xNextTaskUnblockTime+0x1>
    29a6:	a0 93 95 2c 	sts	0x2C95, r26	; 0x802c95 <xNextTaskUnblockTime+0x2>
    29aa:	b0 93 96 2c 	sts	0x2C96, r27	; 0x802c96 <xNextTaskUnblockTime+0x3>
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	80 93 8e 2c 	sts	0x2C8E, r24	; 0x802c8e <xSchedulerRunning>
    29b4:	10 92 89 2c 	sts	0x2C89, r1	; 0x802c89 <xTickCount>
    29b8:	10 92 8a 2c 	sts	0x2C8A, r1	; 0x802c8a <xTickCount+0x1>
    29bc:	10 92 8b 2c 	sts	0x2C8B, r1	; 0x802c8b <xTickCount+0x2>
    29c0:	10 92 8c 2c 	sts	0x2C8C, r1	; 0x802c8c <xTickCount+0x3>
    29c4:	0e 94 48 0b 	call	0x1690	; 0x1690 <xPortStartScheduler>
    29c8:	00 00       	nop
    29ca:	0f 90       	pop	r0
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	0f 91       	pop	r16
    29d2:	ff 90       	pop	r15
    29d4:	ef 90       	pop	r14
    29d6:	08 95       	ret

000029d8 <vTaskSuspendAll>:
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	80 91 99 2c 	lds	r24, 0x2C99	; 0x802c99 <uxSchedulerSuspended>
    29e4:	8f 5f       	subi	r24, 0xFF	; 255
    29e6:	80 93 99 2c 	sts	0x2C99, r24	; 0x802c99 <uxSchedulerSuspended>
    29ea:	00 00       	nop
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	08 95       	ret

000029f2 <xTaskResumeAll>:
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <xTaskResumeAll+0x6>
    29f8:	1f 92       	push	r1
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	19 82       	std	Y+1, r1	; 0x01
    2a00:	1a 82       	std	Y+2, r1	; 0x02
    2a02:	1b 82       	std	Y+3, r1	; 0x03
    2a04:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2a08:	ff 93       	push	r31
    2a0a:	f8 7f       	andi	r31, 0xF8	; 248
    2a0c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2a10:	80 91 99 2c 	lds	r24, 0x2C99	; 0x802c99 <uxSchedulerSuspended>
    2a14:	81 50       	subi	r24, 0x01	; 1
    2a16:	80 93 99 2c 	sts	0x2C99, r24	; 0x802c99 <uxSchedulerSuspended>
    2a1a:	80 91 99 2c 	lds	r24, 0x2C99	; 0x802c99 <uxSchedulerSuspended>
    2a1e:	88 23       	and	r24, r24
    2a20:	09 f0       	breq	.+2      	; 0x2a24 <xTaskResumeAll+0x32>
    2a22:	74 c0       	rjmp	.+232    	; 0x2b0c <xTaskResumeAll+0x11a>
    2a24:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <uxCurrentNumberOfTasks>
    2a28:	88 23       	and	r24, r24
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <xTaskResumeAll+0x3c>
    2a2c:	6f c0       	rjmp	.+222    	; 0x2b0c <xTaskResumeAll+0x11a>
    2a2e:	46 c0       	rjmp	.+140    	; 0x2abc <xTaskResumeAll+0xca>
    2a30:	80 91 79 2c 	lds	r24, 0x2C79	; 0x802c79 <xPendingReadyList+0x7>
    2a34:	90 91 7a 2c 	lds	r25, 0x2C7A	; 0x802c7a <xPendingReadyList+0x8>
    2a38:	fc 01       	movw	r30, r24
    2a3a:	80 85       	ldd	r24, Z+8	; 0x08
    2a3c:	91 85       	ldd	r25, Z+9	; 0x09
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	9a 81       	ldd	r25, Y+2	; 0x02
    2a46:	0e 96       	adiw	r24, 0x0e	; 14
    2a48:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	02 96       	adiw	r24, 0x02	; 2
    2a52:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a5e:	80 91 8d 2c 	lds	r24, 0x2C8D	; 0x802c8d <uxTopReadyPriority>
    2a62:	89 17       	cp	r24, r25
    2a64:	30 f4       	brcc	.+12     	; 0x2a72 <xTaskResumeAll+0x80>
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a6e:	80 93 8d 2c 	sts	0x2C8D, r24	; 0x802c8d <uxTopReadyPriority>
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	ac 01       	movw	r20, r24
    2a78:	4e 5f       	subi	r20, 0xFE	; 254
    2a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a80:	fc 01       	movw	r30, r24
    2a82:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	6b e0       	ldi	r22, 0x0B	; 11
    2a8a:	62 9f       	mul	r22, r18
    2a8c:	c0 01       	movw	r24, r0
    2a8e:	63 9f       	mul	r22, r19
    2a90:	90 0d       	add	r25, r0
    2a92:	11 24       	eor	r1, r1
    2a94:	84 5d       	subi	r24, 0xD4	; 212
    2a96:	93 4d       	sbci	r25, 0xD3	; 211
    2a98:	ba 01       	movw	r22, r20
    2a9a:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	22 8d       	ldd	r18, Z+26	; 0x1a
    2aa6:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    2aaa:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    2aae:	fc 01       	movw	r30, r24
    2ab0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ab2:	28 17       	cp	r18, r24
    2ab4:	18 f0       	brcs	.+6      	; 0x2abc <xTaskResumeAll+0xca>
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	80 93 90 2c 	sts	0x2C90, r24	; 0x802c90 <xYieldPending>
    2abc:	80 91 72 2c 	lds	r24, 0x2C72	; 0x802c72 <xPendingReadyList>
    2ac0:	88 23       	and	r24, r24
    2ac2:	09 f0       	breq	.+2      	; 0x2ac6 <xTaskResumeAll+0xd4>
    2ac4:	b5 cf       	rjmp	.-150    	; 0x2a30 <xTaskResumeAll+0x3e>
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aca:	89 2b       	or	r24, r25
    2acc:	11 f0       	breq	.+4      	; 0x2ad2 <xTaskResumeAll+0xe0>
    2ace:	0e 94 29 1a 	call	0x3452	; 0x3452 <prvResetNextTaskUnblockTime>
    2ad2:	80 91 8f 2c 	lds	r24, 0x2C8F	; 0x802c8f <uxPendedTicks>
    2ad6:	8c 83       	std	Y+4, r24	; 0x04
    2ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ada:	88 23       	and	r24, r24
    2adc:	79 f0       	breq	.+30     	; 0x2afc <xTaskResumeAll+0x10a>
    2ade:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <xTaskIncrementTick>
    2ae2:	88 23       	and	r24, r24
    2ae4:	19 f0       	breq	.+6      	; 0x2aec <xTaskResumeAll+0xfa>
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	80 93 90 2c 	sts	0x2C90, r24	; 0x802c90 <xYieldPending>
    2aec:	8c 81       	ldd	r24, Y+4	; 0x04
    2aee:	81 50       	subi	r24, 0x01	; 1
    2af0:	8c 83       	std	Y+4, r24	; 0x04
    2af2:	8c 81       	ldd	r24, Y+4	; 0x04
    2af4:	88 23       	and	r24, r24
    2af6:	99 f7       	brne	.-26     	; 0x2ade <xTaskResumeAll+0xec>
    2af8:	10 92 8f 2c 	sts	0x2C8F, r1	; 0x802c8f <uxPendedTicks>
    2afc:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xYieldPending>
    2b00:	88 23       	and	r24, r24
    2b02:	21 f0       	breq	.+8      	; 0x2b0c <xTaskResumeAll+0x11a>
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	8b 83       	std	Y+3, r24	; 0x03
    2b08:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    2b0c:	ff 91       	pop	r31
    2b0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	24 96       	adiw	r28, 0x04	; 4
    2b16:	cd bf       	out	0x3d, r28	; 61
    2b18:	de bf       	out	0x3e, r29	; 62
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	08 95       	ret

00002b20 <xTaskGetTickCount>:
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <xTaskGetTickCount+0x6>
    2b26:	1f 92       	push	r1
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2b30:	ff 93       	push	r31
    2b32:	f8 7f       	andi	r31, 0xF8	; 248
    2b34:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2b38:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <xTickCount>
    2b3c:	90 91 8a 2c 	lds	r25, 0x2C8A	; 0x802c8a <xTickCount+0x1>
    2b40:	a0 91 8b 2c 	lds	r26, 0x2C8B	; 0x802c8b <xTickCount+0x2>
    2b44:	b0 91 8c 2c 	lds	r27, 0x2C8C	; 0x802c8c <xTickCount+0x3>
    2b48:	89 83       	std	Y+1, r24	; 0x01
    2b4a:	9a 83       	std	Y+2, r25	; 0x02
    2b4c:	ab 83       	std	Y+3, r26	; 0x03
    2b4e:	bc 83       	std	Y+4, r27	; 0x04
    2b50:	ff 91       	pop	r31
    2b52:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2b5c:	bc 81       	ldd	r27, Y+4	; 0x04
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	24 96       	adiw	r28, 0x04	; 4
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	08 95       	ret

00002b6e <xTaskIncrementTick>:
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	2d 97       	sbiw	r28, 0x0d	; 13
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	de bf       	out	0x3e, r29	; 62
    2b7c:	19 82       	std	Y+1, r1	; 0x01
    2b7e:	80 91 99 2c 	lds	r24, 0x2C99	; 0x802c99 <uxSchedulerSuspended>
    2b82:	88 23       	and	r24, r24
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <xTaskIncrementTick+0x1a>
    2b86:	f1 c0       	rjmp	.+482    	; 0x2d6a <xTaskIncrementTick+0x1fc>
    2b88:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <xTickCount>
    2b8c:	90 91 8a 2c 	lds	r25, 0x2C8A	; 0x802c8a <xTickCount+0x1>
    2b90:	a0 91 8b 2c 	lds	r26, 0x2C8B	; 0x802c8b <xTickCount+0x2>
    2b94:	b0 91 8c 2c 	lds	r27, 0x2C8C	; 0x802c8c <xTickCount+0x3>
    2b98:	01 96       	adiw	r24, 0x01	; 1
    2b9a:	a1 1d       	adc	r26, r1
    2b9c:	b1 1d       	adc	r27, r1
    2b9e:	8a 83       	std	Y+2, r24	; 0x02
    2ba0:	9b 83       	std	Y+3, r25	; 0x03
    2ba2:	ac 83       	std	Y+4, r26	; 0x04
    2ba4:	bd 83       	std	Y+5, r27	; 0x05
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    2baa:	ac 81       	ldd	r26, Y+4	; 0x04
    2bac:	bd 81       	ldd	r27, Y+5	; 0x05
    2bae:	80 93 89 2c 	sts	0x2C89, r24	; 0x802c89 <xTickCount>
    2bb2:	90 93 8a 2c 	sts	0x2C8A, r25	; 0x802c8a <xTickCount+0x1>
    2bb6:	a0 93 8b 2c 	sts	0x2C8B, r26	; 0x802c8b <xTickCount+0x2>
    2bba:	b0 93 8c 2c 	sts	0x2C8C, r27	; 0x802c8c <xTickCount+0x3>
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc2:	ac 81       	ldd	r26, Y+4	; 0x04
    2bc4:	bd 81       	ldd	r27, Y+5	; 0x05
    2bc6:	89 2b       	or	r24, r25
    2bc8:	8a 2b       	or	r24, r26
    2bca:	8b 2b       	or	r24, r27
    2bcc:	d9 f4       	brne	.+54     	; 0x2c04 <xTaskIncrementTick+0x96>
    2bce:	80 91 6e 2c 	lds	r24, 0x2C6E	; 0x802c6e <pxDelayedTaskList>
    2bd2:	90 91 6f 2c 	lds	r25, 0x2C6F	; 0x802c6f <pxDelayedTaskList+0x1>
    2bd6:	8e 83       	std	Y+6, r24	; 0x06
    2bd8:	9f 83       	std	Y+7, r25	; 0x07
    2bda:	80 91 70 2c 	lds	r24, 0x2C70	; 0x802c70 <pxOverflowDelayedTaskList>
    2bde:	90 91 71 2c 	lds	r25, 0x2C71	; 0x802c71 <pxOverflowDelayedTaskList+0x1>
    2be2:	80 93 6e 2c 	sts	0x2C6E, r24	; 0x802c6e <pxDelayedTaskList>
    2be6:	90 93 6f 2c 	sts	0x2C6F, r25	; 0x802c6f <pxDelayedTaskList+0x1>
    2bea:	8e 81       	ldd	r24, Y+6	; 0x06
    2bec:	9f 81       	ldd	r25, Y+7	; 0x07
    2bee:	80 93 70 2c 	sts	0x2C70, r24	; 0x802c70 <pxOverflowDelayedTaskList>
    2bf2:	90 93 71 2c 	sts	0x2C71, r25	; 0x802c71 <pxOverflowDelayedTaskList+0x1>
    2bf6:	80 91 91 2c 	lds	r24, 0x2C91	; 0x802c91 <xNumOfOverflows>
    2bfa:	8f 5f       	subi	r24, 0xFF	; 255
    2bfc:	80 93 91 2c 	sts	0x2C91, r24	; 0x802c91 <xNumOfOverflows>
    2c00:	0e 94 29 1a 	call	0x3452	; 0x3452 <prvResetNextTaskUnblockTime>
    2c04:	80 91 93 2c 	lds	r24, 0x2C93	; 0x802c93 <xNextTaskUnblockTime>
    2c08:	90 91 94 2c 	lds	r25, 0x2C94	; 0x802c94 <xNextTaskUnblockTime+0x1>
    2c0c:	a0 91 95 2c 	lds	r26, 0x2C95	; 0x802c95 <xNextTaskUnblockTime+0x2>
    2c10:	b0 91 96 2c 	lds	r27, 0x2C96	; 0x802c96 <xNextTaskUnblockTime+0x3>
    2c14:	2a 81       	ldd	r18, Y+2	; 0x02
    2c16:	3b 81       	ldd	r19, Y+3	; 0x03
    2c18:	4c 81       	ldd	r20, Y+4	; 0x04
    2c1a:	5d 81       	ldd	r21, Y+5	; 0x05
    2c1c:	28 17       	cp	r18, r24
    2c1e:	39 07       	cpc	r19, r25
    2c20:	4a 07       	cpc	r20, r26
    2c22:	5b 07       	cpc	r21, r27
    2c24:	08 f4       	brcc	.+2      	; 0x2c28 <xTaskIncrementTick+0xba>
    2c26:	8a c0       	rjmp	.+276    	; 0x2d3c <xTaskIncrementTick+0x1ce>
    2c28:	80 91 6e 2c 	lds	r24, 0x2C6E	; 0x802c6e <pxDelayedTaskList>
    2c2c:	90 91 6f 2c 	lds	r25, 0x2C6F	; 0x802c6f <pxDelayedTaskList+0x1>
    2c30:	fc 01       	movw	r30, r24
    2c32:	80 81       	ld	r24, Z
    2c34:	88 23       	and	r24, r24
    2c36:	61 f4       	brne	.+24     	; 0x2c50 <xTaskIncrementTick+0xe2>
    2c38:	8f ef       	ldi	r24, 0xFF	; 255
    2c3a:	9f ef       	ldi	r25, 0xFF	; 255
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	80 93 93 2c 	sts	0x2C93, r24	; 0x802c93 <xNextTaskUnblockTime>
    2c42:	90 93 94 2c 	sts	0x2C94, r25	; 0x802c94 <xNextTaskUnblockTime+0x1>
    2c46:	a0 93 95 2c 	sts	0x2C95, r26	; 0x802c95 <xNextTaskUnblockTime+0x2>
    2c4a:	b0 93 96 2c 	sts	0x2C96, r27	; 0x802c96 <xNextTaskUnblockTime+0x3>
    2c4e:	76 c0       	rjmp	.+236    	; 0x2d3c <xTaskIncrementTick+0x1ce>
    2c50:	80 91 6e 2c 	lds	r24, 0x2C6E	; 0x802c6e <pxDelayedTaskList>
    2c54:	90 91 6f 2c 	lds	r25, 0x2C6F	; 0x802c6f <pxDelayedTaskList+0x1>
    2c58:	fc 01       	movw	r30, r24
    2c5a:	87 81       	ldd	r24, Z+7	; 0x07
    2c5c:	90 85       	ldd	r25, Z+8	; 0x08
    2c5e:	fc 01       	movw	r30, r24
    2c60:	80 85       	ldd	r24, Z+8	; 0x08
    2c62:	91 85       	ldd	r25, Z+9	; 0x09
    2c64:	88 87       	std	Y+8, r24	; 0x08
    2c66:	99 87       	std	Y+9, r25	; 0x09
    2c68:	88 85       	ldd	r24, Y+8	; 0x08
    2c6a:	99 85       	ldd	r25, Y+9	; 0x09
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	a4 81       	ldd	r26, Z+4	; 0x04
    2c74:	b5 81       	ldd	r27, Z+5	; 0x05
    2c76:	8a 87       	std	Y+10, r24	; 0x0a
    2c78:	9b 87       	std	Y+11, r25	; 0x0b
    2c7a:	ac 87       	std	Y+12, r26	; 0x0c
    2c7c:	bd 87       	std	Y+13, r27	; 0x0d
    2c7e:	2a 81       	ldd	r18, Y+2	; 0x02
    2c80:	3b 81       	ldd	r19, Y+3	; 0x03
    2c82:	4c 81       	ldd	r20, Y+4	; 0x04
    2c84:	5d 81       	ldd	r21, Y+5	; 0x05
    2c86:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c88:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c8a:	ac 85       	ldd	r26, Y+12	; 0x0c
    2c8c:	bd 85       	ldd	r27, Y+13	; 0x0d
    2c8e:	28 17       	cp	r18, r24
    2c90:	39 07       	cpc	r19, r25
    2c92:	4a 07       	cpc	r20, r26
    2c94:	5b 07       	cpc	r21, r27
    2c96:	68 f4       	brcc	.+26     	; 0x2cb2 <xTaskIncrementTick+0x144>
    2c98:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c9c:	ac 85       	ldd	r26, Y+12	; 0x0c
    2c9e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2ca0:	80 93 93 2c 	sts	0x2C93, r24	; 0x802c93 <xNextTaskUnblockTime>
    2ca4:	90 93 94 2c 	sts	0x2C94, r25	; 0x802c94 <xNextTaskUnblockTime+0x1>
    2ca8:	a0 93 95 2c 	sts	0x2C95, r26	; 0x802c95 <xNextTaskUnblockTime+0x2>
    2cac:	b0 93 96 2c 	sts	0x2C96, r27	; 0x802c96 <xNextTaskUnblockTime+0x3>
    2cb0:	45 c0       	rjmp	.+138    	; 0x2d3c <xTaskIncrementTick+0x1ce>
    2cb2:	88 85       	ldd	r24, Y+8	; 0x08
    2cb4:	99 85       	ldd	r25, Y+9	; 0x09
    2cb6:	02 96       	adiw	r24, 0x02	; 2
    2cb8:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2cbc:	88 85       	ldd	r24, Y+8	; 0x08
    2cbe:	99 85       	ldd	r25, Y+9	; 0x09
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	80 8d       	ldd	r24, Z+24	; 0x18
    2cc4:	91 8d       	ldd	r25, Z+25	; 0x19
    2cc6:	89 2b       	or	r24, r25
    2cc8:	29 f0       	breq	.+10     	; 0x2cd4 <xTaskIncrementTick+0x166>
    2cca:	88 85       	ldd	r24, Y+8	; 0x08
    2ccc:	99 85       	ldd	r25, Y+9	; 0x09
    2cce:	0e 96       	adiw	r24, 0x0e	; 14
    2cd0:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    2cd4:	88 85       	ldd	r24, Y+8	; 0x08
    2cd6:	99 85       	ldd	r25, Y+9	; 0x09
    2cd8:	fc 01       	movw	r30, r24
    2cda:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cdc:	80 91 8d 2c 	lds	r24, 0x2C8D	; 0x802c8d <uxTopReadyPriority>
    2ce0:	89 17       	cp	r24, r25
    2ce2:	30 f4       	brcc	.+12     	; 0x2cf0 <xTaskIncrementTick+0x182>
    2ce4:	88 85       	ldd	r24, Y+8	; 0x08
    2ce6:	99 85       	ldd	r25, Y+9	; 0x09
    2ce8:	fc 01       	movw	r30, r24
    2cea:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cec:	80 93 8d 2c 	sts	0x2C8D, r24	; 0x802c8d <uxTopReadyPriority>
    2cf0:	88 85       	ldd	r24, Y+8	; 0x08
    2cf2:	99 85       	ldd	r25, Y+9	; 0x09
    2cf4:	ac 01       	movw	r20, r24
    2cf6:	4e 5f       	subi	r20, 0xFE	; 254
    2cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    2cfa:	88 85       	ldd	r24, Y+8	; 0x08
    2cfc:	99 85       	ldd	r25, Y+9	; 0x09
    2cfe:	fc 01       	movw	r30, r24
    2d00:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	6b e0       	ldi	r22, 0x0B	; 11
    2d08:	62 9f       	mul	r22, r18
    2d0a:	c0 01       	movw	r24, r0
    2d0c:	63 9f       	mul	r22, r19
    2d0e:	90 0d       	add	r25, r0
    2d10:	11 24       	eor	r1, r1
    2d12:	84 5d       	subi	r24, 0xD4	; 212
    2d14:	93 4d       	sbci	r25, 0xD3	; 211
    2d16:	ba 01       	movw	r22, r20
    2d18:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    2d1c:	88 85       	ldd	r24, Y+8	; 0x08
    2d1e:	99 85       	ldd	r25, Y+9	; 0x09
    2d20:	fc 01       	movw	r30, r24
    2d22:	22 8d       	ldd	r18, Z+26	; 0x1a
    2d24:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    2d28:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d30:	28 17       	cp	r18, r24
    2d32:	08 f4       	brcc	.+2      	; 0x2d36 <xTaskIncrementTick+0x1c8>
    2d34:	79 cf       	rjmp	.-270    	; 0x2c28 <xTaskIncrementTick+0xba>
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	89 83       	std	Y+1, r24	; 0x01
    2d3a:	76 cf       	rjmp	.-276    	; 0x2c28 <xTaskIncrementTick+0xba>
    2d3c:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    2d40:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    2d44:	fc 01       	movw	r30, r24
    2d46:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d48:	28 2f       	mov	r18, r24
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	4b e0       	ldi	r20, 0x0B	; 11
    2d4e:	42 9f       	mul	r20, r18
    2d50:	c0 01       	movw	r24, r0
    2d52:	43 9f       	mul	r20, r19
    2d54:	90 0d       	add	r25, r0
    2d56:	11 24       	eor	r1, r1
    2d58:	84 5d       	subi	r24, 0xD4	; 212
    2d5a:	93 4d       	sbci	r25, 0xD3	; 211
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	80 81       	ld	r24, Z
    2d60:	82 30       	cpi	r24, 0x02	; 2
    2d62:	40 f0       	brcs	.+16     	; 0x2d74 <xTaskIncrementTick+0x206>
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	89 83       	std	Y+1, r24	; 0x01
    2d68:	05 c0       	rjmp	.+10     	; 0x2d74 <xTaskIncrementTick+0x206>
    2d6a:	80 91 8f 2c 	lds	r24, 0x2C8F	; 0x802c8f <uxPendedTicks>
    2d6e:	8f 5f       	subi	r24, 0xFF	; 255
    2d70:	80 93 8f 2c 	sts	0x2C8F, r24	; 0x802c8f <uxPendedTicks>
    2d74:	80 91 90 2c 	lds	r24, 0x2C90	; 0x802c90 <xYieldPending>
    2d78:	88 23       	and	r24, r24
    2d7a:	11 f0       	breq	.+4      	; 0x2d80 <xTaskIncrementTick+0x212>
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	2d 96       	adiw	r28, 0x0d	; 13
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	08 95       	ret

00002d8e <vTaskSwitchContext>:
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	29 97       	sbiw	r28, 0x09	; 9
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	80 91 99 2c 	lds	r24, 0x2C99	; 0x802c99 <uxSchedulerSuspended>
    2da0:	88 23       	and	r24, r24
    2da2:	21 f0       	breq	.+8      	; 0x2dac <vTaskSwitchContext+0x1e>
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	80 93 90 2c 	sts	0x2C90, r24	; 0x802c90 <xYieldPending>
    2daa:	ba c0       	rjmp	.+372    	; 0x2f20 <vTaskSwitchContext+0x192>
    2dac:	10 92 90 2c 	sts	0x2C90, r1	; 0x802c90 <xYieldPending>
    2db0:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    2db4:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    2db8:	fc 01       	movw	r30, r24
    2dba:	83 8d       	ldd	r24, Z+27	; 0x1b
    2dbc:	94 8d       	ldd	r25, Z+28	; 0x1c
    2dbe:	8a 83       	std	Y+2, r24	; 0x02
    2dc0:	9b 83       	std	Y+3, r25	; 0x03
    2dc2:	85 ea       	ldi	r24, 0xA5	; 165
    2dc4:	95 ea       	ldi	r25, 0xA5	; 165
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	8c 83       	std	Y+4, r24	; 0x04
    2dca:	9d 83       	std	Y+5, r25	; 0x05
    2dcc:	ae 83       	std	Y+6, r26	; 0x06
    2dce:	bf 83       	std	Y+7, r27	; 0x07
    2dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	20 81       	ld	r18, Z
    2dd8:	31 81       	ldd	r19, Z+1	; 0x01
    2dda:	42 81       	ldd	r20, Z+2	; 0x02
    2ddc:	53 81       	ldd	r21, Z+3	; 0x03
    2dde:	8c 81       	ldd	r24, Y+4	; 0x04
    2de0:	9d 81       	ldd	r25, Y+5	; 0x05
    2de2:	ae 81       	ldd	r26, Y+6	; 0x06
    2de4:	bf 81       	ldd	r27, Y+7	; 0x07
    2de6:	28 17       	cp	r18, r24
    2de8:	39 07       	cpc	r19, r25
    2dea:	4a 07       	cpc	r20, r26
    2dec:	5b 07       	cpc	r21, r27
    2dee:	99 f5       	brne	.+102    	; 0x2e56 <vTaskSwitchContext+0xc8>
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	9b 81       	ldd	r25, Y+3	; 0x03
    2df4:	04 96       	adiw	r24, 0x04	; 4
    2df6:	fc 01       	movw	r30, r24
    2df8:	20 81       	ld	r18, Z
    2dfa:	31 81       	ldd	r19, Z+1	; 0x01
    2dfc:	42 81       	ldd	r20, Z+2	; 0x02
    2dfe:	53 81       	ldd	r21, Z+3	; 0x03
    2e00:	8c 81       	ldd	r24, Y+4	; 0x04
    2e02:	9d 81       	ldd	r25, Y+5	; 0x05
    2e04:	ae 81       	ldd	r26, Y+6	; 0x06
    2e06:	bf 81       	ldd	r27, Y+7	; 0x07
    2e08:	28 17       	cp	r18, r24
    2e0a:	39 07       	cpc	r19, r25
    2e0c:	4a 07       	cpc	r20, r26
    2e0e:	5b 07       	cpc	r21, r27
    2e10:	11 f5       	brne	.+68     	; 0x2e56 <vTaskSwitchContext+0xc8>
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	9b 81       	ldd	r25, Y+3	; 0x03
    2e16:	08 96       	adiw	r24, 0x08	; 8
    2e18:	fc 01       	movw	r30, r24
    2e1a:	20 81       	ld	r18, Z
    2e1c:	31 81       	ldd	r19, Z+1	; 0x01
    2e1e:	42 81       	ldd	r20, Z+2	; 0x02
    2e20:	53 81       	ldd	r21, Z+3	; 0x03
    2e22:	8c 81       	ldd	r24, Y+4	; 0x04
    2e24:	9d 81       	ldd	r25, Y+5	; 0x05
    2e26:	ae 81       	ldd	r26, Y+6	; 0x06
    2e28:	bf 81       	ldd	r27, Y+7	; 0x07
    2e2a:	28 17       	cp	r18, r24
    2e2c:	39 07       	cpc	r19, r25
    2e2e:	4a 07       	cpc	r20, r26
    2e30:	5b 07       	cpc	r21, r27
    2e32:	89 f4       	brne	.+34     	; 0x2e56 <vTaskSwitchContext+0xc8>
    2e34:	8a 81       	ldd	r24, Y+2	; 0x02
    2e36:	9b 81       	ldd	r25, Y+3	; 0x03
    2e38:	0c 96       	adiw	r24, 0x0c	; 12
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	20 81       	ld	r18, Z
    2e3e:	31 81       	ldd	r19, Z+1	; 0x01
    2e40:	42 81       	ldd	r20, Z+2	; 0x02
    2e42:	53 81       	ldd	r21, Z+3	; 0x03
    2e44:	8c 81       	ldd	r24, Y+4	; 0x04
    2e46:	9d 81       	ldd	r25, Y+5	; 0x05
    2e48:	ae 81       	ldd	r26, Y+6	; 0x06
    2e4a:	bf 81       	ldd	r27, Y+7	; 0x07
    2e4c:	28 17       	cp	r18, r24
    2e4e:	39 07       	cpc	r19, r25
    2e50:	4a 07       	cpc	r20, r26
    2e52:	5b 07       	cpc	r21, r27
    2e54:	71 f0       	breq	.+28     	; 0x2e72 <vTaskSwitchContext+0xe4>
    2e56:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    2e5a:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    2e5e:	9c 01       	movw	r18, r24
    2e60:	23 5e       	subi	r18, 0xE3	; 227
    2e62:	3f 4f       	sbci	r19, 0xFF	; 255
    2e64:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    2e68:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    2e6c:	b9 01       	movw	r22, r18
    2e6e:	0e 94 10 04 	call	0x820	; 0x820 <vApplicationStackOverflowHook>
    2e72:	80 91 8d 2c 	lds	r24, 0x2C8D	; 0x802c8d <uxTopReadyPriority>
    2e76:	89 83       	std	Y+1, r24	; 0x01
    2e78:	03 c0       	rjmp	.+6      	; 0x2e80 <vTaskSwitchContext+0xf2>
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	81 50       	subi	r24, 0x01	; 1
    2e7e:	89 83       	std	Y+1, r24	; 0x01
    2e80:	89 81       	ldd	r24, Y+1	; 0x01
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	4b e0       	ldi	r20, 0x0B	; 11
    2e88:	42 9f       	mul	r20, r18
    2e8a:	c0 01       	movw	r24, r0
    2e8c:	43 9f       	mul	r20, r19
    2e8e:	90 0d       	add	r25, r0
    2e90:	11 24       	eor	r1, r1
    2e92:	84 5d       	subi	r24, 0xD4	; 212
    2e94:	93 4d       	sbci	r25, 0xD3	; 211
    2e96:	fc 01       	movw	r30, r24
    2e98:	80 81       	ld	r24, Z
    2e9a:	88 23       	and	r24, r24
    2e9c:	71 f3       	breq	.-36     	; 0x2e7a <vTaskSwitchContext+0xec>
    2e9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ea0:	28 2f       	mov	r18, r24
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	4b e0       	ldi	r20, 0x0B	; 11
    2ea6:	42 9f       	mul	r20, r18
    2ea8:	c0 01       	movw	r24, r0
    2eaa:	43 9f       	mul	r20, r19
    2eac:	90 0d       	add	r25, r0
    2eae:	11 24       	eor	r1, r1
    2eb0:	84 5d       	subi	r24, 0xD4	; 212
    2eb2:	93 4d       	sbci	r25, 0xD3	; 211
    2eb4:	88 87       	std	Y+8, r24	; 0x08
    2eb6:	99 87       	std	Y+9, r25	; 0x09
    2eb8:	88 85       	ldd	r24, Y+8	; 0x08
    2eba:	99 85       	ldd	r25, Y+9	; 0x09
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	81 81       	ldd	r24, Z+1	; 0x01
    2ec0:	92 81       	ldd	r25, Z+2	; 0x02
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	24 81       	ldd	r18, Z+4	; 0x04
    2ec6:	35 81       	ldd	r19, Z+5	; 0x05
    2ec8:	88 85       	ldd	r24, Y+8	; 0x08
    2eca:	99 85       	ldd	r25, Y+9	; 0x09
    2ecc:	fc 01       	movw	r30, r24
    2ece:	21 83       	std	Z+1, r18	; 0x01
    2ed0:	32 83       	std	Z+2, r19	; 0x02
    2ed2:	88 85       	ldd	r24, Y+8	; 0x08
    2ed4:	99 85       	ldd	r25, Y+9	; 0x09
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	21 81       	ldd	r18, Z+1	; 0x01
    2eda:	32 81       	ldd	r19, Z+2	; 0x02
    2edc:	88 85       	ldd	r24, Y+8	; 0x08
    2ede:	99 85       	ldd	r25, Y+9	; 0x09
    2ee0:	03 96       	adiw	r24, 0x03	; 3
    2ee2:	28 17       	cp	r18, r24
    2ee4:	39 07       	cpc	r19, r25
    2ee6:	69 f4       	brne	.+26     	; 0x2f02 <vTaskSwitchContext+0x174>
    2ee8:	88 85       	ldd	r24, Y+8	; 0x08
    2eea:	99 85       	ldd	r25, Y+9	; 0x09
    2eec:	fc 01       	movw	r30, r24
    2eee:	81 81       	ldd	r24, Z+1	; 0x01
    2ef0:	92 81       	ldd	r25, Z+2	; 0x02
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	24 81       	ldd	r18, Z+4	; 0x04
    2ef6:	35 81       	ldd	r19, Z+5	; 0x05
    2ef8:	88 85       	ldd	r24, Y+8	; 0x08
    2efa:	99 85       	ldd	r25, Y+9	; 0x09
    2efc:	fc 01       	movw	r30, r24
    2efe:	21 83       	std	Z+1, r18	; 0x01
    2f00:	32 83       	std	Z+2, r19	; 0x02
    2f02:	88 85       	ldd	r24, Y+8	; 0x08
    2f04:	99 85       	ldd	r25, Y+9	; 0x09
    2f06:	fc 01       	movw	r30, r24
    2f08:	81 81       	ldd	r24, Z+1	; 0x01
    2f0a:	92 81       	ldd	r25, Z+2	; 0x02
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	80 85       	ldd	r24, Z+8	; 0x08
    2f10:	91 85       	ldd	r25, Z+9	; 0x09
    2f12:	80 93 2a 2c 	sts	0x2C2A, r24	; 0x802c2a <pxCurrentTCB>
    2f16:	90 93 2b 2c 	sts	0x2C2B, r25	; 0x802c2b <pxCurrentTCB+0x1>
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	80 93 8d 2c 	sts	0x2C8D, r24	; 0x802c8d <uxTopReadyPriority>
    2f20:	00 00       	nop
    2f22:	29 96       	adiw	r28, 0x09	; 9
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	08 95       	ret

00002f2e <vTaskPlaceOnEventList>:
    2f2e:	cf 93       	push	r28
    2f30:	df 93       	push	r29
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <vTaskPlaceOnEventList+0x6>
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <vTaskPlaceOnEventList+0x8>
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	4b 83       	std	Y+3, r20	; 0x03
    2f40:	5c 83       	std	Y+4, r21	; 0x04
    2f42:	6d 83       	std	Y+5, r22	; 0x05
    2f44:	7e 83       	std	Y+6, r23	; 0x06
    2f46:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    2f4a:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    2f4e:	9c 01       	movw	r18, r24
    2f50:	22 5f       	subi	r18, 0xF2	; 242
    2f52:	3f 4f       	sbci	r19, 0xFF	; 255
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	9a 81       	ldd	r25, Y+2	; 0x02
    2f58:	b9 01       	movw	r22, r18
    2f5a:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f60:	9c 81       	ldd	r25, Y+4	; 0x04
    2f62:	ad 81       	ldd	r26, Y+5	; 0x05
    2f64:	be 81       	ldd	r27, Y+6	; 0x06
    2f66:	41 e0       	ldi	r20, 0x01	; 1
    2f68:	bc 01       	movw	r22, r24
    2f6a:	cd 01       	movw	r24, r26
    2f6c:	0e 94 c3 1a 	call	0x3586	; 0x3586 <prvAddCurrentTaskToDelayedList>
    2f70:	00 00       	nop
    2f72:	26 96       	adiw	r28, 0x06	; 6
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	08 95       	ret

00002f7e <vTaskPlaceOnUnorderedEventList>:
    2f7e:	0f 93       	push	r16
    2f80:	1f 93       	push	r17
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	2a 97       	sbiw	r28, 0x0a	; 10
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	9a 83       	std	Y+2, r25	; 0x02
    2f94:	4b 83       	std	Y+3, r20	; 0x03
    2f96:	5c 83       	std	Y+4, r21	; 0x04
    2f98:	6d 83       	std	Y+5, r22	; 0x05
    2f9a:	7e 83       	std	Y+6, r23	; 0x06
    2f9c:	0f 83       	std	Y+7, r16	; 0x07
    2f9e:	18 87       	std	Y+8, r17	; 0x08
    2fa0:	29 87       	std	Y+9, r18	; 0x09
    2fa2:	3a 87       	std	Y+10, r19	; 0x0a
    2fa4:	20 91 2a 2c 	lds	r18, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    2fa8:	30 91 2b 2c 	lds	r19, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb0:	ad 81       	ldd	r26, Y+5	; 0x05
    2fb2:	be 81       	ldd	r27, Y+6	; 0x06
    2fb4:	b0 68       	ori	r27, 0x80	; 128
    2fb6:	f9 01       	movw	r30, r18
    2fb8:	86 87       	std	Z+14, r24	; 0x0e
    2fba:	97 87       	std	Z+15, r25	; 0x0f
    2fbc:	a0 8b       	std	Z+16, r26	; 0x10
    2fbe:	b1 8b       	std	Z+17, r27	; 0x11
    2fc0:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    2fc4:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    2fc8:	9c 01       	movw	r18, r24
    2fca:	22 5f       	subi	r18, 0xF2	; 242
    2fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd2:	b9 01       	movw	r22, r18
    2fd4:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    2fd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2fda:	98 85       	ldd	r25, Y+8	; 0x08
    2fdc:	a9 85       	ldd	r26, Y+9	; 0x09
    2fde:	ba 85       	ldd	r27, Y+10	; 0x0a
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 c3 1a 	call	0x3586	; 0x3586 <prvAddCurrentTaskToDelayedList>
    2fea:	00 00       	nop
    2fec:	2a 96       	adiw	r28, 0x0a	; 10
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	08 95       	ret

00002ffc <vTaskPlaceOnEventListRestricted>:
    2ffc:	cf 93       	push	r28
    2ffe:	df 93       	push	r29
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	27 97       	sbiw	r28, 0x07	; 7
    3006:	cd bf       	out	0x3d, r28	; 61
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	89 83       	std	Y+1, r24	; 0x01
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	4b 83       	std	Y+3, r20	; 0x03
    3010:	5c 83       	std	Y+4, r21	; 0x04
    3012:	6d 83       	std	Y+5, r22	; 0x05
    3014:	7e 83       	std	Y+6, r23	; 0x06
    3016:	2f 83       	std	Y+7, r18	; 0x07
    3018:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    301c:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    3020:	9c 01       	movw	r18, r24
    3022:	22 5f       	subi	r18, 0xF2	; 242
    3024:	3f 4f       	sbci	r19, 0xFF	; 255
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	b9 01       	movw	r22, r18
    302c:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    3030:	8f 81       	ldd	r24, Y+7	; 0x07
    3032:	88 23       	and	r24, r24
    3034:	39 f0       	breq	.+14     	; 0x3044 <vTaskPlaceOnEventListRestricted+0x48>
    3036:	8f ef       	ldi	r24, 0xFF	; 255
    3038:	9f ef       	ldi	r25, 0xFF	; 255
    303a:	dc 01       	movw	r26, r24
    303c:	8b 83       	std	Y+3, r24	; 0x03
    303e:	9c 83       	std	Y+4, r25	; 0x04
    3040:	ad 83       	std	Y+5, r26	; 0x05
    3042:	be 83       	std	Y+6, r27	; 0x06
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	9c 81       	ldd	r25, Y+4	; 0x04
    3048:	ad 81       	ldd	r26, Y+5	; 0x05
    304a:	be 81       	ldd	r27, Y+6	; 0x06
    304c:	4f 81       	ldd	r20, Y+7	; 0x07
    304e:	bc 01       	movw	r22, r24
    3050:	cd 01       	movw	r24, r26
    3052:	0e 94 c3 1a 	call	0x3586	; 0x3586 <prvAddCurrentTaskToDelayedList>
    3056:	00 00       	nop
    3058:	27 96       	adiw	r28, 0x07	; 7
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	08 95       	ret

00003064 <xTaskRemoveFromEventList>:
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	25 97       	sbiw	r28, 0x05	; 5
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	de bf       	out	0x3e, r29	; 62
    3072:	8c 83       	std	Y+4, r24	; 0x04
    3074:	9d 83       	std	Y+5, r25	; 0x05
    3076:	8c 81       	ldd	r24, Y+4	; 0x04
    3078:	9d 81       	ldd	r25, Y+5	; 0x05
    307a:	fc 01       	movw	r30, r24
    307c:	87 81       	ldd	r24, Z+7	; 0x07
    307e:	90 85       	ldd	r25, Z+8	; 0x08
    3080:	fc 01       	movw	r30, r24
    3082:	80 85       	ldd	r24, Z+8	; 0x08
    3084:	91 85       	ldd	r25, Z+9	; 0x09
    3086:	8a 83       	std	Y+2, r24	; 0x02
    3088:	9b 83       	std	Y+3, r25	; 0x03
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	9b 81       	ldd	r25, Y+3	; 0x03
    308e:	0e 96       	adiw	r24, 0x0e	; 14
    3090:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3094:	80 91 99 2c 	lds	r24, 0x2C99	; 0x802c99 <uxSchedulerSuspended>
    3098:	88 23       	and	r24, r24
    309a:	51 f5       	brne	.+84     	; 0x30f0 <xTaskRemoveFromEventList+0x8c>
    309c:	8a 81       	ldd	r24, Y+2	; 0x02
    309e:	9b 81       	ldd	r25, Y+3	; 0x03
    30a0:	02 96       	adiw	r24, 0x02	; 2
    30a2:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	9b 81       	ldd	r25, Y+3	; 0x03
    30aa:	fc 01       	movw	r30, r24
    30ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    30ae:	80 91 8d 2c 	lds	r24, 0x2C8D	; 0x802c8d <uxTopReadyPriority>
    30b2:	89 17       	cp	r24, r25
    30b4:	30 f4       	brcc	.+12     	; 0x30c2 <xTaskRemoveFromEventList+0x5e>
    30b6:	8a 81       	ldd	r24, Y+2	; 0x02
    30b8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ba:	fc 01       	movw	r30, r24
    30bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    30be:	80 93 8d 2c 	sts	0x2C8D, r24	; 0x802c8d <uxTopReadyPriority>
    30c2:	8a 81       	ldd	r24, Y+2	; 0x02
    30c4:	9b 81       	ldd	r25, Y+3	; 0x03
    30c6:	ac 01       	movw	r20, r24
    30c8:	4e 5f       	subi	r20, 0xFE	; 254
    30ca:	5f 4f       	sbci	r21, 0xFF	; 255
    30cc:	8a 81       	ldd	r24, Y+2	; 0x02
    30ce:	9b 81       	ldd	r25, Y+3	; 0x03
    30d0:	fc 01       	movw	r30, r24
    30d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    30d4:	28 2f       	mov	r18, r24
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	6b e0       	ldi	r22, 0x0B	; 11
    30da:	62 9f       	mul	r22, r18
    30dc:	c0 01       	movw	r24, r0
    30de:	63 9f       	mul	r22, r19
    30e0:	90 0d       	add	r25, r0
    30e2:	11 24       	eor	r1, r1
    30e4:	84 5d       	subi	r24, 0xD4	; 212
    30e6:	93 4d       	sbci	r25, 0xD3	; 211
    30e8:	ba 01       	movw	r22, r20
    30ea:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    30ee:	08 c0       	rjmp	.+16     	; 0x3100 <xTaskRemoveFromEventList+0x9c>
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	9b 81       	ldd	r25, Y+3	; 0x03
    30f4:	0e 96       	adiw	r24, 0x0e	; 14
    30f6:	bc 01       	movw	r22, r24
    30f8:	82 e7       	ldi	r24, 0x72	; 114
    30fa:	9c e2       	ldi	r25, 0x2C	; 44
    30fc:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	9b 81       	ldd	r25, Y+3	; 0x03
    3104:	fc 01       	movw	r30, r24
    3106:	22 8d       	ldd	r18, Z+26	; 0x1a
    3108:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    310c:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    3110:	fc 01       	movw	r30, r24
    3112:	82 8d       	ldd	r24, Z+26	; 0x1a
    3114:	82 17       	cp	r24, r18
    3116:	30 f4       	brcc	.+12     	; 0x3124 <xTaskRemoveFromEventList+0xc0>
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	89 83       	std	Y+1, r24	; 0x01
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	80 93 90 2c 	sts	0x2C90, r24	; 0x802c90 <xYieldPending>
    3122:	01 c0       	rjmp	.+2      	; 0x3126 <xTaskRemoveFromEventList+0xc2>
    3124:	19 82       	std	Y+1, r1	; 0x01
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	25 96       	adiw	r28, 0x05	; 5
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	df 91       	pop	r29
    3130:	cf 91       	pop	r28
    3132:	08 95       	ret

00003134 <vTaskRemoveFromUnorderedEventList>:
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
    313c:	28 97       	sbiw	r28, 0x08	; 8
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	8b 83       	std	Y+3, r24	; 0x03
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	4d 83       	std	Y+5, r20	; 0x05
    3148:	5e 83       	std	Y+6, r21	; 0x06
    314a:	6f 83       	std	Y+7, r22	; 0x07
    314c:	78 87       	std	Y+8, r23	; 0x08
    314e:	8d 81       	ldd	r24, Y+5	; 0x05
    3150:	9e 81       	ldd	r25, Y+6	; 0x06
    3152:	af 81       	ldd	r26, Y+7	; 0x07
    3154:	b8 85       	ldd	r27, Y+8	; 0x08
    3156:	b0 68       	ori	r27, 0x80	; 128
    3158:	2b 81       	ldd	r18, Y+3	; 0x03
    315a:	3c 81       	ldd	r19, Y+4	; 0x04
    315c:	f9 01       	movw	r30, r18
    315e:	80 83       	st	Z, r24
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	a2 83       	std	Z+2, r26	; 0x02
    3164:	b3 83       	std	Z+3, r27	; 0x03
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	9c 81       	ldd	r25, Y+4	; 0x04
    316a:	fc 01       	movw	r30, r24
    316c:	80 85       	ldd	r24, Z+8	; 0x08
    316e:	91 85       	ldd	r25, Z+9	; 0x09
    3170:	89 83       	std	Y+1, r24	; 0x01
    3172:	9a 83       	std	Y+2, r25	; 0x02
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	9c 81       	ldd	r25, Y+4	; 0x04
    3178:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	9a 81       	ldd	r25, Y+2	; 0x02
    3180:	02 96       	adiw	r24, 0x02	; 2
    3182:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	fc 01       	movw	r30, r24
    318c:	92 8d       	ldd	r25, Z+26	; 0x1a
    318e:	80 91 8d 2c 	lds	r24, 0x2C8D	; 0x802c8d <uxTopReadyPriority>
    3192:	89 17       	cp	r24, r25
    3194:	30 f4       	brcc	.+12     	; 0x31a2 <vTaskRemoveFromUnorderedEventList+0x6e>
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	9a 81       	ldd	r25, Y+2	; 0x02
    319a:	fc 01       	movw	r30, r24
    319c:	82 8d       	ldd	r24, Z+26	; 0x1a
    319e:	80 93 8d 2c 	sts	0x2C8D, r24	; 0x802c8d <uxTopReadyPriority>
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	9a 81       	ldd	r25, Y+2	; 0x02
    31a6:	ac 01       	movw	r20, r24
    31a8:	4e 5f       	subi	r20, 0xFE	; 254
    31aa:	5f 4f       	sbci	r21, 0xFF	; 255
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	9a 81       	ldd	r25, Y+2	; 0x02
    31b0:	fc 01       	movw	r30, r24
    31b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    31b4:	28 2f       	mov	r18, r24
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	6b e0       	ldi	r22, 0x0B	; 11
    31ba:	62 9f       	mul	r22, r18
    31bc:	c0 01       	movw	r24, r0
    31be:	63 9f       	mul	r22, r19
    31c0:	90 0d       	add	r25, r0
    31c2:	11 24       	eor	r1, r1
    31c4:	84 5d       	subi	r24, 0xD4	; 212
    31c6:	93 4d       	sbci	r25, 0xD3	; 211
    31c8:	ba 01       	movw	r22, r20
    31ca:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	9a 81       	ldd	r25, Y+2	; 0x02
    31d2:	fc 01       	movw	r30, r24
    31d4:	22 8d       	ldd	r18, Z+26	; 0x1a
    31d6:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    31da:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    31de:	fc 01       	movw	r30, r24
    31e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    31e2:	82 17       	cp	r24, r18
    31e4:	18 f4       	brcc	.+6      	; 0x31ec <vTaskRemoveFromUnorderedEventList+0xb8>
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	80 93 90 2c 	sts	0x2C90, r24	; 0x802c90 <xYieldPending>
    31ec:	00 00       	nop
    31ee:	28 96       	adiw	r28, 0x08	; 8
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	de bf       	out	0x3e, r29	; 62
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	08 95       	ret

000031fa <vTaskInternalSetTimeOutState>:
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	1f 92       	push	r1
    3200:	1f 92       	push	r1
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	89 83       	std	Y+1, r24	; 0x01
    3208:	9a 83       	std	Y+2, r25	; 0x02
    320a:	20 91 91 2c 	lds	r18, 0x2C91	; 0x802c91 <xNumOfOverflows>
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	9a 81       	ldd	r25, Y+2	; 0x02
    3212:	fc 01       	movw	r30, r24
    3214:	20 83       	st	Z, r18
    3216:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <xTickCount>
    321a:	90 91 8a 2c 	lds	r25, 0x2C8A	; 0x802c8a <xTickCount+0x1>
    321e:	a0 91 8b 2c 	lds	r26, 0x2C8B	; 0x802c8b <xTickCount+0x2>
    3222:	b0 91 8c 2c 	lds	r27, 0x2C8C	; 0x802c8c <xTickCount+0x3>
    3226:	29 81       	ldd	r18, Y+1	; 0x01
    3228:	3a 81       	ldd	r19, Y+2	; 0x02
    322a:	f9 01       	movw	r30, r18
    322c:	81 83       	std	Z+1, r24	; 0x01
    322e:	92 83       	std	Z+2, r25	; 0x02
    3230:	a3 83       	std	Z+3, r26	; 0x03
    3232:	b4 83       	std	Z+4, r27	; 0x04
    3234:	00 00       	nop
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	08 95       	ret

00003240 <xTaskCheckForTimeOut>:
    3240:	ef 92       	push	r14
    3242:	ff 92       	push	r15
    3244:	0f 93       	push	r16
    3246:	1f 93       	push	r17
    3248:	cf 93       	push	r28
    324a:	df 93       	push	r29
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	2d 97       	sbiw	r28, 0x0d	; 13
    3252:	cd bf       	out	0x3d, r28	; 61
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	8a 87       	std	Y+10, r24	; 0x0a
    3258:	9b 87       	std	Y+11, r25	; 0x0b
    325a:	6c 87       	std	Y+12, r22	; 0x0c
    325c:	7d 87       	std	Y+13, r23	; 0x0d
    325e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3262:	ff 93       	push	r31
    3264:	f8 7f       	andi	r31, 0xF8	; 248
    3266:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    326a:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <xTickCount>
    326e:	90 91 8a 2c 	lds	r25, 0x2C8A	; 0x802c8a <xTickCount+0x1>
    3272:	a0 91 8b 2c 	lds	r26, 0x2C8B	; 0x802c8b <xTickCount+0x2>
    3276:	b0 91 8c 2c 	lds	r27, 0x2C8C	; 0x802c8c <xTickCount+0x3>
    327a:	8a 83       	std	Y+2, r24	; 0x02
    327c:	9b 83       	std	Y+3, r25	; 0x03
    327e:	ac 83       	std	Y+4, r26	; 0x04
    3280:	bd 83       	std	Y+5, r27	; 0x05
    3282:	8a 85       	ldd	r24, Y+10	; 0x0a
    3284:	9b 85       	ldd	r25, Y+11	; 0x0b
    3286:	fc 01       	movw	r30, r24
    3288:	81 81       	ldd	r24, Z+1	; 0x01
    328a:	92 81       	ldd	r25, Z+2	; 0x02
    328c:	a3 81       	ldd	r26, Z+3	; 0x03
    328e:	b4 81       	ldd	r27, Z+4	; 0x04
    3290:	2a 81       	ldd	r18, Y+2	; 0x02
    3292:	3b 81       	ldd	r19, Y+3	; 0x03
    3294:	4c 81       	ldd	r20, Y+4	; 0x04
    3296:	5d 81       	ldd	r21, Y+5	; 0x05
    3298:	79 01       	movw	r14, r18
    329a:	8a 01       	movw	r16, r20
    329c:	e8 1a       	sub	r14, r24
    329e:	f9 0a       	sbc	r15, r25
    32a0:	0a 0b       	sbc	r16, r26
    32a2:	1b 0b       	sbc	r17, r27
    32a4:	d8 01       	movw	r26, r16
    32a6:	c7 01       	movw	r24, r14
    32a8:	8e 83       	std	Y+6, r24	; 0x06
    32aa:	9f 83       	std	Y+7, r25	; 0x07
    32ac:	a8 87       	std	Y+8, r26	; 0x08
    32ae:	b9 87       	std	Y+9, r27	; 0x09
    32b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    32b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    32b4:	fc 01       	movw	r30, r24
    32b6:	80 81       	ld	r24, Z
    32b8:	91 81       	ldd	r25, Z+1	; 0x01
    32ba:	a2 81       	ldd	r26, Z+2	; 0x02
    32bc:	b3 81       	ldd	r27, Z+3	; 0x03
    32be:	8f 3f       	cpi	r24, 0xFF	; 255
    32c0:	9f 4f       	sbci	r25, 0xFF	; 255
    32c2:	af 4f       	sbci	r26, 0xFF	; 255
    32c4:	bf 4f       	sbci	r27, 0xFF	; 255
    32c6:	11 f4       	brne	.+4      	; 0x32cc <xTaskCheckForTimeOut+0x8c>
    32c8:	19 82       	std	Y+1, r1	; 0x01
    32ca:	54 c0       	rjmp	.+168    	; 0x3374 <xTaskCheckForTimeOut+0x134>
    32cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    32d0:	fc 01       	movw	r30, r24
    32d2:	90 81       	ld	r25, Z
    32d4:	80 91 91 2c 	lds	r24, 0x2C91	; 0x802c91 <xNumOfOverflows>
    32d8:	98 17       	cp	r25, r24
    32da:	99 f0       	breq	.+38     	; 0x3302 <xTaskCheckForTimeOut+0xc2>
    32dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    32de:	9b 85       	ldd	r25, Y+11	; 0x0b
    32e0:	fc 01       	movw	r30, r24
    32e2:	21 81       	ldd	r18, Z+1	; 0x01
    32e4:	32 81       	ldd	r19, Z+2	; 0x02
    32e6:	43 81       	ldd	r20, Z+3	; 0x03
    32e8:	54 81       	ldd	r21, Z+4	; 0x04
    32ea:	8a 81       	ldd	r24, Y+2	; 0x02
    32ec:	9b 81       	ldd	r25, Y+3	; 0x03
    32ee:	ac 81       	ldd	r26, Y+4	; 0x04
    32f0:	bd 81       	ldd	r27, Y+5	; 0x05
    32f2:	82 17       	cp	r24, r18
    32f4:	93 07       	cpc	r25, r19
    32f6:	a4 07       	cpc	r26, r20
    32f8:	b5 07       	cpc	r27, r21
    32fa:	18 f0       	brcs	.+6      	; 0x3302 <xTaskCheckForTimeOut+0xc2>
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	39 c0       	rjmp	.+114    	; 0x3374 <xTaskCheckForTimeOut+0x134>
    3302:	8c 85       	ldd	r24, Y+12	; 0x0c
    3304:	9d 85       	ldd	r25, Y+13	; 0x0d
    3306:	fc 01       	movw	r30, r24
    3308:	20 81       	ld	r18, Z
    330a:	31 81       	ldd	r19, Z+1	; 0x01
    330c:	42 81       	ldd	r20, Z+2	; 0x02
    330e:	53 81       	ldd	r21, Z+3	; 0x03
    3310:	8e 81       	ldd	r24, Y+6	; 0x06
    3312:	9f 81       	ldd	r25, Y+7	; 0x07
    3314:	a8 85       	ldd	r26, Y+8	; 0x08
    3316:	b9 85       	ldd	r27, Y+9	; 0x09
    3318:	82 17       	cp	r24, r18
    331a:	93 07       	cpc	r25, r19
    331c:	a4 07       	cpc	r26, r20
    331e:	b5 07       	cpc	r27, r21
    3320:	00 f5       	brcc	.+64     	; 0x3362 <xTaskCheckForTimeOut+0x122>
    3322:	8c 85       	ldd	r24, Y+12	; 0x0c
    3324:	9d 85       	ldd	r25, Y+13	; 0x0d
    3326:	fc 01       	movw	r30, r24
    3328:	20 81       	ld	r18, Z
    332a:	31 81       	ldd	r19, Z+1	; 0x01
    332c:	42 81       	ldd	r20, Z+2	; 0x02
    332e:	53 81       	ldd	r21, Z+3	; 0x03
    3330:	8e 81       	ldd	r24, Y+6	; 0x06
    3332:	9f 81       	ldd	r25, Y+7	; 0x07
    3334:	a8 85       	ldd	r26, Y+8	; 0x08
    3336:	b9 85       	ldd	r27, Y+9	; 0x09
    3338:	79 01       	movw	r14, r18
    333a:	8a 01       	movw	r16, r20
    333c:	e8 1a       	sub	r14, r24
    333e:	f9 0a       	sbc	r15, r25
    3340:	0a 0b       	sbc	r16, r26
    3342:	1b 0b       	sbc	r17, r27
    3344:	d8 01       	movw	r26, r16
    3346:	c7 01       	movw	r24, r14
    3348:	2c 85       	ldd	r18, Y+12	; 0x0c
    334a:	3d 85       	ldd	r19, Y+13	; 0x0d
    334c:	f9 01       	movw	r30, r18
    334e:	80 83       	st	Z, r24
    3350:	91 83       	std	Z+1, r25	; 0x01
    3352:	a2 83       	std	Z+2, r26	; 0x02
    3354:	b3 83       	std	Z+3, r27	; 0x03
    3356:	8a 85       	ldd	r24, Y+10	; 0x0a
    3358:	9b 85       	ldd	r25, Y+11	; 0x0b
    335a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <vTaskInternalSetTimeOutState>
    335e:	19 82       	std	Y+1, r1	; 0x01
    3360:	09 c0       	rjmp	.+18     	; 0x3374 <xTaskCheckForTimeOut+0x134>
    3362:	8c 85       	ldd	r24, Y+12	; 0x0c
    3364:	9d 85       	ldd	r25, Y+13	; 0x0d
    3366:	fc 01       	movw	r30, r24
    3368:	10 82       	st	Z, r1
    336a:	11 82       	std	Z+1, r1	; 0x01
    336c:	12 82       	std	Z+2, r1	; 0x02
    336e:	13 82       	std	Z+3, r1	; 0x03
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	89 83       	std	Y+1, r24	; 0x01
    3374:	ff 91       	pop	r31
    3376:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	2d 96       	adiw	r28, 0x0d	; 13
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	de bf       	out	0x3e, r29	; 62
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	1f 91       	pop	r17
    3388:	0f 91       	pop	r16
    338a:	ff 90       	pop	r15
    338c:	ef 90       	pop	r14
    338e:	08 95       	ret

00003390 <vTaskMissedYield>:
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	80 93 90 2c 	sts	0x2C90, r24	; 0x802c90 <xYieldPending>
    339e:	00 00       	nop
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	08 95       	ret

000033a6 <prvIdleTask>:
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	1f 92       	push	r1
    33ac:	1f 92       	push	r1
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
    33b2:	89 83       	std	Y+1, r24	; 0x01
    33b4:	9a 83       	std	Y+2, r25	; 0x02
    33b6:	0e 94 21 1a 	call	0x3442	; 0x3442 <prvCheckTasksWaitingTermination>
    33ba:	80 91 2c 2c 	lds	r24, 0x2C2C	; 0x802c2c <pxReadyTasksLists>
    33be:	82 30       	cpi	r24, 0x02	; 2
    33c0:	10 f0       	brcs	.+4      	; 0x33c6 <prvIdleTask+0x20>
    33c2:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    33c6:	0e 94 c2 20 	call	0x4184	; 0x4184 <vApplicationIdleHook>
    33ca:	f5 cf       	rjmp	.-22     	; 0x33b6 <prvIdleTask+0x10>

000033cc <prvInitialiseTaskLists>:
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	1f 92       	push	r1
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	19 82       	std	Y+1, r1	; 0x01
    33d8:	10 c0       	rjmp	.+32     	; 0x33fa <prvInitialiseTaskLists+0x2e>
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	28 2f       	mov	r18, r24
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	4b e0       	ldi	r20, 0x0B	; 11
    33e2:	42 9f       	mul	r20, r18
    33e4:	c0 01       	movw	r24, r0
    33e6:	43 9f       	mul	r20, r19
    33e8:	90 0d       	add	r25, r0
    33ea:	11 24       	eor	r1, r1
    33ec:	84 5d       	subi	r24, 0xD4	; 212
    33ee:	93 4d       	sbci	r25, 0xD3	; 211
    33f0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	8f 5f       	subi	r24, 0xFF	; 255
    33f8:	89 83       	std	Y+1, r24	; 0x01
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	84 30       	cpi	r24, 0x04	; 4
    33fe:	68 f3       	brcs	.-38     	; 0x33da <prvInitialiseTaskLists+0xe>
    3400:	88 e5       	ldi	r24, 0x58	; 88
    3402:	9c e2       	ldi	r25, 0x2C	; 44
    3404:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    3408:	83 e6       	ldi	r24, 0x63	; 99
    340a:	9c e2       	ldi	r25, 0x2C	; 44
    340c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    3410:	82 e7       	ldi	r24, 0x72	; 114
    3412:	9c e2       	ldi	r25, 0x2C	; 44
    3414:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    3418:	8d e7       	ldi	r24, 0x7D	; 125
    341a:	9c e2       	ldi	r25, 0x2C	; 44
    341c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    3420:	88 e5       	ldi	r24, 0x58	; 88
    3422:	9c e2       	ldi	r25, 0x2C	; 44
    3424:	80 93 6e 2c 	sts	0x2C6E, r24	; 0x802c6e <pxDelayedTaskList>
    3428:	90 93 6f 2c 	sts	0x2C6F, r25	; 0x802c6f <pxDelayedTaskList+0x1>
    342c:	83 e6       	ldi	r24, 0x63	; 99
    342e:	9c e2       	ldi	r25, 0x2C	; 44
    3430:	80 93 70 2c 	sts	0x2C70, r24	; 0x802c70 <pxOverflowDelayedTaskList>
    3434:	90 93 71 2c 	sts	0x2C71, r25	; 0x802c71 <pxOverflowDelayedTaskList+0x1>
    3438:	00 00       	nop
    343a:	0f 90       	pop	r0
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	08 95       	ret

00003442 <prvCheckTasksWaitingTermination>:
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
    344a:	00 00       	nop
    344c:	df 91       	pop	r29
    344e:	cf 91       	pop	r28
    3450:	08 95       	ret

00003452 <prvResetNextTaskUnblockTime>:
    3452:	cf 93       	push	r28
    3454:	df 93       	push	r29
    3456:	1f 92       	push	r1
    3458:	1f 92       	push	r1
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
    345e:	80 91 6e 2c 	lds	r24, 0x2C6E	; 0x802c6e <pxDelayedTaskList>
    3462:	90 91 6f 2c 	lds	r25, 0x2C6F	; 0x802c6f <pxDelayedTaskList+0x1>
    3466:	fc 01       	movw	r30, r24
    3468:	80 81       	ld	r24, Z
    346a:	88 23       	and	r24, r24
    346c:	61 f4       	brne	.+24     	; 0x3486 <prvResetNextTaskUnblockTime+0x34>
    346e:	8f ef       	ldi	r24, 0xFF	; 255
    3470:	9f ef       	ldi	r25, 0xFF	; 255
    3472:	dc 01       	movw	r26, r24
    3474:	80 93 93 2c 	sts	0x2C93, r24	; 0x802c93 <xNextTaskUnblockTime>
    3478:	90 93 94 2c 	sts	0x2C94, r25	; 0x802c94 <xNextTaskUnblockTime+0x1>
    347c:	a0 93 95 2c 	sts	0x2C95, r26	; 0x802c95 <xNextTaskUnblockTime+0x2>
    3480:	b0 93 96 2c 	sts	0x2C96, r27	; 0x802c96 <xNextTaskUnblockTime+0x3>
    3484:	1b c0       	rjmp	.+54     	; 0x34bc <prvResetNextTaskUnblockTime+0x6a>
    3486:	80 91 6e 2c 	lds	r24, 0x2C6E	; 0x802c6e <pxDelayedTaskList>
    348a:	90 91 6f 2c 	lds	r25, 0x2C6F	; 0x802c6f <pxDelayedTaskList+0x1>
    348e:	fc 01       	movw	r30, r24
    3490:	87 81       	ldd	r24, Z+7	; 0x07
    3492:	90 85       	ldd	r25, Z+8	; 0x08
    3494:	fc 01       	movw	r30, r24
    3496:	80 85       	ldd	r24, Z+8	; 0x08
    3498:	91 85       	ldd	r25, Z+9	; 0x09
    349a:	89 83       	std	Y+1, r24	; 0x01
    349c:	9a 83       	std	Y+2, r25	; 0x02
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	9a 81       	ldd	r25, Y+2	; 0x02
    34a2:	fc 01       	movw	r30, r24
    34a4:	82 81       	ldd	r24, Z+2	; 0x02
    34a6:	93 81       	ldd	r25, Z+3	; 0x03
    34a8:	a4 81       	ldd	r26, Z+4	; 0x04
    34aa:	b5 81       	ldd	r27, Z+5	; 0x05
    34ac:	80 93 93 2c 	sts	0x2C93, r24	; 0x802c93 <xNextTaskUnblockTime>
    34b0:	90 93 94 2c 	sts	0x2C94, r25	; 0x802c94 <xNextTaskUnblockTime+0x1>
    34b4:	a0 93 95 2c 	sts	0x2C95, r26	; 0x802c95 <xNextTaskUnblockTime+0x2>
    34b8:	b0 93 96 2c 	sts	0x2C96, r27	; 0x802c96 <xNextTaskUnblockTime+0x3>
    34bc:	00 00       	nop
    34be:	0f 90       	pop	r0
    34c0:	0f 90       	pop	r0
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	08 95       	ret

000034c8 <xTaskGetSchedulerState>:
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	1f 92       	push	r1
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	80 91 8e 2c 	lds	r24, 0x2C8E	; 0x802c8e <xSchedulerRunning>
    34d6:	88 23       	and	r24, r24
    34d8:	19 f4       	brne	.+6      	; 0x34e0 <xTaskGetSchedulerState+0x18>
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	89 83       	std	Y+1, r24	; 0x01
    34de:	08 c0       	rjmp	.+16     	; 0x34f0 <xTaskGetSchedulerState+0x28>
    34e0:	80 91 99 2c 	lds	r24, 0x2C99	; 0x802c99 <uxSchedulerSuspended>
    34e4:	88 23       	and	r24, r24
    34e6:	19 f4       	brne	.+6      	; 0x34ee <xTaskGetSchedulerState+0x26>
    34e8:	82 e0       	ldi	r24, 0x02	; 2
    34ea:	89 83       	std	Y+1, r24	; 0x01
    34ec:	01 c0       	rjmp	.+2      	; 0x34f0 <xTaskGetSchedulerState+0x28>
    34ee:	19 82       	std	Y+1, r1	; 0x01
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	0f 90       	pop	r0
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	08 95       	ret

000034fa <uxTaskResetEventItemValue>:
    34fa:	ef 92       	push	r14
    34fc:	ff 92       	push	r15
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	00 d0       	rcall	.+0      	; 0x3508 <uxTaskResetEventItemValue+0xe>
    3508:	1f 92       	push	r1
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    3512:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    3516:	fc 01       	movw	r30, r24
    3518:	86 85       	ldd	r24, Z+14	; 0x0e
    351a:	97 85       	ldd	r25, Z+15	; 0x0f
    351c:	a0 89       	ldd	r26, Z+16	; 0x10
    351e:	b1 89       	ldd	r27, Z+17	; 0x11
    3520:	89 83       	std	Y+1, r24	; 0x01
    3522:	9a 83       	std	Y+2, r25	; 0x02
    3524:	ab 83       	std	Y+3, r26	; 0x03
    3526:	bc 83       	std	Y+4, r27	; 0x04
    3528:	60 91 2a 2c 	lds	r22, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    352c:	70 91 2b 2c 	lds	r23, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    3530:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    3534:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    3538:	fc 01       	movw	r30, r24
    353a:	82 8d       	ldd	r24, Z+26	; 0x1a
    353c:	88 2f       	mov	r24, r24
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	a0 e0       	ldi	r26, 0x00	; 0
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	24 e0       	ldi	r18, 0x04	; 4
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 e0       	ldi	r20, 0x00	; 0
    354a:	50 e0       	ldi	r21, 0x00	; 0
    354c:	79 01       	movw	r14, r18
    354e:	8a 01       	movw	r16, r20
    3550:	e8 1a       	sub	r14, r24
    3552:	f9 0a       	sbc	r15, r25
    3554:	0a 0b       	sbc	r16, r26
    3556:	1b 0b       	sbc	r17, r27
    3558:	d8 01       	movw	r26, r16
    355a:	c7 01       	movw	r24, r14
    355c:	fb 01       	movw	r30, r22
    355e:	86 87       	std	Z+14, r24	; 0x0e
    3560:	97 87       	std	Z+15, r25	; 0x0f
    3562:	a0 8b       	std	Z+16, r26	; 0x10
    3564:	b1 8b       	std	Z+17, r27	; 0x11
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	9a 81       	ldd	r25, Y+2	; 0x02
    356a:	ab 81       	ldd	r26, Y+3	; 0x03
    356c:	bc 81       	ldd	r27, Y+4	; 0x04
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	24 96       	adiw	r28, 0x04	; 4
    3574:	cd bf       	out	0x3d, r28	; 61
    3576:	de bf       	out	0x3e, r29	; 62
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	ff 90       	pop	r15
    3582:	ef 90       	pop	r14
    3584:	08 95       	ret

00003586 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	2d 97       	sbiw	r28, 0x0d	; 13
    3590:	cd bf       	out	0x3d, r28	; 61
    3592:	de bf       	out	0x3e, r29	; 62
    3594:	69 87       	std	Y+9, r22	; 0x09
    3596:	7a 87       	std	Y+10, r23	; 0x0a
    3598:	8b 87       	std	Y+11, r24	; 0x0b
    359a:	9c 87       	std	Y+12, r25	; 0x0c
    359c:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    359e:	80 91 89 2c 	lds	r24, 0x2C89	; 0x802c89 <xTickCount>
    35a2:	90 91 8a 2c 	lds	r25, 0x2C8A	; 0x802c8a <xTickCount+0x1>
    35a6:	a0 91 8b 2c 	lds	r26, 0x2C8B	; 0x802c8b <xTickCount+0x2>
    35aa:	b0 91 8c 2c 	lds	r27, 0x2C8C	; 0x802c8c <xTickCount+0x3>
    35ae:	89 83       	std	Y+1, r24	; 0x01
    35b0:	9a 83       	std	Y+2, r25	; 0x02
    35b2:	ab 83       	std	Y+3, r26	; 0x03
    35b4:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    35b6:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    35ba:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    35be:	02 96       	adiw	r24, 0x02	; 2
    35c0:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    35c4:	89 85       	ldd	r24, Y+9	; 0x09
    35c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    35ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    35cc:	8f 3f       	cpi	r24, 0xFF	; 255
    35ce:	9f 4f       	sbci	r25, 0xFF	; 255
    35d0:	af 4f       	sbci	r26, 0xFF	; 255
    35d2:	bf 4f       	sbci	r27, 0xFF	; 255
    35d4:	71 f4       	brne	.+28     	; 0x35f2 <prvAddCurrentTaskToDelayedList+0x6c>
    35d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d8:	88 23       	and	r24, r24
    35da:	59 f0       	breq	.+22     	; 0x35f2 <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    35dc:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    35e0:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    35e4:	02 96       	adiw	r24, 0x02	; 2
    35e6:	bc 01       	movw	r22, r24
    35e8:	8d e7       	ldi	r24, 0x7D	; 125
    35ea:	9c e2       	ldi	r25, 0x2C	; 44
    35ec:	0e 94 36 08 	call	0x106c	; 0x106c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    35f0:	64 c0       	rjmp	.+200    	; 0x36ba <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    35f2:	29 81       	ldd	r18, Y+1	; 0x01
    35f4:	3a 81       	ldd	r19, Y+2	; 0x02
    35f6:	4b 81       	ldd	r20, Y+3	; 0x03
    35f8:	5c 81       	ldd	r21, Y+4	; 0x04
    35fa:	89 85       	ldd	r24, Y+9	; 0x09
    35fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fe:	ab 85       	ldd	r26, Y+11	; 0x0b
    3600:	bc 85       	ldd	r27, Y+12	; 0x0c
    3602:	82 0f       	add	r24, r18
    3604:	93 1f       	adc	r25, r19
    3606:	a4 1f       	adc	r26, r20
    3608:	b5 1f       	adc	r27, r21
    360a:	8d 83       	std	Y+5, r24	; 0x05
    360c:	9e 83       	std	Y+6, r25	; 0x06
    360e:	af 83       	std	Y+7, r26	; 0x07
    3610:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3612:	20 91 2a 2c 	lds	r18, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    3616:	30 91 2b 2c 	lds	r19, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    361a:	8d 81       	ldd	r24, Y+5	; 0x05
    361c:	9e 81       	ldd	r25, Y+6	; 0x06
    361e:	af 81       	ldd	r26, Y+7	; 0x07
    3620:	b8 85       	ldd	r27, Y+8	; 0x08
    3622:	f9 01       	movw	r30, r18
    3624:	82 83       	std	Z+2, r24	; 0x02
    3626:	93 83       	std	Z+3, r25	; 0x03
    3628:	a4 83       	std	Z+4, r26	; 0x04
    362a:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    362c:	2d 81       	ldd	r18, Y+5	; 0x05
    362e:	3e 81       	ldd	r19, Y+6	; 0x06
    3630:	4f 81       	ldd	r20, Y+7	; 0x07
    3632:	58 85       	ldd	r21, Y+8	; 0x08
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	9a 81       	ldd	r25, Y+2	; 0x02
    3638:	ab 81       	ldd	r26, Y+3	; 0x03
    363a:	bc 81       	ldd	r27, Y+4	; 0x04
    363c:	28 17       	cp	r18, r24
    363e:	39 07       	cpc	r19, r25
    3640:	4a 07       	cpc	r20, r26
    3642:	5b 07       	cpc	r21, r27
    3644:	78 f4       	brcc	.+30     	; 0x3664 <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3646:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    364a:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    364e:	9c 01       	movw	r18, r24
    3650:	2e 5f       	subi	r18, 0xFE	; 254
    3652:	3f 4f       	sbci	r19, 0xFF	; 255
    3654:	80 91 70 2c 	lds	r24, 0x2C70	; 0x802c70 <pxOverflowDelayedTaskList>
    3658:	90 91 71 2c 	lds	r25, 0x2C71	; 0x802c71 <pxOverflowDelayedTaskList+0x1>
    365c:	b9 01       	movw	r22, r18
    365e:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3662:	2b c0       	rjmp	.+86     	; 0x36ba <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3664:	80 91 2a 2c 	lds	r24, 0x2C2A	; 0x802c2a <pxCurrentTCB>
    3668:	90 91 2b 2c 	lds	r25, 0x2C2B	; 0x802c2b <pxCurrentTCB+0x1>
    366c:	9c 01       	movw	r18, r24
    366e:	2e 5f       	subi	r18, 0xFE	; 254
    3670:	3f 4f       	sbci	r19, 0xFF	; 255
    3672:	80 91 6e 2c 	lds	r24, 0x2C6E	; 0x802c6e <pxDelayedTaskList>
    3676:	90 91 6f 2c 	lds	r25, 0x2C6F	; 0x802c6f <pxDelayedTaskList+0x1>
    367a:	b9 01       	movw	r22, r18
    367c:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    3680:	80 91 93 2c 	lds	r24, 0x2C93	; 0x802c93 <xNextTaskUnblockTime>
    3684:	90 91 94 2c 	lds	r25, 0x2C94	; 0x802c94 <xNextTaskUnblockTime+0x1>
    3688:	a0 91 95 2c 	lds	r26, 0x2C95	; 0x802c95 <xNextTaskUnblockTime+0x2>
    368c:	b0 91 96 2c 	lds	r27, 0x2C96	; 0x802c96 <xNextTaskUnblockTime+0x3>
    3690:	2d 81       	ldd	r18, Y+5	; 0x05
    3692:	3e 81       	ldd	r19, Y+6	; 0x06
    3694:	4f 81       	ldd	r20, Y+7	; 0x07
    3696:	58 85       	ldd	r21, Y+8	; 0x08
    3698:	28 17       	cp	r18, r24
    369a:	39 07       	cpc	r19, r25
    369c:	4a 07       	cpc	r20, r26
    369e:	5b 07       	cpc	r21, r27
    36a0:	60 f4       	brcc	.+24     	; 0x36ba <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    36a2:	8d 81       	ldd	r24, Y+5	; 0x05
    36a4:	9e 81       	ldd	r25, Y+6	; 0x06
    36a6:	af 81       	ldd	r26, Y+7	; 0x07
    36a8:	b8 85       	ldd	r27, Y+8	; 0x08
    36aa:	80 93 93 2c 	sts	0x2C93, r24	; 0x802c93 <xNextTaskUnblockTime>
    36ae:	90 93 94 2c 	sts	0x2C94, r25	; 0x802c94 <xNextTaskUnblockTime+0x1>
    36b2:	a0 93 95 2c 	sts	0x2C95, r26	; 0x802c95 <xNextTaskUnblockTime+0x2>
    36b6:	b0 93 96 2c 	sts	0x2C96, r27	; 0x802c96 <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    36ba:	00 00       	nop
    36bc:	2d 96       	adiw	r28, 0x0d	; 13
    36be:	cd bf       	out	0x3d, r28	; 61
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	08 95       	ret

000036c8 <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    36c8:	ef 92       	push	r14
    36ca:	ff 92       	push	r15
    36cc:	0f 93       	push	r16
    36ce:	cf 93       	push	r28
    36d0:	df 93       	push	r29
    36d2:	1f 92       	push	r1
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
    36d8:	19 82       	std	Y+1, r1	; 0x01
    36da:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <prvCheckForValidListAndQueue>
    36de:	80 91 b4 2c 	lds	r24, 0x2CB4	; 0x802cb4 <xTimerQueue>
    36e2:	90 91 b5 2c 	lds	r25, 0x2CB5	; 0x802cb5 <xTimerQueue+0x1>
    36e6:	89 2b       	or	r24, r25
    36e8:	91 f0       	breq	.+36     	; 0x370e <xTimerCreateTimerTask+0x46>
    36ea:	0f 2e       	mov	r0, r31
    36ec:	f6 eb       	ldi	r31, 0xB6	; 182
    36ee:	ef 2e       	mov	r14, r31
    36f0:	fc e2       	ldi	r31, 0x2C	; 44
    36f2:	ff 2e       	mov	r15, r31
    36f4:	f0 2d       	mov	r31, r0
    36f6:	03 e0       	ldi	r16, 0x03	; 3
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	48 ec       	ldi	r20, 0xC8	; 200
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	65 e0       	ldi	r22, 0x05	; 5
    3702:	70 e2       	ldi	r23, 0x20	; 32
    3704:	8a e7       	ldi	r24, 0x7A	; 122
    3706:	9c e1       	ldi	r25, 0x1C	; 28
    3708:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
    370c:	89 83       	std	Y+1, r24	; 0x01
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	0f 90       	pop	r0
    3712:	df 91       	pop	r29
    3714:	cf 91       	pop	r28
    3716:	0f 91       	pop	r16
    3718:	ff 90       	pop	r15
    371a:	ef 90       	pop	r14
    371c:	08 95       	ret

0000371e <xTimerGenericCommand>:
    371e:	cf 92       	push	r12
    3720:	df 92       	push	r13
    3722:	ef 92       	push	r14
    3724:	ff 92       	push	r15
    3726:	0f 93       	push	r16
    3728:	1f 93       	push	r17
    372a:	cf 93       	push	r28
    372c:	df 93       	push	r29
    372e:	cd b7       	in	r28, 0x3d	; 61
    3730:	de b7       	in	r29, 0x3e	; 62
    3732:	67 97       	sbiw	r28, 0x17	; 23
    3734:	cd bf       	out	0x3d, r28	; 61
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	8b 87       	std	Y+11, r24	; 0x0b
    373a:	9c 87       	std	Y+12, r25	; 0x0c
    373c:	6d 87       	std	Y+13, r22	; 0x0d
    373e:	2e 87       	std	Y+14, r18	; 0x0e
    3740:	3f 87       	std	Y+15, r19	; 0x0f
    3742:	48 8b       	std	Y+16, r20	; 0x10
    3744:	59 8b       	std	Y+17, r21	; 0x11
    3746:	0a 8b       	std	Y+18, r16	; 0x12
    3748:	1b 8b       	std	Y+19, r17	; 0x13
    374a:	cc 8a       	std	Y+20, r12	; 0x14
    374c:	dd 8a       	std	Y+21, r13	; 0x15
    374e:	ee 8a       	std	Y+22, r14	; 0x16
    3750:	ff 8a       	std	Y+23, r15	; 0x17
    3752:	19 82       	std	Y+1, r1	; 0x01
    3754:	80 91 b4 2c 	lds	r24, 0x2CB4	; 0x802cb4 <xTimerQueue>
    3758:	90 91 b5 2c 	lds	r25, 0x2CB5	; 0x802cb5 <xTimerQueue+0x1>
    375c:	89 2b       	or	r24, r25
    375e:	09 f4       	brne	.+2      	; 0x3762 <xTimerGenericCommand+0x44>
    3760:	44 c0       	rjmp	.+136    	; 0x37ea <xTimerGenericCommand+0xcc>
    3762:	8d 85       	ldd	r24, Y+13	; 0x0d
    3764:	8a 83       	std	Y+2, r24	; 0x02
    3766:	8e 85       	ldd	r24, Y+14	; 0x0e
    3768:	9f 85       	ldd	r25, Y+15	; 0x0f
    376a:	a8 89       	ldd	r26, Y+16	; 0x10
    376c:	b9 89       	ldd	r27, Y+17	; 0x11
    376e:	8b 83       	std	Y+3, r24	; 0x03
    3770:	9c 83       	std	Y+4, r25	; 0x04
    3772:	ad 83       	std	Y+5, r26	; 0x05
    3774:	be 83       	std	Y+6, r27	; 0x06
    3776:	8b 85       	ldd	r24, Y+11	; 0x0b
    3778:	9c 85       	ldd	r25, Y+12	; 0x0c
    377a:	8f 83       	std	Y+7, r24	; 0x07
    377c:	98 87       	std	Y+8, r25	; 0x08
    377e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3780:	86 30       	cpi	r24, 0x06	; 6
    3782:	34 f5       	brge	.+76     	; 0x37d0 <xTimerGenericCommand+0xb2>
    3784:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <xTaskGetSchedulerState>
    3788:	82 30       	cpi	r24, 0x02	; 2
    378a:	99 f4       	brne	.+38     	; 0x37b2 <xTimerGenericCommand+0x94>
    378c:	e0 91 b4 2c 	lds	r30, 0x2CB4	; 0x802cb4 <xTimerQueue>
    3790:	f0 91 b5 2c 	lds	r31, 0x2CB5	; 0x802cb5 <xTimerQueue+0x1>
    3794:	8c 89       	ldd	r24, Y+20	; 0x14
    3796:	9d 89       	ldd	r25, Y+21	; 0x15
    3798:	ae 89       	ldd	r26, Y+22	; 0x16
    379a:	bf 89       	ldd	r27, Y+23	; 0x17
    379c:	be 01       	movw	r22, r28
    379e:	6e 5f       	subi	r22, 0xFE	; 254
    37a0:	7f 4f       	sbci	r23, 0xFF	; 255
    37a2:	00 e0       	ldi	r16, 0x00	; 0
    37a4:	9c 01       	movw	r18, r24
    37a6:	ad 01       	movw	r20, r26
    37a8:	cf 01       	movw	r24, r30
    37aa:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
    37ae:	89 83       	std	Y+1, r24	; 0x01
    37b0:	1c c0       	rjmp	.+56     	; 0x37ea <xTimerGenericCommand+0xcc>
    37b2:	80 91 b4 2c 	lds	r24, 0x2CB4	; 0x802cb4 <xTimerQueue>
    37b6:	90 91 b5 2c 	lds	r25, 0x2CB5	; 0x802cb5 <xTimerQueue+0x1>
    37ba:	be 01       	movw	r22, r28
    37bc:	6e 5f       	subi	r22, 0xFE	; 254
    37be:	7f 4f       	sbci	r23, 0xFF	; 255
    37c0:	00 e0       	ldi	r16, 0x00	; 0
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	a9 01       	movw	r20, r18
    37c8:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
    37cc:	89 83       	std	Y+1, r24	; 0x01
    37ce:	0d c0       	rjmp	.+26     	; 0x37ea <xTimerGenericCommand+0xcc>
    37d0:	80 91 b4 2c 	lds	r24, 0x2CB4	; 0x802cb4 <xTimerQueue>
    37d4:	90 91 b5 2c 	lds	r25, 0x2CB5	; 0x802cb5 <xTimerQueue+0x1>
    37d8:	4a 89       	ldd	r20, Y+18	; 0x12
    37da:	5b 89       	ldd	r21, Y+19	; 0x13
    37dc:	be 01       	movw	r22, r28
    37de:	6e 5f       	subi	r22, 0xFE	; 254
    37e0:	7f 4f       	sbci	r23, 0xFF	; 255
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <xQueueGenericSendFromISR>
    37e8:	89 83       	std	Y+1, r24	; 0x01
    37ea:	89 81       	ldd	r24, Y+1	; 0x01
    37ec:	67 96       	adiw	r28, 0x17	; 23
    37ee:	cd bf       	out	0x3d, r28	; 61
    37f0:	de bf       	out	0x3e, r29	; 62
    37f2:	df 91       	pop	r29
    37f4:	cf 91       	pop	r28
    37f6:	1f 91       	pop	r17
    37f8:	0f 91       	pop	r16
    37fa:	ff 90       	pop	r15
    37fc:	ef 90       	pop	r14
    37fe:	df 90       	pop	r13
    3800:	cf 90       	pop	r12
    3802:	08 95       	ret

00003804 <prvProcessExpiredTimer>:
    3804:	cf 92       	push	r12
    3806:	df 92       	push	r13
    3808:	ef 92       	push	r14
    380a:	ff 92       	push	r15
    380c:	0f 93       	push	r16
    380e:	1f 93       	push	r17
    3810:	cf 93       	push	r28
    3812:	df 93       	push	r29
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62
    3818:	2b 97       	sbiw	r28, 0x0b	; 11
    381a:	cd bf       	out	0x3d, r28	; 61
    381c:	de bf       	out	0x3e, r29	; 62
    381e:	6c 83       	std	Y+4, r22	; 0x04
    3820:	7d 83       	std	Y+5, r23	; 0x05
    3822:	8e 83       	std	Y+6, r24	; 0x06
    3824:	9f 83       	std	Y+7, r25	; 0x07
    3826:	28 87       	std	Y+8, r18	; 0x08
    3828:	39 87       	std	Y+9, r19	; 0x09
    382a:	4a 87       	std	Y+10, r20	; 0x0a
    382c:	5b 87       	std	Y+11, r21	; 0x0b
    382e:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <pxCurrentTimerList>
    3832:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <pxCurrentTimerList+0x1>
    3836:	fc 01       	movw	r30, r24
    3838:	87 81       	ldd	r24, Z+7	; 0x07
    383a:	90 85       	ldd	r25, Z+8	; 0x08
    383c:	fc 01       	movw	r30, r24
    383e:	80 85       	ldd	r24, Z+8	; 0x08
    3840:	91 85       	ldd	r25, Z+9	; 0x09
    3842:	89 83       	std	Y+1, r24	; 0x01
    3844:	9a 83       	std	Y+2, r25	; 0x02
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	9a 81       	ldd	r25, Y+2	; 0x02
    384a:	02 96       	adiw	r24, 0x02	; 2
    384c:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	9a 81       	ldd	r25, Y+2	; 0x02
    3854:	fc 01       	movw	r30, r24
    3856:	82 89       	ldd	r24, Z+18	; 0x12
    3858:	81 30       	cpi	r24, 0x01	; 1
    385a:	b1 f5       	brne	.+108    	; 0x38c8 <prvProcessExpiredTimer+0xc4>
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	9a 81       	ldd	r25, Y+2	; 0x02
    3860:	fc 01       	movw	r30, r24
    3862:	26 85       	ldd	r18, Z+14	; 0x0e
    3864:	37 85       	ldd	r19, Z+15	; 0x0f
    3866:	40 89       	ldd	r20, Z+16	; 0x10
    3868:	51 89       	ldd	r21, Z+17	; 0x11
    386a:	8c 81       	ldd	r24, Y+4	; 0x04
    386c:	9d 81       	ldd	r25, Y+5	; 0x05
    386e:	ae 81       	ldd	r26, Y+6	; 0x06
    3870:	bf 81       	ldd	r27, Y+7	; 0x07
    3872:	82 0f       	add	r24, r18
    3874:	93 1f       	adc	r25, r19
    3876:	a4 1f       	adc	r26, r20
    3878:	b5 1f       	adc	r27, r21
    387a:	ec 80       	ldd	r14, Y+4	; 0x04
    387c:	fd 80       	ldd	r15, Y+5	; 0x05
    387e:	0e 81       	ldd	r16, Y+6	; 0x06
    3880:	1f 81       	ldd	r17, Y+7	; 0x07
    3882:	28 85       	ldd	r18, Y+8	; 0x08
    3884:	39 85       	ldd	r19, Y+9	; 0x09
    3886:	4a 85       	ldd	r20, Y+10	; 0x0a
    3888:	5b 85       	ldd	r21, Y+11	; 0x0b
    388a:	e9 81       	ldd	r30, Y+1	; 0x01
    388c:	fa 81       	ldd	r31, Y+2	; 0x02
    388e:	67 01       	movw	r12, r14
    3890:	78 01       	movw	r14, r16
    3892:	89 01       	movw	r16, r18
    3894:	9a 01       	movw	r18, r20
    3896:	ac 01       	movw	r20, r24
    3898:	bd 01       	movw	r22, r26
    389a:	cf 01       	movw	r24, r30
    389c:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <prvInsertTimerInActiveList>
    38a0:	88 23       	and	r24, r24
    38a2:	91 f0       	breq	.+36     	; 0x38c8 <prvProcessExpiredTimer+0xc4>
    38a4:	8c 81       	ldd	r24, Y+4	; 0x04
    38a6:	9d 81       	ldd	r25, Y+5	; 0x05
    38a8:	ae 81       	ldd	r26, Y+6	; 0x06
    38aa:	bf 81       	ldd	r27, Y+7	; 0x07
    38ac:	e9 81       	ldd	r30, Y+1	; 0x01
    38ae:	fa 81       	ldd	r31, Y+2	; 0x02
    38b0:	c1 2c       	mov	r12, r1
    38b2:	d1 2c       	mov	r13, r1
    38b4:	76 01       	movw	r14, r12
    38b6:	00 e0       	ldi	r16, 0x00	; 0
    38b8:	10 e0       	ldi	r17, 0x00	; 0
    38ba:	9c 01       	movw	r18, r24
    38bc:	ad 01       	movw	r20, r26
    38be:	60 e0       	ldi	r22, 0x00	; 0
    38c0:	cf 01       	movw	r24, r30
    38c2:	0e 94 8f 1b 	call	0x371e	; 0x371e <xTimerGenericCommand>
    38c6:	8b 83       	std	Y+3, r24	; 0x03
    38c8:	89 81       	ldd	r24, Y+1	; 0x01
    38ca:	9a 81       	ldd	r25, Y+2	; 0x02
    38cc:	fc 01       	movw	r30, r24
    38ce:	25 89       	ldd	r18, Z+21	; 0x15
    38d0:	36 89       	ldd	r19, Z+22	; 0x16
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	9a 81       	ldd	r25, Y+2	; 0x02
    38d6:	f9 01       	movw	r30, r18
    38d8:	19 95       	eicall
    38da:	00 00       	nop
    38dc:	2b 96       	adiw	r28, 0x0b	; 11
    38de:	cd bf       	out	0x3d, r28	; 61
    38e0:	de bf       	out	0x3e, r29	; 62
    38e2:	df 91       	pop	r29
    38e4:	cf 91       	pop	r28
    38e6:	1f 91       	pop	r17
    38e8:	0f 91       	pop	r16
    38ea:	ff 90       	pop	r15
    38ec:	ef 90       	pop	r14
    38ee:	df 90       	pop	r13
    38f0:	cf 90       	pop	r12
    38f2:	08 95       	ret

000038f4 <prvTimerTask>:
    38f4:	cf 93       	push	r28
    38f6:	df 93       	push	r29
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
    38fc:	27 97       	sbiw	r28, 0x07	; 7
    38fe:	cd bf       	out	0x3d, r28	; 61
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	8e 83       	std	Y+6, r24	; 0x06
    3904:	9f 83       	std	Y+7, r25	; 0x07
    3906:	ce 01       	movw	r24, r28
    3908:	05 96       	adiw	r24, 0x05	; 5
    390a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvGetNextExpireTime>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	89 83       	std	Y+1, r24	; 0x01
    3914:	9a 83       	std	Y+2, r25	; 0x02
    3916:	ab 83       	std	Y+3, r26	; 0x03
    3918:	bc 83       	std	Y+4, r27	; 0x04
    391a:	2d 81       	ldd	r18, Y+5	; 0x05
    391c:	89 81       	ldd	r24, Y+1	; 0x01
    391e:	9a 81       	ldd	r25, Y+2	; 0x02
    3920:	ab 81       	ldd	r26, Y+3	; 0x03
    3922:	bc 81       	ldd	r27, Y+4	; 0x04
    3924:	42 2f       	mov	r20, r18
    3926:	bc 01       	movw	r22, r24
    3928:	cd 01       	movw	r24, r26
    392a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <prvProcessTimerOrBlockTask>
    392e:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <prvProcessReceivedCommands>
    3932:	e9 cf       	rjmp	.-46     	; 0x3906 <prvTimerTask+0x12>

00003934 <prvProcessTimerOrBlockTask>:
    3934:	ef 92       	push	r14
    3936:	ff 92       	push	r15
    3938:	0f 93       	push	r16
    393a:	1f 93       	push	r17
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	cd b7       	in	r28, 0x3d	; 61
    3942:	de b7       	in	r29, 0x3e	; 62
    3944:	2a 97       	sbiw	r28, 0x0a	; 10
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	6e 83       	std	Y+6, r22	; 0x06
    394c:	7f 83       	std	Y+7, r23	; 0x07
    394e:	88 87       	std	Y+8, r24	; 0x08
    3950:	99 87       	std	Y+9, r25	; 0x09
    3952:	4a 87       	std	Y+10, r20	; 0x0a
    3954:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <vTaskSuspendAll>
    3958:	ce 01       	movw	r24, r28
    395a:	05 96       	adiw	r24, 0x05	; 5
    395c:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <prvSampleTimeNow>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	89 83       	std	Y+1, r24	; 0x01
    3966:	9a 83       	std	Y+2, r25	; 0x02
    3968:	ab 83       	std	Y+3, r26	; 0x03
    396a:	bc 83       	std	Y+4, r27	; 0x04
    396c:	8d 81       	ldd	r24, Y+5	; 0x05
    396e:	88 23       	and	r24, r24
    3970:	09 f0       	breq	.+2      	; 0x3974 <prvProcessTimerOrBlockTask+0x40>
    3972:	4e c0       	rjmp	.+156    	; 0x3a10 <prvProcessTimerOrBlockTask+0xdc>
    3974:	8a 85       	ldd	r24, Y+10	; 0x0a
    3976:	88 23       	and	r24, r24
    3978:	e1 f4       	brne	.+56     	; 0x39b2 <prvProcessTimerOrBlockTask+0x7e>
    397a:	2e 81       	ldd	r18, Y+6	; 0x06
    397c:	3f 81       	ldd	r19, Y+7	; 0x07
    397e:	48 85       	ldd	r20, Y+8	; 0x08
    3980:	59 85       	ldd	r21, Y+9	; 0x09
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	9a 81       	ldd	r25, Y+2	; 0x02
    3986:	ab 81       	ldd	r26, Y+3	; 0x03
    3988:	bc 81       	ldd	r27, Y+4	; 0x04
    398a:	82 17       	cp	r24, r18
    398c:	93 07       	cpc	r25, r19
    398e:	a4 07       	cpc	r26, r20
    3990:	b5 07       	cpc	r27, r21
    3992:	78 f0       	brcs	.+30     	; 0x39b2 <prvProcessTimerOrBlockTask+0x7e>
    3994:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
    3998:	29 81       	ldd	r18, Y+1	; 0x01
    399a:	3a 81       	ldd	r19, Y+2	; 0x02
    399c:	4b 81       	ldd	r20, Y+3	; 0x03
    399e:	5c 81       	ldd	r21, Y+4	; 0x04
    39a0:	8e 81       	ldd	r24, Y+6	; 0x06
    39a2:	9f 81       	ldd	r25, Y+7	; 0x07
    39a4:	a8 85       	ldd	r26, Y+8	; 0x08
    39a6:	b9 85       	ldd	r27, Y+9	; 0x09
    39a8:	bc 01       	movw	r22, r24
    39aa:	cd 01       	movw	r24, r26
    39ac:	0e 94 02 1c 	call	0x3804	; 0x3804 <prvProcessExpiredTimer>
    39b0:	31 c0       	rjmp	.+98     	; 0x3a14 <prvProcessTimerOrBlockTask+0xe0>
    39b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39b4:	88 23       	and	r24, r24
    39b6:	59 f0       	breq	.+22     	; 0x39ce <prvProcessTimerOrBlockTask+0x9a>
    39b8:	80 91 b2 2c 	lds	r24, 0x2CB2	; 0x802cb2 <pxOverflowTimerList>
    39bc:	90 91 b3 2c 	lds	r25, 0x2CB3	; 0x802cb3 <pxOverflowTimerList+0x1>
    39c0:	fc 01       	movw	r30, r24
    39c2:	90 81       	ld	r25, Z
    39c4:	81 e0       	ldi	r24, 0x01	; 1
    39c6:	99 23       	and	r25, r25
    39c8:	09 f0       	breq	.+2      	; 0x39cc <prvProcessTimerOrBlockTask+0x98>
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	8a 87       	std	Y+10, r24	; 0x0a
    39ce:	2e 81       	ldd	r18, Y+6	; 0x06
    39d0:	3f 81       	ldd	r19, Y+7	; 0x07
    39d2:	48 85       	ldd	r20, Y+8	; 0x08
    39d4:	59 85       	ldd	r21, Y+9	; 0x09
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	9a 81       	ldd	r25, Y+2	; 0x02
    39da:	ab 81       	ldd	r26, Y+3	; 0x03
    39dc:	bc 81       	ldd	r27, Y+4	; 0x04
    39de:	79 01       	movw	r14, r18
    39e0:	8a 01       	movw	r16, r20
    39e2:	e8 1a       	sub	r14, r24
    39e4:	f9 0a       	sbc	r15, r25
    39e6:	0a 0b       	sbc	r16, r26
    39e8:	1b 0b       	sbc	r17, r27
    39ea:	d8 01       	movw	r26, r16
    39ec:	c7 01       	movw	r24, r14
    39ee:	e0 91 b4 2c 	lds	r30, 0x2CB4	; 0x802cb4 <xTimerQueue>
    39f2:	f0 91 b5 2c 	lds	r31, 0x2CB5	; 0x802cb5 <xTimerQueue+0x1>
    39f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    39f8:	ac 01       	movw	r20, r24
    39fa:	bd 01       	movw	r22, r26
    39fc:	cf 01       	movw	r24, r30
    39fe:	0e 94 99 11 	call	0x2332	; 0x2332 <vQueueWaitForMessageRestricted>
    3a02:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
    3a06:	88 23       	and	r24, r24
    3a08:	29 f4       	brne	.+10     	; 0x3a14 <prvProcessTimerOrBlockTask+0xe0>
    3a0a:	0e 94 80 0b 	call	0x1700	; 0x1700 <vPortYield>
    3a0e:	02 c0       	rjmp	.+4      	; 0x3a14 <prvProcessTimerOrBlockTask+0xe0>
    3a10:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <xTaskResumeAll>
    3a14:	00 00       	nop
    3a16:	2a 96       	adiw	r28, 0x0a	; 10
    3a18:	cd bf       	out	0x3d, r28	; 61
    3a1a:	de bf       	out	0x3e, r29	; 62
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	1f 91       	pop	r17
    3a22:	0f 91       	pop	r16
    3a24:	ff 90       	pop	r15
    3a26:	ef 90       	pop	r14
    3a28:	08 95       	ret

00003a2a <prvGetNextExpireTime>:
    3a2a:	cf 93       	push	r28
    3a2c:	df 93       	push	r29
    3a2e:	00 d0       	rcall	.+0      	; 0x3a30 <prvGetNextExpireTime+0x6>
    3a30:	00 d0       	rcall	.+0      	; 0x3a32 <prvGetNextExpireTime+0x8>
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	8d 83       	std	Y+5, r24	; 0x05
    3a38:	9e 83       	std	Y+6, r25	; 0x06
    3a3a:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <pxCurrentTimerList>
    3a3e:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <pxCurrentTimerList+0x1>
    3a42:	fc 01       	movw	r30, r24
    3a44:	90 81       	ld	r25, Z
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	99 23       	and	r25, r25
    3a4a:	09 f0       	breq	.+2      	; 0x3a4e <prvGetNextExpireTime+0x24>
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	28 2f       	mov	r18, r24
    3a50:	8d 81       	ldd	r24, Y+5	; 0x05
    3a52:	9e 81       	ldd	r25, Y+6	; 0x06
    3a54:	fc 01       	movw	r30, r24
    3a56:	20 83       	st	Z, r18
    3a58:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	80 81       	ld	r24, Z
    3a60:	88 23       	and	r24, r24
    3a62:	89 f4       	brne	.+34     	; 0x3a86 <prvGetNextExpireTime+0x5c>
    3a64:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <pxCurrentTimerList>
    3a68:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <pxCurrentTimerList+0x1>
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	87 81       	ldd	r24, Z+7	; 0x07
    3a70:	90 85       	ldd	r25, Z+8	; 0x08
    3a72:	fc 01       	movw	r30, r24
    3a74:	80 81       	ld	r24, Z
    3a76:	91 81       	ldd	r25, Z+1	; 0x01
    3a78:	a2 81       	ldd	r26, Z+2	; 0x02
    3a7a:	b3 81       	ldd	r27, Z+3	; 0x03
    3a7c:	89 83       	std	Y+1, r24	; 0x01
    3a7e:	9a 83       	std	Y+2, r25	; 0x02
    3a80:	ab 83       	std	Y+3, r26	; 0x03
    3a82:	bc 83       	std	Y+4, r27	; 0x04
    3a84:	04 c0       	rjmp	.+8      	; 0x3a8e <prvGetNextExpireTime+0x64>
    3a86:	19 82       	std	Y+1, r1	; 0x01
    3a88:	1a 82       	std	Y+2, r1	; 0x02
    3a8a:	1b 82       	std	Y+3, r1	; 0x03
    3a8c:	1c 82       	std	Y+4, r1	; 0x04
    3a8e:	89 81       	ldd	r24, Y+1	; 0x01
    3a90:	9a 81       	ldd	r25, Y+2	; 0x02
    3a92:	ab 81       	ldd	r26, Y+3	; 0x03
    3a94:	bc 81       	ldd	r27, Y+4	; 0x04
    3a96:	bc 01       	movw	r22, r24
    3a98:	cd 01       	movw	r24, r26
    3a9a:	26 96       	adiw	r28, 0x06	; 6
    3a9c:	cd bf       	out	0x3d, r28	; 61
    3a9e:	de bf       	out	0x3e, r29	; 62
    3aa0:	df 91       	pop	r29
    3aa2:	cf 91       	pop	r28
    3aa4:	08 95       	ret

00003aa6 <prvSampleTimeNow>:
    3aa6:	cf 93       	push	r28
    3aa8:	df 93       	push	r29
    3aaa:	00 d0       	rcall	.+0      	; 0x3aac <prvSampleTimeNow+0x6>
    3aac:	00 d0       	rcall	.+0      	; 0x3aae <prvSampleTimeNow+0x8>
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    3ab2:	8d 83       	std	Y+5, r24	; 0x05
    3ab4:	9e 83       	std	Y+6, r25	; 0x06
    3ab6:	0e 94 90 15 	call	0x2b20	; 0x2b20 <xTaskGetTickCount>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	89 83       	std	Y+1, r24	; 0x01
    3ac0:	9a 83       	std	Y+2, r25	; 0x02
    3ac2:	ab 83       	std	Y+3, r26	; 0x03
    3ac4:	bc 83       	std	Y+4, r27	; 0x04
    3ac6:	80 91 b8 2c 	lds	r24, 0x2CB8	; 0x802cb8 <xLastTime.4745>
    3aca:	90 91 b9 2c 	lds	r25, 0x2CB9	; 0x802cb9 <xLastTime.4745+0x1>
    3ace:	a0 91 ba 2c 	lds	r26, 0x2CBA	; 0x802cba <xLastTime.4745+0x2>
    3ad2:	b0 91 bb 2c 	lds	r27, 0x2CBB	; 0x802cbb <xLastTime.4745+0x3>
    3ad6:	29 81       	ldd	r18, Y+1	; 0x01
    3ad8:	3a 81       	ldd	r19, Y+2	; 0x02
    3ada:	4b 81       	ldd	r20, Y+3	; 0x03
    3adc:	5c 81       	ldd	r21, Y+4	; 0x04
    3ade:	28 17       	cp	r18, r24
    3ae0:	39 07       	cpc	r19, r25
    3ae2:	4a 07       	cpc	r20, r26
    3ae4:	5b 07       	cpc	r21, r27
    3ae6:	40 f4       	brcc	.+16     	; 0x3af8 <prvSampleTimeNow+0x52>
    3ae8:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <prvSwitchTimerLists>
    3aec:	8d 81       	ldd	r24, Y+5	; 0x05
    3aee:	9e 81       	ldd	r25, Y+6	; 0x06
    3af0:	21 e0       	ldi	r18, 0x01	; 1
    3af2:	fc 01       	movw	r30, r24
    3af4:	20 83       	st	Z, r18
    3af6:	04 c0       	rjmp	.+8      	; 0x3b00 <prvSampleTimeNow+0x5a>
    3af8:	8d 81       	ldd	r24, Y+5	; 0x05
    3afa:	9e 81       	ldd	r25, Y+6	; 0x06
    3afc:	fc 01       	movw	r30, r24
    3afe:	10 82       	st	Z, r1
    3b00:	89 81       	ldd	r24, Y+1	; 0x01
    3b02:	9a 81       	ldd	r25, Y+2	; 0x02
    3b04:	ab 81       	ldd	r26, Y+3	; 0x03
    3b06:	bc 81       	ldd	r27, Y+4	; 0x04
    3b08:	80 93 b8 2c 	sts	0x2CB8, r24	; 0x802cb8 <xLastTime.4745>
    3b0c:	90 93 b9 2c 	sts	0x2CB9, r25	; 0x802cb9 <xLastTime.4745+0x1>
    3b10:	a0 93 ba 2c 	sts	0x2CBA, r26	; 0x802cba <xLastTime.4745+0x2>
    3b14:	b0 93 bb 2c 	sts	0x2CBB, r27	; 0x802cbb <xLastTime.4745+0x3>
    3b18:	89 81       	ldd	r24, Y+1	; 0x01
    3b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1c:	ab 81       	ldd	r26, Y+3	; 0x03
    3b1e:	bc 81       	ldd	r27, Y+4	; 0x04
    3b20:	bc 01       	movw	r22, r24
    3b22:	cd 01       	movw	r24, r26
    3b24:	26 96       	adiw	r28, 0x06	; 6
    3b26:	cd bf       	out	0x3d, r28	; 61
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	08 95       	ret

00003b30 <prvInsertTimerInActiveList>:
    3b30:	cf 92       	push	r12
    3b32:	df 92       	push	r13
    3b34:	ef 92       	push	r14
    3b36:	ff 92       	push	r15
    3b38:	0f 93       	push	r16
    3b3a:	1f 93       	push	r17
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	2f 97       	sbiw	r28, 0x0f	; 15
    3b46:	cd bf       	out	0x3d, r28	; 61
    3b48:	de bf       	out	0x3e, r29	; 62
    3b4a:	8a 83       	std	Y+2, r24	; 0x02
    3b4c:	9b 83       	std	Y+3, r25	; 0x03
    3b4e:	4c 83       	std	Y+4, r20	; 0x04
    3b50:	5d 83       	std	Y+5, r21	; 0x05
    3b52:	6e 83       	std	Y+6, r22	; 0x06
    3b54:	7f 83       	std	Y+7, r23	; 0x07
    3b56:	08 87       	std	Y+8, r16	; 0x08
    3b58:	19 87       	std	Y+9, r17	; 0x09
    3b5a:	2a 87       	std	Y+10, r18	; 0x0a
    3b5c:	3b 87       	std	Y+11, r19	; 0x0b
    3b5e:	cc 86       	std	Y+12, r12	; 0x0c
    3b60:	dd 86       	std	Y+13, r13	; 0x0d
    3b62:	ee 86       	std	Y+14, r14	; 0x0e
    3b64:	ff 86       	std	Y+15, r15	; 0x0f
    3b66:	19 82       	std	Y+1, r1	; 0x01
    3b68:	2a 81       	ldd	r18, Y+2	; 0x02
    3b6a:	3b 81       	ldd	r19, Y+3	; 0x03
    3b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b70:	ae 81       	ldd	r26, Y+6	; 0x06
    3b72:	bf 81       	ldd	r27, Y+7	; 0x07
    3b74:	f9 01       	movw	r30, r18
    3b76:	82 83       	std	Z+2, r24	; 0x02
    3b78:	93 83       	std	Z+3, r25	; 0x03
    3b7a:	a4 83       	std	Z+4, r26	; 0x04
    3b7c:	b5 83       	std	Z+5, r27	; 0x05
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	9b 81       	ldd	r25, Y+3	; 0x03
    3b82:	2a 81       	ldd	r18, Y+2	; 0x02
    3b84:	3b 81       	ldd	r19, Y+3	; 0x03
    3b86:	fc 01       	movw	r30, r24
    3b88:	22 87       	std	Z+10, r18	; 0x0a
    3b8a:	33 87       	std	Z+11, r19	; 0x0b
    3b8c:	2c 81       	ldd	r18, Y+4	; 0x04
    3b8e:	3d 81       	ldd	r19, Y+5	; 0x05
    3b90:	4e 81       	ldd	r20, Y+6	; 0x06
    3b92:	5f 81       	ldd	r21, Y+7	; 0x07
    3b94:	88 85       	ldd	r24, Y+8	; 0x08
    3b96:	99 85       	ldd	r25, Y+9	; 0x09
    3b98:	aa 85       	ldd	r26, Y+10	; 0x0a
    3b9a:	bb 85       	ldd	r27, Y+11	; 0x0b
    3b9c:	82 17       	cp	r24, r18
    3b9e:	93 07       	cpc	r25, r19
    3ba0:	a4 07       	cpc	r26, r20
    3ba2:	b5 07       	cpc	r27, r21
    3ba4:	40 f1       	brcs	.+80     	; 0x3bf6 <prvInsertTimerInActiveList+0xc6>
    3ba6:	28 85       	ldd	r18, Y+8	; 0x08
    3ba8:	39 85       	ldd	r19, Y+9	; 0x09
    3baa:	4a 85       	ldd	r20, Y+10	; 0x0a
    3bac:	5b 85       	ldd	r21, Y+11	; 0x0b
    3bae:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bb0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bb2:	ae 85       	ldd	r26, Y+14	; 0x0e
    3bb4:	bf 85       	ldd	r27, Y+15	; 0x0f
    3bb6:	28 1b       	sub	r18, r24
    3bb8:	39 0b       	sbc	r19, r25
    3bba:	4a 0b       	sbc	r20, r26
    3bbc:	5b 0b       	sbc	r21, r27
    3bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	86 85       	ldd	r24, Z+14	; 0x0e
    3bc6:	97 85       	ldd	r25, Z+15	; 0x0f
    3bc8:	a0 89       	ldd	r26, Z+16	; 0x10
    3bca:	b1 89       	ldd	r27, Z+17	; 0x11
    3bcc:	28 17       	cp	r18, r24
    3bce:	39 07       	cpc	r19, r25
    3bd0:	4a 07       	cpc	r20, r26
    3bd2:	5b 07       	cpc	r21, r27
    3bd4:	18 f0       	brcs	.+6      	; 0x3bdc <prvInsertTimerInActiveList+0xac>
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	89 83       	std	Y+1, r24	; 0x01
    3bda:	36 c0       	rjmp	.+108    	; 0x3c48 <prvInsertTimerInActiveList+0x118>
    3bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bde:	9b 81       	ldd	r25, Y+3	; 0x03
    3be0:	9c 01       	movw	r18, r24
    3be2:	2e 5f       	subi	r18, 0xFE	; 254
    3be4:	3f 4f       	sbci	r19, 0xFF	; 255
    3be6:	80 91 b2 2c 	lds	r24, 0x2CB2	; 0x802cb2 <pxOverflowTimerList>
    3bea:	90 91 b3 2c 	lds	r25, 0x2CB3	; 0x802cb3 <pxOverflowTimerList+0x1>
    3bee:	b9 01       	movw	r22, r18
    3bf0:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    3bf4:	29 c0       	rjmp	.+82     	; 0x3c48 <prvInsertTimerInActiveList+0x118>
    3bf6:	28 85       	ldd	r18, Y+8	; 0x08
    3bf8:	39 85       	ldd	r19, Y+9	; 0x09
    3bfa:	4a 85       	ldd	r20, Y+10	; 0x0a
    3bfc:	5b 85       	ldd	r21, Y+11	; 0x0b
    3bfe:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c00:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c02:	ae 85       	ldd	r26, Y+14	; 0x0e
    3c04:	bf 85       	ldd	r27, Y+15	; 0x0f
    3c06:	28 17       	cp	r18, r24
    3c08:	39 07       	cpc	r19, r25
    3c0a:	4a 07       	cpc	r20, r26
    3c0c:	5b 07       	cpc	r21, r27
    3c0e:	80 f4       	brcc	.+32     	; 0x3c30 <prvInsertTimerInActiveList+0x100>
    3c10:	2c 81       	ldd	r18, Y+4	; 0x04
    3c12:	3d 81       	ldd	r19, Y+5	; 0x05
    3c14:	4e 81       	ldd	r20, Y+6	; 0x06
    3c16:	5f 81       	ldd	r21, Y+7	; 0x07
    3c18:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c1c:	ae 85       	ldd	r26, Y+14	; 0x0e
    3c1e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3c20:	28 17       	cp	r18, r24
    3c22:	39 07       	cpc	r19, r25
    3c24:	4a 07       	cpc	r20, r26
    3c26:	5b 07       	cpc	r21, r27
    3c28:	18 f0       	brcs	.+6      	; 0x3c30 <prvInsertTimerInActiveList+0x100>
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    3c2e:	0c c0       	rjmp	.+24     	; 0x3c48 <prvInsertTimerInActiveList+0x118>
    3c30:	8a 81       	ldd	r24, Y+2	; 0x02
    3c32:	9b 81       	ldd	r25, Y+3	; 0x03
    3c34:	9c 01       	movw	r18, r24
    3c36:	2e 5f       	subi	r18, 0xFE	; 254
    3c38:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3a:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <pxCurrentTimerList>
    3c3e:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <pxCurrentTimerList+0x1>
    3c42:	b9 01       	movw	r22, r18
    3c44:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	2f 96       	adiw	r28, 0x0f	; 15
    3c4c:	cd bf       	out	0x3d, r28	; 61
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	df 91       	pop	r29
    3c52:	cf 91       	pop	r28
    3c54:	1f 91       	pop	r17
    3c56:	0f 91       	pop	r16
    3c58:	ff 90       	pop	r15
    3c5a:	ef 90       	pop	r14
    3c5c:	df 90       	pop	r13
    3c5e:	cf 90       	pop	r12
    3c60:	08 95       	ret

00003c62 <prvProcessReceivedCommands>:
    3c62:	cf 92       	push	r12
    3c64:	df 92       	push	r13
    3c66:	ef 92       	push	r14
    3c68:	ff 92       	push	r15
    3c6a:	0f 93       	push	r16
    3c6c:	1f 93       	push	r17
    3c6e:	cf 93       	push	r28
    3c70:	df 93       	push	r29
    3c72:	cd b7       	in	r28, 0x3d	; 61
    3c74:	de b7       	in	r29, 0x3e	; 62
    3c76:	65 97       	sbiw	r28, 0x15	; 21
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	de bf       	out	0x3e, r29	; 62
    3c7c:	e0 c0       	rjmp	.+448    	; 0x3e3e <prvProcessReceivedCommands+0x1dc>
    3c7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c80:	88 23       	and	r24, r24
    3c82:	fc f4       	brge	.+62     	; 0x3cc2 <prvProcessReceivedCommands+0x60>
    3c84:	ce 01       	movw	r24, r28
    3c86:	0a 96       	adiw	r24, 0x0a	; 10
    3c88:	01 96       	adiw	r24, 0x01	; 1
    3c8a:	89 83       	std	Y+1, r24	; 0x01
    3c8c:	9a 83       	std	Y+2, r25	; 0x02
    3c8e:	89 81       	ldd	r24, Y+1	; 0x01
    3c90:	9a 81       	ldd	r25, Y+2	; 0x02
    3c92:	fc 01       	movw	r30, r24
    3c94:	20 81       	ld	r18, Z
    3c96:	31 81       	ldd	r19, Z+1	; 0x01
    3c98:	89 81       	ldd	r24, Y+1	; 0x01
    3c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9c:	fc 01       	movw	r30, r24
    3c9e:	84 81       	ldd	r24, Z+4	; 0x04
    3ca0:	95 81       	ldd	r25, Z+5	; 0x05
    3ca2:	a6 81       	ldd	r26, Z+6	; 0x06
    3ca4:	b7 81       	ldd	r27, Z+7	; 0x07
    3ca6:	49 81       	ldd	r20, Y+1	; 0x01
    3ca8:	5a 81       	ldd	r21, Y+2	; 0x02
    3caa:	fa 01       	movw	r30, r20
    3cac:	02 80       	ldd	r0, Z+2	; 0x02
    3cae:	f3 81       	ldd	r31, Z+3	; 0x03
    3cb0:	e0 2d       	mov	r30, r0
    3cb2:	ec 8b       	std	Y+20, r30	; 0x14
    3cb4:	fd 8b       	std	Y+21, r31	; 0x15
    3cb6:	ac 01       	movw	r20, r24
    3cb8:	bd 01       	movw	r22, r26
    3cba:	8c 89       	ldd	r24, Y+20	; 0x14
    3cbc:	9d 89       	ldd	r25, Y+21	; 0x15
    3cbe:	f9 01       	movw	r30, r18
    3cc0:	19 95       	eicall
    3cc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cc4:	88 23       	and	r24, r24
    3cc6:	0c f4       	brge	.+2      	; 0x3cca <prvProcessReceivedCommands+0x68>
    3cc8:	ba c0       	rjmp	.+372    	; 0x3e3e <prvProcessReceivedCommands+0x1dc>
    3cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ccc:	98 89       	ldd	r25, Y+16	; 0x10
    3cce:	8b 83       	std	Y+3, r24	; 0x03
    3cd0:	9c 83       	std	Y+4, r25	; 0x04
    3cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	84 85       	ldd	r24, Z+12	; 0x0c
    3cda:	95 85       	ldd	r25, Z+13	; 0x0d
    3cdc:	89 2b       	or	r24, r25
    3cde:	29 f0       	breq	.+10     	; 0x3cea <prvProcessReceivedCommands+0x88>
    3ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce4:	02 96       	adiw	r24, 0x02	; 2
    3ce6:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3cea:	ce 01       	movw	r24, r28
    3cec:	43 96       	adiw	r24, 0x13	; 19
    3cee:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <prvSampleTimeNow>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	8d 83       	std	Y+5, r24	; 0x05
    3cf8:	9e 83       	std	Y+6, r25	; 0x06
    3cfa:	af 83       	std	Y+7, r26	; 0x07
    3cfc:	b8 87       	std	Y+8, r27	; 0x08
    3cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d00:	08 2e       	mov	r0, r24
    3d02:	00 0c       	add	r0, r0
    3d04:	99 0b       	sbc	r25, r25
    3d06:	09 2e       	mov	r0, r25
    3d08:	00 0c       	add	r0, r0
    3d0a:	aa 0b       	sbc	r26, r26
    3d0c:	bb 0b       	sbc	r27, r27
    3d0e:	40 e0       	ldi	r20, 0x00	; 0
    3d10:	50 e0       	ldi	r21, 0x00	; 0
    3d12:	29 e0       	ldi	r18, 0x09	; 9
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	84 1b       	sub	r24, r20
    3d18:	95 0b       	sbc	r25, r21
    3d1a:	28 17       	cp	r18, r24
    3d1c:	39 07       	cpc	r19, r25
    3d1e:	08 f4       	brcc	.+2      	; 0x3d22 <prvProcessReceivedCommands+0xc0>
    3d20:	8d c0       	rjmp	.+282    	; 0x3e3c <prvProcessReceivedCommands+0x1da>
    3d22:	fc 01       	movw	r30, r24
    3d24:	88 27       	eor	r24, r24
    3d26:	e2 50       	subi	r30, 0x02	; 2
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d2c:	0c 94 06 33 	jmp	0x660c	; 0x660c <__tablejump2__>
    3d30:	eb 84       	ldd	r14, Y+11	; 0x0b
    3d32:	fc 84       	ldd	r15, Y+12	; 0x0c
    3d34:	0d 85       	ldd	r16, Y+13	; 0x0d
    3d36:	1e 85       	ldd	r17, Y+14	; 0x0e
    3d38:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d3a:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d3c:	4d 85       	ldd	r20, Y+13	; 0x0d
    3d3e:	5e 85       	ldd	r21, Y+14	; 0x0e
    3d40:	8b 81       	ldd	r24, Y+3	; 0x03
    3d42:	9c 81       	ldd	r25, Y+4	; 0x04
    3d44:	fc 01       	movw	r30, r24
    3d46:	86 85       	ldd	r24, Z+14	; 0x0e
    3d48:	97 85       	ldd	r25, Z+15	; 0x0f
    3d4a:	a0 89       	ldd	r26, Z+16	; 0x10
    3d4c:	b1 89       	ldd	r27, Z+17	; 0x11
    3d4e:	82 0f       	add	r24, r18
    3d50:	93 1f       	adc	r25, r19
    3d52:	a4 1f       	adc	r26, r20
    3d54:	b5 1f       	adc	r27, r21
    3d56:	2d 81       	ldd	r18, Y+5	; 0x05
    3d58:	3e 81       	ldd	r19, Y+6	; 0x06
    3d5a:	4f 81       	ldd	r20, Y+7	; 0x07
    3d5c:	58 85       	ldd	r21, Y+8	; 0x08
    3d5e:	eb 81       	ldd	r30, Y+3	; 0x03
    3d60:	fc 81       	ldd	r31, Y+4	; 0x04
    3d62:	67 01       	movw	r12, r14
    3d64:	78 01       	movw	r14, r16
    3d66:	89 01       	movw	r16, r18
    3d68:	9a 01       	movw	r18, r20
    3d6a:	ac 01       	movw	r20, r24
    3d6c:	bd 01       	movw	r22, r26
    3d6e:	cf 01       	movw	r24, r30
    3d70:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <prvInsertTimerInActiveList>
    3d74:	88 23       	and	r24, r24
    3d76:	09 f4       	brne	.+2      	; 0x3d7a <prvProcessReceivedCommands+0x118>
    3d78:	62 c0       	rjmp	.+196    	; 0x3e3e <prvProcessReceivedCommands+0x1dc>
    3d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7e:	fc 01       	movw	r30, r24
    3d80:	25 89       	ldd	r18, Z+21	; 0x15
    3d82:	36 89       	ldd	r19, Z+22	; 0x16
    3d84:	8b 81       	ldd	r24, Y+3	; 0x03
    3d86:	9c 81       	ldd	r25, Y+4	; 0x04
    3d88:	f9 01       	movw	r30, r18
    3d8a:	19 95       	eicall
    3d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d90:	fc 01       	movw	r30, r24
    3d92:	82 89       	ldd	r24, Z+18	; 0x12
    3d94:	81 30       	cpi	r24, 0x01	; 1
    3d96:	09 f0       	breq	.+2      	; 0x3d9a <prvProcessReceivedCommands+0x138>
    3d98:	52 c0       	rjmp	.+164    	; 0x3e3e <prvProcessReceivedCommands+0x1dc>
    3d9a:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d9e:	4d 85       	ldd	r20, Y+13	; 0x0d
    3da0:	5e 85       	ldd	r21, Y+14	; 0x0e
    3da2:	8b 81       	ldd	r24, Y+3	; 0x03
    3da4:	9c 81       	ldd	r25, Y+4	; 0x04
    3da6:	fc 01       	movw	r30, r24
    3da8:	86 85       	ldd	r24, Z+14	; 0x0e
    3daa:	97 85       	ldd	r25, Z+15	; 0x0f
    3dac:	a0 89       	ldd	r26, Z+16	; 0x10
    3dae:	b1 89       	ldd	r27, Z+17	; 0x11
    3db0:	82 0f       	add	r24, r18
    3db2:	93 1f       	adc	r25, r19
    3db4:	a4 1f       	adc	r26, r20
    3db6:	b5 1f       	adc	r27, r21
    3db8:	eb 81       	ldd	r30, Y+3	; 0x03
    3dba:	fc 81       	ldd	r31, Y+4	; 0x04
    3dbc:	c1 2c       	mov	r12, r1
    3dbe:	d1 2c       	mov	r13, r1
    3dc0:	76 01       	movw	r14, r12
    3dc2:	00 e0       	ldi	r16, 0x00	; 0
    3dc4:	10 e0       	ldi	r17, 0x00	; 0
    3dc6:	9c 01       	movw	r18, r24
    3dc8:	ad 01       	movw	r20, r26
    3dca:	60 e0       	ldi	r22, 0x00	; 0
    3dcc:	cf 01       	movw	r24, r30
    3dce:	0e 94 8f 1b 	call	0x371e	; 0x371e <xTimerGenericCommand>
    3dd2:	89 87       	std	Y+9, r24	; 0x09
    3dd4:	34 c0       	rjmp	.+104    	; 0x3e3e <prvProcessReceivedCommands+0x1dc>
    3dd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3dd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3dda:	ad 85       	ldd	r26, Y+13	; 0x0d
    3ddc:	be 85       	ldd	r27, Y+14	; 0x0e
    3dde:	2b 81       	ldd	r18, Y+3	; 0x03
    3de0:	3c 81       	ldd	r19, Y+4	; 0x04
    3de2:	f9 01       	movw	r30, r18
    3de4:	86 87       	std	Z+14, r24	; 0x0e
    3de6:	97 87       	std	Z+15, r25	; 0x0f
    3de8:	a0 8b       	std	Z+16, r26	; 0x10
    3dea:	b1 8b       	std	Z+17, r27	; 0x11
    3dec:	8b 81       	ldd	r24, Y+3	; 0x03
    3dee:	9c 81       	ldd	r25, Y+4	; 0x04
    3df0:	fc 01       	movw	r30, r24
    3df2:	26 85       	ldd	r18, Z+14	; 0x0e
    3df4:	37 85       	ldd	r19, Z+15	; 0x0f
    3df6:	40 89       	ldd	r20, Z+16	; 0x10
    3df8:	51 89       	ldd	r21, Z+17	; 0x11
    3dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dfe:	af 81       	ldd	r26, Y+7	; 0x07
    3e00:	b8 85       	ldd	r27, Y+8	; 0x08
    3e02:	82 0f       	add	r24, r18
    3e04:	93 1f       	adc	r25, r19
    3e06:	a4 1f       	adc	r26, r20
    3e08:	b5 1f       	adc	r27, r21
    3e0a:	ed 80       	ldd	r14, Y+5	; 0x05
    3e0c:	fe 80       	ldd	r15, Y+6	; 0x06
    3e0e:	0f 81       	ldd	r16, Y+7	; 0x07
    3e10:	18 85       	ldd	r17, Y+8	; 0x08
    3e12:	2d 81       	ldd	r18, Y+5	; 0x05
    3e14:	3e 81       	ldd	r19, Y+6	; 0x06
    3e16:	4f 81       	ldd	r20, Y+7	; 0x07
    3e18:	58 85       	ldd	r21, Y+8	; 0x08
    3e1a:	eb 81       	ldd	r30, Y+3	; 0x03
    3e1c:	fc 81       	ldd	r31, Y+4	; 0x04
    3e1e:	67 01       	movw	r12, r14
    3e20:	78 01       	movw	r14, r16
    3e22:	89 01       	movw	r16, r18
    3e24:	9a 01       	movw	r18, r20
    3e26:	ac 01       	movw	r20, r24
    3e28:	bd 01       	movw	r22, r26
    3e2a:	cf 01       	movw	r24, r30
    3e2c:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <prvInsertTimerInActiveList>
    3e30:	06 c0       	rjmp	.+12     	; 0x3e3e <prvProcessReceivedCommands+0x1dc>
    3e32:	8b 81       	ldd	r24, Y+3	; 0x03
    3e34:	9c 81       	ldd	r25, Y+4	; 0x04
    3e36:	0e 94 db 07 	call	0xfb6	; 0xfb6 <vPortFree>
    3e3a:	01 c0       	rjmp	.+2      	; 0x3e3e <prvProcessReceivedCommands+0x1dc>
    3e3c:	00 00       	nop
    3e3e:	80 91 b4 2c 	lds	r24, 0x2CB4	; 0x802cb4 <xTimerQueue>
    3e42:	90 91 b5 2c 	lds	r25, 0x2CB5	; 0x802cb5 <xTimerQueue+0x1>
    3e46:	be 01       	movw	r22, r28
    3e48:	66 5f       	subi	r22, 0xF6	; 246
    3e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	a9 01       	movw	r20, r18
    3e52:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <xQueueReceive>
    3e56:	88 23       	and	r24, r24
    3e58:	09 f0       	breq	.+2      	; 0x3e5c <prvProcessReceivedCommands+0x1fa>
    3e5a:	11 cf       	rjmp	.-478    	; 0x3c7e <prvProcessReceivedCommands+0x1c>
    3e5c:	00 00       	nop
    3e5e:	65 96       	adiw	r28, 0x15	; 21
    3e60:	cd bf       	out	0x3d, r28	; 61
    3e62:	de bf       	out	0x3e, r29	; 62
    3e64:	df 91       	pop	r29
    3e66:	cf 91       	pop	r28
    3e68:	1f 91       	pop	r17
    3e6a:	0f 91       	pop	r16
    3e6c:	ff 90       	pop	r15
    3e6e:	ef 90       	pop	r14
    3e70:	df 90       	pop	r13
    3e72:	cf 90       	pop	r12
    3e74:	08 95       	ret

00003e76 <prvSwitchTimerLists>:
    3e76:	cf 92       	push	r12
    3e78:	df 92       	push	r13
    3e7a:	ef 92       	push	r14
    3e7c:	ff 92       	push	r15
    3e7e:	0f 93       	push	r16
    3e80:	1f 93       	push	r17
    3e82:	cf 93       	push	r28
    3e84:	df 93       	push	r29
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
    3e8a:	2d 97       	sbiw	r28, 0x0d	; 13
    3e8c:	cd bf       	out	0x3d, r28	; 61
    3e8e:	de bf       	out	0x3e, r29	; 62
    3e90:	82 c0       	rjmp	.+260    	; 0x3f96 <prvSwitchTimerLists+0x120>
    3e92:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <pxCurrentTimerList>
    3e96:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <pxCurrentTimerList+0x1>
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	87 81       	ldd	r24, Z+7	; 0x07
    3e9e:	90 85       	ldd	r25, Z+8	; 0x08
    3ea0:	fc 01       	movw	r30, r24
    3ea2:	80 81       	ld	r24, Z
    3ea4:	91 81       	ldd	r25, Z+1	; 0x01
    3ea6:	a2 81       	ldd	r26, Z+2	; 0x02
    3ea8:	b3 81       	ldd	r27, Z+3	; 0x03
    3eaa:	89 83       	std	Y+1, r24	; 0x01
    3eac:	9a 83       	std	Y+2, r25	; 0x02
    3eae:	ab 83       	std	Y+3, r26	; 0x03
    3eb0:	bc 83       	std	Y+4, r27	; 0x04
    3eb2:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <pxCurrentTimerList>
    3eb6:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <pxCurrentTimerList+0x1>
    3eba:	fc 01       	movw	r30, r24
    3ebc:	87 81       	ldd	r24, Z+7	; 0x07
    3ebe:	90 85       	ldd	r25, Z+8	; 0x08
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	80 85       	ldd	r24, Z+8	; 0x08
    3ec4:	91 85       	ldd	r25, Z+9	; 0x09
    3ec6:	8d 83       	std	Y+5, r24	; 0x05
    3ec8:	9e 83       	std	Y+6, r25	; 0x06
    3eca:	8d 81       	ldd	r24, Y+5	; 0x05
    3ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ece:	02 96       	adiw	r24, 0x02	; 2
    3ed0:	0e 94 02 09 	call	0x1204	; 0x1204 <uxListRemove>
    3ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed8:	fc 01       	movw	r30, r24
    3eda:	25 89       	ldd	r18, Z+21	; 0x15
    3edc:	36 89       	ldd	r19, Z+22	; 0x16
    3ede:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee2:	f9 01       	movw	r30, r18
    3ee4:	19 95       	eicall
    3ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eea:	fc 01       	movw	r30, r24
    3eec:	82 89       	ldd	r24, Z+18	; 0x12
    3eee:	81 30       	cpi	r24, 0x01	; 1
    3ef0:	09 f0       	breq	.+2      	; 0x3ef4 <prvSwitchTimerLists+0x7e>
    3ef2:	51 c0       	rjmp	.+162    	; 0x3f96 <prvSwitchTimerLists+0x120>
    3ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef8:	fc 01       	movw	r30, r24
    3efa:	26 85       	ldd	r18, Z+14	; 0x0e
    3efc:	37 85       	ldd	r19, Z+15	; 0x0f
    3efe:	40 89       	ldd	r20, Z+16	; 0x10
    3f00:	51 89       	ldd	r21, Z+17	; 0x11
    3f02:	89 81       	ldd	r24, Y+1	; 0x01
    3f04:	9a 81       	ldd	r25, Y+2	; 0x02
    3f06:	ab 81       	ldd	r26, Y+3	; 0x03
    3f08:	bc 81       	ldd	r27, Y+4	; 0x04
    3f0a:	82 0f       	add	r24, r18
    3f0c:	93 1f       	adc	r25, r19
    3f0e:	a4 1f       	adc	r26, r20
    3f10:	b5 1f       	adc	r27, r21
    3f12:	8f 83       	std	Y+7, r24	; 0x07
    3f14:	98 87       	std	Y+8, r25	; 0x08
    3f16:	a9 87       	std	Y+9, r26	; 0x09
    3f18:	ba 87       	std	Y+10, r27	; 0x0a
    3f1a:	2f 81       	ldd	r18, Y+7	; 0x07
    3f1c:	38 85       	ldd	r19, Y+8	; 0x08
    3f1e:	49 85       	ldd	r20, Y+9	; 0x09
    3f20:	5a 85       	ldd	r21, Y+10	; 0x0a
    3f22:	89 81       	ldd	r24, Y+1	; 0x01
    3f24:	9a 81       	ldd	r25, Y+2	; 0x02
    3f26:	ab 81       	ldd	r26, Y+3	; 0x03
    3f28:	bc 81       	ldd	r27, Y+4	; 0x04
    3f2a:	82 17       	cp	r24, r18
    3f2c:	93 07       	cpc	r25, r19
    3f2e:	a4 07       	cpc	r26, r20
    3f30:	b5 07       	cpc	r27, r21
    3f32:	f8 f4       	brcc	.+62     	; 0x3f72 <prvSwitchTimerLists+0xfc>
    3f34:	2d 81       	ldd	r18, Y+5	; 0x05
    3f36:	3e 81       	ldd	r19, Y+6	; 0x06
    3f38:	8f 81       	ldd	r24, Y+7	; 0x07
    3f3a:	98 85       	ldd	r25, Y+8	; 0x08
    3f3c:	a9 85       	ldd	r26, Y+9	; 0x09
    3f3e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3f40:	f9 01       	movw	r30, r18
    3f42:	82 83       	std	Z+2, r24	; 0x02
    3f44:	93 83       	std	Z+3, r25	; 0x03
    3f46:	a4 83       	std	Z+4, r26	; 0x04
    3f48:	b5 83       	std	Z+5, r27	; 0x05
    3f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f4e:	2d 81       	ldd	r18, Y+5	; 0x05
    3f50:	3e 81       	ldd	r19, Y+6	; 0x06
    3f52:	fc 01       	movw	r30, r24
    3f54:	22 87       	std	Z+10, r18	; 0x0a
    3f56:	33 87       	std	Z+11, r19	; 0x0b
    3f58:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5c:	9c 01       	movw	r18, r24
    3f5e:	2e 5f       	subi	r18, 0xFE	; 254
    3f60:	3f 4f       	sbci	r19, 0xFF	; 255
    3f62:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <pxCurrentTimerList>
    3f66:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <pxCurrentTimerList+0x1>
    3f6a:	b9 01       	movw	r22, r18
    3f6c:	0e 94 81 08 	call	0x1102	; 0x1102 <vListInsert>
    3f70:	12 c0       	rjmp	.+36     	; 0x3f96 <prvSwitchTimerLists+0x120>
    3f72:	89 81       	ldd	r24, Y+1	; 0x01
    3f74:	9a 81       	ldd	r25, Y+2	; 0x02
    3f76:	ab 81       	ldd	r26, Y+3	; 0x03
    3f78:	bc 81       	ldd	r27, Y+4	; 0x04
    3f7a:	ed 81       	ldd	r30, Y+5	; 0x05
    3f7c:	fe 81       	ldd	r31, Y+6	; 0x06
    3f7e:	c1 2c       	mov	r12, r1
    3f80:	d1 2c       	mov	r13, r1
    3f82:	76 01       	movw	r14, r12
    3f84:	00 e0       	ldi	r16, 0x00	; 0
    3f86:	10 e0       	ldi	r17, 0x00	; 0
    3f88:	9c 01       	movw	r18, r24
    3f8a:	ad 01       	movw	r20, r26
    3f8c:	60 e0       	ldi	r22, 0x00	; 0
    3f8e:	cf 01       	movw	r24, r30
    3f90:	0e 94 8f 1b 	call	0x371e	; 0x371e <xTimerGenericCommand>
    3f94:	8b 87       	std	Y+11, r24	; 0x0b
    3f96:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <pxCurrentTimerList>
    3f9a:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <pxCurrentTimerList+0x1>
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	80 81       	ld	r24, Z
    3fa2:	88 23       	and	r24, r24
    3fa4:	09 f0       	breq	.+2      	; 0x3fa8 <prvSwitchTimerLists+0x132>
    3fa6:	75 cf       	rjmp	.-278    	; 0x3e92 <prvSwitchTimerLists+0x1c>
    3fa8:	80 91 b0 2c 	lds	r24, 0x2CB0	; 0x802cb0 <pxCurrentTimerList>
    3fac:	90 91 b1 2c 	lds	r25, 0x2CB1	; 0x802cb1 <pxCurrentTimerList+0x1>
    3fb0:	8c 87       	std	Y+12, r24	; 0x0c
    3fb2:	9d 87       	std	Y+13, r25	; 0x0d
    3fb4:	80 91 b2 2c 	lds	r24, 0x2CB2	; 0x802cb2 <pxOverflowTimerList>
    3fb8:	90 91 b3 2c 	lds	r25, 0x2CB3	; 0x802cb3 <pxOverflowTimerList+0x1>
    3fbc:	80 93 b0 2c 	sts	0x2CB0, r24	; 0x802cb0 <pxCurrentTimerList>
    3fc0:	90 93 b1 2c 	sts	0x2CB1, r25	; 0x802cb1 <pxCurrentTimerList+0x1>
    3fc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fc6:	9d 85       	ldd	r25, Y+13	; 0x0d
    3fc8:	80 93 b2 2c 	sts	0x2CB2, r24	; 0x802cb2 <pxOverflowTimerList>
    3fcc:	90 93 b3 2c 	sts	0x2CB3, r25	; 0x802cb3 <pxOverflowTimerList+0x1>
    3fd0:	00 00       	nop
    3fd2:	2d 96       	adiw	r28, 0x0d	; 13
    3fd4:	cd bf       	out	0x3d, r28	; 61
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	1f 91       	pop	r17
    3fde:	0f 91       	pop	r16
    3fe0:	ff 90       	pop	r15
    3fe2:	ef 90       	pop	r14
    3fe4:	df 90       	pop	r13
    3fe6:	cf 90       	pop	r12
    3fe8:	08 95       	ret

00003fea <prvCheckForValidListAndQueue>:
    3fea:	cf 93       	push	r28
    3fec:	df 93       	push	r29
    3fee:	cd b7       	in	r28, 0x3d	; 61
    3ff0:	de b7       	in	r29, 0x3e	; 62
    3ff2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3ff6:	ff 93       	push	r31
    3ff8:	f8 7f       	andi	r31, 0xF8	; 248
    3ffa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3ffe:	80 91 b4 2c 	lds	r24, 0x2CB4	; 0x802cb4 <xTimerQueue>
    4002:	90 91 b5 2c 	lds	r25, 0x2CB5	; 0x802cb5 <xTimerQueue+0x1>
    4006:	89 2b       	or	r24, r25
    4008:	e9 f4       	brne	.+58     	; 0x4044 <__stack+0x45>
    400a:	8a e9       	ldi	r24, 0x9A	; 154
    400c:	9c e2       	ldi	r25, 0x2C	; 44
    400e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    4012:	85 ea       	ldi	r24, 0xA5	; 165
    4014:	9c e2       	ldi	r25, 0x2C	; 44
    4016:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <vListInitialise>
    401a:	8a e9       	ldi	r24, 0x9A	; 154
    401c:	9c e2       	ldi	r25, 0x2C	; 44
    401e:	80 93 b0 2c 	sts	0x2CB0, r24	; 0x802cb0 <pxCurrentTimerList>
    4022:	90 93 b1 2c 	sts	0x2CB1, r25	; 0x802cb1 <pxCurrentTimerList+0x1>
    4026:	85 ea       	ldi	r24, 0xA5	; 165
    4028:	9c e2       	ldi	r25, 0x2C	; 44
    402a:	80 93 b2 2c 	sts	0x2CB2, r24	; 0x802cb2 <pxOverflowTimerList>
    402e:	90 93 b3 2c 	sts	0x2CB3, r25	; 0x802cb3 <pxOverflowTimerList+0x1>
    4032:	40 e0       	ldi	r20, 0x00	; 0
    4034:	69 e0       	ldi	r22, 0x09	; 9
    4036:	85 e0       	ldi	r24, 0x05	; 5
    4038:	0e 94 66 0d 	call	0x1acc	; 0x1acc <xQueueGenericCreate>
    403c:	80 93 b4 2c 	sts	0x2CB4, r24	; 0x802cb4 <xTimerQueue>
    4040:	90 93 b5 2c 	sts	0x2CB5, r25	; 0x802cb5 <xTimerQueue+0x1>
    4044:	ff 91       	pop	r31
    4046:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    404a:	00 00       	nop
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	08 95       	ret

00004052 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4052:	0f 93       	push	r16
    4054:	1f 93       	push	r17
    4056:	cf 93       	push	r28
    4058:	df 93       	push	r29
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
    405e:	64 97       	sbiw	r28, 0x14	; 20
    4060:	cd bf       	out	0x3d, r28	; 61
    4062:	de bf       	out	0x3e, r29	; 62
    4064:	8b 87       	std	Y+11, r24	; 0x0b
    4066:	9c 87       	std	Y+12, r25	; 0x0c
    4068:	6d 87       	std	Y+13, r22	; 0x0d
    406a:	7e 87       	std	Y+14, r23	; 0x0e
    406c:	2f 87       	std	Y+15, r18	; 0x0f
    406e:	38 8b       	std	Y+16, r19	; 0x10
    4070:	49 8b       	std	Y+17, r20	; 0x11
    4072:	5a 8b       	std	Y+18, r21	; 0x12
    4074:	0b 8b       	std	Y+19, r16	; 0x13
    4076:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    4078:	8e ef       	ldi	r24, 0xFE	; 254
    407a:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    407c:	8b 85       	ldd	r24, Y+11	; 0x0b
    407e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4080:	8b 83       	std	Y+3, r24	; 0x03
    4082:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    4084:	8d 85       	ldd	r24, Y+13	; 0x0d
    4086:	9e 85       	ldd	r25, Y+14	; 0x0e
    4088:	8d 83       	std	Y+5, r24	; 0x05
    408a:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    408c:	8f 85       	ldd	r24, Y+15	; 0x0f
    408e:	98 89       	ldd	r25, Y+16	; 0x10
    4090:	a9 89       	ldd	r26, Y+17	; 0x11
    4092:	ba 89       	ldd	r27, Y+18	; 0x12
    4094:	8f 83       	std	Y+7, r24	; 0x07
    4096:	98 87       	std	Y+8, r25	; 0x08
    4098:	a9 87       	std	Y+9, r26	; 0x09
    409a:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    409c:	80 91 b4 2c 	lds	r24, 0x2CB4	; 0x802cb4 <xTimerQueue>
    40a0:	90 91 b5 2c 	lds	r25, 0x2CB5	; 0x802cb5 <xTimerQueue+0x1>
    40a4:	4b 89       	ldd	r20, Y+19	; 0x13
    40a6:	5c 89       	ldd	r21, Y+20	; 0x14
    40a8:	be 01       	movw	r22, r28
    40aa:	6e 5f       	subi	r22, 0xFE	; 254
    40ac:	7f 4f       	sbci	r23, 0xFF	; 255
    40ae:	20 e0       	ldi	r18, 0x00	; 0
    40b0:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <xQueueGenericSendFromISR>
    40b4:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    40b6:	89 81       	ldd	r24, Y+1	; 0x01
	}
    40b8:	64 96       	adiw	r28, 0x14	; 20
    40ba:	cd bf       	out	0x3d, r28	; 61
    40bc:	de bf       	out	0x3e, r29	; 62
    40be:	df 91       	pop	r29
    40c0:	cf 91       	pop	r28
    40c2:	1f 91       	pop	r17
    40c4:	0f 91       	pop	r16
    40c6:	08 95       	ret

000040c8 <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    40c8:	cf 93       	push	r28
    40ca:	df 93       	push	r29
    40cc:	cd b7       	in	r28, 0x3d	; 61
    40ce:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    40d0:	80 e5       	ldi	r24, 0x50	; 80
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	20 e5       	ldi	r18, 0x50	; 80
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	f9 01       	movw	r30, r18
    40da:	20 81       	ld	r18, Z
    40dc:	21 60       	ori	r18, 0x01	; 1
    40de:	fc 01       	movw	r30, r24
    40e0:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    40e2:	80 e5       	ldi	r24, 0x50	; 80
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	fc 01       	movw	r30, r24
    40e8:	81 81       	ldd	r24, Z+1	; 0x01
    40ea:	88 2f       	mov	r24, r24
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	81 70       	andi	r24, 0x01	; 1
    40f0:	99 27       	eor	r25, r25
    40f2:	89 2b       	or	r24, r25
    40f4:	b1 f3       	breq	.-20     	; 0x40e2 <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	0e 94 9a 03 	call	0x734	; 0x734 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    40fc:	8e e1       	ldi	r24, 0x1E	; 30
    40fe:	0e 94 63 03 	call	0x6c6	; 0x6c6 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    4102:	60 e0       	ldi	r22, 0x00	; 0
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	0e 94 83 03 	call	0x706	; 0x706 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    410a:	43 e0       	ldi	r20, 0x03	; 3
    410c:	60 e0       	ldi	r22, 0x00	; 0
    410e:	80 e4       	ldi	r24, 0x40	; 64
    4110:	0e 94 2e 03 	call	0x65c	; 0x65c <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    4114:	80 e5       	ldi	r24, 0x50	; 80
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	20 e5       	ldi	r18, 0x50	; 80
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	f9 01       	movw	r30, r18
    411e:	20 81       	ld	r18, Z
    4120:	28 60       	ori	r18, 0x08	; 8
    4122:	fc 01       	movw	r30, r24
    4124:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    4126:	80 e5       	ldi	r24, 0x50	; 80
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	fc 01       	movw	r30, r24
    412c:	81 81       	ldd	r24, Z+1	; 0x01
    412e:	88 2f       	mov	r24, r24
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	88 70       	andi	r24, 0x08	; 8
    4134:	99 27       	eor	r25, r25
    4136:	89 2b       	or	r24, r25
    4138:	b1 f3       	breq	.-20     	; 0x4126 <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    413a:	64 e0       	ldi	r22, 0x04	; 4
    413c:	80 ec       	ldi	r24, 0xC0	; 192
    413e:	0e 94 4b 03 	call	0x696	; 0x696 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    4142:	80 e5       	ldi	r24, 0x50	; 80
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	20 e5       	ldi	r18, 0x50	; 80
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	f9 01       	movw	r30, r18
    414c:	20 81       	ld	r18, Z
    414e:	20 61       	ori	r18, 0x10	; 16
    4150:	fc 01       	movw	r30, r24
    4152:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    4154:	60 e0       	ldi	r22, 0x00	; 0
    4156:	80 e0       	ldi	r24, 0x00	; 0
    4158:	0e 94 83 03 	call	0x706	; 0x706 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    415c:	80 e5       	ldi	r24, 0x50	; 80
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	fc 01       	movw	r30, r24
    4162:	81 81       	ldd	r24, Z+1	; 0x01
    4164:	88 2f       	mov	r24, r24
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	80 71       	andi	r24, 0x10	; 16
    416a:	99 27       	eor	r25, r25
    416c:	89 2b       	or	r24, r25
    416e:	b1 f3       	breq	.-20     	; 0x415c <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    4170:	84 e0       	ldi	r24, 0x04	; 4
    4172:	0e 94 9a 03 	call	0x734	; 0x734 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    4176:	87 e0       	ldi	r24, 0x07	; 7
    4178:	0e 94 63 03 	call	0x6c6	; 0x6c6 <CLKSYS_Disable>
    417c:	00 00       	nop
    417e:	df 91       	pop	r29
    4180:	cf 91       	pop	r28
    4182:	08 95       	ret

00004184 <vApplicationIdleHook>:
long i;
long Timems;


void vApplicationIdleHook( void )
{	
    4184:	cf 93       	push	r28
    4186:	df 93       	push	r29
    4188:	cd b7       	in	r28, 0x3d	; 61
    418a:	de b7       	in	r29, 0x3e	; 62
	
}
    418c:	00 00       	nop
    418e:	df 91       	pop	r29
    4190:	cf 91       	pop	r28
    4192:	08 95       	ret

00004194 <main>:

int main(void)
{
    4194:	ef 92       	push	r14
    4196:	ff 92       	push	r15
    4198:	0f 93       	push	r16
    419a:	cf 93       	push	r28
    419c:	df 93       	push	r29
    419e:	cd b7       	in	r28, 0x3d	; 61
    41a0:	de b7       	in	r29, 0x3e	; 62
	//resetReason_t reason = getResetReason();
	
	vInitClock();
    41a2:	0e 94 64 20 	call	0x40c8	; 0x40c8 <vInitClock>
	vInitDisplay();
    41a6:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <vInitDisplay>
	egPiStates = xEventGroupCreate();
    41aa:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <xEventGroupCreate>
    41ae:	80 93 ed 2c 	sts	0x2CED, r24	; 0x802ced <egPiStates>
    41b2:	90 93 ee 2c 	sts	0x2CEE, r25	; 0x802cee <egPiStates+0x1>
	
	xTaskCreate( vButton, (const char *) "Button", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    41b6:	e1 2c       	mov	r14, r1
    41b8:	f1 2c       	mov	r15, r1
    41ba:	03 e0       	ldi	r16, 0x03	; 3
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	48 ec       	ldi	r20, 0xC8	; 200
    41c2:	50 e0       	ldi	r21, 0x00	; 0
    41c4:	6d e0       	ldi	r22, 0x0D	; 13
    41c6:	70 e2       	ldi	r23, 0x20	; 32
    41c8:	85 e4       	ldi	r24, 0x45	; 69
    41ca:	92 e2       	ldi	r25, 0x22	; 34
    41cc:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
	xTaskCreate( vUI, (const char *) "GUITask", configMINIMAL_STACK_SIZE+100, NULL, 2, NULL);
    41d0:	e1 2c       	mov	r14, r1
    41d2:	f1 2c       	mov	r15, r1
    41d4:	02 e0       	ldi	r16, 0x02	; 2
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	4c e2       	ldi	r20, 0x2C	; 44
    41dc:	51 e0       	ldi	r21, 0x01	; 1
    41de:	64 e1       	ldi	r22, 0x14	; 20
    41e0:	70 e2       	ldi	r23, 0x20	; 32
    41e2:	81 e1       	ldi	r24, 0x11	; 17
    41e4:	91 e2       	ldi	r25, 0x21	; 33
    41e6:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
	xTaskCreate( vCalc, (const char *) "Calc", configMINIMAL_STACK_SIZE+100, NULL, 1, NULL);
    41ea:	e1 2c       	mov	r14, r1
    41ec:	f1 2c       	mov	r15, r1
    41ee:	01 e0       	ldi	r16, 0x01	; 1
    41f0:	20 e0       	ldi	r18, 0x00	; 0
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	4c e2       	ldi	r20, 0x2C	; 44
    41f6:	51 e0       	ldi	r21, 0x01	; 1
    41f8:	6c e1       	ldi	r22, 0x1C	; 28
    41fa:	70 e2       	ldi	r23, 0x20	; 32
    41fc:	8e e8       	ldi	r24, 0x8E	; 142
    41fe:	92 e2       	ldi	r25, 0x22	; 34
    4200:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>

	PORTF.DIRSET = PIN0_bm;						//LED1
    4204:	80 ea       	ldi	r24, 0xA0	; 160
    4206:	96 e0       	ldi	r25, 0x06	; 6
    4208:	21 e0       	ldi	r18, 0x01	; 1
    420a:	fc 01       	movw	r30, r24
    420c:	21 83       	std	Z+1, r18	; 0x01
	
	vTaskStartScheduler();
    420e:	0e 94 a0 14 	call	0x2940	; 0x2940 <vTaskStartScheduler>
	return 0;
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	90 e0       	ldi	r25, 0x00	; 0
}
    4216:	df 91       	pop	r29
    4218:	cf 91       	pop	r28
    421a:	0f 91       	pop	r16
    421c:	ff 90       	pop	r15
    421e:	ef 90       	pop	r14
    4220:	08 95       	ret

00004222 <vUI>:

void vUI(void *pvParameters) {
    4222:	cf 93       	push	r28
    4224:	df 93       	push	r29
    4226:	cd b7       	in	r28, 0x3d	; 61
    4228:	de b7       	in	r29, 0x3e	; 62
    422a:	a9 97       	sbiw	r28, 0x29	; 41
    422c:	cd bf       	out	0x3d, r28	; 61
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	88 a7       	std	Y+40, r24	; 0x28
    4232:	99 a7       	std	Y+41, r25	; 0x29
	char Pi[15] = "";			
    4234:	19 82       	std	Y+1, r1	; 0x01
    4236:	1a 82       	std	Y+2, r1	; 0x02
    4238:	2d e0       	ldi	r18, 0x0D	; 13
    423a:	ce 01       	movw	r24, r28
    423c:	03 96       	adiw	r24, 0x03	; 3
    423e:	fc 01       	movw	r30, r24
    4240:	32 2f       	mov	r19, r18
    4242:	11 92       	st	Z+, r1
    4244:	3a 95       	dec	r19
    4246:	e9 f7       	brne	.-6      	; 0x4242 <vUI+0x20>
	char Iter[15] = "";
    4248:	18 8a       	std	Y+16, r1	; 0x10
    424a:	19 8a       	std	Y+17, r1	; 0x11
    424c:	2d e0       	ldi	r18, 0x0D	; 13
    424e:	ce 01       	movw	r24, r28
    4250:	42 96       	adiw	r24, 0x12	; 18
    4252:	fc 01       	movw	r30, r24
    4254:	32 2f       	mov	r19, r18
    4256:	11 92       	st	Z+, r1
    4258:	3a 95       	dec	r19
    425a:	e9 f7       	brne	.-6      	; 0x4256 <vUI+0x34>
	char sTime[5] = "";
    425c:	1f 8e       	std	Y+31, r1	; 0x1f
    425e:	18 a2       	std	Y+32, r1	; 0x20
    4260:	23 e0       	ldi	r18, 0x03	; 3
    4262:	ce 01       	movw	r24, r28
    4264:	81 96       	adiw	r24, 0x21	; 33
    4266:	fc 01       	movw	r30, r24
    4268:	32 2f       	mov	r19, r18
    426a:	11 92       	st	Z+, r1
    426c:	3a 95       	dec	r19
    426e:	e9 f7       	brne	.-6      	; 0x426a <vUI+0x48>
	TickType_t xLastWakeTime;
	
	for(;;) {
		
		xEventGroupClearBits(egPiStates, FINISHCALC);
    4270:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    4274:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    4278:	48 e0       	ldi	r20, 0x08	; 8
    427a:	50 e0       	ldi	r21, 0x00	; 0
    427c:	60 e0       	ldi	r22, 0x00	; 0
    427e:	70 e0       	ldi	r23, 0x00	; 0
    4280:	0e 94 b5 05 	call	0xb6a	; 0xb6a <xEventGroupClearBits>
		if (dPi4 != 1) {
    4284:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <dPi4>
    4288:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <dPi4+0x1>
    428c:	a0 91 eb 2c 	lds	r26, 0x2CEB	; 0x802ceb <dPi4+0x2>
    4290:	b0 91 ec 2c 	lds	r27, 0x2CEC	; 0x802cec <dPi4+0x3>
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	40 e8       	ldi	r20, 0x80	; 128
    429a:	5f e3       	ldi	r21, 0x3F	; 63
    429c:	bc 01       	movw	r22, r24
    429e:	cd 01       	movw	r24, r26
    42a0:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <__cmpsf2>
    42a4:	88 23       	and	r24, r24
    42a6:	61 f1       	breq	.+88     	; 0x4300 <vUI+0xde>
			sprintf(Pi, "%f", 4*dPi4);	
    42a8:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <dPi4>
    42ac:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <dPi4+0x1>
    42b0:	a0 91 eb 2c 	lds	r26, 0x2CEB	; 0x802ceb <dPi4+0x2>
    42b4:	b0 91 ec 2c 	lds	r27, 0x2CEC	; 0x802cec <dPi4+0x3>
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	40 e8       	ldi	r20, 0x80	; 128
    42be:	50 e4       	ldi	r21, 0x40	; 64
    42c0:	bc 01       	movw	r22, r24
    42c2:	cd 01       	movw	r24, r26
    42c4:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <__mulsf3>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	2b 2f       	mov	r18, r27
    42ce:	2f 93       	push	r18
    42d0:	2a 2f       	mov	r18, r26
    42d2:	2f 93       	push	r18
    42d4:	29 2f       	mov	r18, r25
    42d6:	2f 93       	push	r18
    42d8:	8f 93       	push	r24
    42da:	81 e2       	ldi	r24, 0x21	; 33
    42dc:	90 e2       	ldi	r25, 0x20	; 32
    42de:	89 2f       	mov	r24, r25
    42e0:	8f 93       	push	r24
    42e2:	81 e2       	ldi	r24, 0x21	; 33
    42e4:	90 e2       	ldi	r25, 0x20	; 32
    42e6:	8f 93       	push	r24
    42e8:	ce 01       	movw	r24, r28
    42ea:	01 96       	adiw	r24, 0x01	; 1
    42ec:	9f 93       	push	r25
    42ee:	8f 93       	push	r24
    42f0:	0e 94 81 34 	call	0x6902	; 0x6902 <sprintf>
    42f4:	8d b7       	in	r24, 0x3d	; 61
    42f6:	9e b7       	in	r25, 0x3e	; 62
    42f8:	08 96       	adiw	r24, 0x08	; 8
    42fa:	cd bf       	out	0x3d, r28	; 61
    42fc:	de bf       	out	0x3e, r29	; 62
    42fe:	0a c0       	rjmp	.+20     	; 0x4314 <vUI+0xf2>
		}
		else {
			sprintf(Pi, "press start");
    4300:	2c e0       	ldi	r18, 0x0C	; 12
    4302:	e4 e2       	ldi	r30, 0x24	; 36
    4304:	f0 e2       	ldi	r31, 0x20	; 32
    4306:	ce 01       	movw	r24, r28
    4308:	01 96       	adiw	r24, 0x01	; 1
    430a:	dc 01       	movw	r26, r24
    430c:	01 90       	ld	r0, Z+
    430e:	0d 92       	st	X+, r0
    4310:	2a 95       	dec	r18
    4312:	e1 f7       	brne	.-8      	; 0x430c <vUI+0xea>
		}
		sprintf(Iter, "%ld", i);
    4314:	80 91 ef 2c 	lds	r24, 0x2CEF	; 0x802cef <i>
    4318:	90 91 f0 2c 	lds	r25, 0x2CF0	; 0x802cf0 <i+0x1>
    431c:	a0 91 f1 2c 	lds	r26, 0x2CF1	; 0x802cf1 <i+0x2>
    4320:	b0 91 f2 2c 	lds	r27, 0x2CF2	; 0x802cf2 <i+0x3>
    4324:	2b 2f       	mov	r18, r27
    4326:	2f 93       	push	r18
    4328:	2a 2f       	mov	r18, r26
    432a:	2f 93       	push	r18
    432c:	29 2f       	mov	r18, r25
    432e:	2f 93       	push	r18
    4330:	8f 93       	push	r24
    4332:	80 e3       	ldi	r24, 0x30	; 48
    4334:	90 e2       	ldi	r25, 0x20	; 32
    4336:	89 2f       	mov	r24, r25
    4338:	8f 93       	push	r24
    433a:	80 e3       	ldi	r24, 0x30	; 48
    433c:	90 e2       	ldi	r25, 0x20	; 32
    433e:	8f 93       	push	r24
    4340:	ce 01       	movw	r24, r28
    4342:	40 96       	adiw	r24, 0x10	; 16
    4344:	29 2f       	mov	r18, r25
    4346:	2f 93       	push	r18
    4348:	8f 93       	push	r24
    434a:	0e 94 81 34 	call	0x6902	; 0x6902 <sprintf>
    434e:	ed b7       	in	r30, 0x3d	; 61
    4350:	fe b7       	in	r31, 0x3e	; 62
    4352:	38 96       	adiw	r30, 0x08	; 8
    4354:	cd bf       	out	0x3d, r28	; 61
    4356:	de bf       	out	0x3e, r29	; 62
		sprintf(sTime, "%ld", Timems);
    4358:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <Timems>
    435c:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <Timems+0x1>
    4360:	a0 91 f5 2c 	lds	r26, 0x2CF5	; 0x802cf5 <Timems+0x2>
    4364:	b0 91 f6 2c 	lds	r27, 0x2CF6	; 0x802cf6 <Timems+0x3>
    4368:	2b 2f       	mov	r18, r27
    436a:	2f 93       	push	r18
    436c:	2a 2f       	mov	r18, r26
    436e:	2f 93       	push	r18
    4370:	29 2f       	mov	r18, r25
    4372:	2f 93       	push	r18
    4374:	8f 93       	push	r24
    4376:	80 e3       	ldi	r24, 0x30	; 48
    4378:	90 e2       	ldi	r25, 0x20	; 32
    437a:	89 2f       	mov	r24, r25
    437c:	8f 93       	push	r24
    437e:	80 e3       	ldi	r24, 0x30	; 48
    4380:	90 e2       	ldi	r25, 0x20	; 32
    4382:	8f 93       	push	r24
    4384:	ce 01       	movw	r24, r28
    4386:	4f 96       	adiw	r24, 0x1f	; 31
    4388:	29 2f       	mov	r18, r25
    438a:	2f 93       	push	r18
    438c:	8f 93       	push	r24
    438e:	0e 94 81 34 	call	0x6902	; 0x6902 <sprintf>
    4392:	8d b7       	in	r24, 0x3d	; 61
    4394:	9e b7       	in	r25, 0x3e	; 62
    4396:	08 96       	adiw	r24, 0x08	; 8
    4398:	cd bf       	out	0x3d, r28	; 61
    439a:	de bf       	out	0x3e, r29	; 62
		vDisplayClear();
    439c:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <vDisplayClear>
		vDisplayWriteStringAtPos(0,0,"PI Calculator");
    43a0:	84 e3       	ldi	r24, 0x34	; 52
    43a2:	90 e2       	ldi	r25, 0x20	; 32
    43a4:	89 2f       	mov	r24, r25
    43a6:	8f 93       	push	r24
    43a8:	84 e3       	ldi	r24, 0x34	; 52
    43aa:	90 e2       	ldi	r25, 0x20	; 32
    43ac:	8f 93       	push	r24
    43ae:	1f 92       	push	r1
    43b0:	1f 92       	push	r1
    43b2:	1f 92       	push	r1
    43b4:	1f 92       	push	r1
    43b6:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <vDisplayWriteStringAtPos>
    43ba:	0f 90       	pop	r0
    43bc:	0f 90       	pop	r0
    43be:	0f 90       	pop	r0
    43c0:	0f 90       	pop	r0
    43c2:	0f 90       	pop	r0
    43c4:	0f 90       	pop	r0
		vDisplayWriteStringAtPos(1,0,"%s", Iter);
    43c6:	ce 01       	movw	r24, r28
    43c8:	40 96       	adiw	r24, 0x10	; 16
    43ca:	29 2f       	mov	r18, r25
    43cc:	2f 93       	push	r18
    43ce:	8f 93       	push	r24
    43d0:	82 e4       	ldi	r24, 0x42	; 66
    43d2:	90 e2       	ldi	r25, 0x20	; 32
    43d4:	89 2f       	mov	r24, r25
    43d6:	8f 93       	push	r24
    43d8:	82 e4       	ldi	r24, 0x42	; 66
    43da:	90 e2       	ldi	r25, 0x20	; 32
    43dc:	8f 93       	push	r24
    43de:	1f 92       	push	r1
    43e0:	1f 92       	push	r1
    43e2:	1f 92       	push	r1
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	8f 93       	push	r24
    43e8:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <vDisplayWriteStringAtPos>
    43ec:	ed b7       	in	r30, 0x3d	; 61
    43ee:	fe b7       	in	r31, 0x3e	; 62
    43f0:	38 96       	adiw	r30, 0x08	; 8
    43f2:	cd bf       	out	0x3d, r28	; 61
    43f4:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(2,0,"Pi: %s", Pi);
    43f6:	ce 01       	movw	r24, r28
    43f8:	01 96       	adiw	r24, 0x01	; 1
    43fa:	9f 93       	push	r25
    43fc:	8f 93       	push	r24
    43fe:	85 e4       	ldi	r24, 0x45	; 69
    4400:	90 e2       	ldi	r25, 0x20	; 32
    4402:	89 2f       	mov	r24, r25
    4404:	8f 93       	push	r24
    4406:	85 e4       	ldi	r24, 0x45	; 69
    4408:	90 e2       	ldi	r25, 0x20	; 32
    440a:	8f 93       	push	r24
    440c:	1f 92       	push	r1
    440e:	1f 92       	push	r1
    4410:	1f 92       	push	r1
    4412:	82 e0       	ldi	r24, 0x02	; 2
    4414:	8f 93       	push	r24
    4416:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <vDisplayWriteStringAtPos>
    441a:	8d b7       	in	r24, 0x3d	; 61
    441c:	9e b7       	in	r25, 0x3e	; 62
    441e:	08 96       	adiw	r24, 0x08	; 8
    4420:	cd bf       	out	0x3d, r28	; 61
    4422:	de bf       	out	0x3e, r29	; 62
		vDisplayWriteStringAtPos(3,0,"Zeit: %s ms",sTime);
    4424:	ce 01       	movw	r24, r28
    4426:	4f 96       	adiw	r24, 0x1f	; 31
    4428:	29 2f       	mov	r18, r25
    442a:	2f 93       	push	r18
    442c:	8f 93       	push	r24
    442e:	8c e4       	ldi	r24, 0x4C	; 76
    4430:	90 e2       	ldi	r25, 0x20	; 32
    4432:	89 2f       	mov	r24, r25
    4434:	8f 93       	push	r24
    4436:	8c e4       	ldi	r24, 0x4C	; 76
    4438:	90 e2       	ldi	r25, 0x20	; 32
    443a:	8f 93       	push	r24
    443c:	1f 92       	push	r1
    443e:	1f 92       	push	r1
    4440:	1f 92       	push	r1
    4442:	83 e0       	ldi	r24, 0x03	; 3
    4444:	8f 93       	push	r24
    4446:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <vDisplayWriteStringAtPos>
    444a:	ed b7       	in	r30, 0x3d	; 61
    444c:	fe b7       	in	r31, 0x3e	; 62
    444e:	38 96       	adiw	r30, 0x08	; 8
    4450:	cd bf       	out	0x3d, r28	; 61
    4452:	de bf       	out	0x3e, r29	; 62
		xEventGroupSetBits(egPiStates, FINISHCALC);
    4454:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    4458:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    445c:	48 e0       	ldi	r20, 0x08	; 8
    445e:	50 e0       	ldi	r21, 0x00	; 0
    4460:	60 e0       	ldi	r22, 0x00	; 0
    4462:	70 e0       	ldi	r23, 0x00	; 0
    4464:	0e 94 00 06 	call	0xc00	; 0xc00 <xEventGroupSetBits>
		xLastWakeTime = xTaskGetTickCount();
    4468:	0e 94 90 15 	call	0x2b20	; 0x2b20 <xTaskGetTickCount>
    446c:	dc 01       	movw	r26, r24
    446e:	cb 01       	movw	r24, r22
    4470:	8c a3       	std	Y+36, r24	; 0x24
    4472:	9d a3       	std	Y+37, r25	; 0x25
    4474:	ae a3       	std	Y+38, r26	; 0x26
    4476:	bf a3       	std	Y+39, r27	; 0x27
		
		vTaskDelayUntil(&xLastWakeTime, 500 / portTICK_RATE_MS);
    4478:	ce 01       	movw	r24, r28
    447a:	84 96       	adiw	r24, 0x24	; 36
    447c:	44 ef       	ldi	r20, 0xF4	; 244
    447e:	51 e0       	ldi	r21, 0x01	; 1
    4480:	60 e0       	ldi	r22, 0x00	; 0
    4482:	70 e0       	ldi	r23, 0x00	; 0
    4484:	0e 94 ba 13 	call	0x2774	; 0x2774 <vTaskDelayUntil>
	}
    4488:	f3 ce       	rjmp	.-538    	; 0x4270 <vUI+0x4e>

0000448a <vButton>:
}

void vButton(void *pvParameters) {
    448a:	cf 93       	push	r28
    448c:	df 93       	push	r29
    448e:	1f 92       	push	r1
    4490:	1f 92       	push	r1
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
    4496:	89 83       	std	Y+1, r24	; 0x01
    4498:	9a 83       	std	Y+2, r25	; 0x02
	initButtons();
    449a:	0e 94 cb 01 	call	0x396	; 0x396 <initButtons>
	
	while (1) {
		updateButtons();
    449e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <updateButtons>
		if (getButtonPress(BUTTON1) == SHORT_PRESSED) {
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <getButtonPress>
    44a8:	81 30       	cpi	r24, 0x01	; 1
    44aa:	79 f4       	brne	.+30     	; 0x44ca <vButton+0x40>
			xEventGroupSetBits(egPiStates, STARTCALC);
    44ac:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    44b0:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    44b4:	41 e0       	ldi	r20, 0x01	; 1
    44b6:	50 e0       	ldi	r21, 0x00	; 0
    44b8:	60 e0       	ldi	r22, 0x00	; 0
    44ba:	70 e0       	ldi	r23, 0x00	; 0
    44bc:	0e 94 00 06 	call	0xc00	; 0xc00 <xEventGroupSetBits>
			TCD0.CTRLA = TC_CLKSEL_DIV1_gc ;						// Timer starten
    44c0:	80 e0       	ldi	r24, 0x00	; 0
    44c2:	99 e0       	ldi	r25, 0x09	; 9
    44c4:	21 e0       	ldi	r18, 0x01	; 1
    44c6:	fc 01       	movw	r30, r24
    44c8:	20 83       	st	Z, r18
		}

		if (getButtonPress(BUTTON2) == SHORT_PRESSED) {
    44ca:	81 e0       	ldi	r24, 0x01	; 1
    44cc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <getButtonPress>
    44d0:	81 30       	cpi	r24, 0x01	; 1
    44d2:	71 f4       	brne	.+28     	; 0x44f0 <vButton+0x66>
			xEventGroupClearBits(egPiStates, STARTCALC);
    44d4:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    44d8:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    44dc:	41 e0       	ldi	r20, 0x01	; 1
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	60 e0       	ldi	r22, 0x00	; 0
    44e2:	70 e0       	ldi	r23, 0x00	; 0
    44e4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <xEventGroupClearBits>
			TCD0.CTRLA = TC_CLKSEL_OFF_gc ;							// Timer stoppen
    44e8:	80 e0       	ldi	r24, 0x00	; 0
    44ea:	99 e0       	ldi	r25, 0x09	; 9
    44ec:	fc 01       	movw	r30, r24
    44ee:	10 82       	st	Z, r1
		}
		
		if (getButtonPress(BUTTON3) == SHORT_PRESSED) {
    44f0:	82 e0       	ldi	r24, 0x02	; 2
    44f2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <getButtonPress>
    44f6:	81 30       	cpi	r24, 0x01	; 1
    44f8:	51 f4       	brne	.+20     	; 0x450e <vButton+0x84>
			xEventGroupSetBits(egPiStates, RESETCALC);
    44fa:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    44fe:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    4502:	44 e0       	ldi	r20, 0x04	; 4
    4504:	50 e0       	ldi	r21, 0x00	; 0
    4506:	60 e0       	ldi	r22, 0x00	; 0
    4508:	70 e0       	ldi	r23, 0x00	; 0
    450a:	0e 94 00 06 	call	0xc00	; 0xc00 <xEventGroupSetBits>
		}		


		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    450e:	6a e0       	ldi	r22, 0x0A	; 10
    4510:	70 e0       	ldi	r23, 0x00	; 0
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	0e 94 72 14 	call	0x28e4	; 0x28e4 <vTaskDelay>
	}
    451a:	c1 cf       	rjmp	.-126    	; 0x449e <vButton+0x14>

0000451c <vCalc>:
}

void vCalc(void *pvParameters) {
    451c:	cf 92       	push	r12
    451e:	df 92       	push	r13
    4520:	ef 92       	push	r14
    4522:	ff 92       	push	r15
    4524:	cf 93       	push	r28
    4526:	df 93       	push	r29
    4528:	00 d0       	rcall	.+0      	; 0x452a <vCalc+0xe>
    452a:	1f 92       	push	r1
    452c:	cd b7       	in	r28, 0x3d	; 61
    452e:	de b7       	in	r29, 0x3e	; 62
    4530:	8b 83       	std	Y+3, r24	; 0x03
    4532:	9c 83       	std	Y+4, r25	; 0x04
	dPi4 = 1;
    4534:	80 e0       	ldi	r24, 0x00	; 0
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	a0 e8       	ldi	r26, 0x80	; 128
    453a:	bf e3       	ldi	r27, 0x3F	; 63
    453c:	80 93 e9 2c 	sts	0x2CE9, r24	; 0x802ce9 <dPi4>
    4540:	90 93 ea 2c 	sts	0x2CEA, r25	; 0x802cea <dPi4+0x1>
    4544:	a0 93 eb 2c 	sts	0x2CEB, r26	; 0x802ceb <dPi4+0x2>
    4548:	b0 93 ec 2c 	sts	0x2CEC, r27	; 0x802cec <dPi4+0x3>
	uint16_t calcstate = 0x0000;
    454c:	19 82       	std	Y+1, r1	; 0x01
    454e:	1a 82       	std	Y+2, r1	; 0x02
	i = 0;
    4550:	10 92 ef 2c 	sts	0x2CEF, r1	; 0x802cef <i>
    4554:	10 92 f0 2c 	sts	0x2CF0, r1	; 0x802cf0 <i+0x1>
    4558:	10 92 f1 2c 	sts	0x2CF1, r1	; 0x802cf1 <i+0x2>
    455c:	10 92 f2 2c 	sts	0x2CF2, r1	; 0x802cf2 <i+0x3>
	
	
	TCD0.CTRLA = TC_CLKSEL_OFF_gc ;
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	99 e0       	ldi	r25, 0x09	; 9
    4564:	fc 01       	movw	r30, r24
    4566:	10 82       	st	Z, r1
	TCD0.CTRLB = 0x00;
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	99 e0       	ldi	r25, 0x09	; 9
    456c:	fc 01       	movw	r30, r24
    456e:	11 82       	std	Z+1, r1	; 0x01
	TCD0.INTCTRLA = 0x03;
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	99 e0       	ldi	r25, 0x09	; 9
    4574:	23 e0       	ldi	r18, 0x03	; 3
    4576:	fc 01       	movw	r30, r24
    4578:	26 83       	std	Z+6, r18	; 0x06
	TCD0.PER = 32000-1;							// Zeit mit KO kontrollieren, allenfalls hier korrigieren
    457a:	80 e0       	ldi	r24, 0x00	; 0
    457c:	99 e0       	ldi	r25, 0x09	; 9
    457e:	2f ef       	ldi	r18, 0xFF	; 255
    4580:	3c e7       	ldi	r19, 0x7C	; 124
    4582:	fc 01       	movw	r30, r24
    4584:	26 a3       	std	Z+38, r18	; 0x26
    4586:	37 a3       	std	Z+39, r19	; 0x27
	
	for(;;) {
		
		calcstate = xEventGroupGetBits(egPiStates);
    4588:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    458c:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    4590:	40 e0       	ldi	r20, 0x00	; 0
    4592:	50 e0       	ldi	r21, 0x00	; 0
    4594:	ba 01       	movw	r22, r20
    4596:	0e 94 b5 05 	call	0xb6a	; 0xb6a <xEventGroupClearBits>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	89 83       	std	Y+1, r24	; 0x01
    45a0:	9a 83       	std	Y+2, r25	; 0x02
		
		if (calcstate & FINISHCALC) {
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	9a 81       	ldd	r25, Y+2	; 0x02
    45a6:	88 70       	andi	r24, 0x08	; 8
    45a8:	99 27       	eor	r25, r25
    45aa:	89 2b       	or	r24, r25
    45ac:	09 f4       	brne	.+2      	; 0x45b0 <vCalc+0x94>
    45ae:	98 c0       	rjmp	.+304    	; 0x46e0 <vCalc+0x1c4>
			if (calcstate & STARTCALC) {
    45b0:	89 81       	ldd	r24, Y+1	; 0x01
    45b2:	9a 81       	ldd	r25, Y+2	; 0x02
    45b4:	81 70       	andi	r24, 0x01	; 1
    45b6:	99 27       	eor	r25, r25
    45b8:	89 2b       	or	r24, r25
    45ba:	09 f4       	brne	.+2      	; 0x45be <vCalc+0xa2>
    45bc:	91 c0       	rjmp	.+290    	; 0x46e0 <vCalc+0x1c4>
				dPi4 = dPi4 - (1.0/(3+4*i)) + (1.0/(5+4*i));
    45be:	c0 90 e9 2c 	lds	r12, 0x2CE9	; 0x802ce9 <dPi4>
    45c2:	d0 90 ea 2c 	lds	r13, 0x2CEA	; 0x802cea <dPi4+0x1>
    45c6:	e0 90 eb 2c 	lds	r14, 0x2CEB	; 0x802ceb <dPi4+0x2>
    45ca:	f0 90 ec 2c 	lds	r15, 0x2CEC	; 0x802cec <dPi4+0x3>
    45ce:	80 91 ef 2c 	lds	r24, 0x2CEF	; 0x802cef <i>
    45d2:	90 91 f0 2c 	lds	r25, 0x2CF0	; 0x802cf0 <i+0x1>
    45d6:	a0 91 f1 2c 	lds	r26, 0x2CF1	; 0x802cf1 <i+0x2>
    45da:	b0 91 f2 2c 	lds	r27, 0x2CF2	; 0x802cf2 <i+0x3>
    45de:	88 0f       	add	r24, r24
    45e0:	99 1f       	adc	r25, r25
    45e2:	aa 1f       	adc	r26, r26
    45e4:	bb 1f       	adc	r27, r27
    45e6:	88 0f       	add	r24, r24
    45e8:	99 1f       	adc	r25, r25
    45ea:	aa 1f       	adc	r26, r26
    45ec:	bb 1f       	adc	r27, r27
    45ee:	03 96       	adiw	r24, 0x03	; 3
    45f0:	a1 1d       	adc	r26, r1
    45f2:	b1 1d       	adc	r27, r1
    45f4:	bc 01       	movw	r22, r24
    45f6:	cd 01       	movw	r24, r26
    45f8:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <__floatsisf>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	9c 01       	movw	r18, r24
    4602:	ad 01       	movw	r20, r26
    4604:	60 e0       	ldi	r22, 0x00	; 0
    4606:	70 e0       	ldi	r23, 0x00	; 0
    4608:	80 e8       	ldi	r24, 0x80	; 128
    460a:	9f e3       	ldi	r25, 0x3F	; 63
    460c:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <__divsf3>
    4610:	dc 01       	movw	r26, r24
    4612:	cb 01       	movw	r24, r22
    4614:	9c 01       	movw	r18, r24
    4616:	ad 01       	movw	r20, r26
    4618:	c7 01       	movw	r24, r14
    461a:	b6 01       	movw	r22, r12
    461c:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__subsf3>
    4620:	dc 01       	movw	r26, r24
    4622:	cb 01       	movw	r24, r22
    4624:	6c 01       	movw	r12, r24
    4626:	7d 01       	movw	r14, r26
    4628:	80 91 ef 2c 	lds	r24, 0x2CEF	; 0x802cef <i>
    462c:	90 91 f0 2c 	lds	r25, 0x2CF0	; 0x802cf0 <i+0x1>
    4630:	a0 91 f1 2c 	lds	r26, 0x2CF1	; 0x802cf1 <i+0x2>
    4634:	b0 91 f2 2c 	lds	r27, 0x2CF2	; 0x802cf2 <i+0x3>
    4638:	88 0f       	add	r24, r24
    463a:	99 1f       	adc	r25, r25
    463c:	aa 1f       	adc	r26, r26
    463e:	bb 1f       	adc	r27, r27
    4640:	88 0f       	add	r24, r24
    4642:	99 1f       	adc	r25, r25
    4644:	aa 1f       	adc	r26, r26
    4646:	bb 1f       	adc	r27, r27
    4648:	05 96       	adiw	r24, 0x05	; 5
    464a:	a1 1d       	adc	r26, r1
    464c:	b1 1d       	adc	r27, r1
    464e:	bc 01       	movw	r22, r24
    4650:	cd 01       	movw	r24, r26
    4652:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <__floatsisf>
    4656:	dc 01       	movw	r26, r24
    4658:	cb 01       	movw	r24, r22
    465a:	9c 01       	movw	r18, r24
    465c:	ad 01       	movw	r20, r26
    465e:	60 e0       	ldi	r22, 0x00	; 0
    4660:	70 e0       	ldi	r23, 0x00	; 0
    4662:	80 e8       	ldi	r24, 0x80	; 128
    4664:	9f e3       	ldi	r25, 0x3F	; 63
    4666:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <__divsf3>
    466a:	dc 01       	movw	r26, r24
    466c:	cb 01       	movw	r24, r22
    466e:	9c 01       	movw	r18, r24
    4670:	ad 01       	movw	r20, r26
    4672:	c7 01       	movw	r24, r14
    4674:	b6 01       	movw	r22, r12
    4676:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__addsf3>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	80 93 e9 2c 	sts	0x2CE9, r24	; 0x802ce9 <dPi4>
    4682:	90 93 ea 2c 	sts	0x2CEA, r25	; 0x802cea <dPi4+0x1>
    4686:	a0 93 eb 2c 	sts	0x2CEB, r26	; 0x802ceb <dPi4+0x2>
    468a:	b0 93 ec 2c 	sts	0x2CEC, r27	; 0x802cec <dPi4+0x3>
				i++;
    468e:	80 91 ef 2c 	lds	r24, 0x2CEF	; 0x802cef <i>
    4692:	90 91 f0 2c 	lds	r25, 0x2CF0	; 0x802cf0 <i+0x1>
    4696:	a0 91 f1 2c 	lds	r26, 0x2CF1	; 0x802cf1 <i+0x2>
    469a:	b0 91 f2 2c 	lds	r27, 0x2CF2	; 0x802cf2 <i+0x3>
    469e:	01 96       	adiw	r24, 0x01	; 1
    46a0:	a1 1d       	adc	r26, r1
    46a2:	b1 1d       	adc	r27, r1
    46a4:	80 93 ef 2c 	sts	0x2CEF, r24	; 0x802cef <i>
    46a8:	90 93 f0 2c 	sts	0x2CF0, r25	; 0x802cf0 <i+0x1>
    46ac:	a0 93 f1 2c 	sts	0x2CF1, r26	; 0x802cf1 <i+0x2>
    46b0:	b0 93 f2 2c 	sts	0x2CF2, r27	; 0x802cf2 <i+0x3>
				if (dPi4 < 0.7854 ) {
    46b4:	80 91 e9 2c 	lds	r24, 0x2CE9	; 0x802ce9 <dPi4>
    46b8:	90 91 ea 2c 	lds	r25, 0x2CEA	; 0x802cea <dPi4+0x1>
    46bc:	a0 91 eb 2c 	lds	r26, 0x2CEB	; 0x802ceb <dPi4+0x2>
    46c0:	b0 91 ec 2c 	lds	r27, 0x2CEC	; 0x802cec <dPi4+0x3>
    46c4:	29 ef       	ldi	r18, 0xF9	; 249
    46c6:	3f e0       	ldi	r19, 0x0F	; 15
    46c8:	49 e4       	ldi	r20, 0x49	; 73
    46ca:	5f e3       	ldi	r21, 0x3F	; 63
    46cc:	bc 01       	movw	r22, r24
    46ce:	cd 01       	movw	r24, r26
    46d0:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <__cmpsf2>
    46d4:	88 23       	and	r24, r24
    46d6:	24 f4       	brge	.+8      	; 0x46e0 <vCalc+0x1c4>
					TCD0.CTRLA = TC_CLKSEL_OFF_gc ;
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	99 e0       	ldi	r25, 0x09	; 9
    46dc:	fc 01       	movw	r30, r24
    46de:	10 82       	st	Z, r1
				}
			}
		}
		if (calcstate & RESETCALC) {
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a 81       	ldd	r25, Y+2	; 0x02
    46e4:	84 70       	andi	r24, 0x04	; 4
    46e6:	99 27       	eor	r25, r25
    46e8:	89 2b       	or	r24, r25
    46ea:	09 f4       	brne	.+2      	; 0x46ee <vCalc+0x1d2>
    46ec:	4d cf       	rjmp	.-358    	; 0x4588 <vCalc+0x6c>
				dPi4 = 1;
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	a0 e8       	ldi	r26, 0x80	; 128
    46f4:	bf e3       	ldi	r27, 0x3F	; 63
    46f6:	80 93 e9 2c 	sts	0x2CE9, r24	; 0x802ce9 <dPi4>
    46fa:	90 93 ea 2c 	sts	0x2CEA, r25	; 0x802cea <dPi4+0x1>
    46fe:	a0 93 eb 2c 	sts	0x2CEB, r26	; 0x802ceb <dPi4+0x2>
    4702:	b0 93 ec 2c 	sts	0x2CEC, r27	; 0x802cec <dPi4+0x3>
				i = 0;
    4706:	10 92 ef 2c 	sts	0x2CEF, r1	; 0x802cef <i>
    470a:	10 92 f0 2c 	sts	0x2CF0, r1	; 0x802cf0 <i+0x1>
    470e:	10 92 f1 2c 	sts	0x2CF1, r1	; 0x802cf1 <i+0x2>
    4712:	10 92 f2 2c 	sts	0x2CF2, r1	; 0x802cf2 <i+0x3>
				Timems = 0;
    4716:	10 92 f3 2c 	sts	0x2CF3, r1	; 0x802cf3 <Timems>
    471a:	10 92 f4 2c 	sts	0x2CF4, r1	; 0x802cf4 <Timems+0x1>
    471e:	10 92 f5 2c 	sts	0x2CF5, r1	; 0x802cf5 <Timems+0x2>
    4722:	10 92 f6 2c 	sts	0x2CF6, r1	; 0x802cf6 <Timems+0x3>
				xEventGroupClearBits(egPiStates, RESETCALC);
    4726:	80 91 ed 2c 	lds	r24, 0x2CED	; 0x802ced <egPiStates>
    472a:	90 91 ee 2c 	lds	r25, 0x2CEE	; 0x802cee <egPiStates+0x1>
    472e:	44 e0       	ldi	r20, 0x04	; 4
    4730:	50 e0       	ldi	r21, 0x00	; 0
    4732:	60 e0       	ldi	r22, 0x00	; 0
    4734:	70 e0       	ldi	r23, 0x00	; 0
    4736:	0e 94 b5 05 	call	0xb6a	; 0xb6a <xEventGroupClearBits>
		}
	}
    473a:	26 cf       	rjmp	.-436    	; 0x4588 <vCalc+0x6c>

0000473c <__vector_77>:
}
	

ISR(TCD0_OVF_vect)
{
    473c:	1f 92       	push	r1
    473e:	0f 92       	push	r0
    4740:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4744:	0f 92       	push	r0
    4746:	11 24       	eor	r1, r1
    4748:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    474c:	0f 92       	push	r0
    474e:	2f 93       	push	r18
    4750:	8f 93       	push	r24
    4752:	9f 93       	push	r25
    4754:	af 93       	push	r26
    4756:	bf 93       	push	r27
    4758:	ef 93       	push	r30
    475a:	ff 93       	push	r31
    475c:	cf 93       	push	r28
    475e:	df 93       	push	r29
    4760:	cd b7       	in	r28, 0x3d	; 61
    4762:	de b7       	in	r29, 0x3e	; 62
	Timems++;
    4764:	80 91 f3 2c 	lds	r24, 0x2CF3	; 0x802cf3 <Timems>
    4768:	90 91 f4 2c 	lds	r25, 0x2CF4	; 0x802cf4 <Timems+0x1>
    476c:	a0 91 f5 2c 	lds	r26, 0x2CF5	; 0x802cf5 <Timems+0x2>
    4770:	b0 91 f6 2c 	lds	r27, 0x2CF6	; 0x802cf6 <Timems+0x3>
    4774:	01 96       	adiw	r24, 0x01	; 1
    4776:	a1 1d       	adc	r26, r1
    4778:	b1 1d       	adc	r27, r1
    477a:	80 93 f3 2c 	sts	0x2CF3, r24	; 0x802cf3 <Timems>
    477e:	90 93 f4 2c 	sts	0x2CF4, r25	; 0x802cf4 <Timems+0x1>
    4782:	a0 93 f5 2c 	sts	0x2CF5, r26	; 0x802cf5 <Timems+0x2>
    4786:	b0 93 f6 2c 	sts	0x2CF6, r27	; 0x802cf6 <Timems+0x3>
	PORTF.OUTTGL = PIN0_bm;			//LED1
    478a:	80 ea       	ldi	r24, 0xA0	; 160
    478c:	96 e0       	ldi	r25, 0x06	; 6
    478e:	21 e0       	ldi	r18, 0x01	; 1
    4790:	fc 01       	movw	r30, r24
    4792:	27 83       	std	Z+7, r18	; 0x07
    4794:	00 00       	nop
    4796:	df 91       	pop	r29
    4798:	cf 91       	pop	r28
    479a:	ff 91       	pop	r31
    479c:	ef 91       	pop	r30
    479e:	bf 91       	pop	r27
    47a0:	af 91       	pop	r26
    47a2:	9f 91       	pop	r25
    47a4:	8f 91       	pop	r24
    47a6:	2f 91       	pop	r18
    47a8:	0f 90       	pop	r0
    47aa:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    47ae:	0f 90       	pop	r0
    47b0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    47b4:	0f 90       	pop	r0
    47b6:	1f 90       	pop	r1
    47b8:	18 95       	reti

000047ba <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    47ba:	1f 92       	push	r1
    47bc:	0f 92       	push	r0
    47be:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    47c2:	0f 92       	push	r0
    47c4:	11 24       	eor	r1, r1
    47c6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    47ca:	0f 92       	push	r0
    47cc:	2f 93       	push	r18
    47ce:	3f 93       	push	r19
    47d0:	4f 93       	push	r20
    47d2:	5f 93       	push	r21
    47d4:	6f 93       	push	r22
    47d6:	7f 93       	push	r23
    47d8:	8f 93       	push	r24
    47da:	9f 93       	push	r25
    47dc:	af 93       	push	r26
    47de:	bf 93       	push	r27
    47e0:	ef 93       	push	r30
    47e2:	ff 93       	push	r31
    47e4:	cf 93       	push	r28
    47e6:	df 93       	push	r29
    47e8:	1f 92       	push	r1
    47ea:	cd b7       	in	r28, 0x3d	; 61
    47ec:	de b7       	in	r29, 0x3e	; 62
    47ee:	19 82       	std	Y+1, r1	; 0x01
    47f0:	80 91 fb 2c 	lds	r24, 0x2CFB	; 0x802cfb <egDisplayTiming>
    47f4:	90 91 fc 2c 	lds	r25, 0x2CFC	; 0x802cfc <egDisplayTiming+0x1>
    47f8:	9e 01       	movw	r18, r28
    47fa:	2f 5f       	subi	r18, 0xFF	; 255
    47fc:	3f 4f       	sbci	r19, 0xFF	; 255
    47fe:	41 e0       	ldi	r20, 0x01	; 1
    4800:	50 e0       	ldi	r21, 0x00	; 0
    4802:	60 e0       	ldi	r22, 0x00	; 0
    4804:	70 e0       	ldi	r23, 0x00	; 0
    4806:	0e 94 6d 07 	call	0xeda	; 0xeda <xEventGroupSetBitsFromISR>
    480a:	60 e0       	ldi	r22, 0x00	; 0
    480c:	80 e0       	ldi	r24, 0x00	; 0
    480e:	9b e0       	ldi	r25, 0x0B	; 11
    4810:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	9b e0       	ldi	r25, 0x0B	; 11
    4818:	fc 01       	movw	r30, r24
    481a:	16 82       	std	Z+6, r1	; 0x06
    481c:	00 00       	nop
    481e:	0f 90       	pop	r0
    4820:	df 91       	pop	r29
    4822:	cf 91       	pop	r28
    4824:	ff 91       	pop	r31
    4826:	ef 91       	pop	r30
    4828:	bf 91       	pop	r27
    482a:	af 91       	pop	r26
    482c:	9f 91       	pop	r25
    482e:	8f 91       	pop	r24
    4830:	7f 91       	pop	r23
    4832:	6f 91       	pop	r22
    4834:	5f 91       	pop	r21
    4836:	4f 91       	pop	r20
    4838:	3f 91       	pop	r19
    483a:	2f 91       	pop	r18
    483c:	0f 90       	pop	r0
    483e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4842:	0f 90       	pop	r0
    4844:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4848:	0f 90       	pop	r0
    484a:	1f 90       	pop	r1
    484c:	18 95       	reti

0000484e <delayUS>:
    484e:	cf 92       	push	r12
    4850:	df 92       	push	r13
    4852:	ef 92       	push	r14
    4854:	ff 92       	push	r15
    4856:	0f 93       	push	r16
    4858:	cf 93       	push	r28
    485a:	df 93       	push	r29
    485c:	00 d0       	rcall	.+0      	; 0x485e <delayUS+0x10>
    485e:	1f 92       	push	r1
    4860:	cd b7       	in	r28, 0x3d	; 61
    4862:	de b7       	in	r29, 0x3e	; 62
    4864:	69 83       	std	Y+1, r22	; 0x01
    4866:	7a 83       	std	Y+2, r23	; 0x02
    4868:	8b 83       	std	Y+3, r24	; 0x03
    486a:	9c 83       	std	Y+4, r25	; 0x04
    486c:	89 81       	ldd	r24, Y+1	; 0x01
    486e:	9a 81       	ldd	r25, Y+2	; 0x02
    4870:	ab 81       	ldd	r26, Y+3	; 0x03
    4872:	bc 81       	ldd	r27, Y+4	; 0x04
    4874:	02 97       	sbiw	r24, 0x02	; 2
    4876:	a1 05       	cpc	r26, r1
    4878:	b1 05       	cpc	r27, r1
    487a:	40 f4       	brcc	.+16     	; 0x488c <delayUS+0x3e>
    487c:	82 e0       	ldi	r24, 0x02	; 2
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	a0 e0       	ldi	r26, 0x00	; 0
    4882:	b0 e0       	ldi	r27, 0x00	; 0
    4884:	89 83       	std	Y+1, r24	; 0x01
    4886:	9a 83       	std	Y+2, r25	; 0x02
    4888:	ab 83       	std	Y+3, r26	; 0x03
    488a:	bc 83       	std	Y+4, r27	; 0x04
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	9b e0       	ldi	r25, 0x0B	; 11
    4890:	21 e0       	ldi	r18, 0x01	; 1
    4892:	fc 01       	movw	r30, r24
    4894:	26 83       	std	Z+6, r18	; 0x06
    4896:	80 e0       	ldi	r24, 0x00	; 0
    4898:	9b e0       	ldi	r25, 0x0B	; 11
    489a:	fc 01       	movw	r30, r24
    489c:	10 a2       	std	Z+32, r1	; 0x20
    489e:	11 a2       	std	Z+33, r1	; 0x21
    48a0:	60 e0       	ldi	r22, 0x00	; 0
    48a2:	80 e0       	ldi	r24, 0x00	; 0
    48a4:	9b e0       	ldi	r25, 0x0B	; 11
    48a6:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <TC0_ConfigWGM>
    48aa:	89 81       	ldd	r24, Y+1	; 0x01
    48ac:	9a 81       	ldd	r25, Y+2	; 0x02
    48ae:	ab 81       	ldd	r26, Y+3	; 0x03
    48b0:	bc 81       	ldd	r27, Y+4	; 0x04
    48b2:	8e 3f       	cpi	r24, 0xFE	; 254
    48b4:	9f 4f       	sbci	r25, 0xFF	; 255
    48b6:	a1 05       	cpc	r26, r1
    48b8:	b1 05       	cpc	r27, r1
    48ba:	98 f4       	brcc	.+38     	; 0x48e2 <delayUS+0x94>
    48bc:	20 e0       	ldi	r18, 0x00	; 0
    48be:	3b e0       	ldi	r19, 0x0B	; 11
    48c0:	89 81       	ldd	r24, Y+1	; 0x01
    48c2:	9a 81       	ldd	r25, Y+2	; 0x02
    48c4:	ab 81       	ldd	r26, Y+3	; 0x03
    48c6:	bc 81       	ldd	r27, Y+4	; 0x04
    48c8:	b6 95       	lsr	r27
    48ca:	a7 95       	ror	r26
    48cc:	97 95       	ror	r25
    48ce:	87 95       	ror	r24
    48d0:	f9 01       	movw	r30, r18
    48d2:	86 a3       	std	Z+38, r24	; 0x26
    48d4:	97 a3       	std	Z+39, r25	; 0x27
    48d6:	65 e0       	ldi	r22, 0x05	; 5
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	9b e0       	ldi	r25, 0x0B	; 11
    48dc:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>
    48e0:	1f c0       	rjmp	.+62     	; 0x4920 <delayUS+0xd2>
    48e2:	89 81       	ldd	r24, Y+1	; 0x01
    48e4:	9a 81       	ldd	r25, Y+2	; 0x02
    48e6:	ab 81       	ldd	r26, Y+3	; 0x03
    48e8:	bc 81       	ldd	r27, Y+4	; 0x04
    48ea:	80 34       	cpi	r24, 0x40	; 64
    48ec:	92 44       	sbci	r25, 0x42	; 66
    48ee:	af 40       	sbci	r26, 0x0F	; 15
    48f0:	b1 05       	cpc	r27, r1
    48f2:	b0 f4       	brcc	.+44     	; 0x4920 <delayUS+0xd2>
    48f4:	20 e0       	ldi	r18, 0x00	; 0
    48f6:	3b e0       	ldi	r19, 0x0B	; 11
    48f8:	89 81       	ldd	r24, Y+1	; 0x01
    48fa:	9a 81       	ldd	r25, Y+2	; 0x02
    48fc:	ab 81       	ldd	r26, Y+3	; 0x03
    48fe:	bc 81       	ldd	r27, Y+4	; 0x04
    4900:	68 94       	set
    4902:	14 f8       	bld	r1, 4
    4904:	b6 95       	lsr	r27
    4906:	a7 95       	ror	r26
    4908:	97 95       	ror	r25
    490a:	87 95       	ror	r24
    490c:	16 94       	lsr	r1
    490e:	d1 f7       	brne	.-12     	; 0x4904 <delayUS+0xb6>
    4910:	f9 01       	movw	r30, r18
    4912:	86 a3       	std	Z+38, r24	; 0x26
    4914:	97 a3       	std	Z+39, r25	; 0x27
    4916:	67 e0       	ldi	r22, 0x07	; 7
    4918:	80 e0       	ldi	r24, 0x00	; 0
    491a:	9b e0       	ldi	r25, 0x0B	; 11
    491c:	0e 94 bc 03 	call	0x778	; 0x778 <TC0_ConfigClockSource>
    4920:	80 91 fb 2c 	lds	r24, 0x2CFB	; 0x802cfb <egDisplayTiming>
    4924:	90 91 fc 2c 	lds	r25, 0x2CFC	; 0x802cfc <egDisplayTiming+0x1>
    4928:	0f 2e       	mov	r0, r31
    492a:	f4 ef       	ldi	r31, 0xF4	; 244
    492c:	cf 2e       	mov	r12, r31
    492e:	dd 24       	eor	r13, r13
    4930:	d3 94       	inc	r13
    4932:	e1 2c       	mov	r14, r1
    4934:	f1 2c       	mov	r15, r1
    4936:	f0 2d       	mov	r31, r0
    4938:	00 e0       	ldi	r16, 0x00	; 0
    493a:	21 e0       	ldi	r18, 0x01	; 1
    493c:	41 e0       	ldi	r20, 0x01	; 1
    493e:	50 e0       	ldi	r21, 0x00	; 0
    4940:	60 e0       	ldi	r22, 0x00	; 0
    4942:	70 e0       	ldi	r23, 0x00	; 0
    4944:	0e 94 7d 04 	call	0x8fa	; 0x8fa <xEventGroupWaitBits>
    4948:	00 00       	nop
    494a:	24 96       	adiw	r28, 0x04	; 4
    494c:	cd bf       	out	0x3d, r28	; 61
    494e:	de bf       	out	0x3e, r29	; 62
    4950:	df 91       	pop	r29
    4952:	cf 91       	pop	r28
    4954:	0f 91       	pop	r16
    4956:	ff 90       	pop	r15
    4958:	ef 90       	pop	r14
    495a:	df 90       	pop	r13
    495c:	cf 90       	pop	r12
    495e:	08 95       	ret

00004960 <setPort>:
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	1f 92       	push	r1
    4966:	cd b7       	in	r28, 0x3d	; 61
    4968:	de b7       	in	r29, 0x3e	; 62
    496a:	89 83       	std	Y+1, r24	; 0x01
    496c:	89 81       	ldd	r24, Y+1	; 0x01
    496e:	8f 70       	andi	r24, 0x0F	; 15
    4970:	89 83       	std	Y+1, r24	; 0x01
    4972:	89 81       	ldd	r24, Y+1	; 0x01
    4974:	82 95       	swap	r24
    4976:	80 7f       	andi	r24, 0xF0	; 240
    4978:	89 83       	std	Y+1, r24	; 0x01
    497a:	80 e0       	ldi	r24, 0x00	; 0
    497c:	96 e0       	ldi	r25, 0x06	; 6
    497e:	20 e0       	ldi	r18, 0x00	; 0
    4980:	36 e0       	ldi	r19, 0x06	; 6
    4982:	f9 01       	movw	r30, r18
    4984:	34 81       	ldd	r19, Z+4	; 0x04
    4986:	29 81       	ldd	r18, Y+1	; 0x01
    4988:	2f 60       	ori	r18, 0x0F	; 15
    498a:	23 23       	and	r18, r19
    498c:	fc 01       	movw	r30, r24
    498e:	24 83       	std	Z+4, r18	; 0x04
    4990:	80 e0       	ldi	r24, 0x00	; 0
    4992:	96 e0       	ldi	r25, 0x06	; 6
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	36 e0       	ldi	r19, 0x06	; 6
    4998:	f9 01       	movw	r30, r18
    499a:	34 81       	ldd	r19, Z+4	; 0x04
    499c:	29 81       	ldd	r18, Y+1	; 0x01
    499e:	23 2b       	or	r18, r19
    49a0:	fc 01       	movw	r30, r24
    49a2:	24 83       	std	Z+4, r18	; 0x04
    49a4:	00 00       	nop
    49a6:	0f 90       	pop	r0
    49a8:	df 91       	pop	r29
    49aa:	cf 91       	pop	r28
    49ac:	08 95       	ret

000049ae <setRS>:
    49ae:	cf 93       	push	r28
    49b0:	df 93       	push	r29
    49b2:	1f 92       	push	r1
    49b4:	cd b7       	in	r28, 0x3d	; 61
    49b6:	de b7       	in	r29, 0x3e	; 62
    49b8:	89 83       	std	Y+1, r24	; 0x01
    49ba:	89 81       	ldd	r24, Y+1	; 0x01
    49bc:	88 23       	and	r24, r24
    49be:	31 f0       	breq	.+12     	; 0x49cc <setRS+0x1e>
    49c0:	80 e6       	ldi	r24, 0x60	; 96
    49c2:	96 e0       	ldi	r25, 0x06	; 6
    49c4:	21 e0       	ldi	r18, 0x01	; 1
    49c6:	fc 01       	movw	r30, r24
    49c8:	25 83       	std	Z+5, r18	; 0x05
    49ca:	05 c0       	rjmp	.+10     	; 0x49d6 <setRS+0x28>
    49cc:	80 e6       	ldi	r24, 0x60	; 96
    49ce:	96 e0       	ldi	r25, 0x06	; 6
    49d0:	21 e0       	ldi	r18, 0x01	; 1
    49d2:	fc 01       	movw	r30, r24
    49d4:	26 83       	std	Z+6, r18	; 0x06
    49d6:	00 00       	nop
    49d8:	0f 90       	pop	r0
    49da:	df 91       	pop	r29
    49dc:	cf 91       	pop	r28
    49de:	08 95       	ret

000049e0 <setRW>:
    49e0:	cf 93       	push	r28
    49e2:	df 93       	push	r29
    49e4:	1f 92       	push	r1
    49e6:	cd b7       	in	r28, 0x3d	; 61
    49e8:	de b7       	in	r29, 0x3e	; 62
    49ea:	89 83       	std	Y+1, r24	; 0x01
    49ec:	89 81       	ldd	r24, Y+1	; 0x01
    49ee:	88 23       	and	r24, r24
    49f0:	31 f0       	breq	.+12     	; 0x49fe <setRW+0x1e>
    49f2:	80 e6       	ldi	r24, 0x60	; 96
    49f4:	96 e0       	ldi	r25, 0x06	; 6
    49f6:	22 e0       	ldi	r18, 0x02	; 2
    49f8:	fc 01       	movw	r30, r24
    49fa:	25 83       	std	Z+5, r18	; 0x05
    49fc:	05 c0       	rjmp	.+10     	; 0x4a08 <setRW+0x28>
    49fe:	80 e6       	ldi	r24, 0x60	; 96
    4a00:	96 e0       	ldi	r25, 0x06	; 6
    4a02:	22 e0       	ldi	r18, 0x02	; 2
    4a04:	fc 01       	movw	r30, r24
    4a06:	26 83       	std	Z+6, r18	; 0x06
    4a08:	00 00       	nop
    4a0a:	0f 90       	pop	r0
    4a0c:	df 91       	pop	r29
    4a0e:	cf 91       	pop	r28
    4a10:	08 95       	ret

00004a12 <setE>:
    4a12:	cf 93       	push	r28
    4a14:	df 93       	push	r29
    4a16:	1f 92       	push	r1
    4a18:	cd b7       	in	r28, 0x3d	; 61
    4a1a:	de b7       	in	r29, 0x3e	; 62
    4a1c:	89 83       	std	Y+1, r24	; 0x01
    4a1e:	89 81       	ldd	r24, Y+1	; 0x01
    4a20:	88 23       	and	r24, r24
    4a22:	31 f0       	breq	.+12     	; 0x4a30 <setE+0x1e>
    4a24:	80 e6       	ldi	r24, 0x60	; 96
    4a26:	96 e0       	ldi	r25, 0x06	; 6
    4a28:	24 e0       	ldi	r18, 0x04	; 4
    4a2a:	fc 01       	movw	r30, r24
    4a2c:	25 83       	std	Z+5, r18	; 0x05
    4a2e:	05 c0       	rjmp	.+10     	; 0x4a3a <setE+0x28>
    4a30:	80 e6       	ldi	r24, 0x60	; 96
    4a32:	96 e0       	ldi	r25, 0x06	; 6
    4a34:	24 e0       	ldi	r18, 0x04	; 4
    4a36:	fc 01       	movw	r30, r24
    4a38:	26 83       	std	Z+6, r18	; 0x06
    4a3a:	00 00       	nop
    4a3c:	0f 90       	pop	r0
    4a3e:	df 91       	pop	r29
    4a40:	cf 91       	pop	r28
    4a42:	08 95       	ret

00004a44 <Nybble>:
    4a44:	cf 93       	push	r28
    4a46:	df 93       	push	r29
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	0e 94 09 25 	call	0x4a12	; 0x4a12 <setE>
    4a52:	61 e0       	ldi	r22, 0x01	; 1
    4a54:	70 e0       	ldi	r23, 0x00	; 0
    4a56:	80 e0       	ldi	r24, 0x00	; 0
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	0e 94 27 24 	call	0x484e	; 0x484e <delayUS>
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	0e 94 09 25 	call	0x4a12	; 0x4a12 <setE>
    4a64:	00 00       	nop
    4a66:	df 91       	pop	r29
    4a68:	cf 91       	pop	r28
    4a6a:	08 95       	ret

00004a6c <command>:
    4a6c:	cf 93       	push	r28
    4a6e:	df 93       	push	r29
    4a70:	1f 92       	push	r1
    4a72:	cd b7       	in	r28, 0x3d	; 61
    4a74:	de b7       	in	r29, 0x3e	; 62
    4a76:	89 83       	std	Y+1, r24	; 0x01
    4a78:	89 81       	ldd	r24, Y+1	; 0x01
    4a7a:	82 95       	swap	r24
    4a7c:	8f 70       	andi	r24, 0x0F	; 15
    4a7e:	0e 94 b0 24 	call	0x4960	; 0x4960 <setPort>
    4a82:	80 e0       	ldi	r24, 0x00	; 0
    4a84:	0e 94 d7 24 	call	0x49ae	; 0x49ae <setRS>
    4a88:	80 e0       	ldi	r24, 0x00	; 0
    4a8a:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <setRW>
    4a8e:	0e 94 22 25 	call	0x4a44	; 0x4a44 <Nybble>
    4a92:	89 81       	ldd	r24, Y+1	; 0x01
    4a94:	8f 70       	andi	r24, 0x0F	; 15
    4a96:	0e 94 b0 24 	call	0x4960	; 0x4960 <setPort>
    4a9a:	0e 94 22 25 	call	0x4a44	; 0x4a44 <Nybble>
    4a9e:	00 00       	nop
    4aa0:	0f 90       	pop	r0
    4aa2:	df 91       	pop	r29
    4aa4:	cf 91       	pop	r28
    4aa6:	08 95       	ret

00004aa8 <write>:
    4aa8:	cf 93       	push	r28
    4aaa:	df 93       	push	r29
    4aac:	1f 92       	push	r1
    4aae:	cd b7       	in	r28, 0x3d	; 61
    4ab0:	de b7       	in	r29, 0x3e	; 62
    4ab2:	89 83       	std	Y+1, r24	; 0x01
    4ab4:	89 81       	ldd	r24, Y+1	; 0x01
    4ab6:	82 95       	swap	r24
    4ab8:	8f 70       	andi	r24, 0x0F	; 15
    4aba:	0e 94 b0 24 	call	0x4960	; 0x4960 <setPort>
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	0e 94 d7 24 	call	0x49ae	; 0x49ae <setRS>
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
    4ac6:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <setRW>
    4aca:	0e 94 22 25 	call	0x4a44	; 0x4a44 <Nybble>
    4ace:	89 81       	ldd	r24, Y+1	; 0x01
    4ad0:	8f 70       	andi	r24, 0x0F	; 15
    4ad2:	0e 94 b0 24 	call	0x4960	; 0x4960 <setPort>
    4ad6:	0e 94 22 25 	call	0x4a44	; 0x4a44 <Nybble>
    4ada:	00 00       	nop
    4adc:	0f 90       	pop	r0
    4ade:	df 91       	pop	r29
    4ae0:	cf 91       	pop	r28
    4ae2:	08 95       	ret

00004ae4 <vInitDisplay>:
 
 void vInitDisplay() {
    4ae4:	ef 92       	push	r14
    4ae6:	ff 92       	push	r15
    4ae8:	0f 93       	push	r16
    4aea:	cf 93       	push	r28
    4aec:	df 93       	push	r29
    4aee:	cd b7       	in	r28, 0x3d	; 61
    4af0:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    4af2:	80 e0       	ldi	r24, 0x00	; 0
    4af4:	96 e0       	ldi	r25, 0x06	; 6
    4af6:	20 e1       	ldi	r18, 0x10	; 16
    4af8:	fc 01       	movw	r30, r24
    4afa:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    4afc:	80 e0       	ldi	r24, 0x00	; 0
    4afe:	96 e0       	ldi	r25, 0x06	; 6
    4b00:	20 e2       	ldi	r18, 0x20	; 32
    4b02:	fc 01       	movw	r30, r24
    4b04:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    4b06:	80 e0       	ldi	r24, 0x00	; 0
    4b08:	96 e0       	ldi	r25, 0x06	; 6
    4b0a:	20 e4       	ldi	r18, 0x40	; 64
    4b0c:	fc 01       	movw	r30, r24
    4b0e:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	96 e0       	ldi	r25, 0x06	; 6
    4b14:	20 e8       	ldi	r18, 0x80	; 128
    4b16:	fc 01       	movw	r30, r24
    4b18:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    4b1a:	80 e6       	ldi	r24, 0x60	; 96
    4b1c:	96 e0       	ldi	r25, 0x06	; 6
    4b1e:	21 e0       	ldi	r18, 0x01	; 1
    4b20:	fc 01       	movw	r30, r24
    4b22:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    4b24:	80 e6       	ldi	r24, 0x60	; 96
    4b26:	96 e0       	ldi	r25, 0x06	; 6
    4b28:	22 e0       	ldi	r18, 0x02	; 2
    4b2a:	fc 01       	movw	r30, r24
    4b2c:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    4b2e:	80 e6       	ldi	r24, 0x60	; 96
    4b30:	96 e0       	ldi	r25, 0x06	; 6
    4b32:	24 e0       	ldi	r18, 0x04	; 4
    4b34:	fc 01       	movw	r30, r24
    4b36:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	96 e0       	ldi	r25, 0x06	; 6
    4b3c:	20 e0       	ldi	r18, 0x00	; 0
    4b3e:	36 e0       	ldi	r19, 0x06	; 6
    4b40:	f9 01       	movw	r30, r18
    4b42:	24 81       	ldd	r18, Z+4	; 0x04
    4b44:	2f 70       	andi	r18, 0x0F	; 15
    4b46:	fc 01       	movw	r30, r24
    4b48:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    4b4a:	80 e6       	ldi	r24, 0x60	; 96
    4b4c:	96 e0       	ldi	r25, 0x06	; 6
    4b4e:	20 e6       	ldi	r18, 0x60	; 96
    4b50:	36 e0       	ldi	r19, 0x06	; 6
    4b52:	f9 01       	movw	r30, r18
    4b54:	24 81       	ldd	r18, Z+4	; 0x04
    4b56:	28 7f       	andi	r18, 0xF8	; 248
    4b58:	fc 01       	movw	r30, r24
    4b5a:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    4b5c:	40 e0       	ldi	r20, 0x00	; 0
    4b5e:	66 e1       	ldi	r22, 0x16	; 22
    4b60:	88 e0       	ldi	r24, 0x08	; 8
    4b62:	0e 94 66 0d 	call	0x1acc	; 0x1acc <xQueueGenericCreate>
    4b66:	80 93 f9 2c 	sts	0x2CF9, r24	; 0x802cf9 <displayLineQueue>
    4b6a:	90 93 fa 2c 	sts	0x2CFA, r25	; 0x802cfa <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    4b6e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <xEventGroupCreate>
    4b72:	80 93 fb 2c 	sts	0x2CFB, r24	; 0x802cfb <egDisplayTiming>
    4b76:	90 93 fc 2c 	sts	0x2CFC, r25	; 0x802cfc <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);	//von Hand auf Prio 2 gestellt
    4b7a:	e1 2c       	mov	r14, r1
    4b7c:	f1 2c       	mov	r15, r1
    4b7e:	02 e0       	ldi	r16, 0x02	; 2
    4b80:	20 e0       	ldi	r18, 0x00	; 0
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	4e e5       	ldi	r20, 0x5E	; 94
    4b86:	51 e0       	ldi	r21, 0x01	; 1
    4b88:	68 e5       	ldi	r22, 0x58	; 88
    4b8a:	70 e2       	ldi	r23, 0x20	; 32
    4b8c:	80 e7       	ldi	r24, 0x70	; 112
    4b8e:	96 e2       	ldi	r25, 0x26	; 38
    4b90:	0e 94 e7 11 	call	0x23ce	; 0x23ce <xTaskCreate>
 }
    4b94:	00 00       	nop
    4b96:	df 91       	pop	r29
    4b98:	cf 91       	pop	r28
    4b9a:	0f 91       	pop	r16
    4b9c:	ff 90       	pop	r15
    4b9e:	ef 90       	pop	r14
    4ba0:	08 95       	ret

00004ba2 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    4ba2:	cf 93       	push	r28
    4ba4:	df 93       	push	r29
    4ba6:	00 d0       	rcall	.+0      	; 0x4ba8 <_displaySetPos+0x6>
    4ba8:	1f 92       	push	r1
    4baa:	cd b7       	in	r28, 0x3d	; 61
    4bac:	de b7       	in	r29, 0x3e	; 62
    4bae:	89 83       	std	Y+1, r24	; 0x01
    4bb0:	9a 83       	std	Y+2, r25	; 0x02
    4bb2:	6b 83       	std	Y+3, r22	; 0x03
    4bb4:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    4bb6:	89 81       	ldd	r24, Y+1	; 0x01
    4bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bba:	81 30       	cpi	r24, 0x01	; 1
    4bbc:	91 05       	cpc	r25, r1
    4bbe:	89 f0       	breq	.+34     	; 0x4be2 <_displaySetPos+0x40>
    4bc0:	82 30       	cpi	r24, 0x02	; 2
    4bc2:	91 05       	cpc	r25, r1
    4bc4:	1c f4       	brge	.+6      	; 0x4bcc <_displaySetPos+0x2a>
    4bc6:	89 2b       	or	r24, r25
    4bc8:	39 f0       	breq	.+14     	; 0x4bd8 <_displaySetPos+0x36>
    4bca:	1a c0       	rjmp	.+52     	; 0x4c00 <_displaySetPos+0x5e>
    4bcc:	82 30       	cpi	r24, 0x02	; 2
    4bce:	91 05       	cpc	r25, r1
    4bd0:	69 f0       	breq	.+26     	; 0x4bec <_displaySetPos+0x4a>
    4bd2:	03 97       	sbiw	r24, 0x03	; 3
    4bd4:	81 f0       	breq	.+32     	; 0x4bf6 <_displaySetPos+0x54>
    4bd6:	14 c0       	rjmp	.+40     	; 0x4c00 <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    4bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bda:	80 58       	subi	r24, 0x80	; 128
    4bdc:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <command>
		 break;
    4be0:	0f c0       	rjmp	.+30     	; 0x4c00 <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    4be2:	8b 81       	ldd	r24, Y+3	; 0x03
    4be4:	80 54       	subi	r24, 0x40	; 64
    4be6:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <command>
		 break;
    4bea:	0a c0       	rjmp	.+20     	; 0x4c00 <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    4bec:	8b 81       	ldd	r24, Y+3	; 0x03
    4bee:	8c 56       	subi	r24, 0x6C	; 108
    4bf0:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <command>
		 break;
    4bf4:	05 c0       	rjmp	.+10     	; 0x4c00 <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    4bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf8:	8c 52       	subi	r24, 0x2C	; 44
    4bfa:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <command>
		 break;
    4bfe:	00 00       	nop
	 }
	 delayUS(39);
    4c00:	67 e2       	ldi	r22, 0x27	; 39
    4c02:	70 e0       	ldi	r23, 0x00	; 0
    4c04:	80 e0       	ldi	r24, 0x00	; 0
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	0e 94 27 24 	call	0x484e	; 0x484e <delayUS>
 }
    4c0c:	00 00       	nop
    4c0e:	24 96       	adiw	r28, 0x04	; 4
    4c10:	cd bf       	out	0x3d, r28	; 61
    4c12:	de bf       	out	0x3e, r29	; 62
    4c14:	df 91       	pop	r29
    4c16:	cf 91       	pop	r28
    4c18:	08 95       	ret

00004c1a <_displayWriteChar>:

 void _displayWriteChar(char c) {
    4c1a:	cf 93       	push	r28
    4c1c:	df 93       	push	r29
    4c1e:	1f 92       	push	r1
    4c20:	cd b7       	in	r28, 0x3d	; 61
    4c22:	de b7       	in	r29, 0x3e	; 62
    4c24:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    4c26:	89 81       	ldd	r24, Y+1	; 0x01
    4c28:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <write>
	 delayUS(43);
    4c2c:	6b e2       	ldi	r22, 0x2B	; 43
    4c2e:	70 e0       	ldi	r23, 0x00	; 0
    4c30:	80 e0       	ldi	r24, 0x00	; 0
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	0e 94 27 24 	call	0x484e	; 0x484e <delayUS>
 }
    4c38:	00 00       	nop
    4c3a:	0f 90       	pop	r0
    4c3c:	df 91       	pop	r29
    4c3e:	cf 91       	pop	r28
    4c40:	08 95       	ret

00004c42 <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    4c42:	cf 93       	push	r28
    4c44:	df 93       	push	r29
    4c46:	00 d0       	rcall	.+0      	; 0x4c48 <_displayWriteString+0x6>
    4c48:	1f 92       	push	r1
    4c4a:	cd b7       	in	r28, 0x3d	; 61
    4c4c:	de b7       	in	r29, 0x3e	; 62
    4c4e:	8b 83       	std	Y+3, r24	; 0x03
    4c50:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    4c52:	19 82       	std	Y+1, r1	; 0x01
    4c54:	1a 82       	std	Y+2, r1	; 0x02
    4c56:	19 c0       	rjmp	.+50     	; 0x4c8a <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    4c58:	89 81       	ldd	r24, Y+1	; 0x01
    4c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    4c5e:	3c 81       	ldd	r19, Y+4	; 0x04
    4c60:	82 0f       	add	r24, r18
    4c62:	93 1f       	adc	r25, r19
    4c64:	fc 01       	movw	r30, r24
    4c66:	80 81       	ld	r24, Z
    4c68:	88 23       	and	r24, r24
    4c6a:	a1 f0       	breq	.+40     	; 0x4c94 <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    4c6c:	89 81       	ldd	r24, Y+1	; 0x01
    4c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c70:	2b 81       	ldd	r18, Y+3	; 0x03
    4c72:	3c 81       	ldd	r19, Y+4	; 0x04
    4c74:	82 0f       	add	r24, r18
    4c76:	93 1f       	adc	r25, r19
    4c78:	fc 01       	movw	r30, r24
    4c7a:	80 81       	ld	r24, Z
    4c7c:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    4c80:	89 81       	ldd	r24, Y+1	; 0x01
    4c82:	9a 81       	ldd	r25, Y+2	; 0x02
    4c84:	01 96       	adiw	r24, 0x01	; 1
    4c86:	89 83       	std	Y+1, r24	; 0x01
    4c88:	9a 83       	std	Y+2, r25	; 0x02
    4c8a:	89 81       	ldd	r24, Y+1	; 0x01
    4c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8e:	44 97       	sbiw	r24, 0x14	; 20
    4c90:	1c f3       	brlt	.-58     	; 0x4c58 <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    4c92:	01 c0       	rjmp	.+2      	; 0x4c96 <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    4c94:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    4c96:	00 00       	nop
    4c98:	24 96       	adiw	r28, 0x04	; 4
    4c9a:	cd bf       	out	0x3d, r28	; 61
    4c9c:	de bf       	out	0x3e, r29	; 62
    4c9e:	df 91       	pop	r29
    4ca0:	cf 91       	pop	r28
    4ca2:	08 95       	ret

00004ca4 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    4ca4:	cf 93       	push	r28
    4ca6:	df 93       	push	r29
    4ca8:	00 d0       	rcall	.+0      	; 0x4caa <_displayWriteStringAtPos+0x6>
    4caa:	00 d0       	rcall	.+0      	; 0x4cac <_displayWriteStringAtPos+0x8>
    4cac:	cd b7       	in	r28, 0x3d	; 61
    4cae:	de b7       	in	r29, 0x3e	; 62
    4cb0:	89 83       	std	Y+1, r24	; 0x01
    4cb2:	9a 83       	std	Y+2, r25	; 0x02
    4cb4:	6b 83       	std	Y+3, r22	; 0x03
    4cb6:	7c 83       	std	Y+4, r23	; 0x04
    4cb8:	4d 83       	std	Y+5, r20	; 0x05
    4cba:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    4cbc:	2b 81       	ldd	r18, Y+3	; 0x03
    4cbe:	3c 81       	ldd	r19, Y+4	; 0x04
    4cc0:	89 81       	ldd	r24, Y+1	; 0x01
    4cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc4:	b9 01       	movw	r22, r18
    4cc6:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <_displaySetPos>
	 _displayWriteString(s);
    4cca:	8d 81       	ldd	r24, Y+5	; 0x05
    4ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    4cce:	0e 94 21 26 	call	0x4c42	; 0x4c42 <_displayWriteString>
 }
    4cd2:	00 00       	nop
    4cd4:	26 96       	adiw	r28, 0x06	; 6
    4cd6:	cd bf       	out	0x3d, r28	; 61
    4cd8:	de bf       	out	0x3e, r29	; 62
    4cda:	df 91       	pop	r29
    4cdc:	cf 91       	pop	r28
    4cde:	08 95       	ret

00004ce0 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    4ce0:	cf 93       	push	r28
    4ce2:	df 93       	push	r29
    4ce4:	cd b7       	in	r28, 0x3d	; 61
    4ce6:	de b7       	in	r29, 0x3e	; 62
    4ce8:	c0 57       	subi	r28, 0x70	; 112
    4cea:	d1 09       	sbc	r29, r1
    4cec:	cd bf       	out	0x3d, r28	; 61
    4cee:	de bf       	out	0x3e, r29	; 62
    4cf0:	9e 01       	movw	r18, r28
    4cf2:	21 59       	subi	r18, 0x91	; 145
    4cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    4cf6:	f9 01       	movw	r30, r18
    4cf8:	80 83       	st	Z, r24
    4cfa:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    4cfc:	19 82       	std	Y+1, r1	; 0x01
    4cfe:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    4d00:	1b 82       	std	Y+3, r1	; 0x03
    4d02:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    4d04:	1d 82       	std	Y+5, r1	; 0x05
    4d06:	1e 82       	std	Y+6, r1	; 0x06
    4d08:	26 c0       	rjmp	.+76     	; 0x4d56 <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    4d0a:	1f 82       	std	Y+7, r1	; 0x07
    4d0c:	18 86       	std	Y+8, r1	; 0x08
    4d0e:	1a c0       	rjmp	.+52     	; 0x4d44 <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    4d10:	2d 81       	ldd	r18, Y+5	; 0x05
    4d12:	3e 81       	ldd	r19, Y+6	; 0x06
    4d14:	44 e1       	ldi	r20, 0x14	; 20
    4d16:	42 9f       	mul	r20, r18
    4d18:	c0 01       	movw	r24, r0
    4d1a:	43 9f       	mul	r20, r19
    4d1c:	90 0d       	add	r25, r0
    4d1e:	11 24       	eor	r1, r1
    4d20:	9e 01       	movw	r18, r28
    4d22:	2f 5f       	subi	r18, 0xFF	; 255
    4d24:	3f 4f       	sbci	r19, 0xFF	; 255
    4d26:	28 0f       	add	r18, r24
    4d28:	39 1f       	adc	r19, r25
    4d2a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d2c:	98 85       	ldd	r25, Y+8	; 0x08
    4d2e:	82 0f       	add	r24, r18
    4d30:	93 1f       	adc	r25, r19
    4d32:	08 96       	adiw	r24, 0x08	; 8
    4d34:	20 e2       	ldi	r18, 0x20	; 32
    4d36:	fc 01       	movw	r30, r24
    4d38:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    4d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d3c:	98 85       	ldd	r25, Y+8	; 0x08
    4d3e:	01 96       	adiw	r24, 0x01	; 1
    4d40:	8f 83       	std	Y+7, r24	; 0x07
    4d42:	98 87       	std	Y+8, r25	; 0x08
    4d44:	8f 81       	ldd	r24, Y+7	; 0x07
    4d46:	98 85       	ldd	r25, Y+8	; 0x08
    4d48:	44 97       	sbiw	r24, 0x14	; 20
    4d4a:	14 f3       	brlt	.-60     	; 0x4d10 <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    4d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d50:	01 96       	adiw	r24, 0x01	; 1
    4d52:	8d 83       	std	Y+5, r24	; 0x05
    4d54:	9e 83       	std	Y+6, r25	; 0x06
    4d56:	8d 81       	ldd	r24, Y+5	; 0x05
    4d58:	9e 81       	ldd	r25, Y+6	; 0x06
    4d5a:	04 97       	sbiw	r24, 0x04	; 4
    4d5c:	b4 f2       	brlt	.-84     	; 0x4d0a <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    4d5e:	60 e4       	ldi	r22, 0x40	; 64
    4d60:	7c e9       	ldi	r23, 0x9C	; 156
    4d62:	80 e0       	ldi	r24, 0x00	; 0
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	0e 94 27 24 	call	0x484e	; 0x484e <delayUS>
	 setPort(0x03);
    4d6a:	83 e0       	ldi	r24, 0x03	; 3
    4d6c:	0e 94 b0 24 	call	0x4960	; 0x4960 <setPort>
	 delayUS(5000);
    4d70:	68 e8       	ldi	r22, 0x88	; 136
    4d72:	73 e1       	ldi	r23, 0x13	; 19
    4d74:	80 e0       	ldi	r24, 0x00	; 0
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	0e 94 27 24 	call	0x484e	; 0x484e <delayUS>
	 Nybble();
    4d7c:	0e 94 22 25 	call	0x4a44	; 0x4a44 <Nybble>
	 delayUS(160);
    4d80:	60 ea       	ldi	r22, 0xA0	; 160
    4d82:	70 e0       	ldi	r23, 0x00	; 0
    4d84:	80 e0       	ldi	r24, 0x00	; 0
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	0e 94 27 24 	call	0x484e	; 0x484e <delayUS>
	 Nybble();
    4d8c:	0e 94 22 25 	call	0x4a44	; 0x4a44 <Nybble>
	 delayUS(160);
    4d90:	60 ea       	ldi	r22, 0xA0	; 160
    4d92:	70 e0       	ldi	r23, 0x00	; 0
    4d94:	80 e0       	ldi	r24, 0x00	; 0
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	0e 94 27 24 	call	0x484e	; 0x484e <delayUS>
	 Nybble();
    4d9c:	0e 94 22 25 	call	0x4a44	; 0x4a44 <Nybble>
	 delayUS(160);
    4da0:	60 ea       	ldi	r22, 0xA0	; 160
    4da2:	70 e0       	ldi	r23, 0x00	; 0
    4da4:	80 e0       	ldi	r24, 0x00	; 0
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	0e 94 27 24 	call	0x484e	; 0x484e <delayUS>
	 setPort(0x02);
    4dac:	82 e0       	ldi	r24, 0x02	; 2
    4dae:	0e 94 b0 24 	call	0x4960	; 0x4960 <setPort>
	 Nybble();
    4db2:	0e 94 22 25 	call	0x4a44	; 0x4a44 <Nybble>
	 command(0x28);
    4db6:	88 e2       	ldi	r24, 0x28	; 40
    4db8:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <command>
	 command(0x10);
    4dbc:	80 e1       	ldi	r24, 0x10	; 16
    4dbe:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <command>
	 command(0x0C); //Cursor and Blinking off
    4dc2:	8c e0       	ldi	r24, 0x0C	; 12
    4dc4:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <command>
	 command(0x06);
    4dc8:	86 e0       	ldi	r24, 0x06	; 6
    4dca:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    4dce:	68 ec       	ldi	r22, 0xC8	; 200
    4dd0:	70 e0       	ldi	r23, 0x00	; 0
    4dd2:	80 e0       	ldi	r24, 0x00	; 0
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    4dda:	80 91 fb 2c 	lds	r24, 0x2CFB	; 0x802cfb <egDisplayTiming>
    4dde:	90 91 fc 2c 	lds	r25, 0x2CFC	; 0x802cfc <egDisplayTiming+0x1>
    4de2:	40 e0       	ldi	r20, 0x00	; 0
    4de4:	50 e0       	ldi	r21, 0x00	; 0
    4de6:	ba 01       	movw	r22, r20
    4de8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <xEventGroupClearBits>
    4dec:	dc 01       	movw	r26, r24
    4dee:	cb 01       	movw	r24, r22
    4df0:	89 2b       	or	r24, r25
    4df2:	8a 2b       	or	r24, r26
    4df4:	8b 2b       	or	r24, r27
    4df6:	09 f4       	brne	.+2      	; 0x4dfa <vDisplayUpdateTask+0x11a>
    4df8:	96 c0       	rjmp	.+300    	; 0x4f26 <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    4dfa:	80 91 fb 2c 	lds	r24, 0x2CFB	; 0x802cfb <egDisplayTiming>
    4dfe:	90 91 fc 2c 	lds	r25, 0x2CFC	; 0x802cfc <egDisplayTiming+0x1>
    4e02:	42 e0       	ldi	r20, 0x02	; 2
    4e04:	50 e0       	ldi	r21, 0x00	; 0
    4e06:	60 e0       	ldi	r22, 0x00	; 0
    4e08:	70 e0       	ldi	r23, 0x00	; 0
    4e0a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    4e0e:	19 82       	std	Y+1, r1	; 0x01
    4e10:	1a 82       	std	Y+2, r1	; 0x02
    4e12:	26 c0       	rjmp	.+76     	; 0x4e60 <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    4e14:	1b 82       	std	Y+3, r1	; 0x03
    4e16:	1c 82       	std	Y+4, r1	; 0x04
    4e18:	1a c0       	rjmp	.+52     	; 0x4e4e <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    4e1a:	29 81       	ldd	r18, Y+1	; 0x01
    4e1c:	3a 81       	ldd	r19, Y+2	; 0x02
    4e1e:	44 e1       	ldi	r20, 0x14	; 20
    4e20:	42 9f       	mul	r20, r18
    4e22:	c0 01       	movw	r24, r0
    4e24:	43 9f       	mul	r20, r19
    4e26:	90 0d       	add	r25, r0
    4e28:	11 24       	eor	r1, r1
    4e2a:	9e 01       	movw	r18, r28
    4e2c:	2f 5f       	subi	r18, 0xFF	; 255
    4e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e30:	28 0f       	add	r18, r24
    4e32:	39 1f       	adc	r19, r25
    4e34:	8b 81       	ldd	r24, Y+3	; 0x03
    4e36:	9c 81       	ldd	r25, Y+4	; 0x04
    4e38:	82 0f       	add	r24, r18
    4e3a:	93 1f       	adc	r25, r19
    4e3c:	08 96       	adiw	r24, 0x08	; 8
    4e3e:	20 e2       	ldi	r18, 0x20	; 32
    4e40:	fc 01       	movw	r30, r24
    4e42:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    4e44:	8b 81       	ldd	r24, Y+3	; 0x03
    4e46:	9c 81       	ldd	r25, Y+4	; 0x04
    4e48:	01 96       	adiw	r24, 0x01	; 1
    4e4a:	8b 83       	std	Y+3, r24	; 0x03
    4e4c:	9c 83       	std	Y+4, r25	; 0x04
    4e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e50:	9c 81       	ldd	r25, Y+4	; 0x04
    4e52:	44 97       	sbiw	r24, 0x14	; 20
    4e54:	14 f3       	brlt	.-60     	; 0x4e1a <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    4e56:	89 81       	ldd	r24, Y+1	; 0x01
    4e58:	9a 81       	ldd	r25, Y+2	; 0x02
    4e5a:	01 96       	adiw	r24, 0x01	; 1
    4e5c:	89 83       	std	Y+1, r24	; 0x01
    4e5e:	9a 83       	std	Y+2, r25	; 0x02
    4e60:	89 81       	ldd	r24, Y+1	; 0x01
    4e62:	9a 81       	ldd	r25, Y+2	; 0x02
    4e64:	04 97       	sbiw	r24, 0x04	; 4
    4e66:	b4 f2       	brlt	.-84     	; 0x4e14 <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    4e68:	5e c0       	rjmp	.+188    	; 0x4f26 <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    4e6a:	80 91 f9 2c 	lds	r24, 0x2CF9	; 0x802cf9 <displayLineQueue>
    4e6e:	90 91 fa 2c 	lds	r25, 0x2CFA	; 0x802cfa <displayLineQueue+0x1>
    4e72:	be 01       	movw	r22, r28
    4e74:	67 5a       	subi	r22, 0xA7	; 167
    4e76:	7f 4f       	sbci	r23, 0xFF	; 255
    4e78:	2f ef       	ldi	r18, 0xFF	; 255
    4e7a:	3f ef       	ldi	r19, 0xFF	; 255
    4e7c:	a9 01       	movw	r20, r18
    4e7e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <xQueueReceive>
    4e82:	88 23       	and	r24, r24
    4e84:	09 f4       	brne	.+2      	; 0x4e88 <vDisplayUpdateTask+0x1a8>
    4e86:	4f c0       	rjmp	.+158    	; 0x4f26 <vDisplayUpdateTask+0x246>
				i=0;			
    4e88:	19 82       	std	Y+1, r1	; 0x01
    4e8a:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    4e8c:	32 c0       	rjmp	.+100    	; 0x4ef2 <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    4e8e:	ce 01       	movw	r24, r28
    4e90:	87 5a       	subi	r24, 0xA7	; 167
    4e92:	9f 4f       	sbci	r25, 0xFF	; 255
    4e94:	fc 01       	movw	r30, r24
    4e96:	80 81       	ld	r24, Z
    4e98:	48 2f       	mov	r20, r24
    4e9a:	50 e0       	ldi	r21, 0x00	; 0
    4e9c:	ce 01       	movw	r24, r28
    4e9e:	87 5a       	subi	r24, 0xA7	; 167
    4ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ea2:	fc 01       	movw	r30, r24
    4ea4:	81 81       	ldd	r24, Z+1	; 0x01
    4ea6:	28 2f       	mov	r18, r24
    4ea8:	30 e0       	ldi	r19, 0x00	; 0
    4eaa:	89 81       	ldd	r24, Y+1	; 0x01
    4eac:	9a 81       	ldd	r25, Y+2	; 0x02
    4eae:	82 0f       	add	r24, r18
    4eb0:	93 1f       	adc	r25, r19
    4eb2:	be 01       	movw	r22, r28
    4eb4:	67 5a       	subi	r22, 0xA7	; 167
    4eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    4eb8:	29 81       	ldd	r18, Y+1	; 0x01
    4eba:	3a 81       	ldd	r19, Y+2	; 0x02
    4ebc:	26 0f       	add	r18, r22
    4ebe:	37 1f       	adc	r19, r23
    4ec0:	2e 5f       	subi	r18, 0xFE	; 254
    4ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec4:	f9 01       	movw	r30, r18
    4ec6:	60 81       	ld	r22, Z
    4ec8:	74 e1       	ldi	r23, 0x14	; 20
    4eca:	74 9f       	mul	r23, r20
    4ecc:	90 01       	movw	r18, r0
    4ece:	75 9f       	mul	r23, r21
    4ed0:	30 0d       	add	r19, r0
    4ed2:	11 24       	eor	r1, r1
    4ed4:	ae 01       	movw	r20, r28
    4ed6:	4f 5f       	subi	r20, 0xFF	; 255
    4ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    4eda:	24 0f       	add	r18, r20
    4edc:	35 1f       	adc	r19, r21
    4ede:	82 0f       	add	r24, r18
    4ee0:	93 1f       	adc	r25, r19
    4ee2:	08 96       	adiw	r24, 0x08	; 8
    4ee4:	fc 01       	movw	r30, r24
    4ee6:	60 83       	st	Z, r22
					i++;
    4ee8:	89 81       	ldd	r24, Y+1	; 0x01
    4eea:	9a 81       	ldd	r25, Y+2	; 0x02
    4eec:	01 96       	adiw	r24, 0x01	; 1
    4eee:	89 83       	std	Y+1, r24	; 0x01
    4ef0:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    4ef2:	ce 01       	movw	r24, r28
    4ef4:	87 5a       	subi	r24, 0xA7	; 167
    4ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ef8:	fc 01       	movw	r30, r24
    4efa:	81 81       	ldd	r24, Z+1	; 0x01
    4efc:	28 2f       	mov	r18, r24
    4efe:	30 e0       	ldi	r19, 0x00	; 0
    4f00:	89 81       	ldd	r24, Y+1	; 0x01
    4f02:	9a 81       	ldd	r25, Y+2	; 0x02
    4f04:	82 0f       	add	r24, r18
    4f06:	93 1f       	adc	r25, r19
    4f08:	44 97       	sbiw	r24, 0x14	; 20
    4f0a:	6c f4       	brge	.+26     	; 0x4f26 <vDisplayUpdateTask+0x246>
    4f0c:	9e 01       	movw	r18, r28
    4f0e:	27 5a       	subi	r18, 0xA7	; 167
    4f10:	3f 4f       	sbci	r19, 0xFF	; 255
    4f12:	89 81       	ldd	r24, Y+1	; 0x01
    4f14:	9a 81       	ldd	r25, Y+2	; 0x02
    4f16:	82 0f       	add	r24, r18
    4f18:	93 1f       	adc	r25, r19
    4f1a:	02 96       	adiw	r24, 0x02	; 2
    4f1c:	fc 01       	movw	r30, r24
    4f1e:	80 81       	ld	r24, Z
    4f20:	88 23       	and	r24, r24
    4f22:	09 f0       	breq	.+2      	; 0x4f26 <vDisplayUpdateTask+0x246>
    4f24:	b4 cf       	rjmp	.-152    	; 0x4e8e <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    4f26:	80 91 f9 2c 	lds	r24, 0x2CF9	; 0x802cf9 <displayLineQueue>
    4f2a:	90 91 fa 2c 	lds	r25, 0x2CFA	; 0x802cfa <displayLineQueue+0x1>
    4f2e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <uxQueueMessagesWaiting>
    4f32:	88 23       	and	r24, r24
    4f34:	09 f0       	breq	.+2      	; 0x4f38 <vDisplayUpdateTask+0x258>
    4f36:	99 cf       	rjmp	.-206    	; 0x4e6a <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    4f38:	19 82       	std	Y+1, r1	; 0x01
    4f3a:	1a 82       	std	Y+2, r1	; 0x02
    4f3c:	19 c0       	rjmp	.+50     	; 0x4f70 <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    4f3e:	9e 01       	movw	r18, r28
    4f40:	27 5f       	subi	r18, 0xF7	; 247
    4f42:	3f 4f       	sbci	r19, 0xFF	; 255
    4f44:	49 81       	ldd	r20, Y+1	; 0x01
    4f46:	5a 81       	ldd	r21, Y+2	; 0x02
    4f48:	64 e1       	ldi	r22, 0x14	; 20
    4f4a:	64 9f       	mul	r22, r20
    4f4c:	c0 01       	movw	r24, r0
    4f4e:	65 9f       	mul	r22, r21
    4f50:	90 0d       	add	r25, r0
    4f52:	11 24       	eor	r1, r1
    4f54:	28 0f       	add	r18, r24
    4f56:	39 1f       	adc	r19, r25
    4f58:	89 81       	ldd	r24, Y+1	; 0x01
    4f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f5c:	a9 01       	movw	r20, r18
    4f5e:	60 e0       	ldi	r22, 0x00	; 0
    4f60:	70 e0       	ldi	r23, 0x00	; 0
    4f62:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    4f66:	89 81       	ldd	r24, Y+1	; 0x01
    4f68:	9a 81       	ldd	r25, Y+2	; 0x02
    4f6a:	01 96       	adiw	r24, 0x01	; 1
    4f6c:	89 83       	std	Y+1, r24	; 0x01
    4f6e:	9a 83       	std	Y+2, r25	; 0x02
    4f70:	89 81       	ldd	r24, Y+1	; 0x01
    4f72:	9a 81       	ldd	r25, Y+2	; 0x02
    4f74:	04 97       	sbiw	r24, 0x04	; 4
    4f76:	1c f3       	brlt	.-58     	; 0x4f3e <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    4f78:	2a cf       	rjmp	.-428    	; 0x4dce <vDisplayUpdateTask+0xee>

00004f7a <vDisplayClear>:
 }
 

void vDisplayClear() {
    4f7a:	cf 93       	push	r28
    4f7c:	df 93       	push	r29
    4f7e:	cd b7       	in	r28, 0x3d	; 61
    4f80:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    4f82:	80 91 fb 2c 	lds	r24, 0x2CFB	; 0x802cfb <egDisplayTiming>
    4f86:	90 91 fc 2c 	lds	r25, 0x2CFC	; 0x802cfc <egDisplayTiming+0x1>
    4f8a:	42 e0       	ldi	r20, 0x02	; 2
    4f8c:	50 e0       	ldi	r21, 0x00	; 0
    4f8e:	60 e0       	ldi	r22, 0x00	; 0
    4f90:	70 e0       	ldi	r23, 0x00	; 0
    4f92:	0e 94 00 06 	call	0xc00	; 0xc00 <xEventGroupSetBits>
}
    4f96:	00 00       	nop
    4f98:	df 91       	pop	r29
    4f9a:	cf 91       	pop	r28
    4f9c:	08 95       	ret

00004f9e <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    4f9e:	cf 93       	push	r28
    4fa0:	df 93       	push	r29
    4fa2:	1f 92       	push	r1
    4fa4:	1f 92       	push	r1
    4fa6:	cd b7       	in	r28, 0x3d	; 61
    4fa8:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    4faa:	ce 01       	movw	r24, r28
    4fac:	0e 96       	adiw	r24, 0x0e	; 14
    4fae:	89 83       	std	Y+1, r24	; 0x01
    4fb0:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    4fb2:	29 81       	ldd	r18, Y+1	; 0x01
    4fb4:	3a 81       	ldd	r19, Y+2	; 0x02
    4fb6:	4c 85       	ldd	r20, Y+12	; 0x0c
    4fb8:	5d 85       	ldd	r21, Y+13	; 0x0d
    4fba:	6a 85       	ldd	r22, Y+10	; 0x0a
    4fbc:	7b 85       	ldd	r23, Y+11	; 0x0b
    4fbe:	88 85       	ldd	r24, Y+8	; 0x08
    4fc0:	99 85       	ldd	r25, Y+9	; 0x09
    4fc2:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <display_vprintf>
	va_end(arg);	
}
    4fc6:	00 00       	nop
    4fc8:	0f 90       	pop	r0
    4fca:	0f 90       	pop	r0
    4fcc:	df 91       	pop	r29
    4fce:	cf 91       	pop	r28
    4fd0:	08 95       	ret

00004fd2 <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    4fd2:	0f 93       	push	r16
    4fd4:	cf 93       	push	r28
    4fd6:	df 93       	push	r29
    4fd8:	cd b7       	in	r28, 0x3d	; 61
    4fda:	de b7       	in	r29, 0x3e	; 62
    4fdc:	ec 97       	sbiw	r28, 0x3c	; 60
    4fde:	cd bf       	out	0x3d, r28	; 61
    4fe0:	de bf       	out	0x3e, r29	; 62
    4fe2:	8d ab       	std	Y+53, r24	; 0x35
    4fe4:	9e ab       	std	Y+54, r25	; 0x36
    4fe6:	6f ab       	std	Y+55, r22	; 0x37
    4fe8:	78 af       	std	Y+56, r23	; 0x38
    4fea:	49 af       	std	Y+57, r20	; 0x39
    4fec:	5a af       	std	Y+58, r21	; 0x3a
    4fee:	2b af       	std	Y+59, r18	; 0x3b
    4ff0:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    4ff2:	19 82       	std	Y+1, r1	; 0x01
    4ff4:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    4ff6:	1b 82       	std	Y+3, r1	; 0x03
    4ff8:	1c 82       	std	Y+4, r1	; 0x04
    4ffa:	0b c0       	rjmp	.+22     	; 0x5012 <display_vprintf+0x40>
		buffer[i] = 0x00;
    4ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    5000:	84 54       	subi	r24, 0x44	; 68
    5002:	93 4d       	sbci	r25, 0xD3	; 211
    5004:	fc 01       	movw	r30, r24
    5006:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    5008:	8b 81       	ldd	r24, Y+3	; 0x03
    500a:	9c 81       	ldd	r25, Y+4	; 0x04
    500c:	01 96       	adiw	r24, 0x01	; 1
    500e:	8b 83       	std	Y+3, r24	; 0x03
    5010:	9c 83       	std	Y+4, r25	; 0x04
    5012:	8b 81       	ldd	r24, Y+3	; 0x03
    5014:	9c 81       	ldd	r25, Y+4	; 0x04
    5016:	44 97       	sbiw	r24, 0x14	; 20
    5018:	8c f3       	brlt	.-30     	; 0x4ffc <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    501a:	1d 82       	std	Y+5, r1	; 0x05
    501c:	1e 82       	std	Y+6, r1	; 0x06
    501e:	0b c0       	rjmp	.+22     	; 0x5036 <display_vprintf+0x64>
		str[i] = 0x00;
    5020:	8d 81       	ldd	r24, Y+5	; 0x05
    5022:	9e 81       	ldd	r25, Y+6	; 0x06
    5024:	80 53       	subi	r24, 0x30	; 48
    5026:	93 4d       	sbci	r25, 0xD3	; 211
    5028:	fc 01       	movw	r30, r24
    502a:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    502c:	8d 81       	ldd	r24, Y+5	; 0x05
    502e:	9e 81       	ldd	r25, Y+6	; 0x06
    5030:	01 96       	adiw	r24, 0x01	; 1
    5032:	8d 83       	std	Y+5, r24	; 0x05
    5034:	9e 83       	std	Y+6, r25	; 0x06
    5036:	8d 81       	ldd	r24, Y+5	; 0x05
    5038:	9e 81       	ldd	r25, Y+6	; 0x06
    503a:	44 97       	sbiw	r24, 0x14	; 20
    503c:	8c f3       	brlt	.-30     	; 0x5020 <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    503e:	be c1       	rjmp	.+892    	; 0x53bc <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    5040:	8d 89       	ldd	r24, Y+21	; 0x15
    5042:	85 32       	cpi	r24, 0x25	; 37
    5044:	09 f0       	breq	.+2      	; 0x5048 <display_vprintf+0x76>
    5046:	a0 c1       	rjmp	.+832    	; 0x5388 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    5048:	89 ad       	ldd	r24, Y+57	; 0x39
    504a:	9a ad       	ldd	r25, Y+58	; 0x3a
    504c:	9c 01       	movw	r18, r24
    504e:	2f 5f       	subi	r18, 0xFF	; 255
    5050:	3f 4f       	sbci	r19, 0xFF	; 255
    5052:	29 af       	std	Y+57, r18	; 0x39
    5054:	3a af       	std	Y+58, r19	; 0x3a
    5056:	fc 01       	movw	r30, r24
    5058:	80 81       	ld	r24, Z
    505a:	8d 8b       	std	Y+21, r24	; 0x15
    505c:	8d 89       	ldd	r24, Y+21	; 0x15
    505e:	88 2f       	mov	r24, r24
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	85 36       	cpi	r24, 0x65	; 101
    5064:	91 05       	cpc	r25, r1
    5066:	09 f4       	brne	.+2      	; 0x506a <display_vprintf+0x98>
    5068:	46 c1       	rjmp	.+652    	; 0x52f6 <display_vprintf+0x324>
    506a:	86 36       	cpi	r24, 0x66	; 102
    506c:	91 05       	cpc	r25, r1
    506e:	54 f4       	brge	.+20     	; 0x5084 <display_vprintf+0xb2>
    5070:	83 36       	cpi	r24, 0x63	; 99
    5072:	91 05       	cpc	r25, r1
    5074:	01 f1       	breq	.+64     	; 0x50b6 <display_vprintf+0xe4>
    5076:	84 36       	cpi	r24, 0x64	; 100
    5078:	91 05       	cpc	r25, r1
    507a:	0c f0       	brlt	.+2      	; 0x507e <display_vprintf+0xac>
    507c:	70 c0       	rjmp	.+224    	; 0x515e <display_vprintf+0x18c>
    507e:	85 97       	sbiw	r24, 0x25	; 37
    5080:	69 f0       	breq	.+26     	; 0x509c <display_vprintf+0xca>
    5082:	9c c1       	rjmp	.+824    	; 0x53bc <display_vprintf+0x3ea>
    5084:	83 37       	cpi	r24, 0x73	; 115
    5086:	91 05       	cpc	r25, r1
    5088:	71 f1       	breq	.+92     	; 0x50e6 <display_vprintf+0x114>
    508a:	88 37       	cpi	r24, 0x78	; 120
    508c:	91 05       	cpc	r25, r1
    508e:	09 f4       	brne	.+2      	; 0x5092 <display_vprintf+0xc0>
    5090:	a8 c0       	rjmp	.+336    	; 0x51e2 <display_vprintf+0x210>
    5092:	86 36       	cpi	r24, 0x66	; 102
    5094:	91 05       	cpc	r25, r1
    5096:	09 f4       	brne	.+2      	; 0x509a <display_vprintf+0xc8>
    5098:	e6 c0       	rjmp	.+460    	; 0x5266 <display_vprintf+0x294>
    509a:	90 c1       	rjmp	.+800    	; 0x53bc <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    509c:	89 81       	ldd	r24, Y+1	; 0x01
    509e:	9a 81       	ldd	r25, Y+2	; 0x02
    50a0:	80 53       	subi	r24, 0x30	; 48
    50a2:	93 4d       	sbci	r25, 0xD3	; 211
    50a4:	25 e2       	ldi	r18, 0x25	; 37
    50a6:	fc 01       	movw	r30, r24
    50a8:	20 83       	st	Z, r18
				length++;
    50aa:	89 81       	ldd	r24, Y+1	; 0x01
    50ac:	9a 81       	ldd	r25, Y+2	; 0x02
    50ae:	01 96       	adiw	r24, 0x01	; 1
    50b0:	89 83       	std	Y+1, r24	; 0x01
    50b2:	9a 83       	std	Y+2, r25	; 0x02
				break;
    50b4:	83 c1       	rjmp	.+774    	; 0x53bc <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    50b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    50b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    50ba:	9c 01       	movw	r18, r24
    50bc:	2e 5f       	subi	r18, 0xFE	; 254
    50be:	3f 4f       	sbci	r19, 0xFF	; 255
    50c0:	2b af       	std	Y+59, r18	; 0x3b
    50c2:	3c af       	std	Y+60, r19	; 0x3c
    50c4:	fc 01       	movw	r30, r24
    50c6:	80 81       	ld	r24, Z
    50c8:	91 81       	ldd	r25, Z+1	; 0x01
    50ca:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    50cc:	89 81       	ldd	r24, Y+1	; 0x01
    50ce:	9a 81       	ldd	r25, Y+2	; 0x02
    50d0:	80 53       	subi	r24, 0x30	; 48
    50d2:	93 4d       	sbci	r25, 0xD3	; 211
    50d4:	2e 89       	ldd	r18, Y+22	; 0x16
    50d6:	fc 01       	movw	r30, r24
    50d8:	20 83       	st	Z, r18
				length++;
    50da:	89 81       	ldd	r24, Y+1	; 0x01
    50dc:	9a 81       	ldd	r25, Y+2	; 0x02
    50de:	01 96       	adiw	r24, 0x01	; 1
    50e0:	89 83       	std	Y+1, r24	; 0x01
    50e2:	9a 83       	std	Y+2, r25	; 0x02
				break;
    50e4:	6b c1       	rjmp	.+726    	; 0x53bc <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    50e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    50e8:	9c ad       	ldd	r25, Y+60	; 0x3c
    50ea:	9c 01       	movw	r18, r24
    50ec:	2e 5f       	subi	r18, 0xFE	; 254
    50ee:	3f 4f       	sbci	r19, 0xFF	; 255
    50f0:	2b af       	std	Y+59, r18	; 0x3b
    50f2:	3c af       	std	Y+60, r19	; 0x3c
    50f4:	fc 01       	movw	r30, r24
    50f6:	80 81       	ld	r24, Z
    50f8:	91 81       	ldd	r25, Z+1	; 0x01
    50fa:	8f 8b       	std	Y+23, r24	; 0x17
    50fc:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    50fe:	1f 82       	std	Y+7, r1	; 0x07
    5100:	18 86       	std	Y+8, r1	; 0x08
    5102:	17 c0       	rjmp	.+46     	; 0x5132 <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    5104:	29 81       	ldd	r18, Y+1	; 0x01
    5106:	3a 81       	ldd	r19, Y+2	; 0x02
    5108:	8f 81       	ldd	r24, Y+7	; 0x07
    510a:	98 85       	ldd	r25, Y+8	; 0x08
    510c:	82 0f       	add	r24, r18
    510e:	93 1f       	adc	r25, r19
    5110:	2f 81       	ldd	r18, Y+7	; 0x07
    5112:	38 85       	ldd	r19, Y+8	; 0x08
    5114:	4f 89       	ldd	r20, Y+23	; 0x17
    5116:	58 8d       	ldd	r21, Y+24	; 0x18
    5118:	24 0f       	add	r18, r20
    511a:	35 1f       	adc	r19, r21
    511c:	f9 01       	movw	r30, r18
    511e:	20 81       	ld	r18, Z
    5120:	80 53       	subi	r24, 0x30	; 48
    5122:	93 4d       	sbci	r25, 0xD3	; 211
    5124:	fc 01       	movw	r30, r24
    5126:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    5128:	8f 81       	ldd	r24, Y+7	; 0x07
    512a:	98 85       	ldd	r25, Y+8	; 0x08
    512c:	01 96       	adiw	r24, 0x01	; 1
    512e:	8f 83       	std	Y+7, r24	; 0x07
    5130:	98 87       	std	Y+8, r25	; 0x08
    5132:	8f 89       	ldd	r24, Y+23	; 0x17
    5134:	98 8d       	ldd	r25, Y+24	; 0x18
    5136:	0e 94 01 34 	call	0x6802	; 0x6802 <strlen>
    513a:	9c 01       	movw	r18, r24
    513c:	8f 81       	ldd	r24, Y+7	; 0x07
    513e:	98 85       	ldd	r25, Y+8	; 0x08
    5140:	82 17       	cp	r24, r18
    5142:	93 07       	cpc	r25, r19
    5144:	f8 f2       	brcs	.-66     	; 0x5104 <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    5146:	8f 89       	ldd	r24, Y+23	; 0x17
    5148:	98 8d       	ldd	r25, Y+24	; 0x18
    514a:	0e 94 01 34 	call	0x6802	; 0x6802 <strlen>
    514e:	9c 01       	movw	r18, r24
    5150:	89 81       	ldd	r24, Y+1	; 0x01
    5152:	9a 81       	ldd	r25, Y+2	; 0x02
    5154:	82 0f       	add	r24, r18
    5156:	93 1f       	adc	r25, r19
    5158:	89 83       	std	Y+1, r24	; 0x01
    515a:	9a 83       	std	Y+2, r25	; 0x02
				break;
    515c:	2f c1       	rjmp	.+606    	; 0x53bc <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    515e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5160:	9c ad       	ldd	r25, Y+60	; 0x3c
    5162:	9c 01       	movw	r18, r24
    5164:	2e 5f       	subi	r18, 0xFE	; 254
    5166:	3f 4f       	sbci	r19, 0xFF	; 255
    5168:	2b af       	std	Y+59, r18	; 0x3b
    516a:	3c af       	std	Y+60, r19	; 0x3c
    516c:	fc 01       	movw	r30, r24
    516e:	80 81       	ld	r24, Z
    5170:	91 81       	ldd	r25, Z+1	; 0x01
    5172:	89 8f       	std	Y+25, r24	; 0x19
    5174:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    5176:	89 8d       	ldd	r24, Y+25	; 0x19
    5178:	9a 8d       	ldd	r25, Y+26	; 0x1a
    517a:	4a e0       	ldi	r20, 0x0A	; 10
    517c:	50 e0       	ldi	r21, 0x00	; 0
    517e:	6c eb       	ldi	r22, 0xBC	; 188
    5180:	7c e2       	ldi	r23, 0x2C	; 44
    5182:	0e 94 15 34 	call	0x682a	; 0x682a <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    5186:	19 86       	std	Y+9, r1	; 0x09
    5188:	1a 86       	std	Y+10, r1	; 0x0a
    518a:	15 c0       	rjmp	.+42     	; 0x51b6 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    518c:	29 81       	ldd	r18, Y+1	; 0x01
    518e:	3a 81       	ldd	r19, Y+2	; 0x02
    5190:	89 85       	ldd	r24, Y+9	; 0x09
    5192:	9a 85       	ldd	r25, Y+10	; 0x0a
    5194:	82 0f       	add	r24, r18
    5196:	93 1f       	adc	r25, r19
    5198:	29 85       	ldd	r18, Y+9	; 0x09
    519a:	3a 85       	ldd	r19, Y+10	; 0x0a
    519c:	24 54       	subi	r18, 0x44	; 68
    519e:	33 4d       	sbci	r19, 0xD3	; 211
    51a0:	f9 01       	movw	r30, r18
    51a2:	20 81       	ld	r18, Z
    51a4:	80 53       	subi	r24, 0x30	; 48
    51a6:	93 4d       	sbci	r25, 0xD3	; 211
    51a8:	fc 01       	movw	r30, r24
    51aa:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    51ac:	89 85       	ldd	r24, Y+9	; 0x09
    51ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    51b0:	01 96       	adiw	r24, 0x01	; 1
    51b2:	89 87       	std	Y+9, r24	; 0x09
    51b4:	9a 87       	std	Y+10, r25	; 0x0a
    51b6:	8c eb       	ldi	r24, 0xBC	; 188
    51b8:	9c e2       	ldi	r25, 0x2C	; 44
    51ba:	0e 94 01 34 	call	0x6802	; 0x6802 <strlen>
    51be:	9c 01       	movw	r18, r24
    51c0:	89 85       	ldd	r24, Y+9	; 0x09
    51c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    51c4:	82 17       	cp	r24, r18
    51c6:	93 07       	cpc	r25, r19
    51c8:	08 f3       	brcs	.-62     	; 0x518c <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    51ca:	8c eb       	ldi	r24, 0xBC	; 188
    51cc:	9c e2       	ldi	r25, 0x2C	; 44
    51ce:	0e 94 01 34 	call	0x6802	; 0x6802 <strlen>
    51d2:	9c 01       	movw	r18, r24
    51d4:	89 81       	ldd	r24, Y+1	; 0x01
    51d6:	9a 81       	ldd	r25, Y+2	; 0x02
    51d8:	82 0f       	add	r24, r18
    51da:	93 1f       	adc	r25, r19
    51dc:	89 83       	std	Y+1, r24	; 0x01
    51de:	9a 83       	std	Y+2, r25	; 0x02
				break;
    51e0:	ed c0       	rjmp	.+474    	; 0x53bc <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    51e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    51e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    51e6:	9c 01       	movw	r18, r24
    51e8:	2e 5f       	subi	r18, 0xFE	; 254
    51ea:	3f 4f       	sbci	r19, 0xFF	; 255
    51ec:	2b af       	std	Y+59, r18	; 0x3b
    51ee:	3c af       	std	Y+60, r19	; 0x3c
    51f0:	fc 01       	movw	r30, r24
    51f2:	80 81       	ld	r24, Z
    51f4:	91 81       	ldd	r25, Z+1	; 0x01
    51f6:	89 8f       	std	Y+25, r24	; 0x19
    51f8:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    51fa:	89 8d       	ldd	r24, Y+25	; 0x19
    51fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    51fe:	40 e1       	ldi	r20, 0x10	; 16
    5200:	50 e0       	ldi	r21, 0x00	; 0
    5202:	6c eb       	ldi	r22, 0xBC	; 188
    5204:	7c e2       	ldi	r23, 0x2C	; 44
    5206:	0e 94 15 34 	call	0x682a	; 0x682a <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    520a:	1b 86       	std	Y+11, r1	; 0x0b
    520c:	1c 86       	std	Y+12, r1	; 0x0c
    520e:	15 c0       	rjmp	.+42     	; 0x523a <display_vprintf+0x268>
					str[length+i] = buffer[i];
    5210:	29 81       	ldd	r18, Y+1	; 0x01
    5212:	3a 81       	ldd	r19, Y+2	; 0x02
    5214:	8b 85       	ldd	r24, Y+11	; 0x0b
    5216:	9c 85       	ldd	r25, Y+12	; 0x0c
    5218:	82 0f       	add	r24, r18
    521a:	93 1f       	adc	r25, r19
    521c:	2b 85       	ldd	r18, Y+11	; 0x0b
    521e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5220:	24 54       	subi	r18, 0x44	; 68
    5222:	33 4d       	sbci	r19, 0xD3	; 211
    5224:	f9 01       	movw	r30, r18
    5226:	20 81       	ld	r18, Z
    5228:	80 53       	subi	r24, 0x30	; 48
    522a:	93 4d       	sbci	r25, 0xD3	; 211
    522c:	fc 01       	movw	r30, r24
    522e:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    5230:	8b 85       	ldd	r24, Y+11	; 0x0b
    5232:	9c 85       	ldd	r25, Y+12	; 0x0c
    5234:	01 96       	adiw	r24, 0x01	; 1
    5236:	8b 87       	std	Y+11, r24	; 0x0b
    5238:	9c 87       	std	Y+12, r25	; 0x0c
    523a:	8c eb       	ldi	r24, 0xBC	; 188
    523c:	9c e2       	ldi	r25, 0x2C	; 44
    523e:	0e 94 01 34 	call	0x6802	; 0x6802 <strlen>
    5242:	9c 01       	movw	r18, r24
    5244:	8b 85       	ldd	r24, Y+11	; 0x0b
    5246:	9c 85       	ldd	r25, Y+12	; 0x0c
    5248:	82 17       	cp	r24, r18
    524a:	93 07       	cpc	r25, r19
    524c:	08 f3       	brcs	.-62     	; 0x5210 <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    524e:	8c eb       	ldi	r24, 0xBC	; 188
    5250:	9c e2       	ldi	r25, 0x2C	; 44
    5252:	0e 94 01 34 	call	0x6802	; 0x6802 <strlen>
    5256:	9c 01       	movw	r18, r24
    5258:	89 81       	ldd	r24, Y+1	; 0x01
    525a:	9a 81       	ldd	r25, Y+2	; 0x02
    525c:	82 0f       	add	r24, r18
    525e:	93 1f       	adc	r25, r19
    5260:	89 83       	std	Y+1, r24	; 0x01
    5262:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5264:	ab c0       	rjmp	.+342    	; 0x53bc <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    5266:	8b ad       	ldd	r24, Y+59	; 0x3b
    5268:	9c ad       	ldd	r25, Y+60	; 0x3c
    526a:	9c 01       	movw	r18, r24
    526c:	2c 5f       	subi	r18, 0xFC	; 252
    526e:	3f 4f       	sbci	r19, 0xFF	; 255
    5270:	2b af       	std	Y+59, r18	; 0x3b
    5272:	3c af       	std	Y+60, r19	; 0x3c
    5274:	fc 01       	movw	r30, r24
    5276:	80 81       	ld	r24, Z
    5278:	91 81       	ldd	r25, Z+1	; 0x01
    527a:	a2 81       	ldd	r26, Z+2	; 0x02
    527c:	b3 81       	ldd	r27, Z+3	; 0x03
    527e:	8b 8f       	std	Y+27, r24	; 0x1b
    5280:	9c 8f       	std	Y+28, r25	; 0x1c
    5282:	ad 8f       	std	Y+29, r26	; 0x1d
    5284:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    5286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5288:	9c 8d       	ldd	r25, Y+28	; 0x1c
    528a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    528c:	be 8d       	ldd	r27, Y+30	; 0x1e
    528e:	ac 01       	movw	r20, r24
    5290:	bd 01       	movw	r22, r26
    5292:	8c eb       	ldi	r24, 0xBC	; 188
    5294:	9c e2       	ldi	r25, 0x2C	; 44
    5296:	0e 94 b8 2a 	call	0x5570	; 0x5570 <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    529a:	1d 86       	std	Y+13, r1	; 0x0d
    529c:	1e 86       	std	Y+14, r1	; 0x0e
    529e:	15 c0       	rjmp	.+42     	; 0x52ca <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    52a0:	29 81       	ldd	r18, Y+1	; 0x01
    52a2:	3a 81       	ldd	r19, Y+2	; 0x02
    52a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    52a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    52a8:	82 0f       	add	r24, r18
    52aa:	93 1f       	adc	r25, r19
    52ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    52ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    52b0:	24 54       	subi	r18, 0x44	; 68
    52b2:	33 4d       	sbci	r19, 0xD3	; 211
    52b4:	f9 01       	movw	r30, r18
    52b6:	20 81       	ld	r18, Z
    52b8:	80 53       	subi	r24, 0x30	; 48
    52ba:	93 4d       	sbci	r25, 0xD3	; 211
    52bc:	fc 01       	movw	r30, r24
    52be:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    52c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    52c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    52c4:	01 96       	adiw	r24, 0x01	; 1
    52c6:	8d 87       	std	Y+13, r24	; 0x0d
    52c8:	9e 87       	std	Y+14, r25	; 0x0e
    52ca:	8c eb       	ldi	r24, 0xBC	; 188
    52cc:	9c e2       	ldi	r25, 0x2C	; 44
    52ce:	0e 94 01 34 	call	0x6802	; 0x6802 <strlen>
    52d2:	9c 01       	movw	r18, r24
    52d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    52d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    52d8:	82 17       	cp	r24, r18
    52da:	93 07       	cpc	r25, r19
    52dc:	08 f3       	brcs	.-62     	; 0x52a0 <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    52de:	8c eb       	ldi	r24, 0xBC	; 188
    52e0:	9c e2       	ldi	r25, 0x2C	; 44
    52e2:	0e 94 01 34 	call	0x6802	; 0x6802 <strlen>
    52e6:	9c 01       	movw	r18, r24
    52e8:	89 81       	ldd	r24, Y+1	; 0x01
    52ea:	9a 81       	ldd	r25, Y+2	; 0x02
    52ec:	82 0f       	add	r24, r18
    52ee:	93 1f       	adc	r25, r19
    52f0:	89 83       	std	Y+1, r24	; 0x01
    52f2:	9a 83       	std	Y+2, r25	; 0x02
				break;
    52f4:	63 c0       	rjmp	.+198    	; 0x53bc <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    52f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    52f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    52fa:	9c 01       	movw	r18, r24
    52fc:	2c 5f       	subi	r18, 0xFC	; 252
    52fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5300:	2b af       	std	Y+59, r18	; 0x3b
    5302:	3c af       	std	Y+60, r19	; 0x3c
    5304:	fc 01       	movw	r30, r24
    5306:	80 81       	ld	r24, Z
    5308:	91 81       	ldd	r25, Z+1	; 0x01
    530a:	a2 81       	ldd	r26, Z+2	; 0x02
    530c:	b3 81       	ldd	r27, Z+3	; 0x03
    530e:	8b 8f       	std	Y+27, r24	; 0x1b
    5310:	9c 8f       	std	Y+28, r25	; 0x1c
    5312:	ad 8f       	std	Y+29, r26	; 0x1d
    5314:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    5316:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5318:	9c 8d       	ldd	r25, Y+28	; 0x1c
    531a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    531c:	be 8d       	ldd	r27, Y+30	; 0x1e
    531e:	ac 01       	movw	r20, r24
    5320:	bd 01       	movw	r22, r26
    5322:	8c eb       	ldi	r24, 0xBC	; 188
    5324:	9c e2       	ldi	r25, 0x2C	; 44
    5326:	0e 94 07 2c 	call	0x580e	; 0x580e <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    532a:	1f 86       	std	Y+15, r1	; 0x0f
    532c:	18 8a       	std	Y+16, r1	; 0x10
    532e:	15 c0       	rjmp	.+42     	; 0x535a <display_vprintf+0x388>
					str[length+i] = buffer[i];
    5330:	29 81       	ldd	r18, Y+1	; 0x01
    5332:	3a 81       	ldd	r19, Y+2	; 0x02
    5334:	8f 85       	ldd	r24, Y+15	; 0x0f
    5336:	98 89       	ldd	r25, Y+16	; 0x10
    5338:	82 0f       	add	r24, r18
    533a:	93 1f       	adc	r25, r19
    533c:	2f 85       	ldd	r18, Y+15	; 0x0f
    533e:	38 89       	ldd	r19, Y+16	; 0x10
    5340:	24 54       	subi	r18, 0x44	; 68
    5342:	33 4d       	sbci	r19, 0xD3	; 211
    5344:	f9 01       	movw	r30, r18
    5346:	20 81       	ld	r18, Z
    5348:	80 53       	subi	r24, 0x30	; 48
    534a:	93 4d       	sbci	r25, 0xD3	; 211
    534c:	fc 01       	movw	r30, r24
    534e:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    5350:	8f 85       	ldd	r24, Y+15	; 0x0f
    5352:	98 89       	ldd	r25, Y+16	; 0x10
    5354:	01 96       	adiw	r24, 0x01	; 1
    5356:	8f 87       	std	Y+15, r24	; 0x0f
    5358:	98 8b       	std	Y+16, r25	; 0x10
    535a:	8c eb       	ldi	r24, 0xBC	; 188
    535c:	9c e2       	ldi	r25, 0x2C	; 44
    535e:	0e 94 01 34 	call	0x6802	; 0x6802 <strlen>
    5362:	9c 01       	movw	r18, r24
    5364:	8f 85       	ldd	r24, Y+15	; 0x0f
    5366:	98 89       	ldd	r25, Y+16	; 0x10
    5368:	82 17       	cp	r24, r18
    536a:	93 07       	cpc	r25, r19
    536c:	08 f3       	brcs	.-62     	; 0x5330 <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    536e:	8c eb       	ldi	r24, 0xBC	; 188
    5370:	9c e2       	ldi	r25, 0x2C	; 44
    5372:	0e 94 01 34 	call	0x6802	; 0x6802 <strlen>
    5376:	9c 01       	movw	r18, r24
    5378:	89 81       	ldd	r24, Y+1	; 0x01
    537a:	9a 81       	ldd	r25, Y+2	; 0x02
    537c:	82 0f       	add	r24, r18
    537e:	93 1f       	adc	r25, r19
    5380:	89 83       	std	Y+1, r24	; 0x01
    5382:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5384:	00 00       	nop
    5386:	1a c0       	rjmp	.+52     	; 0x53bc <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    5388:	89 81       	ldd	r24, Y+1	; 0x01
    538a:	9a 81       	ldd	r25, Y+2	; 0x02
    538c:	80 53       	subi	r24, 0x30	; 48
    538e:	93 4d       	sbci	r25, 0xD3	; 211
    5390:	2d 89       	ldd	r18, Y+21	; 0x15
    5392:	fc 01       	movw	r30, r24
    5394:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    5396:	89 81       	ldd	r24, Y+1	; 0x01
    5398:	9a 81       	ldd	r25, Y+2	; 0x02
    539a:	80 53       	subi	r24, 0x30	; 48
    539c:	93 4d       	sbci	r25, 0xD3	; 211
    539e:	fc 01       	movw	r30, r24
    53a0:	80 81       	ld	r24, Z
    53a2:	8a 30       	cpi	r24, 0x0A	; 10
    53a4:	31 f4       	brne	.+12     	; 0x53b2 <display_vprintf+0x3e0>
				str[length] = '\0';				
    53a6:	89 81       	ldd	r24, Y+1	; 0x01
    53a8:	9a 81       	ldd	r25, Y+2	; 0x02
    53aa:	80 53       	subi	r24, 0x30	; 48
    53ac:	93 4d       	sbci	r25, 0xD3	; 211
    53ae:	fc 01       	movw	r30, r24
    53b0:	10 82       	st	Z, r1
			}
			length++;
    53b2:	89 81       	ldd	r24, Y+1	; 0x01
    53b4:	9a 81       	ldd	r25, Y+2	; 0x02
    53b6:	01 96       	adiw	r24, 0x01	; 1
    53b8:	89 83       	std	Y+1, r24	; 0x01
    53ba:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    53bc:	89 ad       	ldd	r24, Y+57	; 0x39
    53be:	9a ad       	ldd	r25, Y+58	; 0x3a
    53c0:	9c 01       	movw	r18, r24
    53c2:	2f 5f       	subi	r18, 0xFF	; 255
    53c4:	3f 4f       	sbci	r19, 0xFF	; 255
    53c6:	29 af       	std	Y+57, r18	; 0x39
    53c8:	3a af       	std	Y+58, r19	; 0x3a
    53ca:	fc 01       	movw	r30, r24
    53cc:	80 81       	ld	r24, Z
    53ce:	8d 8b       	std	Y+21, r24	; 0x15
    53d0:	8d 89       	ldd	r24, Y+21	; 0x15
    53d2:	88 23       	and	r24, r24
    53d4:	09 f0       	breq	.+2      	; 0x53d8 <display_vprintf+0x406>
    53d6:	34 ce       	rjmp	.-920    	; 0x5040 <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    53d8:	29 81       	ldd	r18, Y+1	; 0x01
    53da:	3a 81       	ldd	r19, Y+2	; 0x02
    53dc:	8f a9       	ldd	r24, Y+55	; 0x37
    53de:	98 ad       	ldd	r25, Y+56	; 0x38
    53e0:	82 0f       	add	r24, r18
    53e2:	93 1f       	adc	r25, r19
    53e4:	44 97       	sbiw	r24, 0x14	; 20
    53e6:	54 f0       	brlt	.+20     	; 0x53fc <display_vprintf+0x42a>
		length = 20-pos;
    53e8:	24 e1       	ldi	r18, 0x14	; 20
    53ea:	30 e0       	ldi	r19, 0x00	; 0
    53ec:	8f a9       	ldd	r24, Y+55	; 0x37
    53ee:	98 ad       	ldd	r25, Y+56	; 0x38
    53f0:	a9 01       	movw	r20, r18
    53f2:	48 1b       	sub	r20, r24
    53f4:	59 0b       	sbc	r21, r25
    53f6:	ca 01       	movw	r24, r20
    53f8:	89 83       	std	Y+1, r24	; 0x01
    53fa:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    53fc:	19 8a       	std	Y+17, r1	; 0x11
    53fe:	1a 8a       	std	Y+18, r1	; 0x12
    5400:	0e c0       	rjmp	.+28     	; 0x541e <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    5402:	9e 01       	movw	r18, r28
    5404:	2f 5d       	subi	r18, 0xDF	; 223
    5406:	3f 4f       	sbci	r19, 0xFF	; 255
    5408:	89 89       	ldd	r24, Y+17	; 0x11
    540a:	9a 89       	ldd	r25, Y+18	; 0x12
    540c:	82 0f       	add	r24, r18
    540e:	93 1f       	adc	r25, r19
    5410:	fc 01       	movw	r30, r24
    5412:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    5414:	89 89       	ldd	r24, Y+17	; 0x11
    5416:	9a 89       	ldd	r25, Y+18	; 0x12
    5418:	01 96       	adiw	r24, 0x01	; 1
    541a:	89 8b       	std	Y+17, r24	; 0x11
    541c:	9a 8b       	std	Y+18, r25	; 0x12
    541e:	89 89       	ldd	r24, Y+17	; 0x11
    5420:	9a 89       	ldd	r25, Y+18	; 0x12
    5422:	44 97       	sbiw	r24, 0x14	; 20
    5424:	74 f3       	brlt	.-36     	; 0x5402 <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    5426:	8d a9       	ldd	r24, Y+53	; 0x35
    5428:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    542a:	8f a9       	ldd	r24, Y+55	; 0x37
    542c:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    542e:	1b 8a       	std	Y+19, r1	; 0x13
    5430:	1c 8a       	std	Y+20, r1	; 0x14
    5432:	14 c0       	rjmp	.+40     	; 0x545c <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    5434:	8b 89       	ldd	r24, Y+19	; 0x13
    5436:	9c 89       	ldd	r25, Y+20	; 0x14
    5438:	80 53       	subi	r24, 0x30	; 48
    543a:	93 4d       	sbci	r25, 0xD3	; 211
    543c:	fc 01       	movw	r30, r24
    543e:	40 81       	ld	r20, Z
    5440:	9e 01       	movw	r18, r28
    5442:	2f 5d       	subi	r18, 0xDF	; 223
    5444:	3f 4f       	sbci	r19, 0xFF	; 255
    5446:	8b 89       	ldd	r24, Y+19	; 0x13
    5448:	9c 89       	ldd	r25, Y+20	; 0x14
    544a:	82 0f       	add	r24, r18
    544c:	93 1f       	adc	r25, r19
    544e:	fc 01       	movw	r30, r24
    5450:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    5452:	8b 89       	ldd	r24, Y+19	; 0x13
    5454:	9c 89       	ldd	r25, Y+20	; 0x14
    5456:	01 96       	adiw	r24, 0x01	; 1
    5458:	8b 8b       	std	Y+19, r24	; 0x13
    545a:	9c 8b       	std	Y+20, r25	; 0x14
    545c:	2b 89       	ldd	r18, Y+19	; 0x13
    545e:	3c 89       	ldd	r19, Y+20	; 0x14
    5460:	89 81       	ldd	r24, Y+1	; 0x01
    5462:	9a 81       	ldd	r25, Y+2	; 0x02
    5464:	28 17       	cp	r18, r24
    5466:	39 07       	cpc	r19, r25
    5468:	2c f3       	brlt	.-54     	; 0x5434 <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    546a:	80 91 f9 2c 	lds	r24, 0x2CF9	; 0x802cf9 <displayLineQueue>
    546e:	90 91 fa 2c 	lds	r25, 0x2CFA	; 0x802cfa <displayLineQueue+0x1>
    5472:	be 01       	movw	r22, r28
    5474:	61 5e       	subi	r22, 0xE1	; 225
    5476:	7f 4f       	sbci	r23, 0xFF	; 255
    5478:	00 e0       	ldi	r16, 0x00	; 0
    547a:	2f ef       	ldi	r18, 0xFF	; 255
    547c:	3f ef       	ldi	r19, 0xFF	; 255
    547e:	a9 01       	movw	r20, r18
    5480:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
	
	
	return length;
    5484:	89 81       	ldd	r24, Y+1	; 0x01
    5486:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5488:	ec 96       	adiw	r28, 0x3c	; 60
    548a:	cd bf       	out	0x3d, r28	; 61
    548c:	de bf       	out	0x3e, r29	; 62
    548e:	df 91       	pop	r29
    5490:	cf 91       	pop	r28
    5492:	0f 91       	pop	r16
    5494:	08 95       	ret

00005496 <normalize>:

static int normalize(double *val) {
    5496:	cf 93       	push	r28
    5498:	df 93       	push	r29
    549a:	cd b7       	in	r28, 0x3d	; 61
    549c:	de b7       	in	r29, 0x3e	; 62
    549e:	28 97       	sbiw	r28, 0x08	; 8
    54a0:	cd bf       	out	0x3d, r28	; 61
    54a2:	de bf       	out	0x3e, r29	; 62
    54a4:	8f 83       	std	Y+7, r24	; 0x07
    54a6:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    54a8:	19 82       	std	Y+1, r1	; 0x01
    54aa:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    54ac:	8f 81       	ldd	r24, Y+7	; 0x07
    54ae:	98 85       	ldd	r25, Y+8	; 0x08
    54b0:	fc 01       	movw	r30, r24
    54b2:	80 81       	ld	r24, Z
    54b4:	91 81       	ldd	r25, Z+1	; 0x01
    54b6:	a2 81       	ldd	r26, Z+2	; 0x02
    54b8:	b3 81       	ldd	r27, Z+3	; 0x03
    54ba:	8b 83       	std	Y+3, r24	; 0x03
    54bc:	9c 83       	std	Y+4, r25	; 0x04
    54be:	ad 83       	std	Y+5, r26	; 0x05
    54c0:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    54c2:	15 c0       	rjmp	.+42     	; 0x54ee <normalize+0x58>
        value /= 10.0;
    54c4:	20 e0       	ldi	r18, 0x00	; 0
    54c6:	30 e0       	ldi	r19, 0x00	; 0
    54c8:	40 e2       	ldi	r20, 0x20	; 32
    54ca:	51 e4       	ldi	r21, 0x41	; 65
    54cc:	6b 81       	ldd	r22, Y+3	; 0x03
    54ce:	7c 81       	ldd	r23, Y+4	; 0x04
    54d0:	8d 81       	ldd	r24, Y+5	; 0x05
    54d2:	9e 81       	ldd	r25, Y+6	; 0x06
    54d4:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <__divsf3>
    54d8:	dc 01       	movw	r26, r24
    54da:	cb 01       	movw	r24, r22
    54dc:	8b 83       	std	Y+3, r24	; 0x03
    54de:	9c 83       	std	Y+4, r25	; 0x04
    54e0:	ad 83       	std	Y+5, r26	; 0x05
    54e2:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    54e4:	89 81       	ldd	r24, Y+1	; 0x01
    54e6:	9a 81       	ldd	r25, Y+2	; 0x02
    54e8:	01 96       	adiw	r24, 0x01	; 1
    54ea:	89 83       	std	Y+1, r24	; 0x01
    54ec:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    54ee:	20 e0       	ldi	r18, 0x00	; 0
    54f0:	30 e0       	ldi	r19, 0x00	; 0
    54f2:	40 e8       	ldi	r20, 0x80	; 128
    54f4:	5f e3       	ldi	r21, 0x3F	; 63
    54f6:	6b 81       	ldd	r22, Y+3	; 0x03
    54f8:	7c 81       	ldd	r23, Y+4	; 0x04
    54fa:	8d 81       	ldd	r24, Y+5	; 0x05
    54fc:	9e 81       	ldd	r25, Y+6	; 0x06
    54fe:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <__gesf2>
    5502:	88 23       	and	r24, r24
    5504:	fc f6       	brge	.-66     	; 0x54c4 <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    5506:	15 c0       	rjmp	.+42     	; 0x5532 <normalize+0x9c>
        value *= 10.0;
    5508:	20 e0       	ldi	r18, 0x00	; 0
    550a:	30 e0       	ldi	r19, 0x00	; 0
    550c:	40 e2       	ldi	r20, 0x20	; 32
    550e:	51 e4       	ldi	r21, 0x41	; 65
    5510:	6b 81       	ldd	r22, Y+3	; 0x03
    5512:	7c 81       	ldd	r23, Y+4	; 0x04
    5514:	8d 81       	ldd	r24, Y+5	; 0x05
    5516:	9e 81       	ldd	r25, Y+6	; 0x06
    5518:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <__mulsf3>
    551c:	dc 01       	movw	r26, r24
    551e:	cb 01       	movw	r24, r22
    5520:	8b 83       	std	Y+3, r24	; 0x03
    5522:	9c 83       	std	Y+4, r25	; 0x04
    5524:	ad 83       	std	Y+5, r26	; 0x05
    5526:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    5528:	89 81       	ldd	r24, Y+1	; 0x01
    552a:	9a 81       	ldd	r25, Y+2	; 0x02
    552c:	01 97       	sbiw	r24, 0x01	; 1
    552e:	89 83       	std	Y+1, r24	; 0x01
    5530:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    5532:	2d ec       	ldi	r18, 0xCD	; 205
    5534:	3c ec       	ldi	r19, 0xCC	; 204
    5536:	4c ec       	ldi	r20, 0xCC	; 204
    5538:	5d e3       	ldi	r21, 0x3D	; 61
    553a:	6b 81       	ldd	r22, Y+3	; 0x03
    553c:	7c 81       	ldd	r23, Y+4	; 0x04
    553e:	8d 81       	ldd	r24, Y+5	; 0x05
    5540:	9e 81       	ldd	r25, Y+6	; 0x06
    5542:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <__cmpsf2>
    5546:	88 23       	and	r24, r24
    5548:	fc f2       	brlt	.-66     	; 0x5508 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    554a:	2f 81       	ldd	r18, Y+7	; 0x07
    554c:	38 85       	ldd	r19, Y+8	; 0x08
    554e:	8b 81       	ldd	r24, Y+3	; 0x03
    5550:	9c 81       	ldd	r25, Y+4	; 0x04
    5552:	ad 81       	ldd	r26, Y+5	; 0x05
    5554:	be 81       	ldd	r27, Y+6	; 0x06
    5556:	f9 01       	movw	r30, r18
    5558:	80 83       	st	Z, r24
    555a:	91 83       	std	Z+1, r25	; 0x01
    555c:	a2 83       	std	Z+2, r26	; 0x02
    555e:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    5560:	89 81       	ldd	r24, Y+1	; 0x01
    5562:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5564:	28 96       	adiw	r28, 0x08	; 8
    5566:	cd bf       	out	0x3d, r28	; 61
    5568:	de bf       	out	0x3e, r29	; 62
    556a:	df 91       	pop	r29
    556c:	cf 91       	pop	r28
    556e:	08 95       	ret

00005570 <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    5570:	cf 92       	push	r12
    5572:	df 92       	push	r13
    5574:	ef 92       	push	r14
    5576:	ff 92       	push	r15
    5578:	cf 93       	push	r28
    557a:	df 93       	push	r29
    557c:	cd b7       	in	r28, 0x3d	; 61
    557e:	de b7       	in	r29, 0x3e	; 62
    5580:	2e 97       	sbiw	r28, 0x0e	; 14
    5582:	cd bf       	out	0x3d, r28	; 61
    5584:	de bf       	out	0x3e, r29	; 62
    5586:	89 87       	std	Y+9, r24	; 0x09
    5588:	9a 87       	std	Y+10, r25	; 0x0a
    558a:	4b 87       	std	Y+11, r20	; 0x0b
    558c:	5c 87       	std	Y+12, r21	; 0x0c
    558e:	6d 87       	std	Y+13, r22	; 0x0d
    5590:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    5592:	19 82       	std	Y+1, r1	; 0x01
    5594:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    5596:	1b 82       	std	Y+3, r1	; 0x03
    5598:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    559a:	8b 85       	ldd	r24, Y+11	; 0x0b
    559c:	9c 85       	ldd	r25, Y+12	; 0x0c
    559e:	ad 85       	ldd	r26, Y+13	; 0x0d
    55a0:	be 85       	ldd	r27, Y+14	; 0x0e
    55a2:	20 e0       	ldi	r18, 0x00	; 0
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	a9 01       	movw	r20, r18
    55a8:	bc 01       	movw	r22, r24
    55aa:	cd 01       	movw	r24, r26
    55ac:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <__cmpsf2>
    55b0:	88 23       	and	r24, r24
    55b2:	59 f4       	brne	.+22     	; 0x55ca <ftoa_fixed+0x5a>
        buffer[0] = '0';
    55b4:	89 85       	ldd	r24, Y+9	; 0x09
    55b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55b8:	20 e3       	ldi	r18, 0x30	; 48
    55ba:	fc 01       	movw	r30, r24
    55bc:	20 83       	st	Z, r18
        buffer[1] = '\0';
    55be:	89 85       	ldd	r24, Y+9	; 0x09
    55c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    55c2:	01 96       	adiw	r24, 0x01	; 1
    55c4:	fc 01       	movw	r30, r24
    55c6:	10 82       	st	Z, r1
        return;
    55c8:	18 c1       	rjmp	.+560    	; 0x57fa <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    55ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    55cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    55ce:	ad 85       	ldd	r26, Y+13	; 0x0d
    55d0:	be 85       	ldd	r27, Y+14	; 0x0e
    55d2:	20 e0       	ldi	r18, 0x00	; 0
    55d4:	30 e0       	ldi	r19, 0x00	; 0
    55d6:	a9 01       	movw	r20, r18
    55d8:	bc 01       	movw	r22, r24
    55da:	cd 01       	movw	r24, r26
    55dc:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <__cmpsf2>
    55e0:	88 23       	and	r24, r24
    55e2:	9c f4       	brge	.+38     	; 0x560a <ftoa_fixed+0x9a>
        *buffer++ = '-';
    55e4:	89 85       	ldd	r24, Y+9	; 0x09
    55e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55e8:	9c 01       	movw	r18, r24
    55ea:	2f 5f       	subi	r18, 0xFF	; 255
    55ec:	3f 4f       	sbci	r19, 0xFF	; 255
    55ee:	29 87       	std	Y+9, r18	; 0x09
    55f0:	3a 87       	std	Y+10, r19	; 0x0a
    55f2:	2d e2       	ldi	r18, 0x2D	; 45
    55f4:	fc 01       	movw	r30, r24
    55f6:	20 83       	st	Z, r18
        value = -value;
    55f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    55fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    55fc:	ad 85       	ldd	r26, Y+13	; 0x0d
    55fe:	be 85       	ldd	r27, Y+14	; 0x0e
    5600:	b0 58       	subi	r27, 0x80	; 128
    5602:	8b 87       	std	Y+11, r24	; 0x0b
    5604:	9c 87       	std	Y+12, r25	; 0x0c
    5606:	ad 87       	std	Y+13, r26	; 0x0d
    5608:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    560a:	ce 01       	movw	r24, r28
    560c:	0b 96       	adiw	r24, 0x0b	; 11
    560e:	0e 94 4b 2a 	call	0x5496	; 0x5496 <normalize>
    5612:	89 83       	std	Y+1, r24	; 0x01
    5614:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    5616:	53 c0       	rjmp	.+166    	; 0x56be <ftoa_fixed+0x14e>
        int digit = value * 10;
    5618:	8b 85       	ldd	r24, Y+11	; 0x0b
    561a:	9c 85       	ldd	r25, Y+12	; 0x0c
    561c:	ad 85       	ldd	r26, Y+13	; 0x0d
    561e:	be 85       	ldd	r27, Y+14	; 0x0e
    5620:	20 e0       	ldi	r18, 0x00	; 0
    5622:	30 e0       	ldi	r19, 0x00	; 0
    5624:	40 e2       	ldi	r20, 0x20	; 32
    5626:	51 e4       	ldi	r21, 0x41	; 65
    5628:	bc 01       	movw	r22, r24
    562a:	cd 01       	movw	r24, r26
    562c:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <__mulsf3>
    5630:	dc 01       	movw	r26, r24
    5632:	cb 01       	movw	r24, r22
    5634:	bc 01       	movw	r22, r24
    5636:	cd 01       	movw	r24, r26
    5638:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__fixsfsi>
    563c:	dc 01       	movw	r26, r24
    563e:	cb 01       	movw	r24, r22
    5640:	8d 83       	std	Y+5, r24	; 0x05
    5642:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    5644:	89 85       	ldd	r24, Y+9	; 0x09
    5646:	9a 85       	ldd	r25, Y+10	; 0x0a
    5648:	9c 01       	movw	r18, r24
    564a:	2f 5f       	subi	r18, 0xFF	; 255
    564c:	3f 4f       	sbci	r19, 0xFF	; 255
    564e:	29 87       	std	Y+9, r18	; 0x09
    5650:	3a 87       	std	Y+10, r19	; 0x0a
    5652:	2d 81       	ldd	r18, Y+5	; 0x05
    5654:	20 5d       	subi	r18, 0xD0	; 208
    5656:	fc 01       	movw	r30, r24
    5658:	20 83       	st	Z, r18
        value = value * 10 - digit;
    565a:	8b 85       	ldd	r24, Y+11	; 0x0b
    565c:	9c 85       	ldd	r25, Y+12	; 0x0c
    565e:	ad 85       	ldd	r26, Y+13	; 0x0d
    5660:	be 85       	ldd	r27, Y+14	; 0x0e
    5662:	20 e0       	ldi	r18, 0x00	; 0
    5664:	30 e0       	ldi	r19, 0x00	; 0
    5666:	40 e2       	ldi	r20, 0x20	; 32
    5668:	51 e4       	ldi	r21, 0x41	; 65
    566a:	bc 01       	movw	r22, r24
    566c:	cd 01       	movw	r24, r26
    566e:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <__mulsf3>
    5672:	dc 01       	movw	r26, r24
    5674:	cb 01       	movw	r24, r22
    5676:	6c 01       	movw	r12, r24
    5678:	7d 01       	movw	r14, r26
    567a:	8d 81       	ldd	r24, Y+5	; 0x05
    567c:	9e 81       	ldd	r25, Y+6	; 0x06
    567e:	09 2e       	mov	r0, r25
    5680:	00 0c       	add	r0, r0
    5682:	aa 0b       	sbc	r26, r26
    5684:	bb 0b       	sbc	r27, r27
    5686:	bc 01       	movw	r22, r24
    5688:	cd 01       	movw	r24, r26
    568a:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <__floatsisf>
    568e:	dc 01       	movw	r26, r24
    5690:	cb 01       	movw	r24, r22
    5692:	9c 01       	movw	r18, r24
    5694:	ad 01       	movw	r20, r26
    5696:	c7 01       	movw	r24, r14
    5698:	b6 01       	movw	r22, r12
    569a:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__subsf3>
    569e:	dc 01       	movw	r26, r24
    56a0:	cb 01       	movw	r24, r22
    56a2:	8b 87       	std	Y+11, r24	; 0x0b
    56a4:	9c 87       	std	Y+12, r25	; 0x0c
    56a6:	ad 87       	std	Y+13, r26	; 0x0d
    56a8:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    56aa:	8b 81       	ldd	r24, Y+3	; 0x03
    56ac:	9c 81       	ldd	r25, Y+4	; 0x04
    56ae:	01 96       	adiw	r24, 0x01	; 1
    56b0:	8b 83       	std	Y+3, r24	; 0x03
    56b2:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    56b4:	89 81       	ldd	r24, Y+1	; 0x01
    56b6:	9a 81       	ldd	r25, Y+2	; 0x02
    56b8:	01 97       	sbiw	r24, 0x01	; 1
    56ba:	89 83       	std	Y+1, r24	; 0x01
    56bc:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    56be:	89 81       	ldd	r24, Y+1	; 0x01
    56c0:	9a 81       	ldd	r25, Y+2	; 0x02
    56c2:	18 16       	cp	r1, r24
    56c4:	19 06       	cpc	r1, r25
    56c6:	0c f4       	brge	.+2      	; 0x56ca <ftoa_fixed+0x15a>
    56c8:	a7 cf       	rjmp	.-178    	; 0x5618 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    56ca:	8b 81       	ldd	r24, Y+3	; 0x03
    56cc:	9c 81       	ldd	r25, Y+4	; 0x04
    56ce:	89 2b       	or	r24, r25
    56d0:	51 f4       	brne	.+20     	; 0x56e6 <ftoa_fixed+0x176>
        *buffer++ = '0';
    56d2:	89 85       	ldd	r24, Y+9	; 0x09
    56d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d6:	9c 01       	movw	r18, r24
    56d8:	2f 5f       	subi	r18, 0xFF	; 255
    56da:	3f 4f       	sbci	r19, 0xFF	; 255
    56dc:	29 87       	std	Y+9, r18	; 0x09
    56de:	3a 87       	std	Y+10, r19	; 0x0a
    56e0:	20 e3       	ldi	r18, 0x30	; 48
    56e2:	fc 01       	movw	r30, r24
    56e4:	20 83       	st	Z, r18

    *buffer++ = '.';
    56e6:	89 85       	ldd	r24, Y+9	; 0x09
    56e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ea:	9c 01       	movw	r18, r24
    56ec:	2f 5f       	subi	r18, 0xFF	; 255
    56ee:	3f 4f       	sbci	r19, 0xFF	; 255
    56f0:	29 87       	std	Y+9, r18	; 0x09
    56f2:	3a 87       	std	Y+10, r19	; 0x0a
    56f4:	2e e2       	ldi	r18, 0x2E	; 46
    56f6:	fc 01       	movw	r30, r24
    56f8:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    56fa:	14 c0       	rjmp	.+40     	; 0x5724 <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    56fc:	89 85       	ldd	r24, Y+9	; 0x09
    56fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5700:	9c 01       	movw	r18, r24
    5702:	2f 5f       	subi	r18, 0xFF	; 255
    5704:	3f 4f       	sbci	r19, 0xFF	; 255
    5706:	29 87       	std	Y+9, r18	; 0x09
    5708:	3a 87       	std	Y+10, r19	; 0x0a
    570a:	20 e3       	ldi	r18, 0x30	; 48
    570c:	fc 01       	movw	r30, r24
    570e:	20 83       	st	Z, r18
        --exponent;
    5710:	89 81       	ldd	r24, Y+1	; 0x01
    5712:	9a 81       	ldd	r25, Y+2	; 0x02
    5714:	01 97       	sbiw	r24, 0x01	; 1
    5716:	89 83       	std	Y+1, r24	; 0x01
    5718:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    571a:	8b 81       	ldd	r24, Y+3	; 0x03
    571c:	9c 81       	ldd	r25, Y+4	; 0x04
    571e:	01 96       	adiw	r24, 0x01	; 1
    5720:	8b 83       	std	Y+3, r24	; 0x03
    5722:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    5724:	89 81       	ldd	r24, Y+1	; 0x01
    5726:	9a 81       	ldd	r25, Y+2	; 0x02
    5728:	99 23       	and	r25, r25
    572a:	0c f0       	brlt	.+2      	; 0x572e <ftoa_fixed+0x1be>
    572c:	58 c0       	rjmp	.+176    	; 0x57de <ftoa_fixed+0x26e>
    572e:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <width.5062>
    5732:	90 91 64 20 	lds	r25, 0x2064	; 0x802064 <width.5062+0x1>
    5736:	2b 81       	ldd	r18, Y+3	; 0x03
    5738:	3c 81       	ldd	r19, Y+4	; 0x04
    573a:	28 17       	cp	r18, r24
    573c:	39 07       	cpc	r19, r25
    573e:	f4 f2       	brlt	.-68     	; 0x56fc <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    5740:	4e c0       	rjmp	.+156    	; 0x57de <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    5742:	8b 85       	ldd	r24, Y+11	; 0x0b
    5744:	9c 85       	ldd	r25, Y+12	; 0x0c
    5746:	ad 85       	ldd	r26, Y+13	; 0x0d
    5748:	be 85       	ldd	r27, Y+14	; 0x0e
    574a:	20 e0       	ldi	r18, 0x00	; 0
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	40 e2       	ldi	r20, 0x20	; 32
    5750:	51 e4       	ldi	r21, 0x41	; 65
    5752:	bc 01       	movw	r22, r24
    5754:	cd 01       	movw	r24, r26
    5756:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <__mulsf3>
    575a:	dc 01       	movw	r26, r24
    575c:	cb 01       	movw	r24, r22
    575e:	bc 01       	movw	r22, r24
    5760:	cd 01       	movw	r24, r26
    5762:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__fixsfsi>
    5766:	dc 01       	movw	r26, r24
    5768:	cb 01       	movw	r24, r22
    576a:	8f 83       	std	Y+7, r24	; 0x07
    576c:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    576e:	89 85       	ldd	r24, Y+9	; 0x09
    5770:	9a 85       	ldd	r25, Y+10	; 0x0a
    5772:	9c 01       	movw	r18, r24
    5774:	2f 5f       	subi	r18, 0xFF	; 255
    5776:	3f 4f       	sbci	r19, 0xFF	; 255
    5778:	29 87       	std	Y+9, r18	; 0x09
    577a:	3a 87       	std	Y+10, r19	; 0x0a
    577c:	2f 81       	ldd	r18, Y+7	; 0x07
    577e:	20 5d       	subi	r18, 0xD0	; 208
    5780:	fc 01       	movw	r30, r24
    5782:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    5784:	8b 85       	ldd	r24, Y+11	; 0x0b
    5786:	9c 85       	ldd	r25, Y+12	; 0x0c
    5788:	ad 85       	ldd	r26, Y+13	; 0x0d
    578a:	be 85       	ldd	r27, Y+14	; 0x0e
    578c:	20 e0       	ldi	r18, 0x00	; 0
    578e:	30 e0       	ldi	r19, 0x00	; 0
    5790:	40 e2       	ldi	r20, 0x20	; 32
    5792:	51 e4       	ldi	r21, 0x41	; 65
    5794:	bc 01       	movw	r22, r24
    5796:	cd 01       	movw	r24, r26
    5798:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <__mulsf3>
    579c:	dc 01       	movw	r26, r24
    579e:	cb 01       	movw	r24, r22
    57a0:	6c 01       	movw	r12, r24
    57a2:	7d 01       	movw	r14, r26
    57a4:	8f 81       	ldd	r24, Y+7	; 0x07
    57a6:	98 85       	ldd	r25, Y+8	; 0x08
    57a8:	09 2e       	mov	r0, r25
    57aa:	00 0c       	add	r0, r0
    57ac:	aa 0b       	sbc	r26, r26
    57ae:	bb 0b       	sbc	r27, r27
    57b0:	bc 01       	movw	r22, r24
    57b2:	cd 01       	movw	r24, r26
    57b4:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <__floatsisf>
    57b8:	dc 01       	movw	r26, r24
    57ba:	cb 01       	movw	r24, r22
    57bc:	9c 01       	movw	r18, r24
    57be:	ad 01       	movw	r20, r26
    57c0:	c7 01       	movw	r24, r14
    57c2:	b6 01       	movw	r22, r12
    57c4:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__subsf3>
    57c8:	dc 01       	movw	r26, r24
    57ca:	cb 01       	movw	r24, r22
    57cc:	8b 87       	std	Y+11, r24	; 0x0b
    57ce:	9c 87       	std	Y+12, r25	; 0x0c
    57d0:	ad 87       	std	Y+13, r26	; 0x0d
    57d2:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    57d4:	8b 81       	ldd	r24, Y+3	; 0x03
    57d6:	9c 81       	ldd	r25, Y+4	; 0x04
    57d8:	01 96       	adiw	r24, 0x01	; 1
    57da:	8b 83       	std	Y+3, r24	; 0x03
    57dc:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    57de:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <width.5062>
    57e2:	90 91 64 20 	lds	r25, 0x2064	; 0x802064 <width.5062+0x1>
    57e6:	2b 81       	ldd	r18, Y+3	; 0x03
    57e8:	3c 81       	ldd	r19, Y+4	; 0x04
    57ea:	28 17       	cp	r18, r24
    57ec:	39 07       	cpc	r19, r25
    57ee:	0c f4       	brge	.+2      	; 0x57f2 <ftoa_fixed+0x282>
    57f0:	a8 cf       	rjmp	.-176    	; 0x5742 <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    57f2:	89 85       	ldd	r24, Y+9	; 0x09
    57f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    57f6:	fc 01       	movw	r30, r24
    57f8:	10 82       	st	Z, r1
}
    57fa:	2e 96       	adiw	r28, 0x0e	; 14
    57fc:	cd bf       	out	0x3d, r28	; 61
    57fe:	de bf       	out	0x3e, r29	; 62
    5800:	df 91       	pop	r29
    5802:	cf 91       	pop	r28
    5804:	ff 90       	pop	r15
    5806:	ef 90       	pop	r14
    5808:	df 90       	pop	r13
    580a:	cf 90       	pop	r12
    580c:	08 95       	ret

0000580e <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    580e:	cf 92       	push	r12
    5810:	df 92       	push	r13
    5812:	ef 92       	push	r14
    5814:	ff 92       	push	r15
    5816:	cf 93       	push	r28
    5818:	df 93       	push	r29
    581a:	cd b7       	in	r28, 0x3d	; 61
    581c:	de b7       	in	r29, 0x3e	; 62
    581e:	2e 97       	sbiw	r28, 0x0e	; 14
    5820:	cd bf       	out	0x3d, r28	; 61
    5822:	de bf       	out	0x3e, r29	; 62
    5824:	89 87       	std	Y+9, r24	; 0x09
    5826:	9a 87       	std	Y+10, r25	; 0x0a
    5828:	4b 87       	std	Y+11, r20	; 0x0b
    582a:	5c 87       	std	Y+12, r21	; 0x0c
    582c:	6d 87       	std	Y+13, r22	; 0x0d
    582e:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    5830:	1b 82       	std	Y+3, r1	; 0x03
    5832:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    5834:	8b 85       	ldd	r24, Y+11	; 0x0b
    5836:	9c 85       	ldd	r25, Y+12	; 0x0c
    5838:	ad 85       	ldd	r26, Y+13	; 0x0d
    583a:	be 85       	ldd	r27, Y+14	; 0x0e
    583c:	20 e0       	ldi	r18, 0x00	; 0
    583e:	30 e0       	ldi	r19, 0x00	; 0
    5840:	a9 01       	movw	r20, r18
    5842:	bc 01       	movw	r22, r24
    5844:	cd 01       	movw	r24, r26
    5846:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <__cmpsf2>
    584a:	88 23       	and	r24, r24
    584c:	59 f4       	brne	.+22     	; 0x5864 <ftoa_sci+0x56>
        buffer[0] = '0';
    584e:	89 85       	ldd	r24, Y+9	; 0x09
    5850:	9a 85       	ldd	r25, Y+10	; 0x0a
    5852:	20 e3       	ldi	r18, 0x30	; 48
    5854:	fc 01       	movw	r30, r24
    5856:	20 83       	st	Z, r18
        buffer[1] = '\0';
    5858:	89 85       	ldd	r24, Y+9	; 0x09
    585a:	9a 85       	ldd	r25, Y+10	; 0x0a
    585c:	01 96       	adiw	r24, 0x01	; 1
    585e:	fc 01       	movw	r30, r24
    5860:	10 82       	st	Z, r1
        return;
    5862:	ec c0       	rjmp	.+472    	; 0x5a3c <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    5864:	8b 85       	ldd	r24, Y+11	; 0x0b
    5866:	9c 85       	ldd	r25, Y+12	; 0x0c
    5868:	ad 85       	ldd	r26, Y+13	; 0x0d
    586a:	be 85       	ldd	r27, Y+14	; 0x0e
    586c:	20 e0       	ldi	r18, 0x00	; 0
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	a9 01       	movw	r20, r18
    5872:	bc 01       	movw	r22, r24
    5874:	cd 01       	movw	r24, r26
    5876:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <__cmpsf2>
    587a:	88 23       	and	r24, r24
    587c:	9c f4       	brge	.+38     	; 0x58a4 <ftoa_sci+0x96>
        *buffer++ = '-';
    587e:	89 85       	ldd	r24, Y+9	; 0x09
    5880:	9a 85       	ldd	r25, Y+10	; 0x0a
    5882:	9c 01       	movw	r18, r24
    5884:	2f 5f       	subi	r18, 0xFF	; 255
    5886:	3f 4f       	sbci	r19, 0xFF	; 255
    5888:	29 87       	std	Y+9, r18	; 0x09
    588a:	3a 87       	std	Y+10, r19	; 0x0a
    588c:	2d e2       	ldi	r18, 0x2D	; 45
    588e:	fc 01       	movw	r30, r24
    5890:	20 83       	st	Z, r18
        value = -value;
    5892:	8b 85       	ldd	r24, Y+11	; 0x0b
    5894:	9c 85       	ldd	r25, Y+12	; 0x0c
    5896:	ad 85       	ldd	r26, Y+13	; 0x0d
    5898:	be 85       	ldd	r27, Y+14	; 0x0e
    589a:	b0 58       	subi	r27, 0x80	; 128
    589c:	8b 87       	std	Y+11, r24	; 0x0b
    589e:	9c 87       	std	Y+12, r25	; 0x0c
    58a0:	ad 87       	std	Y+13, r26	; 0x0d
    58a2:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    58a4:	ce 01       	movw	r24, r28
    58a6:	0b 96       	adiw	r24, 0x0b	; 11
    58a8:	0e 94 4b 2a 	call	0x5496	; 0x5496 <normalize>
    58ac:	8b 83       	std	Y+3, r24	; 0x03
    58ae:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    58b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    58b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    58b4:	ad 85       	ldd	r26, Y+13	; 0x0d
    58b6:	be 85       	ldd	r27, Y+14	; 0x0e
    58b8:	20 e0       	ldi	r18, 0x00	; 0
    58ba:	30 e0       	ldi	r19, 0x00	; 0
    58bc:	40 e2       	ldi	r20, 0x20	; 32
    58be:	51 e4       	ldi	r21, 0x41	; 65
    58c0:	bc 01       	movw	r22, r24
    58c2:	cd 01       	movw	r24, r26
    58c4:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <__mulsf3>
    58c8:	dc 01       	movw	r26, r24
    58ca:	cb 01       	movw	r24, r22
    58cc:	bc 01       	movw	r22, r24
    58ce:	cd 01       	movw	r24, r26
    58d0:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__fixsfsi>
    58d4:	dc 01       	movw	r26, r24
    58d6:	cb 01       	movw	r24, r22
    58d8:	8d 83       	std	Y+5, r24	; 0x05
    58da:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    58dc:	89 85       	ldd	r24, Y+9	; 0x09
    58de:	9a 85       	ldd	r25, Y+10	; 0x0a
    58e0:	9c 01       	movw	r18, r24
    58e2:	2f 5f       	subi	r18, 0xFF	; 255
    58e4:	3f 4f       	sbci	r19, 0xFF	; 255
    58e6:	29 87       	std	Y+9, r18	; 0x09
    58e8:	3a 87       	std	Y+10, r19	; 0x0a
    58ea:	2d 81       	ldd	r18, Y+5	; 0x05
    58ec:	20 5d       	subi	r18, 0xD0	; 208
    58ee:	fc 01       	movw	r30, r24
    58f0:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    58f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    58f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    58f6:	ad 85       	ldd	r26, Y+13	; 0x0d
    58f8:	be 85       	ldd	r27, Y+14	; 0x0e
    58fa:	20 e0       	ldi	r18, 0x00	; 0
    58fc:	30 e0       	ldi	r19, 0x00	; 0
    58fe:	40 e2       	ldi	r20, 0x20	; 32
    5900:	51 e4       	ldi	r21, 0x41	; 65
    5902:	bc 01       	movw	r22, r24
    5904:	cd 01       	movw	r24, r26
    5906:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <__mulsf3>
    590a:	dc 01       	movw	r26, r24
    590c:	cb 01       	movw	r24, r22
    590e:	6c 01       	movw	r12, r24
    5910:	7d 01       	movw	r14, r26
    5912:	8d 81       	ldd	r24, Y+5	; 0x05
    5914:	9e 81       	ldd	r25, Y+6	; 0x06
    5916:	09 2e       	mov	r0, r25
    5918:	00 0c       	add	r0, r0
    591a:	aa 0b       	sbc	r26, r26
    591c:	bb 0b       	sbc	r27, r27
    591e:	bc 01       	movw	r22, r24
    5920:	cd 01       	movw	r24, r26
    5922:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <__floatsisf>
    5926:	dc 01       	movw	r26, r24
    5928:	cb 01       	movw	r24, r22
    592a:	9c 01       	movw	r18, r24
    592c:	ad 01       	movw	r20, r26
    592e:	c7 01       	movw	r24, r14
    5930:	b6 01       	movw	r22, r12
    5932:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__subsf3>
    5936:	dc 01       	movw	r26, r24
    5938:	cb 01       	movw	r24, r22
    593a:	8b 87       	std	Y+11, r24	; 0x0b
    593c:	9c 87       	std	Y+12, r25	; 0x0c
    593e:	ad 87       	std	Y+13, r26	; 0x0d
    5940:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    5942:	8b 81       	ldd	r24, Y+3	; 0x03
    5944:	9c 81       	ldd	r25, Y+4	; 0x04
    5946:	01 97       	sbiw	r24, 0x01	; 1
    5948:	8b 83       	std	Y+3, r24	; 0x03
    594a:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    594c:	89 85       	ldd	r24, Y+9	; 0x09
    594e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5950:	9c 01       	movw	r18, r24
    5952:	2f 5f       	subi	r18, 0xFF	; 255
    5954:	3f 4f       	sbci	r19, 0xFF	; 255
    5956:	29 87       	std	Y+9, r18	; 0x09
    5958:	3a 87       	std	Y+10, r19	; 0x0a
    595a:	2e e2       	ldi	r18, 0x2E	; 46
    595c:	fc 01       	movw	r30, r24
    595e:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    5960:	19 82       	std	Y+1, r1	; 0x01
    5962:	1a 82       	std	Y+2, r1	; 0x02
    5964:	4e c0       	rjmp	.+156    	; 0x5a02 <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    5966:	8b 85       	ldd	r24, Y+11	; 0x0b
    5968:	9c 85       	ldd	r25, Y+12	; 0x0c
    596a:	ad 85       	ldd	r26, Y+13	; 0x0d
    596c:	be 85       	ldd	r27, Y+14	; 0x0e
    596e:	20 e0       	ldi	r18, 0x00	; 0
    5970:	30 e0       	ldi	r19, 0x00	; 0
    5972:	40 e2       	ldi	r20, 0x20	; 32
    5974:	51 e4       	ldi	r21, 0x41	; 65
    5976:	bc 01       	movw	r22, r24
    5978:	cd 01       	movw	r24, r26
    597a:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <__mulsf3>
    597e:	dc 01       	movw	r26, r24
    5980:	cb 01       	movw	r24, r22
    5982:	bc 01       	movw	r22, r24
    5984:	cd 01       	movw	r24, r26
    5986:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__fixsfsi>
    598a:	dc 01       	movw	r26, r24
    598c:	cb 01       	movw	r24, r22
    598e:	8f 83       	std	Y+7, r24	; 0x07
    5990:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    5992:	89 85       	ldd	r24, Y+9	; 0x09
    5994:	9a 85       	ldd	r25, Y+10	; 0x0a
    5996:	9c 01       	movw	r18, r24
    5998:	2f 5f       	subi	r18, 0xFF	; 255
    599a:	3f 4f       	sbci	r19, 0xFF	; 255
    599c:	29 87       	std	Y+9, r18	; 0x09
    599e:	3a 87       	std	Y+10, r19	; 0x0a
    59a0:	2f 81       	ldd	r18, Y+7	; 0x07
    59a2:	20 5d       	subi	r18, 0xD0	; 208
    59a4:	fc 01       	movw	r30, r24
    59a6:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    59a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    59aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    59ac:	ad 85       	ldd	r26, Y+13	; 0x0d
    59ae:	be 85       	ldd	r27, Y+14	; 0x0e
    59b0:	20 e0       	ldi	r18, 0x00	; 0
    59b2:	30 e0       	ldi	r19, 0x00	; 0
    59b4:	40 e2       	ldi	r20, 0x20	; 32
    59b6:	51 e4       	ldi	r21, 0x41	; 65
    59b8:	bc 01       	movw	r22, r24
    59ba:	cd 01       	movw	r24, r26
    59bc:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <__mulsf3>
    59c0:	dc 01       	movw	r26, r24
    59c2:	cb 01       	movw	r24, r22
    59c4:	6c 01       	movw	r12, r24
    59c6:	7d 01       	movw	r14, r26
    59c8:	8f 81       	ldd	r24, Y+7	; 0x07
    59ca:	98 85       	ldd	r25, Y+8	; 0x08
    59cc:	09 2e       	mov	r0, r25
    59ce:	00 0c       	add	r0, r0
    59d0:	aa 0b       	sbc	r26, r26
    59d2:	bb 0b       	sbc	r27, r27
    59d4:	bc 01       	movw	r22, r24
    59d6:	cd 01       	movw	r24, r26
    59d8:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <__floatsisf>
    59dc:	dc 01       	movw	r26, r24
    59de:	cb 01       	movw	r24, r22
    59e0:	9c 01       	movw	r18, r24
    59e2:	ad 01       	movw	r20, r26
    59e4:	c7 01       	movw	r24, r14
    59e6:	b6 01       	movw	r22, r12
    59e8:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__subsf3>
    59ec:	dc 01       	movw	r26, r24
    59ee:	cb 01       	movw	r24, r22
    59f0:	8b 87       	std	Y+11, r24	; 0x0b
    59f2:	9c 87       	std	Y+12, r25	; 0x0c
    59f4:	ad 87       	std	Y+13, r26	; 0x0d
    59f6:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    59f8:	89 81       	ldd	r24, Y+1	; 0x01
    59fa:	9a 81       	ldd	r25, Y+2	; 0x02
    59fc:	01 96       	adiw	r24, 0x01	; 1
    59fe:	89 83       	std	Y+1, r24	; 0x01
    5a00:	9a 83       	std	Y+2, r25	; 0x02
    5a02:	80 91 65 20 	lds	r24, 0x2065	; 0x802065 <width.5079>
    5a06:	90 91 66 20 	lds	r25, 0x2066	; 0x802066 <width.5079+0x1>
    5a0a:	29 81       	ldd	r18, Y+1	; 0x01
    5a0c:	3a 81       	ldd	r19, Y+2	; 0x02
    5a0e:	28 17       	cp	r18, r24
    5a10:	39 07       	cpc	r19, r25
    5a12:	0c f4       	brge	.+2      	; 0x5a16 <ftoa_sci+0x208>
    5a14:	a8 cf       	rjmp	.-176    	; 0x5966 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    5a16:	89 85       	ldd	r24, Y+9	; 0x09
    5a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a1a:	9c 01       	movw	r18, r24
    5a1c:	2f 5f       	subi	r18, 0xFF	; 255
    5a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a20:	29 87       	std	Y+9, r18	; 0x09
    5a22:	3a 87       	std	Y+10, r19	; 0x0a
    5a24:	25 e6       	ldi	r18, 0x65	; 101
    5a26:	fc 01       	movw	r30, r24
    5a28:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    5a2a:	29 85       	ldd	r18, Y+9	; 0x09
    5a2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    5a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a30:	9c 81       	ldd	r25, Y+4	; 0x04
    5a32:	4a e0       	ldi	r20, 0x0A	; 10
    5a34:	50 e0       	ldi	r21, 0x00	; 0
    5a36:	b9 01       	movw	r22, r18
    5a38:	0e 94 15 34 	call	0x682a	; 0x682a <itoa>
}
    5a3c:	2e 96       	adiw	r28, 0x0e	; 14
    5a3e:	cd bf       	out	0x3d, r28	; 61
    5a40:	de bf       	out	0x3e, r29	; 62
    5a42:	df 91       	pop	r29
    5a44:	cf 91       	pop	r28
    5a46:	ff 90       	pop	r15
    5a48:	ef 90       	pop	r14
    5a4a:	df 90       	pop	r13
    5a4c:	cf 90       	pop	r12
    5a4e:	08 95       	ret

00005a50 <__subsf3>:
    5a50:	50 58       	subi	r21, 0x80	; 128

00005a52 <__addsf3>:
    5a52:	bb 27       	eor	r27, r27
    5a54:	aa 27       	eor	r26, r26
    5a56:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <__addsf3x>
    5a5a:	0c 94 ba 2e 	jmp	0x5d74	; 0x5d74 <__fp_round>
    5a5e:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <__fp_pscA>
    5a62:	38 f0       	brcs	.+14     	; 0x5a72 <__addsf3+0x20>
    5a64:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <__fp_pscB>
    5a68:	20 f0       	brcs	.+8      	; 0x5a72 <__addsf3+0x20>
    5a6a:	39 f4       	brne	.+14     	; 0x5a7a <__addsf3+0x28>
    5a6c:	9f 3f       	cpi	r25, 0xFF	; 255
    5a6e:	19 f4       	brne	.+6      	; 0x5a76 <__addsf3+0x24>
    5a70:	26 f4       	brtc	.+8      	; 0x5a7a <__addsf3+0x28>
    5a72:	0c 94 a9 2e 	jmp	0x5d52	; 0x5d52 <__fp_nan>
    5a76:	0e f4       	brtc	.+2      	; 0x5a7a <__addsf3+0x28>
    5a78:	e0 95       	com	r30
    5a7a:	e7 fb       	bst	r30, 7
    5a7c:	0c 94 a3 2e 	jmp	0x5d46	; 0x5d46 <__fp_inf>

00005a80 <__addsf3x>:
    5a80:	e9 2f       	mov	r30, r25
    5a82:	0e 94 cb 2e 	call	0x5d96	; 0x5d96 <__fp_split3>
    5a86:	58 f3       	brcs	.-42     	; 0x5a5e <__addsf3+0xc>
    5a88:	ba 17       	cp	r27, r26
    5a8a:	62 07       	cpc	r22, r18
    5a8c:	73 07       	cpc	r23, r19
    5a8e:	84 07       	cpc	r24, r20
    5a90:	95 07       	cpc	r25, r21
    5a92:	20 f0       	brcs	.+8      	; 0x5a9c <__addsf3x+0x1c>
    5a94:	79 f4       	brne	.+30     	; 0x5ab4 <__addsf3x+0x34>
    5a96:	a6 f5       	brtc	.+104    	; 0x5b00 <__addsf3x+0x80>
    5a98:	0c 94 ed 2e 	jmp	0x5dda	; 0x5dda <__fp_zero>
    5a9c:	0e f4       	brtc	.+2      	; 0x5aa0 <__addsf3x+0x20>
    5a9e:	e0 95       	com	r30
    5aa0:	0b 2e       	mov	r0, r27
    5aa2:	ba 2f       	mov	r27, r26
    5aa4:	a0 2d       	mov	r26, r0
    5aa6:	0b 01       	movw	r0, r22
    5aa8:	b9 01       	movw	r22, r18
    5aaa:	90 01       	movw	r18, r0
    5aac:	0c 01       	movw	r0, r24
    5aae:	ca 01       	movw	r24, r20
    5ab0:	a0 01       	movw	r20, r0
    5ab2:	11 24       	eor	r1, r1
    5ab4:	ff 27       	eor	r31, r31
    5ab6:	59 1b       	sub	r21, r25
    5ab8:	99 f0       	breq	.+38     	; 0x5ae0 <__addsf3x+0x60>
    5aba:	59 3f       	cpi	r21, 0xF9	; 249
    5abc:	50 f4       	brcc	.+20     	; 0x5ad2 <__addsf3x+0x52>
    5abe:	50 3e       	cpi	r21, 0xE0	; 224
    5ac0:	68 f1       	brcs	.+90     	; 0x5b1c <__addsf3x+0x9c>
    5ac2:	1a 16       	cp	r1, r26
    5ac4:	f0 40       	sbci	r31, 0x00	; 0
    5ac6:	a2 2f       	mov	r26, r18
    5ac8:	23 2f       	mov	r18, r19
    5aca:	34 2f       	mov	r19, r20
    5acc:	44 27       	eor	r20, r20
    5ace:	58 5f       	subi	r21, 0xF8	; 248
    5ad0:	f3 cf       	rjmp	.-26     	; 0x5ab8 <__addsf3x+0x38>
    5ad2:	46 95       	lsr	r20
    5ad4:	37 95       	ror	r19
    5ad6:	27 95       	ror	r18
    5ad8:	a7 95       	ror	r26
    5ada:	f0 40       	sbci	r31, 0x00	; 0
    5adc:	53 95       	inc	r21
    5ade:	c9 f7       	brne	.-14     	; 0x5ad2 <__addsf3x+0x52>
    5ae0:	7e f4       	brtc	.+30     	; 0x5b00 <__addsf3x+0x80>
    5ae2:	1f 16       	cp	r1, r31
    5ae4:	ba 0b       	sbc	r27, r26
    5ae6:	62 0b       	sbc	r22, r18
    5ae8:	73 0b       	sbc	r23, r19
    5aea:	84 0b       	sbc	r24, r20
    5aec:	ba f0       	brmi	.+46     	; 0x5b1c <__addsf3x+0x9c>
    5aee:	91 50       	subi	r25, 0x01	; 1
    5af0:	a1 f0       	breq	.+40     	; 0x5b1a <__addsf3x+0x9a>
    5af2:	ff 0f       	add	r31, r31
    5af4:	bb 1f       	adc	r27, r27
    5af6:	66 1f       	adc	r22, r22
    5af8:	77 1f       	adc	r23, r23
    5afa:	88 1f       	adc	r24, r24
    5afc:	c2 f7       	brpl	.-16     	; 0x5aee <__addsf3x+0x6e>
    5afe:	0e c0       	rjmp	.+28     	; 0x5b1c <__addsf3x+0x9c>
    5b00:	ba 0f       	add	r27, r26
    5b02:	62 1f       	adc	r22, r18
    5b04:	73 1f       	adc	r23, r19
    5b06:	84 1f       	adc	r24, r20
    5b08:	48 f4       	brcc	.+18     	; 0x5b1c <__addsf3x+0x9c>
    5b0a:	87 95       	ror	r24
    5b0c:	77 95       	ror	r23
    5b0e:	67 95       	ror	r22
    5b10:	b7 95       	ror	r27
    5b12:	f7 95       	ror	r31
    5b14:	9e 3f       	cpi	r25, 0xFE	; 254
    5b16:	08 f0       	brcs	.+2      	; 0x5b1a <__addsf3x+0x9a>
    5b18:	b0 cf       	rjmp	.-160    	; 0x5a7a <__addsf3+0x28>
    5b1a:	93 95       	inc	r25
    5b1c:	88 0f       	add	r24, r24
    5b1e:	08 f0       	brcs	.+2      	; 0x5b22 <__addsf3x+0xa2>
    5b20:	99 27       	eor	r25, r25
    5b22:	ee 0f       	add	r30, r30
    5b24:	97 95       	ror	r25
    5b26:	87 95       	ror	r24
    5b28:	08 95       	ret

00005b2a <__cmpsf2>:
    5b2a:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__fp_cmp>
    5b2e:	08 f4       	brcc	.+2      	; 0x5b32 <__cmpsf2+0x8>
    5b30:	81 e0       	ldi	r24, 0x01	; 1
    5b32:	08 95       	ret

00005b34 <__divsf3>:
    5b34:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__divsf3x>
    5b38:	0c 94 ba 2e 	jmp	0x5d74	; 0x5d74 <__fp_round>
    5b3c:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <__fp_pscB>
    5b40:	58 f0       	brcs	.+22     	; 0x5b58 <__divsf3+0x24>
    5b42:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <__fp_pscA>
    5b46:	40 f0       	brcs	.+16     	; 0x5b58 <__divsf3+0x24>
    5b48:	29 f4       	brne	.+10     	; 0x5b54 <__divsf3+0x20>
    5b4a:	5f 3f       	cpi	r21, 0xFF	; 255
    5b4c:	29 f0       	breq	.+10     	; 0x5b58 <__divsf3+0x24>
    5b4e:	0c 94 a3 2e 	jmp	0x5d46	; 0x5d46 <__fp_inf>
    5b52:	51 11       	cpse	r21, r1
    5b54:	0c 94 ee 2e 	jmp	0x5ddc	; 0x5ddc <__fp_szero>
    5b58:	0c 94 a9 2e 	jmp	0x5d52	; 0x5d52 <__fp_nan>

00005b5c <__divsf3x>:
    5b5c:	0e 94 cb 2e 	call	0x5d96	; 0x5d96 <__fp_split3>
    5b60:	68 f3       	brcs	.-38     	; 0x5b3c <__divsf3+0x8>

00005b62 <__divsf3_pse>:
    5b62:	99 23       	and	r25, r25
    5b64:	b1 f3       	breq	.-20     	; 0x5b52 <__divsf3+0x1e>
    5b66:	55 23       	and	r21, r21
    5b68:	91 f3       	breq	.-28     	; 0x5b4e <__divsf3+0x1a>
    5b6a:	95 1b       	sub	r25, r21
    5b6c:	55 0b       	sbc	r21, r21
    5b6e:	bb 27       	eor	r27, r27
    5b70:	aa 27       	eor	r26, r26
    5b72:	62 17       	cp	r22, r18
    5b74:	73 07       	cpc	r23, r19
    5b76:	84 07       	cpc	r24, r20
    5b78:	38 f0       	brcs	.+14     	; 0x5b88 <__divsf3_pse+0x26>
    5b7a:	9f 5f       	subi	r25, 0xFF	; 255
    5b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b7e:	22 0f       	add	r18, r18
    5b80:	33 1f       	adc	r19, r19
    5b82:	44 1f       	adc	r20, r20
    5b84:	aa 1f       	adc	r26, r26
    5b86:	a9 f3       	breq	.-22     	; 0x5b72 <__divsf3_pse+0x10>
    5b88:	35 d0       	rcall	.+106    	; 0x5bf4 <__divsf3_pse+0x92>
    5b8a:	0e 2e       	mov	r0, r30
    5b8c:	3a f0       	brmi	.+14     	; 0x5b9c <__divsf3_pse+0x3a>
    5b8e:	e0 e8       	ldi	r30, 0x80	; 128
    5b90:	32 d0       	rcall	.+100    	; 0x5bf6 <__divsf3_pse+0x94>
    5b92:	91 50       	subi	r25, 0x01	; 1
    5b94:	50 40       	sbci	r21, 0x00	; 0
    5b96:	e6 95       	lsr	r30
    5b98:	00 1c       	adc	r0, r0
    5b9a:	ca f7       	brpl	.-14     	; 0x5b8e <__divsf3_pse+0x2c>
    5b9c:	2b d0       	rcall	.+86     	; 0x5bf4 <__divsf3_pse+0x92>
    5b9e:	fe 2f       	mov	r31, r30
    5ba0:	29 d0       	rcall	.+82     	; 0x5bf4 <__divsf3_pse+0x92>
    5ba2:	66 0f       	add	r22, r22
    5ba4:	77 1f       	adc	r23, r23
    5ba6:	88 1f       	adc	r24, r24
    5ba8:	bb 1f       	adc	r27, r27
    5baa:	26 17       	cp	r18, r22
    5bac:	37 07       	cpc	r19, r23
    5bae:	48 07       	cpc	r20, r24
    5bb0:	ab 07       	cpc	r26, r27
    5bb2:	b0 e8       	ldi	r27, 0x80	; 128
    5bb4:	09 f0       	breq	.+2      	; 0x5bb8 <__divsf3_pse+0x56>
    5bb6:	bb 0b       	sbc	r27, r27
    5bb8:	80 2d       	mov	r24, r0
    5bba:	bf 01       	movw	r22, r30
    5bbc:	ff 27       	eor	r31, r31
    5bbe:	93 58       	subi	r25, 0x83	; 131
    5bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    5bc2:	3a f0       	brmi	.+14     	; 0x5bd2 <__divsf3_pse+0x70>
    5bc4:	9e 3f       	cpi	r25, 0xFE	; 254
    5bc6:	51 05       	cpc	r21, r1
    5bc8:	78 f0       	brcs	.+30     	; 0x5be8 <__divsf3_pse+0x86>
    5bca:	0c 94 a3 2e 	jmp	0x5d46	; 0x5d46 <__fp_inf>
    5bce:	0c 94 ee 2e 	jmp	0x5ddc	; 0x5ddc <__fp_szero>
    5bd2:	5f 3f       	cpi	r21, 0xFF	; 255
    5bd4:	e4 f3       	brlt	.-8      	; 0x5bce <__divsf3_pse+0x6c>
    5bd6:	98 3e       	cpi	r25, 0xE8	; 232
    5bd8:	d4 f3       	brlt	.-12     	; 0x5bce <__divsf3_pse+0x6c>
    5bda:	86 95       	lsr	r24
    5bdc:	77 95       	ror	r23
    5bde:	67 95       	ror	r22
    5be0:	b7 95       	ror	r27
    5be2:	f7 95       	ror	r31
    5be4:	9f 5f       	subi	r25, 0xFF	; 255
    5be6:	c9 f7       	brne	.-14     	; 0x5bda <__divsf3_pse+0x78>
    5be8:	88 0f       	add	r24, r24
    5bea:	91 1d       	adc	r25, r1
    5bec:	96 95       	lsr	r25
    5bee:	87 95       	ror	r24
    5bf0:	97 f9       	bld	r25, 7
    5bf2:	08 95       	ret
    5bf4:	e1 e0       	ldi	r30, 0x01	; 1
    5bf6:	66 0f       	add	r22, r22
    5bf8:	77 1f       	adc	r23, r23
    5bfa:	88 1f       	adc	r24, r24
    5bfc:	bb 1f       	adc	r27, r27
    5bfe:	62 17       	cp	r22, r18
    5c00:	73 07       	cpc	r23, r19
    5c02:	84 07       	cpc	r24, r20
    5c04:	ba 07       	cpc	r27, r26
    5c06:	20 f0       	brcs	.+8      	; 0x5c10 <__divsf3_pse+0xae>
    5c08:	62 1b       	sub	r22, r18
    5c0a:	73 0b       	sbc	r23, r19
    5c0c:	84 0b       	sbc	r24, r20
    5c0e:	ba 0b       	sbc	r27, r26
    5c10:	ee 1f       	adc	r30, r30
    5c12:	88 f7       	brcc	.-30     	; 0x5bf6 <__divsf3_pse+0x94>
    5c14:	e0 95       	com	r30
    5c16:	08 95       	ret

00005c18 <__fixsfsi>:
    5c18:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    5c1c:	68 94       	set
    5c1e:	b1 11       	cpse	r27, r1
    5c20:	0c 94 ee 2e 	jmp	0x5ddc	; 0x5ddc <__fp_szero>
    5c24:	08 95       	ret

00005c26 <__fixunssfsi>:
    5c26:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__fp_splitA>
    5c2a:	88 f0       	brcs	.+34     	; 0x5c4e <__fixunssfsi+0x28>
    5c2c:	9f 57       	subi	r25, 0x7F	; 127
    5c2e:	98 f0       	brcs	.+38     	; 0x5c56 <__fixunssfsi+0x30>
    5c30:	b9 2f       	mov	r27, r25
    5c32:	99 27       	eor	r25, r25
    5c34:	b7 51       	subi	r27, 0x17	; 23
    5c36:	b0 f0       	brcs	.+44     	; 0x5c64 <__fixunssfsi+0x3e>
    5c38:	e1 f0       	breq	.+56     	; 0x5c72 <__fixunssfsi+0x4c>
    5c3a:	66 0f       	add	r22, r22
    5c3c:	77 1f       	adc	r23, r23
    5c3e:	88 1f       	adc	r24, r24
    5c40:	99 1f       	adc	r25, r25
    5c42:	1a f0       	brmi	.+6      	; 0x5c4a <__fixunssfsi+0x24>
    5c44:	ba 95       	dec	r27
    5c46:	c9 f7       	brne	.-14     	; 0x5c3a <__fixunssfsi+0x14>
    5c48:	14 c0       	rjmp	.+40     	; 0x5c72 <__fixunssfsi+0x4c>
    5c4a:	b1 30       	cpi	r27, 0x01	; 1
    5c4c:	91 f0       	breq	.+36     	; 0x5c72 <__fixunssfsi+0x4c>
    5c4e:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <__fp_zero>
    5c52:	b1 e0       	ldi	r27, 0x01	; 1
    5c54:	08 95       	ret
    5c56:	0c 94 ed 2e 	jmp	0x5dda	; 0x5dda <__fp_zero>
    5c5a:	67 2f       	mov	r22, r23
    5c5c:	78 2f       	mov	r23, r24
    5c5e:	88 27       	eor	r24, r24
    5c60:	b8 5f       	subi	r27, 0xF8	; 248
    5c62:	39 f0       	breq	.+14     	; 0x5c72 <__fixunssfsi+0x4c>
    5c64:	b9 3f       	cpi	r27, 0xF9	; 249
    5c66:	cc f3       	brlt	.-14     	; 0x5c5a <__fixunssfsi+0x34>
    5c68:	86 95       	lsr	r24
    5c6a:	77 95       	ror	r23
    5c6c:	67 95       	ror	r22
    5c6e:	b3 95       	inc	r27
    5c70:	d9 f7       	brne	.-10     	; 0x5c68 <__fixunssfsi+0x42>
    5c72:	3e f4       	brtc	.+14     	; 0x5c82 <__fixunssfsi+0x5c>
    5c74:	90 95       	com	r25
    5c76:	80 95       	com	r24
    5c78:	70 95       	com	r23
    5c7a:	61 95       	neg	r22
    5c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c80:	9f 4f       	sbci	r25, 0xFF	; 255
    5c82:	08 95       	ret

00005c84 <__floatunsisf>:
    5c84:	e8 94       	clt
    5c86:	09 c0       	rjmp	.+18     	; 0x5c9a <__floatsisf+0x12>

00005c88 <__floatsisf>:
    5c88:	97 fb       	bst	r25, 7
    5c8a:	3e f4       	brtc	.+14     	; 0x5c9a <__floatsisf+0x12>
    5c8c:	90 95       	com	r25
    5c8e:	80 95       	com	r24
    5c90:	70 95       	com	r23
    5c92:	61 95       	neg	r22
    5c94:	7f 4f       	sbci	r23, 0xFF	; 255
    5c96:	8f 4f       	sbci	r24, 0xFF	; 255
    5c98:	9f 4f       	sbci	r25, 0xFF	; 255
    5c9a:	99 23       	and	r25, r25
    5c9c:	a9 f0       	breq	.+42     	; 0x5cc8 <__floatsisf+0x40>
    5c9e:	f9 2f       	mov	r31, r25
    5ca0:	96 e9       	ldi	r25, 0x96	; 150
    5ca2:	bb 27       	eor	r27, r27
    5ca4:	93 95       	inc	r25
    5ca6:	f6 95       	lsr	r31
    5ca8:	87 95       	ror	r24
    5caa:	77 95       	ror	r23
    5cac:	67 95       	ror	r22
    5cae:	b7 95       	ror	r27
    5cb0:	f1 11       	cpse	r31, r1
    5cb2:	f8 cf       	rjmp	.-16     	; 0x5ca4 <__floatsisf+0x1c>
    5cb4:	fa f4       	brpl	.+62     	; 0x5cf4 <__floatsisf+0x6c>
    5cb6:	bb 0f       	add	r27, r27
    5cb8:	11 f4       	brne	.+4      	; 0x5cbe <__floatsisf+0x36>
    5cba:	60 ff       	sbrs	r22, 0
    5cbc:	1b c0       	rjmp	.+54     	; 0x5cf4 <__floatsisf+0x6c>
    5cbe:	6f 5f       	subi	r22, 0xFF	; 255
    5cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    5cc2:	8f 4f       	sbci	r24, 0xFF	; 255
    5cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc6:	16 c0       	rjmp	.+44     	; 0x5cf4 <__floatsisf+0x6c>
    5cc8:	88 23       	and	r24, r24
    5cca:	11 f0       	breq	.+4      	; 0x5cd0 <__floatsisf+0x48>
    5ccc:	96 e9       	ldi	r25, 0x96	; 150
    5cce:	11 c0       	rjmp	.+34     	; 0x5cf2 <__floatsisf+0x6a>
    5cd0:	77 23       	and	r23, r23
    5cd2:	21 f0       	breq	.+8      	; 0x5cdc <__floatsisf+0x54>
    5cd4:	9e e8       	ldi	r25, 0x8E	; 142
    5cd6:	87 2f       	mov	r24, r23
    5cd8:	76 2f       	mov	r23, r22
    5cda:	05 c0       	rjmp	.+10     	; 0x5ce6 <__floatsisf+0x5e>
    5cdc:	66 23       	and	r22, r22
    5cde:	71 f0       	breq	.+28     	; 0x5cfc <__floatsisf+0x74>
    5ce0:	96 e8       	ldi	r25, 0x86	; 134
    5ce2:	86 2f       	mov	r24, r22
    5ce4:	70 e0       	ldi	r23, 0x00	; 0
    5ce6:	60 e0       	ldi	r22, 0x00	; 0
    5ce8:	2a f0       	brmi	.+10     	; 0x5cf4 <__floatsisf+0x6c>
    5cea:	9a 95       	dec	r25
    5cec:	66 0f       	add	r22, r22
    5cee:	77 1f       	adc	r23, r23
    5cf0:	88 1f       	adc	r24, r24
    5cf2:	da f7       	brpl	.-10     	; 0x5cea <__floatsisf+0x62>
    5cf4:	88 0f       	add	r24, r24
    5cf6:	96 95       	lsr	r25
    5cf8:	87 95       	ror	r24
    5cfa:	97 f9       	bld	r25, 7
    5cfc:	08 95       	ret

00005cfe <__fp_cmp>:
    5cfe:	99 0f       	add	r25, r25
    5d00:	00 08       	sbc	r0, r0
    5d02:	55 0f       	add	r21, r21
    5d04:	aa 0b       	sbc	r26, r26
    5d06:	e0 e8       	ldi	r30, 0x80	; 128
    5d08:	fe ef       	ldi	r31, 0xFE	; 254
    5d0a:	16 16       	cp	r1, r22
    5d0c:	17 06       	cpc	r1, r23
    5d0e:	e8 07       	cpc	r30, r24
    5d10:	f9 07       	cpc	r31, r25
    5d12:	c0 f0       	brcs	.+48     	; 0x5d44 <__fp_cmp+0x46>
    5d14:	12 16       	cp	r1, r18
    5d16:	13 06       	cpc	r1, r19
    5d18:	e4 07       	cpc	r30, r20
    5d1a:	f5 07       	cpc	r31, r21
    5d1c:	98 f0       	brcs	.+38     	; 0x5d44 <__fp_cmp+0x46>
    5d1e:	62 1b       	sub	r22, r18
    5d20:	73 0b       	sbc	r23, r19
    5d22:	84 0b       	sbc	r24, r20
    5d24:	95 0b       	sbc	r25, r21
    5d26:	39 f4       	brne	.+14     	; 0x5d36 <__fp_cmp+0x38>
    5d28:	0a 26       	eor	r0, r26
    5d2a:	61 f0       	breq	.+24     	; 0x5d44 <__fp_cmp+0x46>
    5d2c:	23 2b       	or	r18, r19
    5d2e:	24 2b       	or	r18, r20
    5d30:	25 2b       	or	r18, r21
    5d32:	21 f4       	brne	.+8      	; 0x5d3c <__fp_cmp+0x3e>
    5d34:	08 95       	ret
    5d36:	0a 26       	eor	r0, r26
    5d38:	09 f4       	brne	.+2      	; 0x5d3c <__fp_cmp+0x3e>
    5d3a:	a1 40       	sbci	r26, 0x01	; 1
    5d3c:	a6 95       	lsr	r26
    5d3e:	8f ef       	ldi	r24, 0xFF	; 255
    5d40:	81 1d       	adc	r24, r1
    5d42:	81 1d       	adc	r24, r1
    5d44:	08 95       	ret

00005d46 <__fp_inf>:
    5d46:	97 f9       	bld	r25, 7
    5d48:	9f 67       	ori	r25, 0x7F	; 127
    5d4a:	80 e8       	ldi	r24, 0x80	; 128
    5d4c:	70 e0       	ldi	r23, 0x00	; 0
    5d4e:	60 e0       	ldi	r22, 0x00	; 0
    5d50:	08 95       	ret

00005d52 <__fp_nan>:
    5d52:	9f ef       	ldi	r25, 0xFF	; 255
    5d54:	80 ec       	ldi	r24, 0xC0	; 192
    5d56:	08 95       	ret

00005d58 <__fp_pscA>:
    5d58:	00 24       	eor	r0, r0
    5d5a:	0a 94       	dec	r0
    5d5c:	16 16       	cp	r1, r22
    5d5e:	17 06       	cpc	r1, r23
    5d60:	18 06       	cpc	r1, r24
    5d62:	09 06       	cpc	r0, r25
    5d64:	08 95       	ret

00005d66 <__fp_pscB>:
    5d66:	00 24       	eor	r0, r0
    5d68:	0a 94       	dec	r0
    5d6a:	12 16       	cp	r1, r18
    5d6c:	13 06       	cpc	r1, r19
    5d6e:	14 06       	cpc	r1, r20
    5d70:	05 06       	cpc	r0, r21
    5d72:	08 95       	ret

00005d74 <__fp_round>:
    5d74:	09 2e       	mov	r0, r25
    5d76:	03 94       	inc	r0
    5d78:	00 0c       	add	r0, r0
    5d7a:	11 f4       	brne	.+4      	; 0x5d80 <__fp_round+0xc>
    5d7c:	88 23       	and	r24, r24
    5d7e:	52 f0       	brmi	.+20     	; 0x5d94 <__fp_round+0x20>
    5d80:	bb 0f       	add	r27, r27
    5d82:	40 f4       	brcc	.+16     	; 0x5d94 <__fp_round+0x20>
    5d84:	bf 2b       	or	r27, r31
    5d86:	11 f4       	brne	.+4      	; 0x5d8c <__fp_round+0x18>
    5d88:	60 ff       	sbrs	r22, 0
    5d8a:	04 c0       	rjmp	.+8      	; 0x5d94 <__fp_round+0x20>
    5d8c:	6f 5f       	subi	r22, 0xFF	; 255
    5d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d90:	8f 4f       	sbci	r24, 0xFF	; 255
    5d92:	9f 4f       	sbci	r25, 0xFF	; 255
    5d94:	08 95       	ret

00005d96 <__fp_split3>:
    5d96:	57 fd       	sbrc	r21, 7
    5d98:	90 58       	subi	r25, 0x80	; 128
    5d9a:	44 0f       	add	r20, r20
    5d9c:	55 1f       	adc	r21, r21
    5d9e:	59 f0       	breq	.+22     	; 0x5db6 <__fp_splitA+0x10>
    5da0:	5f 3f       	cpi	r21, 0xFF	; 255
    5da2:	71 f0       	breq	.+28     	; 0x5dc0 <__fp_splitA+0x1a>
    5da4:	47 95       	ror	r20

00005da6 <__fp_splitA>:
    5da6:	88 0f       	add	r24, r24
    5da8:	97 fb       	bst	r25, 7
    5daa:	99 1f       	adc	r25, r25
    5dac:	61 f0       	breq	.+24     	; 0x5dc6 <__fp_splitA+0x20>
    5dae:	9f 3f       	cpi	r25, 0xFF	; 255
    5db0:	79 f0       	breq	.+30     	; 0x5dd0 <__fp_splitA+0x2a>
    5db2:	87 95       	ror	r24
    5db4:	08 95       	ret
    5db6:	12 16       	cp	r1, r18
    5db8:	13 06       	cpc	r1, r19
    5dba:	14 06       	cpc	r1, r20
    5dbc:	55 1f       	adc	r21, r21
    5dbe:	f2 cf       	rjmp	.-28     	; 0x5da4 <__fp_split3+0xe>
    5dc0:	46 95       	lsr	r20
    5dc2:	f1 df       	rcall	.-30     	; 0x5da6 <__fp_splitA>
    5dc4:	08 c0       	rjmp	.+16     	; 0x5dd6 <__fp_splitA+0x30>
    5dc6:	16 16       	cp	r1, r22
    5dc8:	17 06       	cpc	r1, r23
    5dca:	18 06       	cpc	r1, r24
    5dcc:	99 1f       	adc	r25, r25
    5dce:	f1 cf       	rjmp	.-30     	; 0x5db2 <__fp_splitA+0xc>
    5dd0:	86 95       	lsr	r24
    5dd2:	71 05       	cpc	r23, r1
    5dd4:	61 05       	cpc	r22, r1
    5dd6:	08 94       	sec
    5dd8:	08 95       	ret

00005dda <__fp_zero>:
    5dda:	e8 94       	clt

00005ddc <__fp_szero>:
    5ddc:	bb 27       	eor	r27, r27
    5dde:	66 27       	eor	r22, r22
    5de0:	77 27       	eor	r23, r23
    5de2:	cb 01       	movw	r24, r22
    5de4:	97 f9       	bld	r25, 7
    5de6:	08 95       	ret

00005de8 <__gesf2>:
    5de8:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__fp_cmp>
    5dec:	08 f4       	brcc	.+2      	; 0x5df0 <__gesf2+0x8>
    5dee:	8f ef       	ldi	r24, 0xFF	; 255
    5df0:	08 95       	ret

00005df2 <__mulsf3>:
    5df2:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <__mulsf3x>
    5df6:	0c 94 ba 2e 	jmp	0x5d74	; 0x5d74 <__fp_round>
    5dfa:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <__fp_pscA>
    5dfe:	38 f0       	brcs	.+14     	; 0x5e0e <__mulsf3+0x1c>
    5e00:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <__fp_pscB>
    5e04:	20 f0       	brcs	.+8      	; 0x5e0e <__mulsf3+0x1c>
    5e06:	95 23       	and	r25, r21
    5e08:	11 f0       	breq	.+4      	; 0x5e0e <__mulsf3+0x1c>
    5e0a:	0c 94 a3 2e 	jmp	0x5d46	; 0x5d46 <__fp_inf>
    5e0e:	0c 94 a9 2e 	jmp	0x5d52	; 0x5d52 <__fp_nan>
    5e12:	11 24       	eor	r1, r1
    5e14:	0c 94 ee 2e 	jmp	0x5ddc	; 0x5ddc <__fp_szero>

00005e18 <__mulsf3x>:
    5e18:	0e 94 cb 2e 	call	0x5d96	; 0x5d96 <__fp_split3>
    5e1c:	70 f3       	brcs	.-36     	; 0x5dfa <__mulsf3+0x8>

00005e1e <__mulsf3_pse>:
    5e1e:	95 9f       	mul	r25, r21
    5e20:	c1 f3       	breq	.-16     	; 0x5e12 <__mulsf3+0x20>
    5e22:	95 0f       	add	r25, r21
    5e24:	50 e0       	ldi	r21, 0x00	; 0
    5e26:	55 1f       	adc	r21, r21
    5e28:	62 9f       	mul	r22, r18
    5e2a:	f0 01       	movw	r30, r0
    5e2c:	72 9f       	mul	r23, r18
    5e2e:	bb 27       	eor	r27, r27
    5e30:	f0 0d       	add	r31, r0
    5e32:	b1 1d       	adc	r27, r1
    5e34:	63 9f       	mul	r22, r19
    5e36:	aa 27       	eor	r26, r26
    5e38:	f0 0d       	add	r31, r0
    5e3a:	b1 1d       	adc	r27, r1
    5e3c:	aa 1f       	adc	r26, r26
    5e3e:	64 9f       	mul	r22, r20
    5e40:	66 27       	eor	r22, r22
    5e42:	b0 0d       	add	r27, r0
    5e44:	a1 1d       	adc	r26, r1
    5e46:	66 1f       	adc	r22, r22
    5e48:	82 9f       	mul	r24, r18
    5e4a:	22 27       	eor	r18, r18
    5e4c:	b0 0d       	add	r27, r0
    5e4e:	a1 1d       	adc	r26, r1
    5e50:	62 1f       	adc	r22, r18
    5e52:	73 9f       	mul	r23, r19
    5e54:	b0 0d       	add	r27, r0
    5e56:	a1 1d       	adc	r26, r1
    5e58:	62 1f       	adc	r22, r18
    5e5a:	83 9f       	mul	r24, r19
    5e5c:	a0 0d       	add	r26, r0
    5e5e:	61 1d       	adc	r22, r1
    5e60:	22 1f       	adc	r18, r18
    5e62:	74 9f       	mul	r23, r20
    5e64:	33 27       	eor	r19, r19
    5e66:	a0 0d       	add	r26, r0
    5e68:	61 1d       	adc	r22, r1
    5e6a:	23 1f       	adc	r18, r19
    5e6c:	84 9f       	mul	r24, r20
    5e6e:	60 0d       	add	r22, r0
    5e70:	21 1d       	adc	r18, r1
    5e72:	82 2f       	mov	r24, r18
    5e74:	76 2f       	mov	r23, r22
    5e76:	6a 2f       	mov	r22, r26
    5e78:	11 24       	eor	r1, r1
    5e7a:	9f 57       	subi	r25, 0x7F	; 127
    5e7c:	50 40       	sbci	r21, 0x00	; 0
    5e7e:	9a f0       	brmi	.+38     	; 0x5ea6 <__mulsf3_pse+0x88>
    5e80:	f1 f0       	breq	.+60     	; 0x5ebe <__mulsf3_pse+0xa0>
    5e82:	88 23       	and	r24, r24
    5e84:	4a f0       	brmi	.+18     	; 0x5e98 <__mulsf3_pse+0x7a>
    5e86:	ee 0f       	add	r30, r30
    5e88:	ff 1f       	adc	r31, r31
    5e8a:	bb 1f       	adc	r27, r27
    5e8c:	66 1f       	adc	r22, r22
    5e8e:	77 1f       	adc	r23, r23
    5e90:	88 1f       	adc	r24, r24
    5e92:	91 50       	subi	r25, 0x01	; 1
    5e94:	50 40       	sbci	r21, 0x00	; 0
    5e96:	a9 f7       	brne	.-22     	; 0x5e82 <__mulsf3_pse+0x64>
    5e98:	9e 3f       	cpi	r25, 0xFE	; 254
    5e9a:	51 05       	cpc	r21, r1
    5e9c:	80 f0       	brcs	.+32     	; 0x5ebe <__mulsf3_pse+0xa0>
    5e9e:	0c 94 a3 2e 	jmp	0x5d46	; 0x5d46 <__fp_inf>
    5ea2:	0c 94 ee 2e 	jmp	0x5ddc	; 0x5ddc <__fp_szero>
    5ea6:	5f 3f       	cpi	r21, 0xFF	; 255
    5ea8:	e4 f3       	brlt	.-8      	; 0x5ea2 <__mulsf3_pse+0x84>
    5eaa:	98 3e       	cpi	r25, 0xE8	; 232
    5eac:	d4 f3       	brlt	.-12     	; 0x5ea2 <__mulsf3_pse+0x84>
    5eae:	86 95       	lsr	r24
    5eb0:	77 95       	ror	r23
    5eb2:	67 95       	ror	r22
    5eb4:	b7 95       	ror	r27
    5eb6:	f7 95       	ror	r31
    5eb8:	e7 95       	ror	r30
    5eba:	9f 5f       	subi	r25, 0xFF	; 255
    5ebc:	c1 f7       	brne	.-16     	; 0x5eae <__mulsf3_pse+0x90>
    5ebe:	fe 2b       	or	r31, r30
    5ec0:	88 0f       	add	r24, r24
    5ec2:	91 1d       	adc	r25, r1
    5ec4:	96 95       	lsr	r25
    5ec6:	87 95       	ror	r24
    5ec8:	97 f9       	bld	r25, 7
    5eca:	08 95       	ret

00005ecc <vfprintf>:
    5ecc:	2f 92       	push	r2
    5ece:	3f 92       	push	r3
    5ed0:	4f 92       	push	r4
    5ed2:	5f 92       	push	r5
    5ed4:	6f 92       	push	r6
    5ed6:	7f 92       	push	r7
    5ed8:	8f 92       	push	r8
    5eda:	9f 92       	push	r9
    5edc:	af 92       	push	r10
    5ede:	bf 92       	push	r11
    5ee0:	cf 92       	push	r12
    5ee2:	df 92       	push	r13
    5ee4:	ef 92       	push	r14
    5ee6:	ff 92       	push	r15
    5ee8:	0f 93       	push	r16
    5eea:	1f 93       	push	r17
    5eec:	cf 93       	push	r28
    5eee:	df 93       	push	r29
    5ef0:	cd b7       	in	r28, 0x3d	; 61
    5ef2:	de b7       	in	r29, 0x3e	; 62
    5ef4:	60 97       	sbiw	r28, 0x10	; 16
    5ef6:	cd bf       	out	0x3d, r28	; 61
    5ef8:	de bf       	out	0x3e, r29	; 62
    5efa:	7c 01       	movw	r14, r24
    5efc:	1b 01       	movw	r2, r22
    5efe:	6a 01       	movw	r12, r20
    5f00:	fc 01       	movw	r30, r24
    5f02:	16 82       	std	Z+6, r1	; 0x06
    5f04:	17 82       	std	Z+7, r1	; 0x07
    5f06:	83 81       	ldd	r24, Z+3	; 0x03
    5f08:	81 ff       	sbrs	r24, 1
    5f0a:	44 c3       	rjmp	.+1672   	; 0x6594 <vfprintf+0x6c8>
    5f0c:	9e 01       	movw	r18, r28
    5f0e:	2f 5f       	subi	r18, 0xFF	; 255
    5f10:	3f 4f       	sbci	r19, 0xFF	; 255
    5f12:	39 01       	movw	r6, r18
    5f14:	f7 01       	movw	r30, r14
    5f16:	93 81       	ldd	r25, Z+3	; 0x03
    5f18:	f1 01       	movw	r30, r2
    5f1a:	93 fd       	sbrc	r25, 3
    5f1c:	85 91       	lpm	r24, Z+
    5f1e:	93 ff       	sbrs	r25, 3
    5f20:	81 91       	ld	r24, Z+
    5f22:	1f 01       	movw	r2, r30
    5f24:	88 23       	and	r24, r24
    5f26:	09 f4       	brne	.+2      	; 0x5f2a <vfprintf+0x5e>
    5f28:	31 c3       	rjmp	.+1634   	; 0x658c <vfprintf+0x6c0>
    5f2a:	85 32       	cpi	r24, 0x25	; 37
    5f2c:	39 f4       	brne	.+14     	; 0x5f3c <vfprintf+0x70>
    5f2e:	93 fd       	sbrc	r25, 3
    5f30:	85 91       	lpm	r24, Z+
    5f32:	93 ff       	sbrs	r25, 3
    5f34:	81 91       	ld	r24, Z+
    5f36:	1f 01       	movw	r2, r30
    5f38:	85 32       	cpi	r24, 0x25	; 37
    5f3a:	39 f4       	brne	.+14     	; 0x5f4a <vfprintf+0x7e>
    5f3c:	b7 01       	movw	r22, r14
    5f3e:	90 e0       	ldi	r25, 0x00	; 0
    5f40:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    5f44:	56 01       	movw	r10, r12
    5f46:	65 01       	movw	r12, r10
    5f48:	e5 cf       	rjmp	.-54     	; 0x5f14 <vfprintf+0x48>
    5f4a:	10 e0       	ldi	r17, 0x00	; 0
    5f4c:	51 2c       	mov	r5, r1
    5f4e:	91 2c       	mov	r9, r1
    5f50:	ff e1       	ldi	r31, 0x1F	; 31
    5f52:	f9 15       	cp	r31, r9
    5f54:	d8 f0       	brcs	.+54     	; 0x5f8c <vfprintf+0xc0>
    5f56:	8b 32       	cpi	r24, 0x2B	; 43
    5f58:	79 f0       	breq	.+30     	; 0x5f78 <vfprintf+0xac>
    5f5a:	38 f4       	brcc	.+14     	; 0x5f6a <vfprintf+0x9e>
    5f5c:	80 32       	cpi	r24, 0x20	; 32
    5f5e:	79 f0       	breq	.+30     	; 0x5f7e <vfprintf+0xb2>
    5f60:	83 32       	cpi	r24, 0x23	; 35
    5f62:	a1 f4       	brne	.+40     	; 0x5f8c <vfprintf+0xc0>
    5f64:	f9 2d       	mov	r31, r9
    5f66:	f0 61       	ori	r31, 0x10	; 16
    5f68:	2e c0       	rjmp	.+92     	; 0x5fc6 <vfprintf+0xfa>
    5f6a:	8d 32       	cpi	r24, 0x2D	; 45
    5f6c:	61 f0       	breq	.+24     	; 0x5f86 <vfprintf+0xba>
    5f6e:	80 33       	cpi	r24, 0x30	; 48
    5f70:	69 f4       	brne	.+26     	; 0x5f8c <vfprintf+0xc0>
    5f72:	29 2d       	mov	r18, r9
    5f74:	21 60       	ori	r18, 0x01	; 1
    5f76:	2d c0       	rjmp	.+90     	; 0x5fd2 <vfprintf+0x106>
    5f78:	39 2d       	mov	r19, r9
    5f7a:	32 60       	ori	r19, 0x02	; 2
    5f7c:	93 2e       	mov	r9, r19
    5f7e:	89 2d       	mov	r24, r9
    5f80:	84 60       	ori	r24, 0x04	; 4
    5f82:	98 2e       	mov	r9, r24
    5f84:	2a c0       	rjmp	.+84     	; 0x5fda <vfprintf+0x10e>
    5f86:	e9 2d       	mov	r30, r9
    5f88:	e8 60       	ori	r30, 0x08	; 8
    5f8a:	15 c0       	rjmp	.+42     	; 0x5fb6 <vfprintf+0xea>
    5f8c:	97 fc       	sbrc	r9, 7
    5f8e:	2d c0       	rjmp	.+90     	; 0x5fea <vfprintf+0x11e>
    5f90:	20 ed       	ldi	r18, 0xD0	; 208
    5f92:	28 0f       	add	r18, r24
    5f94:	2a 30       	cpi	r18, 0x0A	; 10
    5f96:	88 f4       	brcc	.+34     	; 0x5fba <vfprintf+0xee>
    5f98:	96 fe       	sbrs	r9, 6
    5f9a:	06 c0       	rjmp	.+12     	; 0x5fa8 <vfprintf+0xdc>
    5f9c:	3a e0       	ldi	r19, 0x0A	; 10
    5f9e:	13 9f       	mul	r17, r19
    5fa0:	20 0d       	add	r18, r0
    5fa2:	11 24       	eor	r1, r1
    5fa4:	12 2f       	mov	r17, r18
    5fa6:	19 c0       	rjmp	.+50     	; 0x5fda <vfprintf+0x10e>
    5fa8:	8a e0       	ldi	r24, 0x0A	; 10
    5faa:	58 9e       	mul	r5, r24
    5fac:	20 0d       	add	r18, r0
    5fae:	11 24       	eor	r1, r1
    5fb0:	52 2e       	mov	r5, r18
    5fb2:	e9 2d       	mov	r30, r9
    5fb4:	e0 62       	ori	r30, 0x20	; 32
    5fb6:	9e 2e       	mov	r9, r30
    5fb8:	10 c0       	rjmp	.+32     	; 0x5fda <vfprintf+0x10e>
    5fba:	8e 32       	cpi	r24, 0x2E	; 46
    5fbc:	31 f4       	brne	.+12     	; 0x5fca <vfprintf+0xfe>
    5fbe:	96 fc       	sbrc	r9, 6
    5fc0:	e5 c2       	rjmp	.+1482   	; 0x658c <vfprintf+0x6c0>
    5fc2:	f9 2d       	mov	r31, r9
    5fc4:	f0 64       	ori	r31, 0x40	; 64
    5fc6:	9f 2e       	mov	r9, r31
    5fc8:	08 c0       	rjmp	.+16     	; 0x5fda <vfprintf+0x10e>
    5fca:	8c 36       	cpi	r24, 0x6C	; 108
    5fcc:	21 f4       	brne	.+8      	; 0x5fd6 <vfprintf+0x10a>
    5fce:	29 2d       	mov	r18, r9
    5fd0:	20 68       	ori	r18, 0x80	; 128
    5fd2:	92 2e       	mov	r9, r18
    5fd4:	02 c0       	rjmp	.+4      	; 0x5fda <vfprintf+0x10e>
    5fd6:	88 36       	cpi	r24, 0x68	; 104
    5fd8:	41 f4       	brne	.+16     	; 0x5fea <vfprintf+0x11e>
    5fda:	f1 01       	movw	r30, r2
    5fdc:	93 fd       	sbrc	r25, 3
    5fde:	85 91       	lpm	r24, Z+
    5fe0:	93 ff       	sbrs	r25, 3
    5fe2:	81 91       	ld	r24, Z+
    5fe4:	1f 01       	movw	r2, r30
    5fe6:	81 11       	cpse	r24, r1
    5fe8:	b3 cf       	rjmp	.-154    	; 0x5f50 <vfprintf+0x84>
    5fea:	9b eb       	ldi	r25, 0xBB	; 187
    5fec:	98 0f       	add	r25, r24
    5fee:	93 30       	cpi	r25, 0x03	; 3
    5ff0:	20 f4       	brcc	.+8      	; 0x5ffa <vfprintf+0x12e>
    5ff2:	99 2d       	mov	r25, r9
    5ff4:	90 61       	ori	r25, 0x10	; 16
    5ff6:	80 5e       	subi	r24, 0xE0	; 224
    5ff8:	07 c0       	rjmp	.+14     	; 0x6008 <vfprintf+0x13c>
    5ffa:	9b e9       	ldi	r25, 0x9B	; 155
    5ffc:	98 0f       	add	r25, r24
    5ffe:	93 30       	cpi	r25, 0x03	; 3
    6000:	08 f0       	brcs	.+2      	; 0x6004 <vfprintf+0x138>
    6002:	66 c1       	rjmp	.+716    	; 0x62d0 <vfprintf+0x404>
    6004:	99 2d       	mov	r25, r9
    6006:	9f 7e       	andi	r25, 0xEF	; 239
    6008:	96 ff       	sbrs	r25, 6
    600a:	16 e0       	ldi	r17, 0x06	; 6
    600c:	9f 73       	andi	r25, 0x3F	; 63
    600e:	99 2e       	mov	r9, r25
    6010:	85 36       	cpi	r24, 0x65	; 101
    6012:	19 f4       	brne	.+6      	; 0x601a <vfprintf+0x14e>
    6014:	90 64       	ori	r25, 0x40	; 64
    6016:	99 2e       	mov	r9, r25
    6018:	08 c0       	rjmp	.+16     	; 0x602a <vfprintf+0x15e>
    601a:	86 36       	cpi	r24, 0x66	; 102
    601c:	21 f4       	brne	.+8      	; 0x6026 <vfprintf+0x15a>
    601e:	39 2f       	mov	r19, r25
    6020:	30 68       	ori	r19, 0x80	; 128
    6022:	93 2e       	mov	r9, r19
    6024:	02 c0       	rjmp	.+4      	; 0x602a <vfprintf+0x15e>
    6026:	11 11       	cpse	r17, r1
    6028:	11 50       	subi	r17, 0x01	; 1
    602a:	97 fe       	sbrs	r9, 7
    602c:	07 c0       	rjmp	.+14     	; 0x603c <vfprintf+0x170>
    602e:	1c 33       	cpi	r17, 0x3C	; 60
    6030:	50 f4       	brcc	.+20     	; 0x6046 <vfprintf+0x17a>
    6032:	44 24       	eor	r4, r4
    6034:	43 94       	inc	r4
    6036:	41 0e       	add	r4, r17
    6038:	27 e0       	ldi	r18, 0x07	; 7
    603a:	0b c0       	rjmp	.+22     	; 0x6052 <vfprintf+0x186>
    603c:	18 30       	cpi	r17, 0x08	; 8
    603e:	38 f0       	brcs	.+14     	; 0x604e <vfprintf+0x182>
    6040:	27 e0       	ldi	r18, 0x07	; 7
    6042:	17 e0       	ldi	r17, 0x07	; 7
    6044:	05 c0       	rjmp	.+10     	; 0x6050 <vfprintf+0x184>
    6046:	27 e0       	ldi	r18, 0x07	; 7
    6048:	9c e3       	ldi	r25, 0x3C	; 60
    604a:	49 2e       	mov	r4, r25
    604c:	02 c0       	rjmp	.+4      	; 0x6052 <vfprintf+0x186>
    604e:	21 2f       	mov	r18, r17
    6050:	41 2c       	mov	r4, r1
    6052:	56 01       	movw	r10, r12
    6054:	84 e0       	ldi	r24, 0x04	; 4
    6056:	a8 0e       	add	r10, r24
    6058:	b1 1c       	adc	r11, r1
    605a:	f6 01       	movw	r30, r12
    605c:	60 81       	ld	r22, Z
    605e:	71 81       	ldd	r23, Z+1	; 0x01
    6060:	82 81       	ldd	r24, Z+2	; 0x02
    6062:	93 81       	ldd	r25, Z+3	; 0x03
    6064:	04 2d       	mov	r16, r4
    6066:	a3 01       	movw	r20, r6
    6068:	0e 94 0e 33 	call	0x661c	; 0x661c <__ftoa_engine>
    606c:	6c 01       	movw	r12, r24
    606e:	f9 81       	ldd	r31, Y+1	; 0x01
    6070:	fc 87       	std	Y+12, r31	; 0x0c
    6072:	f0 ff       	sbrs	r31, 0
    6074:	02 c0       	rjmp	.+4      	; 0x607a <vfprintf+0x1ae>
    6076:	f3 ff       	sbrs	r31, 3
    6078:	06 c0       	rjmp	.+12     	; 0x6086 <vfprintf+0x1ba>
    607a:	91 fc       	sbrc	r9, 1
    607c:	06 c0       	rjmp	.+12     	; 0x608a <vfprintf+0x1be>
    607e:	92 fe       	sbrs	r9, 2
    6080:	06 c0       	rjmp	.+12     	; 0x608e <vfprintf+0x1c2>
    6082:	00 e2       	ldi	r16, 0x20	; 32
    6084:	05 c0       	rjmp	.+10     	; 0x6090 <vfprintf+0x1c4>
    6086:	0d e2       	ldi	r16, 0x2D	; 45
    6088:	03 c0       	rjmp	.+6      	; 0x6090 <vfprintf+0x1c4>
    608a:	0b e2       	ldi	r16, 0x2B	; 43
    608c:	01 c0       	rjmp	.+2      	; 0x6090 <vfprintf+0x1c4>
    608e:	00 e0       	ldi	r16, 0x00	; 0
    6090:	8c 85       	ldd	r24, Y+12	; 0x0c
    6092:	8c 70       	andi	r24, 0x0C	; 12
    6094:	19 f0       	breq	.+6      	; 0x609c <vfprintf+0x1d0>
    6096:	01 11       	cpse	r16, r1
    6098:	5a c2       	rjmp	.+1204   	; 0x654e <vfprintf+0x682>
    609a:	9b c2       	rjmp	.+1334   	; 0x65d2 <vfprintf+0x706>
    609c:	97 fe       	sbrs	r9, 7
    609e:	10 c0       	rjmp	.+32     	; 0x60c0 <vfprintf+0x1f4>
    60a0:	4c 0c       	add	r4, r12
    60a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    60a4:	f4 ff       	sbrs	r31, 4
    60a6:	04 c0       	rjmp	.+8      	; 0x60b0 <vfprintf+0x1e4>
    60a8:	8a 81       	ldd	r24, Y+2	; 0x02
    60aa:	81 33       	cpi	r24, 0x31	; 49
    60ac:	09 f4       	brne	.+2      	; 0x60b0 <vfprintf+0x1e4>
    60ae:	4a 94       	dec	r4
    60b0:	14 14       	cp	r1, r4
    60b2:	74 f5       	brge	.+92     	; 0x6110 <vfprintf+0x244>
    60b4:	28 e0       	ldi	r18, 0x08	; 8
    60b6:	24 15       	cp	r18, r4
    60b8:	78 f5       	brcc	.+94     	; 0x6118 <vfprintf+0x24c>
    60ba:	88 e0       	ldi	r24, 0x08	; 8
    60bc:	48 2e       	mov	r4, r24
    60be:	2c c0       	rjmp	.+88     	; 0x6118 <vfprintf+0x24c>
    60c0:	96 fc       	sbrc	r9, 6
    60c2:	2a c0       	rjmp	.+84     	; 0x6118 <vfprintf+0x24c>
    60c4:	81 2f       	mov	r24, r17
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	8c 15       	cp	r24, r12
    60ca:	9d 05       	cpc	r25, r13
    60cc:	9c f0       	brlt	.+38     	; 0x60f4 <vfprintf+0x228>
    60ce:	3c ef       	ldi	r19, 0xFC	; 252
    60d0:	c3 16       	cp	r12, r19
    60d2:	3f ef       	ldi	r19, 0xFF	; 255
    60d4:	d3 06       	cpc	r13, r19
    60d6:	74 f0       	brlt	.+28     	; 0x60f4 <vfprintf+0x228>
    60d8:	89 2d       	mov	r24, r9
    60da:	80 68       	ori	r24, 0x80	; 128
    60dc:	98 2e       	mov	r9, r24
    60de:	0a c0       	rjmp	.+20     	; 0x60f4 <vfprintf+0x228>
    60e0:	e2 e0       	ldi	r30, 0x02	; 2
    60e2:	f0 e0       	ldi	r31, 0x00	; 0
    60e4:	ec 0f       	add	r30, r28
    60e6:	fd 1f       	adc	r31, r29
    60e8:	e1 0f       	add	r30, r17
    60ea:	f1 1d       	adc	r31, r1
    60ec:	80 81       	ld	r24, Z
    60ee:	80 33       	cpi	r24, 0x30	; 48
    60f0:	19 f4       	brne	.+6      	; 0x60f8 <vfprintf+0x22c>
    60f2:	11 50       	subi	r17, 0x01	; 1
    60f4:	11 11       	cpse	r17, r1
    60f6:	f4 cf       	rjmp	.-24     	; 0x60e0 <vfprintf+0x214>
    60f8:	97 fe       	sbrs	r9, 7
    60fa:	0e c0       	rjmp	.+28     	; 0x6118 <vfprintf+0x24c>
    60fc:	44 24       	eor	r4, r4
    60fe:	43 94       	inc	r4
    6100:	41 0e       	add	r4, r17
    6102:	81 2f       	mov	r24, r17
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	c8 16       	cp	r12, r24
    6108:	d9 06       	cpc	r13, r25
    610a:	2c f4       	brge	.+10     	; 0x6116 <vfprintf+0x24a>
    610c:	1c 19       	sub	r17, r12
    610e:	04 c0       	rjmp	.+8      	; 0x6118 <vfprintf+0x24c>
    6110:	44 24       	eor	r4, r4
    6112:	43 94       	inc	r4
    6114:	01 c0       	rjmp	.+2      	; 0x6118 <vfprintf+0x24c>
    6116:	10 e0       	ldi	r17, 0x00	; 0
    6118:	97 fe       	sbrs	r9, 7
    611a:	06 c0       	rjmp	.+12     	; 0x6128 <vfprintf+0x25c>
    611c:	1c 14       	cp	r1, r12
    611e:	1d 04       	cpc	r1, r13
    6120:	34 f4       	brge	.+12     	; 0x612e <vfprintf+0x262>
    6122:	c6 01       	movw	r24, r12
    6124:	01 96       	adiw	r24, 0x01	; 1
    6126:	05 c0       	rjmp	.+10     	; 0x6132 <vfprintf+0x266>
    6128:	85 e0       	ldi	r24, 0x05	; 5
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	02 c0       	rjmp	.+4      	; 0x6132 <vfprintf+0x266>
    612e:	81 e0       	ldi	r24, 0x01	; 1
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	01 11       	cpse	r16, r1
    6134:	01 96       	adiw	r24, 0x01	; 1
    6136:	11 23       	and	r17, r17
    6138:	31 f0       	breq	.+12     	; 0x6146 <vfprintf+0x27a>
    613a:	21 2f       	mov	r18, r17
    613c:	30 e0       	ldi	r19, 0x00	; 0
    613e:	2f 5f       	subi	r18, 0xFF	; 255
    6140:	3f 4f       	sbci	r19, 0xFF	; 255
    6142:	82 0f       	add	r24, r18
    6144:	93 1f       	adc	r25, r19
    6146:	25 2d       	mov	r18, r5
    6148:	30 e0       	ldi	r19, 0x00	; 0
    614a:	82 17       	cp	r24, r18
    614c:	93 07       	cpc	r25, r19
    614e:	14 f4       	brge	.+4      	; 0x6154 <vfprintf+0x288>
    6150:	58 1a       	sub	r5, r24
    6152:	01 c0       	rjmp	.+2      	; 0x6156 <vfprintf+0x28a>
    6154:	51 2c       	mov	r5, r1
    6156:	89 2d       	mov	r24, r9
    6158:	89 70       	andi	r24, 0x09	; 9
    615a:	49 f4       	brne	.+18     	; 0x616e <vfprintf+0x2a2>
    615c:	55 20       	and	r5, r5
    615e:	39 f0       	breq	.+14     	; 0x616e <vfprintf+0x2a2>
    6160:	b7 01       	movw	r22, r14
    6162:	80 e2       	ldi	r24, 0x20	; 32
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    616a:	5a 94       	dec	r5
    616c:	f7 cf       	rjmp	.-18     	; 0x615c <vfprintf+0x290>
    616e:	00 23       	and	r16, r16
    6170:	29 f0       	breq	.+10     	; 0x617c <vfprintf+0x2b0>
    6172:	b7 01       	movw	r22, r14
    6174:	80 2f       	mov	r24, r16
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    617c:	93 fc       	sbrc	r9, 3
    617e:	09 c0       	rjmp	.+18     	; 0x6192 <vfprintf+0x2c6>
    6180:	55 20       	and	r5, r5
    6182:	39 f0       	breq	.+14     	; 0x6192 <vfprintf+0x2c6>
    6184:	b7 01       	movw	r22, r14
    6186:	80 e3       	ldi	r24, 0x30	; 48
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    618e:	5a 94       	dec	r5
    6190:	f7 cf       	rjmp	.-18     	; 0x6180 <vfprintf+0x2b4>
    6192:	97 fe       	sbrs	r9, 7
    6194:	4c c0       	rjmp	.+152    	; 0x622e <vfprintf+0x362>
    6196:	46 01       	movw	r8, r12
    6198:	d7 fe       	sbrs	r13, 7
    619a:	02 c0       	rjmp	.+4      	; 0x61a0 <vfprintf+0x2d4>
    619c:	81 2c       	mov	r8, r1
    619e:	91 2c       	mov	r9, r1
    61a0:	c6 01       	movw	r24, r12
    61a2:	88 19       	sub	r24, r8
    61a4:	99 09       	sbc	r25, r9
    61a6:	f3 01       	movw	r30, r6
    61a8:	e8 0f       	add	r30, r24
    61aa:	f9 1f       	adc	r31, r25
    61ac:	ed 87       	std	Y+13, r30	; 0x0d
    61ae:	fe 87       	std	Y+14, r31	; 0x0e
    61b0:	96 01       	movw	r18, r12
    61b2:	24 19       	sub	r18, r4
    61b4:	31 09       	sbc	r19, r1
    61b6:	2f 87       	std	Y+15, r18	; 0x0f
    61b8:	38 8b       	std	Y+16, r19	; 0x10
    61ba:	01 2f       	mov	r16, r17
    61bc:	10 e0       	ldi	r17, 0x00	; 0
    61be:	11 95       	neg	r17
    61c0:	01 95       	neg	r16
    61c2:	11 09       	sbc	r17, r1
    61c4:	3f ef       	ldi	r19, 0xFF	; 255
    61c6:	83 16       	cp	r8, r19
    61c8:	93 06       	cpc	r9, r19
    61ca:	29 f4       	brne	.+10     	; 0x61d6 <vfprintf+0x30a>
    61cc:	b7 01       	movw	r22, r14
    61ce:	8e e2       	ldi	r24, 0x2E	; 46
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    61d6:	c8 14       	cp	r12, r8
    61d8:	d9 04       	cpc	r13, r9
    61da:	4c f0       	brlt	.+18     	; 0x61ee <vfprintf+0x322>
    61dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    61de:	98 89       	ldd	r25, Y+16	; 0x10
    61e0:	88 15       	cp	r24, r8
    61e2:	99 05       	cpc	r25, r9
    61e4:	24 f4       	brge	.+8      	; 0x61ee <vfprintf+0x322>
    61e6:	ed 85       	ldd	r30, Y+13	; 0x0d
    61e8:	fe 85       	ldd	r31, Y+14	; 0x0e
    61ea:	81 81       	ldd	r24, Z+1	; 0x01
    61ec:	01 c0       	rjmp	.+2      	; 0x61f0 <vfprintf+0x324>
    61ee:	80 e3       	ldi	r24, 0x30	; 48
    61f0:	f1 e0       	ldi	r31, 0x01	; 1
    61f2:	8f 1a       	sub	r8, r31
    61f4:	91 08       	sbc	r9, r1
    61f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    61f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    61fa:	2f 5f       	subi	r18, 0xFF	; 255
    61fc:	3f 4f       	sbci	r19, 0xFF	; 255
    61fe:	2d 87       	std	Y+13, r18	; 0x0d
    6200:	3e 87       	std	Y+14, r19	; 0x0e
    6202:	80 16       	cp	r8, r16
    6204:	91 06       	cpc	r9, r17
    6206:	2c f0       	brlt	.+10     	; 0x6212 <vfprintf+0x346>
    6208:	b7 01       	movw	r22, r14
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    6210:	d9 cf       	rjmp	.-78     	; 0x61c4 <vfprintf+0x2f8>
    6212:	c8 14       	cp	r12, r8
    6214:	d9 04       	cpc	r13, r9
    6216:	41 f4       	brne	.+16     	; 0x6228 <vfprintf+0x35c>
    6218:	9a 81       	ldd	r25, Y+2	; 0x02
    621a:	96 33       	cpi	r25, 0x36	; 54
    621c:	20 f4       	brcc	.+8      	; 0x6226 <vfprintf+0x35a>
    621e:	95 33       	cpi	r25, 0x35	; 53
    6220:	19 f4       	brne	.+6      	; 0x6228 <vfprintf+0x35c>
    6222:	3c 85       	ldd	r19, Y+12	; 0x0c
    6224:	34 ff       	sbrs	r19, 4
    6226:	81 e3       	ldi	r24, 0x31	; 49
    6228:	b7 01       	movw	r22, r14
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	4e c0       	rjmp	.+156    	; 0x62ca <vfprintf+0x3fe>
    622e:	8a 81       	ldd	r24, Y+2	; 0x02
    6230:	81 33       	cpi	r24, 0x31	; 49
    6232:	19 f0       	breq	.+6      	; 0x623a <vfprintf+0x36e>
    6234:	9c 85       	ldd	r25, Y+12	; 0x0c
    6236:	9f 7e       	andi	r25, 0xEF	; 239
    6238:	9c 87       	std	Y+12, r25	; 0x0c
    623a:	b7 01       	movw	r22, r14
    623c:	90 e0       	ldi	r25, 0x00	; 0
    623e:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    6242:	11 11       	cpse	r17, r1
    6244:	05 c0       	rjmp	.+10     	; 0x6250 <vfprintf+0x384>
    6246:	94 fc       	sbrc	r9, 4
    6248:	18 c0       	rjmp	.+48     	; 0x627a <vfprintf+0x3ae>
    624a:	85 e6       	ldi	r24, 0x65	; 101
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	17 c0       	rjmp	.+46     	; 0x627e <vfprintf+0x3b2>
    6250:	b7 01       	movw	r22, r14
    6252:	8e e2       	ldi	r24, 0x2E	; 46
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    625a:	1e 5f       	subi	r17, 0xFE	; 254
    625c:	82 e0       	ldi	r24, 0x02	; 2
    625e:	01 e0       	ldi	r16, 0x01	; 1
    6260:	08 0f       	add	r16, r24
    6262:	f3 01       	movw	r30, r6
    6264:	e8 0f       	add	r30, r24
    6266:	f1 1d       	adc	r31, r1
    6268:	80 81       	ld	r24, Z
    626a:	b7 01       	movw	r22, r14
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    6272:	80 2f       	mov	r24, r16
    6274:	01 13       	cpse	r16, r17
    6276:	f3 cf       	rjmp	.-26     	; 0x625e <vfprintf+0x392>
    6278:	e6 cf       	rjmp	.-52     	; 0x6246 <vfprintf+0x37a>
    627a:	85 e4       	ldi	r24, 0x45	; 69
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	b7 01       	movw	r22, r14
    6280:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    6284:	d7 fc       	sbrc	r13, 7
    6286:	06 c0       	rjmp	.+12     	; 0x6294 <vfprintf+0x3c8>
    6288:	c1 14       	cp	r12, r1
    628a:	d1 04       	cpc	r13, r1
    628c:	41 f4       	brne	.+16     	; 0x629e <vfprintf+0x3d2>
    628e:	ec 85       	ldd	r30, Y+12	; 0x0c
    6290:	e4 ff       	sbrs	r30, 4
    6292:	05 c0       	rjmp	.+10     	; 0x629e <vfprintf+0x3d2>
    6294:	d1 94       	neg	r13
    6296:	c1 94       	neg	r12
    6298:	d1 08       	sbc	r13, r1
    629a:	8d e2       	ldi	r24, 0x2D	; 45
    629c:	01 c0       	rjmp	.+2      	; 0x62a0 <vfprintf+0x3d4>
    629e:	8b e2       	ldi	r24, 0x2B	; 43
    62a0:	b7 01       	movw	r22, r14
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    62a8:	80 e3       	ldi	r24, 0x30	; 48
    62aa:	2a e0       	ldi	r18, 0x0A	; 10
    62ac:	c2 16       	cp	r12, r18
    62ae:	d1 04       	cpc	r13, r1
    62b0:	2c f0       	brlt	.+10     	; 0x62bc <vfprintf+0x3f0>
    62b2:	8f 5f       	subi	r24, 0xFF	; 255
    62b4:	fa e0       	ldi	r31, 0x0A	; 10
    62b6:	cf 1a       	sub	r12, r31
    62b8:	d1 08       	sbc	r13, r1
    62ba:	f7 cf       	rjmp	.-18     	; 0x62aa <vfprintf+0x3de>
    62bc:	b7 01       	movw	r22, r14
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    62c4:	b7 01       	movw	r22, r14
    62c6:	c6 01       	movw	r24, r12
    62c8:	c0 96       	adiw	r24, 0x30	; 48
    62ca:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    62ce:	54 c1       	rjmp	.+680    	; 0x6578 <vfprintf+0x6ac>
    62d0:	83 36       	cpi	r24, 0x63	; 99
    62d2:	31 f0       	breq	.+12     	; 0x62e0 <vfprintf+0x414>
    62d4:	83 37       	cpi	r24, 0x73	; 115
    62d6:	79 f0       	breq	.+30     	; 0x62f6 <vfprintf+0x42a>
    62d8:	83 35       	cpi	r24, 0x53	; 83
    62da:	09 f0       	breq	.+2      	; 0x62de <vfprintf+0x412>
    62dc:	56 c0       	rjmp	.+172    	; 0x638a <vfprintf+0x4be>
    62de:	20 c0       	rjmp	.+64     	; 0x6320 <vfprintf+0x454>
    62e0:	56 01       	movw	r10, r12
    62e2:	32 e0       	ldi	r19, 0x02	; 2
    62e4:	a3 0e       	add	r10, r19
    62e6:	b1 1c       	adc	r11, r1
    62e8:	f6 01       	movw	r30, r12
    62ea:	80 81       	ld	r24, Z
    62ec:	89 83       	std	Y+1, r24	; 0x01
    62ee:	01 e0       	ldi	r16, 0x01	; 1
    62f0:	10 e0       	ldi	r17, 0x00	; 0
    62f2:	63 01       	movw	r12, r6
    62f4:	12 c0       	rjmp	.+36     	; 0x631a <vfprintf+0x44e>
    62f6:	56 01       	movw	r10, r12
    62f8:	f2 e0       	ldi	r31, 0x02	; 2
    62fa:	af 0e       	add	r10, r31
    62fc:	b1 1c       	adc	r11, r1
    62fe:	f6 01       	movw	r30, r12
    6300:	c0 80       	ld	r12, Z
    6302:	d1 80       	ldd	r13, Z+1	; 0x01
    6304:	96 fe       	sbrs	r9, 6
    6306:	03 c0       	rjmp	.+6      	; 0x630e <vfprintf+0x442>
    6308:	61 2f       	mov	r22, r17
    630a:	70 e0       	ldi	r23, 0x00	; 0
    630c:	02 c0       	rjmp	.+4      	; 0x6312 <vfprintf+0x446>
    630e:	6f ef       	ldi	r22, 0xFF	; 255
    6310:	7f ef       	ldi	r23, 0xFF	; 255
    6312:	c6 01       	movw	r24, r12
    6314:	0e 94 0a 34 	call	0x6814	; 0x6814 <strnlen>
    6318:	8c 01       	movw	r16, r24
    631a:	f9 2d       	mov	r31, r9
    631c:	ff 77       	andi	r31, 0x7F	; 127
    631e:	14 c0       	rjmp	.+40     	; 0x6348 <vfprintf+0x47c>
    6320:	56 01       	movw	r10, r12
    6322:	22 e0       	ldi	r18, 0x02	; 2
    6324:	a2 0e       	add	r10, r18
    6326:	b1 1c       	adc	r11, r1
    6328:	f6 01       	movw	r30, r12
    632a:	c0 80       	ld	r12, Z
    632c:	d1 80       	ldd	r13, Z+1	; 0x01
    632e:	96 fe       	sbrs	r9, 6
    6330:	03 c0       	rjmp	.+6      	; 0x6338 <vfprintf+0x46c>
    6332:	61 2f       	mov	r22, r17
    6334:	70 e0       	ldi	r23, 0x00	; 0
    6336:	02 c0       	rjmp	.+4      	; 0x633c <vfprintf+0x470>
    6338:	6f ef       	ldi	r22, 0xFF	; 255
    633a:	7f ef       	ldi	r23, 0xFF	; 255
    633c:	c6 01       	movw	r24, r12
    633e:	0e 94 e6 33 	call	0x67cc	; 0x67cc <strnlen_P>
    6342:	8c 01       	movw	r16, r24
    6344:	f9 2d       	mov	r31, r9
    6346:	f0 68       	ori	r31, 0x80	; 128
    6348:	9f 2e       	mov	r9, r31
    634a:	f3 fd       	sbrc	r31, 3
    634c:	1a c0       	rjmp	.+52     	; 0x6382 <vfprintf+0x4b6>
    634e:	85 2d       	mov	r24, r5
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	08 17       	cp	r16, r24
    6354:	19 07       	cpc	r17, r25
    6356:	a8 f4       	brcc	.+42     	; 0x6382 <vfprintf+0x4b6>
    6358:	b7 01       	movw	r22, r14
    635a:	80 e2       	ldi	r24, 0x20	; 32
    635c:	90 e0       	ldi	r25, 0x00	; 0
    635e:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    6362:	5a 94       	dec	r5
    6364:	f4 cf       	rjmp	.-24     	; 0x634e <vfprintf+0x482>
    6366:	f6 01       	movw	r30, r12
    6368:	97 fc       	sbrc	r9, 7
    636a:	85 91       	lpm	r24, Z+
    636c:	97 fe       	sbrs	r9, 7
    636e:	81 91       	ld	r24, Z+
    6370:	6f 01       	movw	r12, r30
    6372:	b7 01       	movw	r22, r14
    6374:	90 e0       	ldi	r25, 0x00	; 0
    6376:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    637a:	51 10       	cpse	r5, r1
    637c:	5a 94       	dec	r5
    637e:	01 50       	subi	r16, 0x01	; 1
    6380:	11 09       	sbc	r17, r1
    6382:	01 15       	cp	r16, r1
    6384:	11 05       	cpc	r17, r1
    6386:	79 f7       	brne	.-34     	; 0x6366 <vfprintf+0x49a>
    6388:	f7 c0       	rjmp	.+494    	; 0x6578 <vfprintf+0x6ac>
    638a:	84 36       	cpi	r24, 0x64	; 100
    638c:	11 f0       	breq	.+4      	; 0x6392 <vfprintf+0x4c6>
    638e:	89 36       	cpi	r24, 0x69	; 105
    6390:	61 f5       	brne	.+88     	; 0x63ea <vfprintf+0x51e>
    6392:	56 01       	movw	r10, r12
    6394:	97 fe       	sbrs	r9, 7
    6396:	09 c0       	rjmp	.+18     	; 0x63aa <vfprintf+0x4de>
    6398:	24 e0       	ldi	r18, 0x04	; 4
    639a:	a2 0e       	add	r10, r18
    639c:	b1 1c       	adc	r11, r1
    639e:	f6 01       	movw	r30, r12
    63a0:	60 81       	ld	r22, Z
    63a2:	71 81       	ldd	r23, Z+1	; 0x01
    63a4:	82 81       	ldd	r24, Z+2	; 0x02
    63a6:	93 81       	ldd	r25, Z+3	; 0x03
    63a8:	0a c0       	rjmp	.+20     	; 0x63be <vfprintf+0x4f2>
    63aa:	f2 e0       	ldi	r31, 0x02	; 2
    63ac:	af 0e       	add	r10, r31
    63ae:	b1 1c       	adc	r11, r1
    63b0:	f6 01       	movw	r30, r12
    63b2:	60 81       	ld	r22, Z
    63b4:	71 81       	ldd	r23, Z+1	; 0x01
    63b6:	07 2e       	mov	r0, r23
    63b8:	00 0c       	add	r0, r0
    63ba:	88 0b       	sbc	r24, r24
    63bc:	99 0b       	sbc	r25, r25
    63be:	f9 2d       	mov	r31, r9
    63c0:	ff 76       	andi	r31, 0x6F	; 111
    63c2:	9f 2e       	mov	r9, r31
    63c4:	97 ff       	sbrs	r25, 7
    63c6:	09 c0       	rjmp	.+18     	; 0x63da <vfprintf+0x50e>
    63c8:	90 95       	com	r25
    63ca:	80 95       	com	r24
    63cc:	70 95       	com	r23
    63ce:	61 95       	neg	r22
    63d0:	7f 4f       	sbci	r23, 0xFF	; 255
    63d2:	8f 4f       	sbci	r24, 0xFF	; 255
    63d4:	9f 4f       	sbci	r25, 0xFF	; 255
    63d6:	f0 68       	ori	r31, 0x80	; 128
    63d8:	9f 2e       	mov	r9, r31
    63da:	2a e0       	ldi	r18, 0x0A	; 10
    63dc:	30 e0       	ldi	r19, 0x00	; 0
    63de:	a3 01       	movw	r20, r6
    63e0:	0e 94 aa 34 	call	0x6954	; 0x6954 <__ultoa_invert>
    63e4:	c8 2e       	mov	r12, r24
    63e6:	c6 18       	sub	r12, r6
    63e8:	3f c0       	rjmp	.+126    	; 0x6468 <vfprintf+0x59c>
    63ea:	09 2d       	mov	r16, r9
    63ec:	85 37       	cpi	r24, 0x75	; 117
    63ee:	21 f4       	brne	.+8      	; 0x63f8 <vfprintf+0x52c>
    63f0:	0f 7e       	andi	r16, 0xEF	; 239
    63f2:	2a e0       	ldi	r18, 0x0A	; 10
    63f4:	30 e0       	ldi	r19, 0x00	; 0
    63f6:	1d c0       	rjmp	.+58     	; 0x6432 <vfprintf+0x566>
    63f8:	09 7f       	andi	r16, 0xF9	; 249
    63fa:	8f 36       	cpi	r24, 0x6F	; 111
    63fc:	91 f0       	breq	.+36     	; 0x6422 <vfprintf+0x556>
    63fe:	18 f4       	brcc	.+6      	; 0x6406 <vfprintf+0x53a>
    6400:	88 35       	cpi	r24, 0x58	; 88
    6402:	59 f0       	breq	.+22     	; 0x641a <vfprintf+0x54e>
    6404:	c3 c0       	rjmp	.+390    	; 0x658c <vfprintf+0x6c0>
    6406:	80 37       	cpi	r24, 0x70	; 112
    6408:	19 f0       	breq	.+6      	; 0x6410 <vfprintf+0x544>
    640a:	88 37       	cpi	r24, 0x78	; 120
    640c:	11 f0       	breq	.+4      	; 0x6412 <vfprintf+0x546>
    640e:	be c0       	rjmp	.+380    	; 0x658c <vfprintf+0x6c0>
    6410:	00 61       	ori	r16, 0x10	; 16
    6412:	04 ff       	sbrs	r16, 4
    6414:	09 c0       	rjmp	.+18     	; 0x6428 <vfprintf+0x55c>
    6416:	04 60       	ori	r16, 0x04	; 4
    6418:	07 c0       	rjmp	.+14     	; 0x6428 <vfprintf+0x55c>
    641a:	94 fe       	sbrs	r9, 4
    641c:	08 c0       	rjmp	.+16     	; 0x642e <vfprintf+0x562>
    641e:	06 60       	ori	r16, 0x06	; 6
    6420:	06 c0       	rjmp	.+12     	; 0x642e <vfprintf+0x562>
    6422:	28 e0       	ldi	r18, 0x08	; 8
    6424:	30 e0       	ldi	r19, 0x00	; 0
    6426:	05 c0       	rjmp	.+10     	; 0x6432 <vfprintf+0x566>
    6428:	20 e1       	ldi	r18, 0x10	; 16
    642a:	30 e0       	ldi	r19, 0x00	; 0
    642c:	02 c0       	rjmp	.+4      	; 0x6432 <vfprintf+0x566>
    642e:	20 e1       	ldi	r18, 0x10	; 16
    6430:	32 e0       	ldi	r19, 0x02	; 2
    6432:	56 01       	movw	r10, r12
    6434:	07 ff       	sbrs	r16, 7
    6436:	09 c0       	rjmp	.+18     	; 0x644a <vfprintf+0x57e>
    6438:	84 e0       	ldi	r24, 0x04	; 4
    643a:	a8 0e       	add	r10, r24
    643c:	b1 1c       	adc	r11, r1
    643e:	f6 01       	movw	r30, r12
    6440:	60 81       	ld	r22, Z
    6442:	71 81       	ldd	r23, Z+1	; 0x01
    6444:	82 81       	ldd	r24, Z+2	; 0x02
    6446:	93 81       	ldd	r25, Z+3	; 0x03
    6448:	08 c0       	rjmp	.+16     	; 0x645a <vfprintf+0x58e>
    644a:	f2 e0       	ldi	r31, 0x02	; 2
    644c:	af 0e       	add	r10, r31
    644e:	b1 1c       	adc	r11, r1
    6450:	f6 01       	movw	r30, r12
    6452:	60 81       	ld	r22, Z
    6454:	71 81       	ldd	r23, Z+1	; 0x01
    6456:	80 e0       	ldi	r24, 0x00	; 0
    6458:	90 e0       	ldi	r25, 0x00	; 0
    645a:	a3 01       	movw	r20, r6
    645c:	0e 94 aa 34 	call	0x6954	; 0x6954 <__ultoa_invert>
    6460:	c8 2e       	mov	r12, r24
    6462:	c6 18       	sub	r12, r6
    6464:	0f 77       	andi	r16, 0x7F	; 127
    6466:	90 2e       	mov	r9, r16
    6468:	96 fe       	sbrs	r9, 6
    646a:	0b c0       	rjmp	.+22     	; 0x6482 <vfprintf+0x5b6>
    646c:	09 2d       	mov	r16, r9
    646e:	0e 7f       	andi	r16, 0xFE	; 254
    6470:	c1 16       	cp	r12, r17
    6472:	50 f4       	brcc	.+20     	; 0x6488 <vfprintf+0x5bc>
    6474:	94 fe       	sbrs	r9, 4
    6476:	0a c0       	rjmp	.+20     	; 0x648c <vfprintf+0x5c0>
    6478:	92 fc       	sbrc	r9, 2
    647a:	08 c0       	rjmp	.+16     	; 0x648c <vfprintf+0x5c0>
    647c:	09 2d       	mov	r16, r9
    647e:	0e 7e       	andi	r16, 0xEE	; 238
    6480:	05 c0       	rjmp	.+10     	; 0x648c <vfprintf+0x5c0>
    6482:	dc 2c       	mov	r13, r12
    6484:	09 2d       	mov	r16, r9
    6486:	03 c0       	rjmp	.+6      	; 0x648e <vfprintf+0x5c2>
    6488:	dc 2c       	mov	r13, r12
    648a:	01 c0       	rjmp	.+2      	; 0x648e <vfprintf+0x5c2>
    648c:	d1 2e       	mov	r13, r17
    648e:	04 ff       	sbrs	r16, 4
    6490:	0d c0       	rjmp	.+26     	; 0x64ac <vfprintf+0x5e0>
    6492:	fe 01       	movw	r30, r28
    6494:	ec 0d       	add	r30, r12
    6496:	f1 1d       	adc	r31, r1
    6498:	80 81       	ld	r24, Z
    649a:	80 33       	cpi	r24, 0x30	; 48
    649c:	11 f4       	brne	.+4      	; 0x64a2 <vfprintf+0x5d6>
    649e:	09 7e       	andi	r16, 0xE9	; 233
    64a0:	09 c0       	rjmp	.+18     	; 0x64b4 <vfprintf+0x5e8>
    64a2:	02 ff       	sbrs	r16, 2
    64a4:	06 c0       	rjmp	.+12     	; 0x64b2 <vfprintf+0x5e6>
    64a6:	d3 94       	inc	r13
    64a8:	d3 94       	inc	r13
    64aa:	04 c0       	rjmp	.+8      	; 0x64b4 <vfprintf+0x5e8>
    64ac:	80 2f       	mov	r24, r16
    64ae:	86 78       	andi	r24, 0x86	; 134
    64b0:	09 f0       	breq	.+2      	; 0x64b4 <vfprintf+0x5e8>
    64b2:	d3 94       	inc	r13
    64b4:	03 fd       	sbrc	r16, 3
    64b6:	11 c0       	rjmp	.+34     	; 0x64da <vfprintf+0x60e>
    64b8:	00 ff       	sbrs	r16, 0
    64ba:	06 c0       	rjmp	.+12     	; 0x64c8 <vfprintf+0x5fc>
    64bc:	1c 2d       	mov	r17, r12
    64be:	d5 14       	cp	r13, r5
    64c0:	80 f4       	brcc	.+32     	; 0x64e2 <vfprintf+0x616>
    64c2:	15 0d       	add	r17, r5
    64c4:	1d 19       	sub	r17, r13
    64c6:	0d c0       	rjmp	.+26     	; 0x64e2 <vfprintf+0x616>
    64c8:	d5 14       	cp	r13, r5
    64ca:	58 f4       	brcc	.+22     	; 0x64e2 <vfprintf+0x616>
    64cc:	b7 01       	movw	r22, r14
    64ce:	80 e2       	ldi	r24, 0x20	; 32
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    64d6:	d3 94       	inc	r13
    64d8:	f7 cf       	rjmp	.-18     	; 0x64c8 <vfprintf+0x5fc>
    64da:	d5 14       	cp	r13, r5
    64dc:	10 f4       	brcc	.+4      	; 0x64e2 <vfprintf+0x616>
    64de:	5d 18       	sub	r5, r13
    64e0:	01 c0       	rjmp	.+2      	; 0x64e4 <vfprintf+0x618>
    64e2:	51 2c       	mov	r5, r1
    64e4:	04 ff       	sbrs	r16, 4
    64e6:	10 c0       	rjmp	.+32     	; 0x6508 <vfprintf+0x63c>
    64e8:	b7 01       	movw	r22, r14
    64ea:	80 e3       	ldi	r24, 0x30	; 48
    64ec:	90 e0       	ldi	r25, 0x00	; 0
    64ee:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    64f2:	02 ff       	sbrs	r16, 2
    64f4:	17 c0       	rjmp	.+46     	; 0x6524 <vfprintf+0x658>
    64f6:	01 fd       	sbrc	r16, 1
    64f8:	03 c0       	rjmp	.+6      	; 0x6500 <vfprintf+0x634>
    64fa:	88 e7       	ldi	r24, 0x78	; 120
    64fc:	90 e0       	ldi	r25, 0x00	; 0
    64fe:	02 c0       	rjmp	.+4      	; 0x6504 <vfprintf+0x638>
    6500:	88 e5       	ldi	r24, 0x58	; 88
    6502:	90 e0       	ldi	r25, 0x00	; 0
    6504:	b7 01       	movw	r22, r14
    6506:	0c c0       	rjmp	.+24     	; 0x6520 <vfprintf+0x654>
    6508:	80 2f       	mov	r24, r16
    650a:	86 78       	andi	r24, 0x86	; 134
    650c:	59 f0       	breq	.+22     	; 0x6524 <vfprintf+0x658>
    650e:	01 ff       	sbrs	r16, 1
    6510:	02 c0       	rjmp	.+4      	; 0x6516 <vfprintf+0x64a>
    6512:	8b e2       	ldi	r24, 0x2B	; 43
    6514:	01 c0       	rjmp	.+2      	; 0x6518 <vfprintf+0x64c>
    6516:	80 e2       	ldi	r24, 0x20	; 32
    6518:	07 fd       	sbrc	r16, 7
    651a:	8d e2       	ldi	r24, 0x2D	; 45
    651c:	b7 01       	movw	r22, r14
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    6524:	c1 16       	cp	r12, r17
    6526:	38 f4       	brcc	.+14     	; 0x6536 <vfprintf+0x66a>
    6528:	b7 01       	movw	r22, r14
    652a:	80 e3       	ldi	r24, 0x30	; 48
    652c:	90 e0       	ldi	r25, 0x00	; 0
    652e:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    6532:	11 50       	subi	r17, 0x01	; 1
    6534:	f7 cf       	rjmp	.-18     	; 0x6524 <vfprintf+0x658>
    6536:	ca 94       	dec	r12
    6538:	f3 01       	movw	r30, r6
    653a:	ec 0d       	add	r30, r12
    653c:	f1 1d       	adc	r31, r1
    653e:	80 81       	ld	r24, Z
    6540:	b7 01       	movw	r22, r14
    6542:	90 e0       	ldi	r25, 0x00	; 0
    6544:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    6548:	c1 10       	cpse	r12, r1
    654a:	f5 cf       	rjmp	.-22     	; 0x6536 <vfprintf+0x66a>
    654c:	15 c0       	rjmp	.+42     	; 0x6578 <vfprintf+0x6ac>
    654e:	f4 e0       	ldi	r31, 0x04	; 4
    6550:	f5 15       	cp	r31, r5
    6552:	60 f5       	brcc	.+88     	; 0x65ac <vfprintf+0x6e0>
    6554:	84 e0       	ldi	r24, 0x04	; 4
    6556:	58 1a       	sub	r5, r24
    6558:	93 fe       	sbrs	r9, 3
    655a:	1f c0       	rjmp	.+62     	; 0x659a <vfprintf+0x6ce>
    655c:	01 11       	cpse	r16, r1
    655e:	27 c0       	rjmp	.+78     	; 0x65ae <vfprintf+0x6e2>
    6560:	2c 85       	ldd	r18, Y+12	; 0x0c
    6562:	23 ff       	sbrs	r18, 3
    6564:	2a c0       	rjmp	.+84     	; 0x65ba <vfprintf+0x6ee>
    6566:	0c e3       	ldi	r16, 0x3C	; 60
    6568:	12 e0       	ldi	r17, 0x02	; 2
    656a:	39 2d       	mov	r19, r9
    656c:	30 71       	andi	r19, 0x10	; 16
    656e:	93 2e       	mov	r9, r19
    6570:	f8 01       	movw	r30, r16
    6572:	84 91       	lpm	r24, Z
    6574:	81 11       	cpse	r24, r1
    6576:	24 c0       	rjmp	.+72     	; 0x65c0 <vfprintf+0x6f4>
    6578:	55 20       	and	r5, r5
    657a:	09 f4       	brne	.+2      	; 0x657e <vfprintf+0x6b2>
    657c:	e4 cc       	rjmp	.-1592   	; 0x5f46 <vfprintf+0x7a>
    657e:	b7 01       	movw	r22, r14
    6580:	80 e2       	ldi	r24, 0x20	; 32
    6582:	90 e0       	ldi	r25, 0x00	; 0
    6584:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    6588:	5a 94       	dec	r5
    658a:	f6 cf       	rjmp	.-20     	; 0x6578 <vfprintf+0x6ac>
    658c:	f7 01       	movw	r30, r14
    658e:	86 81       	ldd	r24, Z+6	; 0x06
    6590:	97 81       	ldd	r25, Z+7	; 0x07
    6592:	26 c0       	rjmp	.+76     	; 0x65e0 <vfprintf+0x714>
    6594:	8f ef       	ldi	r24, 0xFF	; 255
    6596:	9f ef       	ldi	r25, 0xFF	; 255
    6598:	23 c0       	rjmp	.+70     	; 0x65e0 <vfprintf+0x714>
    659a:	b7 01       	movw	r22, r14
    659c:	80 e2       	ldi	r24, 0x20	; 32
    659e:	90 e0       	ldi	r25, 0x00	; 0
    65a0:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    65a4:	5a 94       	dec	r5
    65a6:	51 10       	cpse	r5, r1
    65a8:	f8 cf       	rjmp	.-16     	; 0x659a <vfprintf+0x6ce>
    65aa:	d8 cf       	rjmp	.-80     	; 0x655c <vfprintf+0x690>
    65ac:	51 2c       	mov	r5, r1
    65ae:	b7 01       	movw	r22, r14
    65b0:	80 2f       	mov	r24, r16
    65b2:	90 e0       	ldi	r25, 0x00	; 0
    65b4:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    65b8:	d3 cf       	rjmp	.-90     	; 0x6560 <vfprintf+0x694>
    65ba:	00 e4       	ldi	r16, 0x40	; 64
    65bc:	12 e0       	ldi	r17, 0x02	; 2
    65be:	d5 cf       	rjmp	.-86     	; 0x656a <vfprintf+0x69e>
    65c0:	91 10       	cpse	r9, r1
    65c2:	80 52       	subi	r24, 0x20	; 32
    65c4:	b7 01       	movw	r22, r14
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	0e 94 45 34 	call	0x688a	; 0x688a <fputc>
    65cc:	0f 5f       	subi	r16, 0xFF	; 255
    65ce:	1f 4f       	sbci	r17, 0xFF	; 255
    65d0:	cf cf       	rjmp	.-98     	; 0x6570 <vfprintf+0x6a4>
    65d2:	23 e0       	ldi	r18, 0x03	; 3
    65d4:	25 15       	cp	r18, r5
    65d6:	10 f4       	brcc	.+4      	; 0x65dc <vfprintf+0x710>
    65d8:	83 e0       	ldi	r24, 0x03	; 3
    65da:	bd cf       	rjmp	.-134    	; 0x6556 <vfprintf+0x68a>
    65dc:	51 2c       	mov	r5, r1
    65de:	c0 cf       	rjmp	.-128    	; 0x6560 <vfprintf+0x694>
    65e0:	60 96       	adiw	r28, 0x10	; 16
    65e2:	cd bf       	out	0x3d, r28	; 61
    65e4:	de bf       	out	0x3e, r29	; 62
    65e6:	df 91       	pop	r29
    65e8:	cf 91       	pop	r28
    65ea:	1f 91       	pop	r17
    65ec:	0f 91       	pop	r16
    65ee:	ff 90       	pop	r15
    65f0:	ef 90       	pop	r14
    65f2:	df 90       	pop	r13
    65f4:	cf 90       	pop	r12
    65f6:	bf 90       	pop	r11
    65f8:	af 90       	pop	r10
    65fa:	9f 90       	pop	r9
    65fc:	8f 90       	pop	r8
    65fe:	7f 90       	pop	r7
    6600:	6f 90       	pop	r6
    6602:	5f 90       	pop	r5
    6604:	4f 90       	pop	r4
    6606:	3f 90       	pop	r3
    6608:	2f 90       	pop	r2
    660a:	08 95       	ret

0000660c <__tablejump2__>:
    660c:	ee 0f       	add	r30, r30
    660e:	ff 1f       	adc	r31, r31
    6610:	88 1f       	adc	r24, r24
    6612:	8b bf       	out	0x3b, r24	; 59
    6614:	07 90       	elpm	r0, Z+
    6616:	f6 91       	elpm	r31, Z
    6618:	e0 2d       	mov	r30, r0
    661a:	19 94       	eijmp

0000661c <__ftoa_engine>:
    661c:	28 30       	cpi	r18, 0x08	; 8
    661e:	08 f0       	brcs	.+2      	; 0x6622 <__ftoa_engine+0x6>
    6620:	27 e0       	ldi	r18, 0x07	; 7
    6622:	33 27       	eor	r19, r19
    6624:	da 01       	movw	r26, r20
    6626:	99 0f       	add	r25, r25
    6628:	31 1d       	adc	r19, r1
    662a:	87 fd       	sbrc	r24, 7
    662c:	91 60       	ori	r25, 0x01	; 1
    662e:	00 96       	adiw	r24, 0x00	; 0
    6630:	61 05       	cpc	r22, r1
    6632:	71 05       	cpc	r23, r1
    6634:	39 f4       	brne	.+14     	; 0x6644 <__ftoa_engine+0x28>
    6636:	32 60       	ori	r19, 0x02	; 2
    6638:	2e 5f       	subi	r18, 0xFE	; 254
    663a:	3d 93       	st	X+, r19
    663c:	30 e3       	ldi	r19, 0x30	; 48
    663e:	2a 95       	dec	r18
    6640:	e1 f7       	brne	.-8      	; 0x663a <__ftoa_engine+0x1e>
    6642:	08 95       	ret
    6644:	9f 3f       	cpi	r25, 0xFF	; 255
    6646:	30 f0       	brcs	.+12     	; 0x6654 <__ftoa_engine+0x38>
    6648:	80 38       	cpi	r24, 0x80	; 128
    664a:	71 05       	cpc	r23, r1
    664c:	61 05       	cpc	r22, r1
    664e:	09 f0       	breq	.+2      	; 0x6652 <__ftoa_engine+0x36>
    6650:	3c 5f       	subi	r19, 0xFC	; 252
    6652:	3c 5f       	subi	r19, 0xFC	; 252
    6654:	3d 93       	st	X+, r19
    6656:	91 30       	cpi	r25, 0x01	; 1
    6658:	08 f0       	brcs	.+2      	; 0x665c <__ftoa_engine+0x40>
    665a:	80 68       	ori	r24, 0x80	; 128
    665c:	91 1d       	adc	r25, r1
    665e:	df 93       	push	r29
    6660:	cf 93       	push	r28
    6662:	1f 93       	push	r17
    6664:	0f 93       	push	r16
    6666:	ff 92       	push	r15
    6668:	ef 92       	push	r14
    666a:	19 2f       	mov	r17, r25
    666c:	98 7f       	andi	r25, 0xF8	; 248
    666e:	96 95       	lsr	r25
    6670:	e9 2f       	mov	r30, r25
    6672:	96 95       	lsr	r25
    6674:	96 95       	lsr	r25
    6676:	e9 0f       	add	r30, r25
    6678:	ff 27       	eor	r31, r31
    667a:	e2 56       	subi	r30, 0x62	; 98
    667c:	fd 4f       	sbci	r31, 0xFD	; 253
    667e:	99 27       	eor	r25, r25
    6680:	33 27       	eor	r19, r19
    6682:	ee 24       	eor	r14, r14
    6684:	ff 24       	eor	r15, r15
    6686:	a7 01       	movw	r20, r14
    6688:	e7 01       	movw	r28, r14
    668a:	05 90       	lpm	r0, Z+
    668c:	08 94       	sec
    668e:	07 94       	ror	r0
    6690:	28 f4       	brcc	.+10     	; 0x669c <__ftoa_engine+0x80>
    6692:	36 0f       	add	r19, r22
    6694:	e7 1e       	adc	r14, r23
    6696:	f8 1e       	adc	r15, r24
    6698:	49 1f       	adc	r20, r25
    669a:	51 1d       	adc	r21, r1
    669c:	66 0f       	add	r22, r22
    669e:	77 1f       	adc	r23, r23
    66a0:	88 1f       	adc	r24, r24
    66a2:	99 1f       	adc	r25, r25
    66a4:	06 94       	lsr	r0
    66a6:	a1 f7       	brne	.-24     	; 0x6690 <__ftoa_engine+0x74>
    66a8:	05 90       	lpm	r0, Z+
    66aa:	07 94       	ror	r0
    66ac:	28 f4       	brcc	.+10     	; 0x66b8 <__ftoa_engine+0x9c>
    66ae:	e7 0e       	add	r14, r23
    66b0:	f8 1e       	adc	r15, r24
    66b2:	49 1f       	adc	r20, r25
    66b4:	56 1f       	adc	r21, r22
    66b6:	c1 1d       	adc	r28, r1
    66b8:	77 0f       	add	r23, r23
    66ba:	88 1f       	adc	r24, r24
    66bc:	99 1f       	adc	r25, r25
    66be:	66 1f       	adc	r22, r22
    66c0:	06 94       	lsr	r0
    66c2:	a1 f7       	brne	.-24     	; 0x66ac <__ftoa_engine+0x90>
    66c4:	05 90       	lpm	r0, Z+
    66c6:	07 94       	ror	r0
    66c8:	28 f4       	brcc	.+10     	; 0x66d4 <__ftoa_engine+0xb8>
    66ca:	f8 0e       	add	r15, r24
    66cc:	49 1f       	adc	r20, r25
    66ce:	56 1f       	adc	r21, r22
    66d0:	c7 1f       	adc	r28, r23
    66d2:	d1 1d       	adc	r29, r1
    66d4:	88 0f       	add	r24, r24
    66d6:	99 1f       	adc	r25, r25
    66d8:	66 1f       	adc	r22, r22
    66da:	77 1f       	adc	r23, r23
    66dc:	06 94       	lsr	r0
    66de:	a1 f7       	brne	.-24     	; 0x66c8 <__ftoa_engine+0xac>
    66e0:	05 90       	lpm	r0, Z+
    66e2:	07 94       	ror	r0
    66e4:	20 f4       	brcc	.+8      	; 0x66ee <__ftoa_engine+0xd2>
    66e6:	49 0f       	add	r20, r25
    66e8:	56 1f       	adc	r21, r22
    66ea:	c7 1f       	adc	r28, r23
    66ec:	d8 1f       	adc	r29, r24
    66ee:	99 0f       	add	r25, r25
    66f0:	66 1f       	adc	r22, r22
    66f2:	77 1f       	adc	r23, r23
    66f4:	88 1f       	adc	r24, r24
    66f6:	06 94       	lsr	r0
    66f8:	a9 f7       	brne	.-22     	; 0x66e4 <__ftoa_engine+0xc8>
    66fa:	84 91       	lpm	r24, Z
    66fc:	10 95       	com	r17
    66fe:	17 70       	andi	r17, 0x07	; 7
    6700:	41 f0       	breq	.+16     	; 0x6712 <__ftoa_engine+0xf6>
    6702:	d6 95       	lsr	r29
    6704:	c7 95       	ror	r28
    6706:	57 95       	ror	r21
    6708:	47 95       	ror	r20
    670a:	f7 94       	ror	r15
    670c:	e7 94       	ror	r14
    670e:	1a 95       	dec	r17
    6710:	c1 f7       	brne	.-16     	; 0x6702 <__ftoa_engine+0xe6>
    6712:	e4 e4       	ldi	r30, 0x44	; 68
    6714:	f2 e0       	ldi	r31, 0x02	; 2
    6716:	68 94       	set
    6718:	15 90       	lpm	r1, Z+
    671a:	15 91       	lpm	r17, Z+
    671c:	35 91       	lpm	r19, Z+
    671e:	65 91       	lpm	r22, Z+
    6720:	95 91       	lpm	r25, Z+
    6722:	05 90       	lpm	r0, Z+
    6724:	7f e2       	ldi	r23, 0x2F	; 47
    6726:	73 95       	inc	r23
    6728:	e1 18       	sub	r14, r1
    672a:	f1 0a       	sbc	r15, r17
    672c:	43 0b       	sbc	r20, r19
    672e:	56 0b       	sbc	r21, r22
    6730:	c9 0b       	sbc	r28, r25
    6732:	d0 09       	sbc	r29, r0
    6734:	c0 f7       	brcc	.-16     	; 0x6726 <__ftoa_engine+0x10a>
    6736:	e1 0c       	add	r14, r1
    6738:	f1 1e       	adc	r15, r17
    673a:	43 1f       	adc	r20, r19
    673c:	56 1f       	adc	r21, r22
    673e:	c9 1f       	adc	r28, r25
    6740:	d0 1d       	adc	r29, r0
    6742:	7e f4       	brtc	.+30     	; 0x6762 <__ftoa_engine+0x146>
    6744:	70 33       	cpi	r23, 0x30	; 48
    6746:	11 f4       	brne	.+4      	; 0x674c <__ftoa_engine+0x130>
    6748:	8a 95       	dec	r24
    674a:	e6 cf       	rjmp	.-52     	; 0x6718 <__ftoa_engine+0xfc>
    674c:	e8 94       	clt
    674e:	01 50       	subi	r16, 0x01	; 1
    6750:	30 f0       	brcs	.+12     	; 0x675e <__ftoa_engine+0x142>
    6752:	08 0f       	add	r16, r24
    6754:	0a f4       	brpl	.+2      	; 0x6758 <__ftoa_engine+0x13c>
    6756:	00 27       	eor	r16, r16
    6758:	02 17       	cp	r16, r18
    675a:	08 f4       	brcc	.+2      	; 0x675e <__ftoa_engine+0x142>
    675c:	20 2f       	mov	r18, r16
    675e:	23 95       	inc	r18
    6760:	02 2f       	mov	r16, r18
    6762:	7a 33       	cpi	r23, 0x3A	; 58
    6764:	28 f0       	brcs	.+10     	; 0x6770 <__ftoa_engine+0x154>
    6766:	79 e3       	ldi	r23, 0x39	; 57
    6768:	7d 93       	st	X+, r23
    676a:	2a 95       	dec	r18
    676c:	e9 f7       	brne	.-6      	; 0x6768 <__ftoa_engine+0x14c>
    676e:	10 c0       	rjmp	.+32     	; 0x6790 <__ftoa_engine+0x174>
    6770:	7d 93       	st	X+, r23
    6772:	2a 95       	dec	r18
    6774:	89 f6       	brne	.-94     	; 0x6718 <__ftoa_engine+0xfc>
    6776:	06 94       	lsr	r0
    6778:	97 95       	ror	r25
    677a:	67 95       	ror	r22
    677c:	37 95       	ror	r19
    677e:	17 95       	ror	r17
    6780:	17 94       	ror	r1
    6782:	e1 18       	sub	r14, r1
    6784:	f1 0a       	sbc	r15, r17
    6786:	43 0b       	sbc	r20, r19
    6788:	56 0b       	sbc	r21, r22
    678a:	c9 0b       	sbc	r28, r25
    678c:	d0 09       	sbc	r29, r0
    678e:	98 f0       	brcs	.+38     	; 0x67b6 <__ftoa_engine+0x19a>
    6790:	23 95       	inc	r18
    6792:	7e 91       	ld	r23, -X
    6794:	73 95       	inc	r23
    6796:	7a 33       	cpi	r23, 0x3A	; 58
    6798:	08 f0       	brcs	.+2      	; 0x679c <__ftoa_engine+0x180>
    679a:	70 e3       	ldi	r23, 0x30	; 48
    679c:	7c 93       	st	X, r23
    679e:	20 13       	cpse	r18, r16
    67a0:	b8 f7       	brcc	.-18     	; 0x6790 <__ftoa_engine+0x174>
    67a2:	7e 91       	ld	r23, -X
    67a4:	70 61       	ori	r23, 0x10	; 16
    67a6:	7d 93       	st	X+, r23
    67a8:	30 f0       	brcs	.+12     	; 0x67b6 <__ftoa_engine+0x19a>
    67aa:	83 95       	inc	r24
    67ac:	71 e3       	ldi	r23, 0x31	; 49
    67ae:	7d 93       	st	X+, r23
    67b0:	70 e3       	ldi	r23, 0x30	; 48
    67b2:	2a 95       	dec	r18
    67b4:	e1 f7       	brne	.-8      	; 0x67ae <__ftoa_engine+0x192>
    67b6:	11 24       	eor	r1, r1
    67b8:	ef 90       	pop	r14
    67ba:	ff 90       	pop	r15
    67bc:	0f 91       	pop	r16
    67be:	1f 91       	pop	r17
    67c0:	cf 91       	pop	r28
    67c2:	df 91       	pop	r29
    67c4:	99 27       	eor	r25, r25
    67c6:	87 fd       	sbrc	r24, 7
    67c8:	90 95       	com	r25
    67ca:	08 95       	ret

000067cc <strnlen_P>:
    67cc:	fc 01       	movw	r30, r24
    67ce:	05 90       	lpm	r0, Z+
    67d0:	61 50       	subi	r22, 0x01	; 1
    67d2:	70 40       	sbci	r23, 0x00	; 0
    67d4:	01 10       	cpse	r0, r1
    67d6:	d8 f7       	brcc	.-10     	; 0x67ce <strnlen_P+0x2>
    67d8:	80 95       	com	r24
    67da:	90 95       	com	r25
    67dc:	8e 0f       	add	r24, r30
    67de:	9f 1f       	adc	r25, r31
    67e0:	08 95       	ret

000067e2 <memcpy>:
    67e2:	fb 01       	movw	r30, r22
    67e4:	dc 01       	movw	r26, r24
    67e6:	02 c0       	rjmp	.+4      	; 0x67ec <memcpy+0xa>
    67e8:	01 90       	ld	r0, Z+
    67ea:	0d 92       	st	X+, r0
    67ec:	41 50       	subi	r20, 0x01	; 1
    67ee:	50 40       	sbci	r21, 0x00	; 0
    67f0:	d8 f7       	brcc	.-10     	; 0x67e8 <memcpy+0x6>
    67f2:	08 95       	ret

000067f4 <memset>:
    67f4:	dc 01       	movw	r26, r24
    67f6:	01 c0       	rjmp	.+2      	; 0x67fa <memset+0x6>
    67f8:	6d 93       	st	X+, r22
    67fa:	41 50       	subi	r20, 0x01	; 1
    67fc:	50 40       	sbci	r21, 0x00	; 0
    67fe:	e0 f7       	brcc	.-8      	; 0x67f8 <memset+0x4>
    6800:	08 95       	ret

00006802 <strlen>:
    6802:	fc 01       	movw	r30, r24
    6804:	01 90       	ld	r0, Z+
    6806:	00 20       	and	r0, r0
    6808:	e9 f7       	brne	.-6      	; 0x6804 <strlen+0x2>
    680a:	80 95       	com	r24
    680c:	90 95       	com	r25
    680e:	8e 0f       	add	r24, r30
    6810:	9f 1f       	adc	r25, r31
    6812:	08 95       	ret

00006814 <strnlen>:
    6814:	fc 01       	movw	r30, r24
    6816:	61 50       	subi	r22, 0x01	; 1
    6818:	70 40       	sbci	r23, 0x00	; 0
    681a:	01 90       	ld	r0, Z+
    681c:	01 10       	cpse	r0, r1
    681e:	d8 f7       	brcc	.-10     	; 0x6816 <strnlen+0x2>
    6820:	80 95       	com	r24
    6822:	90 95       	com	r25
    6824:	8e 0f       	add	r24, r30
    6826:	9f 1f       	adc	r25, r31
    6828:	08 95       	ret

0000682a <itoa>:
    682a:	45 32       	cpi	r20, 0x25	; 37
    682c:	51 05       	cpc	r21, r1
    682e:	20 f4       	brcc	.+8      	; 0x6838 <itoa+0xe>
    6830:	42 30       	cpi	r20, 0x02	; 2
    6832:	10 f0       	brcs	.+4      	; 0x6838 <itoa+0xe>
    6834:	0c 94 20 34 	jmp	0x6840	; 0x6840 <__itoa_ncheck>
    6838:	fb 01       	movw	r30, r22
    683a:	10 82       	st	Z, r1
    683c:	cb 01       	movw	r24, r22
    683e:	08 95       	ret

00006840 <__itoa_ncheck>:
    6840:	bb 27       	eor	r27, r27
    6842:	4a 30       	cpi	r20, 0x0A	; 10
    6844:	31 f4       	brne	.+12     	; 0x6852 <__itoa_ncheck+0x12>
    6846:	99 23       	and	r25, r25
    6848:	22 f4       	brpl	.+8      	; 0x6852 <__itoa_ncheck+0x12>
    684a:	bd e2       	ldi	r27, 0x2D	; 45
    684c:	90 95       	com	r25
    684e:	81 95       	neg	r24
    6850:	9f 4f       	sbci	r25, 0xFF	; 255
    6852:	0c 94 2c 34 	jmp	0x6858	; 0x6858 <__utoa_common>

00006856 <__utoa_ncheck>:
    6856:	bb 27       	eor	r27, r27

00006858 <__utoa_common>:
    6858:	fb 01       	movw	r30, r22
    685a:	55 27       	eor	r21, r21
    685c:	aa 27       	eor	r26, r26
    685e:	88 0f       	add	r24, r24
    6860:	99 1f       	adc	r25, r25
    6862:	aa 1f       	adc	r26, r26
    6864:	a4 17       	cp	r26, r20
    6866:	10 f0       	brcs	.+4      	; 0x686c <__utoa_common+0x14>
    6868:	a4 1b       	sub	r26, r20
    686a:	83 95       	inc	r24
    686c:	50 51       	subi	r21, 0x10	; 16
    686e:	b9 f7       	brne	.-18     	; 0x685e <__utoa_common+0x6>
    6870:	a0 5d       	subi	r26, 0xD0	; 208
    6872:	aa 33       	cpi	r26, 0x3A	; 58
    6874:	08 f0       	brcs	.+2      	; 0x6878 <__utoa_common+0x20>
    6876:	a9 5d       	subi	r26, 0xD9	; 217
    6878:	a1 93       	st	Z+, r26
    687a:	00 97       	sbiw	r24, 0x00	; 0
    687c:	79 f7       	brne	.-34     	; 0x685c <__utoa_common+0x4>
    687e:	b1 11       	cpse	r27, r1
    6880:	b1 93       	st	Z+, r27
    6882:	11 92       	st	Z+, r1
    6884:	cb 01       	movw	r24, r22
    6886:	0c 94 08 35 	jmp	0x6a10	; 0x6a10 <strrev>

0000688a <fputc>:
    688a:	0f 93       	push	r16
    688c:	1f 93       	push	r17
    688e:	cf 93       	push	r28
    6890:	df 93       	push	r29
    6892:	fb 01       	movw	r30, r22
    6894:	23 81       	ldd	r18, Z+3	; 0x03
    6896:	21 fd       	sbrc	r18, 1
    6898:	03 c0       	rjmp	.+6      	; 0x68a0 <fputc+0x16>
    689a:	8f ef       	ldi	r24, 0xFF	; 255
    689c:	9f ef       	ldi	r25, 0xFF	; 255
    689e:	2c c0       	rjmp	.+88     	; 0x68f8 <fputc+0x6e>
    68a0:	22 ff       	sbrs	r18, 2
    68a2:	16 c0       	rjmp	.+44     	; 0x68d0 <fputc+0x46>
    68a4:	46 81       	ldd	r20, Z+6	; 0x06
    68a6:	57 81       	ldd	r21, Z+7	; 0x07
    68a8:	24 81       	ldd	r18, Z+4	; 0x04
    68aa:	35 81       	ldd	r19, Z+5	; 0x05
    68ac:	42 17       	cp	r20, r18
    68ae:	53 07       	cpc	r21, r19
    68b0:	44 f4       	brge	.+16     	; 0x68c2 <fputc+0x38>
    68b2:	a0 81       	ld	r26, Z
    68b4:	b1 81       	ldd	r27, Z+1	; 0x01
    68b6:	9d 01       	movw	r18, r26
    68b8:	2f 5f       	subi	r18, 0xFF	; 255
    68ba:	3f 4f       	sbci	r19, 0xFF	; 255
    68bc:	20 83       	st	Z, r18
    68be:	31 83       	std	Z+1, r19	; 0x01
    68c0:	8c 93       	st	X, r24
    68c2:	26 81       	ldd	r18, Z+6	; 0x06
    68c4:	37 81       	ldd	r19, Z+7	; 0x07
    68c6:	2f 5f       	subi	r18, 0xFF	; 255
    68c8:	3f 4f       	sbci	r19, 0xFF	; 255
    68ca:	26 83       	std	Z+6, r18	; 0x06
    68cc:	37 83       	std	Z+7, r19	; 0x07
    68ce:	14 c0       	rjmp	.+40     	; 0x68f8 <fputc+0x6e>
    68d0:	8b 01       	movw	r16, r22
    68d2:	ec 01       	movw	r28, r24
    68d4:	fb 01       	movw	r30, r22
    68d6:	00 84       	ldd	r0, Z+8	; 0x08
    68d8:	f1 85       	ldd	r31, Z+9	; 0x09
    68da:	e0 2d       	mov	r30, r0
    68dc:	19 95       	eicall
    68de:	89 2b       	or	r24, r25
    68e0:	e1 f6       	brne	.-72     	; 0x689a <fputc+0x10>
    68e2:	d8 01       	movw	r26, r16
    68e4:	16 96       	adiw	r26, 0x06	; 6
    68e6:	8d 91       	ld	r24, X+
    68e8:	9c 91       	ld	r25, X
    68ea:	17 97       	sbiw	r26, 0x07	; 7
    68ec:	01 96       	adiw	r24, 0x01	; 1
    68ee:	16 96       	adiw	r26, 0x06	; 6
    68f0:	8d 93       	st	X+, r24
    68f2:	9c 93       	st	X, r25
    68f4:	17 97       	sbiw	r26, 0x07	; 7
    68f6:	ce 01       	movw	r24, r28
    68f8:	df 91       	pop	r29
    68fa:	cf 91       	pop	r28
    68fc:	1f 91       	pop	r17
    68fe:	0f 91       	pop	r16
    6900:	08 95       	ret

00006902 <sprintf>:
    6902:	0f 93       	push	r16
    6904:	1f 93       	push	r17
    6906:	cf 93       	push	r28
    6908:	df 93       	push	r29
    690a:	cd b7       	in	r28, 0x3d	; 61
    690c:	de b7       	in	r29, 0x3e	; 62
    690e:	2e 97       	sbiw	r28, 0x0e	; 14
    6910:	cd bf       	out	0x3d, r28	; 61
    6912:	de bf       	out	0x3e, r29	; 62
    6914:	0e 89       	ldd	r16, Y+22	; 0x16
    6916:	1f 89       	ldd	r17, Y+23	; 0x17
    6918:	86 e0       	ldi	r24, 0x06	; 6
    691a:	8c 83       	std	Y+4, r24	; 0x04
    691c:	09 83       	std	Y+1, r16	; 0x01
    691e:	1a 83       	std	Y+2, r17	; 0x02
    6920:	8f ef       	ldi	r24, 0xFF	; 255
    6922:	9f e7       	ldi	r25, 0x7F	; 127
    6924:	8d 83       	std	Y+5, r24	; 0x05
    6926:	9e 83       	std	Y+6, r25	; 0x06
    6928:	ae 01       	movw	r20, r28
    692a:	46 5e       	subi	r20, 0xE6	; 230
    692c:	5f 4f       	sbci	r21, 0xFF	; 255
    692e:	68 8d       	ldd	r22, Y+24	; 0x18
    6930:	79 8d       	ldd	r23, Y+25	; 0x19
    6932:	ce 01       	movw	r24, r28
    6934:	01 96       	adiw	r24, 0x01	; 1
    6936:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <vfprintf>
    693a:	ef 81       	ldd	r30, Y+7	; 0x07
    693c:	f8 85       	ldd	r31, Y+8	; 0x08
    693e:	e0 0f       	add	r30, r16
    6940:	f1 1f       	adc	r31, r17
    6942:	10 82       	st	Z, r1
    6944:	2e 96       	adiw	r28, 0x0e	; 14
    6946:	cd bf       	out	0x3d, r28	; 61
    6948:	de bf       	out	0x3e, r29	; 62
    694a:	df 91       	pop	r29
    694c:	cf 91       	pop	r28
    694e:	1f 91       	pop	r17
    6950:	0f 91       	pop	r16
    6952:	08 95       	ret

00006954 <__ultoa_invert>:
    6954:	fa 01       	movw	r30, r20
    6956:	aa 27       	eor	r26, r26
    6958:	28 30       	cpi	r18, 0x08	; 8
    695a:	51 f1       	breq	.+84     	; 0x69b0 <__ultoa_invert+0x5c>
    695c:	20 31       	cpi	r18, 0x10	; 16
    695e:	81 f1       	breq	.+96     	; 0x69c0 <__ultoa_invert+0x6c>
    6960:	e8 94       	clt
    6962:	6f 93       	push	r22
    6964:	6e 7f       	andi	r22, 0xFE	; 254
    6966:	6e 5f       	subi	r22, 0xFE	; 254
    6968:	7f 4f       	sbci	r23, 0xFF	; 255
    696a:	8f 4f       	sbci	r24, 0xFF	; 255
    696c:	9f 4f       	sbci	r25, 0xFF	; 255
    696e:	af 4f       	sbci	r26, 0xFF	; 255
    6970:	b1 e0       	ldi	r27, 0x01	; 1
    6972:	3e d0       	rcall	.+124    	; 0x69f0 <__ultoa_invert+0x9c>
    6974:	b4 e0       	ldi	r27, 0x04	; 4
    6976:	3c d0       	rcall	.+120    	; 0x69f0 <__ultoa_invert+0x9c>
    6978:	67 0f       	add	r22, r23
    697a:	78 1f       	adc	r23, r24
    697c:	89 1f       	adc	r24, r25
    697e:	9a 1f       	adc	r25, r26
    6980:	a1 1d       	adc	r26, r1
    6982:	68 0f       	add	r22, r24
    6984:	79 1f       	adc	r23, r25
    6986:	8a 1f       	adc	r24, r26
    6988:	91 1d       	adc	r25, r1
    698a:	a1 1d       	adc	r26, r1
    698c:	6a 0f       	add	r22, r26
    698e:	71 1d       	adc	r23, r1
    6990:	81 1d       	adc	r24, r1
    6992:	91 1d       	adc	r25, r1
    6994:	a1 1d       	adc	r26, r1
    6996:	20 d0       	rcall	.+64     	; 0x69d8 <__ultoa_invert+0x84>
    6998:	09 f4       	brne	.+2      	; 0x699c <__ultoa_invert+0x48>
    699a:	68 94       	set
    699c:	3f 91       	pop	r19
    699e:	2a e0       	ldi	r18, 0x0A	; 10
    69a0:	26 9f       	mul	r18, r22
    69a2:	11 24       	eor	r1, r1
    69a4:	30 19       	sub	r19, r0
    69a6:	30 5d       	subi	r19, 0xD0	; 208
    69a8:	31 93       	st	Z+, r19
    69aa:	de f6       	brtc	.-74     	; 0x6962 <__ultoa_invert+0xe>
    69ac:	cf 01       	movw	r24, r30
    69ae:	08 95       	ret
    69b0:	46 2f       	mov	r20, r22
    69b2:	47 70       	andi	r20, 0x07	; 7
    69b4:	40 5d       	subi	r20, 0xD0	; 208
    69b6:	41 93       	st	Z+, r20
    69b8:	b3 e0       	ldi	r27, 0x03	; 3
    69ba:	0f d0       	rcall	.+30     	; 0x69da <__ultoa_invert+0x86>
    69bc:	c9 f7       	brne	.-14     	; 0x69b0 <__ultoa_invert+0x5c>
    69be:	f6 cf       	rjmp	.-20     	; 0x69ac <__ultoa_invert+0x58>
    69c0:	46 2f       	mov	r20, r22
    69c2:	4f 70       	andi	r20, 0x0F	; 15
    69c4:	40 5d       	subi	r20, 0xD0	; 208
    69c6:	4a 33       	cpi	r20, 0x3A	; 58
    69c8:	18 f0       	brcs	.+6      	; 0x69d0 <__ultoa_invert+0x7c>
    69ca:	49 5d       	subi	r20, 0xD9	; 217
    69cc:	31 fd       	sbrc	r19, 1
    69ce:	40 52       	subi	r20, 0x20	; 32
    69d0:	41 93       	st	Z+, r20
    69d2:	02 d0       	rcall	.+4      	; 0x69d8 <__ultoa_invert+0x84>
    69d4:	a9 f7       	brne	.-22     	; 0x69c0 <__ultoa_invert+0x6c>
    69d6:	ea cf       	rjmp	.-44     	; 0x69ac <__ultoa_invert+0x58>
    69d8:	b4 e0       	ldi	r27, 0x04	; 4
    69da:	a6 95       	lsr	r26
    69dc:	97 95       	ror	r25
    69de:	87 95       	ror	r24
    69e0:	77 95       	ror	r23
    69e2:	67 95       	ror	r22
    69e4:	ba 95       	dec	r27
    69e6:	c9 f7       	brne	.-14     	; 0x69da <__ultoa_invert+0x86>
    69e8:	00 97       	sbiw	r24, 0x00	; 0
    69ea:	61 05       	cpc	r22, r1
    69ec:	71 05       	cpc	r23, r1
    69ee:	08 95       	ret
    69f0:	9b 01       	movw	r18, r22
    69f2:	ac 01       	movw	r20, r24
    69f4:	0a 2e       	mov	r0, r26
    69f6:	06 94       	lsr	r0
    69f8:	57 95       	ror	r21
    69fa:	47 95       	ror	r20
    69fc:	37 95       	ror	r19
    69fe:	27 95       	ror	r18
    6a00:	ba 95       	dec	r27
    6a02:	c9 f7       	brne	.-14     	; 0x69f6 <__ultoa_invert+0xa2>
    6a04:	62 0f       	add	r22, r18
    6a06:	73 1f       	adc	r23, r19
    6a08:	84 1f       	adc	r24, r20
    6a0a:	95 1f       	adc	r25, r21
    6a0c:	a0 1d       	adc	r26, r0
    6a0e:	08 95       	ret

00006a10 <strrev>:
    6a10:	dc 01       	movw	r26, r24
    6a12:	fc 01       	movw	r30, r24
    6a14:	67 2f       	mov	r22, r23
    6a16:	71 91       	ld	r23, Z+
    6a18:	77 23       	and	r23, r23
    6a1a:	e1 f7       	brne	.-8      	; 0x6a14 <strrev+0x4>
    6a1c:	32 97       	sbiw	r30, 0x02	; 2
    6a1e:	04 c0       	rjmp	.+8      	; 0x6a28 <strrev+0x18>
    6a20:	7c 91       	ld	r23, X
    6a22:	6d 93       	st	X+, r22
    6a24:	70 83       	st	Z, r23
    6a26:	62 91       	ld	r22, -Z
    6a28:	ae 17       	cp	r26, r30
    6a2a:	bf 07       	cpc	r27, r31
    6a2c:	c8 f3       	brcs	.-14     	; 0x6a20 <strrev+0x10>
    6a2e:	08 95       	ret

00006a30 <_exit>:
    6a30:	f8 94       	cli

00006a32 <__stop_program>:
    6a32:	ff cf       	rjmp	.-2      	; 0x6a32 <__stop_program>
